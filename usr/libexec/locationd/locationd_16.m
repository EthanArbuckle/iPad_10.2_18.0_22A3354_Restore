uint64_t sub_1009EC58C(uint64_t a1, float *a2)
{
  uint64_t result;
  void *v5;
  id v6;
  float v7;

  result = sub_1009EBD74();
  if ((_DWORD)result)
  {
    v5 = (void *)(*(uint64_t (**)(_QWORD, const __CFString *))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), CFSTR("AppleVoltageDictionary"));
    v6 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("GYRO_TEMP"));
    objc_msgSend(v6, "floatValue");
    *a2 = v7 / 100.0;

    return v6 != 0;
  }
  return result;
}

double sub_1009EC608(uint64_t a1, int a2, double *a3)
{
  double v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  double v11;
  double v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  double v16;
  double v17;
  NSObject *v19;
  double v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BYTE v32[24];

  if (a2 == 1)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102164750);
    v15 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      v16 = *a3;
      *(_DWORD *)buf = 134349056;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Setting gyro temperature update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102164750);
      v21 = *a3;
      *(_DWORD *)v32 = 134349056;
      *(double *)&v32[4] = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Setting gyro temperature update interval to %{public}f", v32, 12);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v17 = *a3;
    if (*a3 < 1.0 && v17 != 0.0)
      v17 = 1.0;
    *(double *)(a1 + 72) = v17;
    sub_1009EBC38(a1, *(_DWORD *)(a1 + 32));
    return *(double *)(a1 + 72);
  }
  else if (a2)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102164750);
    v19 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v26) = a2;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Unrecognized gyro notification %{public}d", buf, 8u);
    }
    v6 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102164750);
      *(_DWORD *)v32 = 67240192;
      *(_DWORD *)&v32[4] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "Unrecognized gyro notification %{public}d", v32, 8);
      v14 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v24);
      goto LABEL_41;
    }
  }
  else
  {
    *(double *)(a1 + 64) = *a3;
    sub_1009EBC38(a1, *(_DWORD *)(a1 + 32));
    v6 = sub_1009EC168(a1, (double *)(a1 + 64));
    if (*(_BYTE *)(a1 + 96))
    {
      *(_QWORD *)v32 = off_102171570;
      *(_QWORD *)&v32[8] = CFAbsoluteTimeGetCurrent();
      v7 = v6;
      *(float *)&v32[20] = v7;
      v8 = sub_1011B78D4();
      sub_1011B8DB0(v8, (uint64_t)v32);
      sub_1015EB864(buf);
      sub_101604D08((uint64_t)buf);
      v31 |= 1u;
      v29 = *(_QWORD *)&v32[8];
      v9 = v30;
      *(_BYTE *)(v30 + 12) |= 1u;
      *(float *)(v9 + 8) = v7;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_102164770);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)buf);
      sub_1015EE304((PB::Base *)buf);
    }
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102164750);
    v10 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      v11 = *a3;
      *(_DWORD *)buf = 134349312;
      v26 = v11;
      v27 = 2050;
      v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Set gyro data update interval to %{public}f,dt,%{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102164750);
      v12 = *a3;
      *(_DWORD *)v32 = 134349312;
      *(double *)&v32[4] = v12;
      *(_WORD *)&v32[12] = 2050;
      *(double *)&v32[14] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Set gyro data update interval to %{public}f,dt,%{public}f", v32, 22);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v13);
LABEL_41:
      if (v14 != buf)
        free(v14);
    }
  }
  return v6;
}

void sub_1009ECB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1009ECBBC()
{
  int v0;
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  unsigned __int8 v5[3];
  int v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  if (qword_1023061F8 != -1)
    dispatch_once(&qword_1023061F8, &stru_1021646F8);
  sub_1018BF25C(v5, "UseGyroInterruptCalForDtScale", (unsigned __int8 *)&byte_1023061F0, 0);
  v0 = v5[1];
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_102164750);
  v1 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    v12 = byte_1023061F0;
    v13 = 1024;
    v14 = v5[0];
    v15 = 1024;
    v16 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "UseInterruptCal,platformDefault,%u,overrideSet,%u,final,%u", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102164750);
    v7 = 1024;
    v8 = v5[0];
    v9 = 1024;
    v10 = v0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "UseInterruptCal,platformDefault,%u,overrideSet,%u,final,%u", &v6, 20, 67109632);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLGyro::useInterruptCalibrationForScaleFactor()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return v0 != 0;
}

uint64_t sub_1009ECDF0(uint64_t a1, float *a2, double *a3, unsigned int a4)
{
  double v8;
  double v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  float v17;
  float v18;
  float v19;
  double v20;
  double v21;
  NSObject *v22;
  double v23;
  double v24;
  CFAbsoluteTime Current;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  void *v39;
  float v40;
  float v41;
  float v42;
  double v43;
  double v44;
  const char *v45;
  uint8_t *v46;
  uint64_t v47;
  double v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  BOOL v61;
  _BYTE v62[24];
  double v63;
  _BYTE v64[12];
  unsigned int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  double v73;
  uint8_t buf[4];
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  unsigned int v83;
  __int16 v84;
  unsigned int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;

  v8 = *(double *)(a1 + 72);
  v9 = *a3;
  if (v8 > 0.0 && v9 > v8 + *(double *)(a1 + 48))
  {
    v57 = *a3;
    v10 = sub_1009EC58C(a1, (float *)&v58);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102164790);
    v11 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v75 = COERCE_DOUBLE("CLGyro");
      v76 = 1026;
      LODWORD(v77) = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Type,%{public}s,ret=%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102164790);
      *(_DWORD *)v62 = 136446466;
      *(_QWORD *)&v62[4] = "CLGyro";
      *(_WORD *)&v62[12] = 1026;
      *(_DWORD *)&v62[14] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "Type,%{public}s,ret=%{public}d", v62, 18);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 2, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
    if (v10)
    {
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102164790);
      v12 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v75 = COERCE_DOUBLE("GyroTemperature");
        v76 = 2050;
        v77 = *(float *)&v58;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Type,%{public}s,temperature,%{public}f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_102164790);
        *(_DWORD *)v62 = 136446466;
        *(_QWORD *)&v62[4] = "GyroTemperature";
        *(_WORD *)&v62[12] = 2050;
        *(double *)&v62[14] = *(float *)&v58;
        LODWORD(v55) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "Type,%{public}s,temperature,%{public}f", v62, *(_QWORD *)&v55);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      if (*(_BYTE *)(a1 + 96))
      {
        *(_QWORD *)v62 = off_1021714C0;
        *(_QWORD *)&v62[8] = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)&v62[20] = v58;
        v13 = sub_1011B78D4();
        sub_1011B8DB0(v13, (uint64_t)v62);
        sub_1015EB864(buf);
        sub_101604BDC((uint64_t)buf);
        v95 |= 1u;
        v92 = *(_QWORD *)&v62[8];
        v14 = v94;
        v15 = v58;
        *(_BYTE *)(v94 + 16) |= 2u;
        *(_DWORD *)(v14 + 12) = v15;
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_102164770);
        if (qword_1023118B0)
          sub_101888B64(qword_1023118B0, (uint64_t)buf);
        sub_1015EE304((PB::Base *)buf);
      }
      sub_10012AC18(a1, 1, (uint64_t)&v57, 16);
    }
    *(double *)(a1 + 48) = *a3;
    v9 = *a3;
  }
  v57 = v9;
  v58 = *(_QWORD *)a2;
  v59 = *((_DWORD *)a2 + 2);
  v60 = HIWORD(a4);
  v61 = (~a4 & 0x300) == 0;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_102164750);
  v16 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
  {
    v17 = *a2;
    v18 = a2[1];
    v19 = a2[2];
    v20 = *a3;
    v21 = sub_100078B88();
    *(_DWORD *)buf = 134220032;
    v75 = v17;
    v76 = 2048;
    v77 = v18;
    v78 = 2048;
    v79 = v19;
    v80 = 2048;
    v81 = v20;
    v82 = 1024;
    v83 = a4;
    v84 = 1024;
    v85 = HIWORD(a4) % 3u;
    v86 = 1024;
    v87 = (a4 >> 8) & 1;
    v88 = 1024;
    v89 = (a4 >> 9) & 1;
    v90 = 2048;
    v91 = v21;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[CLGyro] x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,subType,%d,sampleNum%%3,%d,triggerEnabled,%d,triggerOn,%d,now,%f", buf, 0x4Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102164750);
    v39 = off_10229FD58;
    v41 = *a2;
    v40 = a2[1];
    v42 = a2[2];
    v43 = *a3;
    v44 = sub_100078B88();
    *(_DWORD *)v62 = 134220032;
    *(double *)&v62[4] = v41;
    *(_WORD *)&v62[12] = 2048;
    *(double *)&v62[14] = v40;
    *(_WORD *)&v62[22] = 2048;
    v63 = v42;
    *(_WORD *)v64 = 2048;
    *(double *)&v64[2] = v43;
    *(_WORD *)&v64[10] = 1024;
    v65 = a4;
    v66 = 1024;
    v67 = HIWORD(a4) % 3u;
    v68 = 1024;
    v69 = (a4 >> 8) & 1;
    v70 = 1024;
    v71 = (a4 >> 9) & 1;
    v72 = 2048;
    v73 = v44;
    LODWORD(v55) = 76;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 2, "[CLGyro] x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,subType,%d,sampleNum%%3,%d,triggerEnabled,%d,triggerOn,%d,now,%f", COERCE_DOUBLE(v62), v55, v56, v57, v58, v59);
    v46 = (uint8_t *)v45;
    sub_100512490("Generic", 1, 0, 2, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
  if (*a3 < *(double *)(a1 + 56))
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102164750);
    v22 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
    {
      v23 = *(double *)(a1 + 56);
      v24 = *a3;
      *(_DWORD *)buf = 134218240;
      v75 = v23;
      v76 = 2048;
      v77 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Gyro time rollback, last timestamp, %f, current timestamp, %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102164750);
      v47 = *(_QWORD *)(a1 + 56);
      v48 = *a3;
      *(_DWORD *)v62 = 134218240;
      *(_QWORD *)&v62[4] = v47;
      *(_WORD *)&v62[12] = 2048;
      *(double *)&v62[14] = v48;
      LODWORD(v55) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "Gyro time rollback, last timestamp, %f, current timestamp, %f", COERCE_DOUBLE(v62), v55);
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 0, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
  }
  if (*(_BYTE *)(a1 + 96))
  {
    *(_QWORD *)v62 = off_102171410;
    Current = CFAbsoluteTimeGetCurrent();
    v26 = *a3;
    *(CFAbsoluteTime *)&v62[8] = Current;
    v27 = *(_QWORD *)a2;
    v63 = v26;
    *(_QWORD *)v64 = v27;
    *(float *)&v64[8] = a2[2];
    v65 = a4;
    LOBYTE(v66) = BYTE2(a4) - 3 * ((43691 * HIWORD(a4)) >> 17);
    HIBYTE(v66) = BYTE1(a4) & 1;
    LOBYTE(v67) = (a4 & 0x200) != 0;
    v28 = sub_1011B78D4();
    sub_1011B8DB0(v28, (uint64_t)v62);
    sub_1015EB864(buf);
    sub_101604B14((uint64_t)buf);
    v95 |= 1u;
    v92 = *(_QWORD *)&v62[8];
    v29 = v93;
    v30 = *a3;
    *(_WORD *)(v93 + 44) |= 1u;
    *(double *)(v29 + 8) = v30;
    v31 = v93;
    *(float *)&v30 = *a2;
    *(_WORD *)(v93 + 44) |= 0x10u;
    *(_DWORD *)(v31 + 28) = LODWORD(v30);
    v32 = v93;
    *(float *)&v30 = a2[1];
    *(_WORD *)(v93 + 44) |= 0x20u;
    *(_DWORD *)(v32 + 32) = LODWORD(v30);
    v33 = v93;
    *(float *)&v30 = a2[2];
    *(_WORD *)(v93 + 44) |= 0x40u;
    *(_DWORD *)(v33 + 36) = LODWORD(v30);
    v34 = v93;
    *(_WORD *)(v93 + 44) |= 8u;
    *(_DWORD *)(v34 + 24) = a4;
    v35 = v93;
    *(_WORD *)(v93 + 44) |= 4u;
    *(_DWORD *)(v35 + 20) = HIWORD(a4) % 3u;
    v36 = v93;
    *(_WORD *)(v93 + 44) |= 0x80u;
    *(_BYTE *)(v36 + 40) = BYTE1(a4) & 1;
    v37 = v93;
    *(_WORD *)(v93 + 44) |= 0x100u;
    *(_BYTE *)(v37 + 41) = (a4 & 0x200) != 0;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102164770);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  result = sub_10012AC18(a1, 0, (uint64_t)&v57, 24);
  *(double *)(a1 + 56) = *a3;
  return result;
}

void sub_1009ED834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1009ED864(id a1)
{
  unsigned int v1;
  char v2;

  v1 = sub_1001AA9A8() - 1;
  if (v1 > 0xEE)
    v2 = 0;
  else
    v2 = byte_101BEAA08[v1];
  byte_1023061F0 = v2;
}

void sub_1009ED8A0(id a1)
{
  qword_10229FD68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accel");
}

void sub_1009ED8CC(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1009ED8FC(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

BOOL sub_1009ED928(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _BOOL8 v7;
  _BOOL8 v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  _QWORD *v35;
  __int16 v36;
  uint64_t v37;
  _BYTE __p[12];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  _QWORD *v42;
  __int16 v43;
  uint64_t v44;

  v3 = (uint64_t *)a1[1];
  if (v3 != a1)
  {
    while (1)
    {
      sub_1015A2E04(__p, "");
      v7 = sub_1009EDDF4((uint64_t)(v3 + 2), a2, a3, (uint64_t)__p);
      v8 = v7;
      if (SHIBYTE(v41) < 0)
      {
        operator delete(*(void **)__p);
        if (!v8)
          goto LABEL_19;
      }
      else if (!v7)
      {
        goto LABEL_19;
      }
      v9 = v3[35];
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021647B0);
      v10 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a2 + 23) >= 0)
          v11 = a2;
        else
          v11 = *(_QWORD *)a2;
        v12 = *(_QWORD *)a3;
        if (*(char *)(a3 + 23) >= 0)
          v12 = a3;
        v13 = v3 + 5;
        if (*((char *)v3 + 63) < 0)
          v13 = (_QWORD *)*v13;
        *(_DWORD *)__p = 136446979;
        *(_QWORD *)&__p[4] = v11;
        v39 = 2081;
        v40 = v12;
        v41 = 2081;
        v42 = v13;
        v43 = 2050;
        v44 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "remove %{public}s/%{private}s from %{private}s, remaining fences, %{public}lu", __p, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021647B0);
        if (*(char *)(a2 + 23) >= 0)
          v19 = a2;
        else
          v19 = *(_QWORD *)a2;
        v20 = *(_QWORD *)a3;
        if (*(char *)(a3 + 23) >= 0)
          v20 = a3;
        v21 = v3 + 5;
        if (*((char *)v3 + 63) < 0)
          v21 = (_QWORD *)*v21;
        v30 = 136446979;
        v31 = (_QWORD *)v19;
        v32 = 2081;
        v33 = v20;
        v34 = 2081;
        v35 = v21;
        v36 = 2050;
        v37 = v9;
        LODWORD(v29) = 42;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0068, 2, "remove %{public}s/%{private}s from %{private}s, remaining fences, %{public}lu", &v30, v29);
        v23 = (char *)v22;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::removeFenceFromCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const std::string &, const std::string &)", "%s\n", v22);
        if (v23 != __p)
          free(v23);
      }
      if (!v9)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021647B0);
        v14 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v15 = v3 + 5;
          if (*((char *)v3 + 63) < 0)
            v15 = (_QWORD *)*v15;
          v16 = a1[2] - 1;
          *(_DWORD *)__p = 136380931;
          *(_QWORD *)&__p[4] = v15;
          v39 = 2050;
          v40 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Fence: kill combinedFence, %{private}s, remaining fences, %{public}lu", __p, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021647B0);
          v24 = v3 + 5;
          if (*((char *)v3 + 63) < 0)
            v24 = (_QWORD *)*v24;
          v25 = a1[2] - 1;
          v30 = 136380931;
          v31 = v24;
          v32 = 2050;
          v33 = v25;
          LODWORD(v29) = 22;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: kill combinedFence, %{private}s, remaining fences, %{public}lu", &v30, v29);
          v27 = (char *)v26;
          sub_100512490("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::removeFenceFromCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const std::string &, const std::string &)", "%s\n", v26);
          if (v27 != __p)
            free(v27);
        }
        v17 = *v3;
        v18 = (uint64_t *)v3[1];
        *(_QWORD *)(v17 + 8) = v18;
        *(_QWORD *)v3[1] = v17;
        --a1[2];
        sub_1009EF7A4((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v18;
        goto LABEL_20;
      }
LABEL_19:
      v3 = (uint64_t *)v3[1];
LABEL_20:
      if (v3 == a1)
        return v8;
    }
  }
  return 0;
}

void sub_1009EDDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1009EDDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  int v11;
  double v12;
  BOOL v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  const char *v24;
  uint8_t *v25;
  void *__p[2];
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  void *__dst[2];
  uint64_t v31;
  void *v32[2];
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  id v40;
  void *v41;
  void *v42;
  int v43;
  _QWORD *v44;
  uint8_t buf[4];
  _QWORD *v46;

  *(_QWORD *)(a1 + 296) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v31 = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(v28, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v28 = *(_OWORD *)a3;
    v29 = *(_QWORD *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v27 = *(_QWORD *)(a4 + 16);
  }
  sub_1001158A8((char *)v32, (uint64_t)__dst, (uint64_t)v28, (uint64_t)__p);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
  v7 = sub_1009EFD68((uint64_t **)(a1 + 248), (unsigned __int8 *)v32);
  v8 = v7;
  v9 = *(_QWORD **)(a1 + 248);
  if (v9 == (_QWORD *)(a1 + 256))
  {
    LOBYTE(v11) = 0;
    v10 = 0;
    if (!v7)
      goto LABEL_38;
    goto LABEL_29;
  }
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = *(double *)(a1 + 296);
    if (v12 <= sub_10016F694((uint64_t)(v9 + 4)))
      *(double *)(a1 + 296) = sub_10016F694((uint64_t)(v9 + 4));
    v13 = *((_BYTE *)v9 + 220) != 0;
    v14 = *((_BYTE *)v9 + 192);
    v15 = (_QWORD *)v9[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v9[2];
        v17 = *v16 == (_QWORD)v9;
        v9 = v16;
      }
      while (!v17);
    }
    v10 |= v13;
    v11 |= (v14 & 0x20) >> 5;
    v9 = v16;
  }
  while (v16 != (_QWORD *)(a1 + 256));
  if (v8)
  {
LABEL_29:
    *(_QWORD *)(a1 + 280) = 0x7FEFFFFFFFFFFFFFLL;
    *(_QWORD *)(a1 + 288) = 0x7FEFFFFFFFFFFFFFLL;
    if (*(_QWORD *)(a1 + 264))
    {
      v18 = *(_QWORD *)(a1 + 248);
      std::string::operator=((std::string *)(a1 + 24), (const std::string *)(v18 + 56));
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(v18 + 104);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(v18 + 136);
      *(_DWORD *)(a1 + 184) = sub_100C3C344(v18 + 32);
      *(_BYTE *)(a1 + 188) = *(_BYTE *)(v18 + 220);
      *(_BYTE *)(a1 + 308) = (*(_BYTE *)(v18 + 192) & 0x20) != 0;
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021647B0);
      v19 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v20 = (_QWORD *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0)
          v20 = (_QWORD *)*v20;
        *(_DWORD *)buf = 136380675;
        v46 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fence: fence, %{private}s, became empty", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021647B0);
        v23 = (_QWORD *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0)
          v23 = (_QWORD *)*v23;
        v43 = 136380675;
        v44 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: fence, %{private}s, became empty", &v43, 12);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceManager_Type::CombinedFence::removeFence(const std::string &, const std::string &, const std::string &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
    }
  }
LABEL_38:
  v21 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)(a1 + 96) = v21;
  *(_BYTE *)(a1 + 188) = v10 & 1;
  *(_BYTE *)(a1 + 308) = v11 & 1;
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }

  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32[0]);
  return v8 != 0;
}

void sub_1009EE224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  sub_1004E2BD0((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_1009EE2A4(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t *v6;
  double v7;
  double v8;
  BOOL v10;
  int v11;
  double v12;
  BOOL v13;
  int v14;
  BOOL v15;
  char v16;
  _BOOL4 v17;
  int v18;
  NSObject *v19;
  size_t v20;
  std::string *v21;
  const void *v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  NSObject *v29;
  std::string *v30;
  uint64_t v31;
  NSObject *v32;
  std::string *v33;
  int v34;
  NSObject *v36;
  size_t v37;
  std::string *v38;
  const void *v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  uint64_t v46;
  std::string *v47;
  std::string *v48;
  std::string *v49;
  uint64_t v50;
  std::string *v51;
  std::string *v52;
  std::string *v53;
  NSObject *v54;
  size_t v55;
  std::string *v56;
  const void *v57;
  std::string *v58;
  int v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *p_buf;
  uint64_t v65;
  std::string *v66;
  std::string *v67;
  uint64_t v68;
  std::string *v69;
  int v70;
  std::string *v71;
  std::string *v72;
  uint64_t v73;
  std::string *v74;
  std::string *v75;
  uint64_t v76;
  int v77;
  double v78;
  __int16 v79;
  std::string *v80;
  std::string v81;
  std::string buf;

  v6 = (uint64_t *)a1[1];
  if (v6 == a1)
    goto LABEL_80;
  while (1)
  {
    v7 = sub_1009EF050((uint64_t)(v6 + 2), *(double *)(a2 + 72), *(double *)(a2 + 80));
    v8 = *(double *)(a2 + 96);
    v10 = v8 > 400.0 || *(_BYTE *)(a2 + 188) != 0 || *(_DWORD *)(a2 + 180) == 2;
    if (!v10
      && *(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224)
      && (*(_BYTE *)(a2 + 160) & 0x20) == 0
      && *((double *)v6 + 14) <= 400.0
      && !*((_BYTE *)v6 + 204)
      && *((_DWORD *)v6 + 49) != 2
      && v6[31] == v6[30]
      && (v6[22] & 0x20) == 0
      && !*((_BYTE *)v6 + 324)
      && v7 <= 35.0)
    {
      v11 = *((_DWORD *)v6 + 50);
      if (v11 == sub_100C3C344(a2))
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021647B0);
        v54 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a2 + 23) >= 0)
            v55 = *(unsigned __int8 *)(a2 + 23);
          else
            v55 = *(_QWORD *)(a2 + 8);
          sub_100259584((uint64_t)&v81, v55 + 1);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &v81;
          else
            v56 = (std::string *)v81.__r_.__value_.__r.__words[0];
          if (v55)
          {
            if (*(char *)(a2 + 23) >= 0)
              v57 = (const void *)a2;
            else
              v57 = *(const void **)a2;
            v58 = v56;
            memmove(v56, v57, v55);
            v56 = v58;
          }
          *(_WORD *)((char *)&v56->__r_.__value_.__l.__data_ + v55) = 47;
          v59 = *(char *)(a2 + 47);
          if (v59 >= 0)
            v60 = (const std::string::value_type *)(a2 + 24);
          else
            v60 = *(const std::string::value_type **)(a2 + 24);
          if (v59 >= 0)
            v61 = *(unsigned __int8 *)(a2 + 47);
          else
            v61 = *(_QWORD *)(a2 + 32);
          v62 = std::string::append(&v81, v60, v61);
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
          p_buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v81.__r_.__value_.__l.__data_) = 134283779;
          *(double *)((char *)v81.__r_.__value_.__r.__words + 4) = v7;
          WORD2(v81.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "FenceCal: combine fine fence, distance, %{private}.1lf, %{private}s", (uint8_t *)&v81, 0x16u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&v81, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021647B0);
          v65 = qword_1022A0068;
          sub_100914D68((const void **)a2, &buf);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v66 = &buf;
          else
            v66 = (std::string *)buf.__r_.__value_.__r.__words[0];
          v77 = 134283779;
          v78 = v7;
          v79 = 2081;
          v80 = v66;
          _os_log_send_and_compose_impl(2, 0, &v81, 1628, &_mh_execute_header, v65, 2, "FenceCal: combine fine fence, distance, %{private}.1lf, %{private}s", &v77, 22);
          v49 = v67;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          goto LABEL_195;
        }
        goto LABEL_79;
      }
      v8 = *(double *)(a2 + 96);
    }
    if (v8 >= 7000.0 && *((double *)v6 + 14) >= 7000.0 && v7 <= 35.0)
      break;
    if (v7 > 35.0)
      goto LABEL_47;
    v12 = *((double *)v6 + 14);
    if (v8 >= 7000.0 != v12 >= 7000.0)
      goto LABEL_47;
    v13 = v8 <= 400.0 && *(_BYTE *)(a2 + 188) == 0;
    v14 = *(_DWORD *)(a2 + 180);
    v15 = !v13 || v14 == 2;
    v16 = v15;
    v17 = !v15 && *(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224) && (*(_BYTE *)(a2 + 160) & 0x20) == 0;
    if (v12 > 400.0 || *((_BYTE *)v6 + 204) || *((_DWORD *)v6 + 49) == 2 || v6[31] != v6[30])
    {
      if (v17)
        goto LABEL_47;
    }
    else if (((v17 ^ ((v6[22] & 0x20) == 0)) & 1) != 0)
    {
      goto LABEL_47;
    }
    v18 = (v16 & 1) == 0 && *(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224) && (*(_BYTE *)(a2 + 160) & 0x20) == 0;
    if (*((unsigned __int8 *)v6 + 324) == v18 && v14 == *((_DWORD *)v6 + 49))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021647B0);
      v36 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a2 + 23) >= 0)
          v37 = *(unsigned __int8 *)(a2 + 23);
        else
          v37 = *(_QWORD *)(a2 + 8);
        v38 = &v81;
        sub_100259584((uint64_t)&v81, v37 + 1);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
        if (v37)
        {
          if (*(char *)(a2 + 23) >= 0)
            v39 = (const void *)a2;
          else
            v39 = *(const void **)a2;
          memmove(v38, v39, v37);
        }
        *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v37) = 47;
        v40 = *(char *)(a2 + 47);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)(a2 + 24);
        else
          v41 = *(const std::string::value_type **)(a2 + 24);
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(a2 + 47);
        else
          v42 = *(_QWORD *)(a2 + 32);
        v43 = std::string::append(&v81, v41, v42);
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        v45 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v45 = (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v81.__r_.__value_.__l.__data_) = 134283779;
        *(double *)((char *)v81.__r_.__value_.__r.__words + 4) = v7;
        WORD2(v81.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v45;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "FenceCal: combine non-fine non-large fence, distance, %{private}.1lf, %{private}s", (uint8_t *)&v81, 0x16u);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v81, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021647B0);
        v46 = qword_1022A0068;
        sub_100914D68((const void **)a2, &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = &buf;
        else
          v47 = (std::string *)buf.__r_.__value_.__r.__words[0];
        v77 = 134283779;
        v78 = v7;
        v79 = 2081;
        v80 = v47;
        _os_log_send_and_compose_impl(2, 0, &v81, 1628, &_mh_execute_header, v46, 2, "FenceCal: combine non-fine non-large fence, distance, %{private}.1lf, %{private}s", &v77, 22);
        v49 = v48;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_195:
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::addFenceToCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", (const char *)v49);
        if (v49 != &v81)
          free(v49);
        goto LABEL_79;
      }
      goto LABEL_79;
    }
LABEL_47:
    v6 = (uint64_t *)v6[1];
    if (v6 == a1)
      goto LABEL_80;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021647B0);
  v19 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v20 = *(unsigned __int8 *)(a2 + 23);
    else
      v20 = *(_QWORD *)(a2 + 8);
    v21 = &v81;
    sub_100259584((uint64_t)&v81, v20 + 1);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if (v20)
    {
      if (*(char *)(a2 + 23) >= 0)
        v22 = (const void *)a2;
      else
        v22 = *(const void **)a2;
      memmove(v21, v22, v20);
    }
    *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 47;
    v23 = *(char *)(a2 + 47);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)(a2 + 24);
    else
      v24 = *(const std::string::value_type **)(a2 + 24);
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a2 + 47);
    else
      v25 = *(_QWORD *)(a2 + 32);
    v26 = std::string::append(&v81, v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    v28 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v81.__r_.__value_.__l.__data_) = 134283779;
    *(double *)((char *)v81.__r_.__value_.__r.__words + 4) = v7;
    WORD2(v81.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "FenceCal: combine large fences, distance, %{private}.1lf, %{private}s", (uint8_t *)&v81, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v81, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021647B0);
    v73 = qword_1022A0068;
    sub_100914D68((const void **)a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v74 = &buf;
    else
      v74 = (std::string *)buf.__r_.__value_.__r.__words[0];
    v77 = 134283779;
    v78 = v7;
    v79 = 2081;
    v80 = v74;
    _os_log_send_and_compose_impl(2, 0, &v81, 1628, &_mh_execute_header, v73, 2, "FenceCal: combine large fences, distance, %{private}.1lf, %{private}s", &v77, 22);
    v49 = v75;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_195;
  }
LABEL_79:
  if (v6 == a1)
  {
LABEL_80:
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021647B0);
    v29 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      sub_100C3B9BC(a2, &v81);
      v30 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v81
          : (std::string *)v81.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "FenceCal: creating a new combined fence for, %{private}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v81, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021647B0);
      v50 = qword_1022A0068;
      sub_100C3B9BC(a2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &buf;
      else
        v51 = (std::string *)buf.__r_.__value_.__r.__words[0];
      v77 = 136380675;
      v78 = *(double *)&v51;
      LODWORD(v76) = 12;
      _os_log_send_and_compose_impl(2, 0, &v81, 1628, &_mh_execute_header, v50, 2, "FenceCal: creating a new combined fence for, %{private}s", &v77, v76);
      v53 = v52;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::addFenceToCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", (const char *)v53);
      if (v53 != &v81)
        free(v53);
    }
    sub_1009EF698((uint64_t)&v81);
    v6 = sub_1009EF8F4((uint64_t)a1, 0, 0, (uint64_t)&v81);
    v31 = *a1;
    *(_QWORD *)(v31 + 8) = v6;
    *v6 = v31;
    *a1 = (uint64_t)v6;
    v6[1] = (uint64_t)a1;
    ++a1[2];
    sub_1009EF7A4((uint64_t)&v81);
  }
  if (v6 != a1)
  {
    sub_1009EF35C((uint64_t)(v6 + 2), a2);
    *((_BYTE *)v6 + 288) |= a3;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021647B0);
    v32 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      sub_100C3B9BC((uint64_t)(v6 + 2), &v81);
      v33 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v81
          : (std::string *)v81.__r_.__value_.__r.__words[0];
      v34 = *((unsigned __int8 *)v6 + 288);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "FenceCal: adding to, %{private}s, isExit, %{private}d", (uint8_t *)&buf, 0x12u);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v81, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021647B0);
      v68 = qword_1022A0068;
      sub_100C3B9BC((uint64_t)(v6 + 2), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &buf;
      else
        v69 = (std::string *)buf.__r_.__value_.__r.__words[0];
      v70 = *((unsigned __int8 *)v6 + 288);
      v77 = 136380931;
      v78 = *(double *)&v69;
      v79 = 1025;
      LODWORD(v80) = v70;
      LODWORD(v76) = 18;
      _os_log_send_and_compose_impl(2, 0, &v81, 1628, &_mh_execute_header, v68, 2, "FenceCal: adding to, %{private}s, isExit, %{private}d", &v77, v76);
      v72 = v71;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::addFenceToCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", (const char *)v72);
      if (v72 != &v81)
        free(v72);
    }
  }
  return 1;
}

void sub_1009EF014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1009EF050(uint64_t a1, double a2, double a3)
{
  unsigned __int8 v6;
  double v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  _BYTE buf[12];
  __int16 v16;
  double v17;
  char v18;
  int v19;
  _BYTE *v20;
  __int16 v21;
  double v22;
  void *__p[2];
  char v24;

  v6 = atomic_load((unsigned __int8 *)&qword_102306228);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_102306228))
  {
    sub_1002433B8((uint64_t)dbl_102306200);
    __cxa_guard_release(&qword_102306228);
  }
  if (*(_QWORD *)(a1 + 264))
    return sub_10011E634(dbl_102306200, a2, a3, *(double *)(*(_QWORD *)(a1 + 248) + 104), *(double *)(*(_QWORD *)(a1 + 248) + 112), 0.0);
  v8 = sub_10011E634(dbl_102306200, a2, a3, *(double *)(a1 + 72), *(double *)(a1 + 80), 0.0);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021647B0);
  v9 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    sub_100C3B9BC(a1, __p);
    v10 = v24 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v10;
    v16 = 2049;
    v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Fence: why is this used?, %{private}s, %{private}lf", buf, 0x16u);
    if (v24 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021647B0);
    v11 = qword_1022A0068;
    sub_100C3B9BC(a1, buf);
    if (v18 >= 0)
      v12 = buf;
    else
      v12 = *(_BYTE **)buf;
    v19 = 136380931;
    v20 = v12;
    v21 = 2049;
    v22 = v8;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v11, 0, "#Warning Fence: why is this used?, %{private}s, %{private}lf", &v19, 22);
    v14 = v13;
    if (v18 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "double CLFenceManager_Type::CombinedFence::distanceTo(double, double) const", "%s\n", v14);
    if (v14 != (char *)__p)
      free(v14);
  }
  return v8;
}

void sub_1009EF33C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102306228);
  _Unwind_Resume(a1);
}

void sub_1009EF35C(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;

  if (*(_DWORD *)(a2 + 184) == -1)
    sub_1019139F8();
  sub_1009EFDC0((uint64_t **)(a1 + 248), (unsigned __int8 *)a2, (__int128 *)a2);
  v4 = *(double *)(a2 + 80);
  v5 = v4 + 360.0;
  if (v4 >= 0.0)
    v5 = *(double *)(a2 + 80);
  v6 = v5 + *(double *)(a1 + 288);
  *(double *)(a1 + 280) = *(double *)(a2 + 72) + *(double *)(a1 + 280);
  *(double *)(a1 + 288) = v6;
  v7 = *(double *)(a1 + 296);
  if (v7 <= sub_10016F694(a2))
    *(double *)(a1 + 296) = sub_10016F694(a2);
  if (*(_QWORD *)(a1 + 264) == 1)
  {
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_DWORD *)(a1 + 184) = sub_100C3C344(a2);
    *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
    v8 = (*(unsigned __int8 *)(a2 + 160) >> 5) & 1;
LABEL_12:
    *(_BYTE *)(a1 + 308) = v8;
    goto LABEL_13;
  }
  if (*(_BYTE *)(a2 + 188))
    *(_BYTE *)(a1 + 188) = 1;
  if ((*(_BYTE *)(a2 + 160) & 0x20) != 0)
  {
    LOBYTE(v8) = 1;
    goto LABEL_12;
  }
LABEL_13:
  v9 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(double *)(a2 + 112);
  if (v10 > *(double *)(a1 + 112))
    *(double *)(a1 + 112) = v10;
}

uint64_t sub_1009EF480(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  double v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 != a1)
  {
    while (1)
    {
      v2 = *(_QWORD *)(v1 + 280);
      if (!v2)
        break;
      v3 = *(double *)(v1 + 304) / (double)v2;
      *(double *)(v1 + 88) = *(double *)(v1 + 296) / (double)v2;
      *(double *)(v1 + 96) = v3;
      v4 = *(_QWORD *)(v1 + 312);
      *(_QWORD *)(v1 + 104) = v4;
      *(_QWORD *)(v1 + 112) = v4;
      if (v3 > 180.0)
        *(double *)(v1 + 96) = v3 + -360.0;
      v1 = *(_QWORD *)(v1 + 8);
      if (v1 == a1)
        return 1;
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021647B0);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "FenceCal: No fences", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021647B0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "FenceCal: No fences", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLCombinedFencesList::finalizeCombinedFencesList(std::list<CLFenceManager_Type::CombinedFence> &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return 1;
}

void sub_1009EF66C(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_1009EF698(uint64_t a1)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;

  sub_1015A2E04(v7, "CombinedFence");
  sub_1015A2E04(v5, "");
  sub_1015A2E04(__p, "");
  sub_100C3B52C((char *)a1, (uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 304) = -1;
  *(_BYTE *)(a1 + 308) = 0;
  return a1;
}

void sub_1009EF758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009EF7A4(uint64_t a1)
{
  void *v2;

  sub_1009EF82C(a1 + 248, *(_QWORD **)(a1 + 256));
  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1009EF82C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1009EF82C(a1, *a2);
    sub_1009EF82C(a1, a2[1]);
    sub_1009EF874((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1009EF874(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *sub_1009EF8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x148uLL);
  *v7 = a2;
  v7[1] = a3;
  sub_1009EF950((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_1009EF93C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009EF950(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;

  v4 = sub_1004E5748((char *)a1, (__int128 *)a2);
  sub_1009EF9CC((uint64_t *)v4 + 31, a2 + 248);
  v5 = *(_OWORD *)(a2 + 272);
  v6 = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 301) = *(_QWORD *)(a2 + 301);
  *(_OWORD *)(a1 + 272) = v5;
  *(_OWORD *)(a1 + 288) = v6;
  return a1;
}

void sub_1009EF99C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 224);
  if (v3)
  {
    *(_QWORD *)(v1 + 232) = v3;
    operator delete(v3);
  }

  sub_10190DB10(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1009EF9CC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1009EFA20(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1009EFA08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1009EF82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1009EFA20(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1009EFAA4(v5, v6, v4 + 32, (__int128 *)v4 + 2);
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1009EFAA4(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, __int128 *a4)
{
  unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  unsigned __int8 *v12;

  v6 = sub_1009EFB38(a1, a2, &v12, &v11, a3);
  v7 = *(uint64_t **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    sub_1009EFCBC((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1009EFD24((uint64_t)v10, 0);
  }
  return v7;
}

unsigned __int8 *sub_1009EFB38(_QWORD *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  BOOL v17;
  unsigned __int8 *v18;

  v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || sub_10016FCB8(a5, (unsigned __int8 *)a2 + 32))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (unsigned __int8 *)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 8;
      }
      else
      {
        *a3 = (unsigned __int8 *)a2;
        return (unsigned __int8 *)a2;
      }
    }
    v11 = (unsigned __int8 *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (unsigned __int8 *)v16[2];
        v17 = *(_QWORD *)v12 == (_QWORD)v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (sub_10016FCB8(v12 + 32, a5))
      goto LABEL_16;
    return (unsigned __int8 *)sub_10091CC78((uint64_t)a1, a3, a5);
  }
  if (sub_10016FCB8((unsigned __int8 *)a2 + 32, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (unsigned __int8 *)a2[1];
      do
      {
        v15 = v14;
        v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      v18 = (unsigned __int8 *)a2;
      do
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v18 + 2);
        v17 = *(_QWORD *)v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10016FCB8(a5, v15 + 32))
        return (unsigned __int8 *)sub_10091CC78((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
    }
    return (unsigned __int8 *)a4;
  }
  *a3 = (unsigned __int8 *)a2;
  *a4 = (uint64_t)a2;
  return (unsigned __int8 *)a4;
}

char *sub_1009EFCBC@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x118uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1004E5748(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1009EFD0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1009EFD24(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1009EFD24(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1009EF874((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_1009EFD68(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10016FC40((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  sub_1009EF874((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *sub_1009EFDC0(uint64_t **a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_10091CC78((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_1009EFCBC((uint64_t)a1, a3, (uint64_t)v9);
    sub_1000145B0(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_1009EFD24((uint64_t)v9, 0);
  }
  return v6;
}

id sub_1009F02B8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  id v8;
  id v9;
  id v12;
  NSUnitLength *v13;
  double v14;
  id v15;
  id v16;
  id v17;

  v8 = 0;
  if (!a1 || a1 == 100)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    if (a1 != 600)
    {
      v12 = objc_alloc((Class)NSMeasurement);
      v13 = +[NSUnitLength meters](NSUnitLength, "meters");
      v14 = fmax(a3, 0.0);
      if (a3 <= 0.0)
        a4 = a5;
      v8 = objc_msgSend(v12, "initWithDoubleValue:unit:", v13, v14);
      v9 = objc_msgSend(objc_alloc((Class)NSMeasurement), "initWithDoubleValue:unit:", +[NSUnitPressure kilopascals](NSUnitPressure, "kilopascals"), a4);
    }
  }
  v15 = objc_msgSend(objc_alloc((Class)NSMeasurement), "initWithDoubleValue:unit:", +[NSUnitPressure kilopascals](NSUnitPressure, "kilopascals"), a5);
  v16 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a2);
  v17 = objc_msgSend(objc_alloc((Class)CMWaterSubmersionMeasurement), "initWithDepth:andPressure:andSurfacePressure:andState:andDate:", v8, v9, v15, a1, v16);
  if (v8)

  if (v9)
  return v17;
}

id sub_1009F0480(double a1, double a2, double a3)
{
  id v5;
  id v6;
  id v7;
  id v8;

  v5 = objc_msgSend(objc_alloc((Class)NSMeasurement), "initWithDoubleValue:unit:", +[NSUnitTemperature celsius](NSUnitTemperature, "celsius"), a2);
  v6 = objc_msgSend(objc_alloc((Class)NSMeasurement), "initWithDoubleValue:unit:", +[NSUnitTemperature celsius](NSUnitTemperature, "celsius"), a3);
  v7 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a1);
  v8 = objc_msgSend(objc_alloc((Class)CMWaterTemperature), "initWithTemperature:andTemperatureUncertainty:andDate:", v5, v6, v7);

  return v8;
}

uint64_t sub_1009F056C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;
  id v5;

  *(_QWORD *)a1 = off_1021647E0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = off_102164830;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (id *)(a1 + 40);
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 48) = -[CLWaterSubmersionClientLocal initWithWaterSubmersionClient:]([CLWaterSubmersionClientLocal alloc], "initWithWaterSubmersionClient:", a1);
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLBarometerCalibration"));
  *(_QWORD *)(a1 + 40) = v5;
  objc_msgSend(v5, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 16), "silo"));
  objc_msgSend(*v4, "setDelegateEntityName:", "CLWaterSubmersionClient");
  return a1;
}

void sub_1009F061C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10008ABA0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F0634(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021647E0;
  *(_QWORD *)(a1 + 24) = off_102164830;

  objc_msgSend(*(id *)(a1 + 48), "setValid:", 0);
  return sub_10008ABA0((_QWORD *)a1);
}

_QWORD *sub_1009F068C(uint64_t a1)
{
  return sub_1009F0634(a1 - 24);
}

void sub_1009F0694(uint64_t a1)
{
  sub_1009F0634(a1);
  operator delete();
}

void sub_1009F06B8(uint64_t a1)
{
  sub_1009F0634(a1 - 24);
  operator delete();
}

id sub_1009F06E0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  CFAbsoluteTime v8;
  __int16 v9;
  int v10;
  uint8_t buf[4];
  CFAbsoluteTime Current;
  __int16 v13;
  int v14;

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021648A0);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    Current = CFAbsoluteTimeGetCurrent();
    v13 = 1026;
    v14 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "submersion client connection,timestamp,%{public}f,connecting,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021648A0);
    v4 = qword_10229FE88;
    v7 = 134349312;
    v8 = CFAbsoluteTimeGetCurrent();
    v9 = 1026;
    v10 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 0, "submersion client connection,timestamp,%{public}f,connecting,%{public}d", &v7, 18);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWaterSubmersionClient::enable()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return objc_msgSend(*(id *)(a1 + 40), "registerClient:forNotification:", *(_QWORD *)(a1 + 48), 3);
}

id sub_1009F08C0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  CFAbsoluteTime v8;
  __int16 v9;
  int v10;
  uint8_t buf[4];
  CFAbsoluteTime Current;
  __int16 v13;
  int v14;

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021648A0);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    Current = CFAbsoluteTimeGetCurrent();
    v13 = 1026;
    v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "submersion client connection,timestamp,%{public}f,connecting,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021648A0);
    v4 = qword_10229FE88;
    v7 = 134349312;
    v8 = CFAbsoluteTimeGetCurrent();
    v9 = 1026;
    v10 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 0, "submersion client connection,timestamp,%{public}f,connecting,%{public}d", &v7, 18);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWaterSubmersionClient::disable()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return objc_msgSend(*(id *)(a1 + 40), "unregisterClient:forNotification:", *(_QWORD *)(a1 + 48), 3);
}

void sub_1009F0A98(uint64_t a1, CLConnectionMessage **a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  BOOL v15;
  uint64_t v16;
  int isEntitled;
  _QWORD *v18;
  int v19;
  unint64_t *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  LOBYTE(__p[0]) = 0;
  sub_1018BF25C((unsigned __int8 *)v33, "AllowWaterSubmersionSimulation", (unsigned __int8 *)__p, 0);
  v4 = BYTE1(v33[0]);
  LOBYTE(__p[0]) = 0;
  sub_1018BF25C((unsigned __int8 *)v33, "AllowWaterSubmersionOverride", (unsigned __int8 *)__p, 0);
  v5 = BYTE1(v33[0]);
  v6 = sub_100761DF0();
  v7 = *(_QWORD *)(a1 + 8);
  if (!(v5 | v4) && (v6 & 1) == 0)
  {
    v33[0] = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 109, 0);
    sub_1009F13B8("WaterSubmersion/kCLConnectionMessageWaterSubmersionErrorOccurred", v33, &v35);
    CLConnection::sendMessage(v7);
    v8 = v36;
    if (!v36)
      return;
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
LABEL_44:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    return;
  }
  sub_1015A2E04(v33, "com.apple.developer.submerged-depth-and-pressure");
  if ((CLConnection::isEntitled(v7, v33) & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 8);
    sub_1015A2E04(__p, "com.apple.developer.submerged-shallow-depth-and-pressure");
    v11 = CLConnection::isEntitled(v12, __p) ^ 1;
    if (v32 < 0)
      operator delete(__p[0]);
  }
  if (v34 < 0)
  {
    operator delete(v33[0]);
    if (v11)
      goto LABEL_13;
  }
  else if (v11)
  {
LABEL_13:
    v13 = *(_QWORD *)(a1 + 8);
    v33[0] = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 110, 0);
    sub_1009F13B8("WaterSubmersion/kCLConnectionMessageWaterSubmersionErrorOccurred", v33, &v29);
    CLConnection::sendMessage(v13);
    v8 = v30;
    if (!v30)
      return;
    v14 = (unint64_t *)&v30->__shared_owners_;
    do
      v10 = __ldaxr(v14);
    while (__stlxr(v10 - 1, v14));
    goto LABEL_44;
  }
  v15 = sub_1009F0EEC(a1);
  v16 = *(_QWORD *)(a1 + 8);
  if (!v15)
  {
    v33[0] = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 105, 0);
    sub_1009F13B8("WaterSubmersion/kCLConnectionMessageWaterSubmersionErrorOccurred", v33, &v27);
    CLConnection::sendMessage(v16);
    v8 = v28;
    if (!v28)
      return;
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v10 = __ldaxr(v20);
    while (__stlxr(v10 - 1, v20));
    goto LABEL_44;
  }
  sub_1015A2E04(v33, "com.apple.developer.submerged-depth-and-pressure");
  isEntitled = CLConnection::isEntitled(v16, v33);
  if (v34 < 0)
    operator delete(v33[0]);
  if (isEntitled)
    objc_msgSend(*(id *)(a1 + 48), "setDeepEnabled:", 1);
  if (!*a2)
    goto LABEL_41;
  v18 = (_QWORD *)CLConnectionMessage::name(*a2);
  v19 = *((char *)v18 + 23);
  if (v19 < 0)
  {
    if (v18[1] != 63)
      goto LABEL_34;
    v18 = (_QWORD *)*v18;
  }
  else if (v19 != 63)
  {
LABEL_34:
    if (*a2)
    {
      v21 = (_QWORD *)CLConnectionMessage::name(*a2);
      v22 = *((char *)v21 + 23);
      if ((v22 & 0x80000000) == 0)
      {
        if (v22 != 68)
          goto LABEL_41;
LABEL_40:
        if (!memcmp(v21, "WaterSubmersion/kCLConnectionMessageWaterSubmersionCompletionHandler", 0x44uLL))
        {
          objc_msgSend(*(id *)(a1 + 40), "acknowledgeNotification:", 3);
          return;
        }
        goto LABEL_41;
      }
      if (v21[1] == 68)
      {
        v21 = (_QWORD *)*v21;
        goto LABEL_40;
      }
    }
LABEL_41:
    v23 = *(_QWORD *)(a1 + 8);
    v33[0] = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 108, 0);
    sub_1009F13B8("WaterSubmersion/kCLConnectionMessageWaterSubmersionErrorOccurred", v33, &v25);
    CLConnection::sendMessage(v23);
    v8 = v26;
    if (!v26)
      return;
    v24 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v24);
    while (__stlxr(v10 - 1, v24));
    goto LABEL_44;
  }
  if (memcmp(v18, "WaterSubmersion/kCLConnectionMessageWaterSubmersionSubscription", 0x3FuLL))
    goto LABEL_34;
  if (objc_msgSend(objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageSubscribeKey")), "isEqualToNumber:", &__kCFBooleanTrue))sub_1009F06E0(a1);
  else
    sub_1009F08C0(a1);
}

void sub_1009F0E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1009F0EEC(uint64_t a1)
{
  uint64_t v2;
  int isEntitled;
  int v4;
  uint64_t v5;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE v13[32];
  _BYTE buf[12];
  char v15;
  int v16;
  _BYTE *v17;
  void *__p[2];
  char v19;

  if (!*(_DWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    sub_1015A2E04(__p, "com.apple.locationd.activity");
    isEntitled = CLConnection::isEntitled(v2, __p);
    v4 = isEntitled;
    if (v19 < 0)
    {
      operator delete(__p[0]);
      if (v4)
      {
LABEL_7:
        *(_DWORD *)(a1 + 32) = 1;
        return *(_DWORD *)(a1 + 32) == 1;
      }
    }
    else if (isEntitled)
    {
      goto LABEL_7;
    }
    v5 = kTCCServiceMotion;
    CLConnection::getAuditToken(*(CLConnection **)(a1 + 8));
    if (TCCAccessCheckAuditToken(v5, v13, 0))
      goto LABEL_7;
    *(_DWORD *)(a1 + 32) = 2;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021648A0);
    v7 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v8 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Client %s did not pass entitlement/tcc checks.", buf, 0xCu);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_1021648A0);
      v9 = qword_10229FE88;
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      if (v15 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v16 = 136315138;
      v17 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "#Warning Client %s did not pass entitlement/tcc checks.", (const char *)&v16);
      v12 = v11;
      if (v15 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWaterSubmersionClient::isAuthorizedForMotionActivity()", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return *(_DWORD *)(a1 + 32) == 1;
}

void sub_1009F1188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1009F11AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 8);
  sub_1009F1418("WaterSubmersion/kCLConnectionMessageWaterSubmersionEventUpdate", &v8, &v6);
  CLConnection::sendMessage(v2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1009F1230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1009F1244(uint64_t a1, uint64_t a2)
{
  sub_1009F11AC(a1 - 24, a2);
}

void sub_1009F124C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 8);
  sub_1009F1478("WaterSubmersion/kCLConnectionMessageWaterSubmersionMeasurementUpdate", &v8, &v6);
  CLConnection::sendMessage(v2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1009F12D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1009F12E4(uint64_t a1, uint64_t a2)
{
  sub_1009F124C(a1 - 24, a2);
}

void sub_1009F12EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 8);
  sub_1009F14D8("WaterSubmersion/kCLConnectionMessageWaterSubmersionTemperatureUpdate", &v8, &v6);
  CLConnection::sendMessage(v2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1009F1370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1009F1384(uint64_t a1, uint64_t a2)
{
  sub_1009F12EC(a1 - 24, a2);
}

void sub_1009F138C(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

_QWORD *sub_1009F13B8@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1009F1404(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F1418@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1009F1464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F1478@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1009F14C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F14D8@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1009F1524(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_1009F1538(_QWORD *a1)
{
  if (*a1 == a1[1])
    return 0.0;
  else
    return *(double *)(*a1 + 16);
}

double sub_1009F1554(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 0.0;
  else
    return *(double *)(v1 - 64);
}

uint64_t sub_1009F1570(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = a3[1];
  *(_QWORD *)(a1 + 8) = *a3;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  sub_1009F1660(a1);
  return a1;
}

void sub_1009F1624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  uint64_t v7;
  void *v9;

  v7 = v4;
  sub_100008848(v7, *v6);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v2 + 128) = v9;
    operator delete(v9);
  }
  sub_100261F44(v3);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1009F1660(uint64_t a1)
{
  unsigned __int8 *result;
  unsigned __int8 v3[4];
  int v4;

  sub_1004AD1D8(v3, "NumberOfDaysToRetainCyclingPowerHistoryInDB", &dword_101BEAB70, 0);
  *(_DWORD *)(a1 + 40) = 86400 * v4;
  *(_QWORD *)(a1 + 176) = 0;
  result = sub_1004AD1D8(v3, "MaximumTimeToSaveInDBS", &dword_101BEAB74, 0);
  *(_DWORD *)(a1 + 216) = v4;
  return result;
}

uint64_t sub_1009F16DC(uint64_t a1, unsigned __int8 a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unsigned __int8 v24;

  v24 = a2;
  sub_1009F5164(&v24, &v20);
  sub_1009F5264(&v20, &v22);
  sub_1009F548C(&v24, &v16);
  sub_1009F558C(&v16, &v18);
  sub_1009F1570(a1, &v22, &v18);
  v3 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sub_1009F1660(a1);
  return a1;
}

void sub_1009F1840(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1009F1894(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F1894(uint64_t a1)
{
  void *v2;

  sub_100008848(a1 + 192, *(_QWORD **)(a1 + 200));
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 24);
  sub_100261F44(a1 + 8);
  return a1;
}

void sub_1009F18E0(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v11;
  double v12;
  unint64_t v13;
  float v14;
  float v15;
  double v16;
  float v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  float v21;
  float v22;
  double v23;
  double v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double v43;
  int v44;
  int v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  const char *v49;
  uint8_t *v50;
  double v51;
  int v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  double v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  double v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  uint8_t buf[4];
  double v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  unint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  double v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  double v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  double v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;

  *(_OWORD *)(a3 + 16) = xmmword_101BEAB40;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 40) = _Q0;
  v11 = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 56) = 0xBFF0000000000000;
  v12 = *(double *)a2;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a2;
  if (*(double *)(a2 + 504) > 0.0)
  {
    v13 = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a3 + 40) = v13;
    v11 = v13;
  }
  v14 = 0.0;
  if (*(double *)(a2 + 704) > 0.0)
  {
    v14 = *(double *)(a2 + 728);
    *(float *)(a3 + 24) = v14;
  }
  v15 = *(double *)(a2 + 1040);
  *(float *)(a3 + 32) = v15;
  v16 = *(double *)(a2 + 1024);
  if (vabdd_f64(v16, v12) >= 5.0)
  {
    v18 = -1.0;
    if (v16 > 0.0)
    {
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021648C0);
      v19 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a2 + 1024);
        *(_DWORD *)buf = 134218240;
        v81 = v12;
        v82 = 2048;
        v83 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cadence timestamp is too old, entryTime, %f, cadenceTime, %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v48 = *(_QWORD *)(a2 + 1024);
        v52 = 134218240;
        v53 = v12;
        v54 = 2048;
        v55 = v48;
        LODWORD(v51) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "Cadence timestamp is too old, entryTime, %f, cadenceTime, %f", COERCE_DOUBLE(&v52), v51);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 0, "CLCyclingFTPInput CLCyclingFTPDataStore::createDbEntryFromCalorieInputs(const CLNatalieModelInput::Data &)", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
    }
  }
  else
  {
    v17 = *(double *)(a2 + 1016);
    *(float *)(a3 + 28) = v17;
    v18 = v17;
  }
  if (vabdd_f64(*(double *)(a2 + 1192), v12) >= 5.0)
  {
    v23 = -1.0;
    v24 = 0.0;
  }
  else
  {
    v21 = *(double *)(a2 + 1200);
    v22 = *(double *)(a2 + 1208);
    *(float *)(a3 + 16) = v21;
    *(float *)(a3 + 20) = v22;
    v23 = v21;
    v24 = v22;
  }
  if (v15 >= 0.0)
    ++*a1;
  if (v23 > 0.39)
    ++a1[1];
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021648C0);
  v25 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v26 = *(_QWORD *)(a2 + 504);
    v27 = *(_QWORD *)(a2 + 704);
    v28 = *(_QWORD *)(a2 + 1024);
    v29 = *(_QWORD *)(a2 + 1048);
    v30 = *(_QWORD *)(a2 + 1192);
    v31 = *a1;
    v32 = a1[1];
    *(_DWORD *)buf = 134221312;
    v81 = v12;
    v82 = 2048;
    v83 = v26;
    v84 = 2048;
    v85 = v11;
    v86 = 2048;
    v87 = v27;
    v88 = 2048;
    v89 = v14;
    v90 = 2048;
    v91 = v28;
    v92 = 2048;
    v93 = v18;
    v94 = 2048;
    v95 = v29;
    v96 = 2048;
    v97 = v15;
    v98 = 2048;
    v99 = v30;
    v100 = 2048;
    v101 = v23;
    v102 = 2048;
    v103 = v24;
    v104 = 1024;
    v105 = v31;
    v106 = 1024;
    v107 = v32;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "new FTP input,startTime,%f,odometerTime,%f,rawSpeed,%f,elevationTime,%f,vspeed,%f,cadenceTime,%f,cadence,%f,powerTime,%f,power,%f,hrTime,%f,hr,%f,hrConfidence,%f,numSamplesWithPower,%d,numSamplesWithPowerAndHR,%d", buf, 0x86u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v33 = *(double *)(a3 + 8);
    v34 = *(_QWORD *)(a2 + 504);
    v35 = *(_QWORD *)(a3 + 40);
    v36 = *(_QWORD *)(a2 + 704);
    v37 = *(float *)(a3 + 24);
    v38 = *(_QWORD *)(a2 + 1024);
    v39 = *(float *)(a3 + 28);
    v40 = *(_QWORD *)(a2 + 1048);
    v41 = *(float *)(a3 + 32);
    v42 = *(_QWORD *)(a2 + 1192);
    v43 = *(float *)(a3 + 20);
    v44 = *a1;
    v45 = a1[1];
    v52 = 134221312;
    v53 = v33;
    v54 = 2048;
    v55 = v34;
    v56 = 2048;
    v57 = v35;
    v58 = 2048;
    v59 = v36;
    v60 = 2048;
    v61 = v37;
    v62 = 2048;
    v63 = v38;
    v64 = 2048;
    v65 = v39;
    v66 = 2048;
    v67 = v40;
    v68 = 2048;
    v69 = v41;
    v70 = 2048;
    v71 = v42;
    v72 = 2048;
    v73 = v23;
    v74 = 2048;
    v75 = v43;
    v76 = 1024;
    v77 = v44;
    v78 = 1024;
    v79 = v45;
    LODWORD(v51) = 134;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "new FTP input,startTime,%f,odometerTime,%f,rawSpeed,%f,elevationTime,%f,vspeed,%f,cadenceTime,%f,cadence,%f,powerTime,%f,power,%f,hrTime,%f,hr,%f,hrConfidence,%f,numSamplesWithPower,%d,numSamplesWithPowerAndHR,%d", COERCE_DOUBLE(&v52), v51);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPInput CLCyclingFTPDataStore::createDbEntryFromCalorieInputs(const CLNatalieModelInput::Data &)", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
}

void sub_1009F1E5C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  double v26;
  uint64_t v27;
  uint64_t v28[3];
  uint64_t v29[3];
  uint64_t v30;
  _BYTE v31[12];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  _BYTE buf[22];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  char out[48];
  uint64_t v44[6];
  uint64_t v45;
  char v46;

  v30 = a2;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = *(_QWORD **)(a1 + 200);
    if (!v3)
      goto LABEL_12;
    v4 = (_QWORD *)(a1 + 200);
    do
    {
      v5 = v3[4];
      v6 = v5 < a2;
      if (v5 >= a2)
        v7 = v3;
      else
        v7 = v3 + 1;
      if (!v6)
        v4 = v3;
      v3 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v4 == (_QWORD *)(a1 + 200) || v4[4] > a2)
    {
LABEL_12:
      v8 = (uint64_t **)(a1 + 192);
      sub_100210784((uint64_t **)(a1 + 192), &v30, &v30);
      v9 = sub_1009F5834(v29, (uint64_t)v8);
      v10 = sub_1009F2330((uint64_t)v9, v29);
      sub_100008848((uint64_t)v29, (_QWORD *)v29[1]);
      v11 = a1 + 144;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(v44, *(_QWORD *)(a1 + 8), a1 + 144);
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)(a1 + 144), out);
      if (v46)
      {
        if (v45 != v10)
        {
          sub_1009F2430(v45, (uint64_t **)buf);
          v12 = *(_QWORD **)buf;
          v13 = *(_QWORD **)&buf[8];
          if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
          {
            do
            {
              *(_QWORD *)v31 = *v12;
              sub_100210784(v8, (uint64_t *)v31, (uint64_t *)v31);
              ++v12;
            }
            while (v12 != v13);
            v12 = *(_QWORD **)buf;
          }
          if (v12)
          {
            *(_QWORD *)&buf[8] = v12;
            operator delete(v12);
          }
          v14 = *(_QWORD *)(a1 + 8);
          v15 = sub_1009F5834(v28, (uint64_t)v8);
          v16 = sub_1009F2330((uint64_t)v15, v28);
          LOBYTE(v14) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, v11, v16);
          sub_100008848((uint64_t)v28, (_QWORD *)v28[1]);
          if ((v14 & 1) == 0)
          {
            if (qword_10229FF90 != -1)
              dispatch_once(&qword_10229FF90, &stru_1021648C0);
            v17 = qword_10229FF98;
            if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = out;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Could not update the power meter id code in the db. sessionid, %s", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FF90 != -1)
                dispatch_once(&qword_10229FF90, &stru_1021648C0);
              *(_DWORD *)v31 = 136315138;
              *(_QWORD *)&v31[4] = out;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "Could not update the power meter id code in the db. sessionid, %s", v31);
              v19 = (char *)v18;
              sub_100512490("Generic", 1, 0, 0, "void CLCyclingFTPDataStore::updatePowerMeterId(int64_t)", "%s\n", v18);
LABEL_37:
              if (v19 != buf)
                free(v19);
            }
          }
        }
      }
      else
      {
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v20 = qword_10229FF98;
        if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
        {
          v21 = *(_QWORD *)(a1 + 160);
          v22 = *(_QWORD *)(a1 + 176);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = out;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v21;
          v39 = 2048;
          v40 = v30;
          v41 = 2048;
          v42 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "There is a new power meter id but there is no information about the current session in the db. sessionid, %s, startTime, %f, power meter id, %lld, workout type, %ld", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          v23 = *(_QWORD *)(a1 + 160);
          v24 = *(_QWORD *)(a1 + 176);
          *(_DWORD *)v31 = 136315906;
          *(_QWORD *)&v31[4] = out;
          v32 = 2048;
          v33 = v23;
          v34 = 2048;
          v35 = v30;
          v36 = 2048;
          v37 = v24;
          LODWORD(v26) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "There is a new power meter id but there is no information about the current session in the db. sessionid, %s, startTime, %f, power meter id, %lld, workout type, %ld", v31, v26, v27, v28[0]);
          v19 = (char *)v25;
          sub_100512490("Generic", 1, 0, 0, "void CLCyclingFTPDataStore::updatePowerMeterId(int64_t)", "%s\n", v25);
          goto LABEL_37;
        }
      }
    }
  }
}

void sub_1009F22F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  sub_100008848((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F2330(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0;
  v4 = 0;
  do
  {
    v5 = v3[4];
    if (v5 < 62)
      goto LABEL_14;
    v5 %= 0x3EuLL;
    v6 = (_QWORD *)*v2;
    if (!*v2)
      goto LABEL_14;
    v7 = v2;
    do
    {
      v8 = v6[4];
      v9 = v8 < v5;
      if (v8 >= v5)
        v10 = v6;
      else
        v10 = v6 + 1;
      if (!v9)
        v7 = v6;
      v6 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 == v2 || v5 < v7[4])
LABEL_14:
      v4 = (uint64_t)(exp2((double)v5) + (double)v4);
    v11 = (_QWORD *)v3[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v3[2];
        v13 = *v12 == (_QWORD)v3;
        v3 = v12;
      }
      while (!v13);
    }
    v3 = v12;
  }
  while (v12 != v2);
  return v4;
}

void sub_1009F2430(uint64_t a1@<X1>, uint64_t **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  long double v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 <= 0x3FFFFFFFFFFFFFFFLL)
  {
    v3 = a1;
    v4 = 61;
    do
    {
      v5 = v4;
      v6 = ldexp(1.0, v4);
      v7 = v3 - (uint64_t)v6;
      if (v3 >= (uint64_t)v6)
      {
        v9 = a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = *a2;
          v12 = v9 - *a2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            sub_100259694();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)sub_10025E6A0((uint64_t)(a2 + 2), v15);
            v11 = *a2;
            v9 = a2[1];
          }
          else
          {
            v16 = 0;
          }
          v17 = (uint64_t *)&v16[8 * v12];
          *v17 = v5;
          v10 = v17 + 1;
          while (v9 != v11)
          {
            v18 = *--v9;
            *--v17 = v18;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (uint64_t *)&v16[8 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v9 = v5;
          v10 = v9 + 1;
        }
        a2[1] = v10;
        v3 = v7;
      }
      v4 = v5 - 1;
    }
    while (v5);
  }
}

void sub_1009F255C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009F257C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  _QWORD *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  double v41;
  double v42;
  NSObject *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint8_t *v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint8_t *v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67[8];
  uint8_t buf[4];
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  _BYTE dst[32];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  double v76;
  _OWORD v77[6];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    while (1)
    {
      v8 = *a3;
      v7 = a3[1];
      v9 = *(_OWORD *)(v6 + 16);
      v77[0] = *(_OWORD *)v6;
      v77[1] = v9;
      v10 = *(_OWORD *)(v6 + 80);
      v12 = *(_OWORD *)(v6 + 32);
      v11 = *(_OWORD *)(v6 + 48);
      v77[4] = *(_OWORD *)(v6 + 64);
      v77[5] = v10;
      v77[2] = v12;
      v77[3] = v11;
      if (v8 == v7)
        goto LABEL_22;
      while (uuid_compare((const unsigned __int8 *)v8, (const unsigned __int8 *)v77 + 8))
      {
        v8 += 88;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
      if (v8 == a3[1])
      {
LABEL_22:
        v76 = 0.0;
        v74 = 0u;
        v75 = 0u;
        *(_OWORD *)&dst[16] = *(_OWORD *)(v6 + 24);
        *(_QWORD *)&v73 = *(_QWORD *)(v6 + 40);
        v21 = operator new(0x30uLL);
        v21[1] = 0;
        v21[2] = 0;
        *v21 = off_102164AF0;
        v21[4] = 0;
        v21[5] = 0;
        v21[3] = 0;
        *(_QWORD *)&v74 = v21 + 3;
        *((_QWORD *)&v74 + 1) = v21;
        v22 = *(double *)(v6 + 56);
        *((_QWORD *)&v73 + 1) = *(_QWORD *)(v6 + 48);
        if (v22 == -1.0)
        {
          v23 = *(float *)(a1 + 76);
          v24 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
          v25 = v24 + -44.0;
          if (!*(_BYTE *)(a1 + 96))
            v25 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
          if (v25 > v23)
            v23 = v25;
          if (v23 >= v24)
            v23 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
          *((double *)&v75 + 1) = v23;
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          v26 = qword_10229FF98;
          if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "No recorded HRMax, computing from body metrics", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF90 != -1)
              dispatch_once(&qword_10229FF90, &stru_1021648C0);
            v67[0] = 0;
            LODWORD(v66) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "No recorded HRMax, computing from body metrics", v67, v66);
            v28 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 2, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
        }
        else
        {
          *((double *)&v75 + 1) = v22;
        }
        v29 = *(double *)(v6 + 64);
        if (v29 == -1.0)
          v29 = *(float *)(a1 + 72);
        *(double *)&v75 = v29;
        uuid_copy(dst, (const unsigned __int8 *)(v6 + 8));
        v76 = *(float *)(v6 + 72);
        v30 = a3[1];
        if (v30 >= a3[2])
        {
          v37 = sub_1009F59E4(a3, (__int128 *)dst);
        }
        else
        {
          v31 = *(_OWORD *)dst;
          v32 = v73;
          *(_OWORD *)(v30 + 16) = *(_OWORD *)&dst[16];
          *(_OWORD *)(v30 + 32) = v32;
          *(_OWORD *)v30 = v31;
          *(_QWORD *)(v30 + 48) = v74;
          v33 = *((_QWORD *)&v74 + 1);
          *(_QWORD *)(v30 + 56) = *((_QWORD *)&v74 + 1);
          if (v33)
          {
            v34 = (unint64_t *)(v33 + 8);
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v36 = v75;
          *(double *)(v30 + 80) = v76;
          *(_OWORD *)(v30 + 64) = v36;
          v37 = v30 + 88;
        }
        a3[1] = v37;
        v38 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1))
        {
          v39 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        goto LABEL_70;
      }
      v13 = *(double *)(v6 + 24);
      v14 = *(double *)(v8 + 24);
      if (v13 >= *(double *)(v8 + 16))
        v13 = *(double *)(v8 + 16);
      *(double *)(v8 + 16) = v13;
      v15 = *(double *)(v6 + 32);
      if (v14 >= v15)
        v15 = v14;
      *(double *)(v8 + 24) = v15;
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(v8 + 32) != *(_QWORD *)(v6 + 40))
      {
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v16 = qword_10229FF98;
        if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_FAULT))
        {
          v17 = *(_QWORD *)(v8 + 32);
          v18 = *(_QWORD *)(v6 + 40);
          *(_DWORD *)buf = 134218240;
          v69 = v17;
          v70 = 2048;
          v71 = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "found two workout ids with different workout types when aggregating sessions,%lu,%lu", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          v58 = *(_QWORD *)(v8 + 32);
          v59 = *(_QWORD *)(v6 + 40);
          *(_DWORD *)dst = 134218240;
          *(_QWORD *)&dst[4] = v58;
          *(_WORD *)&dst[12] = 2048;
          *(_QWORD *)&dst[14] = v59;
          LODWORD(v66) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 17, "found two workout ids with different workout types when aggregating sessions,%lu,%lu", dst, v66);
          v61 = (uint8_t *)v60;
          sub_100512490("Generic", 1, 0, 0, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v60);
          if (v61 != buf)
            free(v61);
        }
      }
      v19 = *(double *)(v8 + 72);
      v20 = *(double *)(v6 + 56);
      if (v19 != -1.0)
        break;
      if (v20 != -1.0)
        goto LABEL_53;
      v45 = *(float *)(a1 + 76);
      v46 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      v47 = v46 + -44.0;
      if (!*(_BYTE *)(a1 + 96))
        v47 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      if (v47 > v45)
        v45 = v47;
      if (v45 >= v46)
        v45 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      *(double *)(v8 + 72) = v45;
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021648C0);
      v48 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
      {
        v49 = *(_QWORD *)(v8 + 72);
        *(_DWORD *)buf = 134217984;
        v69 = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "No recorded HRMax, computed from body metrics, %f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v50 = *(_QWORD *)(v8 + 72);
        *(_DWORD *)dst = 134217984;
        *(_QWORD *)&dst[4] = v50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "No recorded HRMax, computed from body metrics, %f", COERCE_DOUBLE(dst));
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
LABEL_54:
      v41 = *(double *)(v8 + 64);
      v42 = *(double *)(v6 + 64);
      if (v41 == -1.0)
      {
        if (v42 == -1.0)
        {
          *(double *)(v8 + 64) = *(float *)(a1 + 72);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          v53 = qword_10229FF98;
          if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
          {
            v54 = *(_QWORD *)(v8 + 64);
            *(_DWORD *)buf = 134217984;
            v69 = v54;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "No recorded HRMin, computing from body metrics, %f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF90 != -1)
              dispatch_once(&qword_10229FF90, &stru_1021648C0);
            v55 = *(_QWORD *)(v8 + 64);
            *(_DWORD *)dst = 134217984;
            *(_QWORD *)&dst[4] = v55;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "No recorded HRMin, computing from body metrics, %f", COERCE_DOUBLE(dst));
            v57 = (uint8_t *)v56;
            sub_100512490("Generic", 1, 0, 2, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v56);
            if (v57 != buf)
              free(v57);
          }
          goto LABEL_61;
        }
      }
      else
      {
        if (v42 == -1.0)
          goto LABEL_61;
        if (v42 >= v41)
          v42 = *(double *)(v8 + 64);
      }
      *(double *)(v8 + 64) = v42;
LABEL_61:
      if (*(float *)(v6 + 72) > 0.0)
      {
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v43 = qword_10229FF98;
        if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          v69 = v8;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Two sessions with the same UUID, %s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          *(_DWORD *)dst = 136315138;
          *(_QWORD *)&dst[4] = v8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "Two sessions with the same UUID, %s", dst);
          v63 = (uint8_t *)v62;
          sub_100512490("Generic", 1, 0, 0, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v62);
          if (v63 != buf)
            free(v63);
        }
        v44 = *(double *)(v8 + 80);
        if (v44 <= *(float *)(v6 + 72))
          v44 = *(float *)(v6 + 72);
        *(double *)(v8 + 80) = v44;
      }
LABEL_70:
      v6 += 96;
      if (v6 == v5)
        goto LABEL_104;
    }
    if (v20 == -1.0)
      goto LABEL_54;
    if (v19 >= v20)
      v20 = *(double *)(v8 + 72);
LABEL_53:
    *(double *)(v8 + 72) = v20;
    goto LABEL_54;
  }
LABEL_104:
  if (*(_BYTE *)(a1 + 44))
  {
    v64 = *a3;
    v65 = a3[1];
    if (*a3 != v65)
    {
      do
      {
        *(_QWORD *)(v64 + 40) = -2;
        v64 += 88;
      }
      while (v64 != v65);
    }
  }
}

void sub_1009F3004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1009F590C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1009F3048(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  int v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  void *__p;
  _BYTE *v16;
  uint64_t v17;
  void *v18[2];
  __int128 v19;
  int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _DWORD v24[4];
  uint8_t buf[8];
  uint64_t v26[204];

  v21 = 0;
  v22 = 0;
  v23 = 0;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  v20 = 0;
  if (*(_BYTE *)(a1 + 44))
  {
    v18[0] = (void *)0x4072C00000000000;
    sub_1002A3054((char *)&v21, 0, 0, 0);
    *(_QWORD *)buf = 4;
    sub_10034F2B0((char *)&v18[1], (char *)buf, (uint64_t)v26, 1uLL);
  }
  else
  {
    *(_QWORD *)buf = 0;
    v26[0] = 0;
    v26[1] = 0;
    sub_1009F5C30((uint64_t)&__p, *(_QWORD **)a2, (_QWORD *)(a2 + 8), (uint64_t)buf);
    __p = 0;
    v16 = 0;
    v17 = 0;
    sub_1009F5CBC((uint64_t)v24, *(_QWORD **)a3, (_QWORD *)(a3 + 8), (uint64_t)&__p);
    v18[0] = (void *)0x4072C00000000000;
    v20 = 1;
    sub_1002A3054((char *)&v21, *(char **)buf, v26[0], (v26[0] - *(_QWORD *)buf) >> 2);
    sub_10034F2B0((char *)&v18[1], (char *)__p, (uint64_t)v16, (v16 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      v26[0] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  __p = 0;
  v16 = 0;
  v17 = 0;
  v11 = (*(uint64_t (**)(_QWORD, void **, void **, double, double))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v18, &__p, a5, a6);
  if (v11 != 100)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v12 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed to retrieve sessions when building history, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021648C0);
      v24[0] = 67109120;
      v24[1] = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Failed to retrieve sessions when building history, %d", v24);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::getSessionsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, const std::set<int> &, const std::set<CMWorkoutType> &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v16 = __p;
  }
  sub_1009F257C(a1, (uint64_t *)&__p, a4);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v18[1])
  {
    *(void **)&v19 = v18[1];
    operator delete(v18[1]);
  }
}

void sub_1009F3390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  sub_1009F33F0(&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F33F0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_1009F3430(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18[3];

  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  v18[2] = 0;
  v4 = *(_QWORD **)(a2 + 48);
  v5 = (_QWORD *)*v4;
  v6 = (_QWORD *)v4[1];
  while (v5 != v6)
  {
    v17[0] = v5[1];
    v17[1] = v5[5];
    v17[2] = 0;
    sub_10132CD78(v18, (uint64_t)v17);
    v5[6] = v7;
    v5 += 8;
  }
  if (*(_QWORD *)(a2 + 32) == 4)
  {
    v8 = *(uint64_t **)(a2 + 48);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 == v10)
    {
      v11 = 1;
    }
    else
    {
      do
      {
        *(double *)(v9 + 56) = sub_1013110B0(v9, *(float *)(a1 + 60));
        v9 += 64;
      }
      while (v9 != v10);
      v11 = *(_QWORD *)(a2 + 32) == 4;
    }
    if (*(_BYTE *)(a1 + 44))
      v12 = !v11;
    else
      v12 = 1;
    if (!v12)
    {
      v14 = *(uint64_t **)(a2 + 48);
      v15 = *v14;
      v16 = v14[1];
      while (v15 != v16)
      {
        *(float *)(v15 + 32) = sub_1013110DC(v15, *(float *)(a1 + 60));
        v15 += 64;
      }
    }
  }
  return sub_1000F34E0(v18);
}

void sub_1009F3540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000F34E0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1009F355C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  char *v12;
  __int128 v13;
  uint64_t v14;
  void **v15;

  v12 = (char *)operator new(0x30uLL);
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *(_QWORD *)v12 = off_102164B40;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  *a4 = v12 + 24;
  a4[1] = v12;
  sub_1009F3048(a1, a2, a3, (uint64_t *)&v13, a5, a6);
  sub_1009F5DBC((void **)v12 + 3);
  *(_OWORD *)(v12 + 24) = v13;
  *((_QWORD *)v12 + 5) = v14;
  v14 = 0;
  v13 = 0uLL;
  v15 = (void **)&v13;
  sub_1009F590C(&v15);
}

void sub_1009F3630(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F3644(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD, _QWORD, double, double))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(double *)(a2 + 16), *(double *)(a2 + 24));
  return sub_1009F3430(a1, a2);
}

void sub_1009F3684(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  const unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  const void *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  double v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  char *v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  char *v45;
  char out[48];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = (const unsigned __int8 *)(a2 + 64);
  v8 = sub_100F72BB4(*(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
  v9 = *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  if (v9 == 4)
    *(_BYTE *)(a1 + 113) = 1;
  memset(out, 0, 37);
  uuid_unparse(v7, out);
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021648C0);
  v10 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(double *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134219010;
    v37 = v8;
    v38 = 2048;
    v39 = v6;
    v40 = 2048;
    v41 = v11;
    v42 = 2048;
    v43 = v12;
    v44 = 2080;
    v45 = out;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "feed workout event, workout type: %ld, event type, %ld, start time, %f end time, %f, session Id, %s", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v18 = *(double *)a2;
    v19 = *(_QWORD *)(a2 + 8);
    v26 = 134219010;
    v27 = v8;
    v28 = 2048;
    v29 = v6;
    v30 = 2048;
    v31 = v18;
    v32 = 2048;
    v33 = v19;
    v34 = 2080;
    v35 = out;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "feed workout event, workout type: %ld, event type, %ld, start time, %f end time, %f, session Id, %s", &v26, 52);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPDataStore::WorkoutEventInfo CLCyclingFTPDataStore::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  switch(v6)
  {
    case 13:
      goto LABEL_34;
    case 14:
    case 18:
      if (v8 == 33)
      {
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v13 = qword_10229FF98;
        if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ftp calculation in multi sport in transition.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          LOWORD(v26) = 0;
          LODWORD(v25) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "ftp calculation in multi sport in transition.", &v26, v25);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPDataStore::WorkoutEventInfo CLCyclingFTPDataStore::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v22);
          if (v23 != buf)
LABEL_43:
            free(v23);
        }
      }
      else if (v8 == *(_QWORD *)(a1 + 176))
      {
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v17 = qword_10229FF98;
        if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "ftp calculation in multi sport, go back to the same workout.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          LOWORD(v26) = 0;
          LODWORD(v25) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "ftp calculation in multi sport, go back to the same workout.", &v26, v25);
          v23 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "CLCyclingFTPDataStore::WorkoutEventInfo CLCyclingFTPDataStore::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v24);
          if (v23 != buf)
            goto LABEL_43;
        }
      }
      else
      {
        if (v9 == 4)
          sub_1009F3D20(a1, 1, *(double *)a2);
LABEL_34:
        sub_1009F4730(a1, v7, v8, *(double *)a2);
      }
LABEL_15:
      *(_WORD *)a3 = *(_WORD *)(a1 + 112);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      sub_1008BC19C((_QWORD *)(a3 + 8), *(const void **)(a1 + 120), *(_QWORD *)(a1 + 128), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3));
      return;
    case 15:
      *(_BYTE *)(a1 + 112) = 1;
      sub_1009F3D20(a1, v9 == 4, *(double *)(a2 + 8));
      *(_WORD *)a3 = *(_WORD *)(a1 + 112);
      v14 = *(const void **)(a1 + 120);
      v15 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      sub_1008BC19C((_QWORD *)(a3 + 8), v14, v15, 0xCCCCCCCCCCCCCCCDLL * ((v15 - (uint64_t)v14) >> 3));
      *(_WORD *)(a1 + 112) = 0;
      v16 = *(void **)(a1 + 120);
      if (v16)
      {
        *(_QWORD *)(a1 + 128) = v16;
        operator delete(v16);
      }
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_QWORD *)(a1 + 176) = 0;
      return;
    default:
      if (v9 == 4 && v6 == 2)
      {
        *(_BYTE *)(a1 + 184) = 1;
      }
      else if (v9 == 4 && v6 == 3)
      {
        *(_BYTE *)(a1 + 184) = 0;
      }
      goto LABEL_15;
  }
}

void sub_1009F3D20(uint64_t a1, int a2, double a3)
{
  _OWORD *v5;
  double v6;
  NSObject *v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  const char *v43;
  char *v44;
  const char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  char *v50;
  double v51;
  double v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  double v59;
  double v60;
  __int128 v61;
  double v62;
  double v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  char *v67;
  __int16 v68;
  double v69;
  _BYTE v70[24];
  double v71;
  __int16 v72;
  uint64_t v73;
  _BYTE buf[32];
  _QWORD v75[200];
  char out[48];
  __int128 v77;
  uint64_t v78;
  double v79;
  double v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char v84;

  if (a2)
  {
    v5 = (_OWORD *)(a1 + 144);
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(&v77, *(_QWORD *)(a1 + 8), a1 + 144);
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a1 + 144), out);
    if (v84)
    {
      *(_OWORD *)v70 = v77;
      *(_QWORD *)&v70[16] = v78;
      v6 = v79;
      v53 = v81;
      v55 = v82;
      v56 = v83;
      if (v80 != 0.0)
      {
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v7 = qword_10229FF98;
        if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = out;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Looks like there was a crash for sessionid, %s, around time, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          v66 = 136315394;
          v67 = out;
          v68 = 2048;
          v69 = a3;
          LODWORD(v51) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Looks like there was a crash for sessionid, %s, around time, %f", (const char *)&v66, v51);
          v46 = (char *)v45;
          sub_100512490("Generic", 1, 0, 2, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v45);
          if (v46 != buf)
            free(v46);
        }
        *(_QWORD *)(a1 + 176) = v53;
      }
      if (*(double *)(a1 + 160) != v6)
      {
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v8 = qword_10229FF98;
        if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = out;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Looks like there was a crash for sessionid, %s, before time, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          v66 = 136315394;
          v67 = out;
          v68 = 2048;
          v69 = a3;
          LODWORD(v51) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Looks like there was a crash for sessionid, %s, before time, %f", (const char *)&v66, v51);
          v48 = (char *)v47;
          sub_100512490("Generic", 1, 0, 2, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v47);
          if (v48 != buf)
            free(v48);
        }
        *(double *)(a1 + 160) = v6;
        *(_QWORD *)(a1 + 176) = v53;
      }
      *(double *)(a1 + 168) = a3;
      v9 = *(float *)(a1 + 72);
      v10 = *(float *)(a1 + 76);
      v11 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      v12 = v11 + -44.0;
      if (!*(_BYTE *)(a1 + 96))
        v12 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      if (v12 > v10)
        v10 = v12;
      if (v10 < v11)
        v11 = v10;
      v13 = *(_QWORD *)(a1 + 8);
      v57 = *(_OWORD *)v70;
      v58 = *(_QWORD *)&v70[16];
      v59 = v6;
      v60 = a3;
      v61 = v53;
      v62 = v11;
      v63 = v9;
      v64 = v55;
      v65 = v56;
      if (((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 48))(v13, &v57) & 1) == 0)
      {
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v14 = qword_10229FF98;
        if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = out;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Could not update the end time for the session in the db. sessionid, %s, endTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021648C0);
          v66 = 136315394;
          v67 = out;
          v68 = 2048;
          v69 = a3;
          LODWORD(v51) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "Could not update the end time for the session in the db. sessionid, %s, endTime, %f", (const char *)&v66, v51);
          v50 = (char *)v49;
          sub_100512490("Generic", 1, 0, 0, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v49);
          if (v50 != buf)
            free(v50);
        }
      }
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021648C0);
      v15 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = out;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "The cycling session is added to the sessions. sessionid, %s, at time, %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v66 = 136315394;
        v67 = out;
        v68 = 2048;
        v69 = a3;
        LODWORD(v51) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "The cycling session is added to the sessions. sessionid, %s, at time, %f", (const char *)&v66, v51);
        v44 = (char *)v43;
        sub_100512490("Generic", 1, 0, 2, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      v16 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)buf = *v5;
      *(_OWORD *)&buf[16] = v16;
      v75[0] = *(_QWORD *)(a1 + 176);
      v17 = *(_QWORD *)(a1 + 136);
      v18 = *(_QWORD *)(a1 + 128);
      if (v18 >= v17)
      {
        v29 = *(_QWORD *)(a1 + 120);
        v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v29) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0x666666666666666)
          sub_100259694();
        v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v29) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x333333333333333)
          v33 = 0x666666666666666;
        else
          v33 = v31;
        if (v33)
          v34 = (char *)sub_100357184(a1 + 136, v33);
        else
          v34 = 0;
        v35 = &v34[40 * v30];
        v36 = &v34[40 * v33];
        *(_OWORD *)v35 = *(_OWORD *)buf;
        *((_OWORD *)v35 + 1) = *(_OWORD *)&buf[16];
        *((_QWORD *)v35 + 4) = v75[0];
        v21 = v35 + 40;
        v38 = *(char **)(a1 + 120);
        v37 = *(char **)(a1 + 128);
        if (v37 != v38)
        {
          do
          {
            v39 = *(_OWORD *)(v37 - 40);
            v40 = *(_OWORD *)(v37 - 24);
            *((_QWORD *)v35 - 1) = *((_QWORD *)v37 - 1);
            *(_OWORD *)(v35 - 24) = v40;
            *(_OWORD *)(v35 - 40) = v39;
            v35 -= 40;
            v37 -= 40;
          }
          while (v37 != v38);
          v37 = *(char **)(a1 + 120);
        }
        *(_QWORD *)(a1 + 120) = v35;
        *(_QWORD *)(a1 + 128) = v21;
        *(_QWORD *)(a1 + 136) = v36;
        if (v37)
          operator delete(v37);
      }
      else
      {
        v19 = *v5;
        v20 = *(_OWORD *)(a1 + 160);
        *(_QWORD *)(v18 + 32) = *(_QWORD *)(a1 + 176);
        *(_OWORD *)v18 = v19;
        *(_OWORD *)(v18 + 16) = v20;
        v21 = (char *)(v18 + 40);
      }
      *(_QWORD *)(a1 + 128) = v21;
    }
    else
    {
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021648C0);
      v22 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
      {
        v23 = *(_QWORD *)(a1 + 160);
        v24 = *(_QWORD *)(a1 + 176);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = out;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v23;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = a3;
        LOWORD(v75[0]) = 2048;
        *(_QWORD *)((char *)v75 + 2) = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "The session was ended but there is no information about the start of the session in the db. sessionid, %s, startTime, %f, end time, %f, workout type: %ld", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021648C0);
        v25 = *(_QWORD *)(a1 + 160);
        v26 = *(_QWORD *)(a1 + 176);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = out;
        *(_WORD *)&v70[12] = 2048;
        *(_QWORD *)&v70[14] = v25;
        *(_WORD *)&v70[22] = 2048;
        v71 = a3;
        v72 = 2048;
        v73 = v26;
        LODWORD(v51) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "The session was ended but there is no information about the start of the session in the db. sessionid, %s, startTime, %f, end time, %f, workout type: %ld", v70, v51, v52, v54);
        v28 = (char *)v27;
        sub_100512490("Generic", 1, 0, 0, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
  }
  v42 = *(_QWORD **)(a1 + 200);
  v41 = (_QWORD *)(a1 + 200);
  *(v41 - 3) = 0;
  *(_OWORD *)(v41 - 5) = 0u;
  *(_OWORD *)(v41 - 7) = 0u;
  sub_100008848((uint64_t)(v41 - 1), v42);
  *(v41 - 1) = v41;
  *v41 = 0;
  v41[1] = 0;
}

void sub_1009F4730(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, double a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  unsigned __int8 v13[16];
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  uint64_t v21;
  int v22;
  _QWORD v23[12];
  char v24;

  *(_BYTE *)(a1 + 184) = 0;
  uuid_copy((unsigned __int8 *)(a1 + 144), a2);
  *(_QWORD *)(a1 + 176) = a3;
  *(_QWORD *)a1 = 0;
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, const unsigned __int8 *))(**(_QWORD **)(a1 + 8) + 40))(v23, *(_QWORD *)(a1 + 8), a2);
    if (v24)
    {
      a4 = *(double *)&v23[3];
    }
    else
    {
      uuid_copy(v13, a2);
      v14 = a4;
      v15 = 0;
      v16 = a3;
      v20 = -1082130432;
      v22 = -1082130432;
      v17 = 0;
      v8 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      v9 = *(float *)(a1 + 76);
      v10 = v8 + -44.0;
      if (!*(_BYTE *)(a1 + 96))
        v10 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      if (v10 > v9)
        v9 = v10;
      if (v9 < v8)
        v8 = v9;
      v11 = *(float *)(a1 + 72);
      v18 = v8;
      v19 = v11;
      v21 = 0;
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v12);
    }
  }
  *(double *)(a1 + 160) = a4;
}

uint64_t sub_1009F487C(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  void *v9;
  char *v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  v2 = *(_DWORD *)(a1 + 40);
  v3 = sub_1002596A8((uint64_t)&v10, 1uLL);
  *(double *)v3 = (double)v2;
  v3[1] = 0x7FEFFFFFFFFFFFFFLL;
  *((_BYTE *)v3 + 16) = 0;
  __p = v3;
  v10 = (char *)&v3[3 * v4];
  v9 = v3 + 3;
  v5 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &__p);
  v6 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), &__p);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6 + v5;
}

void sub_1009F496C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1009F4990(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  char *v8;
  uint8_t buf[4];
  char *v10;
  char out[48];
  _QWORD v12[9];
  float v13;
  char v14;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 40))(v12);
  if (v14)
    return v13 != -1.0;
  memset(out, 0, 37);
  uuid_unparse(a2, out);
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021648C0);
  v4 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v10 = out;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "There is no session to calculate the ftp! session id, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v7 = 136315138;
    v8 = out;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "There is no session to calculate the ftp! session id, %s", (const char *)&v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCyclingFTPDataStore::doesSessionHaveFtp(const unsigned char *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 0;
}

double sub_1009F4B84(uint64_t a1, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  NSObject *v19;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  int v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  double v45;
  uint8_t buf[4];
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  double v65;

  (*(void (**)(_QWORD, double))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), a3);
  if (v7 == 0.0)
    v6 = (*(double (**)(_QWORD, double))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a3);
  v8 = v6;
  v9 = v7;
  v10 = (a3 - v7) / 86400.0;
  if (v7 != 0.0 && ((v11 = v6 + -2.0, v10 >= 0.0) ? (v12 = v11 > a2) : (v12 = 0), v12))
  {
    v13 = v8 * (v10 * -0.00714285714 + 1.0);
    v14 = a2 * 0.09 * v10 + v8 * (v10 * -0.09 + 1.0);
    if (v13 >= a2)
      v15 = v8 * (v10 * -0.00714285714 + 1.0);
    else
      v15 = a2;
    if (v14 <= v13)
      v16 = v8 * (v10 * -0.00714285714 + 1.0);
    else
      v16 = a2 * 0.09 * v10 + v8 * (v10 * -0.09 + 1.0);
    if (v14 >= a2)
      v17 = v16;
    else
      v17 = v15;
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v18 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134220288;
      v47 = a2;
      v48 = 2048;
      v49 = v8;
      v50 = 2048;
      v51 = v9;
      v52 = 2048;
      v53 = v10;
      v54 = 2048;
      v55 = a2 * 0.09 * v10 + v8 * (v10 * -0.09 + 1.0);
      v56 = 2048;
      v57 = v8 * (v10 * -0.00714285714 + 1.0);
      v58 = 2048;
      v59 = 0x4000000000000000;
      v60 = 2048;
      v61 = 0x3F7D41D41D41D41ELL;
      v62 = 2048;
      v63 = 0x3FB70A3D70A3D70ALL;
      v64 = 2048;
      v65 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "EstimatedFTP, %f, lastFtp, %f, LastFtpTime, %f, daysDifference, %f, suggestedDecayedFtp, %f, maxAllowedDecayedFTP, %f, kMinimumWattDeltaToUseFTPDecay, %f, kMaxFTPDecayRatePerDay, %f, kBlendCoefficientForFTPDecay, %f, smoothedFtp, %f", buf, 0x66u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021648C0);
      v26 = 134220288;
      v27 = a2;
      v28 = 2048;
      v29 = v8;
      v30 = 2048;
      v31 = v9;
      v32 = 2048;
      v33 = v10;
      v34 = 2048;
      v35 = a2 * 0.09 * v10 + v8 * (v10 * -0.09 + 1.0);
      v36 = 2048;
      v37 = v8 * (v10 * -0.00714285714 + 1.0);
      v38 = 2048;
      v39 = 0x4000000000000000;
      v40 = 2048;
      v41 = 0x3F7D41D41D41D41ELL;
      v42 = 2048;
      v43 = 0x3FB70A3D70A3D70ALL;
      v44 = 2048;
      v45 = v17;
      LODWORD(v25) = 102;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "EstimatedFTP, %f, lastFtp, %f, LastFtpTime, %f, daysDifference, %f, suggestedDecayedFtp, %f, maxAllowedDecayedFTP, %f, kMinimumWattDeltaToUseFTPDecay, %f, kMaxFTPDecayRatePerDay, %f, kBlendCoefficientForFTPDecay, %f, smoothedFtp, %f", COERCE_DOUBLE(&v26), v25);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "const double CLCyclingFTPDataStore::decayEstimatedFTP(const double, const CFAbsoluteTime)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    return v17;
  }
  else
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v19 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218752;
      v47 = a2;
      v48 = 2048;
      v49 = v8;
      v50 = 2048;
      v51 = v9;
      v52 = 2048;
      v53 = v10;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "There is a no need to smooth the ftp. Current ftp %f last ftp, %f. Last ftp time, %f, days Difference, %f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021648C0);
      v26 = 134218752;
      v27 = a2;
      v28 = 2048;
      v29 = v8;
      v30 = 2048;
      v31 = v9;
      v32 = 2048;
      v33 = v10;
      LODWORD(v25) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "There is a no need to smooth the ftp. Current ftp %f last ftp, %f. Last ftp time, %f, days Difference, %f", COERCE_DOUBLE(&v26), v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "const double CLCyclingFTPDataStore::decayEstimatedFTP(const double, const CFAbsoluteTime)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  return a2;
}

uint64_t sub_1009F5074(uint64_t a1, uint64_t a2, double a3, double a4)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[2];
  uint64_t v14;

  v4 = *(__int128 **)(a2 + 8);
  v5 = *(__int128 **)(a2 + 16);
  if (v4 == v5)
    return 1;
  LODWORD(v9) = 1;
  do
  {
    v10 = *v4;
    v11 = v4[1];
    v14 = *((_QWORD *)v4 + 4);
    v13[0] = v10;
    v13[1] = v11;
    v9 = v9 & (*(unsigned int (**)(_QWORD, _OWORD *, double, double, double))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), v13, a3, a4, *((double *)&v11 + 1));
    v4 = (__int128 *)((char *)v4 + 40);
  }
  while (v4 != v5);
  return v9;
}

void sub_1009F5138(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

_QWORD *sub_1009F5164@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x198uLL);
  result = sub_1009F51BC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1009F51A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F51BC(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021648F0;
  sub_100E74C38(a1 + 3, *a2);
  return a1;
}

void sub_1009F51F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1009F520C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021648F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009F5220(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021648F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1009F5254(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1009F5264@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_1009F52BC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1009F52A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F52BC(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_102164940;
  a1[1] = 0;
  sub_1009F5374((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1009F5308(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1009F531C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102164940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009F5330(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102164940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1009F5364(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1009F5374(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v3 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  *a2 = off_102164990;
  a2[1] = v3;
  a2[2] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

_QWORD *sub_1009F53F4(_QWORD *a1)
{
  *a1 = off_102164990;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_1009F5428(_QWORD *a1)
{
  *a1 = off_102164990;
  sub_100261F44((uint64_t)(a1 + 1));
  operator delete();
}

uint64_t sub_1009F546C(uint64_t a1)
{
  return sub_100E74F30(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1009F5474(uint64_t a1, _QWORD *a2)
{
  return sub_100E75674(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1009F547C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_1009F548C@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1D0uLL);
  result = sub_1009F54E4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1009F54D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F54E4(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021649D8;
  sub_100D2689C(a1 + 3, *a2);
  return a1;
}

void sub_1009F5520(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1009F5534(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021649D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009F5548(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021649D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1009F557C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1009F558C@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_1009F55E4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1009F55D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009F55E4(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_102164A28;
  a1[1] = 0;
  sub_1009F569C((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1009F5630(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1009F5644(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102164A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009F5658(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102164A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1009F568C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1009F569C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v3 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  *a2 = off_102164A78;
  a2[1] = v3;
  a2[2] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

_QWORD *sub_1009F571C(_QWORD *a1)
{
  *a1 = off_102164A78;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_1009F5750(_QWORD *a1)
{
  *a1 = off_102164A78;
  sub_100261F44((uint64_t)(a1 + 1));
  operator delete();
}

uint64_t sub_1009F5794(uint64_t a1)
{
  return sub_100D26BD8(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1009F579C(uint64_t a1, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  return sub_100D27920(*(_QWORD *)(a1 + 8), a2, a3, a4, a5);
}

uint64_t sub_1009F57A4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100D26FCC(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1009F57AC(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[6];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = a2[3];
  v7[2] = a2[2];
  v7[3] = v3;
  v4 = a2[5];
  v7[4] = a2[4];
  v7[5] = v4;
  v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  return sub_100D29C00(v2, (uint64_t)v7);
}

uint64_t sub_1009F5814(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_100D29DC8(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1009F581C(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_100D29F6C(*(_QWORD *)(a1 + 8), a2);
}

double sub_1009F5824(uint64_t a1)
{
  return sub_100D2A150(*(_QWORD *)(a1 + 8));
}

double sub_1009F582C(uint64_t a1)
{
  return sub_100D2A398(*(_QWORD *)(a1 + 8));
}

uint64_t *sub_1009F5834(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1009F5888(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1009F5870(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1009F5888(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_10061789C(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_1009F590C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 88;
        sub_100261F44((uint64_t)(v4 - 40));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1009F5980(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102164AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009F5994(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102164AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1009F59C8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1009F59E4(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v21[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v21[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_100279B30(v7, v9);
  else
    v10 = 0;
  v11 = &v10[88 * v4];
  v21[0] = v10;
  v21[1] = v11;
  v21[3] = &v10[88 * v9];
  v12 = *a2;
  v13 = a2[2];
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = v13;
  *(_OWORD *)v11 = v12;
  *((_QWORD *)v11 + 6) = *((_QWORD *)a2 + 6);
  v14 = *((_QWORD *)a2 + 7);
  *((_QWORD *)v11 + 7) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = &v10[88 * v4];
  v18 = a2[4];
  *((_QWORD *)v17 + 10) = *((_QWORD *)a2 + 10);
  *((_OWORD *)v17 + 4) = v18;
  v21[2] = v11 + 88;
  sub_1009F5B40(a1, v21);
  v19 = a1[1];
  sub_1009F5BE0((uint64_t)v21);
  return v19;
}

void sub_1009F5B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1009F5BE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1009F5B40(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 88;
      v6 = *(_OWORD *)(v3 - 88);
      v7 = *(_OWORD *)(v3 - 72);
      *(_OWORD *)(v4 - 56) = *(_OWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v7;
      *(_OWORD *)(v4 - 88) = v6;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      v8 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v8;
      v3 -= 88;
      v4 -= 88;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1009F5BE0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    sub_100261F44(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1009F5C30(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v10;

  v4 = a2;
  v10 = a4;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    sub_1002F4DA8(&v10, (_DWORD *)v4 + 7);
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v4[2];
        v8 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v8);
    }
    v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

_QWORD *sub_1009F5CBC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v10;

  v4 = a2;
  v10 = a4;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    sub_1003142D8(&v10, v4 + 4);
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v4[2];
        v8 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v8);
    }
    v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

void sub_1009F5D48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102164B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009F5D5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102164B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1009F5D90(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  sub_1009F590C(&v1);
}

void sub_1009F5DBC(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 88;
        sub_100261F44((uint64_t)(v3 - 40));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1009F5EC8(id a1)
{
  qword_102306230 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCompanionBluetoothServiceSilo"));
}

void sub_1009F6E54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102306258);
  _Unwind_Resume(a1);
}

void sub_1009F7714(id a1)
{
  qword_10229FEB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

Class sub_1009F7740()
{
  Class result;

  if (qword_102306268 != -1)
    dispatch_once(&qword_102306268, &stru_102164BC0);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_102306260 = (uint64_t)result;
  off_1022A6450 = sub_1009F779C;
  return result;
}

uint64_t sub_1009F779C()
{
  return qword_102306260;
}

void sub_1009F77A8(id a1)
{
  qword_102306270 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_1009F77D0()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102306268 != -1)
    dispatch_once(&qword_102306268, &stru_102164BC0);
  v0 = (uint64_t *)dlsym((void *)qword_102306270, "_NRDevicePropertyBluetoothIdentifier");
  if (v0)
  {
    result = *v0;
    qword_102306278 = result;
  }
  else
  {
    result = qword_102306278;
  }
  off_1022A6458 = sub_1009F7848;
  return result;
}

uint64_t sub_1009F7848()
{
  return qword_102306278;
}

uint64_t sub_1009F7854()
{
  uint64_t result;

  if (qword_102311118)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311118 + 8))(qword_102311118);
  if (qword_102311120)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311120 + 8))(qword_102311120);
  result = qword_102311128;
  if (qword_102311128)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102311128 + 8))(qword_102311128);
  return result;
}

void sub_1009F78B0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if ((byte_102306280 & 1) == 0)
  {
    byte_102306280 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenLogEntry.pb.cc", a4);
    sub_10042B4BC(v4, v5, v6, v7);
    operator new();
  }
}

_QWORD *sub_1009F79FC(_QWORD *result)
{
  *result = off_102164BF0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_1009F7A10(uint64_t result)
{
  *(_QWORD *)result = off_102164CE0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

double sub_1009F7A38(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102164C68;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_1009F7A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenLogEntry.pb.cc", 244);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_102311118 + 8);
      sub_10042BFB0(v6, v7);
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311118 + 16);
      sub_1009F8298(v8, v9);
    }
  }
}

void sub_1009F7B9C()
{
  operator delete();
}

_QWORD *sub_1009F7BD4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311118 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1009F7C30(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102164BF0;
  sub_1009F7BD4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009F7C60(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102164BF0;
  sub_1009F7BD4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1009F7CA4(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311118;
  if (!qword_102311118)
  {
    sub_1009F78B0(0, a2, a3, a4);
    return qword_102311118;
  }
  return result;
}

void sub_1009F7CD0()
{
  operator new();
}

uint64_t sub_1009F7D08(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 28);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_10042C53C(result);
        v2 = *(_DWORD *)(v1 + 28);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
        result = sub_1009F7D54(result);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_1009F7D54(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  LOBYTE(v1) = *(_BYTE *)(result + 52);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 52) & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 36))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
          *(_QWORD *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
        v1 = *(_DWORD *)(result + 52);
      }
    }
    *(_DWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 20) = 0;
    if ((v1 & 8) != 0)
    {
      v3 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 52) & 0x10) != 0)
    {
      v4 = *(_QWORD *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(result + 40) = 0;
  }
  *(_DWORD *)(result + 52) = 0;
  return result;
}

uint64_t sub_1009F7E00(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
        *(_DWORD *)(a1 + 28) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v27 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0;
        }
        else
        {
          v27 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)this + 14);
        v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_10042CB24(v8, this, v13) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        v14 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)this + 14) = v16;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 18)
        {
          *((_QWORD *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_17;
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      v18 = *(_QWORD *)(a1 + 16);
      if (!v18)
        operator new();
      v28 = 0;
      v19 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0;
      }
      else
      {
        v28 = *v19;
        *((_QWORD *)this + 1) = v19 + 1;
      }
      v20 = *((_DWORD *)this + 14);
      v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21)
        return 0;
      v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      if (!sub_1009F8B28(v18, this, v23) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      v24 = *((_DWORD *)this + 14);
      v15 = __OFSUB__(v24, 1);
      v25 = v24 - 1;
      if (v25 < 0 == v15)
        *((_DWORD *)this + 14) = v25;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

void sub_1009F80DC()
{
  operator delete();
}

uint64_t sub_1009F8100(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311118 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311118 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t sub_1009F817C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_BYTE *)(a1 + 28))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    v4 = *(_QWORD *)(qword_102311118 + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10042D480(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 28) & 2) != 0)
  {
LABEL_12:
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311118 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009F9118(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v3 = (v3 + v11 + v12 + 1);
  }
LABEL_18:
  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

void sub_1009F824C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009F7A54(a1, (uint64_t)lpsrc);
}

void sub_1009F8298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  _BYTE v17[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v17, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenLogEntry.pb.cc", 1084);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 52);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    *(_DWORD *)(a1 + 52) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311120 + 8);
    sub_1009F8544(v6, v7);
    v5 = *(_DWORD *)(a2 + 52);
  }
  if ((v5 & 2) != 0)
  {
    v8 = *(_DWORD *)(a2 + 16);
    if ((sub_1009F8504(v8) & 1) == 0)
      sub_101913BB4();
    *(_DWORD *)(a1 + 52) |= 2u;
    *(_DWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 52);
  }
  if ((v5 & 4) != 0)
  {
    v9 = *(_BYTE *)(a2 + 20);
    *(_DWORD *)(a1 + 52) |= 4u;
    *(_BYTE *)(a1 + 20) = v9;
    v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 8) == 0)
    {
LABEL_15:
      if ((v5 & 0x10) == 0)
        goto LABEL_16;
LABEL_23:
      v12 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 52) |= 0x10u;
      v13 = *(std::string **)(a1 + 32);
      if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v13, v12);
      v5 = *(_DWORD *)(a2 + 52);
      if ((v5 & 0x20) == 0)
      {
LABEL_17:
        if ((v5 & 0x40) == 0)
          return;
        goto LABEL_28;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_15;
  }
  v10 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 8u;
  v11 = *(std::string **)(a1 + 24);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v11, v10);
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x10) != 0)
    goto LABEL_23;
LABEL_16:
  if ((v5 & 0x20) == 0)
    goto LABEL_17;
LABEL_26:
  v14 = *(_DWORD *)(a2 + 40);
  if (v14 >= 4)
    sub_101913B8C();
  *(_DWORD *)(a1 + 52) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v14;
  if ((*(_DWORD *)(a2 + 52) & 0x40) != 0)
  {
LABEL_28:
    v15 = *(_DWORD *)(a2 + 44);
    if (v15 >= 3)
      sub_101913B64();
    *(_DWORD *)(a1 + 52) |= 0x40u;
    *(_DWORD *)(a1 + 44) = v15;
  }
}

void sub_1009F84D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F84EC()
{
  return 1;
}

_QWORD *sub_1009F84F4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Raven.LogEntry");
}

uint64_t sub_1009F8504(unsigned int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 >= 0x30)
  {
    v3 = a1 - 50;
    if (v3 > 0x32 || ((1 << v3) & 0x4001FFFFFFFFFLL) == 0)
      return 0;
  }
  return result;
}

double sub_1009F8544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenLogEntry.pb.cc", 696);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 36);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return result;
LABEL_7:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_1009F8614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009F862C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102164C68;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009F863C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102164C68;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1009F866C()
{
  operator new();
}

uint64_t sub_1009F86AC(uint64_t result)
{
  if (*(_BYTE *)(result + 36))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1009F86C4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 17)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          *(_QWORD *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 25)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 1)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_1009F8888(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  return result;
}

uint64_t sub_1009F8900(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_1009F8938(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1009F8544(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009F8984()
{
  return 1;
}

_QWORD *sub_1009F898C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Raven.RavenPlatformInfo.TimeStamp");
}

_QWORD *sub_1009F899C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;

  v1 = result[3];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[4];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  if ((_QWORD *)qword_102311120 != result)
  {
    result = (_QWORD *)result[1];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1009F8A68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102164CE0;
  sub_1009F899C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009F8A98(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102164CE0;
  sub_1009F899C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1009F8ADC()
{
  operator new();
}

uint64_t sub_1009F8B28(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  _BYTE *v26;
  unsigned int v27;
  uint64_t result;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  void *v32;
  _BYTE *v33;
  void *v34;
  _BYTE *v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_25;
        *(_DWORD *)(a1 + 52) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v39 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39))return 0;
        }
        else
        {
          v39 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v19 = *((_DWORD *)this + 14);
        v20 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        if (!sub_1009F86C4(v8, this, v22) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
        v23 = *((_DWORD *)this + 14);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v25 < 0 == v24)
          *((_DWORD *)this + 14) = v25;
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v26 >= v10 || *v26 != 16)
          continue;
        v11 = v26 + 1;
        *((_QWORD *)this + 1) = v11;
        goto LABEL_38;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_25;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_38:
        v39 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
          if (!(_DWORD)result)
            return result;
          v27 = v39;
        }
        else
        {
          v27 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (sub_1009F8504(v27))
        {
          *(_DWORD *)(a1 + 52) |= 2u;
          *(_DWORD *)(a1 + 16) = v27;
        }
        v29 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v29 >= v12 || *v29 != 24)
          continue;
        v13 = v29 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_48:
        v39 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
          if (!(_DWORD)result)
            return result;
          v30 = v39;
          v31 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          v30 = *v13;
          v31 = v13 + 1;
          *((_QWORD *)this + 1) = v31;
        }
        *(_BYTE *)(a1 + 20) = v30 != 0;
        v14 = *(_DWORD *)(a1 + 52) | 4;
        *(_DWORD *)(a1 + 52) = v14;
        if ((unint64_t)v31 >= v12 || *v31 != 34)
          continue;
        *((_QWORD *)this + 1) = v31 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 52) = v14 | 8;
        v32 = *(void **)(a1 + 24);
        if (v32 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v32);
        if (!(_DWORD)result)
          return result;
        v33 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v33 >= *((_QWORD *)this + 2) || *v33 != 42)
          continue;
        *((_QWORD *)this + 1) = v33 + 1;
LABEL_62:
        *(_DWORD *)(a1 + 52) |= 0x10u;
        v34 = *(void **)(a1 + 32);
        if (v34 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v34);
        if (!(_DWORD)result)
          return result;
        v35 = (_BYTE *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v35 >= v15 || *v35 != 48)
          continue;
        v16 = v35 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_68:
        v39 = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
          if (!(_DWORD)result)
            return result;
          v36 = v39;
        }
        else
        {
          v36 = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        if (v36 <= 3)
        {
          *(_DWORD *)(a1 + 52) |= 0x20u;
          *(_DWORD *)(a1 + 40) = v36;
        }
        v37 = (_BYTE *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        if ((unint64_t)v37 >= v17 || *v37 != 56)
          continue;
        v18 = v37 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_78:
        v39 = 0;
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
          if (!(_DWORD)result)
            return result;
          v38 = v39;
        }
        else
        {
          v38 = *v18;
          *((_QWORD *)this + 1) = v18 + 1;
        }
        if (v38 <= 2)
        {
          *(_DWORD *)(a1 + 52) |= 0x40u;
          *(_DWORD *)(a1 + 44) = v38;
        }
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_25;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_48;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_25;
        v14 = *(_DWORD *)(a1 + 52);
        goto LABEL_56;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_62;
        goto LABEL_25;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_25;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_68;
      case 7u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_25;
        v18 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_78;
      default:
        v7 = TagFallback & 7;
LABEL_25:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1009F9020(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 52);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311120 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(5, *(_QWORD *)(v5 + 32), a2);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 44), (int)a2, a4);
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 40), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 0x40) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 44), (int)a2, a4);
  return result;
}

uint64_t sub_1009F9118(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;

  LOBYTE(v3) = *(_BYTE *)(a1 + 52);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_59;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) == 0)
  {
    LODWORD(v4) = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102311120 + 8);
  v6 = *(unsigned __int8 *)(v5 + 36);
  if (*(_BYTE *)(v5 + 36))
  {
    v7 = (v6 << 31 >> 31) & 9;
    if ((v6 & 2) != 0)
      v7 += 9;
    if ((v6 & 4) != 0)
      v6 = v7 + 9;
    else
      v6 = v7;
  }
  *(_DWORD *)(v5 + 32) = v6;
  LODWORD(v4) = v6 + 2;
  v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v8 & 0x80000000) != 0)
    {
      v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *(_DWORD *)(a1 + 52);
    }
    else
    {
      v9 = 2;
    }
    LODWORD(v4) = v9 + v4;
  }
LABEL_21:
  if ((v3 & 4) != 0)
    v4 = (v4 + 2);
  else
    v4 = v4;
  if ((v3 & 8) != 0)
  {
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(unsigned __int8 *)(v10 + 23);
    v12 = v11;
    v13 = *(_QWORD *)(v10 + 8);
    if ((v11 & 0x80u) == 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = v13;
    if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14, a2);
      v11 = *(unsigned __int8 *)(v10 + 23);
      v13 = *(_QWORD *)(v10 + 8);
      v3 = *(_DWORD *)(a1 + 52);
      v12 = *(_BYTE *)(v10 + 23);
    }
    else
    {
      v15 = 1;
    }
    if (v12 < 0)
      v11 = v13;
    v4 = (v4 + v15 + v11 + 1);
    if ((v3 & 0x10) == 0)
    {
LABEL_26:
      if ((v3 & 0x20) == 0)
        goto LABEL_27;
      goto LABEL_47;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_26;
  }
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = v17;
  v19 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(v16 + 23);
  else
    v20 = v19;
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20, a2);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v19 = *(_QWORD *)(v16 + 8);
    v3 = *(_DWORD *)(a1 + 52);
    v18 = *(_BYTE *)(v16 + 23);
  }
  else
  {
    v21 = 1;
  }
  if (v18 < 0)
    v17 = v19;
  v4 = (v4 + v21 + v17 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_27:
    if ((v3 & 0x40) == 0)
      goto LABEL_59;
    goto LABEL_53;
  }
LABEL_47:
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v22 & 0x80000000) != 0)
  {
    v23 = 11;
  }
  else if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2) + 1;
    v3 = *(_DWORD *)(a1 + 52);
  }
  else
  {
    v23 = 2;
  }
  v4 = (v23 + v4);
  if ((v3 & 0x40) != 0)
  {
LABEL_53:
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if ((v24 & 0x80000000) != 0)
    {
      v25 = 11;
    }
    else if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 1;
    }
    else
    {
      v25 = 2;
    }
    v4 = (v25 + v4);
  }
LABEL_59:
  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

void sub_1009F9314(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009F8298(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009F9360()
{
  return 1;
}

_QWORD *sub_1009F9368@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Raven.RavenPlatformInfo");
}

uint64_t sub_1009F937C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;

  *(_QWORD *)a1 = a3;
  v9 = a1 + 40;
  sub_100270E34(a1 + 8, a4);
  sub_100270E34(v9, a5);
  sub_100270E34(a1 + 72, a6);
  *(_BYTE *)(a1 + 104) = 0;
  dispatch_retain(*(dispatch_object_t *)a1);
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_1009F9404(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = v3;
  v6 = *(_QWORD **)(v1 + 64);
  if (v6 == v4)
  {
    v7 = v4;
    v8 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
    v7 = *(_QWORD **)(v1 + 64);
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = *(_QWORD **)(v1 + 32);
  if (v9 == v2)
  {
    v10 = 4;
    v9 = v2;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F947C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  sub_1009F95B0(a1);
  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3 == (_QWORD *)(a1 + 8))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)(a1 + 40);
  v6 = *(_QWORD **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v6 == (_QWORD *)(a1 + 40))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  dispatch_release(*(dispatch_object_t *)a1);
  *(_QWORD *)a1 = 0;
  v8 = *(_QWORD **)(a1 + 96);
  if (v8 == (_QWORD *)(a1 + 72))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = *(_QWORD **)(a1 + 64);
  if (v10 == v5)
  {
    v11 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_21;
    v11 = 5;
    v5 = *(_QWORD **)(a1 + 64);
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v11))(v5);
LABEL_21:
  v12 = *(_QWORD **)(a1 + 32);
  if (v12 == v2)
  {
    v13 = 4;
    goto LABEL_25;
  }
  if (v12)
  {
    v13 = 5;
    v2 = *(_QWORD **)(a1 + 32);
LABEL_25:
    (*(void (**)(_QWORD *))(*v2 + 8 * v13))(v2);
  }
  return a1;
}

void sub_1009F95B0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 168);
  if (v1 && (v3 = a1 + 112, (v1(a1 + 112) & 1) != 0))
  {
    sub_1000192DC(a1);
    TelephonyUtilTransportFree(v3);
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_QWORD *)(v3 + 80) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,stopPCIeTimeTransfer,Success\"}", (uint8_t *)&v7, 0x12u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v7 = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,stopPCIeTimeTransfer,telephonyUtility invalid\"}", (uint8_t *)&v7, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
    }
    v6 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v7 = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,stopPCIeTimeTransfer,telephonyUtility invalid", "{\"msg%{public}.0s\":\"#GnssTTPCIe,stopPCIeTimeTransfer,telephonyUtility invalid\"}", (uint8_t *)&v7, 0x12u);
    }
  }
}

double sub_1009F97EC(uint64_t a1)
{
  uint64_t v2;
  unsigned int (*v3)(uint64_t);
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  const char *label;
  double result;
  NSObject *v9;
  NSObject *v10;
  _QWORD v11[5];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;

  v2 = a1 + 112;
  v3 = *(unsigned int (**)(uint64_t))(a1 + 168);
  if (v3 && v3(a1 + 112))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v4 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    *(_DWORD *)buf = 68289026;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v5 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,Register time event\"}";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, buf, 0x12u);
LABEL_17:
    sub_1009F9BB4(a1);
    return result;
  }
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  TelephonyBasebandPCITransportInitParameters(a1 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 200) = 17;
  *(_QWORD *)(a1 + 224) = 0x2000003E8;
  *(_DWORD *)(a1 + 280) = 25;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102164DF0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 208));
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = label;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssTTPCIe\", \"queue,label\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1009F9D94;
  v11[3] = &unk_102164D90;
  v11[4] = a1;
  *(_QWORD *)(a1 + 216) = v11;
  if ((TelephonyBasebandPCITransportCreate(v2, a1 + 200) & 1) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v4 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    *(_DWORD *)buf = 68289026;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v5 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,TelephonyBasebandPCITransportCreate,Success\"}";
    goto LABEL_16;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102164DF0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,TelephonyBasebandPCITransportCreate,failure\"}", buf, 0x12u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
  }
  v10 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    *(_DWORD *)buf = 68289026;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,TelephonyBasebandPCITransportCreate,failure", "{\"msg%{public}.0s\":\"#GnssTTPCIe,TelephonyBasebandPCITransportCreate,failure\"}", buf, 0x12u);
  }
  *(_QWORD *)(v2 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  return result;
}

uint64_t sub_1009F9BB4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[5];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 168);
  if (!v1)
    return 0;
  v3 = a1 + 112;
  result = v1(a1 + 112);
  if ((_DWORD)result)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1009FA734;
    v7[3] = &unk_102164DD0;
    v7[4] = a1;
    if ((TelephonyBasebandPCITransportRegisterTimeEvent(v3, 2, v7) & 1) != 0)
    {
      *(_BYTE *)(a1 + 104) = 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportRegisterTimeEvent,Success\"}", buf, 0x12u);
      }
      return 1;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportRegisterTimeEvent,failure\"}", buf, 0x12u);
      }
      return *(_BYTE *)(a1 + 104) != 0;
    }
  }
  return result;
}

uint64_t sub_1009F9D94(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  uint32_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  _BYTE v23[24];

  v7 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    if (a2 == 1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v18 = 68289538;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2050;
        *(_QWORD *)v23 = a3;
        *(_WORD *)&v23[8] = 2050;
        *(_QWORD *)&v23[10] = a4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportStatusError\", \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}", (uint8_t *)&v18, 0x26u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102164DF0);
      }
      v9 = qword_1022A0078;
      if (os_signpost_enabled((os_log_t)qword_1022A0078))
      {
        v18 = 68289538;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2050;
        *(_QWORD *)v23 = a3;
        *(_WORD *)&v23[8] = 2050;
        *(_QWORD *)&v23[10] = a4;
        v10 = "#GnssTTPCIe,PCITransportStatusError";
        v11 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportStatusError\", \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}";
LABEL_17:
        v13 = v9;
        v14 = 38;
LABEL_25:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v10, v11, (uint8_t *)&v18, v14);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v18 = 68289794;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 1026;
        *(_DWORD *)v23 = a2;
        *(_WORD *)&v23[4] = 2050;
        *(_QWORD *)&v23[6] = a3;
        *(_WORD *)&v23[14] = 2050;
        *(_QWORD *)&v23[16] = a4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,Unrecognized,PCITransportStatus\", \"status\":%{public}d, \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}", (uint8_t *)&v18, 0x2Cu);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102164DF0);
      }
      v16 = qword_1022A0078;
      if (os_signpost_enabled((os_log_t)qword_1022A0078))
      {
        v18 = 68289794;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 1026;
        *(_DWORD *)v23 = a2;
        *(_WORD *)&v23[4] = 2050;
        *(_QWORD *)&v23[6] = a3;
        *(_WORD *)&v23[14] = 2050;
        *(_QWORD *)&v23[16] = a4;
        v10 = "#GnssTTPCIe,Unrecognized,PCITransportStatus";
        v11 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,Unrecognized,PCITransportStatus\", \"status\":%{public}d, \"arg1\":\"%{"
              "public}p\", \"arg2\":\"%{public}p\"}";
        v13 = v16;
        v14 = 44;
        goto LABEL_25;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v18 = 68289538;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2050;
      *(_QWORD *)v23 = a3;
      *(_WORD *)&v23[8] = 2050;
      *(_QWORD *)&v23[10] = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportStatusNotReady\", \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}", (uint8_t *)&v18, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
    }
    v9 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v18 = 68289538;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2050;
      *(_QWORD *)v23 = a3;
      *(_WORD *)&v23[8] = 2050;
      *(_QWORD *)&v23[10] = a4;
      v10 = "#GnssTTPCIe,PCITransportStatusNotReady";
      v11 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportStatusNotReady\", \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}";
      goto LABEL_17;
    }
  }
  sub_1009F95B0(v7);
  result = *(_QWORD *)(v7 + 96);
  if (result)
  {
    v18 = a2;
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)result + 48))(result, &v18);
  }
  return result;
}

uint64_t sub_1009FA1EC(uint64_t a1)
{
  NSObject *v2;
  char v3;
  uint64_t result;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[5];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102164DF0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,CLTelephonyPCIeTimeTransfer::startPCIeTimeTransfer\"}", buf, 0x12u);
  }
  sub_1009F97EC(a1);
  if ((v3 & 1) != 0)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1009FA424;
    v7[3] = &unk_102164DB0;
    v7[4] = a1;
    return TelephonyBasebandPCITransportTimesync(a1 + 112, 2, 1, v7);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,startPCIeTimeTransfer,init failed\"}", buf, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
    }
    v6 = qword_1022A0078;
    result = os_signpost_enabled((os_log_t)qword_1022A0078);
    if ((_DWORD)result)
    {
      *(_DWORD *)buf = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,startPCIeTimeTransfer,init failed", "{\"msg%{public}.0s\":\"#GnssTTPCIe,startPCIeTimeTransfer,init failed\"}", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

void sub_1009FA424(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  _BYTE v24[14];
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;

  if (a2 || !a4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v17 = 68289538;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = a2;
      v23 = 2050;
      *(_QWORD *)v24 = a4;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportTimesyncMeasurement,error\", \"status\":%{public}u, \"timeSyncMeas\":\"%{public}p\"}", (uint8_t *)&v17, 0x22u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
    }
    v16 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v17 = 68289538;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = a2;
      v23 = 2050;
      *(_QWORD *)v24 = a4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,PCITransportTimesyncMeasurement,error", "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportTimesyncMeasurement,error\", \"status\":%{public}u, \"timeSyncMeas\":\"%{public}p\"}", (uint8_t *)&v17, 0x22u);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_DWORD *)a4;
      v8 = *(_DWORD *)(a4 + 4);
      v10 = *(_QWORD *)(a4 + 8);
      v11 = *(_QWORD *)(a4 + 16);
      v12 = sub_100127828(v8);
      v13 = sub_100127828(*(_QWORD *)(a4 + 8));
      v14 = sub_100127828(*(_QWORD *)(a4 + 16));
      v17 = 68290818;
      v19 = 2082;
      v18 = 0;
      v20 = "";
      v21 = 1026;
      v22 = v9;
      v23 = 1026;
      *(_DWORD *)v24 = v8;
      *(_WORD *)&v24[4] = 2050;
      *(_QWORD *)&v24[6] = v10;
      v25 = 2050;
      v26 = v11;
      v27 = 2050;
      v28 = v12;
      v29 = 2050;
      v30 = v13;
      v31 = 2050;
      v32 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportTimesyncMeasurement\", \"sequence\":%{public}d, \"measDurationTick\":%{public}d, \"beginAbsTick\":%{public}llu, \"beginContTick\":%{public}llu, \"measDurationSec\":\"%{public}f\", \"beginAbsSec\":\"%{public}f\", \"beingContSec\":\"%{public}f\"}", (uint8_t *)&v17, 0x50u);
    }
    if (*(_QWORD *)(v6 + 64))
      sub_1009FA6EC(v6 + 40, *(_DWORD *)a4, *(_DWORD *)(a4 + 4), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
}

uint64_t sub_1009FA6EC(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v9 = a3;
  v10 = a2;
  v7 = a5;
  v8 = a4;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, int *, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

void sub_1009FA734(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v5 = *((_DWORD *)a2 + 1);
      v6 = *a2;
      v7 = a2[1];
      v8 = *((_QWORD *)a2 + 1);
      v16 = 68290050;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 1026;
      v21 = v5;
      v22 = 1026;
      v23 = v6;
      v24 = 1026;
      v25 = v7;
      v26 = 2050;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,registerTimeEvent\", \"sequence\":%{public}d, \"domain\":%{public}d, \"unit\":%{public}d, \"bbTick\":%{public}llu}", (uint8_t *)&v16, 0x2Eu);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
    }
    v9 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v10 = *((_DWORD *)a2 + 1);
      v11 = *a2;
      v12 = a2[1];
      v13 = *((_QWORD *)a2 + 1);
      v16 = 68290050;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 1026;
      v21 = v10;
      v22 = 1026;
      v23 = v11;
      v24 = 1026;
      v25 = v12;
      v26 = 2050;
      v27 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,registerTimeEvent", "{\"msg%{public}.0s\":\"#GnssTTPCIe,registerTimeEvent\", \"sequence\":%{public}d, \"domain\":%{public}d, \"unit\":%{public}d, \"bbTick\":%{public}llu}", (uint8_t *)&v16, 0x2Eu);
    }
    if (*(_QWORD *)(v3 + 32) && *a2 == 2 && a2[1] == 7)
      sub_1009FAA60(v3 + 8, *((_DWORD *)a2 + 1), *((_QWORD *)a2 + 1));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v16 = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,registerTimeEvent,PCITransportTimeEvent,NULL\"}", (uint8_t *)&v16, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102164DF0);
    }
    v15 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v16 = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,registerTimeEvent,PCITransportTimeEvent,NULL", "{\"msg%{public}.0s\":\"#GnssTTPCIe,registerTimeEvent,PCITransportTimeEvent,NULL\"}", (uint8_t *)&v16, 0x12u);
    }
  }
}

uint64_t sub_1009FAA60(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void sub_1009FAAA0(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

long double sub_1009FAACC(double a1)
{
  return (1.0 - pow(a1 * 1000.0 / 101325.0, 0.190263237)) * 44330.7692;
}

uint64_t sub_1009FAB14(uint64_t a1, char a2, char a3, char a4, uint64_t a5, double a6, double a7, double a8)
{
  double v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  long double v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a4;
  *(_BYTE *)(a1 + 2) = a3;
  v9 = a6;
  if (a6 < 0.0)
    v9 = 0.0;
  *(double *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(double *)(a1 + 40) = a7;
  *(double *)(a1 + 48) = a8;
  if (*(double *)(a1 + 8) < 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134218496;
      v24 = a1;
      v25 = 2048;
      v26 = v11;
      v27 = 2048;
      v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning %p Scan delay of %Lf secs is invalid. Setting to the minimum of %Lf secs", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
      v13 = *(_QWORD *)(a1 + 8);
      v17 = 134218496;
      v18 = a1;
      v19 = 2048;
      v20 = v13;
      v21 = 2048;
      v22 = 0;
      LODWORD(v16) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning %p Scan delay of %Lf secs is invalid. Setting to the minimum of %Lf secs", &v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLOldWifiScanner::WifiConfiguration::WifiConfiguration(CLWifiService_Type::ScanType, PassiveActiveType, PriorityType, cl::chrono::secondsf, std::vector<CLWifiService_Type::Notification>, cl::chrono::secondsf, cl::chrono::secondsf)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  return a1;
}

void sub_1009FAD40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009FAD64(uint64_t result, uint64_t a2, double a3)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(double *)(result + 24) = a3;
  return result;
}

uint64_t sub_1009FAD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_10027205C((_QWORD *)(a1 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_1009FCA3C((_BYTE *)(a1 + 56), a3);
  return a1;
}

void sub_1009FADFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009FAE1C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  id v6;
  _QWORD v7[5];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0x10000000000000;
  v5 = *a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_10027205C((_QWORD *)(a1 + 64), *((const void **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 2);
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a3 + 40);
  sub_1009FCA3C((_BYTE *)(a1 + 104), (uint64_t)a3 + 56);
  v6 = objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "newTimer");
  *(_QWORD *)(a1 + 24) = v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1009FB1B0;
  v7[3] = &unk_10212ECA0;
  v7[4] = a1;
  objc_msgSend(v6, "setHandler:", v7);
  sub_1001B7DEC();
}

void sub_1009FB13C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  sub_1009FB71C(v2 - 16);
  v5 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

void sub_1009FB1B0(uint64_t a1)
{
  sub_1009FB1B8(*(_QWORD *)(a1 + 32));
}

void sub_1009FB1B8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  int v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102164E10);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%p TIMER TRIGGERED", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v5 = 134217984;
    v6 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%p TIMER TRIGGERED", &v5);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLOldWifiScanner::onTimerTrigger()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1009FBC68(a1, *(double *)(a1 + 56));
}

void sub_1009FB36C(uint64_t a1, int *a2, unsigned __int8 *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLOldWifiScanner::onWifiNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102164E30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOldWifiScanner::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102164E30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOldWifiScanner::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1009FC2B4((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1009FB524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1009FB544(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLOldWifiScanner::onLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102164E30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOldWifiScanner::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102164E30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOldWifiScanner::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1009FC060((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1009FB6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009FB71C(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1009FB768(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  sub_1009FB7F8(a1);
  objc_msgSend(*(id *)(a1 + 24), "invalidate");

  if (*(_BYTE *)(a1 + 136))
  {
    v2 = *(void **)(a1 + 104);
    if (v2)
    {
      *(_QWORD *)(a1 + 112) = v2;
      operator delete(v2);
    }
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_1009FB7F8(uint64_t a1)
{
  NSObject *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (*(_BYTE *)(a1 + 33))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%p Stop monitor for active scanning", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
      v8 = 134217984;
      v9 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%p Stop monitor for active scanning", &v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLOldWifiScanner::stop()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 5);
    v3 = *(unsigned int **)(a1 + 64);
    v4 = *(unsigned int **)(a1 + 72);
    while (v3 != v4)
    {
      v5 = *v3++;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v5);
    }
    if (*(_BYTE *)(a1 + 136))
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), 4);
    *(_BYTE *)(a1 + 33) = 0;
    sub_1009FBC68(a1, 1.79769313e308);
  }
}

void sub_1009FBA28(uint64_t a1)
{
  NSObject *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (!*(_BYTE *)(a1 + 33))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%p Start monitor for active scanning", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
      v8 = 134217984;
      v9 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%p Start monitor for active scanning", &v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLOldWifiScanner::start()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 5, 0);
    v3 = *(unsigned int **)(a1 + 64);
    v4 = *(unsigned int **)(a1 + 72);
    while (v3 != v4)
    {
      v5 = *v3++;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v5, 0);
    }
    if (*(_BYTE *)(a1 + 136))
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), 4, 0);
    *(_BYTE *)(a1 + 33) = 1;
    sub_1009FBC68(a1, *(double *)(a1 + 56));
  }
}

void sub_1009FBC68(uint64_t a1, double a2)
{
  double Current;
  double v5;
  double v6;
  NSObject *v7;
  NSObject *v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;

  Current = j__CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 33))
  {
    v5 = Current;
    v6 = a2 + *(double *)(a1 + 40);
    if (Current < v6)
    {
      objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", v6 - Current);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
      v8 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
        *(_DWORD *)buf = 134218240;
        v24 = a1;
        v25 = 2048;
        v26 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%p WIFI SCAN SCHEDULED FOR %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102164E10);
        v12 = qword_1022A02D8;
        objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
        v17 = 134218240;
        v18 = a1;
        v19 = 2048;
        v20 = v13;
        LODWORD(v16) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "%p WIFI SCAN SCHEDULED FOR %f", &v17, v16);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLOldWifiScanner::scheduleNextScan(cl::chrono::secondsf)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
      v7 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        v24 = a1;
        v25 = 2048;
        v26 = v5;
        v27 = 2048;
        v28 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%p WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102164E10);
        v17 = 134218496;
        v18 = a1;
        v19 = 2048;
        v20 = v5;
        v21 = 2048;
        v22 = v6;
        LODWORD(v16) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%p WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f", &v17, v16);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLOldWifiScanner::scheduleNextScan(cl::chrono::secondsf)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      *(double *)(a1 + 40) = v5;
      sub_1009FC994(a1);
      objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", a2);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", 1.79769313e308);
  }
}

void sub_1009FC060(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  if (!*(_BYTE *)(a1 + 136))
    sub_101913BDC();
  if ((*a3 | 4) == 4)
  {
    v5 = *(_QWORD *)(a1 + 104);
    v6 = *(_QWORD *)(a1 + 112);
    if (v5 == v6)
    {
      v10 = 1;
    }
    else
    {
      v7 = *(_DWORD *)(a4 + 96);
      v8 = v5 + 4;
      do
      {
        v9 = *(_DWORD *)(v8 - 4);
        v11 = v9 == v7;
        v10 = v9 != v7;
        v11 = v11 || v8 == v6;
        v8 += 4;
      }
      while (!v11);
    }
    v12 = *(double *)(a4 + 20);
    if (v12 > 0.0)
    {
      if (v12 >= *(double *)(a1 + 128))
        v10 = 1;
      if (!v10)
      {
        *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent();
        sub_1009FBC68(a1, *(double *)(a1 + 56));
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102164E10);
        v13 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
          *(_DWORD *)buf = 134218240;
          v25 = a1;
          v26 = 2048;
          v27 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%p Good GPS location received, hold off wifi scan, nextFire=%f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102164E10);
          v15 = qword_1022A02D8;
          objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
          v20 = 134218240;
          v21 = a1;
          v22 = 2048;
          v23 = v16;
          LODWORD(v19) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "%p Good GPS location received, hold off wifi scan, nextFire=%f", &v20, v19);
          v18 = (uint8_t *)v17;
          sub_100512490("Generic", 1, 0, 2, "void CLOldWifiScanner::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
      }
    }
  }
}

void sub_1009FC2B4(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  int v5;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  _DWORD *i;
  NSObject *v25;
  int v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  int v33;
  const char *v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  _DWORD v38[4];
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  _QWORD v42[203];

  v5 = *a3;
  if (*a3 == 5)
  {
    v14 = *(double *)(a1 + 88);
    *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent();
    sub_1009FBC68(a1, v14);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v15 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
      *(_DWORD *)buf = 134218240;
      v40 = a1;
      v41 = 2048;
      v42[0] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%p WIFI NOTIFICATION SCAN BUSY, nextFire=%f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v17 = qword_1022A02D8;
    objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 2, "%p WIFI NOTIFICATION SCAN BUSY, nextFire=%f", &v35);
LABEL_34:
    v23 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLOldWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v18);
    if (v23 == buf)
      return;
    goto LABEL_54;
  }
  if (v5 == 4)
  {
    v19 = *(double *)(a1 + 96);
    *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent();
    sub_1009FBC68(a1, v19);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v20 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
      *(_DWORD *)buf = 134218240;
      v40 = a1;
      v41 = 2048;
      v42[0] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%p WIFI NOTIFICATION SCAN ERROR, nextFire=%f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v22 = qword_1022A02D8;
    objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "%p WIFI NOTIFICATION SCAN ERROR, nextFire=%f", &v35);
    goto LABEL_34;
  }
  if (v5 == 1)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a4;
      objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
      *(_DWORD *)buf = 134218496;
      v40 = a1;
      v41 = 1024;
      LODWORD(v42[0]) = v8;
      WORD2(v42[0]) = 2048;
      *(_QWORD *)((char *)v42 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%p WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
      v28 = qword_1022A02D8;
      v29 = *a4;
      objc_msgSend(*(id *)(a1 + 24), "nextFireTime");
      v35 = 134218496;
      v36 = a1;
      v37 = 1024;
      v38[0] = v29;
      LOWORD(v38[1]) = 2048;
      *(_QWORD *)((char *)&v38[1] + 2) = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "%p WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f", &v35, 28);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLOldWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    v10 = *(unsigned __int8 *)(a1 + 32);
    v11 = *a4;
    if (v10 != v11)
    {
      v12 = v10 != 0;
      if (*a4)
        v13 = v10 != 0;
      else
        v13 = 1;
      if (*a4)
        v12 = 0;
      if (!v12 && v13)
        sub_101913D48();
    }
    *(_BYTE *)(a1 + 32) = v11;
    return;
  }
  for (i = *(_DWORD **)(a1 + 64); i != *(_DWORD **)(a1 + 72); ++i)
  {
    if (v5 == *i)
    {
      v27 = *(double *)(a1 + 56);
      *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent();
      sub_1009FBC68(a1, v27);
      return;
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102164E10);
  v25 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v26 = (char)a4[1];
    *(_DWORD *)buf = 134218240;
    v40 = a1;
    v41 = 1024;
    LODWORD(v42[0]) = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "%p UNHANDLED WIFI NOTIFICATION, type=%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102164E10);
    v33 = (char)a4[1];
    v35 = 134218240;
    v36 = a1;
    v37 = 1024;
    v38[0] = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%p UNHANDLED WIFI NOTIFICATION, type=%d", &v35, 18);
    v23 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "void CLOldWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v34);
    if (v23 != buf)
LABEL_54:
      free(v23);
  }
}

id sub_1009FC994(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor", *(double *)(a1 + 56)), "proxyForService:", CFSTR("CLWifiService")), "syncgetStartScanWithType:lowPriority:passive:requester:", *(char *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50), "oldscanner");
  else
    return 0;
}

void sub_1009FCA10(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_BYTE *sub_1009FCA3C(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  sub_1009FCA84((uint64_t)a1, a2);
  return a1;
}

void sub_1009FCA68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    sub_1018FF474(v1);
  _Unwind_Resume(exception_object);
}

double sub_1009FCA84(uint64_t a1, uint64_t a2)
{
  double result;

  if (*(_BYTE *)(a2 + 32))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_10027205C((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    result = *(double *)(a2 + 24);
    *(double *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

void sub_1009FCAD8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1009FCB04(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;

  *(_QWORD *)a1 = off_102164E60;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 24), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v4;
  }
  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = sub_100259584(a1 + 48, v5 + 13);
  if (*(char *)(a1 + 71) >= 0)
    v7 = (void *)v6;
  else
    v7 = *(void **)(a1 + 48);
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *(const void **)a2;
    memmove(v7, v8, v5);
  }
  strcpy((char *)v7 + v5, "TimeRemaining");
  return a1;
}

void sub_1009FCBF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009FCC0C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_102164E60;
  sub_1000CFEAC(a1);
  v2 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 944))(v2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1009FCC74(uint64_t a1)
{
  sub_1009FCC0C(a1);
  operator delete();
}

BOOL sub_1009FCC98(uint64_t a1, double a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  double v13;
  int v14;
  _QWORD *v15;
  __int16 v16;
  double v17;
  uint8_t buf[4];
  _QWORD *v19;
  __int16 v20;
  double v21;

  v13 = a2;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102164E90);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)buf = 136315394;
    v19 = v5;
    v20 = 2048;
    v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "NonInterruptingTimer, %s, totalTime, %.2f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102164E90);
    v9 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v9 = (_QWORD *)*v9;
    v14 = 136315394;
    v15 = v9;
    v16 = 2048;
    v17 = a2;
    LODWORD(v12) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "NonInterruptingTimer, %s, totalTime, %.2f", (const char *)&v14, v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNonInterruptingTimer::setTotalTime(CFTimeInterval)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v6 = sub_1001FD94C();
  v7 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v7 = *(const char **)v7;
  return sub_10018A4CC(v6, v7, &v13);
}

uint64_t sub_1009FCEA4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  double v4;
  uint64_t v5;
  _QWORD *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  _QWORD *v11;
  uint8_t buf[4];
  _QWORD *v13;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102164E90);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v3 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136315138;
    v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "NonInterruptingTimer, %s, persist", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102164E90);
    v7 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v7 = (_QWORD *)*v7;
    v10 = 136315138;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "NonInterruptingTimer, %s, persist", (const char *)&v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNonInterruptingTimer::persistTime()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = sub_1001FD8B8(a1);
    sub_1009FCC98(a1, v4);
  }
  v5 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
}

void sub_1009FD094(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  _QWORD *v8;
  uint8_t buf[4];
  _QWORD *v10;

  if (*(_DWORD *)(a1 + 8))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102164E90);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      v3 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "NonInterruptingTimer, %s, startTimer", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102164E90);
      v4 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v4 = (_QWORD *)*v4;
      v7 = 136315138;
      v8 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "NonInterruptingTimer, %s, startTimer", (const char *)&v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNonInterruptingTimer::startTimer()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    *(double *)(a1 + 16) = sub_1001FCBB4();
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1009FD270(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

_QWORD *sub_1009FD29C(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_102164EC0;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_1009FD2CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1009FD2DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_1009FD2EC(_QWORD *a1)
{
  *a1 = off_102164EC0;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_1009FD31C(_QWORD *a1)
{
  *a1 = off_102164EC0;
  sub_100261F44((uint64_t)(a1 + 1));
  operator delete();
}

uint64_t sub_1009FD35C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v6 = off_102164F30;
  v6[6] = off_102141E98;
  v7 = operator new(0x20uLL);
  v7[2] = 0;
  *((_DWORD *)v7 + 6) = 31337;
  *v7 = off_102141ED0;
  v7[1] = 0;
  *(_QWORD *)(a1 + 56) = v7 + 3;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 120) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  return a1;
}

void sub_1009FD3F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009FD40C(uint64_t a1)
{
  uint64_t v2;
  double Current;
  void **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_102164F30;
  v2 = sub_100E78AC8();
  sub_100E7910C(v2, a1, 0, 0);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(int *)(a1 + 124) >= 1)
      *(double *)(a1 + 112) = Current;
    *(_QWORD *)&v10 = 0;
    *((_QWORD *)&v10 + 1) = 0xBFF0000000000000;
    *(_QWORD *)&v11 = 0xBFF0000000000000;
    *((_QWORD *)&v11 + 1) = 0xFFFFFFFFLL;
    v13 = 0;
    v14 = 0;
    v12 = &v13;
    *(_OWORD *)(a1 + 72) = v10;
    v4 = (void **)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      operator delete(*v4);
    *(_OWORD *)v4 = 0uLL;
    *(_QWORD *)(a1 + 104) = 0;
    v6 = a1 + 136;
    v5 = *(char **)(a1 + 136);
    *(_OWORD *)(a1 + 112) = v11;
    sub_100090AE4(a1 + 128, v5);
    v7 = v13;
    *(_QWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 136) = v7;
    v8 = v14;
    *(_QWORD *)(a1 + 144) = v14;
    if (v8)
    {
      *(_QWORD *)(v7 + 16) = v6;
      v7 = 0;
      v12 = &v13;
      v13 = 0;
      v14 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 128) = v6;
    }
    sub_100090AE4((uint64_t)&v12, (char *)v7);
  }
  sub_100090AE4(a1 + 128, *(char **)(a1 + 136));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  sub_100090A0C((_QWORD *)(a1 + 48));
  return sub_10002FA68(a1);
}

void sub_1009FD57C(uint64_t a1)
{
  sub_1009FD40C(a1);
  operator delete();
}

_QWORD *sub_1009FD5A0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  void *__p[2];
  char v9;
  _BYTE v10[24];
  _BYTE *v11;

  v6[0] = off_102165018;
  v6[1] = sub_1009FD6FC;
  v6[2] = 0;
  v7 = v6;
  sub_1015A2E04(__p, "kCLConnectionMessageGesture");
  sub_1009FEE14((uint64_t)v10, (uint64_t)v6);
  sub_1009FF208(a1, (unsigned __int8 *)__p, 1);
  v2 = v11;
  if (v11 == v10)
  {
    v3 = 4;
    v2 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0)
    operator delete(__p[0]);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1009FD6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t *v14;
  uint64_t v15;

  sub_1004E21A4((uint64_t)&a13);
  v14 = a12;
  if (a12 == &a9)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_1009FD6FC(uint64_t a1, int a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void **v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[7];
  std::__shared_weak_count *v44;
  int v45;
  int v46;
  uint64_t v47;
  _BYTE v48[18];
  _BYTE buf[32];
  uint64_t v50;
  __int128 v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;

  v6 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FCF0 != -1)
    dispatch_once(&qword_10229FCF0, &stru_102164FE8);
  v7 = qword_10229FCF8;
  if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received Gesture request,client,%{public}@,subscribe,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_102164FE8);
    v28 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v48 = 138543618;
    *(_QWORD *)&v48[4] = v28;
    *(_WORD *)&v48[12] = 1026;
    *(_DWORD *)&v48[14] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "Received Gesture request,client,%{public}@,subscribe,%{public}d", v48, 18);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  sub_1001A638C(a1);
  if (a2)
  {
    v45 = 0;
    if ((sub_1001E4B84(a3, "kCLConnectionMessagePriorityKey", &v45) & 1) == 0)
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_102164FE8);
      v9 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Priority not set", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_102164FE8);
        *(_WORD *)v48 = 0;
        LODWORD(v42) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 17, "Priority not set", v48, v42);
        v38 = (char *)v37;
        sub_100512490("Generic", 1, 0, 0, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v37);
        if (v38 != buf)
          free(v38);
      }
      v45 = 0;
    }
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_102164FE8);
    v10 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v45;
      *(_WORD *)&buf[8] = 2114;
      *(_QWORD *)&buf[10] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Got gesture subscription request, priority = %{public}d, Client = %{public}@", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_102164FE8);
      v34 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v48 = 67240450;
      *(_DWORD *)&v48[4] = v45;
      *(_WORD *)&v48[8] = 2114;
      *(_QWORD *)&v48[10] = v34;
      LODWORD(v42) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "Got gesture subscription request, priority = %{public}d, Client = %{public}@", v48, v42);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    v12 = objc_msgSend(*(id *)(a1 + 8), "silo");
    sub_10052D218(a1 + 48, v48);
    v13 = sub_100E78AC8();
    v14 = v45;
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3321888768;
    v43[2] = sub_1009FEAB0;
    v43[3] = &unk_102164F88;
    v43[4] = v12;
    v43[5] = a1;
    v43[6] = *(_QWORD *)v48;
    v44 = *(std::__shared_weak_count **)&v48[8];
    if (*(_QWORD *)&v48[8])
    {
      v15 = (unint64_t *)(*(_QWORD *)&v48[8] + 16);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    sub_100E7910C(v13, a1, v14, (uint64_t)v43);
    if (!*(_BYTE *)(a1 + 72))
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_102164FE8);
      v17 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
      {
        v18 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "starting metric session (MotionTrigger) for %{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_102164FE8);
        v39 = *(_QWORD *)(a1 + 24);
        v46 = 138543362;
        v47 = v39;
        LODWORD(v42) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "starting metric session (MotionTrigger) for %{public}@", &v46, v42);
        v41 = (char *)v40;
        sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
      *(_BYTE *)(a1 + 72) = 1;
      *(CFAbsoluteTime *)(a1 + 80) = CFAbsoluteTimeGetCurrent();
      sub_1001B5504(a1, buf);
      v19 = (void **)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        operator delete(*v19);
      *(_OWORD *)v19 = *(_OWORD *)buf;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)&buf[16];
      *(_DWORD *)(a1 + 120) = 0;
    }
    if (v44)
      std::__shared_weak_count::__release_weak(v44);
    if (*(_QWORD *)&v48[8])
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v48[8]);
  }
  else
  {
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_102164FE8);
    v20 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Got gesture unsubscription request, Client = %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_102164FE8);
      v31 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v48 = 138543362;
      *(_QWORD *)&v48[4] = v31;
      LODWORD(v42) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "Got gesture unsubscription request, Client = %{public}@", v48, v42);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    v22 = sub_100E78AC8();
    sub_100E7910C(v22, a1, 0, 0);
    if (*(_BYTE *)(a1 + 72))
    {
      if (*(int *)(a1 + 124) >= 1)
        *(CFAbsoluteTime *)(a1 + 112) = CFAbsoluteTimeGetCurrent();
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0xBFF0000000000000;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)&buf[24] = 0;
      v50 = 0;
      *(_QWORD *)&v51 = 0xBFF0000000000000;
      *((_QWORD *)&v51 + 1) = 0xFFFFFFFFLL;
      v53 = 0;
      v54 = 0;
      v52 = &v53;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)buf;
      v23 = (void **)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        operator delete(*v23);
      *(_OWORD *)v23 = *(_OWORD *)&buf[16];
      *(_QWORD *)(a1 + 104) = v50;
      HIBYTE(v50) = 0;
      buf[16] = 0;
      v25 = *(char **)(a1 + 136);
      v24 = (_QWORD *)(a1 + 136);
      *(_OWORD *)(v24 - 3) = v51;
      sub_100090AE4((uint64_t)(v24 - 1), v25);
      v26 = v53;
      *(v24 - 1) = v52;
      *v24 = v26;
      v27 = v54;
      v24[1] = v54;
      if (v27)
      {
        *(_QWORD *)(v26 + 16) = v24;
        v26 = 0;
        v52 = &v53;
        v53 = 0;
        v54 = 0;
      }
      else
      {
        *(v24 - 1) = v24;
      }
      sub_100090AE4((uint64_t)&v52, (char *)v26);
      if (SHIBYTE(v50) < 0)
        operator delete(*(void **)&buf[16]);
    }
  }

}

void sub_1009FE02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  void *v24;

  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);

  _Unwind_Resume(a1);
}

uint64_t sub_1009FE0A4(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  _OWORD *v10;
  NSObject *v11;
  double Current;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  const char *v18;
  char *v19;
  const char *v20;
  char *v21;
  const char *v22;
  char *v23;
  void *v24;
  const char *v25;
  char *v26;
  void *v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  _BYTE v31[16];
  void *__p[2];
  uint64_t v33;
  int v34;
  _BYTE v35[20];
  void *v36[2];
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  char v41;
  int v42;
  __int128 buf;
  uint64_t v44;
  int v45;

  sub_100119F3C(v31);
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 == 1)
  {
    sub_1015A2E04(&buf, "GestureCanceled");
    sub_100528888((uint64_t)v31, "kCLConnectionMessageNameKey", (char *)&buf);
  }
  else
  {
    if (v4)
      goto LABEL_7;
    sub_1015A2E04(&buf, "GestureDetected");
    sub_100528888((uint64_t)v31, "kCLConnectionMessageNameKey", (char *)&buf);
  }
  if (SHIBYTE(v44) < 0)
    operator delete((void *)buf);
LABEL_7:
  *(_QWORD *)&buf = sub_10011A5AC((uint64_t)v31);
  sub_1009FEA08(a1, &buf);
  if (qword_10229FCF0 != -1)
    dispatch_once(&qword_10229FCF0, &stru_102164FE8);
  v5 = qword_10229FCF8;
  if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136380675;
    *(_QWORD *)((char *)&buf + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sent ear gesture message (prototype %{private}s)", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_102164FE8);
    v34 = 136380675;
    *(_QWORD *)v35 = a2;
    LODWORD(v30) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCF8, 1, "Sent ear gesture message (prototype %{private}s)", &v34, v30);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v18);
    if (v19 != (char *)&buf)
      free(v19);
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v34 = -1;
    *(_OWORD *)&v35[4] = 0u;
    *(_OWORD *)v36 = 0u;
    v37 = 0u;
    *(_OWORD *)v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    v42 = -1;
    v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLAppMonitor")), "syncgetForegroundApp:", &v34);
    HIBYTE(v30) = 1;
    v7 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetActiveCall:", (char *)&v30 + 7);
    if (HIBYTE(v30))
      v8 = v7;
    else
      v8 = 0;
    HIBYTE(v30) = v8;
    if (v6)
    {
      if (!std::string::compare((const std::string *)&v35[4], "com.apple.mobilephone"))
        goto LABEL_30;
      v8 = HIBYTE(v30);
    }
    if (!v8)
    {
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_102164FE8);
      v9 = qword_10229FCF8;
      if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "counting metric for non-phone pick-up", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_102164FE8);
        LOWORD(__p[0]) = 0;
        LODWORD(v30) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "counting metric for non-phone pick-up", __p, v30);
        v21 = (char *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v20);
        if (v21 != (char *)&buf)
          free(v21);
      }
      ++*(_DWORD *)(a1 + 124);
      sub_1015A2E04(__p, (char *)a2);
      buf = *(_OWORD *)__p;
      v44 = v33;
      __p[1] = 0;
      v33 = 0;
      __p[0] = 0;
      v45 = 0;
      v10 = sub_1009FF5E8((uint64_t **)(a1 + 128), (const void **)&buf, (uint64_t)&buf);
      if (SHIBYTE(v44) < 0)
        operator delete((void *)buf);
      if (SHIBYTE(v33) < 0)
        operator delete(__p[0]);
      ++*((_DWORD *)v10 + 14);
LABEL_35:
      Current = CFAbsoluteTimeGetCurrent();
      if (Current - *(double *)(a1 + 80) > 21600.0)
      {
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_102164FE8);
        v13 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
        {
          v14 = *(_QWORD *)(a1 + 24);
          LODWORD(buf) = 138543362;
          *(_QWORD *)((char *)&buf + 4) = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "ending metric session (MotionTrigger) for %{public}@", (uint8_t *)&buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_102164FE8);
          v24 = *(void **)(a1 + 24);
          LODWORD(__p[0]) = 138543362;
          *(void **)((char *)__p + 4) = v24;
          LODWORD(v30) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "ending metric session (MotionTrigger) for %{public}@", __p, v30);
          v26 = (char *)v25;
          sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v25);
          if (v26 != (char *)&buf)
            free(v26);
        }
        *(double *)(a1 + 112) = Current;
        if (qword_10229FCF0 != -1)
          dispatch_once(&qword_10229FCF0, &stru_102164FE8);
        v15 = qword_10229FCF8;
        if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
        {
          v16 = *(_QWORD *)(a1 + 24);
          LODWORD(buf) = 138543362;
          *(_QWORD *)((char *)&buf + 4) = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "starting metric session (MotionTrigger) for %{public}@", (uint8_t *)&buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_10229FCF0 != -1)
            dispatch_once(&qword_10229FCF0, &stru_102164FE8);
          v27 = *(void **)(a1 + 24);
          LODWORD(__p[0]) = 138543362;
          *(void **)((char *)__p + 4) = v27;
          LODWORD(v30) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "starting metric session (MotionTrigger) for %{public}@", __p, v30);
          v29 = (char *)v28;
          sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v28);
          if (v29 != (char *)&buf)
            free(v29);
        }
        *(double *)(a1 + 80) = Current;
        *(_DWORD *)(a1 + 124) = 0;
      }
      if (SHIBYTE(v40) < 0)
        operator delete(*((void **)&v39 + 1));
      if (SBYTE7(v39) < 0)
        operator delete(v38[0]);
      if (SHIBYTE(v37) < 0)
        operator delete(v36[1]);
      if (SHIBYTE(v36[0]) < 0)
        operator delete(*(void **)&v35[4]);
      return sub_10011A5A8(v31);
    }
LABEL_30:
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_102164FE8);
    v11 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring metric for phone pick-up", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_102164FE8);
      LOWORD(__p[0]) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCF8, 2, "ignoring metric for phone pick-up", __p, v30);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v22);
      if (v23 != (char *)&buf)
        free(v23);
    }
    goto LABEL_35;
  }
  return sub_10011A5A8(v31);
}

void sub_1009FE96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_10079C284((uint64_t)&a20);
  sub_10011A5A8(&a11);
  _Unwind_Resume(a1);
}

void sub_1009FEA08(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_1021650B8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1009FEA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009FEAB0(uint64_t a1, __int128 *a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  _QWORD v7[4];
  __int128 v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  int v11;

  v3 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_1009FEB94;
  v7[3] = &unk_102164F50;
  v8 = *(_OWORD *)(a1 + 40);
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v10 = *a2;
  v11 = *((_DWORD *)a2 + 4);
  objc_msgSend(v3, "async:", v7);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

void sub_1009FEB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  _Unwind_Resume(exception_object);
}

void sub_1009FEB94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint8_t buf[1632];
  void **v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v2 = *(_QWORD *)(a1 + 32);
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_1009FEDDC;
  v16 = &unk_102162C00;
  v19 = *(_OWORD *)(a1 + 56);
  v20 = *(_DWORD *)(a1 + 72);
  v17 = &v8;
  v18 = v2;
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3
    || *(_QWORD *)(v3 + 8) == -1
    || (sub_1009FE0A4(v2, (uint64_t)&v19), *(_BYTE *)(v17[1] + 24) = 1, !*((_BYTE *)v9 + 24)))
  {
    if (qword_10229FCF0 != -1)
      dispatch_once(&qword_10229FCF0, &stru_102164FE8);
    v4 = qword_10229FCF8;
    if (os_log_type_enabled((os_log_t)qword_10229FCF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLDaemonClient got ear gesture callback after destruction... ignoring", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCF0 != -1)
        dispatch_once(&qword_10229FCF0, &stru_102164FE8);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCF8, 0, "#Warning CLDaemonClient got ear gesture callback after destruction... ignoring", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1009FEDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1009FEDDC(uint64_t a1)
{
  uint64_t result;

  result = sub_1009FE0A4(*(_QWORD *)(a1 + 40), a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_1009FEE14(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1009FEE78(id a1)
{
  qword_10229FCF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

__n128 sub_1009FEEA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102165018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1009FEEE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102165018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1009FEF04(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_1009FEF54(a1 + 8, a2, a3);
}

uint64_t sub_1009FEF0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1009FEF48()
{
}

void sub_1009FEF54(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_1009FEFD8(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1009FEFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009FEFD8(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102165088);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102165088);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_1009FF1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1009FF1DC(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_1009FF208(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_1009FF280(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1009FF26C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1009FF280(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_1009FF500(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_1009FF4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009FF500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_1009FF574(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1009FF55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009FF574(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1009FF5CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1009FF5E8(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_10019C424((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    sub_1000145B0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

long double sub_1009FF680(float64x2_t *a1)
{
  uint64_t v1;
  float64x2_t v2;
  double v3;
  _OWORD v5[2];
  unint64_t v6;

  v1 = 0;
  v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101BEB130);
  v5[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101BEB120);
  v5[1] = v2;
  v6 = 0xC000EF2C2B73F950;
  v3 = 0.0;
  do
  {
    v3 = v3 + *(double *)((char *)v5 + v1);
    v1 += 8;
  }
  while (v1 != 40);
  return 1.0 / (exp(-v3) + 1.0);
}

long double sub_1009FF700(float64x2_t *a1)
{
  uint64_t v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  double v6;
  _OWORD v8[9];
  float64_t v9;
  uint64_t v10;

  v1 = 0;
  v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101BEB150);
  v8[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101BEB140);
  v8[1] = v2;
  v3 = vmulq_f64(a1[3], (float64x2_t)xmmword_101BEB170);
  v8[2] = vmulq_f64(a1[2], (float64x2_t)xmmword_101BEB160);
  v8[3] = v3;
  v4 = vmulq_f64(a1[5], (float64x2_t)xmmword_101BEB190);
  v8[4] = vmulq_f64(a1[4], (float64x2_t)xmmword_101BEB180);
  v8[5] = v4;
  v5 = vmulq_f64(a1[7], (float64x2_t)xmmword_101BEB1B0);
  v8[6] = vmulq_f64(a1[6], (float64x2_t)xmmword_101BEB1A0);
  v8[7] = v5;
  v8[8] = vmulq_f64(a1[8], (float64x2_t)xmmword_101BEB1C0);
  v5.f64[0] = a1[9].f64[0] * -0.615337343;
  v10 = 0x4013EBD26D9FF6D3;
  v6 = 0.0;
  v9 = v5.f64[0];
  do
  {
    v6 = v6 + *(double *)((char *)v8 + v1);
    v1 += 8;
  }
  while (v1 != 160);
  return 1.0 / (exp(-v6) + 1.0);
}

double sub_1009FF808(double a1)
{
  uint64_t v1;
  double *v2;

  v1 = 0;
  v2 = (double *)qword_101BEB3B0;
  do
  {
    if (*v2 > a1)
      break;
    ++v1;
    v2 += 3;
  }
  while (v1 != 2499);
  return *(double *)&qword_101BEB3B0[3 * v1 + 1];
}

long double sub_1009FF848(float64x2_t *a1)
{
  uint64_t v1;
  float64x2_t v2;
  float64x2_t v3;
  double v4;
  _OWORD v6[5];
  uint64_t v7;

  v1 = 0;
  v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101BEB1E0);
  v6[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101BEB1D0);
  v6[1] = v2;
  v3 = vmulq_f64(a1[3], (float64x2_t)xmmword_101BEB200);
  v6[2] = vmulq_f64(a1[2], (float64x2_t)xmmword_101BEB1F0);
  v6[3] = v3;
  v6[4] = vmulq_f64(a1[4], (float64x2_t)xmmword_101BEB210);
  v7 = 0x40222EEE9DDA3655;
  v4 = 0.0;
  do
  {
    v4 = v4 + *(double *)((char *)v6 + v1);
    v1 += 8;
  }
  while (v1 != 88);
  return 1.0 / (exp(-v4) + 1.0);
}

double sub_1009FF8FC(double a1)
{
  uint64_t v1;
  double *v2;

  v1 = 0;
  v2 = (double *)qword_101BF9E10;
  do
  {
    if (*v2 > a1)
      break;
    ++v1;
    v2 += 3;
  }
  while (v1 != 299);
  return *(double *)&qword_101BF9E10[3 * v1 + 1];
}

long double sub_1009FF93C(float64x2_t *a1)
{
  uint64_t v1;
  float64x2_t v2;
  double v3;
  _OWORD v5[2];
  unint64_t v6;

  v1 = 0;
  v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101BEB230);
  v5[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101BEB220);
  v5[1] = v2;
  v6 = 0xC015D1D42AF120ABLL;
  v3 = 0.0;
  do
  {
    v3 = v3 + *(double *)((char *)v5 + v1);
    v1 += 8;
  }
  while (v1 != 40);
  return 1.0 / (exp(-v3) + 1.0);
}

double sub_1009FF9BC(double a1)
{
  uint64_t v1;
  double *v2;

  v1 = 0;
  v2 = (double *)qword_101BFBA30;
  do
  {
    if (*v2 > a1)
      break;
    ++v1;
    v2 += 3;
  }
  while (v1 != 299);
  return *(double *)&qword_101BFBA30[3 * v1 + 1];
}

long double sub_1009FF9FC(float64x2_t *a1)
{
  uint64_t v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  _OWORD v12[15];
  uint64_t v13;

  v1 = 0;
  v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101BEB250);
  v12[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101BEB240);
  v12[1] = v2;
  v3 = vmulq_f64(a1[3], (float64x2_t)xmmword_101BEB270);
  v12[2] = vmulq_f64(a1[2], (float64x2_t)xmmword_101BEB260);
  v12[3] = v3;
  v4 = vmulq_f64(a1[5], (float64x2_t)xmmword_101BEB290);
  v12[4] = vmulq_f64(a1[4], (float64x2_t)xmmword_101BEB280);
  v12[5] = v4;
  v5 = vmulq_f64(a1[7], (float64x2_t)xmmword_101BEB2B0);
  v12[6] = vmulq_f64(a1[6], (float64x2_t)xmmword_101BEB2A0);
  v12[7] = v5;
  v6 = vmulq_f64(a1[9], (float64x2_t)xmmword_101BEB2D0);
  v12[8] = vmulq_f64(a1[8], (float64x2_t)xmmword_101BEB2C0);
  v12[9] = v6;
  v7 = vmulq_f64(a1[11], (float64x2_t)xmmword_101BEB2F0);
  v12[10] = vmulq_f64(a1[10], (float64x2_t)xmmword_101BEB2E0);
  v12[11] = v7;
  v8 = vmulq_f64(a1[13], (float64x2_t)xmmword_101BEB310);
  v12[12] = vmulq_f64(a1[12], (float64x2_t)xmmword_101BEB300);
  v12[13] = v8;
  v9 = vmulq_f64(a1[14], (float64x2_t)xmmword_101BEB320);
  v13 = 0x3FFB75EBE7714AE1;
  v10 = 0.0;
  v12[14] = v9;
  do
  {
    v10 = v10 + *(double *)((char *)v12 + v1);
    v1 += 8;
  }
  while (v1 != 248);
  return 1.0 / (exp(-v10) + 1.0);
}

double sub_1009FFB58(double a1)
{
  uint64_t v1;
  double *v2;

  v1 = 0;
  v2 = (double *)qword_101BFD650;
  do
  {
    if (*v2 > a1)
      break;
    ++v1;
    v2 += 3;
  }
  while (v1 != 999);
  return *(double *)&qword_101BFD650[3 * v1 + 1];
}

void sub_1009FFB98(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;

  v8 = xmmword_101C03550;
  v9 = unk_101C03560;
  if (*(_BYTE *)(a1 + 56))
  {
    v4 = sub_1009FFCBC(dbl_101C03410, dbl_101C03450, *(float *)(a1 + 20), 0.0, 0.0);
    v5 = sub_1009FFCBC(dbl_101C03410, dbl_101C03490, *(float *)(a1 + 20), 0.167, 0.239);
    v6 = sub_1009FFCBC(dbl_101C03410, dbl_101C034D0, *(float *)(a1 + 20), 0.26, 0.368);
    v7 = sub_1009FFCBC(dbl_101C03410, dbl_101C03510, *(float *)(a1 + 20), 0.58, 0.61);
    *(double *)&v8 = v4;
    *((double *)&v8 + 1) = v5;
    *(double *)&v9 = v6;
    *((double *)&v9 + 1) = v7;
  }
  sub_1009FFD64((double *)&v8, dbl_101C03570, a2, 0.0, 100.0);
}

double sub_1009FFCBC(double *a1, double *a2, double a3, double a4, double a5)
{
  double result;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;

  if (*a1 > a3)
    return *a2;
  if (a1[7] < a3)
    return a2[7];
  v6 = 0;
  if (a1[1] >= a3)
  {
    v7 = 1;
  }
  else
  {
    v7 = 7;
    while (v6 != 5)
    {
      v8 = a1[v6++ + 2];
      if (v8 >= a3)
      {
        v7 = v6 + 1;
        goto LABEL_12;
      }
    }
    LODWORD(v6) = 6;
  }
LABEL_12:
  v9 = v6;
  v10 = a2[v9];
  v11 = a1[v9];
  v12 = (a2[v7] - v10) / (a1[v7] - v11);
  result = v10 - v12 * v11 + a3 * v12;
  if (result <= a4)
    result = a4;
  if (result >= a5)
    return a5;
  return result;
}

double sub_1009FFD64(double *a1, double *a2, double a3, double a4, double a5)
{
  double result;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;

  if (*a1 > a3)
    return *a2;
  if (a1[3] < a3)
    return a2[3];
  v6 = a1[1];
  if (v6 >= a3)
  {
    v7 = 0;
    v8 = 1;
  }
  else
  {
    v6 = a1[2];
    v7 = 1;
    v8 = 2;
    if (v6 < a3)
    {
      v6 = a1[3];
      v8 = 3;
      v7 = 2;
    }
  }
  v9 = a2[v7];
  v10 = a1[v7];
  v11 = (a2[v8] - v9) / (v6 - v10);
  result = v9 - v11 * v10 + a3 * v11;
  if (result <= a4)
    result = a4;
  if (result >= a5)
    return a5;
  return result;
}

uint64_t sub_1009FFDFC(uint64_t a1)
{
  float64x2_t v1;
  double v2;
  float64x2_t v3;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;

  v1 = *(float64x2_t *)(a1 + 8);
  v2 = *(double *)(a1 + 16);
  if (v1.f64[0] != -INFINITY)
  {
    if (v2 == -INFINITY)
      return 0;
    v3.f64[0] = *(float64_t *)(a1 + 24);
    if (v3.f64[0] != -INFINITY && *(double *)(a1 + 32) != -INFINITY)
    {
      v3.f64[1] = *(float64_t *)(a1 + 32);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64((float64x2_t)xmmword_101BEB330, v1), (int32x4_t)vcgtq_f64((float64x2_t)xmmword_101BEB340, v3))))) & 1) == 0&& *(double *)a1 != -INFINITY&& *(double *)a1 >= 50.0)
      {
        return 1;
      }
    }
  }
  if (v2 != -INFINITY)
  {
    v5 = *(double *)(a1 + 24);
    if (v5 != -INFINITY)
    {
      v6 = *(double *)(a1 + 32);
      if (v6 != -INFINITY)
      {
        v7 = *(double *)(a1 + 40);
        if (v7 != -INFINITY && v6 < 2000.0)
        {
          v8 = *(double *)a1;
          v9 = v5 < 5000.0 && v2 < 4.0;
          v10 = !v9 || v7 <= 31.0;
          v11 = v10 || v8 == -INFINITY;
          if (!v11 && v8 >= 50.0)
            return 1;
        }
      }
    }
  }
  return 0;
}

double sub_1009FFF30(double *a1, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  double v13;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = 1.0;
  if (a2 >= 50.0)
  {
    v5 = 0.0;
    if (a2 <= 75.0)
      v5 = fmin(fmax(a2 * -0.04 + 3.0, 0.0), 1.0);
  }
  v6 = fmax(v4 + -3165.0, 0.0);
  v7 = fmax(v3 + -1.4, 0.0) * 6.0 + 0.0;
  if (v3 == -INFINITY)
    v8 = 0.0;
  else
    v8 = v7;
  v9 = fmax(v2 + -2.0, 0.0);
  v10 = v2 == -INFINITY;
  v11 = -0.0;
  if (!v10)
    v11 = v9;
  v12 = v8 + v11;
  if (v4 == -INFINITY)
    v13 = v12;
  else
    v13 = v12 + v6 * 0.002;
  return a2 + v5 * fmin(v13, 15.0);
}

float sub_100A00000(double *a1)
{
  float v1;

  v1 = a1[1] * (a1[3] + a1[3]) - *a1 * (a1[2] + a1[2]);
  return -v1;
}

double sub_100A0004C(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;

  v4 = a2[2];
  v3 = a2[3];
  v5 = a3[2];
  v6 = a3[3];
  v7 = *a2;
  v8 = *a3;
  a1[1] = v3 * v5 + *a2 * a3[1] - v4 * v6 + a2[1] * *a3;
  v9 = a3[1];
  v10 = a2[1];
  a1[2] = v7 * v5 - v3 * v9 + v10 * v6 + v4 * v8;
  v11 = a2[2];
  v12 = a3[2];
  a1[3] = v11 * v9 - v10 * v12 + v7 * v6 + v3 * v8;
  result = -(v11 * v12) - v10 * v9 - a2[3] * a3[3] + v7 * v8;
  *a1 = result;
  return result;
}

double sub_100A000C8(uint64_t a1, uint64_t *a2)
{
  double result;
  double v3;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 1);
  result = *((double *)a2 + 3);
  v3 = *(double *)a2;
  *(double *)(a1 + 16) = result;
  *(double *)(a1 + 24) = v3;
  return result;
}

double sub_100A000E0(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;

  v2 = *a2;
  v3 = a2[1];
  v4 = v2 + v2;
  v5 = v3 + v3;
  v6 = a2[2];
  v7 = v6 + v6;
  v8 = v3 * (v3 + v3);
  v9 = v6 * (v6 + v6);
  *a1 = 1.0 - v8 - v9;
  v10 = 1.0 - v2 * (v2 + v2);
  a1[4] = v10 - v9;
  a1[8] = v10 - v8;
  v11 = v7 * a2[1];
  v12 = v4 * a2[3];
  a1[7] = v11 - v12;
  a1[5] = v11 + v12;
  v13 = v5 * *a2;
  v14 = v7 * a2[3];
  a1[3] = v13 - v14;
  a1[1] = v13 + v14;
  v15 = v7 * *a2;
  v16 = v5 * a2[3];
  a1[2] = v15 - v16;
  result = v15 + v16;
  a1[6] = result;
  return result;
}

double sub_100A00188(double *a1)
{
  return a1[3] * (a1[1] + a1[1]) - *a1 * (a1[2] + a1[2]);
}

double sub_100A001A4(double *a1)
{
  return -(a1[3] * (*a1 + *a1)) - a1[1] * (a1[2] + a1[2]);
}

double sub_100A001C0(double *a1)
{
  return *a1 * (*a1 + *a1) + -1.0 + a1[1] * (a1[1] + a1[1]);
}

uint64_t sub_100A001DC(uint64_t result, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v4 = sqrt(*a3 * *a3 + *a2 * *a2 + *a4 * *a4);
  v5 = -*a3 / v4;
  *(double *)result = v5;
  v6 = *a2 / v4;
  *(double *)(result + 8) = v6;
  *(_QWORD *)(result + 16) = 0;
  v7 = sqrt((1.0 - *a4 / v4) * 0.5);
  *(double *)(result + 24) = v7;
  v8 = v6 * v6 + v5 * v5;
  if (v8 <= 0.000001)
  {
    if (*a4 <= 0.0)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0x3FF0000000000000;
    }
    else
    {
      *(_QWORD *)result = 0x3FF0000000000000;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 8) = 0;
    }
  }
  else
  {
    v9 = sqrt((1.0 - v7 * v7) / v8);
    *(double *)result = v5 * v9;
    *(float64x2_t *)(result + 8) = vmulq_n_f64((float64x2_t)*(unint64_t *)&v6, v9);
  }
  return result;
}

double sub_100A002A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  *(float64x2_t *)a1 = vnegq_f64(*(float64x2_t *)a2);
  v2 = *(_QWORD *)(a2 + 24);
  result = -*(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v2;
  return result;
}

double sub_100A002C4(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;

  v4 = a2[2];
  v3 = a2[3];
  v5 = a3[1];
  v6 = a2[1];
  v7 = a3[2];
  v8 = a3[3];
  *a1 = v4 * v5 + v3 * *a3 - v6 * v7 + *a2 * v8;
  v9 = *a3;
  v10 = *a2;
  a1[1] = v3 * v5 - v4 * *a3 + *a2 * v7 + v6 * v8;
  v11 = a2[1];
  v12 = a3[1];
  a1[2] = v11 * v9 - v10 * v12 + v3 * v7 + v4 * v8;
  result = -(v11 * v12) - v10 * v9 - a2[2] * a3[2] + v3 * v8;
  a1[3] = result;
  return result;
}

float sub_100A00340(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float result;

  v3 = a2[2];
  v4 = a3[2];
  *a1 = (float)(a2[1] * v4) - (float)(v3 * a3[1]);
  v5 = *a3;
  v6 = *a2;
  a1[1] = (float)(v3 * *a3) - (float)(*a2 * v4);
  result = (float)(v6 * a3[1]) - (float)(a2[1] * v5);
  a1[2] = result;
  return result;
}

float sub_100A00380(float *a1)
{
  float v1;
  float v2;
  float v3;
  float result;

  v1 = a1[1];
  v2 = a1[2];
  v3 = sqrtf((float)((float)(v1 * v1) + (float)(*a1 * *a1)) + (float)(v2 * v2));
  *a1 = *a1 / v3;
  a1[1] = v1 / v3;
  result = v2 / v3;
  a1[2] = v2 / v3;
  return result;
}

void sub_100A003B0(uint64_t a1, float a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;
  float v16;
  __double2 v17;
  __int128 v18;
  float v19;
  float v20;
  float v21;
  _OWORD v22[2];
  double v23[12];

  if (a3 >= 0.0)
  {
    v23[4] = v8;
    v23[5] = v7;
    v23[6] = v6;
    v23[7] = v5;
    v23[10] = v3;
    v23[11] = v4;
    v11 = *(double *)(a1 + 16);
    v12 = *(double *)(a1 + 24) + *(double *)(a1 + 24);
    v13 = *(double *)(a1 + 8);
    v14 = v13 * v12 - *(double *)a1 * (v11 + v11);
    v15 = (v13 + v13) * *(double *)a1 + v11 * v12;
    v16 = 1.0 - v13 * (v13 + v13) - v11 * (v11 + v11);
    v17 = __sincos_stret(a2 * -0.5 * 0.0174532924);
    v23[0] = v17.__cosval;
    v23[1] = v17.__sinval * v14;
    v23[2] = v17.__sinval * v15;
    v23[3] = v17.__sinval * v16;
    sub_100A0004C((double *)v22, v23, (double *)a1);
    v18 = v22[1];
    *(_OWORD *)a1 = v22[0];
    *(_OWORD *)(a1 + 16) = v18;
    v19 = *(float *)(a1 + 76);
    if (v19 >= 0.0)
    {
      v20 = v19 + a2;
      *(float *)(a1 + 76) = v20;
      v21 = 360.0;
      if (v20 >= 360.0)
      {
        v21 = -360.0;
      }
      else if (v20 >= 0.0)
      {
        return;
      }
      *(float *)(a1 + 76) = v20 + v21;
    }
  }
}

double sub_100A004C0(double *a1, float *a2, float *a3, float *a4)
{
  double *v4;
  double *v5;
  float v6;
  float v7;
  float v8;
  double v9;
  double result;
  float v11;
  double v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  double v18;
  float v19;
  double v20;

  *a1 = 1.0;
  a1[1] = 0.0;
  a1[2] = 0.0;
  v4 = a1 + 2;
  a1[3] = 0.0;
  v5 = a1 + 3;
  v6 = *a2;
  v7 = a3[1];
  if (*a2 <= v7 || (v8 = a4[2], v6 <= v8))
  {
    v11 = a4[2];
    if (v7 <= v6 || v7 <= v11)
    {
      v13 = sqrt(v11 + 1.0 - v6 - v7);
      result = v13 + v13;
      if (result <= 1.0e-10)
        return result;
      v14 = a2[2];
      v15 = *a3 - a2[1];
      v16 = *a4;
      a1[3] = result * 0.25;
      *a1 = v15 / result;
      a1[1] = (float)(v16 + v14) / result;
      v17 = a3 + 2;
      a3 = a4 + 1;
      a4 = v17;
      v5 = v4;
    }
    else
    {
      v18 = sqrt(v7 + 1.0 - v11 - v6);
      result = v18 + v18;
      if (result <= 1.0e-10)
        return result;
      v19 = a4[1];
      *a1 = (float)(a2[2] - *a4) / result;
      v20 = (float)(a3[2] + v19) / result;
      a1[2] = result * 0.25;
      a1[3] = v20;
      a4 = a2 + 1;
      v5 = a1 + 1;
    }
  }
  else
  {
    v9 = sqrt(v6 + 1.0 - v7 - v8);
    result = v9 + v9;
    if (result <= 1.0e-10)
      return result;
    *a1 = (float)(a4[1] - a3[2]) / result;
    a1[1] = result * 0.25;
    a1[2] = (float)(a2[1] + *a3) / result;
    a3 = a2 + 2;
  }
  result = (float)(*a4 + *a3) / result;
  *v5 = result;
  return result;
}

void sub_100A0072C(id a1)
{
  qword_1023062A0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCatherineNotifierSilo"));
}

uint64_t sub_100A007E0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A00980;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023062B8 != -1)
    dispatch_once(&qword_1023062B8, block);
  return qword_102311130;
}

void sub_100A00980()
{
  operator new();
}

void sub_100A009C8()
{
  operator delete();
}

uint64_t sub_100A009EC(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD v5[5];

  v3 = sub_100A00B1C(a1, "CLCatherineNotifier", a2);
  *(_QWORD *)v3 = off_102165110;
  *(_OWORD *)(v3 + 112) = xmmword_101C035A8;
  *(_OWORD *)(v3 + 128) = unk_101C035B8;
  *(_OWORD *)(v3 + 144) = xmmword_101C035C8;
  *(_OWORD *)(v3 + 156) = *(__int128 *)((char *)&xmmword_101C035C8 + 12);
  *(_QWORD *)(a1 + 176) = objc_msgSend(*(id *)(v3 + 40), "newTimer");
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  sub_10023CFD8(a1 + 208, (uint64_t)"MotionStreamingHeartRate", a1, 0.0);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = nullsub_477;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  objc_msgSend(*(id *)(a1 + 176), "setHandler:", v5);
  return a1;
}

void sub_100A00ABC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = v2;
  sub_100E3E6C8(v3);
  v5 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v1 + 184) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100A00BBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A00B1C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021652B8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100A00B9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A00BBC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021652B8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100A00C30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102165110;
  sub_100A00CC4((uint64_t)a1);
  sub_100E3E6C8(a1 + 26);
  v2 = a1[25];
  a1[25] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[23];
  a1[23] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_100A00BBC((uint64_t)a1);
}

void sub_100A00CA0(_QWORD *a1)
{
  sub_100A00C30(a1);
  operator delete();
}

BOOL sub_100A00CC4(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE00 != -1)
    dispatch_once(&qword_10229FE00, &stru_102165288);
  v2 = qword_10229FE08;
  if (os_log_type_enabled((os_log_t)qword_10229FE08, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLCatherineNotifier is shutting down.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE00 != -1)
      dispatch_once(&qword_10229FE00, &stru_102165288);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE08, 2, "CLCatherineNotifier is shutting down.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCatherineNotifier::shutdown()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(a1 + 176), "invalidate");

  *(_QWORD *)(a1 + 176) = 0;
  sub_100A00E80(a1);
  result = sub_100E3E6F0(a1 + 208);
  *(_BYTE *)(a1 + 108) = 1;
  return result;
}

void sub_100A00E80(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 192))
  {
    *(_BYTE *)(a1 + 192) = 0;
    objc_msgSend(*(id *)(a1 + 176), "setNextFireDelay:", 3.0);
    if (qword_10229FE00 != -1)
      dispatch_once(&qword_10229FE00, &stru_102165288);
    v1 = qword_10229FE08;
    if (os_log_type_enabled((os_log_t)qword_10229FE08, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "HR streaming turned off", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE00 != -1)
        dispatch_once(&qword_10229FE00, &stru_102165288);
      v4[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE08, 0, "HR streaming turned off", v4, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLCatherineNotifier::turnOffActiveCatherine()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
}

uint64_t sub_100A0101C(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  uint64_t v6;

  v4 = a2;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, int *, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A6520);
  sub_100A0108C(a1, v4, a3, 1);
  return v6;
}

uint64_t sub_100A01078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A6520);
}

void sub_100A0108C(uint64_t a1, int a2, int *a3, int a4)
{
  NSObject *v7;
  const char *v8;
  id v9;
  int v10;
  int v11;
  int v12;
  uint8_t buf[8];
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v12 = a2;
  if (qword_10229FE00 != -1)
    dispatch_once(&qword_10229FE00, &stru_102165288);
  v7 = qword_10229FE08;
  if (os_log_type_enabled((os_log_t)qword_10229FE08, OS_LOG_TYPE_DEFAULT))
  {
    if (a4)
      v8 = "Registration";
    else
      v8 = "Unregistration";
    *(_QWORD *)buf = &v12;
    v9 = objc_msgSend(objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v12, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description"), "UTF8String");
    v10 = *a3;
    *(_DWORD *)buf = v10;
    v11 = sub_1001B7864(a1, (int *)buf, 1);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = v8;
    v18 = 2082;
    v19 = v9;
    v20 = 1026;
    v21 = v10;
    v22 = 1026;
    v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"HeartRate\", \"action\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}s, \"notification\":%{public}d, \"notificationClientCount\":%{public}d}", buf, 0x32u);
  }
}

BOOL sub_100A01208(char *a1, int a2, int *a3)
{
  _BOOL8 v6;

  v6 = sub_100A01254(a1, a2, a3);
  sub_100A0108C((uint64_t)a1, a2, a3, 0);
  return v6;
}

BOOL sub_100A01254(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102165268);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102165268);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

_QWORD *sub_100A015DC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100A01654(uint64_t a1)
{
  uint64_t v3;
  int v4;

  v3 = 0x100000004;
  v4 = 9;
  if ((int)sub_1001B7864(a1, (int *)&v3, 3) >= 1 && !*(_BYTE *)(a1 + 192))
  {
    *(_BYTE *)(a1 + 192) = 1;
    objc_msgSend(*(id *)(a1 + 176), "setNextFireDelay:", 3.0);
  }
  return 1;
}

uint64_t sub_100A016EC(uint64_t a1)
{
  int v2;
  int v3;
  int v5;
  int v6;
  int v7;

  v7 = 9;
  v2 = sub_1001B7864(a1, &v7, 1);
  v6 = 1;
  v3 = sub_1001B7864(a1, &v6, 1);
  v5 = 4;
  if (!(sub_1001B7864(a1, &v5, 1) + v3 + v2))
    sub_100A00E80(a1);
  return 1;
}

void sub_100A0177C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)();
  void *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v9 = 0;
  v10 = &v9;
  v11 = 0x7012000000;
  v12 = sub_10020708C;
  v13 = nullsub_56;
  v14 = &unk_102080316;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v15 = 0x200000004;
  objc_msgSend(a2, "catherine");
  *(_QWORD *)&v16 = v4;
  objc_msgSend(a2, "confidence");
  *((_QWORD *)&v16 + 1) = v5;
  LOBYTE(v17) = 0;
  objc_msgSend(a2, "timestamp");
  *((_QWORD *)&v17 + 1) = v6;
  v18 = COERCE_UNSIGNED_INT64(CFAbsoluteTimeGetCurrent());
  LODWORD(v19) = 0;
  sub_100A018C0(a1, (_OWORD *)v10 + 3);
  sub_100A01944(a1, (_OWORD *)v10 + 3);
  v7 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100A019CC;
  v8[3] = &unk_1021542F8;
  v8[4] = &v9;
  v8[5] = a1;
  objc_msgSend(v7, "async:", v8);
  objc_msgSend(*(id *)(a1 + 176), "setNextFireDelay:", 3.0);
  _Block_object_dispose(&v9, 8);
}

void sub_100A018A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A018C0(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  int v6;
  _OWORD v7[4];

  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[3];
  v7[2] = a2[2];
  v7[3] = v4;
  v6 = 0;
  (*(void (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
  v6 = 1;
  return (*(uint64_t (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100A01944(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  int v6;
  _OWORD v7[4];

  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[3];
  v7[2] = a2[2];
  v7[3] = v4;
  v6 = 5;
  (*(void (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
  v6 = 4;
  return (*(uint64_t (**)(uint64_t, int *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
}

void sub_100A019CC(uint64_t a1)
{
  sub_100A019DC(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
}

void sub_100A019DC(uint64_t a1, uint64_t a2)
{
  void *v3;
  ALActivityLog *v4;
  float v5;
  ALCLAllDayHeartRate *v6;
  double v7;
  float v8;
  ALCLAllDayHeartRate *v9;
  double v10;

  v3 = objc_autoreleasePoolPush();
  v4 = objc_alloc_init(ALActivityLog);
  -[ALActivityLog setAllDayHeartRate:](v4, "setAllDayHeartRate:", objc_alloc_init(ALCLAllDayHeartRate));
  -[ALCLAllDayHeartRate setStartTime:](-[ALActivityLog allDayHeartRate](v4, "allDayHeartRate"), "setStartTime:", *(double *)(a2 + 40));
  -[ALCLAllDayHeartRate setMode:](-[ALActivityLog allDayHeartRate](v4, "allDayHeartRate"), "setMode:", *(_DWORD *)(a2 + 56) == 5);
  v5 = *(double *)(a2 + 16);
  v6 = -[ALActivityLog allDayHeartRate](v4, "allDayHeartRate");
  *(float *)&v7 = v5;
  -[ALCLAllDayHeartRate setConfidence:](v6, "setConfidence:", v7);
  v8 = *(double *)(a2 + 8);
  v9 = -[ALActivityLog allDayHeartRate](v4, "allDayHeartRate");
  *(float *)&v10 = v8;
  -[ALCLAllDayHeartRate setHeartRate:](v9, "setHeartRate:", v10);
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v4);
  objc_autoreleasePoolPop(v3);
}

id sub_100A01AC4(uint64_t a1)
{
  return objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLCatherineNotifier")), "syncgetDoSync:", a1);
}

void sub_100A01AFC()
{
  operator new();
}

void sub_100A01BA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100A01BE4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102165408;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100A01CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165268);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102165268);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100A01F2C(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  uint8_t buf[32];
  __int128 v46;
  __int128 v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        v46 = 0u;
        v47 = 0u;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100A04324();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A6521;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165268);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165268);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100A02390(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165268);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165268);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A02610(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[3];
  a3[2] = v11[2];
  a3[3] = v14;
  *a3 = v12;
  a3[1] = v13;
  return 1;
}

uint64_t sub_100A02678(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  uint64_t **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v14;
  __int128 v15;
  int *v16;

  v6 = (char *)operator new(0x58uLL);
  v7 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 40) = v7;
  v8 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_102165398;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 72) = v8;
  *(_QWORD *)&v15 = v6 + 24;
  *((_QWORD *)&v15 + 1) = v6;
  v14 = *a2;
  v16 = &v14;
  v9 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v14, (uint64_t)&unk_101B9EB60, &v16);
  sub_1002B7674((uint64_t)(v9 + 8), &v15);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 1;
}

void sub_100A0275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A02770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[4];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100A027B0(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v32[20];
  __int16 v33;
  _QWORD *v34;
  __int16 v35;
  std::__shared_weak_count *v36;
  _QWORD **v37;
  _QWORD *v38[3];
  std::__shared_weak_count *v39;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165268);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v32 = 2082;
      *(_QWORD *)&v32[2] = "";
      *(_WORD *)&v32[10] = 2082;
      *(_QWORD *)&v32[12] = "activity";
      v33 = 2082;
      v34 = v10;
      v35 = 2050;
      v36 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v37 = v38;
      memset(v38, 0, sizeof(v38));
      v39 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v37);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v32, *(_QWORD **)&v32[8]);
      v21 = v39;
      if (v39)
      {
        v22 = (unint64_t *)&v39->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v37, v38[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x58uLL);
      v25 = a3[1];
      *(_OWORD *)(v24 + 24) = *a3;
      *(_OWORD *)(v24 + 40) = v25;
      v26 = a3[3];
      *(_OWORD *)(v24 + 56) = a3[2];
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_102165398;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 72) = v26;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v32 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v27 = *(std::__shared_weak_count **)v32;
      if (*(_QWORD *)v32)
      {
        v28 = (unint64_t *)(*(_QWORD *)v32 + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100A034BC();
    os_activity_scope_leave(&state);
  }
}

void sub_100A02DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100A02E44(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165268);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165268);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::listClients() [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165268);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165268);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::listClients() [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102165268);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102165268);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::listClients() [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100A033F4(uint64_t a1)
{
  sub_100A042C4(a1);
  operator delete();
}

id sub_100A03418(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100A03A78(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100A03464(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100A03490(id a1)
{
  qword_10229FE08 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HeartRate");
}

void sub_100A034BC()
{
  operator new();
}

void sub_100A03554(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100A03A78(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100A0392C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102165268);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102165268);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100A0392C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100A03A78(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_100A03A08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102165398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A03A1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102165398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100A03A58(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100A03A78(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100A03AF0(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100A03E78(a1);
  else
    return 0;
}

id sub_100A03AF0(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_100A04224((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021653D8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C0372ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021653D8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021653D8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C0372ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021653D8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCatherineNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100A03E78(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021653D8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C0372ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021653D8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021653D8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C0372ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021653D8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCatherineNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100A04224(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221BA20))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)64)
      sub_10191403C();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_100A04298(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100A042C4(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102165408;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100A04324()
{
  operator new();
}

uint64_t sub_100A043BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100A043DC()
{
  sub_1015A2E04(qword_102306288, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102306288, (void *)&_mh_execute_header);
}

_QWORD *sub_100A04420(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100A04504((uint64_t)a1, "CLExerciseMinuteRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102165430;
  a1[9] = off_1021654E8;
  sub_100E81598(a1 + 41, 0, 0);
  sub_100E81598(a1 + 43, 0, 0);
  a1[45] = 0;
  a1[46] = 0;
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100A044D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A04504(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_1021655A8;
  *(_QWORD *)(a1 + 72) = off_102165650;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021655A8;
  *(_QWORD *)(a1 + 72) = off_102165650;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 248) = 12000;
  *(_QWORD *)(a1 + 256) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 264));
  *(_QWORD *)(a1 + 264) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100A048AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[32] = off_10213DEB0;
  sub_100427950(v27);
  sub_10047F660(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100A04950()
{
  JUMPOUT(0x100A04930);
}

_QWORD *sub_100A04958(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102165650;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021655A8;
  a1[32] = off_10213DEB0;
  sub_100427950(a1 + 33);
  sub_10047F660(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100A049D4(_QWORD *a1)
{
  *a1 = off_102165430;
  a1[9] = off_1021654E8;
  sub_100A04A18((uint64_t)a1, 0, 0);
  return sub_100A04958(a1);
}

void sub_100A04A18(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  uint64_t v7;

  if ((a2 != 0) == (a3 != 0))
  {

    *(_QWORD *)(a1 + 360) = a2;
    v6 = *(const void **)(a1 + 368);
    if (v6)
      _Block_release(v6);
    if (a3)
      *(_QWORD *)(a1 + 368) = _Block_copy(a3);
  }
  else
  {
    v7 = sub_1019141AC();
    sub_100A04A8C(v7);
  }
}

_QWORD *sub_100A04A90(uint64_t a1)
{
  return sub_100A049D4((_QWORD *)(a1 - 72));
}

void sub_100A04A98(_QWORD *a1)
{
  sub_100A049D4(a1);
  operator delete();
}

void sub_100A04ABC(uint64_t a1)
{
  sub_100A049D4((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100A04AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint8_t buf[1640];

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v11 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v12 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_10008950C(a1 + 72))
    {
      sub_10001E638(*(_QWORD *)(a1 + 80));
      CFAbsoluteTimeGetCurrent();
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM ExerciseMinuteHistory WHERE startTime < ?");
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165578);
    v6 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "ExerciseMinute, Failed to expire records.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165578);
      v10 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "ExerciseMinute, Failed to expire records.", &v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "virtual long CLExerciseMinuteRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return -1;
}

void sub_100A04D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A04DE0(uint64_t a1, uint64_t a2)
{
  return sub_100A04AE4(a1 - 72, a2);
}

uint64_t sub_100A04DE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v6 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_10008950C(v4))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM ExerciseMinuteHistory ORDER BY startTime ASC");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_100A04FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A05010(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  double v8;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v8 = sqlite3_column_double(v7, 1);
  result = 0;
  *(double *)(a2 + 8) = v8;
  return result;
}

uint64_t sub_100A05088(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[16];
  uint64_t v14;
  pthread_mutex_t *v15;
  __int16 v16;
  uint8_t buf[8];

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v14 = v2;
  (*(void (**)(void))(v3 + 16))();
  v16 = 256;
  if ((sub_10008950C(v4) & 1) != 0)
  {
    if (sub_100219C4C(*(_QWORD *)(a1 + 80)))
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM ExerciseMinuteHistory WHERE id >= ? ORDER BY id ASC LIMIT ?");
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165578);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "ExerciseMinute, DB UUID un-initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165578);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "ExerciseMinute, DB UUID un-initialized", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "CMError CLExerciseMinuteRecorderDb::queryExerciseMinuteDataSince(CLExerciseMinuteData &, std::vector<CLExerciseMinuteData> &) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v6 = 103;
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165578);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "ExerciseMinute, DB not accessible.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165578);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "ExerciseMinute, DB not accessible.", v13, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CMError CLExerciseMinuteRecorderDb::queryExerciseMinuteDataSince(CLExerciseMinuteData &, std::vector<CLExerciseMinuteData> &) const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v6 = 109;
  }
  if ((_BYTE)v16)
    pthread_mutex_unlock(v15);
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  return v6;
}

void sub_100A05888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A058E4(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM ExerciseMinuteHistory");
  return 0xFFFFFFFFLL;
}

void sub_100A05984(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A059A8(uint64_t a1)
{
  return sub_100A058E4(a1 - 72);
}

void sub_100A059B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    sub_100634364(*(_QWORD *)(a1 + 80), "ExerciseMinuteHistory", (const char **)&qword_1023062C0, (const std::string::value_type **)&qword_102306350, 0);
    *(_QWORD *)(a1 + 328) = sub_10063D314(*(_QWORD *)(a1 + 80), "INSERT INTO ExerciseMinuteHistory (startTime) VALUES (?)");
    *(_QWORD *)(a1 + 336) = v2;
    *(_QWORD *)(a1 + 344) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM ExerciseMinuteHistory ORDER BY startTime DESC LIMIT 1");
    *(_QWORD *)(a1 + 352) = v3;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165578);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ExerciseMinute, Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165578);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "ExerciseMinute, Device is locked and we are unable to open the database", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLExerciseMinuteRecorderDb::prepareSQLStatements()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

uint64_t sub_100A05BA8(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM ExerciseMinuteHistory");
  return result;
}

void sub_100A05C40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A05C60(uint64_t a1)
{
  return sub_100A05BA8(a1 - 72);
}

uint64_t sub_100A05C68(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM ExerciseMinuteHistory WHERE startTime > ?");
  }
  return result;
}

void sub_100A05EAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A05ED8(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE ExerciseMinuteHistory SET startTime = startTime + ?");
  return result;
}

void sub_100A060E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A0610C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[5];
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 328), &v16);
    v5 = (sqlite3_stmt *)sub_100026CC8(v16);
    if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v16);
      sub_10023C9B0(v6, v7);
      ++*(_DWORD *)(a1 + 132);
      if (*(_QWORD *)(a1 + 360))
      {
        if (*(_QWORD *)(a1 + 368))
        {
          v17 = *(_QWORD *)(a2 + 4);
          v18 = *(_DWORD *)(a2 + 12);
          v8 = sub_10063E99C(*(_QWORD *)(a1 + 80));
          v9 = sub_100219C4C(*(_QWORD *)(a1 + 80));
          v10 = *(void **)(a1 + 360);
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 3221225472;
          v11[2] = sub_100A06290;
          v11[3] = &unk_1021461C0;
          v11[4] = a1;
          v12 = v8;
          v13 = v17;
          v14 = v18;
          v15 = v9;
          objc_msgSend(v10, "async:", v11);
        }
      }
    }
    result = v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100A06260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A06290(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 368);
  v4 = *(_QWORD *)(a1 + 56);
  v3 = *(_OWORD *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, __int128 *))(v1 + 16))(v1, &v3);
}

uint64_t sub_100A062D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 344), &v9);
  v4 = sub_100A05010(&v9, (uint64_t)&v7);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
  }
  v5 = v9;
  v9 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_100A06358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A0637C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if (SHIBYTE(v16) < 0)
  {
    v1 = v15[1];
    operator delete(v15[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v15);
        v5 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v17);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v16))
  {
    goto LABEL_3;
  }
  sub_10191430C(v4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v15
  v16 = v11;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v19);
  return 2;
}

void sub_100A066BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100A06724(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102165578);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165578);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165578);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLExerciseMinuteData>::setDatabaseAccessible() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100A06D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100A06D3C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

id *sub_100A06D50(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  char v32[8];
  double v33;
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  uint64_t v42;

  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v34);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165578);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165578);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v35, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLExerciseMinuteData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = v33;
    v9 = v7 - v33;
    if (v7 - v33 < 0.0)
      v9 = -(v7 - v33);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165578);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v40 = v33;
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165578);
        v23 = *((_QWORD *)a2 + 1);
        v35 = 134349312;
        v36 = v33;
        v37 = 2050;
        v38 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v35, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLExerciseMinuteData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = v33;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165578);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102165578);
          v26 = *((double *)a2 + 1);
          v35 = 134217984;
          v36 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v35));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLExerciseMinuteData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_102165578);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165578);
        v35 = 134217984;
        v36 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v35));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLExerciseMinuteData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v32, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v34);
}

void sub_100A07494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A074C0(uint64_t a1)
{
  return sub_100A06724(a1 - 72);
}

void sub_100A074C8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100A074F4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_101914474(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100A077F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100A07858(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019145DC(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100A07AB8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101914744(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100A07CF0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019148AC(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100A07F2C()
{
  qword_1023062C0 = (uint64_t)"id";
  dword_1023062C8 = 1;
  word_1023062CC = 257;
  byte_1023062D0 = 0;
  byte_1023062E8 = 0;
  qword_1023062F0 = (uint64_t)"startTime";
  dword_1023062F8 = 2;
  word_1023062FC = 0;
  byte_102306300 = 0;
  byte_102306318 = 0;
  qword_102306320 = 0;
  dword_102306328 = 5;
  word_10230632C = 0;
  byte_102306330 = 0;
  byte_102306348 = 0;
  qword_102306350 = (uint64_t)"startTime";
  *(_QWORD *)algn_102306358 = 0;
}

uint64_t sub_100A07FA0()
{
  if (qword_102306360 != -1)
    dispatch_once(&qword_102306360, &stru_102165690);
  return qword_102311138;
}

void sub_100A07FE0(id a1)
{
  operator new();
}

void sub_100A08028()
{
  operator delete();
}

CFRunLoopTimerRef *sub_100A0804C(CFRunLoopTimerRef *a1, int a2, char a3)
{
  CFRunLoopTimerRef v4;
  __CFRunLoop *v5;
  CFRunLoopTimerContext context;

  *a1 = (CFRunLoopTimerRef)off_1021656C0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *((_DWORD *)a1 + 8) = a2;
  a1[5] = 0;
  *((_BYTE *)a1 + 48) = a3;
  *((_DWORD *)a1 + 13) = 0;
  a1[7] = 0;
  context.version = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  v4 = CFRunLoopTimerCreate(kCFAllocatorDefault, 1.79769313e308, 1.79769313e308, 0, 0, (CFRunLoopTimerCallBack)sub_100A08118, &context);
  a1[7] = v4;
  if (v4)
  {
    sub_100127B9C();
    v5 = (__CFRunLoop *)sub_1001AD8D0();
    CFRunLoopAddTimer(v5, a1[7], kCFRunLoopCommonModes);
  }
  return a1;
}

void sub_100A08100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100A0B07C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100A08118(uint64_t a1, uint64_t a2)
{
  sub_10019CFCC(a2);
}

uint64_t sub_100A08120(uint64_t a1)
{
  __CFRunLoopTimer *v2;
  void **v4;

  *(_QWORD *)a1 = off_1021656C0;
  v2 = *(__CFRunLoopTimer **)(a1 + 56);
  if (v2)
  {
    CFRunLoopTimerInvalidate(v2);
    CFRelease(*(CFTypeRef *)(a1 + 56));
  }
  sub_100A08184(a1);
  v4 = (void **)(a1 + 8);
  sub_100A0B07C(&v4);
  return a1;
}

void sub_100A08184(uint64_t a1)
{
  CFRunLoopRef Current;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_101914A14();
LABEL_10:
    dispatch_once(&qword_10229FC70, &stru_102165728);
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    sub_100127B9C();
    v4 = sub_1001AD8D0();
    IOHIDEventSystemClientUnscheduleWithRunLoop(v3, v4, kCFRunLoopDefaultMode);
    IOHIDEventSystemClientUnregisterEventCallback(*(_QWORD *)(a1 + 40), sub_1002063F0, a1, 0);
    IOHIDEventSystemClientUnregisterResetCallback(*(_QWORD *)(a1 + 40), sub_100A086CC, a1, 0);
    IOHIDEventSystemClientUnregisterDeviceMatchingCallback(*(_QWORD *)(a1 + 40), sub_10023D9C0, a1, 0);
    CFRelease(*(CFTypeRef *)(a1 + 40));
    *(_QWORD *)(a1 + 40) = 0;
  }
  Current = (CFRunLoopRef)DefaultObserver;
  if (qword_10229FC70 != -1)
    goto LABEL_10;
LABEL_5:
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Hid interface closed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (*((_QWORD *)Current + 398) != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] Hid interface closed", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::closeHid()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_100A083A8(uint64_t a1)
{
  sub_100A08120(a1);
  operator delete();
}

void **sub_100A083CC(uint64_t *a1, _QWORD *a2)
{
  __objc2_class *v2;
  CFRunLoopRef Current;
  NSObject *v6;
  int v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void **result;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __objc2_class_ro *info;
  int v26;
  int v27;
  char *v28;
  __int128 v29;
  _DWORD v30[2];
  __int16 v31;
  int v32;
  uint8_t buf[8];
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t *v37;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_101914B74(qword_10229FC70 == -1);
    __break(1u);
LABEL_25:
    dispatch_once(&qword_10229FC70, &stru_102165728);
LABEL_22:
    info = v2[79].info;
    v26 = *(_DWORD *)(*a2 + 16);
    v27 = *(_DWORD *)(*a2 + 20);
    v30[0] = 67240448;
    v30[1] = v27;
    v31 = 1026;
    v32 = v26;
    v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, info, 0, "[CLIoHidInterface] Adding new Device with usage pair {%{public}d, %{public}d}", v30, 14);
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::addDevice(std::shared_ptr<CLIoHidInterface::Device>)", "%s\n", v28);
    if (v28 != (char *)buf)
      free(v28);
    goto LABEL_7;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102165728);
  v2 = DefaultObserver;
  v6 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(*a2 + 16);
    v8 = *(_DWORD *)(*a2 + 20);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v8;
    LOWORD(v34) = 1026;
    *(_DWORD *)((char *)&v34 + 2) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Adding new Device with usage pair {%{public}d, %{public}d}", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 == -1)
      goto LABEL_22;
    goto LABEL_25;
  }
LABEL_7:
  v9 = *(_OWORD *)a2;
  v10 = a2[1];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  result = (void **)(a1 + 3);
  v14 = a1[3];
  v15 = (_QWORD *)a1[2];
  if ((unint64_t)v15 >= v14)
  {
    v29 = v9;
    v17 = a1[1];
    v18 = ((uint64_t)v15 - v17) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      sub_100259694();
    v20 = v14 - v17;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    v37 = a1 + 3;
    v22 = (char *)sub_10028E224((uint64_t)result, v21);
    v23 = &v22[16 * v18];
    *(_QWORD *)buf = v22;
    v34 = v23;
    v36 = &v22[16 * v24];
    *(_OWORD *)v23 = v29;
    v35 = v23 + 16;
    sub_100A0B104(a1 + 1, buf);
    v16 = (_QWORD *)a1[2];
    result = sub_100A0B27C((void **)buf);
  }
  else
  {
    *v15 = v9;
    v15[1] = v10;
    v16 = v15 + 2;
    a1[2] = (uint64_t)(v15 + 2);
  }
  a1[2] = (uint64_t)v16;
  return result;
}

void sub_100A0869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100A0B27C((void **)va);
  _Unwind_Resume(a1);
}

void sub_100A086D0(_QWORD *a1)
{
  NSMutableArray *v1;
  uint64_t v2;
  CFRunLoopRef Current;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  int v18;
  NSNumber *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  NSObject *v26;
  char *v27;
  uint64_t v28;
  void *context;
  _QWORD v30[2];
  _QWORD v31[2];
  _DWORD v32[2];
  __int16 v33;
  int v34;
  uint8_t buf[4];
  _QWORD v36[203];
  __int128 v37;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_101914E48();
    __break(1u);
LABEL_55:
    dispatch_once(&qword_10229FC70, &stru_102165728);
LABEL_47:
    v26 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v36[0] = v2;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Setting matching multiple for %{public}lu events", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      LODWORD(v37) = 134349056;
      *(_QWORD *)((char *)&v37 + 4) = v2;
      LODWORD(v28) = 12;
      v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] Setting matching multiple for %{public}lu events", &v37, v28);
      sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "%s\n", v27);
      if (v27 != (char *)buf)
        free(v27);
    }
    IOHIDEventSystemClientSetMatchingMultiple(a1[5], +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v1));
    objc_autoreleasePoolPop(context);
    goto LABEL_51;
  }
  context = objc_autoreleasePoolPush();
  v5 = sub_1001B7910();
  v1 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (uint64_t)(a1[2] - a1[1]) >> 4);
  v6 = (uint64_t *)a1[1];
  v7 = (uint64_t *)a1[2];
  if (v6 == v7)
  {
    v2 = 0;
LABEL_46:
    if (qword_10229FC70 == -1)
      goto LABEL_47;
    goto LABEL_55;
  }
  v2 = 0;
  while (1)
  {
    v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
      break;
LABEL_35:
    v6 += 2;
    if (v6 == v7)
      goto LABEL_46;
  }
  v9 = *v6;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = std::__shared_weak_count::lock(v8);
  *((_QWORD *)&v37 + 1) = v12;
  if (!v12)
  {
    std::__shared_weak_count::__release_weak(v8);
    goto LABEL_35;
  }
  v13 = v12;
  *(_QWORD *)&v37 = v9;
  if (v9)
  {
    if ((v5 & 0x800000000000) == 0 && *(_DWORD *)(v9 + 20) == 65280 && *(_DWORD *)(v9 + 16) == 8)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Prox: remove set matching multiple", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        LOWORD(v32[0]) = 0;
        LODWORD(v28) = 2;
        v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "[CLIoHidInterface] Prox: remove set matching multiple", v32, v28);
        sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "%s\n", v25);
        if (v25 != (char *)buf)
          free(v25);
      }
      IOHIDEventSystemClientSetMatchingMultiple(a1[5], 0);
      sub_100A09324((uint64_t)a1);
      sub_100A08D84((uint64_t)a1, 0);
      LODWORD(v9) = 0;
      v15 = 1;
    }
    else
    {
      if (*(_QWORD *)(v9 + 48))
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        v16 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          v18 = *(_DWORD *)(v9 + 16);
          v17 = *(_DWORD *)(v9 + 20);
          *(_DWORD *)buf = 67240448;
          LODWORD(v36[0]) = v17;
          WORD2(v36[0]) = 1026;
          *(_DWORD *)((char *)v36 + 6) = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Adding match entry for usage pair {%{public}d, %{public}d}", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102165728);
          v23 = *(_DWORD *)(v9 + 16);
          v22 = *(_DWORD *)(v9 + 20);
          v32[0] = 67240448;
          v32[1] = v22;
          v33 = 1026;
          v34 = v23;
          LODWORD(v28) = 14;
          v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] Adding match entry for usage pair {%{public}d, %{public}d}", v32, v28);
          sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "%s\n", v24);
          if (v24 != (char *)buf)
            free(v24);
        }
        v30[0] = CFSTR("PrimaryUsagePage");
        v19 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v9 + 20));
        v30[1] = CFSTR("PrimaryUsage");
        v31[0] = v19;
        v31[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v9 + 16));
        -[NSMutableArray setObject:atIndexedSubscript:](v1, "setObject:atIndexedSubscript:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v31, v30, 2), v2);
        v15 = 0;
        ++v2;
      }
      else
      {
        v15 = 0;
      }
      LODWORD(v9) = 1;
    }
  }
  else
  {
    v15 = 9;
  }
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
  if (v15 == 9 || !v15)
    goto LABEL_35;
  objc_autoreleasePoolPop(context);
  if ((_DWORD)v9)
  {
LABEL_51:
    sub_100A09324((uint64_t)a1);
    sub_100A08D84((uint64_t)a1, 0);
  }
}

void sub_100A08D58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  sub_100261F44(v2 - 112);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_100A08D84(uint64_t a1, __IOHIDServiceClient *a2)
{
  CFRunLoopRef Current;
  NSObject *v4;
  id v5;
  uint64_t v6;
  void *v7;
  __IOHIDServiceClient *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23;
  id v24;
  char *v25;
  uint64_t v26;
  void *context;
  CFArrayRef obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __IOHIDServiceClient *v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  unsigned int v41;
  uint8_t v42[128];
  _BYTE buf[18];
  __int16 v44;
  unsigned int v45;
  __int16 v46;
  unsigned int v47;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    if (qword_10229FC70 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101914FB0(qword_10229FC70 == -1);
    __break(1u);
  }
  dispatch_once(&qword_10229FC70, &stru_102165728);
LABEL_3:
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Refreshing service refs", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    LOWORD(v34) = 0;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "[CLIoHidInterface] Refreshing service refs", &v34, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::refreshDeviceServiceRefs(const IOHIDServiceClientRef)", "%s\n", v25);
    if (v25 != buf)
      free(v25);
  }
  obj = IOHIDEventSystemClientCopyServices(*(IOHIDEventSystemClientRef *)(a1 + 40));
  if (obj)
  {
    context = objc_autoreleasePoolPush();
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v5 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v30, v42, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v31;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v31 != v6)
            objc_enumerationMutation(obj);
          v8 = *(__IOHIDServiceClient **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v7);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102165728);
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
          {
            v9 = objc_msgSend((id)(id)IOHIDServiceClientCopyProperty(v8, CFSTR("PrimaryUsagePage")), "intValue");
            v10 = objc_msgSend((id)(id)IOHIDServiceClientCopyProperty(v8, CFSTR("PrimaryUsage")), "intValue");
            v11 = objc_msgSend((id)(id)IOHIDServiceClientCopyProperty(v8, CFSTR("LocationID")), "intValue");
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_102165728);
            v12 = qword_10229FC78;
            if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134284289;
              *(_QWORD *)&buf[4] = v8;
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = v9;
              v44 = 1026;
              v45 = v10;
              v46 = 1026;
              v47 = v11;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Check service ref %{private}p with usage pair {%{public}d, %{public}d} locationID %{public}d as a potential match", buf, 0x1Eu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FC70 != -1)
                dispatch_once(&qword_10229FC70, &stru_102165728);
              v34 = 134284289;
              v35 = v8;
              v36 = 1026;
              v37 = v9;
              v38 = 1026;
              v39 = v10;
              v40 = 1026;
              v41 = v11;
              LODWORD(v26) = 30;
              v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] Check service ref %{private}p with usage pair {%{public}d, %{public}d} locationID %{public}d as a potential match", &v34, v26);
              sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::refreshDeviceServiceRefs(const IOHIDServiceClientRef)", "%s\n", v23);
              if (v23 != buf)
                free(v23);
            }
          }
          if (v8 != a2)
          {
            v14 = *(uint64_t **)(a1 + 8);
            v13 = *(uint64_t **)(a1 + 16);
            while (v14 != v13)
            {
              v15 = (std::__shared_weak_count *)v14[1];
              if (v15)
              {
                v16 = *v14;
                p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
                do
                  v18 = __ldxr(p_shared_weak_owners);
                while (__stxr(v18 + 1, p_shared_weak_owners));
                v19 = std::__shared_weak_count::lock(v15);
                *(_QWORD *)&buf[8] = v19;
                if (v19)
                {
                  v20 = v19;
                  *(_QWORD *)buf = v16;
                  if (v16)
                  {
                    if ((sub_1000C0808(v16, v8) & 1) != 0)
                    {
                      sub_10008AD74(v16, v8, 0);
                      if (*(_QWORD *)(v16 + 80))
                        IOHIDServiceClientRegisterRemovalCallback(v8, sub_100A09320, a1, "REMOVED");
                    }
                  }
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v22 = __ldaxr(p_shared_owners);
                  while (__stlxr(v22 - 1, p_shared_owners));
                  if (!v22)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                std::__shared_weak_count::__release_weak(v15);
              }
              v14 += 2;
            }
          }
          v7 = (char *)v7 + 1;
        }
        while (v7 != v5);
        v24 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v30, v42, 16);
        v5 = v24;
      }
      while (v24);
    }
    objc_autoreleasePoolPop(context);

  }
}

void sub_100A092FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  std::__shared_weak_count *v45;

  sub_100261F44((uint64_t)&a45);
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void sub_100A09324(uint64_t a1)
{
  CFRunLoopRef Current;
  NSObject *v3;
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  _WORD v15[8];
  uint8_t buf[8];
  std::__shared_weak_count *v17;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    if (qword_10229FC70 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101915284(qword_10229FC70 == -1);
    __break(1u);
  }
  dispatch_once(&qword_10229FC70, &stru_102165728);
LABEL_3:
  v3 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Invalidating hid service refs", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v15[0] = 0;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "[CLIoHidInterface] Invalidating hid service refs", v15, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::invalidateDeviceServiceRefs()", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 16);
  while (v4 != v5)
  {
    v6 = (std::__shared_weak_count *)v4[1];
    if (v6)
    {
      v7 = *v4;
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      v10 = std::__shared_weak_count::lock(v6);
      v17 = v10;
      if (v10)
      {
        v11 = v10;
        *(_QWORD *)buf = v7;
        if (v7)
        {
          sub_10023D8C0(v7);
          sub_100A095A0(v7);
          sub_100A097B0(v7);
        }
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      std::__shared_weak_count::__release_weak(v6);
    }
    v4 += 2;
  }
}

void sub_100A0957C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void sub_100A095A0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  char *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  _BOOL4 v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  uint64_t v26;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102165728);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_DWORD *)(a1 + 16);
    v3 = *(_DWORD *)(a1 + 20);
    v5 = *(_QWORD *)(a1 + 48) != 0;
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67240961;
    v20 = v3;
    v21 = 1026;
    v22 = v4;
    v23 = 1026;
    v24 = v5;
    v25 = 2049;
    v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Device,hidUsagePage,%{public}d,hidUsage,%{public}d,hasCallback,%{public}d,serviceRef,%{private}p", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v8 = *(_DWORD *)(a1 + 16);
    v7 = *(_DWORD *)(a1 + 20);
    v9 = *(_QWORD *)(a1 + 48) != 0;
    v10 = *(_QWORD *)(a1 + 24);
    v12[0] = 67240961;
    v12[1] = v7;
    v13 = 1026;
    v14 = v8;
    v15 = 1026;
    v16 = v9;
    v17 = 2049;
    v18 = v10;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] Device,hidUsagePage,%{public}d,hidUsage,%{public}d,hasCallback,%{public}d,serviceRef,%{private}p", v12, 30);
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::Device::print() const", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
}

id sub_100A097B0(uint64_t a1)
{
  __objc2_class *v2;
  id result;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  id v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  __int16 v26;
  unsigned int v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  id v31;
  __int16 v32;
  unsigned int v33;
  _BYTE v34[128];

  v2 = DefaultObserver;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102165728);
  result = (id)os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v4 = *(void **)(a1 + 160);
    result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v34, 16);
    if (result)
    {
      v5 = result;
      v6 = *(_QWORD *)v19;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v19 != v6)
            objc_enumerationMutation(v4);
          v8 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v7);
          v9 = objc_msgSend(*(id *)(a1 + 160), "objectForKeyedSubscript:", v8);
          if (v2[79].vtable != (void *)-1)
            dispatch_once(&qword_10229FC70, &stru_102165728);
          v10 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
          {
            v11 = objc_msgSend(v9, "value");
            v12 = objc_msgSend(v9, "dirty");
            *(_DWORD *)buf = 138543874;
            v29 = v8;
            v30 = 2114;
            v31 = v11;
            v2 = DefaultObserver;
            v32 = 1026;
            v33 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] \tProperty: %{public}@ = %{public}@,dirty,%{public}d", buf, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v2[79].vtable != (void *)-1)
              dispatch_once(&qword_10229FC70, &stru_102165728);
            v13 = qword_10229FC78;
            v14 = objc_msgSend(v9, "value");
            v15 = objc_msgSend(v9, "dirty");
            v22 = 138543874;
            v23 = v8;
            v24 = 2114;
            v25 = v14;
            v26 = 1026;
            v27 = v15;
            LODWORD(v17) = 28;
            v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "[CLIoHidInterface] \tProperty: %{public}@ = %{public}@,dirty,%{public}d", &v22, v17);
            sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::Device::printProperties() const", "%s\n", v16);
            if (v16 != (char *)buf)
              free(v16);
            v2 = DefaultObserver;
          }
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v34, 16);
        v5 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_100A09A98(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _QWORD v6[5];
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102165728);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] It looks like our HID event system just become available (again)", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] It looks like our HID event system just become available (again)", v7, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::onEventSystemReset(void *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  v3 = sub_100127B9C();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100A09C64;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  sub_1000A57FC(v3, (uint64_t)v6);
}

void sub_100A09C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void (*v10)(_QWORD);
  unint64_t *p_shared_owners;
  unint64_t v12;

  v1 = *(_QWORD *)(a1 + 32);
  sub_100A08D84(v1, 0);
  v2 = *(uint64_t **)(v1 + 8);
  v3 = *(uint64_t **)(v1 + 16);
  while (v2 != v3)
  {
    v4 = (std::__shared_weak_count *)v2[1];
    if (v4)
    {
      v5 = *v2;
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      v8 = std::__shared_weak_count::lock(v4);
      if (v8)
      {
        v9 = v8;
        if (v5)
        {
          v10 = *(void (**)(_QWORD))(v5 + 96);
          if (v10)
            v10(*(_QWORD *)(v5 + 104));
        }
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__shared_weak_count::__release_weak(v4);
    }
    v2 += 2;
  }
}

void sub_100A09D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;

  sub_100261F44((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

void sub_100A09D58(uint64_t a1, char *a2, __IOHIDServiceClient *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unsigned int v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  NSObject *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint64_t v32;
  void *context;
  int v34;
  uint64_t v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  uint64_t v41;
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  unsigned int v45;
  __int16 v46;
  unsigned int v47;
  __int16 v48;
  uint64_t v49;

  if (a2 == "REMOVED")
  {
    context = objc_autoreleasePoolPush();
    v6 = *(uint64_t **)(a1 + 8);
    v5 = *(uint64_t **)(a1 + 16);
    if (v6 != v5)
    {
      while (1)
      {
        v7 = (std::__shared_weak_count *)v6[1];
        if (v7)
          break;
LABEL_34:
        v6 += 2;
        if (v6 == v5)
          goto LABEL_45;
      }
      v8 = *v6;
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      v11 = std::__shared_weak_count::lock(v7);
      if (!v11)
      {
LABEL_33:
        std::__shared_weak_count::__release_weak(v7);
        goto LABEL_34;
      }
      v12 = v11;
      if (v8 && *(_QWORD *)(v8 + 80) && (__IOHIDServiceClient *)sub_100A0A3A0(v8) == a3)
      {
        v13 = objc_msgSend((id)(id)IOHIDServiceClientCopyProperty(a3, CFSTR("PrimaryUsagePage")), "intValue");
        v14 = objc_msgSend((id)(id)IOHIDServiceClientCopyProperty(a3, CFSTR("PrimaryUsage")), "intValue");
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        v15 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *(_QWORD *)(v8 + 152);
          *(_DWORD *)buf = 134284291;
          v43 = (uint64_t)a3;
          v44 = 1026;
          v45 = v13;
          v46 = 1026;
          v47 = v14;
          v48 = 2113;
          v49 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] onServiceRemoval - IOHIDServiceClientRef for service %{private}p with usage pair {%{public}d, %{public}d} and property %{private}@ will be removed.", buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102165728);
          v28 = *(_QWORD *)(v8 + 152);
          v34 = 134284291;
          v35 = (uint64_t)a3;
          v36 = 1026;
          v37 = v13;
          v38 = 1026;
          v39 = v14;
          v40 = 2113;
          v41 = v28;
          LODWORD(v32) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] onServiceRemoval - IOHIDServiceClientRef for service %{private}p with usage pair {%{public}d, %{public}d} and property %{private}@ will be removed.", &v34, v32);
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRemoval(void *, IOHIDServiceClientRef)", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        (*(void (**)(_QWORD))(v8 + 80))(*(_QWORD *)(v8 + 88));
        sub_10023D8C0(v8);
        sub_100A08D84(a1, a3);
        if (sub_100A0A3A0(v8))
        {
          sub_10019CFCC(a1);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102165728);
          v17 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
          {
            v18 = sub_100A0A3A0(v8);
            v19 = *(_QWORD *)(v8 + 152);
            *(_DWORD *)buf = 134284291;
            v43 = v18;
            v44 = 1026;
            v45 = v13;
            v46 = 1026;
            v47 = v14;
            v48 = 2113;
            v49 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] onServiceRemoval - successfully switch to service %{private}p with usage pair {%{public}d, %{public}d} and property %{private}@.", buf, 0x22u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_29;
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102165728);
          v20 = qword_10229FC78;
          v21 = sub_100A0A3A0(v8);
          v22 = *(_QWORD *)(v8 + 152);
          v34 = 134284291;
          v35 = v21;
          v36 = 1026;
          v37 = v13;
          v38 = 1026;
          v39 = v14;
          v40 = 2113;
          v41 = v22;
          LODWORD(v32) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "[CLIoHidInterface] onServiceRemoval - successfully switch to service %{private}p with usage pair {%{public}d, %{public}d} and property %{private}@.", &v34, v32);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRemoval(void *, IOHIDServiceClientRef)", "%s\n", v23);
        }
        else
        {
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102165728);
          v25 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] onServiceRemoval - no available alternatives", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_29;
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102165728);
          LOWORD(v34) = 0;
          LODWORD(v32) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] onServiceRemoval - no available alternatives", &v34, v32);
          v24 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRemoval(void *, IOHIDServiceClientRef)", "%s\n", v31);
        }
        if (v24 != buf)
          free(v24);
      }
LABEL_29:
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_33;
    }
LABEL_45:
    objc_autoreleasePoolPop(context);
  }
}

void sub_100A0A360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_100A0A3A0(uint64_t a1)
{
  CFRunLoopRef Current;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
    return *(_QWORD *)(a1 + 24);
  v4 = sub_1019156CC();
  return sub_100A0A3DC(v4, v5, v6, v7, v8);
}

uint64_t sub_100A0A3DC(uint64_t a1, int a2, int a3, char a4, uint64_t a5)
{
  *(_QWORD *)a1 = off_1021656E0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a5;
  *(_BYTE *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = objc_opt_new(NSMutableDictionary);
  return a1;
}

uint64_t sub_100A0A440(uint64_t a1)
{
  const void *v2;

  *(_QWORD *)a1 = off_1021656E0;

  *(_QWORD *)(a1 + 160) = 0;
  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);

  *(_QWORD *)(a1 + 152) = 0;
  return a1;
}

void sub_100A0A498(uint64_t a1)
{
  sub_100A0A440(a1);
  operator delete();
}

void sub_100A0A4BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current;
  _BOOL4 v7;
  uint64_t v8;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_1001AD510(a1[4]);
    v7 = a1[6] != 0;
    a1[6] = a2;
    a1[7] = a3;
    if ((((a2 == 0) ^ v7) & 1) == 0)
      sub_100A086D0((_QWORD *)a1[4]);
  }
  else
  {
    v8 = sub_10191582C(a1);
    sub_100A0A544(v8);
  }
}

uint64_t sub_100A0A544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current;
  uint64_t result;
  uint64_t v8;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  result = sub_1001AD8D0();
  if (Current == (CFRunLoopRef)result)
  {
    *(_QWORD *)(a1 + 64) = a2;
    *(_QWORD *)(a1 + 72) = a3;
  }
  else
  {
    v8 = sub_10191599C(a1);
    return sub_100A0A594(v8);
  }
  return result;
}

uint64_t sub_100A0A594(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    a1[10] = a2;
    a1[11] = a3;
    result = a1[3];
    if (result)
      return IOHIDServiceClientRegisterRemovalCallback(result, sub_100A09320, a1[4], "REMOVED");
  }
  else
  {
    v8 = sub_101915B0C(a1);
    return sub_100A0A610(v8, v9, v10);
  }
  return result;
}

uint64_t sub_100A0A610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current;
  uint64_t result;
  uint64_t v8;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  result = sub_1001AD8D0();
  if (Current == (CFRunLoopRef)result)
  {
    *(_QWORD *)(a1 + 96) = a2;
    *(_QWORD *)(a1 + 104) = a3;
  }
  else
  {
    v8 = sub_101915C7C(a1);
    return sub_100A0A660(v8);
  }
  return result;
}

void sub_100A0A660(uint64_t a1)
{
  CFRunLoopRef Current;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_1001AD510(*(_QWORD *)(a1 + 32));
    v4 = *(unsigned int *)(a1 + 144);
    if ((_DWORD)v4)
    {
      IOHIDServiceClientCopyEvent(*(_QWORD *)(a1 + 24), v4, 0, 0);
      return;
    }
  }
  else
  {
    v3 = sub_10191638C();
  }
  v5 = sub_10191622C(v3);
  sub_100A0A6B8(v5, v6, v7);
}

void sub_100A0A6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __objc2_class *v3;
  CFRunLoopRef Current;
  NSObject *v8;
  const char *v9;
  int v10;
  int v11;
  uint64_t v12;
  const char *v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_1019164EC(a1);
LABEL_13:
    dispatch_once(&qword_10229FC70, &stru_102165728);
    goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 112) == a2 && *(_QWORD *)(a1 + 120) == a3)
    return;
  v3 = DefaultObserver;
  if (qword_10229FC70 != -1)
    goto LABEL_13;
LABEL_5:
  v8 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    v9 = "Opening";
    if (!*(_QWORD *)(a1 + 112))
      v9 = "Closing";
    v11 = *(_DWORD *)(a1 + 16);
    v10 = *(_DWORD *)(a1 + 20);
    v12 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 136446979;
    v27 = v9;
    v28 = 1026;
    v29 = v10;
    v30 = 1026;
    v31 = v11;
    v32 = 2049;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%{public}s hid driver interface for usage pair {%{public}d, %{public}d}, hidServiceRef %{private}p", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[79].vtable != (void *)-1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v13 = "Opening";
    if (!*(_QWORD *)(a1 + 112))
      v13 = "Closing";
    v15 = *(_DWORD *)(a1 + 16);
    v14 = *(_DWORD *)(a1 + 20);
    v16 = *(_QWORD *)(a1 + 24);
    v18 = 136446979;
    v19 = v13;
    v20 = 1026;
    v21 = v14;
    v22 = 1026;
    v23 = v15;
    v24 = 2049;
    v25 = v16;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "%{public}s hid driver interface for usage pair {%{public}d, %{public}d}, hidServiceRef %{private}p", &v18, 34);
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setRegistryIDChangedCallback(OnRegistryIDChanged, void *)", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = a3;
}

uint64_t sub_100A0A934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current;
  uint64_t result;
  _BOOL4 v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  result = sub_1001AD8D0();
  if (Current == (CFRunLoopRef)result)
  {
    v8 = a2 != 0;
    v9 = a3 != 0;
    v10 = !v8 || !v9;
    if (v8 && v9)
      v11 = a2;
    else
      v11 = 0;
    if (v10)
      v12 = 0;
    else
      v12 = a3;
    *(_QWORD *)(a1 + 128) = v11;
    *(_QWORD *)(a1 + 136) = v12;
  }
  else
  {
    v13 = sub_10191665C(a1);
    return sub_100A0A9A0(v13);
  }
  return result;
}

void sub_100A0A9A0(uint64_t a1, int a2)
{
  CFRunLoopRef Current;
  uint64_t v5;
  void *v6;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    *(_DWORD *)(a1 + 144) = a2;
  }
  else
  {
    v5 = sub_1019167CC(a1);
    sub_100A0A9EC(v5, v6);
  }
}

void sub_100A0A9EC(uint64_t a1, void *a2)
{
  CFRunLoopRef Current;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  __IOHIDServiceClient *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_10191693C();
    goto LABEL_33;
  }
  if (objc_msgSend(a2, "isEqualToDictionary:", *(_QWORD *)(a1 + 152)))
  {
    Current = (CFRunLoopRef)DefaultObserver;
    if (qword_10229FC70 == -1)
    {
LABEL_4:
      v5 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(a1 + 152);
        *(_DWORD *)buf = 138477827;
        v30 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - Early return for identical properties %{private}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (*((_QWORD *)Current + 398) != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        v7 = *(_QWORD *)(a1 + 152);
        v25 = 138477827;
        v26 = v7;
        v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] setMatchingProperties - Early return for identical properties %{private}@", &v25, 12);
        sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "%s\n", v8);
        if (v8 != (char *)buf)
          free(v8);
      }
      return;
    }
LABEL_33:
    dispatch_once(&qword_10229FC70, &stru_102165728);
    goto LABEL_4;
  }
  v9 = a2;

  *(_QWORD *)(a1 + 152) = a2;
  v10 = *(__IOHIDServiceClient **)(a1 + 24);
  if (v10 && !sub_10023D32C(v10, a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 152);
      *(_DWORD *)buf = 134283779;
      v30 = v12;
      v31 = 2114;
      v32 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - Previously matched service ref %{private}p does not match new properties %{public}@. Clearing and refreshing.", buf, 0x16u);
    }
    v14 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v14)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v18 = *(_QWORD *)(a1 + 24);
      v19 = *(_QWORD *)(a1 + 152);
      v25 = 134283779;
      v26 = v18;
      v27 = 2114;
      v28 = v19;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] setMatchingProperties - Previously matched service ref %{private}p does not match new properties %{public}@. Clearing and refreshing.", &v25, 22);
      v14 = sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "%s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
    if (!sub_1001A9460(v14, *(__IOHIDServiceClient **)(a1 + 24), CFSTR("ReportInterval"), &off_10221BA38))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v15 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[CLIoHidInterface] setMatchingProperties - Failed to stop streaming from the old service", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        LOWORD(v25) = 0;
        LODWORD(v24) = 2;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "[CLIoHidInterface] setMatchingProperties - Failed to stop streaming from the old service", &v25, v24);
        sub_100512490("Generic", 1, 0, 0, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "%s\n", v23);
        if (v23 != (char *)buf)
          free(v23);
      }
    }
    sub_10023D8C0(a1);
    sub_100A08D84(*(_QWORD *)(a1 + 32), 0);
    if (*(_QWORD *)(a1 + 24))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v16 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 134283521;
        v30 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - successfully switch to new service %{private}p", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        v21 = *(_QWORD *)(a1 + 24);
        v25 = 134283521;
        v26 = v21;
        LODWORD(v24) = 12;
        v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] setMatchingProperties - successfully switch to new service %{private}p", &v25, v24);
        sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "%s\n", v22);
        if (v22 != (char *)buf)
          free(v22);
      }
      sub_10019CFCC(*(_QWORD *)(a1 + 32));
    }
  }
}

void sub_100A0B010(uint64_t a1)
{

  *(_QWORD *)(a1 + 152) = 0;
}

uint64_t sub_100A0B038(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(result + 32);
  v2 = *(uint64_t (**)(_QWORD))(v1 + 64);
  if (v2)
    return v2(*(_QWORD *)(v1 + 72));
  return result;
}

void sub_100A0B050(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100A0B07C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100A0B0BC((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100A0B0BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  a1[1] = v2;
}

uint64_t sub_100A0B104(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100A0B178((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100A0B178(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_100A0B208((uint64_t)v12);
  return v10;
}

uint64_t sub_100A0B208(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100A0B23C(a1);
  return a1;
}

void sub_100A0B23C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v1 += 16;
  }
}

void **sub_100A0B27C(void **a1)
{
  sub_100A0B2AC((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100A0B2AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  while (v1 != v2)
  {
    *(_QWORD *)(a1 + 16) = v1 - 16;
    v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v1 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_100A0B33C(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x32u);
}

void sub_100A0B35C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x32u);
}

void sub_100A0B370(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x32u);
}

void sub_100A0B384(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
}

void sub_100A0B9B8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100A0B9E4(id a1)
{
  byte_102306368 = 1;
}

void sub_100A0B9F4(_QWORD *a1@<X8>)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  _DWORD v11[4];
  uint8_t buf[8];
  std::__shared_weak_count *v13;

  v10 = 0;
  sub_1001E4804(buf);
  v2 = sub_1001E4B84(*(uint64_t *)buf, "GpsMotionAiding", &v10);
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v10 == 1)
    v6 = 1;
  else
    v6 = v2 ^ 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "GpsMotionAiding,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v11[0] = 67109120;
    v11[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GpsMotionAiding,%d", v11);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssAssistanceMotion> CLGnssAssistanceMotion::create(id<CLIntersiloUniverse>, CLGnssAssistanceMotion::GnssAssistanceMotionCallback)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (v6)
    operator new();
  *a1 = 0;
}

void sub_100A0BC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v17;
  uint64_t v18;

  v17 = a16;
  if (a16 == v16)
  {
    v18 = 4;
    v17 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  operator delete();
}

void sub_100A0BD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  sub_100270E34(a1 + 8, a3);
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_100239828();
}

void sub_100A0C30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v36 = *(void **)(v29 + 1072);
  if (v36)
  {
    *(_QWORD *)(v29 + 1080) = v36;
    operator delete(v36);
  }
  *(_QWORD *)(v29 + 984) = v34 + 16;
  sub_100412390((_QWORD *)(v29 + 1008));
  *(_QWORD *)(v29 + 912) = v34 + 16;
  sub_100412390((_QWORD *)(v29 + 936));
  *(_QWORD *)(v29 + 840) = v34 + 16;
  sub_100412390((_QWORD *)(v29 + 864));
  *(_QWORD *)(v29 + 768) = v34 + 16;
  sub_100412390((_QWORD *)(v29 + 792));
  sub_100A0EBE8((_QWORD *)(v29 + 568));
  sub_1006CF50C((_QWORD *)(v29 + 512));
  v37 = *(_QWORD *)(v29 + 488);
  *(_QWORD *)(v29 + 488) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)(v29 + 472);
  *(_QWORD *)(v29 + 472) = 0;
  if (v38)
    (*(void (**)(void))(v29 + 480))();
  sub_1002397F4(v31);
  v39 = *(_QWORD *)(v29 + 112);
  *(_QWORD *)(v29 + 112) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *(_QWORD *)(v29 + 104);
  *(_QWORD *)(v29 + 104) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *v33;
  *v33 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(v29 + 80);
  *(_QWORD *)(v29 + 80) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (*(_BYTE *)(v29 + 72))
  {
    v43 = *(_QWORD **)(v29 + 64);
    if (v43 == v32)
    {
      v44 = 4;
      v43 = v32;
    }
    else
    {
      if (!v43)
        goto LABEL_21;
      v44 = 5;
    }
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
LABEL_21:
  v45 = *(_QWORD **)(v29 + 32);
  if (v45 == v30)
  {
    v46 = 4;
    v45 = v30;
  }
  else
  {
    if (!v45)
      goto LABEL_26;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_26:
  _Unwind_Resume(a1);
}

void sub_100A0C520(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x100A0C518);
}

void sub_100A0C530(uint64_t a1, const char *a2, BOOL *a3)
{
  const char *v5;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  _BOOL4 v13;
  const char *v14;
  _BOOL4 v15;
  const char *v16;
  char *v17;
  int v18;
  int v19;
  const char *v20;
  __int16 v21;
  _BOOL4 v22;
  _BYTE buf[1638];

  v18 = 0;
  sub_1001E4804(buf);
  if (a2[23] >= 0)
    v5 = a2;
  else
    v5 = *(const char **)a2;
  v6 = sub_1001E4B84(*(uint64_t *)buf, v5, &v18);
  v7 = v6;
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_8;
  v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_8:
    if (!v6)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (v7)
LABEL_9:
    *a3 = v18 == 1;
LABEL_10:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    if (a2[23] >= 0)
      v12 = a2;
    else
      v12 = *(const char **)a2;
    v13 = *a3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    if (a2[23] >= 0)
      v14 = a2;
    else
      v14 = *(const char **)a2;
    v15 = *a3;
    v19 = 136315394;
    v20 = v14;
    v21 = 1024;
    v22 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "%s,%d", (const char *)&v19, 18);
    v17 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::readDefault(const std::string &, BOOL &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100A0C7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A0C7BC(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistanceMotion::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021657A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021657A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A0D63C((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A0C974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A0C994(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistanceMotion::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021657A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021657A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A0D8A4((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A0CB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A0CB6C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *(void **)(a1 + 1072);
  if (v2)
  {
    *(_QWORD *)(a1 + 1080) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 984) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 1008));
  *(_QWORD *)(a1 + 912) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 936));
  *(_QWORD *)(a1 + 840) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 864));
  *(_QWORD *)(a1 + 768) = off_102138370;
  sub_100412390((_QWORD *)(a1 + 792));
  sub_100A0EBE8((_QWORD *)(a1 + 568));
  sub_1006CF50C((_QWORD *)(a1 + 512));
  v3 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 480))();
  sub_1002397F4((uint64_t *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*(_BYTE *)(a1 + 72))
  {
    v9 = *(_QWORD **)(a1 + 64);
    if (v9 == (_QWORD *)(a1 + 40))
    {
      v10 = 4;
      v9 = (_QWORD *)(a1 + 40);
    }
    else
    {
      if (!v9)
        goto LABEL_21;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
LABEL_21:
  v11 = *(_QWORD **)(a1 + 32);
  if (v11 == (_QWORD *)(a1 + 8))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 8);
    goto LABEL_25;
  }
  if (v11)
  {
    v12 = 5;
LABEL_25:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return a1;
}

_BYTE *sub_100A0CCEC(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (!result[72])
  {
    v3 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "registering,motionWorkout", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "registering,motionWorkout", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::registerWorkoutCallback(GnssWorkoutCallback)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_100A0CEB4((uint64_t)(v3 + 40), a2);
    return objc_msgSend(*(id *)(*((_QWORD *)v3 + 14) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v3 + 14) + 8), 2, 0);
  }
  return result;
}

uint64_t sub_100A0CEB4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    sub_100A0EDCC((_QWORD *)a1, a2);
  }
  else
  {
    sub_100270E34(a1, a2);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_100A0CEF8(uint64_t a1, unsigned int a2, id *a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  id *v17;

  CLProfilingIdentify("CLGnssAssistanceMotion::onAccel");
  objc_msgSend(objc_msgSend(*a3, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021657A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onAccel", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021657A8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onAccel\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_100A0D114((uint64_t)a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_100A0D0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

__n128 sub_100A0D0D0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 616);
  v2 = *(_OWORD *)(a1 + 632);
  v3 = *(_OWORD *)(a1 + 648);
  v4 = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  result = *(__n128 *)(a1 + 696);
  v6 = *(_OWORD *)(a1 + 712);
  v7 = *(_OWORD *)(a1 + 728);
  *(_OWORD *)(a2 + 133) = *(_OWORD *)(a1 + 741);
  *(_OWORD *)(a2 + 120) = v7;
  *(_OWORD *)(a2 + 104) = v6;
  *(__n128 *)(a2 + 88) = result;
  return result;
}

void sub_100A0D114(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  NSObject *v14;
  __int128 v15;
  float *v16;
  NSObject *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  double v31;
  __int128 v32;
  int v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;

  if (a2)
  {
    if (a3 - 31 >= 0xFFFFFFE2)
    {
      v5 = a1 + 840;
      v6 = a1 + 912;
      v7 = a1 + 984;
      v8 = a3;
      v9 = (float *)(a2 + 8);
      v10 = a3;
      do
      {
        sub_10007D084(v5, v9);
        sub_10007D084(v6, v9 + 1);
        sub_10007D084(v7, v9 + 2);
        v9 += 6;
        --v10;
      }
      while (v10);
      if (*(_QWORD *)(a1 + 904) >= *(_QWORD *)(a1 + 848)
        && *(_QWORD *)(a1 + 976) >= *(_QWORD *)(a1 + 920)
        && *(_QWORD *)(a1 + 1048) >= *(_QWORD *)(a1 + 992))
      {
        v11 = fabsf(sub_100A0D5C4(v5));
        v12 = fabsf(sub_100A0D5C4(v6));
        v13 = fabsf(sub_100A0D5C4(v7));
        if (v11 < 1.0e-12 || v12 < 1.0e-12 || v13 < 1.0e-12)
        {
          *(_BYTE *)(a1 + 466) = 1;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102165788);
          v14 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218496;
            v42 = v11;
            v43 = 2048;
            v44 = v12;
            v45 = 2048;
            v46 = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning IsAccelStuck,1,vx,%e,vy,%e,vz,%e", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102165788);
            v33 = 134218496;
            v34 = v11;
            v35 = 2048;
            v36 = v12;
            v37 = 2048;
            v38 = v13;
            LODWORD(v30) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning IsAccelStuck,1,vx,%e,vy,%e,vz,%e", COERCE_DOUBLE(&v33), v30, v31);
            v29 = (uint8_t *)v28;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onAccel(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
          v16 = (float *)(a2 + 16);
          *(_QWORD *)&v15 = 134218752;
          v32 = v15;
          do
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102165788);
            v17 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v18 = *((double *)v16 - 2);
              v19 = *(v16 - 2);
              v20 = *(v16 - 1);
              v21 = *v16;
              *(_DWORD *)buf = v32;
              v42 = v18;
              v43 = 2048;
              v44 = v19;
              v45 = 2048;
              v46 = v20;
              v47 = 2048;
              v48 = v21;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "IsAccelStuck,1,t,%.4lf,ax,%.9f,ay,%.9f,az,%.9f", buf, 0x2Au);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_102165788);
              v22 = *((double *)v16 - 2);
              v23 = *(v16 - 2);
              v24 = *(v16 - 1);
              v25 = *v16;
              v33 = v32;
              v34 = v22;
              v35 = 2048;
              v36 = v23;
              v37 = 2048;
              v38 = v24;
              v39 = 2048;
              v40 = v25;
              LODWORD(v30) = 42;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "IsAccelStuck,1,t,%.4lf,ax,%.9f,ay,%.9f,az,%.9f", COERCE_DOUBLE(&v33), v30, *(double *)&v32, *((double *)&v32 + 1));
              v27 = (uint8_t *)v26;
              sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onAccel(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v26);
              if (v27 != buf)
                free(v27);
            }
            v16 += 6;
            --v8;
          }
          while (v8);
          sub_10000C784(a1);
        }
        else
        {
          *(_BYTE *)(a1 + 466) = 0;
        }
      }
    }
  }
}

float sub_100A0D5C4(uint64_t a1)
{
  unint64_t v1;
  float result;
  unint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;

  v1 = *(_QWORD *)(a1 + 64);
  result = 0.0;
  if (v1 >= 2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = 0.0;
    v5 = *(_QWORD *)(a1 + 64);
    v6 = 0.0;
    do
    {
      v7 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((v3 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v3 & 0x3FF))
         - (float)(*(float *)(a1 + 16) / (float)v1);
      v6 = v6 + (float)(v7 * v7);
      v4 = v4 + v7;
      ++v3;
      --v5;
    }
    while (v5);
    return (float)(v6 - (float)((float)(v4 * v4) / (float)v1)) / (float)(v1 - 1);
  }
  return result;
}

void sub_100A0D63C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _DWORD v16[4];
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  if (*(_BYTE *)(a1 + 464))
  {
    if (*a3)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *a3;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102165788);
        v7 = *a3;
        v16[0] = 67109120;
        v16[1] = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Unhandled notification,%d", v16);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
    else
    {
      v11 = *(_DWORD *)(a4 + 8);
      if (!v11 || v11 == 71 || (*(_QWORD *)a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)a4 <= 0.0)
      {
        if (*(_BYTE *)(a1 + 312))
          *(_QWORD *)(a1 + 176) = 0;
        *(_BYTE *)(a1 + 312) = 0;
        CLMotionActivity::getInit((CLMotionActivity *)a1);
        v12 = v24;
        *(_OWORD *)(a1 + 416) = v23;
        *(_OWORD *)(a1 + 432) = v12;
        *(_QWORD *)(a1 + 448) = v25;
        v13 = v20;
        *(_OWORD *)(a1 + 352) = v19;
        *(_OWORD *)(a1 + 368) = v13;
        v14 = v22;
        *(_OWORD *)(a1 + 384) = v21;
        *(_OWORD *)(a1 + 400) = v14;
        v15 = v18;
        *(_OWORD *)(a1 + 320) = *(_OWORD *)buf;
        *(_OWORD *)(a1 + 336) = v15;
      }
      else
      {
        *(_BYTE *)(a1 + 312) = 1;
        *(_DWORD *)(a1 + 320) = *(_DWORD *)(a4 + 8);
        *(_DWORD *)(a1 + 324) = 2;
        *(_QWORD *)(a1 + 360) = *(_QWORD *)a4;
        *(_QWORD *)(a1 + 400) = *(_QWORD *)a4;
      }
      sub_1000709BC(a1);
    }
  }
}

void sub_100A0D8A4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  double v12;
  uint8_t *v13;
  uint8_t *v14;
  NSObject *v15;
  int v16;
  int v17;
  double v18;
  uint8_t *v19;
  _DWORD v20[4];
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  if (!*(_BYTE *)(a1 + 72))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,fWorkoutCallback,null", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    LOWORD(v20[0]) = 0;
    v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,fWorkoutCallback,null", v20, 2);
    v14 = v13;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v12);
LABEL_27:
    if (v14 != buf)
      free(v14);
    return;
  }
  if (*a3 == 2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a4 + 112);
      v9 = *(_QWORD *)(a4 + 16);
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2050;
      v26 = v8;
      v27 = 2050;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onMotionStateMediatorNotification,notification,\", \"workoutType\":%{public}ld, \"eventType\":%{public}ld}", buf, 0x26u);
    }
    if (!*(_BYTE *)(a1 + 72))
      sub_10028DF3C();
    v10 = *(_QWORD *)(a1 + 64);
    if (!v10)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, a4);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v15 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v16 = *a3;
    *(_DWORD *)buf = 67240192;
    v22 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "onMotionStateMediatorNotification,unKnownNotification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v17 = *a3;
    v20[0] = 67240192;
    v20[1] = v17;
    v18 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "onMotionStateMediatorNotification,unKnownNotification,%{public}d", v20, 8);
    v14 = v19;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceMotion::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v18);
    goto LABEL_27;
  }
}

unint64_t sub_100A0DC54(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 23 * (a4 - a2)
       + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&a5[-*a4] >> 4)
       - 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&a3[-*a2] >> 4);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x17));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[176 * (v7 % 0x17)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 23 * ((char **)a2 - v9)
        + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&a3[-*a2] >> 4)
        - 0x2E8BA2E8BA2E8BA3 * ((v10 - *v9) >> 4);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x17);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10081F17C(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10081F17C(v24, v6);
      sub_100A0F0A8(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100A0EFD8((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_10081F17C(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x17));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[176 * (v14 % 0x17)];
      v24[0] = v12;
      sub_100A0F254(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100A0F034(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x17));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 176 * (v19 % 0x17);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10081F17C(v24, v11);
  return v24[0].n128_u64[0];
}

__n128 sub_100A0DF14(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100A0F3D0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 304 * (v7 & 0xF);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  v15 = a2[8];
  v16 = a2[9];
  v17 = a2[11];
  *(_OWORD *)(v8 + 160) = a2[10];
  *(_OWORD *)(v8 + 176) = v17;
  *(_OWORD *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 144) = v16;
  v18 = a2[12];
  v19 = a2[13];
  v20 = a2[14];
  *(_QWORD *)(v8 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(v8 + 208) = v19;
  *(_OWORD *)(v8 + 224) = v20;
  *(_OWORD *)(v8 + 192) = v18;
  sub_100A0F6E4(v8 + 248, (uint64_t)a2 + 248);
  result = (__n128)a2[18];
  *(__n128 *)(v8 + 288) = result;
  ++a1[5];
  return result;
}

uint64_t sub_100A0E000(int64x2_t *a1)
{
  sub_100067A50(*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 1) & 0x7FFFFFFFFFFFFFF8))+ 304 * (a1[2].i64[0] & 0xF)+ 248);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
  return sub_100A0FA18((uint64_t)a1, 1);
}

unint64_t sub_100A0E060(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  __int128 **v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v30;
  uint64_t v31;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 0x86BCA1AF286BCA1BLL * ((a5 - *(_QWORD *)a4) >> 4)
       + 2 * (a4 - a2)
       + 0x79435E50D79435E5 * ((a3 - *(_QWORD *)a2) >> 4);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (uint64_t *)(v8 + 8 * (v7 >> 4));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = *v9 + 304 * (a1[4] & 0xFLL);
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 0x86BCA1AF286BCA1BLL * ((a3 - *(_QWORD *)a2) >> 4)
        + 2 * (a2 - (char *)v9)
        + 0x79435E50D79435E5 * ((v10 - *v9) >> 4);
  v30.n128_u64[0] = v8 + 8 * (v7 >> 4);
  v30.n128_u64[1] = v10;
  sub_100A0FA74((uint64_t **)&v30, v11);
  if (v6 >= 1)
  {
    v12 = v30;
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100A0FA74((uint64_t **)&v30, v6);
      sub_100A0FB5C(v9, v10, (uint64_t *)v12.n128_u64[0], v12.n128_i64[1], v30.n128_u64[0], v30.n128_i64[1], &v30);
      v18 = v31;
      while (v10 != v18)
      {
        sub_100067A50(v10 + 248);
        v10 += 304;
        if (v10 - *v9 == 4864)
        {
          v19 = v9[1];
          ++v9;
          v10 = v19;
        }
      }
      v20 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v20;
      while ((sub_100A0FA18((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100A0FA74((uint64_t **)&v30, v6);
      v13 = v30;
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (__int128 **)(v15 + 8 * (v14 >> 4));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[19 * (v14 & 0xF)];
      v30 = v12;
      sub_100A0FE18((__int128 **)v13.n128_u64[0], (__int128 *)v13.n128_u64[1], v16, v17, (uint64_t)&v30);
      v21 = v30.n128_u64[1];
      v22 = a1[1];
      if (a1[2] == v22)
      {
        v24 = 0;
      }
      else
      {
        v23 = a1[5] + a1[4];
        v24 = *(_QWORD *)(v22 + ((v23 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 304 * (v23 & 0xF);
      }
      if (v24 != v30.n128_u64[1])
      {
        v25 = (_QWORD *)v30.n128_u64[0];
        do
        {
          sub_100067A50(v21 + 248);
          v21 += 304;
          if (v21 - *v25 == 4864)
          {
            v26 = v25[1];
            ++v25;
            v21 = v26;
          }
        }
        while (v21 != v24);
      }
      a1[5] -= v6;
      while ((sub_100A0FAF0(a1, 1) & 1) != 0)
        ;
    }
  }
  v27 = a1[1];
  if (a1[2] == v27)
    v28 = 0;
  else
    v28 = *(_QWORD *)(v27 + 8 * (a1[4] >> 4)) + 304 * (a1[4] & 0xFLL);
  v30.n128_u64[0] = v27 + 8 * (a1[4] >> 4);
  v30.n128_u64[1] = v28;
  sub_100A0FA74((uint64_t **)&v30, v11);
  return v30.n128_u64[0];
}

uint64_t sub_100A0E358(uint64_t a1, double a2, double a3)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 1113))
    return 0;
  result = 0;
  if (a2 >= 0.0 && a3 > 0.0)
  {
    result = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 616));
    if ((_DWORD)result)
      return a2 + a3 * -3.0 < 0.0 || a2 < 5.0;
  }
  return result;
}

__n128 sub_100A0E3C8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 432);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 416);
  *(_OWORD *)(a2 + 112) = v2;
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 448);
  v3 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 352);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 400);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 336);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 320);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 sub_100A0E3F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a1 + 1064) = *(_QWORD *)a2;
  if (a1 + 1064 != a2)
    sub_1008AFA64((char *)(a1 + 1072), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 1096) = result;
  return result;
}

void sub_100A0E454(uint64_t a1, char a2)
{
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  *(_BYTE *)(a1 + 1113) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a1 + 1113);
    *(_DWORD *)buf = 67240192;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGAM,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v5 = *(unsigned __int8 *)(a1 + 1113);
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGAM,fIsAirborne,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::feedAirborneActivity(const BOOL)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_100A0E608(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a2 + 16);
  if (v2 > 12)
  {
    if (v2 != 13 && v2 != 18)
      return;
  }
  else if (v2)
  {
    if (v2 != 1)
      return;
LABEL_24:
    *a1 = 0;
    return;
  }
  v4 = *(_QWORD *)(a2 + 112);
  if (v4 != 33 && v4 != 19)
    goto LABEL_24;
  *a1 = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Detected swim-related workout for GNSS time decoded purposes", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Detected swim-related workout for GNSS time decoded purposes", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssIndicatorDelayUntilTimeConvergenceWhenSwimming::feedHkWorkout(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_100A0E7D0(_BYTE *a1, uint64_t a2)
{
  NSObject *v3;
  double v4;
  uint64_t v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  double v17;
  int v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  uint64_t v25;

  if (*a1 && !a1[1])
  {
    if (*(float *)(a2 + 44) >= 0.005)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v3 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(float *)(a2 + 44);
        v5 = *(_QWORD *)(a2 + 96);
        *(_DWORD *)buf = 134349312;
        v23 = v4;
        v24 = 2050;
        v25 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Time not converged in swim-related workout,gpsTimeUncMs,%{public}.2f,hunc,%{public}.2f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102165788);
        v9 = *(float *)(a2 + 44);
        v10 = *(_QWORD *)(a2 + 96);
        v18 = 134349312;
        v19 = v9;
        v20 = 2050;
        v21 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Time not converged in swim-related workout,gpsTimeUncMs,%{public}.2f,hunc,%{public}.2f", &v18, 22);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssIndicatorDelayUntilTimeConvergenceWhenSwimming::adjustPositionUncertainty(GNSS::PerEpochData &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      v6 = *(double *)(a2 + 96);
      if (v6 <= 51.0 && v6 >= 0.1)
      {
        *(_QWORD *)(a2 + 96) = 0x4049800000000000;
        v17 = 51.0 / v6;
        *(float64x2_t *)(a2 + 112) = vmulq_n_f64(*(float64x2_t *)(a2 + 112), 51.0 / v6);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102165788);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(_QWORD *)(a2 + 96);
          *(_DWORD *)buf = 134349312;
          v23 = v17;
          v24 = 2050;
          v25 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adjusting hunc in in swim-related workout,scaling,%{public}.2f,adjHunc,%{public}.2f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102165788);
          v13 = *(_QWORD *)(a2 + 96);
          v18 = 134349312;
          v19 = v17;
          v20 = 2050;
          v21 = v13;
          LODWORD(v16) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Adjusting hunc in in swim-related workout,scaling,%{public}.2f,adjHunc,%{public}.2f", &v18, v16);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssIndicatorDelayUntilTimeConvergenceWhenSwimming::adjustPositionUncertainty(GNSS::PerEpochData &)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
      }
    }
    else
    {
      a1[1] = 1;
    }
  }
}

uint64_t sub_100A0EB88(uint64_t result)
{
  *(_BYTE *)(result + 1) = 0;
  return result;
}

void sub_100A0EB90(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100A0EBBC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100A0EBE8(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 4];
    v7 = (uint64_t)*v6 + 304 * (v5 & 0xF);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 304 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != v8)
    {
      do
      {
        sub_100067A50(v7 + 248);
        v7 += 304;
        if (v7 - (_QWORD)*v6 == 4864)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 8;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_100A0ED18()
{
  operator delete();
}

_QWORD *sub_100A0ED2C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021657D8;
  result[1] = v3;
  return result;
}

uint64_t sub_100A0ED60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021657D8;
  a2[1] = v2;
  return result;
}

double sub_100A0ED7C(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_100A0E3F4(*(_QWORD *)(a1 + 8), a2).n128_u64[0];
  return result;
}

uint64_t sub_100A0ED84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100A0EDC0()
{
}

_QWORD *sub_100A0EDCC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100A0EE64(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100A0EE64(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100A0EFCC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100A0EFD8(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x17)
    a2 = 1;
  if (v2 < 0x2E)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 23;
  }
  return v4 ^ 1u;
}

uint64_t sub_100A0F034(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 23 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x17)
    a2 = 1;
  if (v5 < 0x2E)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100A0F0A8@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100A0F174(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4048;
    }
    v18 = *a1 + 4048;
    v19 = a2;
  }
  sub_100A0F174(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100A0F174@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&a4[-v10] >> 4);
      if (0x2E8BA2E8BA2E8BA3 * ((v11 - a1) >> 4) < v12)
        v12 = 0x2E8BA2E8BA2E8BA3 * ((v11 - a1) >> 4);
      v11 -= 176 * v12;
      a4 -= 176 * v12;
      if (v12)
        result = memmove(a4, v11, 176 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4048);
    }
    if ((char *)(*v6 + 4048) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100A0F254(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4048); ; i = v12 + 4048)
    {
      sub_100A0F2E4(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100A0F2E4(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100A0F2E4@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x2E8BA2E8BA2E8BA3 * ((v10 - __dst + 4048) >> 4);
      v12 = 0x2E8BA2E8BA2E8BA3 * ((v9 - v7) >> 4) >= v11 ? v11 : 0x2E8BA2E8BA2E8BA3 * ((v9 - v7) >> 4);
      if (v12)
        result = memmove(__dst, v7, 176 * v12);
      v7 += 176 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 176 * v12;
    if ((char *)*(v6 - 1) + 4048 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_100A0F3D0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1300uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1300uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1300uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100A0F698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100A0F6E4(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_100A0F758(a1, i + 4, i + 4);
  return a1;
}

void sub_100A0F740(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067A50(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100A0F758(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *i;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (i = *v8; i; i = (uint64_t *)*i)
      {
        v10 = i[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v5)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  sub_100A0F9A0(a1, *a2, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_10012E444(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  i = (uint64_t *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100859588((uint64_t)v20, 0);
  return i;
}

void sub_100A0F988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100859588((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100A0F9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *a3;
  result = sub_1008592FC((uint64_t)(v8 + 3), (uint64_t)(a3 + 2));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100A0FA00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100859588(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100A0FA18(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x10)
    a2 = 1;
  if (v2 < 0x20)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 16;
  }
  return v4 ^ 1u;
}

uint64_t **sub_100A0FA74(uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;

  if (a2)
  {
    v2 = *result;
    v3 = a2 - 0x79435E50D79435E5 * (((uint64_t)result[1] - **result) >> 4);
    if (v3 < 1)
    {
      v7 = 15 - v3;
      v8 = &v2[-(v7 >> 4)];
      *result = v8;
      v5 = *v8;
      v6 = ~(_DWORD)v7 & 0xF;
    }
    else
    {
      v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
      *result = v4;
      v5 = *v4;
      v6 = v3 & 0xF;
    }
    result[1] = (uint64_t *)(v5 + 304 * v6);
  }
  return result;
}

uint64_t sub_100A0FAF0(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 2 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x10)
    a2 = 1;
  if (v5 < 0x20)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100A0FB5C@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t *v12;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 result;
  uint64_t v19;
  __n128 v20;

  if (a1 == a3)
  {
    v17 = a2;
    v16 = a4;
    i = a5;
    v14 = a6;
  }
  else
  {
    v12 = a3 - 1;
    sub_100A0FC44(*a3, a4, a5, a6, &v19);
    v14 = v20.n128_i64[1];
    for (i = (_QWORD *)v20.n128_u64[0]; v12 != a1; i = (_QWORD *)v20.n128_u64[0])
    {
      v15 = *v12--;
      sub_100A0FC44(v15, v15 + 4864, i, v14, &v19);
      v14 = v20.n128_i64[1];
    }
    v16 = *a1 + 4864;
    v17 = a2;
  }
  sub_100A0FC44(v17, v16, i, v14, &v19);
  result = v20;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t sub_100A0FC44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a3;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v9 = *a3;
    for (i = a2; ; i = v12)
    {
      v11 = 0x86BCA1AF286BCA1BLL * ((a4 - v9) >> 4);
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((i - a1) >> 4)) < v11)
        v11 = 0x86BCA1AF286BCA1BLL * ((i - a1) >> 4);
      v12 = i - 304 * v11;
      result = sub_100A0FD24(v12, i, a4);
      if (v12 == a1)
        break;
      v15 = *--v5;
      v9 = v15;
      a4 = v15 + 4864;
    }
    a4 = v14;
    if (*v5 + 4864 == v14)
    {
      v16 = v5[1];
      ++v5;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100A0FD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a2 != a1)
  {
    v5 = a2 - 56;
    v6 = a3 - 56;
    do
    {
      v7 = v5 - 248;
      v8 = *(_OWORD *)(v5 - 248);
      v9 = *(_OWORD *)(v5 - 232);
      v10 = *(_OWORD *)(v5 - 216);
      *(_OWORD *)(v6 - 200) = *(_OWORD *)(v5 - 200);
      *(_OWORD *)(v6 - 216) = v10;
      *(_OWORD *)(v6 - 232) = v9;
      *(_OWORD *)(v6 - 248) = v8;
      v11 = *(_OWORD *)(v5 - 184);
      v12 = *(_OWORD *)(v5 - 168);
      v13 = *(_OWORD *)(v5 - 152);
      *(_OWORD *)(v6 - 136) = *(_OWORD *)(v5 - 136);
      *(_OWORD *)(v6 - 152) = v13;
      *(_OWORD *)(v6 - 168) = v12;
      *(_OWORD *)(v6 - 184) = v11;
      v14 = *(_OWORD *)(v5 - 120);
      v15 = *(_OWORD *)(v5 - 104);
      v16 = *(_OWORD *)(v5 - 88);
      *(_OWORD *)(v6 - 72) = *(_OWORD *)(v5 - 72);
      *(_OWORD *)(v6 - 88) = v16;
      *(_OWORD *)(v6 - 104) = v15;
      *(_OWORD *)(v6 - 120) = v14;
      v17 = *(_OWORD *)(v5 - 56);
      v18 = *(_OWORD *)(v5 - 40);
      v19 = *(_OWORD *)(v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v5 - 8);
      *(_OWORD *)(v6 - 24) = v19;
      *(_OWORD *)(v6 - 40) = v18;
      *(_OWORD *)(v6 - 56) = v17;
      sub_10020B514(v6, (uint64_t *)v5);
      *(_OWORD *)(v6 + 40) = *(_OWORD *)(v5 + 40);
      v5 -= 304;
      v6 -= 304;
    }
    while (v7 != a1);
  }
  return a2;
}

double sub_100A0FE18(__int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  __int128 **v10;
  __int128 *v11;
  double result;
  __int128 *v13;
  __int128 v14;

  v7 = *(uint64_t **)a5;
  v8 = *(_QWORD *)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    sub_100A0FED0(a2, *a1 + 304, v7, v8, &v13);
    v8 = *((_QWORD *)&v14 + 1);
    v7 = (uint64_t *)v14;
    *(_QWORD *)a5 = v14;
    for (*(_QWORD *)(a5 + 8) = v8; v10 != a3; *(_QWORD *)(a5 + 8) = v8)
    {
      v11 = *v10++;
      sub_100A0FED0(v11, v11 + 304, v7, v8, &v13);
      v8 = *((_QWORD *)&v14 + 1);
      v7 = (uint64_t *)v14;
      *(_QWORD *)a5 = v14;
    }
    a2 = *a3;
  }
  sub_100A0FED0(a2, a4, v7, v8, &v13);
  result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  return result;
}

__int128 *sub_100A0FED0@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, __int128 **a5@<X8>)
{
  uint64_t *v5;
  __int128 *result;
  __int128 *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a3;
  result = a1;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v5 = a3 + 1;
    v9 = *a3;
    while (1)
    {
      v10 = 0x86BCA1AF286BCA1BLL * ((v9 - a4 + 4864) >> 4);
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * (v8 - result)) < v10)
        v10 = 0x86BCA1AF286BCA1BLL * (v8 - result);
      result = sub_100A0FFA8(result, &result[19 * v10], a4);
      if (result == v8)
        break;
      v12 = *v5++;
      v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4864 == v11)
      a4 = *v5;
    else
      --v5;
  }
  *a5 = v8;
  a5[1] = (__int128 *)v5;
  a5[2] = (__int128 *)a4;
  return result;
}

__int128 *sub_100A0FFA8(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[3];
    *(_OWORD *)(a3 + 32) = v4[2];
    *(_OWORD *)(a3 + 48) = v8;
    *(_OWORD *)a3 = v6;
    *(_OWORD *)(a3 + 16) = v7;
    v9 = v4[4];
    v10 = v4[5];
    v11 = v4[7];
    *(_OWORD *)(a3 + 96) = v4[6];
    *(_OWORD *)(a3 + 112) = v11;
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 80) = v10;
    v12 = v4[8];
    v13 = v4[9];
    v14 = v4[11];
    *(_OWORD *)(a3 + 160) = v4[10];
    *(_OWORD *)(a3 + 176) = v14;
    *(_OWORD *)(a3 + 128) = v12;
    *(_OWORD *)(a3 + 144) = v13;
    v15 = v4[12];
    v16 = v4[13];
    v17 = v4[14];
    *(_QWORD *)(a3 + 240) = *((_QWORD *)v4 + 30);
    *(_OWORD *)(a3 + 208) = v16;
    *(_OWORD *)(a3 + 224) = v17;
    *(_OWORD *)(a3 + 192) = v15;
    sub_10020B514(a3 + 248, (uint64_t *)v4 + 31);
    *(_OWORD *)(a3 + 288) = v4[18];
    a3 += 304;
    v4 += 19;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_100A10058()
{
  sub_1015A2E04(qword_102306378, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102306378, (void *)&_mh_execute_header);
}

void sub_100A100A0(uint64_t a1)
{
  sub_100A40BC8(a1);
}

void sub_100A101C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v1 + 288);
  *(_QWORD *)(v1 + 288) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100261F44(v1 + 168);
  sub_100261F44(v1 + 152);
  v5 = *v2;
  *v2 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100A41B3C(v1);
  _Unwind_Resume(a1);
}

void sub_100A10224(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  sub_10024455C();
  sub_100A1086C(a4, v7, a2, a3);
}

_QWORD *sub_100A10264(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102165858;
  sub_100A102D8((uint64_t)a1);
  v2 = a1[36];
  a1[36] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100261F44((uint64_t)(a1 + 21));
  sub_100261F44((uint64_t)(a1 + 19));
  v3 = a1[18];
  a1[18] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_100A41B3C((uint64_t)a1);
}

void sub_100A102D8(uint64_t a1)
{
  __CFRunLoopTimer *v2;

  v2 = *(__CFRunLoopTimer **)(a1 + 192);
  if (v2)
  {
    CFRunLoopTimerInvalidate(v2);
    CFRelease(*(CFTypeRef *)(a1 + 192));
    *(_QWORD *)(a1 + 192) = 0;
  }
}

void sub_100A10310(_QWORD *a1)
{
  sub_100A10264(a1);
  operator delete();
}

id sub_100A10334(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021658C0);
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Compass for AOP stopped.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021658C0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "Compass for AOP stopped.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCompass7::stop()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 288) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8), 31);
}

void sub_100A104D4(uint64_t a1)
{
  CFAbsoluteTime Current;
  CFRunLoopTimerRef v3;
  NSObject *v4;
  __CFRunLoop *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  CFRunLoopTimerContext context;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  *(_BYTE *)(a1 + 184) = 0;
  sub_100A102D8(a1);
  context.version = 0;
  context.info = (void *)a1;
  memset(&context.retain, 0, 24);
  Current = CFAbsoluteTimeGetCurrent();
  v3 = CFRunLoopTimerCreate(kCFAllocatorDefault, Current + 600.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)sub_100A10834, &context);
  *(_QWORD *)(a1 + 192) = v3;
  if (v3)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021658C0);
    v4 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v15 = 0x4082C00000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Keeping compass on for %{public}.0f seconds", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021658C0);
      v12 = 134349056;
      v13 = 0x4082C00000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Keeping compass on for %{public}.0f seconds", &v12, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLCompass7::startTurnOffTimer()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_100127B9C();
    v5 = (__CFRunLoop *)sub_1001AD8D0();
    CFRunLoopAddTimer(v5, *(CFRunLoopTimerRef *)(a1 + 192), kCFRunLoopCommonModes);
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021658C0);
    v6 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Could not create turn-off timer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021658C0);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Could not create turn-off timer", &v12, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLCompass7::startTurnOffTimer()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_100015BFC(a1, (double *)(a1 + 264));
  }
}

void sub_100A10834(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 264) <= 0.0)
    sub_100015BFC(a2, (double *)(a2 + 264));
  sub_100A102D8(a2);
}

void sub_100A1086C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _QWORD v13[5];
  BOOL v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (*a3 == 31)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021658C0);
    v6 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_DWORD *)(a4 + 984);
      *(_DWORD *)buf = 67109120;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "visionARSessionState.state,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021658C0);
      v10 = *(_DWORD *)(a4 + 984);
      v15[0] = 67109120;
      v15[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "visionARSessionState.state,%d", v15);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCompass7::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v8 = *(_DWORD *)(a4 + 984) != 1;
    v9 = sub_100127B9C();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100A10A78;
    v13[3] = &unk_1021468D0;
    v13[4] = a1;
    v14 = v8;
    sub_1000A50A8(v9, (uint64_t)v13);
  }
}

uint64_t sub_100A10A78(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(result + 136) != v3)
  {
    *(_BYTE *)(result + 136) = v3;
    return sub_100015BFC(result, (double *)(result + 264));
  }
  return result;
}

void sub_100A10AA0(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100A10ACC()
{
  operator delete();
}

void sub_100A10AE0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100A10B10()
{
  unsigned int v0;
  uint64_t v1;
  _BYTE v3[143];
  BOOL v4;

  sub_1005695B4((uint64_t)v3, CFSTR("com.apple.SOS"), 1, (uint64_t)CFSTR("mobile"));
  v4 = 0;
  v0 = sub_1001E48E4((uint64_t)v3, (uint64_t)CFSTR("SOSNewtonTriggersEmergencySOSKey"), &v4);
  if (v4)
    v1 = v0;
  else
    v1 = 0;
  sub_100569628(v3);
  return v1;
}

void sub_100A10B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100569628(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100A10B98()
{
  unsigned int v0;
  uint64_t v1;
  _BYTE v3[143];
  BOOL v4;

  sub_1005695B4((uint64_t)v3, CFSTR("com.apple.SOS"), 1, (uint64_t)CFSTR("mobile"));
  v4 = 0;
  v0 = sub_1001E48E4((uint64_t)v3, (uint64_t)CFSTR("SOSNewtonWorkoutTriggersEmergencySOSKey"), &v4);
  if (v4)
    v1 = v0;
  else
    v1 = 0;
  sub_100569628(v3);
  return v1;
}

void sub_100A10C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100569628(&a9);
  _Unwind_Resume(a1);
}

void sub_100A10CD8(id a1)
{
  qword_1023063C8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLFallNotifierSilo"));
}

uint64_t sub_100A10D8C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A22830;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023063E8 != -1)
    dispatch_once(&qword_1023063E8, block);
  return qword_102311140;
}

void sub_100A10F2C(id a1)
{
  if (sub_100A10F50())
    byte_1023063D8 = 1;
}

unint64_t sub_100A10F50()
{
  sub_100197040();
  if ((sub_1001B7910() & 0x4000000000) != 0)
    return 1;
  sub_100197040();
  return ((unint64_t)sub_1001B7910() >> 39) & 1;
}

uint64_t sub_100A10FA4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v4 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Simulating event: %{public}lu.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = 134349056;
    v9 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Simulating event: %{public}lu.", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::simulateEvent(CMFallEventType)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_100A1DA68(a1, a2);
}

uint64_t sub_100A11180(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v4 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Changing hgal capture mode: %{public}u.", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Changing hgal capture mode: %{public}u.", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::setHgalCaptureMode(uint8_t)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_BYTE *)(a1 + 109) = a2;
  return sub_100A1DA68(a1, 0);
}

void sub_100A11450(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  NSObject *v45;
  const char *v46;
  uint8_t *v47;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  NSObject *v51;
  NSObject *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t v115;
  NSObject *v116;
  uint64_t v117;
  NSObject *v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  double Current;
  double v123;
  double v124;
  NSObject *v125;
  _QWORD *v126;
  float v127;
  const char *v128;
  uint8_t *v129;
  const char *v130;
  uint8_t *v131;
  const char *v132;
  uint8_t *v133;
  const char *v134;
  uint8_t *v135;
  uint8_t *v136;
  const char *v137;
  uint8_t *v138;
  const char *v139;
  uint8_t *v140;
  const char *v141;
  uint8_t *v142;
  const char *v143;
  uint8_t *v144;
  const char *v145;
  uint8_t *v146;
  const char *v147;
  uint8_t *v148;
  const char *v149;
  uint8_t *v150;
  const char *v151;
  uint8_t *v152;
  const char *v153;
  uint8_t *v154;
  const char *v155;
  uint8_t *v156;
  const char *v157;
  uint8_t *v158;
  const char *v159;
  uint8_t *v160;
  const char *v161;
  uint8_t *v162;
  const char *v163;
  uint8_t *v164;
  const char *v165;
  uint8_t *v166;
  const char *v167;
  uint8_t *v168;
  const char *v169;
  uint8_t *v170;
  const char *v171;
  uint8_t *v172;
  const char *v173;
  uint8_t *v174;
  const char *v175;
  uint8_t *v176;
  const char *v177;
  uint8_t *v178;
  const char *v179;
  uint8_t *v180;
  const char *v181;
  uint8_t *v182;
  const char *v183;
  uint8_t *v184;
  const char *v185;
  uint8_t *v186;
  const char *v187;
  uint8_t *v188;
  const char *v189;
  uint8_t *v190;
  const char *v191;
  uint8_t *v192;
  const char *v193;
  uint8_t *v194;
  const char *v195;
  uint8_t *v196;
  const char *v197;
  uint8_t *v198;
  const char *v199;
  uint8_t *v200;
  const char *v201;
  uint8_t *v202;
  const char *v203;
  uint8_t *v204;
  uint64_t v205;
  unsigned __int8 v206[16];
  uint8_t buf[4];
  int v208;
  __int16 v209;
  const char *v210;
  __int16 v211;
  const char *v212;
  __int16 v213;
  uint64_t v214;
  __int16 v215;
  int v216;
  __int16 v217;
  uint64_t v218;
  __int16 v219;
  _BYTE v220[10];
  _BYTE v221[6];
  _BYTE v222[6];
  _BYTE v223[6];
  _BYTE v224[6];
  int v225;
  __int16 v226;
  int v227;

  v3 = *(_QWORD *)(a2 + 19);
  if (v3)
  {
    v5 = (unsigned __int8 *)(a1 + 6725);
    if (*(_QWORD *)(a1 + 6731) != v3)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v30 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        v31 = *(_QWORD *)(a2 + 19);
        v32 = *(unsigned __int8 *)(a2 + 149);
        v33 = *(_QWORD *)(a2 + 158);
        v34 = *(unsigned __int8 *)(a2 + 13);
        v35 = *(unsigned __int8 *)(a2 + 156);
        v36 = *(unsigned __int8 *)(a2 + 157);
        v37 = *(unsigned __int8 *)(a2 + 190);
        *(_DWORD *)buf = 68291587;
        v208 = 0;
        v209 = 2082;
        v210 = "";
        v211 = 2082;
        v212 = "upstream";
        v213 = 2050;
        v214 = v31;
        v215 = 1025;
        v216 = v32;
        v217 = 2049;
        v218 = v33;
        v219 = 1025;
        *(_DWORD *)v220 = v34;
        *(_WORD *)&v220[4] = 1025;
        *(_DWORD *)&v220[6] = v35;
        *(_WORD *)v221 = 1025;
        *(_DWORD *)&v221[2] = v36;
        *(_WORD *)v222 = 1025;
        *(_DWORD *)&v222[2] = v37;
        *(_WORD *)v223 = 1026;
        *(_DWORD *)&v223[2] = 0;
        *(_WORD *)v224 = 1026;
        *(_DWORD *)&v224[2] = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Notifier - Received anomaly detection subscription request with outdated event\", \"direction\":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u, \"absolute timestamp\":\"%{private}f\", \"state\":%{private}d, \"response\":%{private}d, \"resolution\":%{private}d, \"sosState\":%{private}d, \"current\":%{public}hhd, \"log to healthkit\":%{public}hhd}", buf, 0x5Au);
      }
      v38 = *(_QWORD *)(a1 + 6731);
      v39 = v38 != 0;
      if (!v38)
      {
        v39 = 0;
        *(_QWORD *)(a1 + 6870) = *(_QWORD *)(a2 + 158);
        *(_QWORD *)(a1 + 6731) = *(_QWORD *)(a2 + 19);
        *(_WORD *)(a1 + 6868) = *(_WORD *)(a2 + 156);
        *(_BYTE *)(a1 + 6902) = *(_BYTE *)(a2 + 190);
      }
      v40 = a2;
LABEL_321:
      sub_100A1592C(a1, v40);
      if (*(_BYTE *)(a2 + 157))
      {
        *(_BYTE *)(a1 + 447) = 1;
        sub_100A1FCA4(a1);
      }
      if (v39)
      {
        v206[0] = 0;
        sub_1018BF25C(buf, "AnomalyMotionInternalTest", v206, 0);
        if (!buf[1])
        {
          v29 = a1;
          v28 = a1 + 6712;
          goto LABEL_326;
        }
      }
      return;
    }
    v6 = *(unsigned __int8 *)(a2 + 156);
    if (*(_BYTE *)(a1 + 6868))
      v7 = 1;
    else
      v7 = v6 == 0;
    v8 = !v7;
    v9 = *(unsigned __int8 *)(a1 + 6902);
    v10 = *(unsigned __int8 *)(a2 + 190);
    *(_QWORD *)(a1 + 6870) = *(_QWORD *)(a2 + 158);
    *(_BYTE *)(a1 + 6868) = v6;
    *(_BYTE *)(a1 + 6869) = *(_BYTE *)(a2 + 157);
    *(_BYTE *)(a1 + 6902) = v10;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v11 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 6731);
      v13 = *(unsigned __int8 *)(a1 + 6861);
      v14 = *(_QWORD *)(a1 + 6878);
      v15 = *(_QWORD *)(a1 + 6870);
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a1 + 6868);
      v18 = *(unsigned __int8 *)(a1 + 6869);
      v19 = *(unsigned __int8 *)(a1 + 6902);
      *(_DWORD *)buf = 68291843;
      v208 = 0;
      v209 = 2082;
      v210 = "";
      v211 = 2082;
      v212 = "upstream";
      v213 = 2050;
      v214 = v12;
      v215 = 1025;
      v216 = v13;
      v217 = 2049;
      v218 = v14;
      v219 = 2049;
      *(_QWORD *)v220 = v15;
      *(_WORD *)&v220[8] = 1025;
      *(_DWORD *)v221 = v16;
      *(_WORD *)&v221[4] = 1025;
      *(_DWORD *)v222 = v17;
      *(_WORD *)&v222[4] = 1025;
      *(_DWORD *)v223 = v18;
      *(_WORD *)&v223[4] = 1025;
      *(_DWORD *)v224 = v19;
      *(_WORD *)&v224[4] = 1026;
      v225 = 1;
      v226 = 1026;
      v227 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Notifier - Received anomaly detection subscription request with event\", \"direction\":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"response\":%{private}d, \"resolution\":%{private}d, \"sosState\":%{private}d, \"current\":%{public}hhd, \"log to healthkit\":%{public}hhd}", buf, 0x64u);
    }
    if (!v8)
    {
      if (v9 != v10)
      {
        switch(*(_BYTE *)(a2 + 190))
        {
          case 1:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v41 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Notifier - Received SOS Call initiated Callback", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              *(_WORD *)v206 = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Notifier - Received SOS Call initiated Callback", v206, 2);
              v133 = (uint8_t *)v132;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v132);
              if (v133 != buf)
                free(v133);
            }
            *(CFAbsoluteTime *)(a1 + 6894) = CFAbsoluteTimeGetCurrent();
            break;
          case 2:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v42 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Notifier - Received SOS Call canceled Callback", buf, 2u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_81;
            bzero(buf, 0x65CuLL);
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            *(_WORD *)v206 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Notifier - Received SOS Call canceled Callback", v206, 2, *(_QWORD *)v206);
            goto LABEL_347;
          case 3:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v44 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Notifier - Received SOS Call ended Callback", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              *(_WORD *)v206 = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Notifier - Received SOS Call ended Callback", v206, 2);
              v135 = (uint8_t *)v134;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v134);
              if (v135 != buf)
                free(v135);
            }
            if (*(double *)(a1 + 6894) == 0.0)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v45 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "Notifier - Received a SOS Call Ended Callback with no SOS Call timestamp!", buf, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 17, "Notifier - Received a SOS Call Ended Callback with no SOS Call timestamp!", v206, v205);
                v47 = (uint8_t *)v46;
                sub_100512490("Generic", 1, 0, 0, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v46);
                if (v47 != buf)
                  free(v47);
              }
            }
            else
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v51 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Notifier - Logging SOS Call Placed", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Notifier - Logging SOS Call Placed", v206, v205);
                v156 = (uint8_t *)v155;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v155);
                if (v156 != buf)
                  free(v156);
              }
              sub_100A160D0(a1, *(_QWORD *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x8000000000000000);
            }
            break;
          case 4:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v48 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Notifier - Received SOS Call failed Callback", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              *(_WORD *)v206 = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Notifier - Received SOS Call failed Callback", v206, 2, *(_QWORD *)v206);
LABEL_347:
              v136 = (uint8_t *)v43;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v43);
              if (v136 != buf)
                free(v136);
            }
LABEL_81:
            *(_QWORD *)(a1 + 6894) = 0;
            break;
          default:
            goto LABEL_320;
        }
      }
      goto LABEL_320;
    }
    +[CLFallHealthKitManager recordFallEventInHealthKit:](CLFallHealthKitManager, "recordFallEventInHealthKit:", a1 + 6712);
    if (!sub_100A16088(a1, v20))
    {
LABEL_320:
      v39 = 1;
      v40 = a1 + 6712;
      goto LABEL_321;
    }
    v21 = *v5;
    if (v21 != 1 && v21 != 3)
    {
      if (v21 != 2)
      {
LABEL_142:
        switch(*(_BYTE *)(a1 + 6868))
        {
          case 1:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v67 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseConfirmedActionRequested", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              *(_WORD *)v206 = 0;
              LODWORD(v205) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseConfirmedActionRequested", v206, v205);
              v138 = (uint8_t *)v137;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v137);
              if (v138 != buf)
                free(v138);
            }
            v68 = sub_100BFA9D4();
            sub_100A1F240(v68);
            sub_100A160D0(a1, *(_QWORD *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000000uLL);
            sub_10114A874(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 6731), *(_BYTE *)(a1 + 6868));
            v69 = *(_QWORD *)(a1 + 10656);
            if (v69 > 16)
            {
              if (v69 == 17)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v112 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseConfirmedActionRequested", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseConfirmedActionRequested", v206, v205);
                  v196 = (uint8_t *)v195;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v195);
                  if (v196 != buf)
                    free(v196);
                }
                v113 = sub_100BFA9D4();
                sub_100A1F354(v113);
              }
              else if (v69 == 24)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v92 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseConfirmedActionRequested", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseConfirmedActionRequested", v206, v205);
                  v176 = (uint8_t *)v175;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v175);
                  if (v176 != buf)
                    free(v176);
                }
                v93 = sub_100BFA9D4();
                sub_100A1F3B4(v93);
              }
            }
            else if (v69 == 4)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v102 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseConfirmedActionRequested", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseConfirmedActionRequested", v206, v205);
                v186 = (uint8_t *)v185;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v185);
                if (v186 != buf)
                  free(v186);
              }
              v103 = sub_100BFA9D4();
              sub_100A1F294(v103);
            }
            else if (v69 == 15)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v70 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseConfirmedActionRequested", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseConfirmedActionRequested", v206, v205);
                v166 = (uint8_t *)v165;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v165);
                if (v166 != buf)
                  free(v166);
              }
              v71 = sub_100BFA9D4();
              sub_100A1F2F4(v71);
            }
            break;
          case 2:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v72 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseConfirmedNoActionRequested", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              *(_WORD *)v206 = 0;
              LODWORD(v205) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseConfirmedNoActionRequested", v206, v205);
              v140 = (uint8_t *)v139;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v139);
              if (v140 != buf)
                free(v140);
            }
            v73 = sub_100BFA9D4();
            sub_100A1F414(v73);
            sub_100A160D0(a1, *(_QWORD *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000uLL);
            sub_10114A874(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 6731), *(_BYTE *)(a1 + 6868));
            v74 = *(_QWORD *)(a1 + 10656);
            if (v74 > 16)
            {
              if (v74 == 17)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v114 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseConfirmedNoActionRequested", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseConfirmedNoActionRequested", v206, v205);
                  v198 = (uint8_t *)v197;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v197);
                  if (v198 != buf)
                    free(v198);
                }
                v115 = sub_100BFA9D4();
                sub_100A1F528(v115);
              }
              else if (v74 == 24)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v94 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseConfirmedNoActionRequested", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseConfirmedNoActionRequested", v206, v205);
                  v178 = (uint8_t *)v177;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v177);
                  if (v178 != buf)
                    free(v178);
                }
                v95 = sub_100BFA9D4();
                sub_100A1F588(v95);
              }
            }
            else if (v74 == 4)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v104 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseConfirmedNoActionRequested", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseConfirmedNoActionRequested", v206, v205);
                v188 = (uint8_t *)v187;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v187);
                if (v188 != buf)
                  free(v188);
              }
              v105 = sub_100BFA9D4();
              sub_100A1F468(v105);
            }
            else if (v74 == 15)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v75 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseConfirmedNoActionRequested", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseConfirmedNoActionRequested", v206, v205);
                v168 = (uint8_t *)v167;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v167);
                if (v168 != buf)
                  free(v168);
              }
              v76 = sub_100BFA9D4();
              sub_100A1F4C8(v76);
            }
            break;
          case 3:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v77 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseDismissed", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              *(_WORD *)v206 = 0;
              LODWORD(v205) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseDismissed", v206, v205);
              v142 = (uint8_t *)v141;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v141);
              if (v142 != buf)
                free(v142);
            }
            v78 = sub_100BFA9D4();
            sub_100A1F5E8(v78);
            sub_100A160D0(a1, *(_QWORD *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000uLL);
            sub_10114A874(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 6731), *(_BYTE *)(a1 + 6868));
            v79 = *(_QWORD *)(a1 + 10656);
            if (v79 > 16)
            {
              if (v79 == 17)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v116 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseDismissed", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseDismissed", v206, v205);
                  v200 = (uint8_t *)v199;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v199);
                  if (v200 != buf)
                    free(v200);
                }
                v117 = sub_100BFA9D4();
                sub_100A1F6FC(v117);
              }
              else if (v79 == 24)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v96 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseDismissed", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseDismissed", v206, v205);
                  v180 = (uint8_t *)v179;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v179);
                  if (v180 != buf)
                    free(v180);
                }
                v97 = sub_100BFA9D4();
                sub_100A1F75C(v97);
              }
            }
            else if (v79 == 4)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v106 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseDismissed", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseDismissed", v206, v205);
                v190 = (uint8_t *)v189;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v189);
                if (v190 != buf)
                  free(v190);
              }
              v107 = sub_100BFA9D4();
              sub_100A1F63C(v107);
            }
            else if (v79 == 15)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v80 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseDismissed", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseDismissed", v206, v205);
                v170 = (uint8_t *)v169;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v169);
                if (v170 != buf)
                  free(v170);
              }
              v81 = sub_100BFA9D4();
              sub_100A1F69C(v81);
            }
            break;
          case 4:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v82 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseRejected", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              *(_WORD *)v206 = 0;
              LODWORD(v205) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseRejected", v206, v205);
              v144 = (uint8_t *)v143;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v143);
              if (v144 != buf)
                free(v144);
            }
            v83 = sub_100BFA9D4();
            sub_100A1F7BC(v83);
            sub_100A160D0(a1, *(_QWORD *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000uLL);
            sub_10114A874(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 6731), *(_BYTE *)(a1 + 6868));
            v84 = *(_QWORD *)(a1 + 10656);
            if (v84 > 16)
            {
              if (v84 == 17)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v118 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseRejected", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseRejected", v206, v205);
                  v202 = (uint8_t *)v201;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v201);
                  if (v202 != buf)
                    free(v202);
                }
                v119 = sub_100BFA9D4();
                sub_100A1F8D0(v119);
              }
              else if (v84 == 24)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v98 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseRejected", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseRejected", v206, v205);
                  v182 = (uint8_t *)v181;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v181);
                  if (v182 != buf)
                    free(v182);
                }
                v99 = sub_100BFA9D4();
                sub_100A1F930(v99);
              }
            }
            else if (v84 == 4)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v108 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseRejected", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseRejected", v206, v205);
                v192 = (uint8_t *)v191;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v191);
                if (v192 != buf)
                  free(v192);
              }
              v109 = sub_100BFA9D4();
              sub_100A1F810(v109);
            }
            else if (v84 == 15)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v85 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseRejected", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseRejected", v206, v205);
                v172 = (uint8_t *)v171;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v171);
                if (v172 != buf)
                  free(v172);
              }
              v86 = sub_100BFA9D4();
              sub_100A1F870(v86);
            }
            break;
          case 5:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v87 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseAutomaticActionRequested", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              *(_WORD *)v206 = 0;
              LODWORD(v205) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseAutomaticActionRequested", v206, v205);
              v146 = (uint8_t *)v145;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v145);
              if (v146 != buf)
                free(v146);
            }
            v88 = sub_100BFA9D4();
            sub_100A1F990(v88);
            sub_100A160D0(a1, *(_QWORD *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000000uLL);
            sub_10114A874(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 6731), *(_BYTE *)(a1 + 6868));
            v89 = *(_QWORD *)(a1 + 10656);
            if (v89 > 16)
            {
              if (v89 == 17)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v120 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseAutomaticActionRequested", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseAutomaticActionRequested", v206, v205);
                  v204 = (uint8_t *)v203;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v203);
                  if (v204 != buf)
                    free(v204);
                }
                v121 = sub_100BFA9D4();
                sub_100A1FAA4(v121);
              }
              else if (v89 == 24)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v100 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseAutomaticActionRequested", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  *(_WORD *)v206 = 0;
                  LODWORD(v205) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseAutomaticActionRequested", v206, v205);
                  v184 = (uint8_t *)v183;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v183);
                  if (v184 != buf)
                    free(v184);
                }
                v101 = sub_100BFA9D4();
                sub_100A1FB04(v101);
              }
            }
            else if (v89 == 4)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v110 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseAutomaticActionRequested", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseAutomaticActionRequested", v206, v205);
                v194 = (uint8_t *)v193;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v193);
                if (v194 != buf)
                  free(v194);
              }
              v111 = sub_100BFA9D4();
              sub_100A1F9E4(v111);
            }
            else if (v89 == 15)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v90 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseAutomaticActionRequested", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                *(_WORD *)v206 = 0;
                LODWORD(v205) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseAutomaticActionRequested", v206, v205);
                v174 = (uint8_t *)v173;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v173);
                if (v174 != buf)
                  free(v174);
              }
              v91 = sub_100BFA9D4();
              sub_100A1FA44(v91);
            }
            break;
          default:
            break;
        }
        Current = CFAbsoluteTimeGetCurrent();
        v123 = *(double *)(a1 + 6704);
        v124 = Current - v123;
        if (Current - v123 > 0.0)
        {
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v125 = qword_10229FD98;
          if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289283;
            v208 = 0;
            v209 = 2082;
            v210 = "";
            v211 = 2049;
            v212 = *(const char **)&v124;
            _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Stacking new event duration\", \"duration\":\"%{private}f\"}", buf, 0x1Cu);
          }
          v126 = (_QWORD *)sub_100BFA9D4();
          v127 = v124;
          sub_100BFB07C(v126, v127);
          v123 = *(double *)(a1 + 6704);
        }
        sub_100A1FB64(a1, v123);
        goto LABEL_320;
      }
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v22 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumRecoveryEvents", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        *(_WORD *)v206 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumRecoveryEvents", v206, 2);
        v131 = (uint8_t *)v130;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v130);
        if (v131 != buf)
          free(v131);
      }
      v23 = sub_100BFA9D4();
      sub_100A1EE98(v23);
      v24 = *(_QWORD *)(a1 + 10656);
      if (v24 > 16)
      {
        if (v24 == 17)
        {
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v54 = qword_10229FD98;
          if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningWorkoutRecoveryEvents", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            *(_WORD *)v206 = 0;
            LODWORD(v205) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningWorkoutRecoveryEvents", v206, v205);
            v164 = (uint8_t *)v163;
            sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v163);
            if (v164 != buf)
              free(v164);
          }
          v55 = sub_100BFA9D4();
          sub_100A1EFAC(v55);
        }
        else if (v24 == 24)
        {
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v49 = qword_10229FD98;
          if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingWorkoutRecoveryEvents", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            *(_WORD *)v206 = 0;
            LODWORD(v205) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumHikingWorkoutRecoveryEvents", v206, v205);
            v160 = (uint8_t *)v159;
            sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v159);
            if (v160 != buf)
              free(v160);
          }
          v50 = sub_100BFA9D4();
          sub_100A1F00C(v50);
        }
      }
      else if (v24 == 4)
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v52 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingWorkoutRecoveryEvents", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          *(_WORD *)v206 = 0;
          LODWORD(v205) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingWorkoutRecoveryEvents", v206, v205);
          v162 = (uint8_t *)v161;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v161);
          if (v162 != buf)
            free(v162);
        }
        v53 = sub_100BFA9D4();
        sub_100A1EEEC(v53);
      }
      else if (v24 == 15)
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v25 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingtRecoveryEvents", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          *(_WORD *)v206 = 0;
          LODWORD(v205) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingtRecoveryEvents", v206, v205);
          v158 = (uint8_t *)v157;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v157);
          if (v158 != buf)
            free(v158);
        }
        v26 = sub_100BFA9D4();
        sub_100A1EF4C(v26);
      }
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v56 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumFallAlerts", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      *(_WORD *)v206 = 0;
      LODWORD(v205) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumFallAlerts", v206, v205);
      v129 = (uint8_t *)v128;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v128);
      if (v129 != buf)
        free(v129);
    }
    v57 = sub_100BFA9D4();
    sub_100A1F06C(v57);
    v58 = *(_QWORD *)(a1 + 10656);
    if (v58 > 16)
    {
      if (v58 == 17)
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v65 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningFallAlerts", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          *(_WORD *)v206 = 0;
          LODWORD(v205) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningFallAlerts", v206, v205);
          v154 = (uint8_t *)v153;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v153);
          if (v154 != buf)
            free(v154);
        }
        v66 = sub_100BFA9D4();
        sub_100A1F180(v66);
      }
      else if (v58 == 24)
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v61 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingFallAlerts", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          *(_WORD *)v206 = 0;
          LODWORD(v205) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumHikingFallAlerts", v206, v205);
          v150 = (uint8_t *)v149;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v149);
          if (v150 != buf)
            free(v150);
        }
        v62 = sub_100BFA9D4();
        sub_100A1F1E0(v62);
      }
    }
    else if (v58 == 4)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v63 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingFallAlerts", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        *(_WORD *)v206 = 0;
        LODWORD(v205) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingFallAlerts", v206, v205);
        v152 = (uint8_t *)v151;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v151);
        if (v152 != buf)
          free(v152);
      }
      v64 = sub_100BFA9D4();
      sub_100A1F0C0(v64);
    }
    else if (v58 == 15)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v59 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingFallAlerts", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        *(_WORD *)v206 = 0;
        LODWORD(v205) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingFallAlerts", v206, v205);
        v148 = (uint8_t *)v147;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v147);
        if (v148 != buf)
          free(v148);
      }
      v60 = sub_100BFA9D4();
      sub_100A1F120(v60);
    }
    goto LABEL_142;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v27 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v208 = 0;
    v209 = 2082;
    v210 = "";
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Notifier - Received anomaly detection subscription request with no event\"}", buf, 0x12u);
  }
  v206[0] = 0;
  sub_1018BF25C(buf, "AnomalyMotionInternalTest", v206, 0);
  if (!buf[1])
  {
    v28 = a1 + 6712;
    v29 = a1;
LABEL_326:
    sub_100A1DFE0(v29, v28, 1);
  }
}

void sub_100A14D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A15410()
{
  unsigned __int8 v1;
  unsigned __int8 v2[3];

  v1 = 0;
  sub_1018BF25C(v2, "FallStatsSensorRecordingEnabled", &v1, 0);
  return v2[1];
}

uint64_t sub_100A15448()
{
  char v0;
  char v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unsigned __int8 v8[3];
  BOOL v9;

  v9 = 0;
  LOBYTE(v6) = 0;
  sub_1018BF25C(v8, "AnomalyDetectorEnabledKey", (unsigned __int8 *)&v6, 0);
  sub_1001E4804(&v6);
  v0 = sub_1001E4874(v6, "AnomalyDetectorEnabledKey", &v9);
  v1 = v0;
  v2 = v7;
  if (!v7)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((v1 & 1) != 0)
      return v9;
  }
  else
  {
LABEL_5:
    if ((v0 & 1) != 0)
      return v9;
  }
  sub_100197040();
  if ((sub_1001B7910() & 0x8000000000) == 0)
    return 0;
  result = sub_100A10B10();
  if ((_DWORD)result)
    return sub_100A10B98() ^ 1;
  return result;
}

void sub_100A15520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A15534()
{
  uint64_t result;
  unsigned __int8 v1;
  unsigned __int8 v2[3];

  v1 = 0;
  sub_1018BF25C(v2, "AnomalyDetectorDuringWorkoutEnabledKey", &v1, 0);
  if (v2[0])
    return v2[1] != 0;
  sub_100197040();
  if ((sub_1001B7910() & 0x8000000000) == 0)
    return 0;
  result = sub_100A10B10();
  if ((_DWORD)result)
    return sub_100A10B98();
  return result;
}

void sub_100A158A4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if (!*(_BYTE *)(a2 + 156))
  {
    *(_BYTE *)(a2 + 156) = a3;
    *(_BYTE *)(a2 + 157) = 2;
    sub_100A1592C(a1, a2);
    if (sub_100A16088(a1, v6))
    {
      if ((a3 - 6) <= 6)
        sub_100A160D0(a1, *(_QWORD *)(a2 + 19), *(unsigned __int8 *)(a2 + 149), qword_101C04298[(char)(a3 - 6)]);
    }
  }
}

void sub_100A1592C(uint64_t a1, uint64_t a2)
{
  float v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  std::string *p_p;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  std::string *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  std::string __p;
  _QWORD v24[4];
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  std::string *v35;
  uint8_t buf[4];
  _QWORD v37[204];

  v4 = sub_100A2C2B8((float *)(a2 + 27));
  if (*(_BYTE *)(a2 + 16))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      LODWORD(v37[0]) = 0;
      WORD2(v37[0]) = 2082;
      *(_QWORD *)((char *)v37 + 6) = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received Near Fall event\"}", buf, 0x12u);
    }
  }
  if ((*(_BYTE *)(a2 + 16) | ((LODWORD(v4) & 0x7FFFFFFFu) > 0x7F7FFFFF)) | ((*(unsigned __int8 *)(a2 + 18) | (v4 >= *(float *)(a1 + 7480))) != 0))
  {
    v24[0] = off_102171E20;
    v25 = 3;
    v6 = *(_QWORD *)(a2 + 174);
    v24[1] = *(_QWORD *)(a2 + 158);
    v24[3] = v6;
    v7 = *(_QWORD *)(a2 + 19);
    v26 = *(_QWORD *)(a2 + 4);
    v27 = v7;
    v28 = *(_BYTE *)(a2 + 15);
    v29 = *(_BYTE *)(a2 + 13);
    v30 = *(_WORD *)(a2 + 156);
    v31 = *(_QWORD *)(a2 + 182);
    v32 = *(_BYTE *)(a2 + 190);
    v33 = *(_BYTE *)(a2 + 17);
    memset(&__p, 0, sizeof(__p));
    sub_100B210C0((uint64_t)v24, &__p);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v37[0] = p_p;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v13 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v34 = 136315138;
      v35 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "%s", (const char *)&v34);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallState(const CLFall_Types::ImpactEvent &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if ((sub_100A1CE88(a1) & 1) != 0 || (sub_100A1CF60() & 1) != 0 || sub_100A1CFC8())
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v10 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Logging impact update to logger.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        LOWORD(v34) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging impact update to logger.", &v34, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallState(const CLFall_Types::ImpactEvent &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      objc_msgSend(*(id *)(a1 + 136), "logImpactEventState:", a2);
    }
    LOBYTE(v34) = 0;
    sub_1018BF25C(buf, "FallStatsEnabled", (unsigned __int8 *)&v34, 0);
    if (buf[1])
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v11 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Logging impact update for user studies.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        LOWORD(v34) = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging impact update for user studies.", &v34, v22);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallState(const CLFall_Types::ImpactEvent &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      objc_msgSend(*(id *)(a1 + 176), "logData:", +[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", v24));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v12 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Impact does not meet logging threshold requirement, will disregard state.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Impact does not meet logging threshold requirement, will disregard state.", v24, 2);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallState(const CLFall_Types::ImpactEvent &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
}

void sub_100A16058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A16088(uint64_t a1, uint64_t a2)
{
  if ((sub_100A1CE18(a1, a2) & 1) != 0)
    return 1;
  if (sub_100A1D08C(a1))
    return 0;
  return sub_100A1D030();
}

void sub_100A160D0(uint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  int v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  int v76;
  NSObject *v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t v115;
  NSObject *v116;
  uint64_t v117;
  NSObject *v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  NSObject *v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  NSObject *v133;
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  NSObject *v139;
  const char *v140;
  uint8_t *v141;
  const char *v142;
  uint8_t *v143;
  const char *v144;
  uint8_t *v145;
  const char *v146;
  uint8_t *v147;
  const char *v148;
  uint8_t *v149;
  const char *v150;
  uint8_t *v151;
  const char *v152;
  uint8_t *v153;
  const char *v154;
  uint8_t *v155;
  const char *v156;
  uint8_t *v157;
  const char *v158;
  uint8_t *v159;
  const char *v160;
  uint8_t *v161;
  const char *v162;
  uint8_t *v163;
  const char *v164;
  uint8_t *v165;
  const char *v166;
  uint8_t *v167;
  const char *v168;
  uint8_t *v169;
  const char *v170;
  uint8_t *v171;
  const char *v172;
  uint8_t *v173;
  const char *v174;
  uint8_t *v175;
  const char *v176;
  uint8_t *v177;
  const char *v178;
  uint8_t *v179;
  const char *v180;
  uint8_t *v181;
  const char *v182;
  uint8_t *v183;
  const char *v184;
  uint8_t *v185;
  const char *v186;
  uint8_t *v187;
  const char *v188;
  uint8_t *v189;
  const char *v190;
  uint8_t *v191;
  const char *v192;
  uint8_t *v193;
  const char *v194;
  uint8_t *v195;
  const char *v196;
  uint8_t *v197;
  const char *v198;
  uint8_t *v199;
  const char *v200;
  uint8_t *v201;
  const char *v202;
  uint8_t *v203;
  const char *v204;
  uint8_t *v205;
  const char *v206;
  uint8_t *v207;
  const char *v208;
  uint8_t *v209;
  const char *v210;
  uint8_t *v211;
  const char *v212;
  uint8_t *v213;
  const char *v214;
  uint8_t *v215;
  const char *v216;
  uint8_t *v217;
  const char *v218;
  uint8_t *v219;
  const char *v220;
  uint8_t *v221;
  const char *v222;
  uint8_t *v223;
  const char *v224;
  uint8_t *v225;
  const char *v226;
  uint8_t *v227;
  const char *v228;
  uint8_t *v229;
  const char *v230;
  uint8_t *v231;
  const char *v232;
  uint8_t *v233;
  const char *v234;
  uint8_t *v235;
  const char *v236;
  uint8_t *v237;
  const char *v238;
  uint8_t *v239;
  const char *v240;
  uint8_t *v241;
  const char *v242;
  uint8_t *v243;
  const char *v244;
  uint8_t *v245;
  const char *v246;
  uint8_t *v247;
  const char *v248;
  uint8_t *v249;
  const char *v250;
  uint8_t *v251;
  const char *v252;
  uint8_t *v253;
  const char *v254;
  uint8_t *v255;
  const char *v256;
  uint8_t *v257;
  const char *v258;
  uint8_t *v259;
  const char *v260;
  uint8_t *v261;
  const char *v262;
  uint8_t *v263;
  const char *v264;
  uint8_t *v265;
  const char *v266;
  uint8_t *v267;
  const char *v268;
  uint8_t *v269;
  const char *v270;
  uint8_t *v271;
  const char *v272;
  uint8_t *v273;
  const char *v274;
  uint8_t *v275;
  const char *v276;
  uint8_t *v277;
  const char *v278;
  uint8_t *v279;
  const char *v280;
  uint8_t *v281;
  const char *v282;
  uint8_t *v283;
  const char *v284;
  uint8_t *v285;
  const char *v286;
  uint8_t *v287;
  const char *v288;
  uint8_t *v289;
  const char *v290;
  uint8_t *v291;
  const char *v292;
  uint8_t *v293;
  const char *v294;
  uint8_t *v295;
  const char *v296;
  uint8_t *v297;
  const char *v298;
  uint8_t *v299;
  const char *v300;
  uint8_t *v301;
  const char *v302;
  uint8_t *v303;
  const char *v304;
  uint8_t *v305;
  const char *v306;
  uint8_t *v307;
  const char *v308;
  uint8_t *v309;
  uint64_t v310;
  int v311;
  const char *v312;
  __int16 v313;
  unsigned int v314;
  __int16 v315;
  unint64_t v316;
  uint8_t buf[4];
  const char *v318;
  __int16 v319;
  unsigned int v320;
  __int16 v321;
  unint64_t v322;

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v8 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349568;
    v318 = (const char *)a2;
    v319 = 1026;
    v320 = a3;
    v321 = 2050;
    v322 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received reason for canceling (impact:%{public}llu, operatingMode:%{public}u, reason:0x%{public}llx)", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v311 = 134349568;
    v312 = (const char *)a2;
    v313 = 1026;
    v314 = a3;
    v315 = 2050;
    v316 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Received reason for canceling (impact:%{public}llu, operatingMode:%{public}u, reason:0x%{public}llx)", &v311, 28);
    v141 = (uint8_t *)v140;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v140);
    if (v141 != buf)
      free(v141);
  }
  if ((a4 & 1) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v9 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "ImpactStart";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "ImpactStart";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v143 = (uint8_t *)v142;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v142);
      if (v143 != buf)
        free(v143);
    }
  }
  if ((a4 & 2) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v10 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "ImpactReplacedBecauseOfNewImpact";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "ImpactReplacedBecauseOfNewImpact";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v145 = (uint8_t *)v144;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v144);
      if (v145 != buf)
        free(v145);
    }
  }
  if ((a4 & 0x20) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v11 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "ImpactCanceledBecauseOfMaxAccelNorm";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "ImpactCanceledBecauseOfMaxAccelNorm";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v147 = (uint8_t *)v146;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v146);
      if (v147 != buf)
        free(v147);
    }
  }
  if ((a4 & 0x40) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v12 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "ImpactCanceledBecauseOfOtherHardThresholds";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "ImpactCanceledBecauseOfOtherHardThresholds";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v149 = (uint8_t *)v148;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v148);
      if (v149 != buf)
        free(v149);
    }
  }
  if ((a4 & 0x80) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v13 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "ImpactCanceledBecauseOfMultiPeaks";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "ImpactCanceledBecauseOfMultiPeaks";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v151 = (uint8_t *)v150;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v150);
      if (v151 != buf)
        free(v151);
    }
  }
  if ((a4 & 0x100) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v14 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "ImpactCanceledBecauseOfNaiveBayes";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "ImpactCanceledBecauseOfNaiveBayes";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v153 = (uint8_t *)v152;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v152);
      if (v153 != buf)
        free(v153);
    }
  }
  if ((a4 & 0x200) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v15 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "ImpactCanceledBecauseOfCyclingImpactThresholds";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "ImpactCanceledBecauseOfCyclingImpactThresholds";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v155 = (uint8_t *)v154;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v154);
      if (v155 != buf)
        free(v155);
    }
  }
  if ((a4 & 0x400) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v16 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "ImpactCanceledBecauseOfExistingAlert";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "ImpactCanceledBecauseOfExistingAlert";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v157 = (uint8_t *)v156;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v156);
      if (v157 != buf)
        free(v157);
    }
  }
  if ((a4 & 0x800) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v17 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "ImpactCanceledBecauseOfDisabledStateMachine";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "ImpactCanceledBecauseOfDisabledStateMachine";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v159 = (uint8_t *)v158;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v158);
      if (v159 != buf)
        free(v159);
    }
  }
  if ((a4 & 0x100000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v18 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfHighFrequencyFFT";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfHighFrequencyFFT";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v161 = (uint8_t *)v160;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v160);
      if (v161 != buf)
        free(v161);
    }
  }
  if ((a4 & 0x200000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v19 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfLowFrequencyFFT";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfLowFrequencyFFT";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v163 = (uint8_t *)v162;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v162);
      if (v163 != buf)
        free(v163);
    }
  }
  if ((a4 & 0x400000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v20 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfDecimatedLowFrequencyFFT";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfDecimatedLowFrequencyFFT";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v165 = (uint8_t *)v164;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v164);
      if (v165 != buf)
        free(v165);
    }
  }
  if ((a4 & 0x800000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v21 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfFFT";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfFFT";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v167 = (uint8_t *)v166;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v166);
      if (v167 != buf)
        free(v167);
    }
  }
  if ((a4 & 0x1000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v22 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfPeaksIQR";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfPeaksIQR";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v169 = (uint8_t *)v168;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v168);
      if (v169 != buf)
        free(v169);
    }
  }
  if ((a4 & 0x2000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v23 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfOffBody";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfOffBody";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v171 = (uint8_t *)v170;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v170);
      if (v171 != buf)
        free(v171);
    }
  }
  if ((a4 & 0x4000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v24 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfRepetitiveMotion";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfRepetitiveMotion";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v173 = (uint8_t *)v172;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v172);
      if (v173 != buf)
        free(v173);
    }
  }
  if ((a4 & 0x8000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v25 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfAbsenceOfQuiessence";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfAbsenceOfQuiessence";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v175 = (uint8_t *)v174;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v174);
      if (v175 != buf)
        free(v175);
    }
  }
  if ((a4 & 0x10000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v26 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfOffWristPre";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfOffWristPre";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v177 = (uint8_t *)v176;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v176);
      if (v177 != buf)
        free(v177);
    }
  }
  if ((a4 & 0x20000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v27 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfOffWristPost";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfOffWristPost";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v179 = (uint8_t *)v178;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v178);
      if (v179 != buf)
        free(v179);
    }
  }
  if ((a4 & 0x40000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v28 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfFeatureDisabled";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfFeatureDisabled";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v181 = (uint8_t *)v180;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v180);
      if (v181 != buf)
        free(v181);
    }
  }
  if ((a4 & 0x80000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v29 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfOnCharger";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfOnCharger";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v183 = (uint8_t *)v182;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v182);
      if (v183 != buf)
        free(v183);
    }
  }
  if ((a4 & 0x100000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v30 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfAlreadyGatedBefore";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfAlreadyGatedBefore";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v185 = (uint8_t *)v184;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v184);
      if (v185 != buf)
        free(v185);
    }
  }
  if ((a4 & 0x200000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v31 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfSimilarPeaks";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfSimilarPeaks";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v187 = (uint8_t *)v186;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v186);
      if (v187 != buf)
        free(v187);
    }
  }
  if ((a4 & 0x400000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v32 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfLockedNoMotionBeforeImpact";
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfLockedNoMotionBeforeImpact";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v189 = (uint8_t *)v188;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v188);
      if (v189 != buf)
        free(v189);
    }
  }
  if ((a4 & 0x800000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v33 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfReferee";
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfReferee";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v191 = (uint8_t *)v190;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v190);
      if (v191 != buf)
        free(v191);
    }
  }
  if ((a4 & 0x1000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v34 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseStand";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseStand";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v193 = (uint8_t *)v192;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v192);
      if (v193 != buf)
        free(v193);
    }
  }
  if ((a4 & 0x2000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v35 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseActive";
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseActive";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v195 = (uint8_t *)v194;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v194);
      if (v195 != buf)
        free(v195);
    }
  }
  if ((a4 & 0x4000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v36 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseSteps";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseSteps";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v197 = (uint8_t *)v196;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v196);
      if (v197 != buf)
        free(v197);
    }
  }
  if ((a4 & 0x8000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v37 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfDistanceTraveledPostImpact";
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfDistanceTraveledPostImpact";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v199 = (uint8_t *)v198;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v198);
      if (v199 != buf)
        free(v199);
    }
  }
  if ((a4 & 0x10000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v38 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "AlertCanceledBecauseOfDistanceCyclingPostImpact";
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "AlertCanceledBecauseOfDistanceCyclingPostImpact";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v201 = (uint8_t *)v200;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v200);
      if (v201 != buf)
        free(v201);
    }
  }
  if ((a4 & 0x800000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v39 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "RecoveryCanceledBecauseOfReferee";
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "RecoveryCanceledBecauseOfReferee";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v203 = (uint8_t *)v202;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v202);
      if (v203 != buf)
        free(v203);
    }
  }
  if ((a4 & 0x4000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v40 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCanceledBecauseUserResponse";
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCanceledBecauseUserResponse";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v205 = (uint8_t *)v204;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v204);
      if (v205 != buf)
        free(v205);
    }
  }
  if ((a4 & 0x8000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v41 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCanceledBecauseOffWrist";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCanceledBecauseOffWrist";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v207 = (uint8_t *)v206;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v206);
      if (v207 != buf)
        free(v207);
    }
  }
  if ((a4 & 0x10000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v42 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCanceledBecauseStand";
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCanceledBecauseStand";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v209 = (uint8_t *)v208;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v208);
      if (v209 != buf)
        free(v209);
    }
  }
  if ((a4 & 0x20000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v43 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCanceledBecauseActive";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCanceledBecauseActive";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v211 = (uint8_t *)v210;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v210);
      if (v211 != buf)
        free(v211);
    }
  }
  if ((a4 & 0x40000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v44 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCanceledBecauseSteps";
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCanceledBecauseSteps";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v213 = (uint8_t *)v212;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v212);
      if (v213 != buf)
        free(v213);
    }
  }
  if ((a4 & 0x80000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v45 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCanceledBecauseAbsenceOfLongLie";
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCanceledBecauseAbsenceOfLongLie";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v215 = (uint8_t *)v214;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v214);
      if (v215 != buf)
        free(v215);
    }
  }
  if ((a4 & 0x100000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v46 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCanceledBecauseOfReferee";
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCanceledBecauseOfReferee";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v217 = (uint8_t *)v216;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v216);
      if (v217 != buf)
        free(v217);
    }
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v47 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCallConsidered";
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCallConsidered";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v219 = (uint8_t *)v218;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v218);
      if (v219 != buf)
        free(v219);
    }
  }
  if ((a4 & 0x4000000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v48 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCallScheduled";
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCallScheduled";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v221 = (uint8_t *)v220;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v220);
      if (v221 != buf)
        free(v221);
    }
  }
  if ((a4 & 0x8000000000000000) != 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v49 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v318 = "SOSCallPlaced";
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v311 = 136315138;
      v312 = "SOSCallPlaced";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "         reason: %s", (const char *)&v311);
      v225 = (uint8_t *)v224;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v224);
      if (v225 != buf)
        free(v225);
    }
  }
  if (a3 < 4 || a3 == 255)
  {
    sub_10114A1A0(*(_QWORD *)(a1 + 128), a2, a4);
    if (!sub_100A16088(a1, v50))
      return;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v51 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Logging reason for canceling in AWD", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v311) = 0;
      LODWORD(v310) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging reason for canceling in AWD", &v311, v310);
      v223 = (uint8_t *)v222;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v222);
      if (v223 != buf)
        free(v223);
    }
    v52 = (a4 >> 1) & 1;
    if ((a4 & 2) != 0)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v54 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactReplacedBecauseOfNewImpact", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        LOWORD(v311) = 0;
        LODWORD(v310) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumImpactReplacedBecauseOfNewImpact", &v311, v310);
        v235 = (uint8_t *)v234;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v234);
        if (v235 != buf)
          free(v235);
      }
      v55 = sub_100BFA9D4();
      sub_100A2F258(v55);
      if ((a4 & 0x20) == 0)
      {
LABEL_262:
        if ((a4 & 0x40) == 0)
          goto LABEL_263;
        goto LABEL_284;
      }
    }
    else if ((a4 & 0x20) == 0)
    {
      goto LABEL_262;
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v56 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfMaxAccelNorm", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v311) = 0;
      LODWORD(v310) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfMaxAccelNorm", &v311, v310);
      v237 = (uint8_t *)v236;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v236);
      if (v237 != buf)
        free(v237);
    }
    v57 = sub_100BFA9D4();
    sub_100A2F2AC(v57);
    LODWORD(v52) = 1;
    if ((a4 & 0x40) == 0)
    {
LABEL_263:
      if ((a4 & 0x80) == 0)
        goto LABEL_264;
      goto LABEL_290;
    }
LABEL_284:
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v58 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfOtherHardThresholds", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v311) = 0;
      LODWORD(v310) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfOtherHardThresholds", &v311, v310);
      v239 = (uint8_t *)v238;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v238);
      if (v239 != buf)
        free(v239);
    }
    v59 = sub_100BFA9D4();
    sub_100A2F308(v59);
    LODWORD(v52) = 1;
    if ((a4 & 0x80) == 0)
    {
LABEL_264:
      if ((a4 & 0x100) == 0)
        goto LABEL_265;
      goto LABEL_296;
    }
LABEL_290:
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v60 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfMultiPeaks", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v311) = 0;
      LODWORD(v310) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfMultiPeaks", &v311, v310);
      v241 = (uint8_t *)v240;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v240);
      if (v241 != buf)
        free(v241);
    }
    v61 = sub_100BFA9D4();
    sub_100A2F364(v61);
    LODWORD(v52) = 1;
    if ((a4 & 0x100) == 0)
    {
LABEL_265:
      if ((a4 & 0x400) == 0)
        goto LABEL_266;
      goto LABEL_302;
    }
LABEL_296:
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v62 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfNaiveBayes", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v311) = 0;
      LODWORD(v310) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfNaiveBayes", &v311, v310);
      v243 = (uint8_t *)v242;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v242);
      if (v243 != buf)
        free(v243);
    }
    v63 = sub_100BFA9D4();
    sub_100A2F3C0(v63);
    LODWORD(v52) = 1;
    if ((a4 & 0x400) == 0)
    {
LABEL_266:
      if ((a4 & 0x200) == 0)
        goto LABEL_267;
      goto LABEL_308;
    }
LABEL_302:
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v64 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfExistingAlert", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v311) = 0;
      LODWORD(v310) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfExistingAlert", &v311, v310);
      v245 = (uint8_t *)v244;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v244);
      if (v245 != buf)
        free(v245);
    }
    v65 = sub_100BFA9D4();
    sub_100A2F414(v65);
    LODWORD(v52) = 1;
    if ((a4 & 0x200) == 0)
    {
LABEL_267:
      if ((a4 & 0x800) == 0)
      {
        if (!(_DWORD)v52)
        {
          if ((a4 & 0x100000) == 0)
            goto LABEL_270;
          goto LABEL_326;
        }
LABEL_320:
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v70 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledAggregate", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          LOWORD(v311) = 0;
          LODWORD(v310) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledAggregate", &v311, v310);
          v227 = (uint8_t *)v226;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v226);
          if (v227 != buf)
            free(v227);
        }
        v71 = sub_100BFA9D4();
        sub_100A2F520(v71);
        if ((a4 & 0x100000) == 0)
        {
LABEL_270:
          v53 = 0;
          if ((a4 & 0x200000) == 0)
            goto LABEL_338;
          goto LABEL_332;
        }
LABEL_326:
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v72 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfHighFrequencyFFT", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          LOWORD(v311) = 0;
          LODWORD(v310) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfHighFrequencyFFT", &v311, v310);
          v251 = (uint8_t *)v250;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v250);
          if (v251 != buf)
            free(v251);
        }
        v73 = sub_100BFA9D4();
        sub_100A2F57C(v73);
        v53 = 1;
        if ((a4 & 0x200000) == 0)
        {
LABEL_338:
          if ((a4 & 0x400000) != 0)
          {
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v77 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfDecimatedLowFrequencyFFT", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              LOWORD(v311) = 0;
              LODWORD(v310) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfDecimatedLowFrequencyFFT", &v311, v310);
              v255 = (uint8_t *)v254;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v254);
              if (v255 != buf)
                free(v255);
            }
            v78 = sub_100BFA9D4();
            sub_100A2F634(v78);
            v53 = 1;
            if ((a4 & 0x800000) == 0)
            {
LABEL_340:
              v76 = 0;
              if ((a4 & 0x1000000) == 0)
                goto LABEL_360;
              goto LABEL_354;
            }
          }
          else if ((a4 & 0x800000) == 0)
          {
            goto LABEL_340;
          }
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v79 = qword_10229FD98;
          if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfFFT", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            LOWORD(v311) = 0;
            LODWORD(v310) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfFFT", &v311, v310);
            v257 = (uint8_t *)v256;
            sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v256);
            if (v257 != buf)
              free(v257);
          }
          v80 = sub_100BFA9D4();
          sub_100A2F690(v80);
          v76 = 1;
          if ((a4 & 0x1000000) == 0)
          {
LABEL_360:
            if ((a4 & 0x2000000) != 0)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v83 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOffBody", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOffBody", &v311, v310);
                v261 = (uint8_t *)v260;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v260);
                if (v261 != buf)
                  free(v261);
              }
              v84 = sub_100BFA9D4();
              sub_100A2F740(v84);
              v76 = 1;
              if ((a4 & 0x4000000) == 0)
              {
LABEL_362:
                if ((a4 & 0x8000000) == 0)
                  goto LABEL_363;
                goto LABEL_378;
              }
            }
            else if ((a4 & 0x4000000) == 0)
            {
              goto LABEL_362;
            }
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v85 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfRepetitiveMotion", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              LOWORD(v311) = 0;
              LODWORD(v310) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfRepetitiveMotion", &v311, v310);
              v263 = (uint8_t *)v262;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v262);
              if (v263 != buf)
                free(v263);
            }
            v86 = sub_100BFA9D4();
            sub_100A2F79C(v86);
            v76 = 1;
            if ((a4 & 0x8000000) == 0)
            {
LABEL_363:
              if ((a4 & 0x10000000) == 0)
                goto LABEL_364;
              goto LABEL_384;
            }
LABEL_378:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v87 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfAbsenceOfQuiessence", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              LOWORD(v311) = 0;
              LODWORD(v310) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfAbsenceOfQuiessence", &v311, v310);
              v265 = (uint8_t *)v264;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v264);
              if (v265 != buf)
                free(v265);
            }
            v88 = sub_100BFA9D4();
            sub_100A2F7F8(v88);
            v76 = 1;
            if ((a4 & 0x10000000) == 0)
            {
LABEL_364:
              if ((a4 & 0x20000000) == 0)
                goto LABEL_396;
              goto LABEL_390;
            }
LABEL_384:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v89 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOffWristPre", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              LOWORD(v311) = 0;
              LODWORD(v310) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOffWristPre", &v311, v310);
              v267 = (uint8_t *)v266;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v266);
              if (v267 != buf)
                free(v267);
            }
            v90 = sub_100BFA9D4();
            sub_100A2F84C(v90);
            v76 = 1;
            if ((a4 & 0x20000000) == 0)
            {
LABEL_396:
              if (v76 | v53)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v93 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledAggregate", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  LOWORD(v311) = 0;
                  LODWORD(v310) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledAggregate", &v311, v310);
                  v233 = (uint8_t *)v232;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v232);
                  if (v233 != buf)
                    free(v233);
                }
                v94 = sub_100BFA9D4();
                sub_100A2F904(v94);
              }
              v95 = (a4 >> 30) & 1;
              if ((a4 & 0x40000000) != 0)
              {
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v96 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfFeatureDisabled", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  LOWORD(v311) = 0;
                  LODWORD(v310) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfFeatureDisabled", &v311, v310);
                  v271 = (uint8_t *)v270;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v270);
                  if (v271 != buf)
                    free(v271);
                }
                v97 = sub_100BFA9D4();
                sub_100A2F960(v97);
                if ((a4 & 0x80000000) == 0)
                {
LABEL_405:
                  if ((a4 & 0x100000000) == 0)
                    goto LABEL_406;
                  goto LABEL_429;
                }
              }
              else if ((a4 & 0x80000000) == 0)
              {
                goto LABEL_405;
              }
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v98 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOnCharger", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOnCharger", &v311, v310);
                v273 = (uint8_t *)v272;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v272);
                if (v273 != buf)
                  free(v273);
              }
              v99 = sub_100BFA9D4();
              sub_100A2F9B4(v99);
              LODWORD(v95) = 1;
              if ((a4 & 0x100000000) == 0)
              {
LABEL_406:
                if ((a4 & 0x200000000) == 0)
                  goto LABEL_407;
                goto LABEL_435;
              }
LABEL_429:
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v100 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfAlreadyGatedBefore", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfAlreadyGatedBefore", &v311, v310);
                v275 = (uint8_t *)v274;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v274);
                if (v275 != buf)
                  free(v275);
              }
              v101 = sub_100BFA9D4();
              sub_100A2FA10(v101);
              LODWORD(v95) = 1;
              if ((a4 & 0x200000000) == 0)
              {
LABEL_407:
                if ((a4 & 0x400000000) == 0)
                  goto LABEL_408;
                goto LABEL_441;
              }
LABEL_435:
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v102 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfSimilarPeaks", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfSimilarPeaks", &v311, v310);
                v277 = (uint8_t *)v276;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v276);
                if (v277 != buf)
                  free(v277);
              }
              v103 = sub_100BFA9D4();
              sub_100A2FA6C(v103);
              LODWORD(v95) = 1;
              if ((a4 & 0x400000000) == 0)
              {
LABEL_408:
                if ((a4 & 0x800000000) == 0)
                  goto LABEL_409;
                goto LABEL_447;
              }
LABEL_441:
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v104 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfLockedNoMotionBeforeImpact", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfLockedNoMotionBeforeImpact", &v311, v310);
                v279 = (uint8_t *)v278;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v278);
                if (v279 != buf)
                  free(v279);
              }
              v105 = sub_100BFA9D4();
              sub_100A2FAC8(v105);
              LODWORD(v95) = 1;
              if ((a4 & 0x800000000) == 0)
              {
LABEL_409:
                if ((a4 & 0x1000000000) == 0)
                  goto LABEL_410;
                goto LABEL_453;
              }
LABEL_447:
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v106 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfReferee", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfReferee", &v311, v310);
                v281 = (uint8_t *)v280;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v280);
                if (v281 != buf)
                  free(v281);
              }
              v107 = sub_100BFA9D4();
              sub_100A2FB1C(v107);
              LODWORD(v95) = 1;
              if ((a4 & 0x1000000000) == 0)
              {
LABEL_410:
                if ((a4 & 0x2000000000) == 0)
                  goto LABEL_411;
                goto LABEL_459;
              }
LABEL_453:
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v108 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseStand", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseStand", &v311, v310);
                v283 = (uint8_t *)v282;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v282);
                if (v283 != buf)
                  free(v283);
              }
              v109 = sub_100BFA9D4();
              sub_100A2FB78(v109);
              LODWORD(v95) = 1;
              if ((a4 & 0x2000000000) == 0)
              {
LABEL_411:
                if ((a4 & 0x4000000000) == 0)
                  goto LABEL_412;
                goto LABEL_465;
              }
LABEL_459:
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v110 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseActive", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseActive", &v311, v310);
                v285 = (uint8_t *)v284;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v284);
                if (v285 != buf)
                  free(v285);
              }
              v111 = sub_100BFA9D4();
              sub_100A2FBD4(v111);
              LODWORD(v95) = 1;
              if ((a4 & 0x4000000000) == 0)
              {
LABEL_412:
                if ((a4 & 0x8000000000) == 0)
                  goto LABEL_413;
                goto LABEL_471;
              }
LABEL_465:
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v112 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseSteps", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseSteps", &v311, v310);
                v287 = (uint8_t *)v286;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v286);
                if (v287 != buf)
                  free(v287);
              }
              v113 = sub_100BFA9D4();
              sub_100A2FC30(v113);
              LODWORD(v95) = 1;
              if ((a4 & 0x8000000000) == 0)
              {
LABEL_413:
                if ((a4 & 0x10000000000) == 0)
                {
                  if (!(_DWORD)v95)
                  {
                    if ((a4 & 0x800000000000) == 0)
                      goto LABEL_500;
                    goto LABEL_489;
                  }
LABEL_483:
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  v118 = qword_10229FD98;
                  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledOtherAggregate", buf, 2u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_10229FD90 != -1)
                      dispatch_once(&qword_10229FD90, &stru_102165C08);
                    LOWORD(v311) = 0;
                    LODWORD(v310) = 2;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledOtherAggregate", &v311, v310);
                    v229 = (uint8_t *)v228;
                    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v228);
                    if (v229 != buf)
                      free(v229);
                  }
                  v119 = sub_100BFA9D4();
                  sub_100A2FD3C(v119);
                  if ((a4 & 0x800000000000) == 0)
                  {
LABEL_500:
                    v124 = (a4 >> 50) & 1;
                    if ((a4 & 0x4000000000000) != 0)
                    {
                      if (qword_10229FD90 != -1)
                        dispatch_once(&qword_10229FD90, &stru_102165C08);
                      v125 = qword_10229FD98;
                      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseUserResponse", buf, 2u);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_10229FD90 != -1)
                          dispatch_once(&qword_10229FD90, &stru_102165C08);
                        LOWORD(v311) = 0;
                        LODWORD(v310) = 2;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseUserResponse", &v311, v310);
                        v297 = (uint8_t *)v296;
                        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v296);
                        if (v297 != buf)
                          free(v297);
                      }
                      v126 = sub_100BFA9D4();
                      sub_100A2FE48(v126);
                      if ((a4 & 0x8000000000000) == 0)
                      {
LABEL_502:
                        if ((a4 & 0x10000000000000) == 0)
                          goto LABEL_503;
                        goto LABEL_520;
                      }
                    }
                    else if ((a4 & 0x8000000000000) == 0)
                    {
                      goto LABEL_502;
                    }
                    if (qword_10229FD90 != -1)
                      dispatch_once(&qword_10229FD90, &stru_102165C08);
                    v127 = qword_10229FD98;
                    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseOffWrist", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_10229FD90 != -1)
                        dispatch_once(&qword_10229FD90, &stru_102165C08);
                      LOWORD(v311) = 0;
                      LODWORD(v310) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseOffWrist", &v311, v310);
                      v299 = (uint8_t *)v298;
                      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v298);
                      if (v299 != buf)
                        free(v299);
                    }
                    v128 = sub_100BFA9D4();
                    sub_100A2FEA4(v128);
                    LODWORD(v124) = 1;
                    if ((a4 & 0x10000000000000) == 0)
                    {
LABEL_503:
                      if ((a4 & 0x20000000000000) == 0)
                        goto LABEL_504;
                      goto LABEL_526;
                    }
LABEL_520:
                    if (qword_10229FD90 != -1)
                      dispatch_once(&qword_10229FD90, &stru_102165C08);
                    v129 = qword_10229FD98;
                    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseStand", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_10229FD90 != -1)
                        dispatch_once(&qword_10229FD90, &stru_102165C08);
                      LOWORD(v311) = 0;
                      LODWORD(v310) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseStand", &v311, v310);
                      v301 = (uint8_t *)v300;
                      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v300);
                      if (v301 != buf)
                        free(v301);
                    }
                    v130 = sub_100BFA9D4();
                    sub_100A2FF00(v130);
                    LODWORD(v124) = 1;
                    if ((a4 & 0x20000000000000) == 0)
                    {
LABEL_504:
                      if ((a4 & 0x40000000000000) == 0)
                        goto LABEL_505;
                      goto LABEL_532;
                    }
LABEL_526:
                    if (qword_10229FD90 != -1)
                      dispatch_once(&qword_10229FD90, &stru_102165C08);
                    v131 = qword_10229FD98;
                    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseActive", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_10229FD90 != -1)
                        dispatch_once(&qword_10229FD90, &stru_102165C08);
                      LOWORD(v311) = 0;
                      LODWORD(v310) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseActive", &v311, v310);
                      v303 = (uint8_t *)v302;
                      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v302);
                      if (v303 != buf)
                        free(v303);
                    }
                    v132 = sub_100BFA9D4();
                    sub_100A2FF54(v132);
                    LODWORD(v124) = 1;
                    if ((a4 & 0x40000000000000) == 0)
                    {
LABEL_505:
                      if ((a4 & 0x80000000000000) == 0)
                      {
                        if (!(_DWORD)v124)
                          return;
                        goto LABEL_544;
                      }
LABEL_538:
                      if (qword_10229FD90 != -1)
                        dispatch_once(&qword_10229FD90, &stru_102165C08);
                      v135 = qword_10229FD98;
                      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseAbsenceOfLongLie", buf, 2u);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_10229FD90 != -1)
                          dispatch_once(&qword_10229FD90, &stru_102165C08);
                        LOWORD(v311) = 0;
                        LODWORD(v310) = 2;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseAbsenceOfLongLie", &v311, v310);
                        v307 = (uint8_t *)v306;
                        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v306);
                        if (v307 != buf)
                          free(v307);
                      }
                      v136 = sub_100BFA9D4();
                      sub_100A3000C(v136);
LABEL_544:
                      if (qword_10229FD90 != -1)
                        dispatch_once(&qword_10229FD90, &stru_102165C08);
                      v137 = qword_10229FD98;
                      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledAggregate", buf, 2u);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_10229FD90 != -1)
                          dispatch_once(&qword_10229FD90, &stru_102165C08);
                        LOWORD(v311) = 0;
                        LODWORD(v310) = 2;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledAggregate", &v311, v310);
                        v231 = (uint8_t *)v230;
                        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v230);
                        if (v231 != buf)
                          free(v231);
                      }
                      v138 = sub_100BFA9D4();
                      sub_100A30068(v138);
                      return;
                    }
LABEL_532:
                    if (qword_10229FD90 != -1)
                      dispatch_once(&qword_10229FD90, &stru_102165C08);
                    v133 = qword_10229FD98;
                    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseSteps", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_10229FD90 != -1)
                        dispatch_once(&qword_10229FD90, &stru_102165C08);
                      LOWORD(v311) = 0;
                      LODWORD(v310) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseSteps", &v311, v310);
                      v305 = (uint8_t *)v304;
                      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v304);
                      if (v305 != buf)
                        free(v305);
                    }
                    v134 = sub_100BFA9D4();
                    sub_100A2FFB0(v134);
                    if ((a4 & 0x80000000000000) == 0)
                      goto LABEL_544;
                    goto LABEL_538;
                  }
LABEL_489:
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  v120 = qword_10229FD98;
                  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumRecoveryCanceledBecauseOfReferee", buf, 2u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_10229FD90 != -1)
                      dispatch_once(&qword_10229FD90, &stru_102165C08);
                    LOWORD(v311) = 0;
                    LODWORD(v310) = 2;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumRecoveryCanceledBecauseOfReferee", &v311, v310);
                    v293 = (uint8_t *)v292;
                    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v292);
                    if (v293 != buf)
                      free(v293);
                  }
                  v121 = sub_100BFA9D4();
                  sub_100A2FD98(v121);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  v122 = qword_10229FD98;
                  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumRecoveryCanceledAggregate", buf, 2u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_10229FD90 != -1)
                      dispatch_once(&qword_10229FD90, &stru_102165C08);
                    LOWORD(v311) = 0;
                    LODWORD(v310) = 2;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumRecoveryCanceledAggregate", &v311, v310);
                    v295 = (uint8_t *)v294;
                    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v294);
                    if (v295 != buf)
                      free(v295);
                  }
                  v123 = sub_100BFA9D4();
                  sub_100A2FDEC(v123);
                  goto LABEL_500;
                }
LABEL_477:
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                v116 = qword_10229FD98;
                if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfDistanceCyclingPostImpact", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FD90 != -1)
                    dispatch_once(&qword_10229FD90, &stru_102165C08);
                  LOWORD(v311) = 0;
                  LODWORD(v310) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfDistanceCyclingPostImpact", &v311, v310);
                  v291 = (uint8_t *)v290;
                  sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v290);
                  if (v291 != buf)
                    free(v291);
                }
                v117 = sub_100BFA9D4();
                sub_100A2FCE0(v117);
                goto LABEL_483;
              }
LABEL_471:
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              v114 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfDistanceTraveledPostImpact", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_102165C08);
                LOWORD(v311) = 0;
                LODWORD(v310) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfDistanceTraveledPostImpact", &v311, v310);
                v289 = (uint8_t *)v288;
                sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v288);
                if (v289 != buf)
                  free(v289);
              }
              v115 = sub_100BFA9D4();
              sub_100A2FC84(v115);
              if ((a4 & 0x10000000000) == 0)
                goto LABEL_483;
              goto LABEL_477;
            }
LABEL_390:
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v91 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOffWristPost", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_102165C08);
              LOWORD(v311) = 0;
              LODWORD(v310) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOffWristPost", &v311, v310);
              v269 = (uint8_t *)v268;
              sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v268);
              if (v269 != buf)
                free(v269);
            }
            v92 = sub_100BFA9D4();
            sub_100A2F8A8(v92);
            v76 = 1;
            goto LABEL_396;
          }
LABEL_354:
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v81 = qword_10229FD98;
          if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfPeaksIQR", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            LOWORD(v311) = 0;
            LODWORD(v310) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfPeaksIQR", &v311, v310);
            v259 = (uint8_t *)v258;
            sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v258);
            if (v259 != buf)
              free(v259);
          }
          v82 = sub_100BFA9D4();
          sub_100A2F6E4(v82);
          v76 = 1;
          goto LABEL_360;
        }
LABEL_332:
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v74 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfLowFrequencyFFT", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          LOWORD(v311) = 0;
          LODWORD(v310) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfLowFrequencyFFT", &v311, v310);
          v253 = (uint8_t *)v252;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v252);
          if (v253 != buf)
            free(v253);
        }
        v75 = sub_100BFA9D4();
        sub_100A2F5D8(v75);
        v53 = 1;
        goto LABEL_338;
      }
LABEL_314:
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v68 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfDisabledStateMachine", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        LOWORD(v311) = 0;
        LODWORD(v310) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfDisabledStateMachine", &v311, v310);
        v249 = (uint8_t *)v248;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v248);
        if (v249 != buf)
          free(v249);
      }
      v69 = sub_100BFA9D4();
      sub_100A2F4CC(v69);
      goto LABEL_320;
    }
LABEL_308:
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v66 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfCyclingImpactThresholds", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v311) = 0;
      LODWORD(v310) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfCyclingImpactThresholds", &v311, v310);
      v247 = (uint8_t *)v246;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v246);
      if (v247 != buf)
        free(v247);
    }
    v67 = sub_100BFA9D4();
    sub_100A2F470(v67);
    if ((a4 & 0x800) == 0)
      goto LABEL_320;
    goto LABEL_314;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v139 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "Dropping reason for canceling because of untracked operating mode", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    LOWORD(v311) = 0;
    LODWORD(v310) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Dropping reason for canceling because of untracked operating mode", &v311, v310);
    v309 = (uint8_t *)v308;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v308);
    if (v309 != buf)
      free(v309);
  }
}

uint64_t sub_100A1CE18(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4[3];

  result = objc_opt_class(MCProfileConnection, a2);
  if (result)
  {
    if ((objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
    {
      return 1;
    }
    else
    {
      v3 = 0;
      sub_1018BF25C(v4, "FallForceIHAOptIn", &v3, 0);
      return v4[1] != 0;
    }
  }
  return result;
}

uint64_t sub_100A1CE88(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100A10F50();
  if ((_DWORD)result)
  {
    if (CFAbsoluteTimeGetCurrent() >= 654764400.0)
    {
      return 0;
    }
    else
    {
      result = sub_100A15448();
      if ((result & 1) != 0
        || (result = sub_100A15534(), (_DWORD)result) && *(_QWORD *)(a1 + 10656)
        || (result = sub_100A1CF04(), (_DWORD)result))
      {
        result = sub_100A1CE18(result, v3);
        if ((_DWORD)result)
          return *(double *)(a1 + 248) <= 240.0;
      }
    }
  }
  return result;
}

uint64_t sub_100A1CF04()
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4[3];

  v3 = 0;
  sub_1018BF25C(v4, "FallStatsBackgroundSensorDataLoggingEnabled", &v3, 0);
  if (v4[1])
    return 1;
  sub_100197040();
  v1 = sub_1001B7910();
  if ((v1 & 0x20000000000) != 0)
    return sub_100A1CE18(v1, v2);
  else
    return 0;
}

uint64_t sub_100A1CF60()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4[3];

  sub_100197040();
  result = sub_10075D288();
  if ((_DWORD)result)
  {
    v3 = 1;
    sub_1018BF25C(v4, "FallStatsTapToRadarAllowedFall", &v3, 0);
    if (v4[1])
    {
      v1 = sub_100A10B10();
      if ((v1 & 1) != 0)
        return 1;
      else
        return sub_100A1CE18(v1, v2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A1CFC8()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4[3];

  sub_100197040();
  result = sub_10075D288();
  if ((_DWORD)result)
  {
    v3 = 1;
    sub_1018BF25C(v4, "FallStatsTapToRadarAllowedNearFall", &v3, 0);
    if (v4[1])
    {
      v1 = sub_100A10B10();
      if ((v1 & 1) != 0)
        return 1;
      else
        return sub_100A1CE18(v1, v2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A1D030()
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4[3];

  v3 = 0;
  sub_1018BF25C(v4, "FallStatsBackgroundAWDLoggingEnabled", &v3, 0);
  if (v4[1])
    return 1;
  sub_100197040();
  v1 = sub_1001B7910();
  if ((v1 & 0x10000000000) != 0)
    return sub_100A1CE18(v1, v2);
  else
    return 0;
}

BOOL sub_100A1D08C(uint64_t a1)
{
  unsigned __int8 v3;
  unsigned __int8 v4[3];

  if (*(_BYTE *)(a1 + 444) && ((sub_100A15448() & 1) != 0 || sub_100A15534() && *(_QWORD *)(a1 + 10656)))
    return 1;
  v3 = 0;
  sub_1018BF25C(v4, "FallStatsEnabled", &v3, 0);
  return v4[1] != 0;
}

uint64_t sub_100A1D100()
{
  uint64_t result;
  uint64_t v1;

  result = sub_100A10F50();
  if ((_DWORD)result)
  {
    result = sub_100A1CE18(result, v1);
    if ((_DWORD)result)
    {
      if ((sub_100A15448() & 1) != 0)
        return 0;
      else
        return sub_100A15534() ^ 1;
    }
  }
  return result;
}

uint64_t sub_100A1D138(uint64_t a1)
{
  uint64_t v2;

  if (sub_100A10B10())
    v2 = sub_100A10B98();
  else
    v2 = 1;
  if (!sub_100A1D08C(a1) && (sub_100A1D08C(a1) || !sub_100A1D030()))
    return 0;
  return v2;
}

uint64_t sub_100A1D194(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3[3];

  if ((sub_100A1CE88(a1) & 1) != 0)
    return 1;
  v2 = 0;
  sub_1018BF25C(v3, "FallStatsEnabled", &v2, 0);
  if (v3[1] || (sub_100A1CF60() & 1) != 0)
    return 1;
  else
    return sub_100A1CFC8();
}

uint64_t sub_100A1D1EC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  BOOL v16;
  unsigned __int8 v17;

  v17 = a3 & 1;
  v16 = (a3 & 2) != 0;
  v5 = sub_100127B9C();
  sub_100081C10(v5, &v14);
  sub_10011B47C(v14, "FallStatsEnabled", &v17);
  v6 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = sub_100127B9C();
  sub_100081C10(v9, &v14);
  sub_10011B47C(v14, "FallStatsPressureEnabled", &v16);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_100A1D304(a1, a2, v17);
}

void sub_100A1D2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A1D304(uint64_t a1, uint64_t a2, int a3)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = *(void **)(a1 + 256);
  if (a3 == 1)
  {
    objc_msgSend(v4, "addObject:", a2);
  }
  else
  {
    objc_msgSend(v4, "removeObject:", a2);
    if (a3)
    {
      if (!objc_msgSend(*(id *)(a1 + 256), "count"))
      {
        objc_msgSend(*(id *)(a1 + 136), "clearAllLogs");
        objc_msgSend(*(id *)(a1 + 168), "clearLogs");
        objc_msgSend(*(id *)(a1 + 176), "clearLogs");
        objc_msgSend(*(id *)(a1 + 184), "clearLogs");
        objc_msgSend(*(id *)(a1 + 192), "clearLogs");
        objc_msgSend(*(id *)(a1 + 200), "clearLogs");
        objc_msgSend(*(id *)(a1 + 208), "clearLogs");
        objc_msgSend(*(id *)(a1 + 216), "clearLogs");
        objc_msgSend(*(id *)(a1 + 224), "clearLogs");
        objc_msgSend(*(id *)(a1 + 232), "clearLogs");
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 136), "stopLogging");
    }
  }
  if (objc_msgSend(*(id *)(a1 + 256), "count"))
  {
    +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSSet setWithSet:](NSSet, "setWithSet:", *(_QWORD *)(a1 + 256)), 1, 0);
    v6 = sub_1001FD94C();
    sub_10023EC14(v6);
  }
  else
  {
    v9 = sub_1001FD94C();
    sub_1005254E4(v9);
    v10 = sub_100127B9C();
    sub_100081C10(v10, &v22);
    sub_100525484(v22, "FallStatsEnabled", 0xFFFFFFFFLL);
    v11 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = sub_100127B9C();
    sub_100081C10(v14, &v22);
    sub_100525484(v22, "FallStatsPressureEnabled", 0xFFFFFFFFLL);
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = sub_100127B9C();
    sub_100081C10(v18, &v22);
    sub_100525484(v22, "AnomalyDetectorEnabledKey", 0xFFFFFFFFLL);
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v7 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
  sub_100A1DA68(a1, 0);
  return *(_QWORD *)(a1 + 7816);
}

void sub_100A1D54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100A1D568(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  NSObject *v6;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  NSNumber *v19;
  id v20;
  NSFileHandle *v21;
  id v22;
  id v23;
  NSNumber *v24;
  const char *v25;
  uint8_t *v26;
  _QWORD v27[2];
  id (*v28)(uint64_t, void *);
  void *v29;
  id v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[2];
  int v34;
  uint64_t v35;
  uint8_t buf[4];
  uint64_t v37;

  v4 = objc_alloc_init((Class)NSMutableDictionary);
  v31 = 0;
  v5 = -[NSArray mutableCopy](-[NSFileManager contentsOfDirectoryAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "contentsOfDirectoryAtPath:error:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), &v31), "mutableCopy");
  if (v31)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v6 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v37 = v31;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to get contents of logging directory, error: %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v34 = 138543362;
      v35 = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "Unable to get contents of logging directory, error: %{public}@", &v34, 12);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLFallNotifier::moveFallStatsToFile(NSFileHandle *)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v32[0] = CMErrorMessage;
    v32[1] = CMReturnCode;
    v33[0] = &off_10221BA50;
    v33[1] = &__kCFBooleanFalse;
    return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 2);
  }
  else
  {
    v8 = v5;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v28 = sub_100A1DA20;
    v29 = &unk_1021659D0;
    v30 = v5;
    v9 = *(void **)(a1 + 168);
    objc_msgSend(v9, "flushToFile");
    v10 = objc_msgSend(v9, "currentFilename");
    if (v10)
      objc_msgSend(v8, "removeObject:", v10);
    v11 = *(void **)(a1 + 176);
    objc_msgSend(v11, "flushToFile");
    v12 = objc_msgSend(v11, "currentFilename");
    if (v12)
      objc_msgSend(v8, "removeObject:", v12);
    v13 = *(void **)(a1 + 184);
    objc_msgSend(v13, "flushToFile");
    v14 = objc_msgSend(v13, "currentFilename");
    if (v14)
      objc_msgSend(v8, "removeObject:", v14);
    v15 = *(void **)(a1 + 192);
    objc_msgSend(v15, "flushToFile");
    v16 = objc_msgSend(v15, "currentFilename");
    if (v16)
      objc_msgSend(v8, "removeObject:", v16);
    v17 = *(void **)(a1 + 200);
    objc_msgSend(v17, "flushToFile");
    v18 = objc_msgSend(v17, "currentFilename");
    if (v18)
      objc_msgSend(v8, "removeObject:", v18);
    sub_100A1DA20((uint64_t)v27, *(void **)(a1 + 208));
    v28((uint64_t)v27, *(void **)(a1 + 216));
    v28((uint64_t)v27, *(void **)(a1 + 224));
    v28((uint64_t)v27, *(void **)(a1 + 232));
    v19 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "count"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v19, CMFallSetStatsNumberOfAvailableFiles);
    if (objc_msgSend(v8, "count"))
    {
      v20 = objc_msgSend(CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), "stringByAppendingPathComponent:", objc_msgSend(v8, "objectAtIndexedSubscript:", 0));
      v21 = +[NSFileHandle fileHandleForReadingAtPath:](NSFileHandle, "fileHandleForReadingAtPath:", v20);
      v22 = +[CMMotionUtils copyDataFrom:to:](CMMotionUtils, "copyDataFrom:to:", v21, a2);
      -[NSFileHandle closeFile](v21, "closeFile");
      objc_msgSend(a2, "closeFile");
      v23 = objc_msgSend(v8, "objectAtIndexedSubscript:", 0);
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v23, CMFallSetStatsNameOfCurrentFile);
      v24 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v22);
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v24, CMFallSetStatsSizeOfCurrentFile);
      objc_msgSend(v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CMReturnCode);
      -[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", v20, 0);
    }
    else
    {
      objc_msgSend(v4, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CMReturnCode);
    }
    return (NSDictionary *)objc_msgSend(v4, "copy");
  }
}

id sub_100A1DA20(uint64_t a1, void *a2)
{
  id result;

  objc_msgSend(a2, "flushToFile");
  result = objc_msgSend(a2, "currentFilename");
  if (result)
    return objc_msgSend(*(id *)(a1 + 32), "removeObject:", result);
  return result;
}

uint64_t sub_100A1DA68(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  void *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  __int128 v27;
  uint64_t v28;
  _DWORD v29[4];
  uint8_t buf[4];
  int v31;

  v27 = 0uLL;
  v28 = 0;
  sub_100A205D8(a1, a2, (uint64_t)&v27);
  if (*(unsigned __int8 *)(a1 + 7832) != v28)
  {
    if ((_BYTE)v28)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v3 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Enabling Sensor Recorder", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        LOWORD(v29[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "Enabling Sensor Recorder", v29, 2);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "CMMotionCoprocessorCommand::Configure::FallStatsConfig CLFallNotifier::updateConfig(CMSPUFall_Types::SimulatedType)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      sub_100A20C18(a1);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10888) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 10888) + 8), 4, 0);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 160), "cleanUp:", 0.0);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v4 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Disabling Sensor Recorder", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        LOWORD(v29[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "Disabling Sensor Recorder", v29, 2);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "CMMotionCoprocessorCommand::Configure::FallStatsConfig CLFallNotifier::updateConfig(CMSPUFall_Types::SimulatedType)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      sub_100A21268((id *)a1);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10888) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 10888) + 8), 4);
    }
  }
  if ((sub_100A15448() & 1) == 0 && (!sub_100A15534() || !*(_QWORD *)(a1 + 10656))
    || *(_BYTE *)(a1 + 445))
  {
    *(_OWORD *)(a1 + 7816) = v27;
    *(_QWORD *)(a1 + 7832) = v28;
    v5 = (const void *)sub_1001FBB04(0);
    if (v5)
    {
      if (v7)
        sub_1005D2934((uint64_t)v7, (__int128 *)(a1 + 7816));
    }
    v8 = sub_100A16088(a1, v6);
    sub_1011A38C4(a1 + 10568, v8);
    v9 = sub_100A10F50();
    sub_1011A38CC(a1 + 10568, v9);
    v10 = sub_100A10B10();
    sub_1011A38E8(a1 + 10568, v10);
    v11 = sub_100A10B98();
    sub_1011A3904(a1 + 10568, v11);
    v12 = sub_100A1D100();
    sub_1011A3920(a1 + 10568, v12);
    v13 = sub_100A1D138(a1);
    v14 = sub_1011A393C(a1 + 10568, v13);
    v16 = sub_100A1CE18(v14, v15);
    sub_1011A3958(a1 + 10568, v16);
    sub_1011A4054(a1 + 10568);
    v17 = sub_100A1D138(a1);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v18 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v31 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "CLFitnessTrackingAllDayAWD: Updating didEnableBackgroundAllDayAnomalyDetection %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v29[0] = 67109120;
      v29[1] = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "CLFitnessTrackingAllDayAWD: Updating didEnableBackgroundAllDayAnomalyDetection %d", v29);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "CMMotionCoprocessorCommand::Configure::FallStatsConfig CLFallNotifier::updateConfig(CMSPUFall_Types::SimulatedType)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v19 = sub_100BFA9D4();
    sub_100BFCA54(v19, v17);
  }
  return *(_QWORD *)(a1 + 7816);
}

void sub_100A1DFE0(uint64_t a1, uint64_t a2, char a3)
{
  unsigned __int8 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float v16;
  double v17;
  double v18;
  NSObject *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  NSObject *v30;
  int v31;
  int v32;
  const char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  NSObject *v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  NSObject *v57;
  uint32_t v58;
  NSObject *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  double Current;
  double v65;
  double v66;
  uint64_t v67;
  int v68;
  int v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  int v73;
  const char *v74;
  char *v75;
  unsigned __int8 v76[16];
  _BYTE buf[48];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[26];
  __int16 v84;
  __int128 v85;
  uint64_t v86;
  _BYTE v87[33];

  if (!*(_QWORD *)(a2 + 19))
    return;
  if (*(id *)(a2 + 19) == sub_100A20298())
  {
    sub_100A158A4(a1, a2, 6);
    return;
  }
  v6 = (unsigned __int8 *)(a1 + 7608);
  if (*(unsigned __int8 *)(a2 + 157) - 1 <= 1)
  {
    v7 = *(_OWORD *)a2;
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 6935) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 6951) = v9;
    *(_OWORD *)(a1 + 6903) = v7;
    *(_OWORD *)(a1 + 6919) = v8;
    v10 = *(_OWORD *)(a2 + 64);
    v11 = *(_OWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 6999) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 7015) = v12;
    *(_OWORD *)(a1 + 6967) = v10;
    *(_OWORD *)(a1 + 6983) = v11;
    v13 = *(_OWORD *)(a2 + 128);
    v14 = *(_OWORD *)(a2 + 144);
    v15 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 7078) = *(_OWORD *)(a2 + 175);
    *(_OWORD *)(a1 + 7047) = v14;
    *(_OWORD *)(a1 + 7063) = v15;
    *(_OWORD *)(a1 + 7031) = v13;
  }
  v16 = sub_100A2C2B8((float *)(a2 + 27));
  if (*(_BYTE *)(a2 + 18) && *(_BYTE *)(a2 + 18) != 7)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v30 = qword_10229FD98;
    if (!os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      goto LABEL_29;
    v31 = *v6;
    v32 = *(unsigned __int8 *)(a1 + 7610);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v31;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v32;
    v33 = "{\"msg%{public}.0s\":\"Skipping impact check against on/off wrist status and on/off charger for simulated even"
          "t\", \"Received state\":%{public}hhd, \"Gating enabled\":%{public}hhd}";
LABEL_28:
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v33, buf, 0x1Eu);
    goto LABEL_29;
  }
  if (!*v6)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v30 = qword_10229FD98;
    if (!os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      goto LABEL_29;
    v34 = *v6;
    v35 = *(unsigned __int8 *)(a1 + 7610);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v34;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v35;
    v33 = "{\"msg%{public}.0s\":\"Skipping impact check against on/off wrist status and on/off charger as we did not rece"
          "ive a state yet\", \"Received state\":%{public}hhd, \"Gating enabled\":%{public}hhd}";
    goto LABEL_28;
  }
  v17 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 7624);
  if (v17 <= 0.0)
    v18 = 0.0;
  else
    v18 = v17;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v19 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v20 = *v6;
    v21 = *(unsigned __int8 *)(a1 + 7610);
    v22 = *(_DWORD *)(a1 + 7640) != 0;
    *(_DWORD *)buf = 68290051;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v20;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v21;
    *(_WORD *)&buf[30] = 1025;
    *(_DWORD *)&buf[32] = v22;
    *(_WORD *)&buf[36] = 2049;
    *(double *)&buf[38] = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Checking impact against on/off wrist status\", \"Received state\":%{public}hhd, \"Gating enabled\":%{public}hhd, \"status\":%{private}hhd, \"duration\":\"%{private}f\"}", buf, 0x2Eu);
  }
  v23 = *(double *)(a2 + 166);
  sub_1018BEA14(buf, "FallOffWristLookbackBeforeImpactStartOfIntervalKey", &qword_101C03F38, 0);
  v24 = *(double *)&buf[8];
  sub_1018BEA14(buf, "FallOffWristLookbackBeforeImpactEndOfIntervalKey", &qword_101C03F78, 0);
  v25 = *(double *)&buf[8];
  sub_1018BEA14(buf, "FallOnWristAfterImpactStartOfIntervalKey", &qword_101C03FB0, 0);
  v26 = *(double *)&buf[8];
  sub_1018BEA14(buf, "FallOnWristAfterImpactEndOfIntervalKey", &qword_101C03FE0, 0);
  v27 = *(double *)&buf[8];
  sub_1018BEA14(buf, "FallLockedLookbackBeforeImpactStartOfIntervalKey", &qword_101C04020, 0);
  v28 = *(double *)&buf[8];
  sub_1018BEA14(buf, "FallLockedLookbackBeforeImpactEndOfIntervalKey", &qword_101C04058, 0);
  v29 = sub_101360970(a1 + 7608, a2, v23, v24, v25, v26, v27, v28, *(double *)&buf[8]);
  switch(v29)
  {
    case 1:
      sub_100A202E0(*(_QWORD *)(a2 + 19));
      sub_100A158A4(a1, a2, 9);
      return;
    case 3:
      sub_100A202E0(*(_QWORD *)(a2 + 19));
      sub_100A158A4(a1, a2, 12);
      return;
    case 2:
      sub_100A202E0(*(_QWORD *)(a2 + 19));
      sub_100A158A4(a1, a2, 10);
      return;
  }
  *(_DWORD *)v76 = 25;
  sub_1004AD1D8(buf, "FallMinimumOffChargerDurationKey", v76, 0);
  if (sub_101360DBC(a1 + 7608, *(int *)&buf[4]))
  {
    sub_100A202E0(*(_QWORD *)(a2 + 19));
    sub_100A158A4(a1, a2, 11);
    Current = CFAbsoluteTimeGetCurrent();
    v65 = *(double *)(a1 + 7616);
    *(_DWORD *)v76 = 25;
    sub_1004AD1D8(buf, "FallMinimumOffChargerDurationKey", v76, 0);
    v66 = fmax(Current - v65, 0.0);
    if (v66 >= (double)*(int *)&buf[4])
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v72 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        v73 = v6[3];
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1025;
        *(_DWORD *)&buf[20] = v73;
        *(_WORD *)&buf[24] = 2049;
        *(double *)&buf[26] = v66;
        v56 = "{\"msg%{public}.0s\":\"Avoided event dispatch with watch on charger\", \"status\":%{private}d, \"duration\""
              ":\"%{private}f\"}";
        v57 = v72;
        v58 = 34;
        goto LABEL_60;
      }
    }
    else
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v67 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        v68 = v6[3];
        *(_DWORD *)v76 = 25;
        sub_1004AD1D8(buf, "FallMinimumOffChargerDurationKey", v76, 0);
        v69 = *(_DWORD *)&buf[4];
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1025;
        *(_DWORD *)&buf[20] = v68;
        *(_WORD *)&buf[24] = 2049;
        *(double *)&buf[26] = v66;
        *(_WORD *)&buf[34] = 1025;
        *(_DWORD *)&buf[36] = v69;
        v56 = "{\"msg%{public}.0s\":\"Avoided event dispatch with watch off charger for too short\", \"status\":%{private"
              "}d, \"duration\":\"%{private}f\", \"threshold\":%{private}d}";
        v57 = v67;
        v58 = 40;
        goto LABEL_60;
      }
    }
    return;
  }
LABEL_29:
  v36 = *(unsigned __int8 *)(a1 + 7814);
  v76[0] = 0;
  sub_1018BF25C(buf, "FallGateAlertsOnWaterLock", v76, 0);
  if (buf[1])
    v37 = *(unsigned __int8 *)(a1 + 7809);
  else
    v37 = 0;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v38 = v37 | v36;
  v39 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v38;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Checking impact against system state\", \"should cancel\":%{private}d}", buf, 0x18u);
  }
  if (v38)
  {
    sub_100A202E0(*(_QWORD *)(a2 + 19));
    sub_100A158A4(a1, a2, 8);
    *(_BYTE *)(a1 + 447) = 1;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v40 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v41 = *(_QWORD *)(a1 + 7792);
      v42 = *(unsigned __int8 *)(a1 + 7808);
      v43 = *(unsigned __int8 *)(a1 + 7809);
      v44 = *(unsigned __int8 *)(a1 + 7810);
      v45 = *(unsigned __int8 *)(a1 + 7811);
      v46 = *(unsigned __int8 *)(a1 + 7812);
      v47 = *(unsigned __int8 *)(a1 + 7813);
      v48 = *(unsigned __int8 *)(a1 + 7814);
      *(_DWORD *)buf = 68291074;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v41;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v42;
      *(_WORD *)&buf[34] = 1026;
      *(_DWORD *)&buf[36] = v43;
      *(_WORD *)&buf[40] = 1026;
      *(_DWORD *)&buf[42] = v44;
      *(_WORD *)&buf[46] = 1026;
      LODWORD(v78) = v45;
      WORD2(v78) = 1026;
      *(_DWORD *)((char *)&v78 + 6) = v46;
      WORD5(v78) = 1026;
      HIDWORD(v78) = v47;
      LOWORD(v79) = 1026;
      *(_DWORD *)((char *)&v79 + 2) = v48;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"current system state details\", \"absoluteTimestamp\":\"%{public}f\", \"isPasscodeLockEnabled\":%{public}hhd, \"isWaterLockEnabled\":%{public}hhd, \"isSchoolModeEnabled\":%{public}hhd, \"isSleepLockEnabled\":%{public}hhd, \"isTheaterModeEnabled\":%{public}hhd, \"isTourModeEnabled\":%{public}hhd, \"isDepthModeEnabled\":%{public}hhd}", buf, 0x46u);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
    }
    v49 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Fall detection feature is disabled during this system state configuration, avoided dispatching event", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    *(_WORD *)v76 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Fall detection feature is disabled during this system state configuration, avoided dispatching event", v76, 2);
    v51 = (char *)v50;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::checkAndNotifyClientsWithData(CLFall_Types::ImpactEvent &, BOOL)", "%s\n", v50);
LABEL_48:
    if (v51 != buf)
      free(v51);
    return;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v52 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v53 = *(unsigned __int8 *)(a2 + 12);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v53;
    *(_WORD *)&buf[24] = 2049;
    *(double *)&buf[26] = v16;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Checking impact against threshold\", \"age\":%{private}d, \"feature\":\"%{private}f\"}", buf, 0x22u);
  }
  if (v16 >= *(float *)(a1 + 7476) || *(_BYTE *)(a2 + 18))
  {
    if ((a3 & 1) == 0 && *(_BYTE *)(a2 + 13) == 1)
    {
      *(_WORD *)(a1 + 446) = 1;
      *(_BYTE *)(a1 + 448) = 0;
    }
    if ((sub_100A15448() & 1) != 0 || sub_100A15534() && *(_QWORD *)(a1 + 10656))
    {
      *(_DWORD *)buf = 1;
      if (!sub_1001B7864(a1, (int *)buf, 1))
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v59 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_FAULT, "No client was connected when event needed to be dispatched", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          *(_WORD *)v76 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 17, "No client was connected when event needed to be dispatched", v76, 2);
          v75 = (char *)v74;
          sub_100512490("Generic", 1, 0, 0, "void CLFallNotifier::checkAndNotifyClientsWithData(CLFall_Types::ImpactEvent &, BOOL)", "%s\n", v74);
          if (v75 != buf)
            free(v75);
        }
      }
      memset(v87, 0, sizeof(v87));
      v60 = *(_OWORD *)(a2 + 112);
      v81 = *(_OWORD *)(a2 + 96);
      v82 = v60;
      *(_OWORD *)v83 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)&v83[10] = *(_OWORD *)(a2 + 138);
      v61 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&buf[32] = *(_OWORD *)(a2 + 32);
      v78 = v61;
      v62 = *(_OWORD *)(a2 + 80);
      v79 = *(_OWORD *)(a2 + 64);
      v80 = v62;
      v63 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)buf = *(_OWORD *)a2;
      *(_OWORD *)&buf[16] = v63;
      v84 = *(_WORD *)(a2 + 156);
      v85 = *(_OWORD *)(a2 + 158);
      v86 = *(_QWORD *)(a2 + 174);
      *(_DWORD *)v76 = 1;
      (*(void (**)(uint64_t, unsigned __int8 *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v76, buf, 0, 0xFFFFFFFFLL, 0);
      if (*(_QWORD *)&v87[9])
      {
        *(_QWORD *)&v87[17] = *(_QWORD *)&v87[9];
        operator delete(*(void **)&v87[9]);
      }
      return;
    }
    sub_100A202E0(*(_QWORD *)(a2 + 19));
    sub_100A158A4(a1, a2, 8);
    *(_BYTE *)(a1 + 447) = 1;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v70 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Fall detection feature is disabled, avoided dispatching event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      *(_WORD *)v76 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Fall detection feature is disabled, avoided dispatching event", v76, 2);
      v51 = (char *)v71;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::checkAndNotifyClientsWithData(CLFall_Types::ImpactEvent &, BOOL)", "%s\n", v71);
      goto LABEL_48;
    }
  }
  else
  {
    sub_100A202E0(*(_QWORD *)(a2 + 19));
    sub_100A158A4(a1, a2, 7);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v54 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v55 = *(_QWORD *)(a2 + 19);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v55;
      *(_WORD *)&buf[28] = 2049;
      *(double *)&buf[30] = v16;
      v56 = "{\"msg%{public}.0s\":\"Avoided event dispatch not meeting threshold requirement\", \"identifier\":%{public}l"
            "lu, \"feature\":\"%{private}f\"}";
      v57 = v54;
      v58 = 38;
LABEL_60:
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, v56, buf, v58);
    }
  }
}

void sub_100A1EE74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 191);
  if (v3)
  {
    *(_QWORD *)(v1 + 199) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A1EE98(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 128);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1EEEC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66580);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1EF4C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66608);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1EFAC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66636);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F00C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66664);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F06C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 124);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F0C0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66576);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F120(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66604);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F180(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66632);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F1E0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66660);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F240(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 140);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F294(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66584);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F2F4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66612);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F354(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66640);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F3B4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66668);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F414(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F468(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66588);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F4C8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66616);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F528(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66644);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F588(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66672);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F5E8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 148);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F63C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66592);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F69C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66620);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F6FC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66648);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F75C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66676);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F7BC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 152);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F810(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66596);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F870(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66624);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F8D0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66652);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F930(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66680);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F990(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 156);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1F9E4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66600);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1FA44(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66628);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1FAA4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66656);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1FB04(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66684);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A1FB64(uint64_t a1, double a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  double v16;

  v3 = sub_100A20540(a1, (uint64_t)CFSTR("LastFallAlertTime"));
  if (v4 == 1.79769313e308)
  {
    sub_100A20540((uint64_t)v3, (uint64_t)CFSTR("FallDetectionOptInTime"));
    v6 = -vabdd_f64(v5, a2);
  }
  else
  {
    v6 = vabdd_f64(a2, v4);
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v7 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289282;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2050;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Logging to AWD - time since last alert\", \"timeSinceLastAlert\":\"%{public}f\"}", (uint8_t *)v12, 0x1Cu);
  }
  v8 = sub_100BFA9D4();
  v9 = v6;
  v10 = sub_100BFB1BC(v8, v9);
  return sub_100A20340(v10, CFSTR("LastFallAlertTime"));
}

void sub_100A1FCA4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  _QWORD *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  unsigned __int8 v22[16];
  _QWORD v23[5];
  _QWORD v24[5];
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  _BYTE v30[10];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  if (!*(_BYTE *)(a1 + 446))
  {
    if (!*(_BYTE *)(a1 + 449) || !*(_BYTE *)(a1 + 448))
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v10 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Flush handler being invoked - did not see an alert - cleared payloads\"}", buf, 0x12u);
      }
      goto LABEL_28;
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v6 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Flush handler being invoked - checking if near fall payloads should be sent to server or listeners\"}", buf, 0x12u);
    }
    v3 = objc_msgSend(sub_100A285EC(a1), "mutableCopy");
    v4 = *(void **)(a1 + 136);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100A2C884;
    v23[3] = &unk_102165B60;
    v23[4] = a1;
    v5 = v23;
LABEL_16:
    objc_msgSend(v4, "flushData:userProfile:", v5, v3);

LABEL_28:
    objc_msgSend(*(id *)(a1 + 136), "clearAllLogs");
    objc_msgSend(*(id *)(a1 + 320), "setNextFireDelay:", 1.79769313e308);
    v11 = *(void **)(a1 + 144);
    v22[0] = 0;
    sub_1018BF25C(buf, "FallFullMslLoggingInSensorKitEnabled", v22, 0);
    objc_msgSend(v11, "cleanUpIncludingDerivedFeatures:", buf[1]);
    *(_DWORD *)(a1 + 446) = 0;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v12 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_QWORD *)(a1 + 7568);
      v14 = *(_QWORD *)(a1 + 7576);
      v15 = *(_QWORD *)(a1 + 7584);
      v16 = *(_QWORD *)(a1 + 7592);
      v17 = *(_QWORD *)(a1 + 7600);
      *(_DWORD *)buf = 68290306;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2050;
      *(_QWORD *)v30 = v13;
      *(_WORD *)&v30[8] = 2050;
      v31 = v14;
      v32 = 2050;
      v33 = v15;
      v34 = 2050;
      v35 = v16;
      v36 = 2050;
      v37 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Logged item count\", \"Accel800Sample\":%{public}llu, \"Gyro200\":%{public}llu, \"Quaternion6\":%{public}llu, \"Pressure\":%{public}llu, \"HgalSample\":%{public}llu}", buf, 0x44u);
    }
    *(_QWORD *)(a1 + 7600) = 0;
    *(_OWORD *)(a1 + 7584) = 0u;
    *(_OWORD *)(a1 + 7568) = 0u;
    if (*(int *)(a1 + 280) >= 1)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v18 = a1 + 272;
      v19 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Releasing power assertion", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        *(_WORD *)v22 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Releasing power assertion", v22, 2);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::flushLoggerManager()", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      sub_100E3E6F0(v18);
    }
    return;
  }
  if ((*(_BYTE *)(a1 + 447)
     || (sub_100A15448() & 1) == 0 && (!sub_100A15534() || !*(_QWORD *)(a1 + 10656)))
    && *(_BYTE *)(a1 + 448))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v2 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Flush handler being invoked - checking if fall payloads should be sent to server or listeners\"}", buf, 0x12u);
    }
    v3 = objc_msgSend(sub_100A285EC(a1), "mutableCopy");
    v4 = *(void **)(a1 + 136);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100A2C758;
    v24[3] = &unk_102165B60;
    v24[4] = a1;
    v5 = v24;
    goto LABEL_16;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v7 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(a1 + 447);
    v9 = *(unsigned __int8 *)(a1 + 448);
    *(_DWORD *)buf = 68289539;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    v29 = 1025;
    *(_DWORD *)v30 = v8;
    *(_WORD *)&v30[4] = 1025;
    *(_DWORD *)&v30[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Flush handler being invoked - did not meet all conditions for flushing yet\", \"fHasReceivedResolutionSinceLastFlush\":%{private}hhd, \"fHasReceivedFlushPacket\":%{private}hhd}", buf, 0x1Eu);
  }
}

id sub_100A20298()
{
  uint64_t v0;
  int v1;
  id result;
  void *v3;

  v3 = 0;
  v0 = sub_1001FD94C();
  v1 = sub_100219F40(v0, (uint64_t)CFSTR("LastGatedAnomalyAOPTimestamp"), (CFTypeRef *)&v3);
  result = 0;
  if (v1)
    return objc_msgSend(v3, "longLongValue");
  return result;
}

uint64_t sub_100A202E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a1);
  v1 = sub_1001FD94C();
  sub_10023EC14(v1);
  v2 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 944))(v2);
}

uint64_t sub_100A20340(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *CStringPtr;

  +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"), 1, 0);
  v3 = sub_1001FD94C();
  v4 = sub_10023EC14(v3);
  if ((v4 & 1) != 0)
  {
    v5 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v6 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to persist timestamp \", \"for key\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
    }
    v7 = qword_10229FD98;
    if (os_signpost_enabled((os_log_t)qword_10229FD98))
    {
      v8 = CFStringGetCStringPtr(a2, 0x8000100u);
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      CStringPtr = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to persist timestamp ", "{\"msg%{public}.0s\":\"Failed to persist timestamp \", \"for key\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
  }
  return v4;
}

id sub_100A20540(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id result;
  uint64_t v5;
  CFTypeRef v6;

  v6 = 0;
  v3 = sub_1001FD94C();
  result = (id)sub_100219F40(v3, a2, &v6);
  if ((_DWORD)result)
  {
    if (v6)
      return objc_msgSend(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(NSDate, v5), v6, 0), "timeIntervalSinceReferenceDate");
  }
  return result;
}

void sub_100A205D8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  double v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  char v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  const char *v33;
  uint8_t *v34;
  int v35;
  int v36;
  _BOOL4 v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 v43;
  int v44;
  _DWORD v45[2];
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  _BOOL4 v71;
  __int16 v72;
  _BOOL4 v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  uint8_t buf[4];
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  _BOOL4 v105;
  __int16 v106;
  _BOOL4 v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;

  sub_100197040();
  v6 = sub_1001B7910();
  v7 = *(_QWORD *)(a1 + 10656);
  sub_100197040();
  v8 = sub_1001B7910();
  sub_100197040();
  v9 = sub_1001B7910();
  v11 = sub_100A1CE18(v9, v10);
  v12 = *(float *)(a1 + 404);
  LOBYTE(v45[0]) = 0;
  sub_1018BF25C(buf, "FallStatsEnabled", (unsigned __int8 *)v45, 0);
  v13 = buf[1];
  LOBYTE(v45[0]) = 0;
  sub_1018BF25C(buf, "FallStatsPressureEnabled", (unsigned __int8 *)v45, 0);
  v44 = buf[1];
  if ((v6 & 0x4000000000) != 0)
  {
    if ((v11 & 1) != 0)
    {
LABEL_10:
      v14 = 1;
      goto LABEL_11;
    }
  }
  else if (((sub_100A15448() & 1) != 0 || sub_100A15534() && *(_QWORD *)(a1 + 10656))
         && ((v11 ^ 1) & 1) == 0)
  {
    goto LABEL_10;
  }
  if ((sub_100A1CF04() & 1) != 0)
    goto LABEL_10;
  LOBYTE(v45[0]) = 0;
  sub_1018BF25C(buf, "FallStatsSensorRecordingEnabled", (unsigned __int8 *)v45, 0);
  if (buf[1])
    goto LABEL_10;
  LOBYTE(v45[0]) = 0;
  sub_1018BF25C(buf, "FallStatsEnabled", (unsigned __int8 *)v45, 0);
  if (v7)
    v29 = v11;
  else
    v29 = 0;
  if (buf[1])
    v14 = 1;
  else
    v14 = v29;
LABEL_11:
  v15 = v6 & 0x4000000000;
  v16 = *(double *)(a1 + 248);
  if (v16 > 240.0)
  {
    LOBYTE(v45[0]) = 0;
    sub_1018BF25C(buf, "FallStatsEnabled", (unsigned __int8 *)v45, 0);
    v17 = buf[1] != 0;
  }
  else
  {
    v17 = 1;
  }
  v42 = v8 & 0x40000000000;
  v18 = v9 & 0x80000000000;
  if (v15)
    v19 = v11;
  else
    v19 = 0;
  v20 = v14 | v19;
  if (v13)
    v21 = 1;
  else
    v21 = v20;
  v40 = v15;
  if (sub_100A1D08C(a1))
  {
    v22 = 1;
  }
  else if (sub_100A1D08C(a1))
  {
    v22 = 0;
  }
  else
  {
    v22 = sub_100A1D030();
  }
  if (v42)
    v23 = 2;
  else
    v23 = 3;
  if (v18)
    v23 = 1;
  if (v21 | v22)
    v24 = v23;
  else
    v24 = 3;
  v43 = v24;
  v39 = v21;
  v38 = v18;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v25 = v14 & v17;
  v26 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v37 = v17;
    v27 = *(_QWORD *)(a1 + 6731);
    LOBYTE(v45[0]) = 0;
    sub_1018BF25C(buf, "FallStatsSensorRecordingEnabled", (unsigned __int8 *)v45, 0);
    v28 = buf[1];
    *(_DWORD *)buf = 67244289;
    v79 = v43;
    v80 = 1026;
    v81 = v14;
    v82 = 1026;
    v83 = v25;
    v84 = 1026;
    v85 = a2;
    v86 = 1026;
    v87 = v44;
    v88 = 1026;
    v89 = v22;
    v90 = 2050;
    v91 = v27;
    v17 = v37;
    v92 = 1026;
    v93 = v39;
    v94 = 1026;
    v95 = v40 >> 38;
    v96 = 1026;
    v97 = v38 >> 43;
    v98 = 1026;
    v99 = v42 >> 42;
    v100 = 1026;
    v101 = v11;
    v102 = 1025;
    v103 = (int)v12;
    v104 = 1026;
    v105 = v16 <= 240.0;
    v106 = 1026;
    v107 = v37;
    v108 = 1026;
    v109 = v13;
    v110 = 1026;
    v111 = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "config{ mode=%{public}d, sensorRecordingEnabled=%{public}d, sensorRecordingActive=%{public}d, simulateEvent=%{public}d, userStudyPressureDataCollection=%{public}d, detectorEnabled=%{public}d, lastReplyAopTimestamp=%{public}llu -> variables{ enableFallStats=%{public}d, alwaysOn=%{public}d, supportsFallStatsModeBW190=%{public}d, supportsFallStatsModeBW400=%{public}d, optin=%{public}d, age=%{private}d, underRateLimit=%{public}d, shouldLogSensorData=%{public}d},keys{ FallStatsEnabled=%{public}d, FallStatsSensorRecordingEnabled=%{public}d}", buf, 0x6Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    v35 = v25;
    v36 = v14;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v30 = *(_QWORD *)(a1 + 6731);
    v31 = v40 >> 38;
    v41 = qword_10229FD98;
    v32 = sub_100A15410();
    v45[0] = 67244289;
    v45[1] = v43;
    v46 = 1026;
    v47 = v36;
    v48 = 1026;
    v49 = v35;
    v50 = 1026;
    v51 = a2;
    v52 = 1026;
    v53 = v44;
    v54 = 1026;
    v55 = v22;
    v56 = 2050;
    v57 = v30;
    v58 = 1026;
    v59 = v39;
    v60 = 1026;
    v61 = v31;
    v62 = 1026;
    v63 = v38 >> 43;
    v64 = 1026;
    v65 = v42 >> 42;
    v66 = 1026;
    v67 = v11;
    v68 = 1025;
    v69 = (int)v12;
    v70 = 1026;
    v71 = v16 <= 240.0;
    v72 = 1026;
    v73 = v17;
    v74 = 1026;
    v75 = v13;
    v76 = 1026;
    v77 = v32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 0, "config{ mode=%{public}d, sensorRecordingEnabled=%{public}d, sensorRecordingActive=%{public}d, simulateEvent=%{public}d, userStudyPressureDataCollection=%{public}d, detectorEnabled=%{public}d, lastReplyAopTimestamp=%{public}llu -> variables{ enableFallStats=%{public}d, alwaysOn=%{public}d, supportsFallStatsModeBW190=%{public}d, supportsFallStatsModeBW400=%{public}d, optin=%{public}d, age=%{private}d, underRateLimit=%{public}d, shouldLogSensorData=%{public}d},keys{ FallStatsEnabled=%{public}d, FallStatsSensorRecordingEnabled=%{public}d}", v45, 108);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::Config CLFallNotifier::generateConfig(CMSPUFall_Types::SimulatedType) const", "%s\n", v33);
    if (v34 != buf)
      free(v34);
    LOBYTE(v25) = v35;
    LOBYTE(v14) = v36;
  }
  *(_QWORD *)a3 = *(_QWORD *)(a1 + 6731);
  *(_BYTE *)(a3 + 8) = v43;
  *(_BYTE *)(a3 + 9) = v25;
  *(_BYTE *)(a3 + 10) = a2;
  *(_BYTE *)(a3 + 11) = v44;
  *(_BYTE *)(a3 + 12) = v22;
  *(_BYTE *)(a3 + 13) = *(_BYTE *)(a1 + 109);
  *(_BYTE *)(a3 + 16) = v14;
}

id sub_100A20C18(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  double v9;
  double Current;
  uint64_t v11;
  double v12;
  int v13;
  double v14;
  double v15;
  NSObject *v16;
  double v17;
  const char *v18;
  char *v19;
  double v20;
  NSObject *v21;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  double v29;
  _QWORD v30[5];
  _QWORD v31[5];
  _QWORD v32[5];
  int v33;
  double v34;
  _OWORD buf[102];

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Setting up sensor recording", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    LOWORD(v28) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Setting up sensor recording", &v28, 2);
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::enableSensorRecording()", "%s\n", v23);
    if (v24 != (char *)buf)
      free(v24);
  }

  *(_QWORD *)(a1 + 160) = -[CLFallServer initInUniverse:]([CLFallServer alloc], "initInUniverse:", *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 144) = -[CLFallMslSink initInUniverse:]([CLFallMslSink alloc], "initInUniverse:", *(_QWORD *)(a1 + 32));

  *(_QWORD *)(a1 + 152) = -[CLFallMslSink initInUniverse:]([CLFallMslSink alloc], "initInUniverse:", *(_QWORD *)(a1 + 32));
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100A2961C;
  v32[3] = &unk_102165B60;
  v32[4] = a1;

  *(_QWORD *)(a1 + 240) = objc_msgSend(v32, "copy");
  *(_DWORD *)(a1 + 446) = 0;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100A29B54;
  v31[3] = &unk_10212ECA0;
  v31[4] = a1;
  objc_msgSend(*(id *)(a1 + 328), "setHandler:", v31);
  v3 = sub_100127B9C();
  sub_100081C10(v3, buf);
  v28 = 0;
  v4 = sub_1001E4B84(*(uint64_t *)&buf[0], "ServerCleanUpTimerFireInterval", &v28);
  v5 = (double)v28;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v4)
    v9 = v5;
  else
    v9 = 21600.0;
  objc_msgSend(*(id *)(a1 + 328), "setNextFireDelay:interval:", 1.0, v9);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100A29BA0;
  v30[3] = &unk_10212ECA0;
  v30[4] = a1;
  objc_msgSend(*(id *)(a1 + 336), "setHandler:", v30);
  *(_QWORD *)&buf[0] = 0x40F5180000000000;
  sub_1018BEA14((unsigned __int8 *)&v28, "StatsRateLimitInterval", buf, 0);
  Current = CFAbsoluteTimeGetCurrent();
  v11 = sub_1001FD94C();
  v12 = v29;
  *(_QWORD *)&buf[0] = 0;
  v13 = sub_1001FD98C(v11, "StatsRateLimitLastZeroed", buf);
  v14 = Current - v12;
  if (v13)
    v14 = *(double *)buf;
  v15 = Current - v14;
  if (v15 >= 0.0)
  {
    v20 = v29 - v15;
    if (v29 < v20)
      v20 = v29;
    v17 = fmax(v20, 2.0);
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v16 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Time moved backwards. Reset timer immediately.", (uint8_t *)buf, 2u);
    }
    v17 = 2.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v33) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Time moved backwards. Reset timer immediately.", &v33, v27);
      v19 = (char *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::enableSensorRecording()", "%s\n", v18);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v21 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134217984;
    *(double *)((char *)buf + 4) = v17;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Setting next fire time for stats rate limiter (%f)", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v33 = 134217984;
    v34 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Setting next fire time for stats rate limiter (%f)", COERCE_DOUBLE(&v33));
    v26 = (char *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::enableSensorRecording()", "%s\n", v25);
    if (v26 != (char *)buf)
      free(v26);
  }
  return objc_msgSend(*(id *)(a1 + 336), "setNextFireDelay:interval:", v17, v29);
}

void sub_100A2124C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_100261F44((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_100A21268(id *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Tearing down sensor recording to server.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Tearing down sensor recording to server.", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::disableSensorRecording()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  objc_msgSend(a1[41], "invalidate");

  a1[41] = 0;
  objc_msgSend(a1[42], "invalidate");

  a1[42] = 0;
  a1[20] = 0;

  a1[18] = 0;
  a1[19] = 0;
}

uint64_t sub_100A21444(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v15;
  const char *v16;
  char *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  _BYTE buf[12];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;

  if (a2 <= 0.0)
  {
    v9 = sub_1001FD94C();
    *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
    sub_10018A4CC(v9, "StatsRateLimitLastZeroed", buf);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v10 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a1 + 248);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v11;
      v26 = 1024;
      LODWORD(v27) = 240;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Clearing fall stats rate limit counter, was %f out of %d allowed", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v15 = *(double *)(a1 + 248);
      v19 = 134218240;
      v20 = v15;
      v21 = 1024;
      LODWORD(v22) = 240;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Clearing fall stats rate limit counter, was %f out of %d allowed", COERCE_DOUBLE(&v19), 18);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::updateRateLimitCounter(NSTimeInterval)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    *(_QWORD *)(a1 + 248) = 0;
  }
  else
  {
    *(double *)(a1 + 248) = *(double *)(a1 + 248) + a2;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v4 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(a1 + 248);
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = a2;
      v26 = 2048;
      v27 = v5;
      v28 = 1024;
      v29 = 240;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fall stats rate limit counter incremented by %f for a total %f out of %d allowed", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v6 = *(_QWORD *)(a1 + 248);
      v19 = 134218496;
      v20 = a2;
      v21 = 2048;
      v22 = v6;
      v23 = 1024;
      v24 = 240;
      LODWORD(v18) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Fall stats rate limit counter incremented by %f for a total %f out of %d allowed", COERCE_DOUBLE(&v19), v18);
      v8 = (char *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::updateRateLimitCounter(NSTimeInterval)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  v12 = sub_1001FD94C();
  sub_10018A4CC(v12, "StatsRateLimitCounter", (const void *)(a1 + 248));
  v13 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 944))(v13);
  return sub_100A1DA68(a1, 0);
}

uint64_t sub_100A21814(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v4 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v8[0] = 68289282;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Added first client\", \"notification\":%{public}d}", (uint8_t *)v8, 0x18u);
  }
  if (*a2 == 2)
  {
    sub_100A1DA68(a1, 0);
  }
  else if (*a2 == 1)
  {
    v8[0] = 1;
    v6 = sub_1001B7864(a1, v8, 1) != 0;
    sub_100A21958(a1, v6);
  }
  return 1;
}

uint64_t sub_100A21958(uint64_t a1, int a2)
{
  NSObject *v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  if (*(unsigned __int8 *)(a1 + 444) == a2)
  {
    if (a2)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v3 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        v4 = *(unsigned __int8 *)(a1 + 444);
        *(_DWORD *)buf = 68289283;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        v18 = 1025;
        v19 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Making sure the timer will not be trigger\", \"current status\":%{private}hhd}", buf, 0x18u);
      }
      sub_100A21E00(a1);
    }
    return 1;
  }
  if (a2)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(unsigned __int8 *)(a1 + 444);
      *(_DWORD *)buf = 68289539;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 1025;
      v19 = 1;
      v20 = 1025;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Client registered, now allowing algorithms to run\", \"current status\":%{private}hhd, \"previous status\":%{private}hhd}", buf, 0x1Eu);
    }
    sub_100A21E00(a1);
    *(_BYTE *)(a1 + 444) = 1;
LABEL_27:
    sub_100A21E34(a1);
    return 1;
  }
  if ((sub_100A15448() & 1) == 0 && (!sub_100A15534() || !*(_QWORD *)(a1 + 10656)))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v10 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(unsigned __int8 *)(a1 + 444);
      *(_DWORD *)buf = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 1025;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Last client unregistered, making sure detector is stopped\", \"current status\":%{private}hhd}", buf, 0x18u);
    }
    *(_BYTE *)(a1 + 444) = 0;
    goto LABEL_27;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v7 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(unsigned __int8 *)(a1 + 444);
    v13 = 300;
    sub_1004AD1D8(buf, "FallDelayBeforeShuttingDownAlgorithmsAfterLastClientDisconnect", &v13, 0);
    v9 = v15;
    *(_DWORD *)buf = 68289795;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1025;
    v19 = 0;
    v20 = 1025;
    v21 = v8;
    v22 = 1026;
    v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Last client unregistered, setting timer for stopping detector\", \"current status\":%{private}hhd, \"previous status\":%{private}hhd, \"timer duration\":%{public}d}", buf, 0x24u);
  }
  sub_100A21F74(a1);
  return 1;
}

uint64_t sub_100A21CBC(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v4 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v8[0] = 68289282;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Removed last client\", \"notification\":%{public}d}", (uint8_t *)v8, 0x18u);
  }
  if (*a2 == 2)
  {
    sub_100A1DA68(a1, 0);
  }
  else if (*a2 == 1)
  {
    v8[0] = 1;
    v6 = sub_1001B7864(a1, v8, 1) != 0;
    sub_100A21958(a1, v6);
  }
  return 1;
}

void sub_100A21E00(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 352);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 352));
    *(_QWORD *)(a1 + 352) = 0;
  }
}

uint64_t sub_100A21E34(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  v2 = *(NSObject **)(a1 + 360);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 360));
    *(_QWORD *)(a1 + 360) = 0;
  }
  if (!*(_BYTE *)(a1 + 445))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v3 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(unsigned __int8 *)(a1 + 444);
      v6[0] = 68289282;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 1026;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Registration monitor - Finished clients discovery\", \"has client(s)\":%{public}hhd}", (uint8_t *)v6, 0x18u);
    }
  }
  *(_BYTE *)(a1 + 445) = 1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10904) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 10904) + 8), 2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10904) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 10904) + 8), 2, 0);
  return sub_100A1DA68(a1, 0);
}

void sub_100A21F74(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  NSObject *v4;
  _QWORD handler[5];
  int v6;
  unsigned __int8 v7[4];
  int v8;

  sub_100A21E00(a1);
  v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 2uLL, 0, (dispatch_queue_t)objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "queue"));
  *(_QWORD *)(a1 + 352) = v2;
  v6 = 300;
  sub_1004AD1D8(v7, "FallDelayBeforeShuttingDownAlgorithmsAfterLastClientDisconnect", &v6, 0);
  v3 = dispatch_time(0x8000000000000000, 1000000000 * v8);
  dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
  v4 = *(NSObject **)(a1 + 352);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100A22058;
  handler[3] = &unk_10212ECA0;
  handler[4] = a1;
  dispatch_source_set_event_handler(v4, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 352));
}

void sub_100A22058(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Stopping algorithms after timer fire\"}", (uint8_t *)v3, 0x12u);
  }
  sub_100A21E00(v1);
  *(_BYTE *)(v1 + 444) = 0;
}

unsigned __int8 *sub_100A2213C(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  unsigned __int8 *result;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  unsigned __int8 v13[16];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  int v21;

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Checking debug profile presence", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    *(_WORD *)v13 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Checking debug profile presence", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::checkDebugProfilePresence()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v3 = sub_100A22408();
  v13[0] = 0;
  result = sub_1018BF25C(buf, "FallAdditionalProfileLoggingEnabled", v13, 0);
  v5 = buf[1];
  if (v3 != (buf[1] != 0))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v6 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 1026;
      v19 = v3;
      v20 = 1026;
      v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Debug profile presence has been changed, wiping subject UUID\", \"Presence before\":%{public}hhd, \"Presence now\":%{public}hhd}", buf, 0x1Eu);
    }
    v7 = *(void **)(a1 + 160);
    if (v7)
    {
      objc_msgSend(v7, "clearUUID");
    }
    else
    {
      v8 = -[CLFallServer initInUniverse:]([CLFallServer alloc], "initInUniverse:", *(_QWORD *)(a1 + 32));
      objc_msgSend(v8, "clearUUID");

    }
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), v5);
    v9 = sub_1001FD94C();
    sub_10023EC14(v9);
    v10 = sub_1001FD94C();
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 944))(v10);
  }
  return result;
}

id sub_100A22408()
{
  uint64_t v0;
  id result;
  void *v2;

  v2 = 0;
  v0 = sub_1001FD94C();
  result = (id)sub_100219F40(v0, (uint64_t)CFSTR("LastFallAdditionalProfileLoggingEnabled"), (CFTypeRef *)&v2);
  if ((_DWORD)result)
    return objc_msgSend(v2, "BOOLValue");
  return result;
}

id sub_100A22448(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  if (*(_BYTE *)(a1 + 10632) && *(_QWORD *)(a1 + 10680))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v2 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 10696);
      *(_DWORD *)buf = 134217984;
      v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MaxMETs, on charger, setting timer interval to %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v12 = *(_QWORD *)(a1 + 10696);
      v15 = 134217984;
      v16 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "MaxMETs, on charger, setting timer interval to %f", COERCE_DOUBLE(&v15));
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::scheduleMetMinuteStatsCompute()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v4 = *(void **)(a1 + 10672);
    v5 = *(double *)(a1 + 10696);
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v6 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 10720);
      *(_DWORD *)buf = 134217984;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MaxMETs, off charger, setting timer interval to %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v9 = *(_QWORD *)(a1 + 10720);
      v15 = 134217984;
      v16 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "MaxMETs, off charger, setting timer interval to %f", COERCE_DOUBLE(&v15));
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::scheduleMetMinuteStatsCompute()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v4 = *(void **)(a1 + 10672);
    v5 = *(double *)(a1 + 10720);
  }
  return objc_msgSend(v4, "setNextFireDelay:interval:", v5, v5);
}

uint64_t sub_100A22778(uint64_t a1)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sub_100A20540(a1, (uint64_t)CFSTR("FallDetectionOptInTime"));
  v3 = v2;
  if ((sub_100A15448() & 1) == 0 && (!sub_100A15534() || !*(_QWORD *)(a1 + 10656)))
  {
    v4 = sub_1001FD94C();
    sub_1005254E4(v4);
    v5 = sub_1001FD94C();
    sub_1005254E4(v5);
  }
  result = sub_100A15448();
  if ((result & 1) != 0 || (result = sub_100A15534(), (_DWORD)result) && *(_QWORD *)(a1 + 10656))
  {
    if (v3 == 1.79769313e308)
    {
      CFAbsoluteTimeGetCurrent();
      return sub_100A20340(v7, CFSTR("FallDetectionOptInTime"));
    }
  }
  return result;
}

void sub_100A22830()
{
  operator new();
}

void sub_100A22888()
{
  operator delete();
}

double sub_100A228AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float v26;
  NSObject *v27;
  uint64_t v28;
  float v29;
  NSObject *v30;
  double v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  double result;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  unsigned __int8 v41[3];
  unsigned __int8 v42[12];
  unsigned __int8 v43[12];
  unsigned __int8 v44[4];
  int v45;
  unsigned __int8 v46[4];
  int v47;
  unsigned __int8 v48[4];
  int v49;
  unsigned __int8 v50[4];
  int v51;
  unsigned __int8 v52[4];
  int v53;
  double v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[27];
  _BYTE v60[796];
  _WORD __src[400];
  uint64_t v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  double v66;
  uint8_t buf[1640];

  if (*(float *)(a1 + 404) == 30.0 && sub_1001FBB04(0))
  {
    v2 = sub_1001FBB04(0);
    if ((*(unsigned int (**)(uint64_t, uint8_t *))(*(_QWORD *)(v2 + 56) + 56))(v2 + 56, buf)
      && *(float *)&buf[20] != 30.0)
    {
      *(_OWORD *)(a1 + 416) = *(_OWORD *)&buf[32];
      *(_OWORD *)(a1 + 428) = *(_OWORD *)&buf[44];
      v5 = *(_OWORD *)&buf[16];
      *(_OWORD *)(a1 + 384) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 400) = v5;
      sub_100A2C404(a1, v3, *(float *)(a1 + 404));
    }
  }
  v55 = xmmword_101BB5C20;
  v56 = xmmword_101BB5C40;
  *(_QWORD *)&v57 = 0x4100000041A00000;
  *((_QWORD *)&v57 + 1) = 0xA00000018;
  v58 = xmmword_101BB5C50;
  *(_DWORD *)v59 = 1110704128;
  HIDWORD(v6) = 2;
  *(_OWORD *)&v59[4] = xmmword_101BB5C60;
  *(_DWORD *)&v59[20] = 0;
  *(_DWORD *)&v59[23] = 0;
  v54 = NAN;
  v7 = *(_QWORD *)(a1 + 10680);
  if (v7)
  {
    if ((sub_1006F5700(v7, &v54, 0.9) & 1) != 0)
    {
      v8 = sub_1006F58EC(*(_QWORD *)(a1 + 10680));
      goto LABEL_17;
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v9 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to get user mets percentile.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      __src[0] = 0;
      LODWORD(v40) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Failed to get user mets percentile.", __src, v40);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::selectFallModels()", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
  }
  v8 = 0;
LABEL_17:
  LODWORD(v6) = *(_DWORD *)(a1 + 404);
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("Age"), +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6));
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("Gender"), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 384)));
  LODWORD(v10) = *(_DWORD *)(a1 + 392);
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("Height"), +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10));
  LODWORD(v11) = *(_DWORD *)(a1 + 396);
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("Weight"), +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11));
  LODWORD(v12) = *(_DWORD *)(a1 + 420);
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("Pal"), +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12));
  LODWORD(v13) = *(_DWORD *)(a1 + 400);
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("Vo2max"), +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13));
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("MetMinPercentile"), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v54));
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("MetMinCount"), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8));
  v14 = *(void **)(a1 + 8072);
  if (sub_100A1D08C(a1))
    v15 = 0;
  else
    v15 = sub_100A1D030();
  objc_msgSend(v14, "setSelectionFeatureValue:value:", CFSTR("BackgroundAWDLoggingEnabled"), +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v15));
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("Workout"), +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 10656)));
  objc_msgSend(*(id *)(a1 + 8072), "setSelectionFeatureValue:value:", CFSTR("HKWorkout"), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 10664)));
  if ((objc_msgSend(*(id *)(a1 + 8072), "selectModels") & 1) == 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v16 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Could not select model based in provided features - Falling back to defaults", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      __src[0] = 0;
      LODWORD(v40) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 17, "Could not select model based in provided features - Falling back to defaults", __src, v40);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 0, "void CLFallNotifier::selectFallModels()", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  objc_msgSend(*(id *)(a1 + 8072), "fillTripFallModel:", buf);
  objc_msgSend(*(id *)(a1 + 8072), "fillSlipFallModel:", __src);
  objc_msgSend(*(id *)(a1 + 8072), "fillOtherFallModel:", v60);
  objc_msgSend(*(id *)(a1 + 8072), "fillFallThresholds:", &v55);
  sub_1018C2254(v52, "FallCyclingImpactGravityVarianceThreshold", "\nף=FallCyclingImpactCrownVarianceThreshold", 0);
  if (v52[0])
    DWORD1(v58) = v53;
  sub_1018C2254(v50, "FallCyclingImpactCrownVarianceThreshold", "\nף=FallCyclingImpactMaxAbsYThreshold", 0);
  if (v50[0])
    DWORD2(v58) = v51;
  sub_1018C2254(v48, "FallCyclingImpactMaxAbsYThreshold", &dword_101C03CB0, 0);
  if (v48[0])
    HIDWORD(v58) = v49;
  sub_1018C2254(v46, "FallCyclingDistanceTraveledPostImpactThreshold", &dword_101C03CE4, 0);
  if (v46[0])
    *(_DWORD *)v59 = v47;
  sub_1004AD1D8(v44, "FallCyclingEpochsDetectedPostImpactThreshold", "\b", 0);
  if (v44[0])
    *(_DWORD *)&v59[4] = v45;
  LODWORD(v62) = 0;
  sub_1004AD1D8(v43, "FallRefereeOperatingModeOverride", &v62, 0);
  if (v43[0])
    v59[23] = v43[4];
  LODWORD(v62) = 0;
  sub_1004AD1D8(v42, "FallAllDayStateMachineOperatingModeOverride", &v62, 0);
  if (v42[0])
    v59[24] = v42[4];
  LOBYTE(v62) = 0;
  sub_1018BF25C(v41, "FallCyclingStateMachineEnabledOverride", (unsigned __int8 *)&v62, 0);
  if (v41[1])
    v17 = 1;
  else
    v17 = 2;
  if (v41[0])
    v18 = v17;
  else
    v18 = 0;
  v59[25] = v18;
  LOBYTE(v62) = 0;
  sub_1018BF25C((unsigned __int8 *)&v40 + 6, "FallAllDayStateMachineEnabledOverride", (unsigned __int8 *)&v62, 0);
  if (HIBYTE(v40))
    v19 = 1;
  else
    v19 = 2;
  if (BYTE6(v40))
    v20 = v19;
  else
    v20 = 0;
  v59[26] = v20;
  v21 = (const void *)sub_1001FBB04(0);
  if (v21)
  {
    if (v22)
    {
      v23 = (uint64_t)v22;
      sub_1005D2B04();
      sub_1005D2C88(v23, &v55);
    }
  }
  v24 = (float *)(a1 + 7476);
  sub_10053E964(a1 + 7476, (uint64_t)&v55);
  if (sub_100A16088(a1, v25))
  {
    sub_1011A39BC(a1 + 10568, *(float *)(a1 + 7476));
    v26 = v54;
    sub_1011A3990(a1 + 10568, v26);
    sub_1011A4054(a1 + 10568);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v27 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v62 = 68289282;
      v63 = 2082;
      v64 = "";
      v65 = 2050;
      v66 = v54;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Updating user max mets\", \"value\":\"%{public}f\"}", (uint8_t *)&v62, 0x1Cu);
    }
    v28 = sub_100BFA9D4();
    v29 = v54;
    sub_100BFC4FC(v28, v29);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v30 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *v24;
      v62 = 68289282;
      v63 = 2082;
      v64 = "";
      v65 = 2050;
      v66 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Updating user behavioral threshold\", \"value\":\"%{public}f\"}", (uint8_t *)&v62, 0x1Cu);
    }
    v32 = sub_100BFA9D4();
    sub_100BFC384(v32, *v24);
  }
  memcpy((void *)(a1 + 8080), buf, 0x31CuLL);
  memcpy((void *)(a1 + 8876), __src, 0x31CuLL);
  memcpy((void *)(a1 + 9672), v60, 0x31CuLL);
  v33 = v58;
  *(_OWORD *)(a1 + 10500) = v57;
  *(_OWORD *)(a1 + 10516) = v33;
  *(_OWORD *)(a1 + 10532) = *(_OWORD *)v59;
  *(_OWORD *)(a1 + 10543) = *(_OWORD *)&v59[11];
  v34 = v56;
  *(_OWORD *)(a1 + 10468) = v55;
  *(_OWORD *)(a1 + 10484) = v34;
  result = v54;
  *(double *)(a1 + 10560) = v54;
  return result;
}

void sub_100A2324C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  int32x4_t v8;
  double v9;
  uint8_t buf[8];

  v4 = sub_100A24A48(a1, "CLFallNotifier", a2);
  *(_QWORD *)v4 = off_102165A00;
  *(_BYTE *)(v4 + 109) = 0;
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(a1 + 136) = -[CLFallLoggerManager initInUniverse:]([CLFallLoggerManager alloc], "initInUniverse:", a2);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = -[CLFallLogger initToDirectory:prefix:rotation:]([CLFallLogger alloc], "initToDirectory:prefix:rotation:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), CFSTR("newtonStats"), 0);
  *(_QWORD *)(a1 + 176) = -[CLFallLogger initToDirectory:prefix:rotation:]([CLFallLogger alloc], "initToDirectory:prefix:rotation:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), CFSTR("newtonState"), 0);
  *(_QWORD *)(a1 + 184) = -[CLFallLogger initToDirectory:prefix:rotation:]([CLFallLogger alloc], "initToDirectory:prefix:rotation:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), CFSTR("newtonSensors"), 0);
  *(_QWORD *)(a1 + 192) = -[CLFallLogger initToDirectory:prefix:rotation:]([CLFallLogger alloc], "initToDirectory:prefix:rotation:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), CFSTR("pressure"), 0);
  *(_QWORD *)(a1 + 200) = -[CLFallLogger initToDirectory:prefix:rotation:]([CLFallLogger alloc], "initToDirectory:prefix:rotation:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), CFSTR("heartRate"), 0);
  *(_QWORD *)(a1 + 208) = -[CLFallLogger initToDirectory:prefix:rotation:]([CLFallLogger alloc], "initToDirectory:prefix:rotation:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), CFSTR("wristState"), 0);
  *(_QWORD *)(a1 + 216) = -[CLFallLogger initToDirectory:prefix:rotation:]([CLFallLogger alloc], "initToDirectory:prefix:rotation:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), CFSTR("odometer"), 0);
  *(_QWORD *)(a1 + 224) = -[CLFallLogger initToDirectory:prefix:rotation:]([CLFallLogger alloc], "initToDirectory:prefix:rotation:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), CFSTR("falsePositiveSuppressionFeatures"), 0);
  *(_QWORD *)(a1 + 232) = -[CLFallLogger initToDirectory:prefix:rotation:]([CLFallLogger alloc], "initToDirectory:prefix:rotation:", CFSTR("/var/root/Library/Caches/locationd/logs/newtonStats"), CFSTR("hgal"), 0);
  *(_QWORD *)(a1 + 240) = 0;
  v5 = sub_1001FD94C();
  *(_QWORD *)buf = 0;
  v6 = sub_1001FD98C(v5, "StatsRateLimitCounter", buf);
  v7 = *(double *)buf;
  if (!v6)
    v7 = 0.0;
  *(double *)(a1 + 248) = v7;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = -[CLFallTap2Radar initInUniverse:]([CLFallTap2Radar alloc], "initInUniverse:", a2);
  sub_10023CFD8(a1 + 272, (uint64_t)"CLFallNotifier", a1, 0.0);
  *(_QWORD *)(a1 + 320) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 328) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 336) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 344) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_101C03BA4;
  *(_OWORD *)(a1 + 400) = unk_101C03BB4;
  *(_OWORD *)(a1 + 416) = xmmword_101C03BC4;
  *(_OWORD *)(a1 + 428) = *(__int128 *)((char *)&xmmword_101C03BC4 + 12);
  *(_DWORD *)(a1 + 444) = 0;
  *(_DWORD *)(a1 + 447) = 0;
  *(_QWORD *)(a1 + 456) = 0x18600000000;
  *(_OWORD *)(a1 + 6704) = 0u;
  *(_OWORD *)(a1 + 6720) = 0u;
  *(_DWORD *)(a1 + 6735) = 0;
  *(_OWORD *)(a1 + 6739) = xmmword_101C03A70;
  *(_QWORD *)(a1 + 6755) = 0xFF7FFFFF7F7FFFFFLL;
  *(_DWORD *)(a1 + 6763) = -8388609;
  *(_QWORD *)(a1 + 6767) = 0;
  *(_QWORD *)(a1 + 6775) = 0x7F7FFFFF00000000;
  *(_DWORD *)(a1 + 6783) = 2139095039;
  *(_DWORD *)(a1 + 6835) = 0;
  *(_OWORD *)(a1 + 6819) = 0u;
  *(_OWORD *)(a1 + 6803) = 0u;
  *(_OWORD *)(a1 + 6787) = 0u;
  v8 = vdupq_n_s32(0x7F7FFFFFu);
  *(int32x4_t *)(a1 + 6839) = v8;
  *(_DWORD *)(a1 + 6855) = -8388609;
  *(_WORD *)(a1 + 6859) = 1;
  *(_BYTE *)(a1 + 6861) = 0;
  *(_OWORD *)(a1 + 6868) = 0u;
  *(_OWORD *)(a1 + 6884) = 0u;
  *(_OWORD *)(a1 + 6900) = 0u;
  *(_OWORD *)(a1 + 6914) = 0u;
  *(_OWORD *)(a1 + 6930) = xmmword_101C03A70;
  *(_QWORD *)(a1 + 6946) = 0xFF7FFFFF7F7FFFFFLL;
  *(_DWORD *)(a1 + 6954) = -8388609;
  *(_QWORD *)(a1 + 6958) = 0;
  *(_QWORD *)(a1 + 6966) = 0x7F7FFFFF00000000;
  *(_DWORD *)(a1 + 6974) = 2139095039;
  *(_DWORD *)(a1 + 7026) = 0;
  *(_OWORD *)(a1 + 7010) = 0u;
  *(_OWORD *)(a1 + 6994) = 0u;
  *(_OWORD *)(a1 + 6978) = 0u;
  *(int32x4_t *)(a1 + 7030) = v8;
  *(_DWORD *)(a1 + 7046) = -8388609;
  *(_WORD *)(a1 + 7050) = 1;
  *(_BYTE *)(a1 + 7052) = 0;
  *(_OWORD *)(a1 + 7105) = 0u;
  *(_OWORD *)(a1 + 7091) = 0u;
  *(_OWORD *)(a1 + 7075) = 0u;
  *(_OWORD *)(a1 + 7059) = 0u;
  *(_OWORD *)(a1 + 7121) = xmmword_101C03A70;
  *(_QWORD *)(a1 + 7137) = 0xFF7FFFFF7F7FFFFFLL;
  *(_DWORD *)(a1 + 7145) = -8388609;
  *(_QWORD *)(a1 + 7149) = 0;
  *(_QWORD *)(a1 + 7157) = 0x7F7FFFFF00000000;
  *(_DWORD *)(a1 + 7165) = 2139095039;
  *(_DWORD *)(a1 + 7217) = 0;
  *(_OWORD *)(a1 + 7201) = 0u;
  *(_OWORD *)(a1 + 7185) = 0u;
  *(_OWORD *)(a1 + 7169) = 0u;
  *(int32x4_t *)(a1 + 7221) = v8;
  *(_DWORD *)(a1 + 7237) = -8388609;
  *(_WORD *)(a1 + 7241) = 1;
  *(_BYTE *)(a1 + 7243) = 0;
  *(_OWORD *)(a1 + 7296) = 0u;
  *(_OWORD *)(a1 + 7282) = 0u;
  *(_OWORD *)(a1 + 7266) = 0u;
  *(_OWORD *)(a1 + 7250) = 0u;
  *(_OWORD *)(a1 + 7312) = xmmword_101C03A70;
  *(_QWORD *)(a1 + 7328) = 0xFF7FFFFF7F7FFFFFLL;
  *(_DWORD *)(a1 + 7336) = -8388609;
  *(_QWORD *)(a1 + 7340) = 0;
  *(_DWORD *)(a1 + 7348) = 0;
  *(_QWORD *)(a1 + 7352) = v8.i64[0];
  *(_DWORD *)(a1 + 7408) = 0;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7360) = 0u;
  *(int32x4_t *)(a1 + 7412) = v8;
  *(_DWORD *)(a1 + 7428) = -8388609;
  *(_WORD *)(a1 + 7432) = 1;
  *(_BYTE *)(a1 + 7434) = 0;
  *(_DWORD *)(a1 + 7472) = 0;
  *(_OWORD *)(a1 + 7457) = 0u;
  *(_OWORD *)(a1 + 7441) = 0u;
  sub_10053EA04(a1 + 7476);
  *(_QWORD *)(a1 + 7600) = 0;
  *(_OWORD *)(a1 + 7584) = 0u;
  *(_OWORD *)(a1 + 7568) = 0u;
  sub_101360350(a1 + 7608);
  *(_BYTE *)(a1 + 7832) = 0;
  *(_OWORD *)(a1 + 7792) = 0u;
  *(_QWORD *)(a1 + 7807) = 0;
  *(_QWORD *)(a1 + 7816) = 0;
  *(_QWORD *)(a1 + 7822) = 0;
  *(_OWORD *)(a1 + 7840) = 0u;
  *(_OWORD *)(a1 + 7856) = 0u;
  *(_OWORD *)(a1 + 7872) = 0u;
  *(_OWORD *)(a1 + 7888) = 0u;
  *(_OWORD *)(a1 + 7904) = 0u;
  *(_OWORD *)(a1 + 7920) = 0u;
  *(_OWORD *)(a1 + 7936) = 0u;
  *(_OWORD *)(a1 + 7952) = 0u;
  *(_OWORD *)(a1 + 7968) = 0u;
  *(_OWORD *)(a1 + 7984) = 0u;
  *(_OWORD *)(a1 + 8000) = 0u;
  *(_OWORD *)(a1 + 8016) = 0u;
  *(_OWORD *)(a1 + 8032) = 0u;
  *(_QWORD *)(a1 + 8048) = a1 + 8048;
  *(_QWORD *)(a1 + 8056) = a1 + 8048;
  *(_QWORD *)(a1 + 8064) = 0;
  *(_QWORD *)(a1 + 8072) = objc_alloc_init(CLFallModelSelector);
  v9 = sub_10053EA04(a1 + 10468);
  *(_QWORD *)(a1 + 10560) = 0x7FF8000000000000;
  sub_1011A3848(a1 + 10568, *(_QWORD *)(a1 + 40), v9);
  *(_BYTE *)(a1 + 10632) = 0;
  *(_QWORD *)(a1 + 10640) = 0;
  *(_QWORD *)(a1 + 10656) = 0;
  *(_DWORD *)(a1 + 10664) = 0;
  *(_QWORD *)(a1 + 10672) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 10680) = 0;
  *(_QWORD *)buf = 0x4066800000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 10688), "FallMetMinuteStatsComputeInterval", buf, 0);
  *(_QWORD *)buf = 0x40AC200000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 10712), "FallMetMinuteStatsComputeIntervalOffCharger", buf, 0);
  *(_WORD *)(a1 + 10736) = 0;
  *(_BYTE *)(a1 + 10738) = 0;
  *(_OWORD *)(a1 + 10744) = 0u;
  *(_OWORD *)(a1 + 10760) = 0u;
  *(_OWORD *)(a1 + 10776) = 0u;
  *(_OWORD *)(a1 + 10792) = 0u;
  *(_OWORD *)(a1 + 10808) = 0u;
  *(_OWORD *)(a1 + 10824) = 0u;
  *(_OWORD *)(a1 + 10840) = 0u;
  *(_OWORD *)(a1 + 10856) = 0u;
  *(_OWORD *)(a1 + 10872) = 0u;
  *(_OWORD *)(a1 + 10888) = 0u;
  *(_OWORD *)(a1 + 10904) = 0u;
  *(_OWORD *)(a1 + 10920) = 0u;
  operator new();
}

void sub_100A247A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v17 = v12[1366];
  v12[1366] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v12[1365];
  v12[1365] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v12[1364];
  v12[1364] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v12[1363];
  v12[1363] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v12[1362];
  v12[1362] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v12[1361];
  v12[1361] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v12[1360];
  v12[1360] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v12[1359];
  v12[1359] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v12[1358];
  v12[1358] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *v15;
  *v15 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *v14;
  *v14 = 0;
  if (v27)
    sub_100A38DA0((uint64_t)v14, v27);
  sub_1011A389C(a11);
  sub_1000F34E0(v13);
  sub_10047F660(v12 + 962);
  sub_10047F660(v12 + 956);
  sub_100E3E6C8(a12);
  sub_100A2929C((uint64_t)v12);
  _Unwind_Resume(a1);
}

uint64_t sub_100A24A48(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102165CE8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100A24AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A24AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  int v36;
  uint64_t v37;
  uint8_t buf[4];
  uint64_t v39;

  v5 = *(_QWORD *)(a1 + 32);
  result = sub_100A16088(v5, a2);
  if (!(_DWORD)result)
    return result;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v7 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v39 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLFallImpactMetrics: Logging impact at time %llu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v36 = 134217984;
    v37 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "CLFallImpactMetrics: Logging impact at time %llu", &v36);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v8 = sub_1003471B4(a3);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v9 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v39 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging impact cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v36 = 134217984;
    v37 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "CLFitnessTrackingAllDayAWD: Logging impact cancelation reason 0x%llx", &v36);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v10 = sub_100BFA9D4();
  result = sub_100BFB2F8(v10, v8);
  v11 = *(_QWORD *)(v5 + 10656);
  if (v11 <= 14)
  {
    if (!v11)
      return result;
    if (v11 != 4)
    {
LABEL_42:
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v20 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v39 = v8;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging other workout impact cancelation reason 0x%llx", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v36 = 134217984;
        v37 = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "CLFitnessTrackingAllDayAWD: Logging other workout impact cancelation reason 0x%llx", &v36);
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      v21 = sub_100BFA9D4();
      return sub_100BFC0C0(v21, v8);
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v14 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging outdoor cycling impact cancelation reason 0x%llx", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v36 = 134217984;
      v37 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "CLFitnessTrackingAllDayAWD: Logging outdoor cycling impact cancelation reason 0x%llx", &v36);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    v15 = sub_100BFA9D4();
    return sub_100BFB5B8(v15, v8);
  }
  else
  {
    switch(v11)
    {
      case 15:
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v16 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v39 = v8;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging outdoor walking impact cancelation reason 0x%llx", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v36 = 134217984;
          v37 = v8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "CLFitnessTrackingAllDayAWD: Logging outdoor walking impact cancelation reason 0x%llx", &v36);
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        v17 = sub_100BFA9D4();
        return sub_100BFB87C(v17, v8);
      case 17:
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v18 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v39 = v8;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging outdoor running impact cancelation reason 0x%llx", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v36 = 134217984;
          v37 = v8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "CLFitnessTrackingAllDayAWD: Logging outdoor running impact cancelation reason 0x%llx", &v36);
          v33 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        v19 = sub_100BFA9D4();
        return sub_100BFBB3C(v19, v8);
      case 24:
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v12 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v39 = v8;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging hiking impact cancelation reason 0x%llx", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v36 = 134217984;
          v37 = v8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "CLFitnessTrackingAllDayAWD: Logging hiking impact cancelation reason 0x%llx", &v36);
          v27 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        v13 = sub_100BFA9D4();
        return sub_100BFBE00(v13, v8);
      default:
        goto LABEL_42;
    }
  }
}

uint64_t sub_100A254CC(uint64_t a1)
{
  return sub_100A254D4(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100A254D4(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289539;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1025;
    v8 = sub_100A10B10();
    v9 = 1025;
    v10 = sub_100A10B98();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Bridge settings were toggled\", \"enabled\":%{private}d, \"onlyDuringWorkouts\":%{private}d}", (uint8_t *)v4, 0x1Eu);
  }
  sub_100A228AC(a1);
  sub_100A22778(a1);
  return sub_100A1DA68(a1, 0);
}

void sub_100A255F0(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onFallStatsData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFallStatsData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFallStatsData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A2AE18(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A257A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A257C0(__int128 *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onFallEventData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFallEventData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFallEventData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A2C9B0(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A25970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A25990(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLFallNotifier::onImpactDataAccel800");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataAccel800", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataAccel800\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_100A2CDF0((unsigned __int8 *)a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_100A25B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A25B68(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLFallNotifier::onImpactDataHgal");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataHgal", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataHgal\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_100A2D0D8((unsigned __int8 *)a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_100A25D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A25D40(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onImpactDataGyro200");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataGyro200", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataGyro200\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A2D36C(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A25EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A25F10(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onImpactDataQuaternion6");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataQuaternion6", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataQuaternion6\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A2D6E8(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A260C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A260E0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLFallNotifier::onImpactDataStart");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataStart", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataStart\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100A33334(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_100A26280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A262A0(__int128 *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onFalsePositiveSuppressionFeatures");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFalsePositiveSuppressionFeatures", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFalsePositiveSuppressionFeatures\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A2DA60(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A26450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A26470(uint8_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onFeatureDistributionMaxAccelNorm");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFeatureDistributionMaxAccelNorm", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFeatureDistributionMaxAccelNorm\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A2DE78(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A26620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A26640(unsigned __int8 *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onFeatureDistributionJerkVectorMagnitude");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFeatureDistributionJerkVectorMagnitude", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFeatureDistributionJerkVectorMagnitude\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A2E524(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A267F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A26810(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onFeatureDistributionMaxAbsXYZ");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFeatureDistributionMaxAbsXYZ", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFeatureDistributionMaxAbsXYZ\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A2EBD8(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A269C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A269E0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onFallCancelReason");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFallCancelReason", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFallCancelReason\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A160D0(a2, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A26B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A26BB4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onPressureData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onPressureData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onPressureData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100A33540(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A26D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A26D84(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFallNotifier::onFallDistance");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFallDistance", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFallDistance\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_10114AA6C(*(_QWORD *)(a2 + 128), a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100A26F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A26F54(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFallNotifier::onWatchOrientationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onWatchOrientationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onWatchOrientationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A337EC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A2710C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A2712C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFallNotifier::onAppMonitorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A33AB0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A272E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A27304(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFallNotifier::onHeartRateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onHeartRateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onHeartRateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A33B30((unsigned __int8 *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A274BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A274DC(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFallNotifier::onUserInfoNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onUserInfoNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onUserInfoNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A33D40(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A27694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A276B4(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFallNotifier::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A33DC8((_QWORD *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A2786C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A2788C(uint64_t a1, _DWORD *a2, _QWORD *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLFallNotifier::onWatchOrientationSettingsNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A33F18(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A27A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A27A64(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFallNotifier::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A2A134(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A27C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A27C3C(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFallNotifier::onOdometerUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onOdometerUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onOdometerUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A2A6EC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A27DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A27E14(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  int v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFallNotifier::onBatteryNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onBatteryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onBatteryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  if (*a2 == 7)
  {
    v9 = *(unsigned __int8 *)(a3 + 9);
    if (*(unsigned __int8 *)(a4 + 10632) != v9)
    {
      *(_BYTE *)(a4 + 10632) = v9;
      sub_100A22448(a4);
    }
  }
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A27FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A2800C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLFallNotifier::onDataCollectionChangedNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onDataCollectionChangedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onDataCollectionChangedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100A37F94;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100A2820C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A2822C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Unregistering for HR Notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Unregistering for HR Notifications", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(v1 + 10896) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v1 + 10896) + 8), 4);
  *(_BYTE *)(v1 + 448) = 1;
  sub_100A1FCA4(v1);
}

id sub_100A283DC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v3 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fail safe sensor recording handler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Fail safe sensor recording handler", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_BYTE *)(v2 + 446))
    *(_WORD *)(v2 + 447) = 257;
  objc_msgSend(*(id *)(v2 + 40), "async:", *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(v2 + 320), "setNextFireDelay:", 1.79769313e308);
}

void sub_100A285A0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_msgSend(sub_100A285EC(v1), "mutableCopy");
  objc_msgSend(v2, "setObject:forKey:", &off_10221BA68, CFSTR("isADLImpact"));

  *(_BYTE *)(v1 + 450) = 0;
}

id sub_100A285EC(uint64_t a1)
{
  id v2;
  _BOOL8 v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  NSString *v17;
  NSObject *v18;
  const char *v19;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;

  v2 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "syncgetUserProfile"), "mutableCopy");
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()), CFSTR("CMTimestamp"));
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A15448()), CFSTR("CMIsFallDetectionFeatureEnabled"));
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A15534()), CFSTR("CMIsFallDetectionDuringWorkoutFeatureEnabled"));
  if ((sub_100A15448() & 1) != 0)
  {
    v3 = 1;
  }
  else if (sub_100A15534())
  {
    v3 = *(_QWORD *)(a1 + 10656) != 0;
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v3), CFSTR("CMFallDetectionShouldEnableFallDetection"));
  LODWORD(v4) = *(_DWORD *)(a1 + 7476);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4), CFSTR("CMImpactMaxAccelNormAlertThreshold"));
  LODWORD(v5) = *(_DWORD *)(a1 + 7480);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5), CFSTR("CMImpactMaxAccelNormLoggingStatsThreshold"));
  LODWORD(v6) = *(_DWORD *)(a1 + 7484);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6), CFSTR("CMImpactMaxAccelNormLoggingHeartRateThreshold"));
  LODWORD(v7) = *(_DWORD *)(a1 + 7488);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7), CFSTR("CMImpactMaxAccelNormLoggingHighResolutionSensorDataThreshold"));
  LODWORD(v8) = *(_DWORD *)(a1 + 7492);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8), CFSTR("CMTripFallPosteriorRatioDetectionThreshold"));
  LODWORD(v9) = *(_DWORD *)(a1 + 7496);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9), CFSTR("CMSlipFallPosteriorRatioDetectionThreshold"));
  LODWORD(v10) = *(_DWORD *)(a1 + 7500);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10), CFSTR("CMOtherFallPosteriorRatioDetectionThreshold"));
  LODWORD(v11) = *(_DWORD *)(a1 + 7504);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11), CFSTR("CMTripNearFallPosteriorRatioDetectionThreshold"));
  LODWORD(v12) = *(_DWORD *)(a1 + 7508);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12), CFSTR("CMSlipNearFallPosteriorRatioDetectionThreshold"));
  LODWORD(v13) = *(_DWORD *)(a1 + 7512);
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13), CFSTR("CMOtherNearFallPosteriorRatioDetectionThreshold"));
  v23 = NAN;
  v24 = 0x7FF8000000000000;
  v21 = NAN;
  v22 = NAN;
  v14 = *(_QWORD *)(a1 + 10680);
  if (v14)
  {
    sub_1006F5700(v14, (double *)&v24, 0.9);
    sub_1006F5700(*(_QWORD *)(a1 + 10680), &v23, 0.9);
    sub_1006F5700(*(_QWORD *)(a1 + 10680), &v22, 0.95);
    sub_1006F5700(*(_QWORD *)(a1 + 10680), &v21, 0.98);
    v15 = *(double *)&v24;
  }
  else
  {
    v15 = NAN;
  }
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15), CFSTR("CMMetMinutePercentileActual"));
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v23), CFSTR("CMMetMinutePercentile90"));
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v22), CFSTR("CMMetMinutePercentile95"));
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v21), CFSTR("CMMetMinutePercentile98"));
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 10656)), CFSTR("CMWorkoutType"));
  if (!*(_BYTE *)(a1 + 446) || !*(_BYTE *)(a1 + 447) || (v16 = 0.0, !*(_BYTE *)(a1 + 448)))
  {
    if (!*(_BYTE *)(a1 + 449) || (v16 = 1.0, !*(_BYTE *)(a1 + 448)))
      v16 = 0.0;
  }
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16), CFSTR("CMIsNearFall"));
  objc_msgSend(v2, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A15448()), CFSTR("isFallDetectionFeatureEnabled"));
  v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v2);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v18 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v19 = -[NSString UTF8String](v17, "UTF8String");
    *(_DWORD *)buf = 68289283;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    v29 = 2081;
    v30 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"User Profile Dictionnary\", \"content\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  return v2;
}

id sub_100A28AAC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v3 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received fall buffer flush packet", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Received fall buffer flush packet", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return objc_msgSend(*(id *)(v2 + 40), "async:", *(_QWORD *)(a1 + 32));
}

id sub_100A28C4C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unsigned int a5, double a6)
{
  uint64_t v9;
  NSData *v10;
  void *v11;
  _QWORD v13[8];
  char v14;

  v9 = *(_QWORD *)(a1 + 32);
  v10 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a4, a5);
  v11 = *(void **)(v9 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100A28CF0;
  v13[3] = &unk_102165B20;
  v14 = a2;
  v13[4] = v10;
  v13[5] = v9;
  *(double *)&v13[6] = a6;
  v13[7] = a3;
  return objc_msgSend(v11, "async:", v13);
}

id sub_100A28CF0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "logSensorType:data:startTime:timestamp:", *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(double *)(a1 + 48));
}

uint64_t sub_100A28D0C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client discovery is now considered complete\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_100A21E34(v1);
}

void sub_100A28DEC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLFallNotifier::onDarwinNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onDarwinNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onDarwinNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100A3594C((unsigned __int8 *)a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100A28F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

double sub_100A28FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  double result;
  NSObject *v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 10680);
  if (v2 && !sub_1006F5988(v2, 1800.0, 0.9))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MaxMETs, Done computing stats.\"}", (uint8_t *)&v6, 0x12u);
    }
    return sub_100A228AC(v1);
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v3 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MaxMETs, Queuing stats compute.\"}", (uint8_t *)&v6, 0x12u);
    }
  }
  return result;
}

uint64_t sub_100A29148()
{
  int v1;
  unsigned __int8 v2[4];
  unsigned int v3;

  v1 = 25;
  sub_1004AD1D8(v2, "FallMinimumOffChargerDurationKey", &v1, 0);
  v1 = v3;
  sub_1004AD1D8(v2, "FallDelayBeforeWristAndChargerGating", &v1, 0);
  return v3;
}

void sub_100A291A4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 368));
  dispatch_release(*(dispatch_object_t *)(v1 + 368));
  *(_QWORD *)(v1 + 368) = 0;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Wrist/Charger gating is now enabled\"}", (uint8_t *)v3, 0x12u);
  }
  *(_BYTE *)(v1 + 7610) = 1;
}

uint64_t sub_100A2929C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102165CE8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100A29310(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = off_102165A00;
  sub_100A29BAC((uint64_t)a1);
  v2 = a1[1366];
  a1[1366] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1365];
  a1[1365] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1364];
  a1[1364] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[1363];
  a1[1363] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1362];
  a1[1362] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1361];
  a1[1361] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[1360];
  a1[1360] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[1359];
  a1[1359] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a1[1358];
  a1[1358] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a1[1343];
  a1[1343] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = a1[1335];
  a1[1335] = 0;
  if (v12)
    sub_100A38DA0((uint64_t)(a1 + 1335), v12);
  sub_1011A389C(a1 + 1321);
  sub_1000F34E0(a1 + 1006);
  sub_10047F660(a1 + 962);
  sub_10047F660(a1 + 956);
  sub_100E3E6C8(a1 + 34);
  return sub_100A2929C((uint64_t)a1);
}

void sub_100A29488(_QWORD *a1)
{
  sub_100A29310(a1);
  operator delete();
}

uint64_t sub_100A294AC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0;
    sub_1018BF25C(buf, "FallStatsEnabled", &v7, 0);
    v3 = buf[1];
    v7 = 0;
    sub_1018BF25C(buf, "FallStatsPressureEnabled", &v7, 0);
    v4 = buf[1];
    v7 = 0;
    sub_1018BF25C(buf, "FallStatsSensorRecordingEnabled", &v7, 0);
    v5 = buf[1];
    *(_DWORD *)buf = 68289795;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 1025;
    v13 = v3;
    v14 = 1025;
    v15 = v4;
    v16 = 1025;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Data collection setting was toggled\", \"stats\":%{private}d, \"presssure\":%{private}d, \"sensor\":%{private}d}", buf, 0x24u);
  }
  sub_100A228AC(a1);
  return sub_100A1DA68(a1, 0);
}

void sub_100A2961C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  double v10;
  double v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  _WORD v30[8];
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  double v36;
  __int16 v37;
  int v38;

  v5 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    if (sub_100A1CE88(*(_QWORD *)(a1 + 32)))
    {
      objc_msgSend(a3, "timeIntervalSinceDate:", a2);
      v11 = v10;
      if (v10 < 30.0)
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v12 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          v32 = 0;
          v33 = 2082;
          v34 = "";
          v35 = 2050;
          v36 = v11;
          v37 = 1026;
          v38 = 30;
          v13 = "{\"msg%{public}.0s\":\"Flush handler being invoked - payload is too short to be sent\", \"actual duratio"
                "n\":\"%{public}f\", \"required duration\":%{public}d}";
          v14 = v12;
          v15 = 34;
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
          goto LABEL_24;
        }
        goto LABEL_24;
      }
      if (objc_msgSend(*(id *)(v5 + 160), "sendData:metaData:start:end:", a4, a5, a2, a3))
      {
        sub_100A21444(v5, v11);
        goto LABEL_24;
      }
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v18 = qword_10229FD98;
      if (!os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
LABEL_24:
        if (*(_BYTE *)(v5 + 446) && *(_BYTE *)(v5 + 447) && *(_BYTE *)(v5 + 448)
          || !*(_BYTE *)(v5 + 449)
          || !*(_BYTE *)(v5 + 448))
        {
          v19 = 0;
        }
        else
        {
          if (*(_QWORD *)(v5 + 10656))
          {
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v16 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289026;
              v32 = 0;
              v33 = 2082;
              v34 = "";
              v17 = "{\"msg%{public}.0s\":\"Avoiding tap to radar for near falls during workouts.\"}";
              goto LABEL_34;
            }
            goto LABEL_39;
          }
          v19 = 1;
        }
        v20 = *(void **)(v5 + 264);
        v21 = *(unsigned __int8 *)(v5 + 6868);
        v22 = v5;
        v23 = *(unsigned __int8 *)(v5 + 6869);
        v24 = sub_100A1CF60();
        BYTE2(v29) = sub_100A1CFC8();
        BYTE1(v29) = v24;
        LOBYTE(v29) = v19;
        v25 = v23;
        v5 = v22;
        objc_msgSend(v20, "trigger:metaData:start:end:response:resolution:isNearFall:isFallSubmissionAllowed:isNearFallSubmissionAllowed:", a4, a5, a2, a3, v21, v25, v29);
LABEL_37:
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        goto LABEL_39;
      }
      *(_DWORD *)buf = 68289026;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v13 = "{\"msg%{public}.0s\":\"Flush handler being invoked - payload was not sent because watch has not been unlocke"
            "d since last boot\"}";
    }
    else
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v18 = qword_10229FD98;
      if (!os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
        goto LABEL_24;
      *(_DWORD *)buf = 68289026;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v13 = "{\"msg%{public}.0s\":\"Flush handler being invoked - no payload to be sent as opt-in data collection is not enabled\"}";
    }
    v14 = v18;
    v15 = 18;
    goto LABEL_17;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v16 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v32 = 0;
    v33 = 2082;
    v34 = "";
    v17 = "{\"msg%{public}.0s\":\"Flush handler being invoked - no GM payload to be sent\"}";
LABEL_34:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x12u);
    goto LABEL_37;
  }
LABEL_39:
  v26 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Releasing sensor data collection OS transaction", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v30[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Releasing sensor data collection OS transaction", v30, 2);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::enableSensorRecording()_block_invoke", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }

  *(_QWORD *)(v5 + 120) = 0;
}

id sub_100A29B54(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3[8];
  double v4;

  v1 = *(_QWORD *)(a1 + 32);
  sub_1018BEA14(v3, "ServerCleanUpFileStalenessThreshold", &qword_101C03C08, 0);
  return objc_msgSend(*(id *)(v1 + 160), "cleanUp:", v4);
}

uint64_t sub_100A29BA0(uint64_t a1)
{
  return sub_100A21444(*(_QWORD *)(a1 + 32), 0.0);
}

uint64_t sub_100A29BAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t result;
  const char *v32;
  uint8_t *v33;
  _WORD v34[8];
  uint8_t buf[1640];

  sub_100A1FCA4(a1);

  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 168) = 0;

  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;

  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;

  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;

  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;

  *(_QWORD *)(a1 + 240) = 0;
  v2 = *(_QWORD *)(a1 + 10872);
  *(_QWORD *)(a1 + 10872) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 10896);
  *(_QWORD *)(a1 + 10896) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 10904);
  *(_QWORD *)(a1 + 10904) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 10912);
  *(_QWORD *)(a1 + 10912) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10880) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 10880) + 8), 2);
  v6 = *(_QWORD *)(a1 + 10880);
  *(_QWORD *)(a1 + 10880) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10888) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 10888) + 8), 4);
  v7 = *(_QWORD *)(a1 + 10888);
  *(_QWORD *)(a1 + 10888) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*(int *)(a1 + 280) >= 1)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Releasing power assertion due to Fall Notifier destruction.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v34[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Releasing power assertion due to Fall Notifier destruction.", v34, 2);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFallNotifier::shutdown()", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    sub_100E3E6F0(a1 + 272);
  }

  *(_QWORD *)(a1 + 264) = 0;
  objc_msgSend(*(id *)(a1 + 320), "invalidate");

  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_100A21E00(a1);
  v9 = (const void *)sub_1001FBB04(0);
  if (v9)
  {
    if (v10)
    {
      v11 = (uint64_t)v10;
      sub_1005D0A40((uint64_t)v10, 0);
      sub_1005D099C(v11, 0);
    }
  }
  *(_BYTE *)(a1 + 108) = 1;

  *(_QWORD *)(a1 + 256) = 0;
  if (sub_1001FBB04(0))
  {
    v12 = sub_1001FBB04(0);
    sub_1000A4A6C(v12, 10, *(_QWORD *)(a1 + 10752));
    v13 = *(_QWORD *)(a1 + 10752);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    *(_QWORD *)(a1 + 10752) = 0;
    v14 = sub_1001FBB04(0);
    sub_1000A4A6C(v14, 18, *(_QWORD *)(a1 + 10800));
    v15 = *(_QWORD *)(a1 + 10800);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    *(_QWORD *)(a1 + 10800) = 0;
    v16 = sub_1001FBB04(0);
    sub_1000A4A6C(v16, 23, *(_QWORD *)(a1 + 10808));
    v17 = *(_QWORD *)(a1 + 10808);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    *(_QWORD *)(a1 + 10808) = 0;
    v18 = sub_1001FBB04(0);
    sub_1000A4A6C(v18, 24, *(_QWORD *)(a1 + 10816));
    v19 = *(_QWORD *)(a1 + 10816);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    *(_QWORD *)(a1 + 10816) = 0;
    v20 = sub_1001FBB04(0);
    sub_1000A4A6C(v20, 25, *(_QWORD *)(a1 + 10824));
    v21 = *(_QWORD *)(a1 + 10824);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    *(_QWORD *)(a1 + 10824) = 0;
    v22 = sub_1001FBB04(0);
    sub_1000A4A6C(v22, 22, *(_QWORD *)(a1 + 10832));
    v23 = *(_QWORD *)(a1 + 10832);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    *(_QWORD *)(a1 + 10832) = 0;
    v24 = sub_1001FBB04(0);
    sub_1000A4A6C(v24, 21, *(_QWORD *)(a1 + 10856));
    v25 = *(_QWORD *)(a1 + 10856);
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    *(_QWORD *)(a1 + 10856) = 0;
    v26 = sub_1001FBB04(0);
    sub_1000A4A6C(v26, 26, *(_QWORD *)(a1 + 10840));
    v27 = *(_QWORD *)(a1 + 10840);
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    *(_QWORD *)(a1 + 10840) = 0;
  }
  sub_100A21268((id *)a1);
  notify_cancel(*(_DWORD *)(a1 + 112));

  *(_QWORD *)(a1 + 8072) = 0;
  *(_QWORD *)(a1 + 10640) = 0;

  *(_QWORD *)(a1 + 10648) = 0;
  objc_msgSend(*(id *)(a1 + 10672), "invalidate");

  v28 = *(_QWORD *)(a1 + 10680);
  *(_OWORD *)(a1 + 10672) = 0u;
  if (v28)
    sub_100A38DA0(a1 + 10680, v28);
  v29 = *(NSObject **)(a1 + 360);
  if (v29)
  {
    dispatch_source_cancel(v29);
    dispatch_release(*(dispatch_object_t *)(a1 + 360));
    *(_QWORD *)(a1 + 360) = 0;
  }
  v30 = *(NSObject **)(a1 + 368);
  if (v30)
  {
    dispatch_source_cancel(v30);
    dispatch_release(*(dispatch_object_t *)(a1 + 368));
    *(_QWORD *)(a1 + 368) = 0;
  }
  result = *(_QWORD *)(a1 + 128);
  if (result)
  {
    sub_10114A144();
    operator delete();
  }
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

void sub_100A2A134(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint8_t buf[4];
  _BYTE v38[18];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  if (*a3 == 2)
  {
    v6 = a4[13];
    v55 = a4[12];
    v56 = v6;
    v57 = *((_QWORD *)a4 + 28);
    v7 = a4[9];
    v51 = a4[8];
    v52 = v7;
    v8 = a4[10];
    v54 = a4[11];
    v53 = v8;
    v9 = a4[5];
    v47 = a4[4];
    v48 = v9;
    v10 = a4[6];
    v50 = a4[7];
    v49 = v10;
    v11 = a4[1];
    v43 = *a4;
    v44 = v11;
    v12 = a4[2];
    v46 = a4[3];
    v45 = v12;
    v13 = sub_100F72B18((uint64_t)&v43);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v14 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)v38 = v44;
      *(_WORD *)&v38[8] = 2048;
      *(_QWORD *)&v38[10] = v50;
      v39 = 2048;
      v40 = v13;
      v41 = 2048;
      v42 = v51;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Received a workout event of type: %ld, with workout of type: %ld, workout state: %ld and healthkit workout of type: %ld", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v29 = 134218752;
      v30 = v44;
      v31 = 2048;
      v32 = v50;
      v33 = 2048;
      v34 = v13;
      v35 = 2048;
      v36 = v51;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Received a workout event of type: %ld, with workout of type: %ld, workout state: %ld and healthkit workout of type: %ld", &v29, 42);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    if (v13 == 2)
    {
      if (!*(_QWORD *)(a1 + 10656))
      {
LABEL_30:
        sub_100308BCC(*(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 10656));
        return;
      }
      if (sub_100A16088(a1, v15))
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v20 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          v21 = *(_QWORD *)(a1 + 10656);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)v38 = v21;
          *(_WORD *)&v38[8] = 2048;
          *(_QWORD *)&v38[10] = (uint64_t)*(double *)&v43;
          v39 = 2048;
          v40 = (uint64_t)*((double *)&v43 + 1);
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating end stats with workout type: %ld, start time: %ld, end time: %ld", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v25 = *(_QWORD *)(a1 + 10656);
          v29 = 134218496;
          v30 = v25;
          v31 = 2048;
          v32 = (uint64_t)*(double *)&v43;
          v33 = 2048;
          v34 = (uint64_t)*((double *)&v43 + 1);
          LODWORD(v28) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Updating end stats with workout type: %ld, start time: %ld, end time: %ld", &v29, v28);
          v27 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        v22 = sub_100BFA9D4();
        sub_100BFC844(v22, *(_QWORD *)(a1 + 10656), *(double *)&v43, *((double *)&v43 + 1));
      }
      v17 = 0;
      *(_QWORD *)(a1 + 10656) = 0;
    }
    else
    {
      if (v13 != 1)
        goto LABEL_30;
      v16 = v50;
      if (*(_QWORD *)(a1 + 10656) == (_QWORD)v50)
        goto LABEL_30;
      *(_QWORD *)(a1 + 10656) = v50;
      if (v16 == 14)
        v17 = *((_DWORD *)a4 + 32);
      else
        v17 = 0;
    }
    *(_DWORD *)(a1 + 10664) = v17;
    sub_100A228AC(a1);
    sub_100A1DA68(a1, 0);
    goto LABEL_30;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v18 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)v38 = 0;
    *(_WORD *)&v38[4] = 2082;
    *(_QWORD *)&v38[6] = "";
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Received a un-subscribed notification\"}", buf, 0x12u);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
  }
  v19 = qword_10229FD98;
  if (os_signpost_enabled((os_log_t)qword_10229FD98))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)v38 = 0;
    *(_WORD *)&v38[4] = 2082;
    *(_QWORD *)&v38[6] = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received a un-subscribed notification", "{\"msg%{public}.0s\":\"Received a un-subscribed notification\"}", buf, 0x12u);
  }
}

void sub_100A2A6EC(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  CFAbsoluteTime Current;
  CFAbsoluteTime v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  NSObject *v22;
  std::string *p_p;
  NSObject *v24;
  NSObject *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  std::string *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  std::string __p;
  _QWORD v52[3];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int32x2_t v58;
  __int128 v59;
  double v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[32];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  std::string *v88;
  uint8_t buf[4];
  std::string *v90;

  if (*a3 == 4)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v7 = CFAbsoluteTimeGetCurrent();
    v8 = a4[9];
    v83 = a4[8];
    v84 = v8;
    v9 = a4[11];
    v85 = a4[10];
    v86 = v9;
    v10 = a4[5];
    v79 = a4[4];
    v80 = v10;
    v11 = a4[7];
    v81 = a4[6];
    v82 = v11;
    v12 = a4[1];
    v75 = *a4;
    v76 = v12;
    v13 = *(double *)(a1 + 7840) == 0.0;
    v14 = a4[3];
    v77 = a4[2];
    v78 = v14;
    if (!v13)
    {
      *(CFAbsoluteTime *)&v63 = Current;
      *((CFAbsoluteTime *)&v63 + 1) = v7;
      v15 = a4[9];
      *(_OWORD *)&v71[16] = a4[8];
      v72 = v15;
      v16 = a4[11];
      v73 = a4[10];
      v74 = v16;
      v17 = a4[5];
      v68 = a4[4];
      v69 = v17;
      v18 = a4[7];
      v70 = a4[6];
      *(_OWORD *)v71 = v18;
      v19 = a4[1];
      v64 = *a4;
      v65 = v19;
      v20 = a4[3];
      v66 = a4[2];
      v67 = v20;
      *((double *)&v65 + 1) = *((double *)&v65 + 1) - *(double *)(a1 + 7880);
      v21 = *(double *)v71 - *(double *)(a1 + 7968);
      *(double *)&v70 = *(double *)&v70 - *(double *)(a1 + 7952);
      *(double *)v71 = v21;
      v52[1] = CFAbsoluteTimeGetCurrent();
      v53 = v64;
      v54 = v65;
      v55 = v66;
      v56 = v67;
      v57 = v68;
      v58 = vrev64_s32(*(int32x2_t *)&v69);
      v59 = v70;
      v60 = v21;
      v52[0] = off_1021722C8;
      v61 = *(_OWORD *)&v71[8];
      v62 = *(_QWORD *)&v71[24];
      memset(&__p, 0, sizeof(__p));
      sub_100B21C50((uint64_t)v52, &__p);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v22 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v90 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v43 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v87 = 136315138;
        v88 = v43;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "%s", (const char *)&v87);
        v45 = (uint8_t *)v44;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v44);
        if (v45 != buf)
          free(v45);
      }
      if (((sub_100A1CE88(a1) & 1) != 0 || (sub_100A1CF60() & 1) != 0 || sub_100A1CFC8())
        && *(_QWORD *)(a1 + 7576))
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v24 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Logging odometer to logger.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          LOWORD(v87) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging odometer to logger.", &v87, 2);
          v49 = (uint8_t *)v48;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v48);
          if (v49 != buf)
            free(v49);
        }
        objc_msgSend(*(id *)(a1 + 136), "logOdometer:", &v63);
      }
      LOBYTE(v87) = 0;
      sub_1018BF25C(buf, "FallStatsEnabled", (unsigned __int8 *)&v87, 0);
      if (buf[1])
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v25 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Logging odometer for user studies.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          LOWORD(v87) = 0;
          LODWORD(v50) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging odometer for user studies.", &v87, v50);
          v47 = (uint8_t *)v46;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v46);
          if (v47 != buf)
            free(v47);
        }
        objc_msgSend(*(id *)(a1 + 216), "logData:", +[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", v52));
      }
      v26 = operator new(0xE0uLL);
      v27 = v73;
      v26[11] = v72;
      v26[12] = v27;
      v26[13] = v74;
      v28 = v70;
      v26[7] = v69;
      v26[8] = v28;
      v29 = *(_OWORD *)&v71[16];
      v26[9] = *(_OWORD *)v71;
      v26[10] = v29;
      v30 = v66;
      v26[3] = v65;
      v26[4] = v30;
      v31 = v68;
      v26[5] = v67;
      v26[6] = v31;
      v32 = v64;
      v26[1] = v63;
      v26[2] = v32;
      v33 = *(_QWORD *)(a1 + 8048);
      *(_QWORD *)v26 = v33;
      *((_QWORD *)v26 + 1) = a1 + 8048;
      *(_QWORD *)(v33 + 8) = v26;
      v34 = *(_QWORD *)(a1 + 8064) + 1;
      *(_QWORD *)(a1 + 8048) = v26;
      for (*(_QWORD *)(a1 + 8064) = v34; ; v34 = *(_QWORD *)(a1 + 8064))
      {
        v87 = 10;
        sub_1004AD1D8(buf, "FallOdometerHistorySize", &v87, 0);
        if (v34 <= (int)v90)
          break;
        v35 = *(uint64_t **)(a1 + 8056);
        v36 = *v35;
        *(_QWORD *)(v36 + 8) = v35[1];
        *(_QWORD *)v35[1] = v36;
        --*(_QWORD *)(a1 + 8064);
        operator delete(v35);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(CFAbsoluteTime *)(a1 + 7840) = Current;
    *(CFAbsoluteTime *)(a1 + 7848) = v7;
    v37 = v84;
    *(_OWORD *)(a1 + 7984) = v83;
    *(_OWORD *)(a1 + 8000) = v37;
    v38 = v86;
    *(_OWORD *)(a1 + 8016) = v85;
    *(_OWORD *)(a1 + 8032) = v38;
    v39 = v80;
    *(_OWORD *)(a1 + 7920) = v79;
    *(_OWORD *)(a1 + 7936) = v39;
    v40 = v82;
    *(_OWORD *)(a1 + 7952) = v81;
    *(_OWORD *)(a1 + 7968) = v40;
    v41 = v76;
    *(_OWORD *)(a1 + 7856) = v75;
    *(_OWORD *)(a1 + 7872) = v41;
    v42 = v78;
    *(_OWORD *)(a1 + 7888) = v77;
    *(_OWORD *)(a1 + 7904) = v42;
  }
}

void sub_100A2ADEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100A2AE18(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  char v33;
  _BYTE v34[13];
  __int128 v35;
  _BYTE v36[25];
  _BYTE buf[32];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];

  v4 = a1 + 7107;
  if ((!sub_100A10F50() || CFAbsoluteTimeGetCurrent() >= 654764400.0)
    && objc_msgSend(*(id *)(a1 + 136), "isLoggingEnabled"))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Logger manager was enabled whereas data collection date is passed - Disabling logger manager\"}", buf, 0x12u);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
    }
    v6 = qword_10229FD98;
    if (os_signpost_enabled((os_log_t)qword_10229FD98))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Logger manager was enabled whereas data collection date is passed - Disabling logger manager", "{\"msg%{public}.0s\":\"Logger manager was enabled whereas data collection date is passed - Disabling logger manager\"}", buf, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 136), "setLoggingEnabled:", 0);
    objc_msgSend(*(id *)(a1 + 136), "clearAllLogs");
    objc_msgSend(*(id *)(a1 + 160), "cleanUp:", 0.0);
    sub_100A21268((id *)a1);
  }
  *(_QWORD *)v34 = *a2;
  *(_QWORD *)&v34[5] = *(uint64_t *)((char *)a2 + 5);
  v7 = *((unsigned __int8 *)a2 + 13);
  v8 = *((_BYTE *)a2 + 14);
  v9 = *((_BYTE *)a2 + 15);
  v32 = *((_WORD *)a2 + 8);
  v33 = *((_BYTE *)a2 + 18);
  v10 = *(uint64_t *)((char *)a2 + 19);
  v11 = *(_OWORD *)((char *)a2 + 27);
  v12 = *(_OWORD *)((char *)a2 + 43);
  v13 = *(_OWORD *)((char *)a2 + 75);
  v38 = *(_OWORD *)((char *)a2 + 59);
  v39 = v13;
  *(_OWORD *)buf = v11;
  *(_OWORD *)&buf[16] = v12;
  v14 = *(_OWORD *)((char *)a2 + 91);
  v15 = *(_OWORD *)((char *)a2 + 107);
  v16 = *(_OWORD *)((char *)a2 + 123);
  *(_OWORD *)((char *)v42 + 10) = *(_OWORD *)((char *)a2 + 133);
  v41 = v15;
  v42[0] = v16;
  v40 = v14;
  v17 = *((unsigned __int8 *)a2 + 149);
  *(_OWORD *)&v36[9] = *(_OWORD *)((char *)a2 + 175);
  v35 = *(_OWORD *)((char *)a2 + 150);
  *(_OWORD *)v36 = *(_OWORD *)((char *)a2 + 166);
  v18 = *(_QWORD *)(a1 + 7304);
  if (v18 == v10 && *(unsigned __int8 *)(v4 + 327) == v17)
  {
    if (*(unsigned __int8 *)(v4 + 191) == v7)
      return;
    goto LABEL_28;
  }
  v19 = *(_QWORD *)(v4 + 6) != v10 || *(unsigned __int8 *)(v4 + 136) != v17;
  if (v18 != v10 || *(unsigned __int8 *)(v4 + 327) != v17)
  {
    if (!v19)
      return;
    LOBYTE(v21) = v9 & 1;
    goto LABEL_27;
  }
  v20 = *(unsigned __int8 *)(v4 + 191);
  v21 = v20 != v7;
  if (v20 != v7 || !v19)
  {
    if (!v19)
      goto LABEL_31;
LABEL_27:
    v22 = *a2;
    v23 = *((_DWORD *)a2 + 2);
    v24 = *((_BYTE *)a2 + 12);
    v25 = v41;
    *(_OWORD *)(a1 + 7185) = v40;
    *(_OWORD *)(a1 + 7201) = v25;
    *(_OWORD *)(a1 + 7217) = v42[0];
    *(_OWORD *)(a1 + 7227) = *(_OWORD *)((char *)v42 + 10);
    v26 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 7121) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 7137) = v26;
    v27 = v39;
    *(_OWORD *)(a1 + 7153) = v38;
    *(_OWORD *)(a1 + 7169) = v27;
    *(_OWORD *)(a1 + 7269) = *(_OWORD *)&v36[9];
    *(_OWORD *)(a1 + 7260) = *(_OWORD *)v36;
    *(_BYTE *)(a1 + 7106) = v24;
    *(_DWORD *)(a1 + 7102) = v23;
    *(_QWORD *)(a1 + 7094) = v22;
    *(_BYTE *)v4 = v7;
    *(_BYTE *)(v4 + 1) = v8;
    *(_BYTE *)(v4 + 2) = v9;
    *(_WORD *)(a1 + 7110) = v32;
    *(_BYTE *)(a1 + 7112) = v33;
    *(_QWORD *)(v4 + 6) = v10;
    *(_BYTE *)(v4 + 136) = v17;
    *(_OWORD *)(a1 + 7244) = v35;
    v28 = v8;
    sub_100A2B248(a1, a1 + 7094);
    sub_100A1592C(a1, a1 + 7094);
    v8 = v28;
    if ((v21 & 1) == 0)
      return;
    goto LABEL_28;
  }
  v21 = v9 & 1;
  if (v19)
    goto LABEL_27;
LABEL_31:
  if (!v21)
    return;
LABEL_28:
  *(_QWORD *)(a1 + 7285) = *(_QWORD *)v34;
  *(_QWORD *)(a1 + 7290) = *(_QWORD *)&v34[5];
  *(_BYTE *)(v4 + 191) = v7;
  *(_BYTE *)(v4 + 192) = v8;
  *(_BYTE *)(v4 + 193) = v9;
  *(_WORD *)(a1 + 7301) = v32;
  *(_BYTE *)(a1 + 7303) = v33;
  *(_QWORD *)(a1 + 7304) = v10;
  *(_OWORD *)(a1 + 7408) = v42[0];
  v29 = v40;
  *(_OWORD *)(a1 + 7392) = v41;
  *(_OWORD *)(a1 + 7376) = v29;
  v30 = v38;
  *(_OWORD *)(a1 + 7360) = v39;
  *(_OWORD *)(a1 + 7344) = v30;
  v31 = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 7328) = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 7312) = v31;
  *(_OWORD *)(a1 + 7418) = *(_OWORD *)((char *)v42 + 10);
  *(_BYTE *)(v4 + 327) = v17;
  *(_OWORD *)(a1 + 7460) = *(_OWORD *)&v36[9];
  *(_OWORD *)(a1 + 7451) = *(_OWORD *)v36;
  *(_OWORD *)(a1 + 7435) = v35;
  sub_100A1592C(a1, a1 + 7285);
}

void sub_100A2B248(uint64_t a1, uint64_t a2)
{
  float v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  float v13;
  _BOOL4 v14;
  _BOOL4 v15;
  NSObject *v16;
  NSObject *v17;
  std::string *v18;
  NSObject *v19;
  std::string *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  std::string *v27;
  const char *v28;
  uint8_t *v29;
  std::string *v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  uint8_t *v46;
  uint64_t v47;
  std::string v48;
  _WORD v49[116];
  void *__p[2];
  char v51;
  int v52;
  std::string *v53;
  uint8_t buf[4];
  std::string *v55;

  v4 = sub_100A2C2B8((float *)(a2 + 27));
  if ((*(_BYTE *)(a2 + 16) | ((LODWORD(v4) & 0x7FFFFFFFu) > 0x7F7FFFFF)) | ((*(unsigned __int8 *)(a2 + 18) | (v4 >= *(float *)(a1 + 7480))) != 0))
  {
    if (*(unsigned __int8 *)(a2 + 13) | *(unsigned __int8 *)(a2 + 2))
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v5 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Impact stats logged in previous state, will disregard duplicate logging.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v49[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Impact stats logged in previous state, will disregard duplicate logging.", v49, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v6);
LABEL_19:
        if (v7 != buf)
          free(v7);
      }
    }
    else
    {
      if (sub_100A1D194(a1))
      {
        if (*(int *)(a1 + 280) <= 0 && v4 >= *(float *)(a1 + 7488))
        {
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v10 = qword_10229FD98;
          if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Taking power assertion due to significant impact event subscription.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v49[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "Taking power assertion due to significant impact event subscription.", v49, 2);
            v46 = (uint8_t *)v45;
            sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v45);
            if (v46 != buf)
              free(v46);
          }
          sub_1015A2E04(__p, "Fall Stats triggered high resolution sensor read");
          sub_10002B684(a1 + 272, (uint64_t *)__p);
          if (v51 < 0)
            operator delete(__p[0]);
        }
        objc_msgSend(*(id *)(a1 + 320), "nextFireDelay");
        if (v11 == 1.79769313e308)
        {
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v12 = qword_10229FD98;
          if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Setting fail safe timer for 180s.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v49[0] = 0;
            LODWORD(v47) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Setting fail safe timer for 180s.", v49, v47);
            v42 = (uint8_t *)v41;
            sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v41);
            if (v42 != buf)
              free(v42);
          }
          objc_msgSend(*(id *)(a1 + 320), "setNextFireDelay:", 180.0);
        }
        v13 = *(float *)(a1 + 7476);
        if (v13 >= *(float *)(a1 + 7484))
          v13 = *(float *)(a1 + 7484);
        if (v4 >= v13)
        {
          if (*(_BYTE *)(a2 + 16))
            v14 = 1;
          else
            v14 = *(_BYTE *)(a2 + 15) != 0;
        }
        else
        {
          v14 = 0;
        }
        if (*(_DWORD *)(a1 + 7640) != 1)
          v14 = 0;
        v15 = (*(unsigned __int8 *)(a2 + 18) | v14) != 0;
        if ((sub_100A2C370() & v15) == 1)
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10896) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 10896) + 8), 4, 0);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          v16 = qword_10229FD98;
          if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "High impact event HR subscription.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_102165C08);
            v49[0] = 0;
            LODWORD(v47) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "High impact event HR subscription.", v49, v47);
            v44 = (uint8_t *)v43;
            sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v43);
            if (v44 != buf)
              free(v44);
          }
        }
      }
      sub_100A37FC8((uint64_t)v49, a2);
      memset(&v48, 0, sizeof(v48));
      sub_100B1FDF4((uint64_t)v49, &v48);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v17 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        v18 = &v48;
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = (std::string *)v48.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v55 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v27 = &v48;
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = (std::string *)v48.__r_.__value_.__r.__words[0];
        v52 = 136315138;
        v53 = v27;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "%s", (const char *)&v52);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      {
        *v48.__r_.__value_.__l.__data_ = 0;
        v48.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v48.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v48.__r_.__value_.__s + 23) = 0;
      }
      sub_100B1FEB4((uint64_t)v49, &v48);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v19 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        v20 = &v48;
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v20 = (std::string *)v48.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v55 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v30 = &v48;
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v30 = (std::string *)v48.__r_.__value_.__r.__words[0];
        v52 = 136315138;
        v53 = v30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "%s", (const char *)&v52);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      if (*(_BYTE *)(a2 + 16))
        *(_BYTE *)(a1 + 449) = 1;
      if ((sub_100A1CE88(a1) & 1) != 0 || (sub_100A1CF60() & 1) != 0 || sub_100A1CFC8())
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v21 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Logging impact stats to logger.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          LOWORD(v52) = 0;
          LODWORD(v47) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging impact stats to logger.", &v52, v47);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        objc_msgSend(*(id *)(a1 + 136), "logImpactEvent:", a2);
      }
      LOBYTE(v52) = 0;
      sub_1018BF25C(buf, "FallStatsEnabled", (unsigned __int8 *)&v52, 0);
      if (buf[1])
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v23 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Logging impact stats for user studies.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          LOWORD(v52) = 0;
          LODWORD(v47) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging impact stats for user studies.", &v52, v47);
          v36 = (uint8_t *)v35;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
        objc_msgSend(*(id *)(a1 + 168), "logData:", +[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", v49));
      }
      if (sub_100A16088(a1, v22))
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v24 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Logging impact stats to AWD", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          LOWORD(v52) = 0;
          LODWORD(v47) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging impact stats to AWD", &v52, v47);
          v38 = (uint8_t *)v37;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v37);
          if (v38 != buf)
            free(v38);
        }
        v25 = sub_100BFA9D4();
        sub_100BFAD94(v25, a2);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v26 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Logging impact stats to CoreAnalytics", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_102165C08);
          LOWORD(v52) = 0;
          LODWORD(v47) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging impact stats to CoreAnalytics", &v52, v47);
          v40 = (uint8_t *)v39;
          sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v39);
          if (v40 != buf)
            free(v40);
        }
        sub_10114A574(*(_QWORD *)(a1 + 128), a2);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Impact does not meet logging threshold requirement, will disregard stats.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v49[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Impact does not meet logging threshold requirement, will disregard stats.", v49, 2);
      v7 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v9);
      goto LABEL_19;
    }
  }
}

void sub_100A2C268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_100A2C2B8(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v2 = *a1;
  v1 = a1[1];
  if (v1 >= 0.0)
    v3 = a1[1];
  else
    v3 = -v1;
  if (v2 >= 0.0)
    v4 = *a1;
  else
    v4 = -v2;
  if (v2 < 0.0)
    v2 = -v2;
  if (v1 < 0.0)
    v1 = -v1;
  if (v3 <= v4)
    v1 = v2;
  v6 = a1[2];
  v5 = a1[3];
  if (v5 >= 0.0)
    v7 = a1[3];
  else
    v7 = -v5;
  if (v6 >= 0.0)
    v8 = a1[2];
  else
    v8 = -v6;
  if (v7 <= v8)
  {
    v5 = a1[2];
    if (v6 < 0.0)
      v5 = -v6;
  }
  else if (v5 < 0.0)
  {
    v5 = -v5;
  }
  v10 = a1[4];
  v9 = a1[5];
  if (v9 >= 0.0)
    v11 = a1[5];
  else
    v11 = -v9;
  if (v10 >= 0.0)
    v12 = a1[4];
  else
    v12 = -v10;
  if (v10 < 0.0)
    v10 = -v10;
  if (v9 < 0.0)
    v9 = -v9;
  if (v11 <= v12)
    v9 = v10;
  return sqrtf((float)((float)(v5 * v5) + (float)(v1 * v1)) + (float)(v9 * v9));
}

uint64_t sub_100A2C370()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3[3];

  v0 = atomic_load((unsigned __int8 *)&qword_1023063F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1023063F8))
  {
    v2 = 0;
    sub_1018BF25C(v3, "FallStatsHeartRateEnabled", &v2, 0);
    byte_1023063F4 = v3[1];
    __cxa_guard_release(&qword_1023063F8);
  }
  return byte_1023063F4;
}

void sub_100A2C3EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023063F8);
  _Unwind_Resume(a1);
}

void sub_100A2C404(uint64_t a1, uint64_t a2, float a3)
{
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  float v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  double v23;

  if (sub_100A16088(a1, a2))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Logging age group to AWD and CoreAnalytics", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging age group to AWD and CoreAnalytics", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logUserAge(const float)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    if (a3 != 30.0)
    {
      v6 = (int)a3;
      if ((int)a3 >= 88)
        v7 = 88;
      else
        v7 = (int)a3;
      if (v6 <= 64)
        v8 = 5 * (v6 / 5);
      else
        v8 = v7;
      v9 = (float)v8;
      v10 = a1 + 10568;
      sub_1011A3974(v10, (int)(float)v8);
      sub_1011A4054(v10);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v11 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289283;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 1025;
        LODWORD(v23) = a3 >= 65.0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Updating user age group\", \"belongsToOlderGroup\":%{private}hhd}", buf, 0x18u);
      }
      v12 = sub_100BFA9D4();
      sub_100BFB06C(v12, a3 >= 65.0);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v13 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289283;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2049;
        v23 = v9;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Updating user age bin\", \"value\":\"%{private}f\"}", buf, 0x1Cu);
      }
      v14 = sub_100BFA9D4();
      sub_100BFC434(v14, v9);
    }
  }
}

uint64_t sub_100A2C758(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(v1 + 240))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v2 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_QWORD *)(v1 + 10656);
      v4[0] = 68289282;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2050;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Impact during\", \"Workout type \":%{public}llu}", (uint8_t *)v4, 0x1Cu);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 240) + 16))();
  }
  return result;
}

uint64_t sub_100A2C884(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(v1 + 240))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v2 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_QWORD *)(v1 + 10656);
      v4[0] = 68289282;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2050;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Impact during\", \"Workout type \":%{public}llu}", (uint8_t *)v4, 0x1Cu);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 240) + 16))();
  }
  return result;
}

void sub_100A2C9B0(uint64_t a1, __int128 *a2)
{
  unsigned __int8 *v2;
  _OWORD *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;

  v2 = (unsigned __int8 *)(a1 + 6725);
  if (*(_BYTE *)(a1 + 7828))
  {
    v5 = (_OWORD *)(a1 + 6712);
    if (*(_QWORD *)(a1 + 6731) == *(_QWORD *)((char *)a2 + 19))
    {
      if (*v2 == *((unsigned __int8 *)a2 + 13))
      {
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v6 = qword_10229FD98;
        if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
        {
          v7 = *(_QWORD *)((char *)a2 + 19);
          v8 = *((unsigned __int8 *)a2 + 149);
          v9 = *(_QWORD *)((char *)a2 + 166);
          v10 = *(_QWORD *)((char *)a2 + 158);
          v11 = *((unsigned __int8 *)a2 + 13);
          v12 = *((unsigned __int8 *)a2 + 156);
          v13 = *((unsigned __int8 *)a2 + 157);
          v14 = v2[177];
          v53 = 68291331;
          v54 = 0;
          v55 = 2082;
          v56 = "";
          v57 = 2082;
          v58 = "downstream";
          v59 = 2050;
          v60 = v7;
          v61 = 1025;
          v62 = v8;
          v63 = 2049;
          v64 = v9;
          v65 = 2049;
          v66 = v10;
          v67 = 1025;
          v68 = v11;
          v69 = 1025;
          v70 = v12;
          v71 = 1025;
          v72 = v13;
          v73 = 1025;
          v74 = v14;
          v15 = "{\"msg%{public}.0s\":\"Notifier - Received anomaly event notification (already seen it)\", \"direction\""
                ":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u, \"anom"
                "aly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"response"
                "\":%{private}d, \"resolution\":%{private}d, \"sos_state\":%{private}d}";
LABEL_12:
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v53, 0x58u);
          return;
        }
        return;
      }
      v33 = *(_WORD *)(a1 + 6868);
      v34 = *(double *)(a1 + 6870);
      v35 = a2[8];
      v36 = a2[9];
      v37 = a2[10];
      *(_OWORD *)(a1 + 6887) = *(__int128 *)((char *)a2 + 175);
      *(_OWORD *)(a1 + 6856) = v36;
      *(_OWORD *)(a1 + 6872) = v37;
      v38 = *a2;
      v39 = a2[1];
      v40 = a2[3];
      *(_OWORD *)(a1 + 6744) = a2[2];
      *(_OWORD *)(a1 + 6760) = v40;
      *v5 = v38;
      *(_OWORD *)(a1 + 6728) = v39;
      v41 = a2[4];
      v42 = a2[5];
      v43 = a2[7];
      *(_OWORD *)(a1 + 6808) = a2[6];
      *(_OWORD *)(a1 + 6824) = v43;
      *(_OWORD *)(a1 + 6776) = v41;
      *(_OWORD *)(a1 + 6792) = v42;
      *(_OWORD *)(a1 + 6840) = v35;
      *(_WORD *)(a1 + 6868) = v33;
      if (*(double *)(a1 + 6870) >= v34)
        v34 = *(double *)(a1 + 6870);
      *(double *)(a1 + 6870) = v34;
    }
    else
    {
      v24 = *a2;
      v25 = a2[1];
      v26 = a2[3];
      *(_OWORD *)(a1 + 6744) = a2[2];
      *(_OWORD *)(a1 + 6760) = v26;
      *v5 = v24;
      *(_OWORD *)(a1 + 6728) = v25;
      v27 = a2[4];
      v28 = a2[5];
      v29 = a2[7];
      *(_OWORD *)(a1 + 6808) = a2[6];
      *(_OWORD *)(a1 + 6824) = v29;
      *(_OWORD *)(a1 + 6776) = v27;
      *(_OWORD *)(a1 + 6792) = v28;
      v30 = a2[8];
      v31 = a2[9];
      v32 = a2[10];
      *(_OWORD *)(a1 + 6887) = *(__int128 *)((char *)a2 + 175);
      *(_OWORD *)(a1 + 6856) = v31;
      *(_OWORD *)(a1 + 6872) = v32;
      *(_OWORD *)(a1 + 6840) = v30;
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v44 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *(_QWORD *)(v2 + 6);
      v46 = v2[136];
      v47 = *(_QWORD *)(v2 + 153);
      v48 = *(_QWORD *)(v2 + 145);
      v49 = *v2;
      v50 = v2[143];
      v51 = v2[144];
      v52 = v2[177];
      v53 = 68291331;
      v54 = 0;
      v55 = 2082;
      v56 = "";
      v57 = 2082;
      v58 = "downstream";
      v59 = 2050;
      v60 = v45;
      v61 = 1025;
      v62 = v46;
      v63 = 2049;
      v64 = v47;
      v65 = 2049;
      v66 = v48;
      v67 = 1025;
      v68 = v49;
      v69 = 1025;
      v70 = v50;
      v71 = 1025;
      v72 = v51;
      v73 = 1025;
      v74 = v52;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Notifier - Received anomaly event notification\", \"direction\":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"response\":%{private}d, \"resolution\":%{private}d, \"sos_state\":%{private}d}", (uint8_t *)&v53, 0x58u);
    }
    sub_100A1DA68(a1, 0);
    sub_100A1DFE0(a1, (uint64_t)v5, 0);
    return;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v6 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(v2 + 6);
    v17 = v2[136];
    v18 = *(_QWORD *)(v2 + 153);
    v19 = *(_QWORD *)(v2 + 145);
    v20 = *v2;
    v21 = v2[143];
    v22 = v2[144];
    v23 = v2[177];
    v53 = 68291331;
    v54 = 0;
    v55 = 2082;
    v56 = "";
    v57 = 2082;
    v58 = "downstream";
    v59 = 2050;
    v60 = v16;
    v61 = 1025;
    v62 = v17;
    v63 = 2049;
    v64 = v18;
    v65 = 2049;
    v66 = v19;
    v67 = 1025;
    v68 = v20;
    v69 = 1025;
    v70 = v21;
    v71 = 1025;
    v72 = v22;
    v73 = 1025;
    v74 = v23;
    v15 = "{\"msg%{public}.0s\":\"Notifier - Received anomaly event notification while detector is disabled - ignoring\","
          " \"direction\":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u"
          ", \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"respon"
          "se\":%{private}d, \"resolution\":%{private}d, \"sos_state\":%{private}d}";
    goto LABEL_12;
  }
}

unsigned __int8 *sub_100A2CDF0(unsigned __int8 *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  unsigned __int8 v14[16];
  uint8_t buf[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v5 = (uint64_t)result;
  v6 = (char *)(result + 10736);
  v7 = *((_QWORD *)result + 946);
  if (!v7)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Receiving Accel800", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      *(_WORD *)v14 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Receiving Accel800", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataAccel800(const CLMotionCoprocessorInterface::NotificationData *, unsigned int)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *(CFAbsoluteTime *)(v5 + 6704) = CFAbsoluteTimeGetCurrent();
    if ((sub_100A1CE88(v5) & 1) != 0 || (sub_100A1CF60() & 1) != 0)
      v9 = 1;
    else
      v9 = sub_100A1CFC8();
    *v6 = v9;
    v14[0] = 0;
    result = sub_1018BF25C(buf, "FallStatsEnabled", v14, 0);
    v6[1] = buf[1];
    v6[2] = 0;
    v7 = *(_QWORD *)(v5 + 7568);
  }
  *(_QWORD *)(v5 + 7568) = v7 + a3;
  if (a3)
  {
    v10 = a3;
    do
    {
      if (*v6)
        result = (unsigned __int8 *)objc_msgSend(*(id *)(v5 + 136), "logImpactSensorData:", a2);
      if (v6[1])
      {
        v11 = a2[1];
        v16 = *a2;
        v17 = v11;
        v19 = *(uint64_t *)((char *)a2 + 17);
        v20 = *(_DWORD *)((char *)a2 + 25);
        *(_QWORD *)buf = off_102171E78;
        v18 = *(uint64_t *)((char *)a2 + 33);
        result = (unsigned __int8 *)objc_msgSend(*(id *)(v5 + 184), "logData:", +[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", buf));
      }
      if (v6[2])
      {
        objc_msgSend(*(id *)(v5 + 144), "logAccel800:", a2);
        result = (unsigned __int8 *)objc_msgSend(*(id *)(v5 + 152), "logAccel800:", a2);
        if (!*(_BYTE *)(v5 + 450))
        {
          *(_BYTE *)(v5 + 450) = 1;
          result = (unsigned __int8 *)objc_msgSend(*(id *)(v5 + 344), "setNextFireDelay:", 1.0);
        }
      }
      a2 += 28;
      --v10;
    }
    while (v10);
  }
  return result;
}

unsigned __int8 *sub_100A2D0D8(unsigned __int8 *result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  unsigned __int8 v14[16];
  uint8_t buf[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  LODWORD(v3) = a3;
  v5 = (uint64_t)result;
  v6 = (char *)(result + 10736);
  v7 = *((_QWORD *)result + 950);
  if (!v7)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Receiving Hgal", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      *(_WORD *)v14 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Receiving Hgal", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataHgal(const CLMotionCoprocessorInterface::NotificationData *, unsigned int)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    if ((sub_100A1CE88(v5) & 1) != 0 || (sub_100A1CF60() & 1) != 0)
      v9 = 1;
    else
      v9 = sub_100A1CFC8();
    *v6 = v9;
    v14[0] = 0;
    result = sub_1018BF25C(buf, "FallStatsEnabled", v14, 0);
    v6[1] = buf[1];
    v6[2] = 0;
    v7 = *(_QWORD *)(v5 + 7600);
  }
  *(_QWORD *)(v5 + 7600) = v7 + v3;
  if ((_DWORD)v3)
  {
    v3 = v3;
    v10 = (uint64_t *)(a2 + 17);
    do
    {
      if (v6[1])
      {
        v11 = *(uint64_t *)((char *)v10 - 9);
        v16 = *(uint64_t *)((char *)v10 - 17);
        v17 = v11;
        v19 = *v10;
        v20 = *((_DWORD *)v10 + 2);
        *(_QWORD *)buf = off_102172008;
        v18 = v10[2];
        result = (unsigned __int8 *)objc_msgSend(*(id *)(v5 + 232), "logData:", +[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", buf));
      }
      v10 += 28;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_100A2D36C(uint64_t a1, uint64_t *a2)
{
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  uint8_t buf[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (!(_BYTE)dword_1023063F0++)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Receiving sensor data due to high impact", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Receiving sensor data due to high impact", v14, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataGyro200(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  if (!*(_QWORD *)(a1 + 7576))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v6 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Receiving Gyro200", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Receiving Gyro200", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataGyro200(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  ++*(_QWORD *)(a1 + 7576);
  if (*(_BYTE *)(a1 + 10736))
    objc_msgSend(*(id *)(a1 + 136), "logImpactSensorData:", a2);
  if (*(_BYTE *)(a1 + 10737))
  {
    v7 = a2[1];
    v16 = *a2;
    v17 = v7;
    v8 = *(uint64_t *)((char *)a2 + 17);
    v20 = *(_DWORD *)((char *)a2 + 25);
    *(_QWORD *)buf = off_102171EE8;
    v18 = *(uint64_t *)((char *)a2 + 33);
    v19 = v8;
    objc_msgSend(*(id *)(a1 + 184), "logData:", +[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", buf));
  }
  if (*(_BYTE *)(a1 + 10738))
    objc_msgSend(*(id *)(a1 + 144), "logGyro200:", a2);
}

void sub_100A2D6E8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[8];
  uint8_t buf[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 7584))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v4 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Receiving DeviceMotion100", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Receiving DeviceMotion100", v12, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataQuaternion6(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    if (!*(_QWORD *)(a1 + 120))
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v5 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Creating sensor data collection OS transaction", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v12[0] = 0;
        LODWORD(v11) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Creating sensor data collection OS transaction", v12, v11);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataQuaternion6(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      *(_QWORD *)(a1 + 120) = os_transaction_create("com.apple.locationd.fall.logging");
    }
  }
  ++*(_QWORD *)(a1 + 7584);
  if (*(_BYTE *)(a1 + 10736))
    objc_msgSend(*(id *)(a1 + 136), "logImpactSensorData:", a2);
  if (*(_BYTE *)(a1 + 10737))
  {
    v6 = a2[1];
    v14 = *a2;
    v15 = v6;
    v17 = *(_OWORD *)((char *)a2 + 17);
    *(_QWORD *)buf = off_102171F40;
    v16 = *(uint64_t *)((char *)a2 + 33);
    objc_msgSend(*(id *)(a1 + 184), "logData:", +[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", buf));
  }
  if (*(_BYTE *)(a1 + 10738))
    objc_msgSend(*(id *)(a1 + 144), "logDeviceMotion:", a2);
}

void sub_100A2DA60(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  NSObject *v5;
  std::string *p_p;
  NSObject *v7;
  std::string *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  std::string __p;
  _QWORD v14[5];
  __int128 v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  __int128 v23;
  int v24;
  std::string *v25;
  uint8_t buf[4];
  std::string *v27;

  v14[0] = off_102171FB0;
  v21 = 3;
  v4 = *(_QWORD *)((char *)a2 + 76);
  v14[1] = *(_QWORD *)((char *)a2 + 68);
  v14[3] = v4;
  v14[4] = *((_QWORD *)a2 + 2);
  v15 = *a2;
  v16 = *((_WORD *)a2 + 12);
  v17 = *(_QWORD *)((char *)a2 + 26);
  v18 = *(_DWORD *)((char *)a2 + 34);
  v19 = *(_DWORD *)((char *)a2 + 38);
  v20 = *(_DWORD *)((char *)a2 + 42);
  v22 = *(_DWORD *)((char *)a2 + 46);
  v23 = *(__int128 *)((char *)a2 + 50);
  memset(&__p, 0, sizeof(__p));
  sub_100B2160C((uint64_t)v14, &__p);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v5 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v27 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v24 = 136315138;
    v25 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "%s", (const char *)&v24);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onFalsePositiveSuppressionFeatures(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (*(_BYTE *)(a1 + 10736))
    objc_msgSend(*(id *)(a1 + 136), "logFalsePositiveSuppressionFeatures:", a2);
  if (*(_BYTE *)(a1 + 10737))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v7 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Logging false positive suppression features.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v24) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Logging false positive suppression features.", &v24, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onFalsePositiveSuppressionFeatures(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    objc_msgSend(*(id *)(a1 + 184), "logData:", +[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", v14));
  }
  if (*(_BYTE *)(a1 + 10738))
    objc_msgSend(*(id *)(a1 + 144), "logSuppressionFeartures:", a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100A2DE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A2DE78(uint64_t a1, uint8_t *a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t i;
  const char *v7;
  _QWORD *v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[10];
  char v23;
  uint64_t v24;
  _BYTE v25[12];
  char v26;
  int v27;
  _BYTE *v28;
  uint8_t buf[8];
  char v30;

  result = sub_100A16088(a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v20);
    v4 = sub_100263F7C(&v21, (uint64_t)"type,", 5);
    buf[0] = *a2;
    v5 = sub_100263F7C(v4, (uint64_t)buf, 1);
    sub_100263F7C(v5, (uint64_t)",bins,", 6);
    for (i = 1; i != 25; ++i)
    {
      if (i == 1)
        v7 = "";
      else
        v7 = " ";
      v8 = sub_100263F7C(&v21, (uint64_t)v7, i != 1);
      std::ostream::operator<<(v8, (char)a2[i]);
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v9 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Logging Max Accel Norm feature distribution to awd.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      *(_WORD *)v25 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Logging Max Accel Norm feature distribution to awd.", v25, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionMaxAccelNorm(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v10 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str(buf, v22);
      v11 = v30 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s", v25, 0xCu);
      if (v30 < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v16 = qword_10229FD98;
      std::stringbuf::str(v25, v22);
      if (v26 >= 0)
        v17 = v25;
      else
        v17 = *(_BYTE **)v25;
      v27 = 136315138;
      v28 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "%s", (const char *)&v27);
      v19 = v18;
      if (v26 < 0)
        operator delete(*(void **)v25);
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionMaxAccelNorm(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    v12 = sub_100BFA9D4();
    sub_100A2E2E8(v12, a2);
    *(_QWORD *)((char *)v20
    v21 = v13;
    if (v23 < 0)
      operator delete((void *)v22[8]);
    std::streambuf::~streambuf(v22);
    return std::ios::~ios(&v24);
  }
  return result;
}

void sub_100A2E2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A2E2E8(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;

  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *a2;
  if (v5 == 1)
  {
    v7 = 0;
    *(_BYTE *)(a1 + 396) = 1;
    do
    {
      *(_WORD *)(a1 + 397 + 2 * v7) += (char)a2[v7 + 1];
      ++v7;
    }
    while (v7 != 24);
  }
  else if (*a2)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v11, 0x18u);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
    }
    v9 = qword_10229FD98;
    if (os_signpost_enabled((os_log_t)qword_10229FD98))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unsupported update for feature distribution type", "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v11, 0x18u);
    }
  }
  else
  {
    v6 = 0;
    *(_BYTE *)(a1 + 344) = 0;
    do
    {
      *(_WORD *)(a1 + 345 + 2 * v6) += (char)a2[v6 + 1];
      ++v6;
    }
    while (v6 != 24);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100A2E518(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100A2E524(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t i;
  const char *v7;
  _QWORD *v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[10];
  char v23;
  uint64_t v24;
  _BYTE v25[12];
  char v26;
  int v27;
  _BYTE *v28;
  uint8_t buf[8];
  char v30;

  result = sub_100A16088(a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v20);
    v4 = sub_100263F7C(&v21, (uint64_t)"type,", 5);
    buf[0] = *a2;
    v5 = sub_100263F7C(v4, (uint64_t)buf, 1);
    sub_100263F7C(v5, (uint64_t)",bins,", 6);
    for (i = 1; i != 35; ++i)
    {
      if (i == 1)
        v7 = "";
      else
        v7 = " ";
      v8 = sub_100263F7C(&v21, (uint64_t)v7, i != 1);
      std::ostream::operator<<(v8, (char)a2[i]);
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v9 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Logging Jerk Vector Magnitude feature distribution to awd.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      *(_WORD *)v25 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Logging Jerk Vector Magnitude feature distribution to awd.", v25, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionJerkVectorMagnitude(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v10 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str(buf, v22);
      v11 = v30 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s", v25, 0xCu);
      if (v30 < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v16 = qword_10229FD98;
      std::stringbuf::str(v25, v22);
      if (v26 >= 0)
        v17 = v25;
      else
        v17 = *(_BYTE **)v25;
      v27 = 136315138;
      v28 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "%s", (const char *)&v27);
      v19 = v18;
      if (v26 < 0)
        operator delete(*(void **)v25);
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionJerkVectorMagnitude(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    v12 = sub_100BFA9D4();
    sub_100A2E994(v12, a2);
    *(_QWORD *)((char *)v20
    v21 = v13;
    if (v23 < 0)
      operator delete((void *)v22[8]);
    std::streambuf::~streambuf(v22);
    return std::ios::~ios(&v24);
  }
  return result;
}

void sub_100A2E964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A2E994(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;

  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *a2;
  if (v5 == 3)
  {
    v7 = 0;
    *(_BYTE *)(a1 + 520) = 3;
    do
    {
      *(_WORD *)(a1 + 521 + 2 * v7) += (char)a2[v7 + 1];
      ++v7;
    }
    while (v7 != 34);
  }
  else if (v5 == 2)
  {
    v6 = 0;
    *(_BYTE *)(a1 + 448) = 2;
    do
    {
      *(_WORD *)(a1 + 449 + 2 * v6) += (char)a2[v6 + 1];
      ++v6;
    }
    while (v6 != 34);
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v11, 0x18u);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
    }
    v9 = qword_10229FD98;
    if (os_signpost_enabled((os_log_t)qword_10229FD98))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unsupported update for feature distribution type", "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v11, 0x18u);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100A2EBCC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100A2EBD8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  const char *v8;
  _QWORD *v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;
  _BYTE v26[12];
  char v27;
  int v28;
  _BYTE *v29;
  uint8_t buf[8];
  char v31;

  result = sub_100A16088(a1, a2);
  if ((_DWORD)result)
  {
    v4 = *(__int16 *)(a2 + 101);
    sub_100263E50((uint64_t)v21);
    v5 = sub_100263F7C(&v22, (uint64_t)"type,", 5);
    buf[0] = *(_BYTE *)a2;
    v6 = sub_100263F7C(v5, (uint64_t)buf, 1);
    sub_100263F7C(v6, (uint64_t)",bins,", 6);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (i)
          v8 = " ";
        else
          v8 = "";
        v9 = sub_100263F7C(&v22, (uint64_t)v8, i != 0);
        std::ostream::operator<<(v9, *(__int16 *)(a2 + 1 + 2 * i));
      }
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v10 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Logging Max Abs XYZ feature distribution to awd.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      *(_WORD *)v26 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Logging Max Abs XYZ feature distribution to awd.", v26, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionMaxAbsXYZ(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v11 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str(buf, v23);
      v12 = v31 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v26 = 136315138;
      *(_QWORD *)&v26[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s", v26, 0xCu);
      if (v31 < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v17 = qword_10229FD98;
      std::stringbuf::str(v26, v23);
      if (v27 >= 0)
        v18 = v26;
      else
        v18 = *(_BYTE **)v26;
      v28 = 136315138;
      v29 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 2, "%s", (const char *)&v28);
      v20 = v19;
      if (v27 < 0)
        operator delete(*(void **)v26);
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionMaxAbsXYZ(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
    v13 = sub_100BFA9D4();
    sub_100A2F054(v13, (unsigned __int8 *)a2);
    *(_QWORD *)((char *)v21
    v22 = v14;
    if (v24 < 0)
      operator delete((void *)v23[8]);
    std::streambuf::~streambuf(v23);
    return std::ios::~ios(&v25);
  }
  return result;
}

void sub_100A2F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A2F054(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *a2;
  if (v5 == 4)
  {
    v6 = *(__int16 *)(a2 + 101);
    *(_BYTE *)(a1 + 592) = 4;
    if (v6)
    {
      v7 = (__int16 *)(a2 + 1);
      do
      {
        v8 = *v7++;
        ++*(_WORD *)(a1 + 593 + 2 * v8);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v9 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
    {
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v12, 0x18u);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
    }
    v10 = qword_10229FD98;
    if (os_signpost_enabled((os_log_t)qword_10229FD98))
    {
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unsupported update for feature distribution type", "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v12, 0x18u);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100A2F24C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100A2F258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66280;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 544) + 24))(v2);
}

uint64_t sub_100A2F2AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66284);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F308(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66288);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F364(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66292);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F3C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66296;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 528) + 24))(v2);
}

uint64_t sub_100A2F414(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66304);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F470(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66300);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F4CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66312;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 512) + 24))(v2);
}

uint64_t sub_100A2F520(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66308);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F57C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66316);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F5D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66320);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F634(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66324);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66328;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 496) + 24))(v2);
}

uint64_t sub_100A2F6E4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66332);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F740(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66336);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F79C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66340);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F7F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66344;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 480) + 24))(v2);
}

uint64_t sub_100A2F84C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66348);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F8A8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66352);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F904(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66356);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2F960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66360;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 464) + 24))(v2);
}

uint64_t sub_100A2F9B4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66364);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FA10(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66368);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FA6C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66372);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FAC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66376;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 448) + 24))(v2);
}

uint64_t sub_100A2FB1C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66380);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FB78(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66384);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FBD4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66388);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FC30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66392;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 432) + 24))(v2);
}

uint64_t sub_100A2FC84(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66396);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FCE0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66400);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FD3C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66404);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FD98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66408;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 416) + 24))(v2);
}

uint64_t sub_100A2FDEC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66412);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FE48(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66416);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FEA4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66420);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FF00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 66424;
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 400) + 24))(v2);
}

uint64_t sub_100A2FF54(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66428);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A2FFB0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66432);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A3000C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66436);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100A30068(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66444);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

NSDictionary *sub_100A300C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned int v10;
  double v11;
  int v12;
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[10];
  _QWORD v18[10];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[7];
  _QWORD v22[7];
  _QWORD v23[12];
  _QWORD v24[12];
  _QWORD v25[6];
  _QWORD v26[2];
  NSDictionary *v27;
  NSDictionary *v28;
  NSDictionary *v29;
  NSDictionary *v30;

  v25[0] = CMFallDefaults;
  v23[0] = CMFallDefaults_isHeartRateDataCollectionEnabled;
  v24[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A2C370());
  v23[1] = CMFallDefaults_fallFullMslLoggingInSensorKitEnabled;
  LOBYTE(v12) = 0;
  sub_1018BF25C(&v8, "FallFullMslLoggingInSensorKitEnabled", (unsigned __int8 *)&v12, 0);
  v24[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9);
  v23[2] = CMFallDefaults_fallOffWristLookbackBeforeImpactStartOfInterval;
  sub_1018BEA14(&v8, "FallOffWristLookbackBeforeImpactStartOfIntervalKey", &qword_101C03F38, 0);
  v24[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11);
  v23[3] = CMFallDefaults_fallOffWristLookbackBeforeImpactEndOfInterval;
  sub_1018BEA14(&v8, "FallOffWristLookbackBeforeImpactEndOfIntervalKey", &qword_101C03F78, 0);
  v24[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11);
  v23[4] = CMFallDefaults_fallOnWristAfterImpactStartOfInterval;
  sub_1018BEA14(&v8, "FallOnWristAfterImpactStartOfIntervalKey", &qword_101C03FB0, 0);
  v24[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11);
  v23[5] = CMFallDefaults_fallOnWristAfterImpactEndOfInterval;
  sub_1018BEA14(&v8, "FallOnWristAfterImpactEndOfIntervalKey", &qword_101C03FE0, 0);
  v24[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11);
  v23[6] = CMFallDefaults_fallLockedLookbackBeforeImpactStartOfInterval;
  sub_1018BEA14(&v8, "FallLockedLookbackBeforeImpactStartOfIntervalKey", &qword_101C04020, 0);
  v24[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11);
  v23[7] = CMFallDefaults_fallLockedLookbackBeforeImpactEndOfInterval;
  sub_1018BEA14(&v8, "FallLockedLookbackBeforeImpactEndOfIntervalKey", &qword_101C04058, 0);
  v24[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11);
  v23[8] = CMFallDefaults_fallMinimumOffChargerDurationBeforeGatingAlert;
  v12 = 25;
  sub_1004AD1D8(&v8, "FallMinimumOffChargerDurationKey", &v12, 0);
  v24[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10);
  v23[9] = CMFallDefaults_fallDelayBeforeWristAndChargerGating;
  v24[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A29148());
  v23[10] = CMFallDefaults_fallDelayBeforeShuttingDownAlgorithmsAfterLastClientDisconnect;
  v12 = 300;
  sub_1004AD1D8(&v8, "FallDelayBeforeShuttingDownAlgorithmsAfterLastClientDisconnect", &v12, 0);
  v24[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10);
  v23[11] = CMFallDefaults_fallDelayBeforeSendingSPUConfiguration;
  v12 = 30;
  sub_1004AD1D8(&v8, "FallDelayBeforeSendingSPUConfiguration", &v12, 0);
  v24[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10);
  v26[0] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 12);
  v25[1] = CMFallConfiguration;
  v21[0] = CMFallConfiguration_isFallDetectionFeatureEnabled;
  v22[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A15448());
  v21[1] = CMFallConfiguration_isFallDetectionDuringWorkoutFeatureEnabled;
  v22[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A15534());
  v21[2] = CMFallConfiguration_isBridgeToggleEnabled;
  v22[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A10B10());
  v21[3] = CMFallConfiguration_isBridgeDuringWorkoutToggleEnabled;
  v22[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A10B98());
  v21[4] = CMFallConfiguration_userStudyFallStatsEnabled;
  LOBYTE(v12) = 0;
  sub_1018BF25C(&v8, "FallStatsEnabled", (unsigned __int8 *)&v12, 0);
  v22[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9);
  v21[5] = CMFallConfiguration_userStudyPressureDataCollection;
  LOBYTE(v12) = 0;
  sub_1018BF25C(&v8, "FallStatsPressureEnabled", (unsigned __int8 *)&v12, 0);
  v22[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9);
  v21[6] = CMFallConfiguration_shouldDetectorBeRunning;
  v22[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1D08C(a1));
  v26[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 7);
  v25[2] = CMFallState;
  v19[0] = CMFallState_isSensorRecordingEnabled;
  LOBYTE(v12) = 0;
  sub_1018BF25C(&v8, "FallStatsSensorRecordingEnabled", (unsigned __int8 *)&v12, 0);
  v20[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9);
  v19[1] = CMFallState_isSensorKitLoggingEnabled;
  v20[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0);
  v19[2] = CMFallState_lastGatedAnomalyAOPTimestamp;
  v20[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", sub_100A20298());
  v27 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 3);
  v25[3] = CMFallOptInsAndProfiles;
  v17[0] = CMFallOptInsAndProfiles_isImproveHealthAndFitnessOptInEnabled;
  v18[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1CE18((uint64_t)v27, v2));
  v17[1] = CMFallOptInsAndProfiles_lastFallAdditionalProfileLoggingEnabled;
  v18[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A22408());
  v17[2] = CMFallOptInsAndProfiles_fallAdditionalProfileLoggingEnabled;
  LOBYTE(v12) = 0;
  sub_1018BF25C(&v8, "FallAdditionalProfileLoggingEnabled", (unsigned __int8 *)&v12, 0);
  v18[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9);
  v17[3] = CMFallOptInsAndProfiles_isBackgroundSensorDataLoggingAllowed;
  v18[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1CF04());
  v17[4] = CMFallOptInsAndProfiles_isTapToRadarFallSubmissionAllowed;
  v18[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1CF60());
  v17[5] = CMFallOptInsAndProfiles_isTapToRadarNearFallSubmissionAllowed;
  v18[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1CFC8());
  v17[6] = CMFallOptInsAndProfiles_isTapToRadarSubmissionAllowed;
  if ((sub_100A1CF60() & 1) != 0)
    v3 = 1;
  else
    v3 = sub_100A1CFC8();
  v18[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v3);
  v17[7] = CMFallOptInsAndProfiles_isAnyFallDataCollectionEnabled;
  v18[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1D194(a1));
  v17[8] = CMFallOptInsAndProfiles_isBackgroundAllDayAnomalyDetectionEnabled;
  v18[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1D138(a1));
  v17[9] = CMFallOptInsAndProfiles_isBackgroundWorkoutAnomalyDetectionEnabled;
  v18[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1D100());
  v28 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 10);
  v25[4] = CMFallFieldMetrics;
  v15[0] = CMFallFieldMetrics_isBackgroundFieldMetricsLoggingAllowed;
  v16[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1D030());
  v15[1] = CMFallFieldMetrics_isBackgroundFieldMetricsLoggingEnabled;
  if (sub_100A1D08C(a1))
    v4 = 0;
  else
    v4 = sub_100A1D030();
  v16[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4);
  v15[2] = CMFallFieldMetrics_isFieldMetricsLoggingEnabled;
  v16[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A16088(a1, v5));
  v29 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 3);
  v25[5] = CMFallHDSCollection;
  v13[0] = CMFallHDSCollection_isOptInDataLoggingAvailable;
  if (sub_100A10F50())
    v6 = CFAbsoluteTimeGetCurrent() < 654764400.0;
  else
    v6 = 0;
  v14[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6);
  v13[1] = CMFallHDSCollection_isOptInDataLoggingEnabled;
  v14[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A1CE88(a1));
  v13[2] = CMFallHDSCollection_isUnderRateLimit;
  v14[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(double *)(a1 + 248) <= 240.0);
  v30 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 3);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v26, v25, 6);
}

__n128 sub_100A309D0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *(_OWORD *)(a1 + 7047);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 7031);
  *(_OWORD *)(a2 + 144) = v2;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 7063);
  *(_OWORD *)(a2 + 175) = *(_OWORD *)(a1 + 7078);
  v3 = *(_OWORD *)(a1 + 6983);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 6967);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(a1 + 7015);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 6999);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(a1 + 6919);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 6903);
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(a1 + 6935);
  v7 = *(_OWORD *)(a1 + 6951);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

NSDictionary *sub_100A30A14()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v87[83];
  _QWORD v88[83];

  v87[0] = CFSTR("MaxAccelNormThreshold");
  v0 = sub_100BFA9D4();
  *(float *)&v1 = sub_100BFC3DC(v0);
  v88[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v1);
  v87[1] = CFSTR("UserAgeBin");
  v2 = sub_100BFA9D4();
  *(float *)&v3 = sub_100BFC494(v2);
  v88[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v87[2] = CFSTR("UserMaxMets");
  v4 = sub_100BFA9D4();
  *(float *)&v5 = sub_100BFC554(v4);
  v88[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5);
  v87[3] = CFSTR("numFallAlerts");
  v6 = sub_100BFA9D4();
  v88[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31770(v6));
  v87[4] = CFSTR("numRecoveryEvents");
  v7 = sub_100BFA9D4();
  v88[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A317C0(v7));
  v87[5] = CFSTR("numUserResponseConfirmedActionRequested");
  v8 = sub_100BFA9D4();
  v88[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31810(v8));
  v87[6] = CFSTR("numUserResponseConfirmedNoActionRequested");
  v9 = sub_100BFA9D4();
  v88[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31860(v9));
  v87[7] = CFSTR("numUserResponseDismissed");
  v10 = sub_100BFA9D4();
  v88[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A318B0(v10));
  v87[8] = CFSTR("numUserResponseRejected");
  v11 = sub_100BFA9D4();
  v88[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31900(v11));
  v87[9] = CFSTR("numUserResponseAutomaticActionRequested");
  v12 = sub_100BFA9D4();
  v88[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31950(v12));
  v87[10] = CFSTR("numImpactReplacedBecauseOfNewImpact");
  v13 = sub_100BFA9D4();
  v88[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A319A0(v13));
  v87[11] = CFSTR("numImpactCanceledBecauseOfMaxAccelNorm");
  v14 = sub_100BFA9D4();
  v88[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A319F8(v14));
  v87[12] = CFSTR("numImpactCanceledBecauseOfOtherHardThresholds");
  v15 = sub_100BFA9D4();
  v88[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31A50(v15));
  v87[13] = CFSTR("numImpactCanceledBecauseOfMultiPeaks");
  v16 = sub_100BFA9D4();
  v88[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31AA8(v16));
  v87[14] = CFSTR("numImpactCanceledBecauseOfNaiveBayes");
  v17 = sub_100BFA9D4();
  v88[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31B00(v17));
  v87[15] = CFSTR("numImpactCanceledBecauseOfCyclingImpactThresholds");
  v18 = sub_100BFA9D4();
  v88[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31B58(v18));
  v87[16] = CFSTR("numImpactCanceledBecauseOfExistingAlert");
  v19 = sub_100BFA9D4();
  v88[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31BB0(v19));
  v87[17] = CFSTR("numImpactCanceledBecauseOfDisabledStateMachine");
  v20 = sub_100BFA9D4();
  v88[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31C08(v20));
  v87[18] = CFSTR("numImpactCanceledAggregate");
  v21 = sub_100BFA9D4();
  v88[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31C60(v21));
  v87[19] = CFSTR("numAlertCanceledBecauseOfHighFrequencyFFT");
  v22 = sub_100BFA9D4();
  v88[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31CB8(v22));
  v87[20] = CFSTR("numAlertCanceledBecauseOfLowFrequencyFFT");
  v23 = sub_100BFA9D4();
  v88[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31D10(v23));
  v87[21] = CFSTR("numAlertCanceledBecauseOfDecimatedLowFrequencyFFT");
  v24 = sub_100BFA9D4();
  v88[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31D68(v24));
  v87[22] = CFSTR("numAlertCanceledBecauseOfFFT");
  v25 = sub_100BFA9D4();
  v88[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31DC0(v25));
  v87[23] = CFSTR("numAlertCanceledBecauseOfPeaksIQR");
  v26 = sub_100BFA9D4();
  v88[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31E18(v26));
  v87[24] = CFSTR("numAlertCanceledBecauseOfOffBody");
  v27 = sub_100BFA9D4();
  v88[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31E70(v27));
  v87[25] = CFSTR("numAlertCanceledBecauseOfRepetitiveMotion");
  v28 = sub_100BFA9D4();
  v88[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31EC8(v28));
  v87[26] = CFSTR("numAlertCanceledBecauseOfAbsenceOfQuiessence");
  v29 = sub_100BFA9D4();
  v88[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31F20(v29));
  v87[27] = CFSTR("numAlertCanceledBecauseOfOffWristPre");
  v30 = sub_100BFA9D4();
  v88[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31F78(v30));
  v87[28] = CFSTR("numAlertCanceledBecauseOfOffWristPost");
  v31 = sub_100BFA9D4();
  v88[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A31FD0(v31));
  v87[29] = CFSTR("numAlertCanceledAggregate");
  v32 = sub_100BFA9D4();
  v88[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32028(v32));
  v87[30] = CFSTR("numAlertCanceledBecauseOfFeatureDisabled");
  v33 = sub_100BFA9D4();
  v88[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32080(v33));
  v87[31] = CFSTR("numAlertCanceledBecauseOfAlreadyGatedBefore");
  v34 = sub_100BFA9D4();
  v88[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A320D8(v34));
  v87[32] = CFSTR("numAlertCanceledBecauseOfOnCharger");
  v35 = sub_100BFA9D4();
  v88[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32130(v35));
  v87[33] = CFSTR("numAlertCanceledBecauseOfSimilarPeaks");
  v36 = sub_100BFA9D4();
  v88[33] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32188(v36));
  v87[34] = CFSTR("numAlertCanceledBecauseOfLockedNoMotionBeforeImpact");
  v37 = sub_100BFA9D4();
  v88[34] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A321E0(v37));
  v87[35] = CFSTR("numAlertCanceledBecauseOfReferee");
  v38 = sub_100BFA9D4();
  v88[35] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32238(v38));
  v87[36] = CFSTR("numAlertCanceledBecauseStand");
  v39 = sub_100BFA9D4();
  v88[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32290(v39));
  v87[37] = CFSTR("numAlertCanceledBecauseActive");
  v40 = sub_100BFA9D4();
  v88[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A322E8(v40));
  v87[38] = CFSTR("numAlertCanceledBecauseSteps");
  v41 = sub_100BFA9D4();
  v88[38] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32340(v41));
  v87[39] = CFSTR("numAlertCanceledBecauseOfDistanceTraveledPostImpact");
  v42 = sub_100BFA9D4();
  v88[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32398(v42));
  v87[40] = CFSTR("numAlertCanceledBecauseOfDistanceCyclingPostImpact");
  v43 = sub_100BFA9D4();
  v88[40] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A323F0(v43));
  v87[41] = CFSTR("numAlertCanceledOtherAggregate");
  v44 = sub_100BFA9D4();
  v88[41] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32448(v44));
  v87[42] = CFSTR("numRecoveryCanceledBecauseOfReferee");
  v45 = sub_100BFA9D4();
  v88[42] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A324A0(v45));
  v87[43] = CFSTR("numRecoveryCanceledAggregate");
  v46 = sub_100BFA9D4();
  v88[43] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A324F8(v46));
  v87[44] = CFSTR("numSOSCanceledBecauseUserResponse");
  v47 = sub_100BFA9D4();
  v88[44] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32550(v47));
  v87[45] = CFSTR("numSOSCanceledBecauseOffWrist");
  v48 = sub_100BFA9D4();
  v88[45] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A325A8(v48));
  v87[46] = CFSTR("numSOSCanceledBecauseStand");
  v49 = sub_100BFA9D4();
  v88[46] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32600(v49));
  v87[47] = CFSTR("numSOSCanceledBecauseActive");
  v50 = sub_100BFA9D4();
  v88[47] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32658(v50));
  v87[48] = CFSTR("numSOSCanceledBecauseSteps");
  v51 = sub_100BFA9D4();
  v88[48] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A326B0(v51));
  v87[49] = CFSTR("numSOSCanceledBecauseAbsenceOfLongLie");
  v52 = sub_100BFA9D4();
  v88[49] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32708(v52));
  v87[50] = CFSTR("numSOSCanceledBecauseOfReferee");
  v53 = sub_100BFA9D4();
  v88[50] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32760(v53));
  v87[51] = CFSTR("numSOSCanceledAggregate");
  v54 = sub_100BFA9D4();
  v88[51] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A327B8(v54));
  v87[52] = CFSTR("numSOSCallConsidered");
  v55 = sub_100BFA9D4();
  v88[52] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32810(v55));
  v87[53] = CFSTR("numSOSCallScheduled");
  v56 = sub_100BFA9D4();
  v88[53] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A3286C(v56));
  v87[54] = CFSTR("numSOSCallPlaced");
  v57 = sub_100BFA9D4();
  v88[54] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A328C8(v57));
  v87[55] = CFSTR("numOutdoorCyclingFallAlerts");
  v58 = sub_100BFA9D4();
  v88[55] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32924(v58));
  v87[56] = CFSTR("numOutdoorCyclingRecoveryEvents");
  v59 = sub_100BFA9D4();
  v88[56] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32980(v59));
  v87[57] = CFSTR("numOutdoorCyclingUserResponseConfirmedActionRequested");
  v60 = sub_100BFA9D4();
  v88[57] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A329DC(v60));
  v87[58] = CFSTR("numOutdoorCyclingUserResponseConfirmedNoActionRequested");
  v61 = sub_100BFA9D4();
  v88[58] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32A38(v61));
  v87[59] = CFSTR("numOutdoorCyclingUserResponseDismissed");
  v62 = sub_100BFA9D4();
  v88[59] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32A94(v62));
  v87[60] = CFSTR("numOutdoorCyclingUserResponseRejected");
  v63 = sub_100BFA9D4();
  v88[60] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32AF0(v63));
  v87[61] = CFSTR("numOutdoorCyclingUserResponseAutomaticActionRequested");
  v64 = sub_100BFA9D4();
  v88[61] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32B4C(v64));
  v87[62] = CFSTR("numOutdoorWalkingFallAlerts");
  v65 = sub_100BFA9D4();
  v88[62] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32BA8(v65));
  v87[63] = CFSTR("numOutdoorWalkingRecoveryEvents");
  v66 = sub_100BFA9D4();
  v88[63] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32C04(v66));
  v87[64] = CFSTR("numOutdoorWalkingUserResponseConfirmedActionRequested");
  v67 = sub_100BFA9D4();
  v88[64] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32C60(v67));
  v87[65] = CFSTR("numOutdoorWalkingUserResponseConfirmedNoActionRequested");
  v68 = sub_100BFA9D4();
  v88[65] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32CBC(v68));
  v87[66] = CFSTR("numOutdoorWalkingUserResponseDismissed");
  v69 = sub_100BFA9D4();
  v88[66] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32D18(v69));
  v87[67] = CFSTR("numOutdoorWalkingUserResponseRejected");
  v70 = sub_100BFA9D4();
  v88[67] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32D74(v70));
  v87[68] = CFSTR("numOutdoorWalkingUserResponseAutomaticActionRequested");
  v71 = sub_100BFA9D4();
  v88[68] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32DD0(v71));
  v87[69] = CFSTR("numOutdoorRunningFallAlerts");
  v72 = sub_100BFA9D4();
  v88[69] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32E2C(v72));
  v87[70] = CFSTR("numOutdoorRunningRecoveryEvents");
  v73 = sub_100BFA9D4();
  v88[70] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32E88(v73));
  v87[71] = CFSTR("numOutdoorRunningUserResponseConfirmedActionRequested");
  v74 = sub_100BFA9D4();
  v88[71] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32EE4(v74));
  v87[72] = CFSTR("numOutdoorRunningUserResponseConfirmedNoActionRequested");
  v75 = sub_100BFA9D4();
  v88[72] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32F40(v75));
  v87[73] = CFSTR("numOutdoorRunningUserResponseDismissed");
  v76 = sub_100BFA9D4();
  v88[73] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32F9C(v76));
  v87[74] = CFSTR("numOutdoorRunningUserResponseRejected");
  v77 = sub_100BFA9D4();
  v88[74] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A32FF8(v77));
  v87[75] = CFSTR("numOutdoorRunningUserResponseAutomaticActionRequested");
  v78 = sub_100BFA9D4();
  v88[75] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A33054(v78));
  v87[76] = CFSTR("numHikingFallAlerts");
  v79 = sub_100BFA9D4();
  v88[76] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A330B0(v79));
  v87[77] = CFSTR("numHikingRecoveryEvents");
  v80 = sub_100BFA9D4();
  v88[77] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A3310C(v80));
  v87[78] = CFSTR("numHikingUserResponseConfirmedActionRequested");
  v81 = sub_100BFA9D4();
  v88[78] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A33168(v81));
  v87[79] = CFSTR("numHikingUserResponseConfirmedNoActionRequested");
  v82 = sub_100BFA9D4();
  v88[79] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A331C4(v82));
  v87[80] = CFSTR("numHikingUserResponseDismissed");
  v83 = sub_100BFA9D4();
  v88[80] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A33220(v83));
  v87[81] = CFSTR("numHikingUserResponseRejected");
  v84 = sub_100BFA9D4();
  v88[81] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A3327C(v84));
  v87[82] = CFSTR("numHikingUserResponseAutomaticActionRequested");
  v85 = sub_100BFA9D4();
  v88[82] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A332D8(v85));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v88, v87, 83);
}

uint64_t sub_100A31770(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 124);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A317C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 128);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 140);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31860(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 144);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A318B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 148);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 152);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31950(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 156);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A319A0(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66280);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 68) + 24))(v2);
  return v3;
}

uint64_t sub_100A319F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66284);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31A50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66288);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31AA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66292);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31B00(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66296);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 66) + 24))(v2);
  return v3;
}

uint64_t sub_100A31B58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66300);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31BB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66304);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31C08(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66312);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 64) + 24))(v2);
  return v3;
}

uint64_t sub_100A31C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66308);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31CB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66316);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31D10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66320);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31D68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66324);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31DC0(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66328);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 62) + 24))(v2);
  return v3;
}

uint64_t sub_100A31E18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66332);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31E70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66336);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31EC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66340);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31F20(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66344);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 60) + 24))(v2);
  return v3;
}

uint64_t sub_100A31F78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66348);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A31FD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66352);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32028(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66356);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32080(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66360);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 58) + 24))(v2);
  return v3;
}

uint64_t sub_100A320D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66368);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32130(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66364);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32188(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66372);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A321E0(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66376);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 56) + 24))(v2);
  return v3;
}

uint64_t sub_100A32238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66380);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32290(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66384);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A322E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66388);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32340(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66392);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 54) + 24))(v2);
  return v3;
}

uint64_t sub_100A32398(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66396);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A323F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66400);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32448(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66404);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A324A0(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66408);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 52) + 24))(v2);
  return v3;
}

uint64_t sub_100A324F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66412);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32550(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66416);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A325A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66420);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32600(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66424);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 50) + 24))(v2);
  return v3;
}

uint64_t sub_100A32658(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66428);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A326B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66432);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32708(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66436);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32760(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)(a1 + 66440);
  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *v1;
  (*(void (**)(uint64_t))(*((_QWORD *)v1 + 48) + 24))(v2);
  return v3;
}

uint64_t sub_100A327B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66444);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66712);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A3286C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66716);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A328C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66720);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32924(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66576);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66580);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A329DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66584);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32A38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66588);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32A94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66592);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32AF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66596);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32B4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66600);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32BA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66604);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32C04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66608);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66612);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32CBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66616);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32D18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66620);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32D74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66624);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32DD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66628);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32E2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66632);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32E88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66636);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32EE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66640);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32F40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66644);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32F9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66648);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A32FF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66652);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A33054(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66656);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A330B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66660);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A3310C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66664);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A33168(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66668);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A331C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66672);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A33220(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66676);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A3327C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66680);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A332D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(unsigned int *)(a1 + 66684);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

id sub_100A33334(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id result;
  uint64_t i;
  const char *v6;
  uint8_t *v7;
  unsigned __int8 v8[16];
  uint8_t buf[1640];

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "An Impact sequence just started.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    *(_WORD *)v8 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 1, "An Impact sequence just started.", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataStart(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(a1 + 136), "clearAllLogs");
  v3 = *(void **)(a1 + 144);
  v8[0] = 0;
  sub_1018BF25C(buf, "FallFullMslLoggingInSensorKitEnabled", v8, 0);
  result = objc_msgSend(v3, "cleanUpIncludingDerivedFeatures:", buf[1]);
  for (i = *(_QWORD *)(a1 + 8056); i != a1 + 8048; i = *(_QWORD *)(i + 8))
  {
    if ((sub_100A1CE88(a1) & 1) == 0 && (sub_100A1CF60() & 1) == 0)
    {
      result = (id)sub_100A1CFC8();
      if (!(_DWORD)result)
        continue;
    }
    result = objc_msgSend(*(id *)(a1 + 136), "logOdometer:", i + 16);
  }
  return result;
}

id sub_100A33540(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  NSObject *v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 v15;
  id result;
  const char *v17;
  char *v18;
  _WORD v19[8];
  _BYTE buf[32];
  uint64_t v21;

  v4 = (_BYTE *)(a1 + 10737);
  if (!*(_QWORD *)(a1 + 7592))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Receiving Pressure", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "Receiving Pressure", v19, 2);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onPressureData(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  ++*(_QWORD *)(a1 + 7592);
  *(_QWORD *)buf = *(_QWORD *)(a2 + 20);
  *(_DWORD *)&buf[8] = *(_DWORD *)(a2 + 8);
  sub_1000E2A10((unsigned __int16 *)(a1 + 456), buf);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)buf = *(_OWORD *)a2;
  *(_OWORD *)&buf[16] = v6;
  v21 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)&buf[8] = 2143289344;
  v7 = *(unsigned __int16 *)(a1 + 458);
  if (*(_WORD *)(a1 + 458))
  {
    v8 = a1 + 464;
    v9 = *(_QWORD *)&buf[12];
    v10 = *(unsigned __int16 *)(a1 + 456);
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 16 * v10);
      v12 = v9 - v11;
      if (v11 > v9)
        v12 = v11 - v9;
      if (v12 <= 0x8CA0)
        break;
      if (v11 <= v9)
      {
        v13 = v10 + 1;
        v14 = *(unsigned int *)(a1 + 460);
        if (v13 < v14)
          LOWORD(v14) = 0;
        v15 = v13 - v14;
        v10 = v15;
        *(_WORD *)(a1 + 456) = v15;
        *(_WORD *)(a1 + 458) = --v7;
        if ((_WORD)v7)
          continue;
      }
      goto LABEL_18;
    }
    *(_DWORD *)&buf[8] = *(_DWORD *)(v8 + 16 * v10 + 8);
  }
LABEL_18:
  result = objc_msgSend(*(id *)(a1 + 136), "logPressure:", buf);
  if (*v4)
    result = objc_msgSend(*(id *)(a1 + 192), "logData:", +[CLFallLoggerManager encodePressure:](CLFallLoggerManager, "encodePressure:", buf));
  if (v4[1])
    return objc_msgSend(*(id *)(a1 + 144), "logPressure:", buf);
  return result;
}

void sub_100A337EC(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  CFAbsoluteTime v17;
  CFAbsoluteTime v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  CFAbsoluteTime Current;
  CFAbsoluteTime v30;
  uint64_t buf;
  __int16 v32;
  const char *v33;
  __int16 v34;
  _BYTE v35[10];
  _BYTE v36[6];
  _BYTE v37[6];
  _BYTE v38[6];
  _BYTE v39[6];
  _BYTE v40[6];
  int v41;

  if (*a3 == 2)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v21 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *a4;
      v23 = a4[1];
      v24 = a4[2];
      v25 = a4[3];
      v26 = a4[4];
      v27 = a4[5];
      v28 = a4[6];
      buf = 68290818;
      v32 = 2082;
      v33 = "";
      v34 = 1026;
      *(_DWORD *)v35 = v22;
      *(_WORD *)&v35[4] = 1026;
      *(_DWORD *)&v35[6] = v23;
      *(_WORD *)v36 = 1026;
      *(_DWORD *)&v36[2] = v24;
      *(_WORD *)v37 = 1026;
      *(_DWORD *)&v37[2] = v25;
      *(_WORD *)v38 = 1026;
      *(_DWORD *)&v38[2] = v26;
      *(_WORD *)v39 = 1026;
      *(_DWORD *)&v39[2] = v27;
      *(_WORD *)v40 = 1026;
      *(_DWORD *)&v40[2] = v28;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received onWatchSystemState update\", \"isPasscodeLockEnabled\":%{public}hhd, \"isWaterLockEnabled\":%{public}hhd, \"isSchoolModeEnabled\":%{public}hhd, \"isSleepLockEnabled\":%{public}hhd, \"isTheaterModeEnabled\":%{public}hhd, \"isTourModeEnabled\":%{public}hhd, \"isDepthModeEnabled\":%{public}hhd}", (uint8_t *)&buf, 0x3Cu);
    }
    Current = CFAbsoluteTimeGetCurrent();
    v30 = CFAbsoluteTimeGetCurrent();
    LODWORD(buf) = *(_DWORD *)a4;
    *(_DWORD *)((char *)&buf + 3) = *(_DWORD *)(a4 + 3);
    *(CFAbsoluteTime *)(a1 + 7792) = Current;
    *(CFAbsoluteTime *)(a1 + 7800) = v30;
    *(_DWORD *)(a1 + 7808) = buf;
    *(_DWORD *)(a1 + 7811) = *(_DWORD *)((char *)&buf + 3);
  }
  else if (*a3 == 1)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v6 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_QWORD *)a4 + 2);
      v8 = *(_DWORD *)a4;
      v9 = *((_DWORD *)a4 + 1);
      v10 = *((_DWORD *)a4 + 2);
      v11 = a4[24];
      v12 = a4[25];
      v13 = a4[26];
      buf = 68290818;
      v32 = 2082;
      v33 = "";
      v34 = 2050;
      *(_QWORD *)v35 = v7;
      *(_WORD *)&v35[8] = 1026;
      *(_DWORD *)v36 = v8;
      *(_WORD *)&v36[4] = 1026;
      *(_DWORD *)v37 = v9;
      *(_WORD *)&v37[4] = 1026;
      *(_DWORD *)v38 = v10;
      *(_WORD *)&v38[4] = 1026;
      *(_DWORD *)v39 = v11;
      *(_WORD *)&v39[4] = 1026;
      *(_DWORD *)v40 = v12;
      *(_WORD *)&v40[4] = 1026;
      v41 = v13;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received onWristMonitor update\", \"timestamp\":%{public}llu, \"onWrist\":%{public}d, \"onWristSensor\":%{public}d, \"onWristConfidence\":%{public}d, \"isOnCharger\":%{public}hhd, \"isForcedOnWristEnabled\":%{public}hhd, \"isWristDetectionEnabled\":%{public}hhd}", (uint8_t *)&buf, 0x40u);
    }
    v14 = *(_DWORD *)a4;
    v15 = a4[24];
    v16 = CFAbsoluteTimeGetCurrent();
    sub_101360354(a1 + 7608, v14, v15, v16);
    v17 = CFAbsoluteTimeGetCurrent();
    v18 = CFAbsoluteTimeGetCurrent();
    v20 = *(_OWORD *)a4;
    v19 = *((_OWORD *)a4 + 1);
    *(CFAbsoluteTime *)(a1 + 7744) = v17;
    *(CFAbsoluteTime *)(a1 + 7752) = v18;
    *(_OWORD *)(a1 + 7760) = v20;
    *(_OWORD *)(a1 + 7776) = v19;
  }
}

uint64_t sub_100A33AB0(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString *v9;

  if (*a3 == 8)
  {
    v4 = result;
    v7 = *(_QWORD *)(a4 + 8);
    v5 = a4 + 8;
    v6 = v7;
    if (*(char *)(v5 + 23) >= 0)
      v8 = v5;
    else
      v8 = v6;
    v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
    if (-[NSString isEqualToString:](-[NSString pathExtension](v9, "pathExtension"), "isEqualToString:", CFSTR("watchkitapp")))
    {
      v9 = -[NSString stringByDeletingPathExtension](v9, "stringByDeletingPathExtension");
    }
    return sub_100A1D304(v4, (uint64_t)v9, 2);
  }
  return result;
}

unsigned __int8 *sub_100A33B30(unsigned __int8 *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unsigned __int8 *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (*a3 == 4)
  {
    v5 = result;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v6 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a4 + 8);
      *(_DWORD *)buf = 134217984;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received post event HR : %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v8 = *(_QWORD *)(a4 + 8);
      v11 = 134217984;
      v12 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Received post event HR : %f", COERCE_DOUBLE(&v11));
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onHeartRateNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    objc_msgSend(*((id *)v5 + 17), "logHeartRate:", a4);
    LOBYTE(v11) = 0;
    result = sub_1018BF25C(buf, "FallStatsEnabled", (unsigned __int8 *)&v11, 0);
    if (buf[1])
      return (unsigned __int8 *)objc_msgSend(*((id *)v5 + 25), "logData:", +[CLFallLoggerManager encodeHeartRate:](CLFallLoggerManager, "encodeHeartRate:", a4));
  }
  return result;
}

void sub_100A33D40(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if (*a3 == 2 && (*((float *)a4 + 5) != 30.0 || *(float *)(a1 + 404) == 30.0))
  {
    v5 = *a4;
    v6 = a4[1];
    v7 = a4[2];
    *(_OWORD *)(a1 + 428) = *(__int128 *)((char *)a4 + 44);
    *(_OWORD *)(a1 + 400) = v6;
    *(_OWORD *)(a1 + 416) = v7;
    *(_OWORD *)(a1 + 384) = v5;
    sub_100A228AC(a1);
    sub_100A1DA68(a1, 0);
    sub_100A2C404(a1, v8, *(float *)(a1 + 404));
  }
}

_QWORD *sub_100A33DC8(_QWORD *result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  _QWORD *v4;
  _BOOL4 v5;
  double Current;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;

  v4 = result;
  if (*a3 == 1)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v7 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 68289026;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received CLDataProtectionManager notification, will no register to natalimetry\"}", (uint8_t *)v8, 0x12u);
    }
    objc_msgSend(*(id *)(v4[1363] + 16), "unregister:forNotification:", *(_QWORD *)(v4[1363] + 8), 2);
    return objc_msgSend(*(id *)(v4[1363] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v4[1363] + 8), 2, 0);
  }
  else if (!*a3)
  {
    v5 = *a4 == 1;
    Current = CFAbsoluteTimeGetCurrent();
    return (_QWORD *)sub_1013607C0((uint64_t)(v4 + 951), v5, Current);
  }
  return result;
}

id *sub_100A33F18(id *result, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  if (!*a3)
    return (id *)_objc_msgSend(result[17], "setOrientation:", *a4);
  if ((*a3 - 1) < 2)
    sub_101917264();
  return result;
}

id sub_100A33F54(uint64_t a1)
{
  __objc2_class *v2;
  __objc2_class *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  NSObject *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  NSDictionary *v37;
  NSObject *v38;
  id v39;
  NSObject *v40;
  id v41;
  NSObject *v42;
  id v43;
  NSObject *v44;
  id v45;
  NSObject *v46;
  id v47;
  NSObject *v48;
  id v49;
  NSArray *v50;
  NSObject *v51;
  NSUInteger v52;
  id result;
  unint64_t v54;
  const __CFString *v55;
  NSObject *isa;
  NSUInteger v57;
  const __CFString *v58;
  NSUInteger v59;
  const __CFString *v60;
  NSUInteger v61;
  const __CFString *v62;
  NSUInteger v63;
  const __CFString *v64;
  NSUInteger v65;
  const __CFString *v66;
  NSUInteger v67;
  const __CFString *v68;
  NSUInteger v69;
  const __CFString *v70;
  NSUInteger v71;
  const __CFString *v72;
  NSUInteger v73;
  const __CFString *v74;
  NSUInteger v75;
  const __CFString *v76;
  NSUInteger v77;
  const __CFString *v78;
  const __CFString *v79;
  const __CFString *v80;
  const __CFString *v81;
  const __CFString *v82;
  const __CFString *v83;
  const __CFString *v84;
  NSUInteger v85;
  const __CFString *v86;
  NSUInteger v87;
  const __CFString *v88;
  NSUInteger v89;
  const __CFString *v90;
  NSUInteger v91;
  const __CFString *v92;
  NSUInteger v93;
  const __CFString *v94;
  NSUInteger v95;
  const __CFString *v96;
  NSUInteger v97;
  const __CFString *v98;
  NSUInteger v99;
  const __CFString *v100;
  NSUInteger v101;
  const __CFString *v102;
  NSUInteger v103;
  const __CFString *v104;
  NSUInteger v105;
  const __CFString *v106;
  NSUInteger v107;
  const __CFString *v108;
  const __CFString *v109;
  const __CFString *v110;
  const __CFString *v111;
  const __CFString *v112;
  const __CFString *v113;
  const __CFString *v114;
  NSUInteger v115;
  const __CFString *v116;
  const char *v117;
  uint8_t *v118;
  const char *v119;
  uint8_t *v120;
  uint64_t v121;
  id v122;
  const char *v123;
  uint8_t *v124;
  uint64_t v125;
  id v126;
  const char *v127;
  uint8_t *v128;
  uint64_t v129;
  id v130;
  const char *v131;
  uint8_t *v132;
  uint64_t v133;
  id v134;
  const char *v135;
  uint8_t *v136;
  uint64_t v137;
  id v138;
  const char *v139;
  uint8_t *v140;
  uint64_t v141;
  id v142;
  const char *v143;
  uint8_t *v144;
  uint64_t v145;
  id v146;
  const char *v147;
  uint8_t *v148;
  uint64_t v149;
  NSDictionary *v150;
  const __CFString *v151;
  const __CFString *v152;
  const __CFString *v153;
  const __CFString *v154;
  const __CFString *v155;
  const __CFString *v156;
  const __CFString *v157;
  const __CFString *v158;
  const __CFString *v159;
  const __CFString *v160;
  const __CFString *v161;
  const __CFString *v162;
  const __CFString *v163;
  const __CFString *v164;
  const __CFString *v165;
  const __CFString *v166;
  const __CFString *v167;
  const __CFString *v168;
  const __CFString *v169;
  const __CFString *v170;
  const __CFString *v171;
  const __CFString *v172;
  id v173;
  id v174;
  id v175;
  id v176;
  NSObject *log;
  os_log_t loga;
  int v179;
  id v180;
  __int16 v181;
  id v182;
  __int16 v183;
  const __CFString *v184;
  __int16 v185;
  const __CFString *v186;
  __int16 v187;
  const __CFString *v188;
  __int16 v189;
  const __CFString *v190;
  __int16 v191;
  const __CFString *v192;
  __int16 v193;
  const __CFString *v194;
  __int16 v195;
  const __CFString *v196;
  __int16 v197;
  const __CFString *v198;
  __int16 v199;
  const __CFString *v200;
  __int16 v201;
  const __CFString *v202;
  __int16 v203;
  const __CFString *v204;
  __int16 v205;
  const __CFString *v206;
  __int16 v207;
  const __CFString *v208;
  __int16 v209;
  const __CFString *v210;
  __int16 v211;
  const __CFString *v212;
  __int16 v213;
  const __CFString *v214;
  __int16 v215;
  const __CFString *v216;
  __int16 v217;
  const __CFString *v218;
  uint8_t buf[4];
  _BYTE v220[78];
  __int16 v221;
  const __CFString *v222;
  __int16 v223;
  const __CFString *v224;
  __int16 v225;
  const __CFString *v226;
  __int16 v227;
  const __CFString *v228;
  __int16 v229;
  const __CFString *v230;
  __int16 v231;
  const __CFString *v232;
  __int16 v233;
  const __CFString *v234;
  __int16 v235;
  const __CFString *v236;
  __int16 v237;
  const __CFString *v238;
  __int16 v239;
  const __CFString *v240;
  __int16 v241;
  const __CFString *v242;
  __int16 v243;
  const __CFString *v244;

  v2 = DefaultObserver;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v3 = DefaultObserver;
  v4 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLFallNotifier Logging Internal State:", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    LOWORD(v179) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "CLFallNotifier Logging Internal State:", &v179, 2);
    v120 = (uint8_t *)v119;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v119);
    if (v120 != buf)
      free(v120);
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v5 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 7824);
    v7 = *(unsigned __int8 *)(a1 + 7825);
    v8 = *(unsigned __int8 *)(a1 + 7826);
    v9 = *(unsigned __int8 *)(a1 + 7827);
    v10 = *(unsigned __int8 *)(a1 + 7828);
    v11 = *(_QWORD *)(a1 + 7816);
    *(_DWORD *)buf = 68290563;
    *(_DWORD *)v220 = 0;
    *(_WORD *)&v220[4] = 2082;
    *(_QWORD *)&v220[6] = "";
    *(_WORD *)&v220[14] = 1025;
    *(_DWORD *)&v220[16] = v6;
    *(_WORD *)&v220[20] = 1025;
    *(_DWORD *)&v220[22] = v7;
    *(_WORD *)&v220[26] = 1025;
    *(_DWORD *)&v220[28] = v8;
    *(_WORD *)&v220[32] = 1025;
    *(_DWORD *)&v220[34] = v9;
    *(_WORD *)&v220[38] = 1025;
    *(_DWORD *)&v220[40] = v10;
    *(_WORD *)&v220[44] = 2049;
    *(_QWORD *)&v220[46] = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallConfig\", \"CMFallStatsMode\":%{private}u, \"CMFallStatsSensorRecordingActive\":%{private}u, \"CMFallStatsSimulateFall\":%{private}u, \"CMFallStatsUserStudyPressureDataCollection\":%{private}u, \"CMAnomalyDetectorEnabled\":%{private}u, \"CMFallLastReplyAopTimestamp\":%{private}llu}", buf, 0x3Au);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
  }
  v12 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(float *)(a1 + 404);
    v14 = *(_QWORD *)(a1 + 10560);
    v15 = *(float *)(a1 + 10468);
    v16 = *(float *)(a1 + 10472);
    v17 = *(float *)(a1 + 10476);
    v18 = *(float *)(a1 + 10480);
    *(_DWORD *)buf = 68290563;
    *(_DWORD *)v220 = 0;
    *(_WORD *)&v220[4] = 2082;
    *(_QWORD *)&v220[6] = "";
    *(_WORD *)&v220[14] = 2049;
    *(double *)&v220[16] = v13;
    *(_WORD *)&v220[24] = 2049;
    *(_QWORD *)&v220[26] = v14;
    *(_WORD *)&v220[34] = 2049;
    *(double *)&v220[36] = v15;
    *(_WORD *)&v220[44] = 2049;
    *(double *)&v220[46] = v16;
    *(_WORD *)&v220[54] = 2049;
    *(double *)&v220[56] = v17;
    *(_WORD *)&v220[64] = 2049;
    *(double *)&v220[66] = v18;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallBehavioralConfig\", \"CMFallConfigUserAge\":\"%{private}f\", \"CMFallConfigUserMets\":\"%{private}f\", \"CMFallImpactAlertThreshold\":\"%{private}f\", \"CMFallImpactLoggingStatsThreshold\":\"%{private}f\", \"CMFallImpactLoggingHeartRateThreshold\":\"%{private}f\", \"CMFallImpactLoggingHighResolutionSensorDataThreshold\":\"%{private}f\"}", buf, 0x4Eu);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
  }
  v19 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(float *)(a1 + 10520);
    v21 = *(float *)(a1 + 10524);
    v22 = *(float *)(a1 + 10528);
    v23 = *(float *)(a1 + 10532);
    v24 = *(_DWORD *)(a1 + 10536);
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)v220 = 0;
    *(_WORD *)&v220[4] = 2082;
    *(_QWORD *)&v220[6] = "";
    *(_WORD *)&v220[14] = 2049;
    *(double *)&v220[16] = v20;
    *(_WORD *)&v220[24] = 2049;
    *(double *)&v220[26] = v21;
    *(_WORD *)&v220[34] = 2049;
    *(double *)&v220[36] = v22;
    *(_WORD *)&v220[44] = 2049;
    *(double *)&v220[46] = v23;
    *(_WORD *)&v220[54] = 1025;
    *(_DWORD *)&v220[56] = v24;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallCyclingThresholds\", \"CMFallCyclingImpactGravityVarianceThreshold\":\"%{private}f\", \"CMFallCyclingImpactCrownVarianceThreshold\":\"%{private}f\", \"CMFallCyclingImpactMaxAbsYThreshold\":\"%{private}f\", \"CMFallCyclingDistanceTraveledPostImpactThreshold\":\"%{private}f\", \"CMFallCyclingEpochsDetectedPostImpactThreshold\":%{private}d}", buf, 0x40u);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
  }
  v25 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v26 = *(_DWORD *)(a1 + 10540);
    v27 = *(_DWORD *)(a1 + 10544);
    v28 = *(_DWORD *)(a1 + 10548);
    v29 = *(unsigned __int8 *)(a1 + 10552);
    v30 = *(unsigned __int8 *)(a1 + 10553);
    v31 = *(unsigned __int8 *)(a1 + 10554);
    *(_DWORD *)buf = 68290563;
    *(_DWORD *)v220 = 0;
    *(_WORD *)&v220[4] = 2082;
    *(_QWORD *)&v220[6] = "";
    *(_WORD *)&v220[14] = 1025;
    *(_DWORD *)&v220[16] = v26;
    *(_WORD *)&v220[20] = 1025;
    *(_DWORD *)&v220[22] = v27;
    *(_WORD *)&v220[26] = 1025;
    *(_DWORD *)&v220[28] = v28;
    *(_WORD *)&v220[32] = 1025;
    *(_DWORD *)&v220[34] = v29;
    *(_WORD *)&v220[38] = 1025;
    *(_DWORD *)&v220[40] = v30;
    *(_WORD *)&v220[44] = 1025;
    *(_DWORD *)&v220[46] = v31;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallOtherWorkoutThresholds\", \"CMFallOtherWorkoutQuiescenceThresholdLow\":%{private}d, \"CMFallOtherWorkoutQuiescenceThresholdHigh\":%{private}d, \"CMFallOtherWorkoutConsecutiveLongLieThreshold\":%{private}d, \"CMFallOtherWorkoutShouldCancelAlertOnStepsThreshold\":%{private}d, \"CMFallOtherWorkoutShouldCancelAlertOnStandThreshold\":%{private}d, \"CMFallOtherWorkoutShouldCancelAlertOnActiveThreshold\":%{private}d}", buf, 0x36u);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
  }
  v32 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v33 = *(unsigned __int8 *)(a1 + 10558);
    v34 = *(unsigned __int8 *)(a1 + 10557);
    v35 = *(unsigned __int8 *)(a1 + 10555);
    v36 = *(unsigned __int8 *)(a1 + 10556);
    *(_DWORD *)buf = 68290051;
    *(_DWORD *)v220 = 0;
    *(_WORD *)&v220[4] = 2082;
    *(_QWORD *)&v220[6] = "";
    *(_WORD *)&v220[14] = 1025;
    *(_DWORD *)&v220[16] = v33;
    *(_WORD *)&v220[20] = 1025;
    *(_DWORD *)&v220[22] = v34;
    *(_WORD *)&v220[26] = 1025;
    *(_DWORD *)&v220[28] = v35;
    *(_WORD *)&v220[32] = 1025;
    *(_DWORD *)&v220[34] = v36;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallRefereeThresholds\", \"CMFallAllDayStateMachineEnabledOverride\":%{private}d, \"CMFallCyclingStateMachineEnabledOverride\":%{private}d, \"CMFallRefereeOperatingModeOverride\":%{private}d, \"CMFallAllDayStateMachineOperatingModeOverride\":%{private}d}", buf, 0x2Au);
  }
  v37 = sub_100A300C4(a1);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v38 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v39 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallDefaults);
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)v220 = v39;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallDefaults: %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v121 = qword_10229FD98;
    v122 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallDefaults);
    v179 = 138477827;
    v180 = v122;
    LODWORD(v149) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v121, 0, "CMFallInternalNotifierState::CMFallDefaults: %{private}@", &v179, v149);
    v124 = (uint8_t *)v123;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v123);
    if (v124 != buf)
      free(v124);
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v40 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v41 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallConfiguration);
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)v220 = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallConfiguration: %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v125 = qword_10229FD98;
    v126 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallConfiguration);
    v179 = 138477827;
    v180 = v126;
    LODWORD(v149) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v125, 0, "CMFallInternalNotifierState::CMFallConfiguration: %{private}@", &v179, v149);
    v128 = (uint8_t *)v127;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v127);
    if (v128 != buf)
      free(v128);
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v42 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v43 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallState);
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)v220 = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallState: %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v129 = qword_10229FD98;
    v130 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallState);
    v179 = 138477827;
    v180 = v130;
    LODWORD(v149) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v129, 0, "CMFallInternalNotifierState::CMFallState: %{private}@", &v179, v149);
    v132 = (uint8_t *)v131;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v131);
    if (v132 != buf)
      free(v132);
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v44 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v45 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallOptInsAndProfiles);
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)v220 = v45;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallOptInsAndProfiles: %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v133 = qword_10229FD98;
    v134 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallOptInsAndProfiles);
    v179 = 138477827;
    v180 = v134;
    LODWORD(v149) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v133, 0, "CMFallInternalNotifierState::CMFallOptInsAndProfiles: %{private}@", &v179, v149);
    v136 = (uint8_t *)v135;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v135);
    if (v136 != buf)
      free(v136);
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v46 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v47 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallFieldMetrics);
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)v220 = v47;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallFieldMetrics: %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v137 = qword_10229FD98;
    v138 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallFieldMetrics);
    v179 = 138477827;
    v180 = v138;
    LODWORD(v149) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v137, 0, "CMFallInternalNotifierState::CMFallFieldMetrics: %{private}@", &v179, v149);
    v140 = (uint8_t *)v139;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v139);
    if (v140 != buf)
      free(v140);
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v48 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v49 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallHDSCollection);
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)v220 = v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallHDSCollection: %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v141 = qword_10229FD98;
    v142 = -[NSDictionary objectForKeyedSubscript:](v37, "objectForKeyedSubscript:", CMFallHDSCollection);
    v179 = 138477827;
    v180 = v142;
    LODWORD(v149) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v141, 0, "CMFallInternalNotifierState::CMFallHDSCollection: %{private}@", &v179, v149);
    v144 = (uint8_t *)v143;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v143);
    if (v144 != buf)
      free(v144);
  }
  v150 = sub_100A30A14();
  v50 = -[NSDictionary allKeys](v150, "allKeys");
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  v51 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v52 = -[NSArray count](v50, "count");
    *(_DWORD *)buf = 134283521;
    *(_QWORD *)v220 = v52;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "CMFallInternalMetricState: (%{private}lu)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v145 = qword_10229FD98;
    v146 = -[NSArray count](v50, "count");
    v179 = 134283521;
    v180 = v146;
    LODWORD(v149) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v145, 0, "CMFallInternalMetricState: (%{private}lu)", &v179, v149);
    v148 = (uint8_t *)v147;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v147);
    if (v148 != buf)
      free(v148);
  }
  result = -[NSArray count](v50, "count");
  if (result)
  {
    v54 = 0;
    v55 = CFSTR("nil");
    do
    {
      if (v2[86].info != (__objc2_class_ro *)-1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      isa = v3[87].isa;
      if (os_log_type_enabled(isa, OS_LOG_TYPE_DEFAULT))
      {
        log = isa;
        v175 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54);
        v173 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54));
        v57 = -[NSArray count](v50, "count");
        v58 = v55;
        if (v54 + 1 < v57)
          v58 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 1);
        v171 = v58;
        v59 = -[NSArray count](v50, "count");
        v60 = v55;
        if (v54 + 1 < v59)
          v60 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 1));
        v169 = v60;
        v61 = -[NSArray count](v50, "count");
        v62 = v55;
        if (v54 + 2 < v61)
          v62 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 2);
        v167 = v62;
        v63 = -[NSArray count](v50, "count");
        v64 = v55;
        if (v54 + 2 < v63)
          v64 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 2));
        v165 = v64;
        v65 = -[NSArray count](v50, "count");
        v66 = v55;
        if (v54 + 3 < v65)
          v66 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 3);
        v163 = v66;
        v67 = -[NSArray count](v50, "count");
        v68 = v55;
        if (v54 + 3 < v67)
          v68 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 3));
        v161 = v68;
        v69 = -[NSArray count](v50, "count");
        v70 = v55;
        if (v54 + 4 < v69)
          v70 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 4);
        v159 = v70;
        v71 = -[NSArray count](v50, "count");
        v72 = v55;
        if (v54 + 4 < v71)
          v72 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 4));
        v157 = v72;
        v73 = -[NSArray count](v50, "count");
        v74 = v55;
        if (v54 + 5 < v73)
          v74 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 5);
        v155 = v74;
        v75 = -[NSArray count](v50, "count");
        v76 = v55;
        if (v54 + 5 < v75)
          v76 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 5));
        v153 = v76;
        v77 = -[NSArray count](v50, "count");
        v78 = v55;
        if (v54 + 6 < v77)
          v78 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 6);
        v151 = v78;
        v79 = v55;
        if (v54 + 6 < -[NSArray count](v50, "count"))
          v79 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 6));
        v80 = v55;
        if (v54 + 7 < -[NSArray count](v50, "count"))
          v80 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 7);
        v81 = v55;
        if (v54 + 7 < -[NSArray count](v50, "count"))
          v81 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 7));
        v82 = v55;
        if (v54 + 8 < -[NSArray count](v50, "count"))
          v55 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 8);
        v83 = v82;
        if (v54 + 8 < -[NSArray count](v50, "count"))
          v83 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 8));
        v84 = v82;
        if (v54 + 9 < -[NSArray count](v50, "count"))
          v84 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 9);
        v85 = -[NSArray count](v50, "count");
        v86 = v82;
        if (v54 + 9 < v85)
          v86 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 9));
        *(_DWORD *)buf = 138482691;
        *(_QWORD *)v220 = v175;
        *(_WORD *)&v220[8] = 2113;
        *(_QWORD *)&v220[10] = v173;
        *(_WORD *)&v220[18] = 2113;
        *(_QWORD *)&v220[20] = v171;
        *(_WORD *)&v220[28] = 2113;
        *(_QWORD *)&v220[30] = v169;
        *(_WORD *)&v220[38] = 2113;
        *(_QWORD *)&v220[40] = v167;
        *(_WORD *)&v220[48] = 2113;
        *(_QWORD *)&v220[50] = v165;
        *(_WORD *)&v220[58] = 2113;
        *(_QWORD *)&v220[60] = v163;
        *(_WORD *)&v220[68] = 2113;
        *(_QWORD *)&v220[70] = v161;
        v221 = 2113;
        v222 = v159;
        v223 = 2113;
        v224 = v157;
        v225 = 2113;
        v226 = v155;
        v227 = 2113;
        v228 = v153;
        v229 = 2113;
        v230 = v151;
        v231 = 2113;
        v232 = v79;
        v233 = 2113;
        v234 = v80;
        v235 = 2113;
        v236 = v81;
        v237 = 2113;
        v238 = v55;
        v239 = 2113;
        v240 = v83;
        v241 = 2113;
        v242 = v84;
        v243 = 2113;
        v244 = v86;
        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "    %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@", buf, 0xCAu);
        v2 = DefaultObserver;
        v3 = DefaultObserver;
        v55 = v82;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v2[86].info != (__objc2_class_ro *)-1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        loga = (os_log_t)v3[87].isa;
        v176 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54);
        v174 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54));
        v87 = -[NSArray count](v50, "count");
        v88 = v55;
        if (v54 + 1 < v87)
          v88 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 1);
        v172 = v88;
        v89 = -[NSArray count](v50, "count");
        v90 = v55;
        if (v54 + 1 < v89)
          v90 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 1));
        v170 = v90;
        v91 = -[NSArray count](v50, "count");
        v92 = v55;
        if (v54 + 2 < v91)
          v92 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 2);
        v168 = v92;
        v93 = -[NSArray count](v50, "count");
        v94 = v55;
        if (v54 + 2 < v93)
          v94 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 2));
        v166 = v94;
        v95 = -[NSArray count](v50, "count");
        v96 = v55;
        if (v54 + 3 < v95)
          v96 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 3);
        v164 = v96;
        v97 = -[NSArray count](v50, "count");
        v98 = v55;
        if (v54 + 3 < v97)
          v98 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 3));
        v162 = v98;
        v99 = -[NSArray count](v50, "count");
        v100 = v55;
        if (v54 + 4 < v99)
          v100 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 4);
        v160 = v100;
        v101 = -[NSArray count](v50, "count");
        v102 = v55;
        if (v54 + 4 < v101)
          v102 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 4));
        v158 = v102;
        v103 = -[NSArray count](v50, "count");
        v104 = v55;
        if (v54 + 5 < v103)
          v104 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 5);
        v156 = v104;
        v105 = -[NSArray count](v50, "count");
        v106 = v55;
        if (v54 + 5 < v105)
          v106 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 5));
        v154 = v106;
        v107 = -[NSArray count](v50, "count");
        v108 = v55;
        if (v54 + 6 < v107)
          v108 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 6);
        v152 = v108;
        v109 = v55;
        if (v54 + 6 < -[NSArray count](v50, "count"))
          v109 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 6));
        v110 = v55;
        if (v54 + 7 < -[NSArray count](v50, "count"))
          v110 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 7);
        v111 = v55;
        if (v54 + 7 < -[NSArray count](v50, "count"))
          v111 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 7));
        v112 = v55;
        if (v54 + 8 < -[NSArray count](v50, "count"))
          v112 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 8);
        v113 = v55;
        if (v54 + 8 < -[NSArray count](v50, "count"))
          v113 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 8));
        v114 = v55;
        if (v54 + 9 < -[NSArray count](v50, "count"))
          v55 = -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 9);
        v115 = -[NSArray count](v50, "count");
        v116 = v114;
        if (v54 + 9 < v115)
          v116 = -[NSDictionary objectForKeyedSubscript:](v150, "objectForKeyedSubscript:", -[NSArray objectAtIndexedSubscript:](v50, "objectAtIndexedSubscript:", v54 + 9));
        v179 = 138482691;
        v180 = v176;
        v181 = 2113;
        v182 = v174;
        v183 = 2113;
        v184 = v172;
        v185 = 2113;
        v186 = v170;
        v187 = 2113;
        v188 = v168;
        v189 = 2113;
        v190 = v166;
        v191 = 2113;
        v192 = v164;
        v193 = 2113;
        v194 = v162;
        v195 = 2113;
        v196 = v160;
        v197 = 2113;
        v198 = v158;
        v199 = 2113;
        v200 = v156;
        v201 = 2113;
        v202 = v154;
        v203 = 2113;
        v204 = v152;
        v205 = 2113;
        v206 = v109;
        v207 = 2113;
        v208 = v110;
        v209 = 2113;
        v210 = v111;
        v211 = 2113;
        v212 = v112;
        v213 = 2113;
        v214 = v113;
        v215 = 2113;
        v216 = v55;
        v217 = 2113;
        v218 = v116;
        LODWORD(v149) = 202;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, loga, 0, "    %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@", &v179, v149);
        v118 = (uint8_t *)v117;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v117);
        if (v118 != buf)
          free(v118);
        v2 = DefaultObserver;
        v3 = DefaultObserver;
        v55 = v114;
      }
      v54 += 10;
      result = -[NSArray count](v50, "count");
    }
    while (v54 < (unint64_t)result);
  }
  return result;
}

unsigned __int8 *sub_100A3594C(unsigned __int8 *result, uint64_t a2, int *a3)
{
  unsigned __int8 *v3;
  int v4;
  NSObject *v5;
  void *v6;
  id v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  id v23;
  uint8_t buf[4];
  id v25;

  v3 = result;
  v4 = *a3;
  if (!*a3)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received daemon settings notification", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return sub_100A2213C((uint64_t)v3);
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    LOWORD(v22) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Received daemon settings notification", &v22, 2);
    goto LABEL_48;
  }
  if (v4 == 10)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v10 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received managed configuration change notification", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return sub_100A2213C((uint64_t)v3);
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    LOWORD(v22) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Received managed configuration change notification", &v22, 2);
LABEL_48:
    v16 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v9);
    if (v16 != buf)
      free(v16);
    return sub_100A2213C((uint64_t)v3);
  }
  if (v4 == 9)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received sysdiagnose event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Received sysdiagnose event", &v22, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    LOBYTE(v22) = 0;
    sub_1018BF25C(buf, "FallAdditionalProfileLoggingEnabled", (unsigned __int8 *)&v22, 0);
    if (buf[1])
    {
      v6 = (void *)*((_QWORD *)v3 + 20);
      if (v6)
      {
        v7 = objc_msgSend(v6, "getUUID");
      }
      else
      {
        v11 = -[CLFallServer initInUniverse:]([CLFallServer alloc], "initInUniverse:", *((_QWORD *)v3 + 4));
        v7 = objc_msgSend(v11, "getUUID");

      }
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v12 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        v25 = v7;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Additional logging profile installed - Subject UUID: %{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        v22 = 138543362;
        v23 = v7;
        LODWORD(v21) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Additional logging profile installed - Subject UUID: %{public}@", &v22, v21);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      sub_100A33F54((uint64_t)v3);
    }
    sub_100197040();
    result = (unsigned __int8 *)sub_10075D288();
    if ((_DWORD)result)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102165C08);
      v13 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Logging anomaly info...", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102165C08);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Logging anomaly info...", &v22, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLFallNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      return (unsigned __int8 *)+[CLFallNotifierSysdiagnoseLogCollector writeAnomalyInfoToFileWithLastFallEvent:writeMask:fallNotifierConfig:stateLogger:statsLogger:sensorsLogger:pressureLogger:heartRateLogger:wristStateLogger:odometerLogger:falsePositiveSuppressionFeaturesLogger:hgalLogger:logDirectory:logFilePrefix:](CLFallNotifierSysdiagnoseLogCollector, "writeAnomalyInfoToFileWithLastFallEvent:writeMask:fallNotifierConfig:stateLogger:statsLogger:sensorsLogger:pressureLogger:heartRateLogger:wristStateLogger:odometerLogger:falsePositiveSuppressionFeaturesLogger:hgalLogger:logDirectory:logFilePrefix:", v3 + 6712, 4094, v3 + 7816, *((_QWORD *)v3 + 22), *((_QWORD *)v3 + 21), *((_QWORD *)v3 + 23), *((_QWORD *)v3 + 24), *((_QWORD *)v3 + 25), *((_QWORD *)v3 + 26), *((_QWORD *)v3 + 27), *((_QWORD *)v3 + 28), *((_QWORD *)v3 + 29), +[CLFallNotifierSysdiagnoseLogCollector getSysdiagnoseOutputPath](CLFallNotifierSysdiagnoseLogCollector, "getSysdiagnoseOutputPath"),
                                  +[CLFallNotifierSysdiagnoseLogCollector getSysdiagnoseOutputFilename](CLFallNotifierSysdiagnoseLogCollector, "getSysdiagnoseOutputFilename"));
    }
  }
  return result;
}

uint64_t sub_100A3606C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_102165DE0;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100A36140()
{
  operator new();
}

void sub_100A361EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100A36228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165C28);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102165C28);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::removeClient(int) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100A3649C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A6648);
}

BOOL sub_100A364B0(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[27];
  __int128 v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  int32x4_t v55;
  int v56;
  __int16 v57;
  char v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[27];

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_DWORD *)&buf[23] = 0;
        *(_QWORD *)&buf[16] = 0;
        v45 = xmmword_101C03A70;
        v46 = 0xFF7FFFFF7F7FFFFFLL;
        v47 = -8388609;
        v48 = 0;
        v49 = 0x7F7FFFFF00000000;
        v50 = 2139095039;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0;
        v55 = vdupq_n_s32(0x7F7FFFFFu);
        v56 = -8388609;
        v57 = 1;
        v58 = 0;
        memset(v61, 0, sizeof(v61));
        v60 = 0u;
        v59 = 0u;
        if (v20 == v18)
        {
          if ((*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
            sub_100A38E48();
          if (*(_QWORD *)&v61[3])
          {
            *(_QWORD *)&v61[11] = *(_QWORD *)&v61[3];
            operator delete(*(void **)&v61[3]);
          }
        }
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022A6649;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_100A369A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 191);
  if (v3)
  {
    *(_QWORD *)(v1 + 199) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100A369CC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165C28);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::clientRegistered(int, const Notification_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100A36C4C(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102165C28);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102165C28);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100A36FD4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[3];
  *(_OWORD *)(a3 + 32) = v11[2];
  *(_OWORD *)(a3 + 48) = v14;
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  v15 = v11[4];
  v16 = v11[5];
  v17 = v11[7];
  *(_OWORD *)(a3 + 96) = v11[6];
  *(_OWORD *)(a3 + 112) = v17;
  *(_OWORD *)(a3 + 64) = v15;
  *(_OWORD *)(a3 + 80) = v16;
  v18 = v11[8];
  v19 = v11[9];
  v20 = v11[10];
  *(_OWORD *)(a3 + 175) = *(__int128 *)((char *)v11 + 175);
  *(_OWORD *)(a3 + 144) = v19;
  *(_OWORD *)(a3 + 160) = v20;
  *(_OWORD *)(a3 + 128) = v18;
  if (v11 != (__int128 *)a3)
    sub_100A38C94((_QWORD *)(a3 + 191), *(char **)((char *)v11 + 191), *(char **)((char *)v11 + 199), *(_QWORD *)((char *)v11 + 199) - *(_QWORD *)((char *)v11 + 191));
  return 1;
}

uint64_t sub_100A3708C(uint64_t a1, int *a2, __int128 *a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_100A386B0(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_100A37138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A3714C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v4[27];
  __int128 v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int32x4_t v15;
  int v16;
  __int16 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[27];

  memset(v4, 0, sizeof(v4));
  v5 = xmmword_101C03A70;
  v6 = 0xFF7FFFFF7F7FFFFFLL;
  v7 = -8388609;
  v8 = 0;
  v9 = 0x7F7FFFFF00000000;
  v10 = 2139095039;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = vdupq_n_s32(0x7F7FFFFFu);
  v16 = -8388609;
  v17 = 1;
  v18 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0u;
  v19 = 0u;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (*(_QWORD *)&v21[3])
  {
    *(_QWORD *)&v21[11] = *(_QWORD *)&v21[3];
    operator delete(*(void **)&v21[3]);
  }
}

void sub_100A3721C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,__int128 a33)
{
  if (*(_QWORD *)((char *)&a33 + 7))
    operator delete(*(void **)((char *)&a33 + 7));
  _Unwind_Resume(exception_object);
}

void sub_100A37240(uint64_t a1, signed __int32 *a2, __int128 *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_100A386B0(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100A380FC();
    os_activity_scope_leave(&state);
  }
}

void sub_100A3785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

_QWORD *sub_100A378A8@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_100A37920(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165C28);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::listClients() [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102165C28);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165C28);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::listClients() [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102165C28);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102165C28);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::listClients() [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100A37ECC(uint64_t a1)
{
  sub_100A38DE8(a1);
  operator delete();
}

id sub_100A37EF0(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100A38870(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100A37F3C(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100A37F68(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100A37F94(uint64_t a1)
{
  return sub_100A294AC(*(_QWORD *)(a1 + 32));
}

void sub_100A37F9C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100A37FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_102171D70;
  *(_BYTE *)(a1 + 32) = 11;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 158);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 174);
  *(_WORD *)(a1 + 34) = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 19);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 56) = -8388609;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 27);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 43);
  *(_QWORD *)(a1 + 84) = 0x80000000800000;
  *(_DWORD *)(a1 + 92) = -8388609;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 51);
  *(_QWORD *)(a1 + 100) = 0x80000000800000;
  *(_DWORD *)(a1 + 108) = -8388609;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 55);
  v5 = *(_OWORD *)(a2 + 63);
  *((_QWORD *)&v5 + 1) = *(_QWORD *)(a2 + 75);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 83);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 3);
  *(_DWORD *)(a1 + 160) = -8388609;
  *(float *)(a1 + 164) = sub_100A2C2B8((float *)(a2 + 27));
  *(_QWORD *)(a1 + 168) = 0x80000000800000;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 99);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 107);
  *(int8x16_t *)(a1 + 192) = vextq_s8(*(int8x16_t *)(a2 + 111), *(int8x16_t *)(a2 + 111), 4uLL);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 71);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 149);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 127);
  return a1;
}

void sub_100A380FC()
{
  operator new();
}

void sub_100A381DC()
{
  operator delete();
}

void sub_100A38200(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100A38870(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100A385D4(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102165C28);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102165C28);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100A385D4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100A38870(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100A386B0@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0xF0uLL);
  result = sub_100A38708((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100A386F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A38708(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_102165C78;
  v3 = a2[8];
  v4 = a2[9];
  v5 = a2[10];
  v6 = *(__int128 *)((char *)a2 + 175);
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = a2[3];
  *(_OWORD *)(a1 + 215) = 0u;
  v15 = (_QWORD *)(a1 + 215);
  *(_OWORD *)((char *)v15 - 143) = v14;
  *(_OWORD *)((char *)v15 - 159) = v13;
  *(_OWORD *)((char *)v15 - 175) = v12;
  *(_OWORD *)((char *)v15 - 191) = v11;
  *(_OWORD *)((char *)v15 - 79) = v10;
  *(_OWORD *)((char *)v15 - 95) = v9;
  *(_OWORD *)((char *)v15 - 111) = v8;
  *(_OWORD *)((char *)v15 - 127) = v7;
  *((_OWORD *)v15 - 1) = v6;
  *(_OWORD *)((char *)v15 - 31) = v5;
  *(_OWORD *)((char *)v15 - 47) = v4;
  *(_OWORD *)((char *)v15 - 63) = v3;
  v15[2] = 0;
  sub_1007855D8(v15, *(const void **)((char *)a2 + 191), *(_QWORD *)((char *)a2 + 199), *(_QWORD *)((char *)a2 + 199) - *(_QWORD *)((char *)a2 + 191));
  return a1;
}

void sub_100A387A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100A387BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102165C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A387D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102165C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100A38804(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 215);
  if (v2)
  {
    *(_QWORD *)(a1 + 223) = v2;
    operator delete(v2);
  }
}

uint64_t sub_100A38820(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)(v1 + 191);
    if (v2)
    {
      *(_QWORD *)(v1 + 199) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

id sub_100A38870(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100A388BC(a1);
  else
    return 0;
}

id sub_100A388BC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102165CB8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C0420ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102165CB8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102165CB8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C0420ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102165CB8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLFall_Types::ImpactStreamData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100A38C68(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

_QWORD *sub_100A38C94(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_100259694();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_100785650(v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void sub_100A38DA0(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 16);
    if (v2)
    {
      *(_QWORD *)(a2 + 24) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

uint64_t sub_100A38DE8(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_102165DE0;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100A38E48()
{
  operator new();
}

void sub_100A38F28()
{
  operator delete();
}

uint64_t sub_100A38F4C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)(v1 + 191);
    if (v2)
    {
      *(_QWORD *)(v1 + 199) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

void sub_100A38F9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x12u);
}

BOOL sub_100A38FBC()
{
  return os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR);
}

void sub_100A38FE4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

uint64_t sub_100A39004()
{
  sub_1015A2E04(qword_1023063B0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023063B0, (void *)&_mh_execute_header);
}

NSDictionary *sub_100A3952C(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  _QWORD v6[3];
  _QWORD v7[3];

  v6[0] = CFSTR("fenceId");
  v7[0] = objc_msgSend(*(id *)(a1 + 32), "fenceID");
  v6[1] = CFSTR("fenceRadius");
  objc_msgSend(*(id *)(a1 + 32), "radius");
  v7[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  v6[2] = CFSTR("totalDurationInFence");
  objc_msgSend(*(id *)(a1 + 32), "timeFenceExit");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 32), "timeFenceStart");
  v7[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3 - v4);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 3);
}

int64_t sub_100A39B60(id a1, NSDictionary *a2, NSDictionary *a3)
{
  return (int64_t)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("timestamp")), "compare:", -[NSDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("timestamp")));
}

uint64_t **sub_100A39DF4(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t **v6;
  unint64_t v7;
  char *v8;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = v3[4];
        if (v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v8 + 4) = v5;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *((_QWORD *)v8 + 21) = 0;
    sub_1000145B0(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

uint64_t sub_100A3AB80(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100A3B960(id a1)
{
  qword_10229FF78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PedestrianFence");
}

float *sub_100A3B98C@<X0>(float *result@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  v4 = a2[3];
  v3 = a2[4];
  v6 = result[3];
  v5 = result[4];
  v7 = a2[2];
  v8 = result[2];
  v9 = (float)(v6 * v3) - (float)(v5 * v4);
  v10 = (float)(v5 * v7) - (float)(v8 * v3);
  v11 = (float)(v8 * v4) - (float)(v6 * v7);
  v12 = sqrtf((float)((float)(v10 * v10) + (float)(v9 * v9)) + (float)(v11 * v11));
  if (v12 > 0.0)
  {
    v9 = v9 / v12;
    v10 = v10 / v12;
    v11 = v11 / v12;
  }
  v13 = (float)(v4 * v11) - (float)(v3 * v10);
  v14 = (float)(v3 * v9) - (float)(v7 * v11);
  v15 = (float)(v7 * v10) - (float)(v4 * v9);
  v16 = sqrtf((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v15 * v15));
  if (v16 > 0.0)
  {
    v13 = v13 / v16;
    v14 = v14 / v16;
    v15 = v15 / v16;
  }
  v17 = -v3;
  v18 = -v7;
  v19 = -v4;
  v20 = sqrtf((float)((float)(v4 * v4) + (float)(v7 * v7)) + (float)(v3 * v3));
  if (v20 > 0.0)
  {
    v18 = v18 / v20;
    v19 = v19 / v20;
    v17 = v17 / v20;
  }
  *(_QWORD *)a3 = off_102165E68;
  *(_QWORD *)(a3 + 8) = off_1021388A0;
  *(float *)(a3 + 16) = v13;
  *(float *)(a3 + 20) = v14;
  *(float *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = off_1021388A0;
  *(float *)(a3 + 40) = v9;
  *(float *)(a3 + 44) = v10;
  *(float *)(a3 + 48) = v11;
  *(_QWORD *)(a3 + 56) = off_1021388A0;
  *(float *)(a3 + 64) = v18;
  *(float *)(a3 + 68) = v19;
  *(float *)(a3 + 72) = v17;
  return result;
}

uint64_t sub_100A3BA84(float *a1, float *a2, float *a3, float *a4)
{
  float v8;
  float v9;
  float v10;
  __float2 v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v8 = a1[6];
  v9 = a1[12];
  if (v8 != 0.0 || (v10 = 0.0, v9 != 0.0))
    v10 = atan2f(v9, v8);
  *a4 = v10;
  v11 = __sincosf_stret(v10);
  v12 = (float)(v11.__sinval * a1[12]) + (float)(v11.__cosval * a1[6]);
  v13 = a1[18];
  if (v12 == 0.0 && v13 == 0.0)
    return 0;
  *a3 = atan2f(v12, v13);
  v14 = (float)(v11.__cosval * a1[11]) - (float)(v11.__sinval * a1[5]);
  v15 = (float)(v11.__cosval * a1[10]) - (float)(v11.__sinval * a1[4]);
  if (v14 == 0.0 && v15 == 0.0)
    return 0;
  *a2 = atan2f(v15, v14);
  return 1;
}

uint64_t sub_100A3BB5C(float *a1, float *a2)
{
  uint64_t result;
  float v4;
  float v5;
  float v6;
  float v7;

  v7 = 0.0;
  v5 = 0.0;
  result = sub_100A3BA84(a1, &v5, &v6, &v7);
  if ((_DWORD)result)
  {
    v4 = (float)((float)-v5 - v7) * 57.2957795;
    if (v4 >= 0.0)
    {
      for (; v4 >= 360.0; v4 = v4 + -360.0)
        ;
    }
    else
    {
      for (; v4 < -360.0; v4 = v4 + 360.0)
        ;
      v4 = v4 + 360.0;
    }
    *a2 = v4;
  }
  return result;
}

float sub_100A3BC34(int a1, float result)
{
  if (result >= 0.0)
  {
    for (; result >= 360.0; result = result + -360.0)
      ;
  }
  else
  {
    for (; result < -360.0; result = result + 360.0)
      ;
    result = result + 360.0;
  }
  if (result >= 180.0 && a1 == 1)
    return result + -360.0;
  return result;
}

BOOL sub_100A3BCC8(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  _BOOL8 v8;
  float v10;

  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  v6 = (float)((float)(a1[5] * v4) + (float)(a1[4] * v3)) + (float)(a1[6] * v5);
  v7 = (float)((float)(v4 * a1[11]) + (float)(a1[10] * v3)) + (float)(a1[12] * v5);
  v8 = v7 != 0.0 || v6 != 0.0;
  if (v8)
  {
    v10 = atan2f(-v7, v6) * 57.2957795;
    if (v10 >= 0.0)
    {
      for (; v10 >= 360.0; v10 = v10 + -360.0)
        ;
    }
    else
    {
      for (; v10 < -360.0; v10 = v10 + 360.0)
        ;
      v10 = v10 + 360.0;
    }
    *a3 = v10;
  }
  return v8;
}

BOOL sub_100A3BDC0(float *a1, float *a2, float *a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _BOOL8 result;
  uint64_t (**v19)();
  float v20;
  float v21;
  float v22;
  uint64_t (**v23)();
  float v24;
  float v25;
  float v26;
  float v27[20];
  uint64_t (**v28)();
  uint64_t v29;
  int v30;

  v28 = off_1021388A0;
  v29 = 0;
  v30 = 0;
  v4 = a2[4];
  v5 = fabsf(v4);
  v6 = a2[2];
  v7 = 0.0;
  if (v5 > fabsf(v6) && v5 > fabsf(a2[3]) && v4 > 0.0)
  {
    LODWORD(v29) = 1031798784;
    v30 = 0;
    v7 = 0.0625;
  }
  v8 = a1[2];
  v9 = a1[3];
  v10 = a1[4];
  v11 = sqrtf((float)((float)(v9 * v9) + (float)(v8 * v8)) + (float)(v10 * v10));
  if (v11 > 0.0)
  {
    v8 = v8 / v11;
    v9 = v9 / v11;
    v10 = v10 / v11;
  }
  v12 = (float)(v9 + (float)(v8 * 0.0)) + (float)(v10 * 0.0);
  v13 = v9 * 0.0;
  v23 = off_1021388A0;
  v24 = v12;
  v25 = (float)(v13 - v8) + (float)(v10 * 0.0);
  v26 = v10 + (float)(v13 + (float)(v8 * 0.0));
  v14 = a2[3];
  v15 = sqrtf((float)((float)(v14 * v14) + (float)(v6 * v6)) + (float)(v4 * v4));
  if (v15 > 0.0)
  {
    v6 = v6 / v15;
    v14 = v14 / v15;
    v4 = v4 / v15;
  }
  v16 = (float)(v14 + (float)(v6 * 0.0)) + (float)(v4 * 0.0);
  v17 = v14 * 0.0;
  v19 = off_1021388A0;
  v20 = v16;
  v21 = (float)(v17 - v6) + (float)(v4 * 0.0);
  v22 = v4 + (float)(v17 + (float)(v6 * 0.0));
  sub_100A3B98C((float *)&v23, (float *)&v19, (uint64_t)v27);
  if (v7 == 0.0)
  {
    if ((sub_100A3BB5C(v27, a3) & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_100A3BCC8(v27, (float *)&v28, a3);
    if (!result)
      return result;
  }
  return 1;
}

void sub_100A3BF34()
{
  operator delete();
}

void sub_100A3BF4C(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 24584) = 0;
  v2 = *(void ***)(a1 + 24600);
  v3 = *(_QWORD *)(a1 + 24608);
  *(_QWORD *)(a1 + 24632) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(*(_QWORD *)(a1 + 24600) + 8);
      *(_QWORD *)(a1 + 24600) = v2;
      v4 = *(_QWORD *)(a1 + 24608) - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v5 = 85;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v5 = 170;
  }
  *(_QWORD *)(a1 + 24624) = v5;
LABEL_8:
  *(_QWORD *)(a1 + 24640) = 0;
  v6 = *(void ***)(a1 + 24656);
  v7 = *(_QWORD *)(a1 + 24664);
  *(_QWORD *)(a1 + 24688) = 0;
  v8 = v7 - (_QWORD)v6;
  if (v8 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      v6 = (void **)(*(_QWORD *)(a1 + 24656) + 8);
      *(_QWORD *)(a1 + 24656) = v6;
      v8 = *(_QWORD *)(a1 + 24664) - (_QWORD)v6;
    }
    while (v8 > 0x10);
  }
  if (v8 >> 3 == 1)
  {
    v9 = 85;
    goto LABEL_14;
  }
  if (v8 >> 3 == 2)
  {
    v9 = 170;
LABEL_14:
    *(_QWORD *)(a1 + 24680) = v9;
  }
  *(_QWORD *)(a1 + 24696) = 0;
}

void sub_100A3C038(unsigned __int16 *a1, uint64_t *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 > 0.0)
  {
    v13 = v6;
    v14 = v5;
    v15 = v3;
    v16 = v4;
    sub_100A3C0A0(a1, a3);
    v10 = *a2;
    *(double *)&v11 = a3;
    *((_QWORD *)&v11 + 1) = v10;
    v12 = *((_DWORD *)a2 + 2);
    sub_10021C2E4(a1, &v11);
    sub_100A3C4E4((uint64_t)a1, a3);
  }
}

void sub_100A3C0A0(unsigned __int16 *a1, double a2)
{
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  const char *v11;
  double v12;
  NSObject *v13;
  double v14;
  float v15;
  uint8_t *v16;
  uint8_t buf[4];
  double v18;

  if (a1[1])
  {
    v4 = a1 + 4;
    v5 = a1[1] + (unint64_t)*a1 - 1;
    v6 = *((unsigned int *)a1 + 1);
    if (v5 < v6)
      v6 = 0;
    if (*(double *)&v4[12 * (v5 - v6)] + 1.0 < a2)
    {
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_102165EA8);
      v7 = off_10229FFF8;
      if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
      {
        v8 = *a1 + (unint64_t)a1[1] - 1;
        v9 = *((unsigned int *)a1 + 1);
        if (v8 < v9)
          v9 = 0;
        v10 = a2 - *(double *)&v4[12 * (v8 - v9)];
        *(_DWORD *)buf = 134217984;
        v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Resetting detector, %.1f seconds without an accel sample", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_26;
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_102165EA8);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Resetting detector, %.1f seconds without an accel sample");
LABEL_31:
      v16 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CMChoreaDetection::checkForGap(CFAbsoluteTime)", "%s\n", v11);
      if (v16 != buf)
        free(v16);
LABEL_26:
      sub_100A3BF4C((uint64_t)a1);
      return;
    }
  }
  if (*((_QWORD *)a1 + 3079))
  {
    v12 = *(double *)(*(_QWORD *)(*((_QWORD *)a1 + 3075) + 8 * (*((_QWORD *)a1 + 3078) / 0xAAuLL))
                    + 24 * (*((_QWORD *)a1 + 3078) % 0xAAuLL));
    if (v12 < *((double *)a1 + 3087))
      v12 = *((double *)a1 + 3087);
    if (v12 + 600.0 < a2)
    {
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_102165EA8);
      v13 = off_10229FFF8;
      if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
      {
        v14 = *(double *)(*(_QWORD *)(*((_QWORD *)a1 + 3075) + 8 * (*((_QWORD *)a1 + 3078) / 0xAAuLL))
                        + 24 * (*((_QWORD *)a1 + 3078) % 0xAAuLL));
        if (v14 < *((double *)a1 + 3087))
          v14 = *((double *)a1 + 3087);
        v15 = a2 - v14;
        *(_DWORD *)buf = 134217984;
        v18 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Resetting detector, %.1f seconds without a tremor score", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_26;
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_102165EA8);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Resetting detector, %.1f seconds without a tremor score");
      goto LABEL_31;
    }
  }
}

void sub_100A3C4E4(uint64_t a1, double a2)
{
  double *v3;
  uint64_t v4;
  double v5;

  if (!*(_QWORD *)(a1 + 24584))
    *(_QWORD *)(a1 + 24584) = 2560 * (1000 * (uint64_t)a2 / 2560) + 2560;
  if (*(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    v3 = (double *)sub_10055E504((unsigned __int16 *)a1, 0x200uLL);
    v4 = *(_QWORD *)(a1 + 24584);
    if (v4 >= 1)
    {
      v5 = (double)v4 / 1000.0;
      if (*v3 >= v5)
      {
        if (*v3 < (double)(v4 + 1280) / 1000.0)
        {
          sub_100A3CA10(a1, v5);
          v4 = *(_QWORD *)(a1 + 24584);
        }
        *(_QWORD *)(a1 + 24584) = v4 + 2560;
      }
    }
  }
}

double sub_100A3C5A4(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  double result;

  v4 = a1[3075];
  v5 = a1[3078];
  v6 = (_QWORD *)(v4 + 8 * (v5 / 0xAA));
  v7 = a1[3076];
  if (v7 == v4)
    v8 = 0;
  else
    v8 = (_QWORD *)(*v6 + 24 * (v5 % 0xAA));
  while (1)
  {
    if (v7 == v4)
    {
      v10 = 0;
    }
    else
    {
      v9 = a1[3079] + a1[3078];
      v10 = *(_QWORD *)(v4 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA);
    }
    if (v8 == (_QWORD *)v10)
      break;
    sub_100A3C6B8((uint64_t)v8, (uint64_t)a2);
    if (*(double *)v8 < a2->n128_f64[0])
      a1[3087] = *v8;
    v8 += 3;
    if ((_QWORD *)((char *)v8 - *v6) == (_QWORD *)4080)
    {
      v11 = (_QWORD *)v6[1];
      ++v6;
      v8 = v11;
    }
    v4 = a1[3075];
    v7 = a1[3076];
  }
  sub_100A3C760((uint64_t)a1);
  *(_QWORD *)&result = sub_100A3C964(a1 + 3081, a2).n128_u64[0];
  return result;
}

uint64_t sub_100A3C6B8(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  float v5;
  double v6;
  int v7;
  int v8;

  if (*(double *)result + 1.5 > *(double *)a2 && *(double *)result < *(double *)a2 + 1.5)
  {
    v3 = *(_DWORD *)(result + 20);
    v4 = *(_DWORD *)(a2 + 8);
    if (v3 <= v4)
      v3 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(result + 20) = v3;
    if (v4 >= 1)
    {
      v5 = *(float *)(result + 12);
      if (v5 > -0.2)
        v5 = -0.2;
      *(float *)(result + 12) = v5;
      v6 = *(float *)(a2 + 12);
      if (v6 <= 2.2)
        v7 = 3;
      else
        v7 = 4;
      if (v6 <= 0.1)
        v8 = 1;
      else
        v8 = 2;
      if (v6 <= 0.6)
        v7 = v8;
      if (v3 <= v7)
        v3 = v7;
      *(_DWORD *)(result + 20) = v3;
    }
  }
  return result;
}

uint64_t sub_100A3C760(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  int v10;
  uint64_t v11;
  double *v12;
  float v13;
  double *v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  double i;
  unint64_t v21;
  double v22;
  _BOOL4 v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;

  v1 = *(_QWORD *)(result + 24632);
  if (v1)
  {
    v2 = result;
    v3 = *(double *)(result + 24696);
    v4 = *(_QWORD *)(result + 24600);
    v5 = *(_QWORD *)(result + 24624);
    v6 = (unint64_t *)(v4 + 8 * (v5 / 0xAA));
    v7 = *v6;
    v8 = *v6 + 24 * (v5 % 0xAA);
    v9 = *(double *)v8;
    if (v3 > *(double *)v8 + 60.0)
    {
      if (*(_QWORD *)(result + 24704))
      {
        v10 = 0;
        v11 = *(_QWORD *)(result + 24608);
        if (v11 == v4)
          v12 = 0;
        else
          v12 = (double *)(*v6 + 24 * (v5 % 0xAA));
        v13 = 0.0;
        v14 = (double *)*v6;
        v15 = v4 + 8 * (v5 / 0xAA);
        v16 = v12;
LABEL_8:
        v17 = (char *)v14 - (char *)v16 + 4080;
        while (1)
        {
          v18 = v11 == v4 ? 0 : *(_QWORD *)(v4 + 8 * ((v5 + v1) / 0xAA)) + 24 * ((v5 + v1) % 0xAA);
          if (v16 == (double *)v18 || *v16 > v3)
            break;
          v13 = v13 + *((float *)v16 + 3);
          ++v10;
          v16 += 3;
          v17 -= 24;
          if (!v17)
          {
            v19 = *(double **)(v15 + 8);
            v15 += 8;
            v14 = v19;
            v16 = v19;
            goto LABEL_8;
          }
        }
        for (i = *v12; i <= *(double *)(v2 + 24640); i = *(double *)v8)
        {
          v8 += 24;
          if (v8 - v7 == 4080)
          {
            v21 = v6[1];
            ++v6;
            v7 = v21;
            v8 = v21;
          }
        }
        v22 = (v3 + v9) * 0.5;
        if (i <= v22)
        {
          v23 = (float)(v13 / (float)v10) > 0.16;
          do
          {
            v24 = *(_QWORD *)(v8 + 16);
            v27 = *(_OWORD *)v8;
            v28 = v24;
            DWORD2(v27) = v23;
            v25 = *(double *)v8;
            v8 += 24;
            *(double *)(v2 + 24640) = v25;
            (*(void (**)(__int128 *, _QWORD, uint64_t))(v2 + 24704))(&v27, *(_QWORD *)(v2 + 24712), v17);
            if (v8 - *v6 == 4080)
            {
              v26 = v6[1];
              ++v6;
              v8 = v26;
            }
          }
          while (*(double *)v8 <= v22);
          v5 = *(_QWORD *)(v2 + 24624);
          v1 = *(_QWORD *)(v2 + 24632);
        }
      }
      *(_QWORD *)(v2 + 24632) = v1 - 1;
      *(_QWORD *)(v2 + 24624) = v5 + 1;
      return sub_10047FDC4(v2 + 24592, 1);
    }
  }
  return result;
}

__n128 sub_100A3C964(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100A3DC38(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_100A3CA10(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float *v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _DWORD *v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45[3];
  __n128 v46;
  float v47;
  int v48;
  _DWORD v49[128];
  _DWORD v50[128];
  _DWORD v51[128];

  if (*(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    v46.n128_u64[1] = 0xFFFFFFFFLL;
    v48 = -1;
    v46.n128_f64[0] = a2;
    sub_100A3CE04(a1, v51, (unsigned __int16 *)a1, 1);
    sub_100A3CE04(v3, v50, (unsigned __int16 *)a1, 16);
    sub_100A3CE04(v4, v49, (unsigned __int16 *)a1, 256);
    v5 = 0.0;
    if (dword_102306400 < dword_102306404)
    {
      v6 = (float *)&v51[dword_102306400];
      v7 = (float *)&v50[dword_102306400];
      v8 = dword_102306404 - (uint64_t)dword_102306400;
      v9 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
      v12 = (float *)&v49[dword_102306400];
      do
      {
        v13 = *v6++;
        v14 = v13;
        v15 = *v7++;
        v9 = v9 + (float)(v14 * v14);
        v10 = v10 + (float)(v15 * v15);
        v16 = *v12++;
        v11 = v11 + (float)(v16 * v16);
        --v8;
      }
      while (v8);
      v5 = v11 + (float)(v10 + v9);
    }
    v47 = v5;
    v17 = operator new(0x14uLL);
    v45[0] = (uint64_t)v17;
    v45[2] = (uint64_t)(v17 + 5);
    v17[4] = 1069547520;
    *(_OWORD *)v17 = xmmword_101C042FC;
    v45[1] = (uint64_t)(v17 + 5);
    v18 = sub_100A3D01C(a1, (uint64_t)v51);
    v20 = v18 * sub_100D043E4(25, 0x80uLL);
    if (v20 > 0.0)
    {
      sub_100A3D1F8(v20, v19, (uint64_t)v51, v45);
      sub_100A3D1F8(v20, v21, (uint64_t)v50, v45);
      sub_100A3D1F8(v20, v22, (uint64_t)v49, v45);
    }
    v23 = sub_100A3D518(v19, (uint64_t)v51);
    v25 = sub_100A3D518(v24, (uint64_t)v50);
    v27 = sub_100A3D518(v26, (uint64_t)v49);
    v28 = (qword_102311BE8 - qword_102311BE0) >> 2;
    if (qword_102311BE8 != qword_102311BE0)
    {
      v29 = 0;
      v30 = (float)((float)(v23 + v25) + v27) / 3.0;
      if (v28 <= 1)
        v31 = 1;
      else
        v31 = (qword_102311BE8 - qword_102311BE0) >> 2;
      while (v30 >= *(float *)(qword_102311BE0 + 4 * v29))
      {
        if (v31 == ++v29)
          goto LABEL_16;
      }
      LODWORD(v28) = v29;
    }
LABEL_16:
    v32 = (qword_102311C00 - qword_102311BF8) >> 2;
    if (qword_102311C00 != qword_102311BF8)
    {
      v33 = 0;
      if (v32 <= 1)
        v34 = 1;
      else
        v34 = (qword_102311C00 - qword_102311BF8) >> 2;
      while (v5 >= *(float *)(qword_102311BF8 + 4 * v33))
      {
        if (v34 == ++v33)
          goto LABEL_24;
      }
      LODWORD(v32) = v33;
    }
LABEL_24:
    v46.n128_u32[3] = *(_DWORD *)(*(_QWORD *)(qword_102311C10 + 24 * (int)v28) + 4 * (int)v32);
    sub_100A3D620((_QWORD *)(a1 + 24592), &v46);
    v35 = *(_QWORD *)(a1 + 24656);
    v36 = *(_QWORD *)(a1 + 24680);
    v37 = (_QWORD *)(v35 + 8 * (v36 / 0xAA));
    v38 = *(_QWORD *)(a1 + 24664);
    if (v38 == v35)
      v39 = 0;
    else
      v39 = (char *)(*v37 + 24 * (v36 % 0xAA));
    while (1)
    {
      if (v38 == v35)
      {
        v41 = 0;
      }
      else
      {
        v40 = *(_QWORD *)(a1 + 24688) + *(_QWORD *)(a1 + 24680);
        v41 = *(_QWORD *)(v35 + 8 * (v40 / 0xAA)) + 24 * (v40 % 0xAA);
      }
      if (v39 == (char *)v41)
        break;
      v42 = *(_QWORD *)(a1 + 24632) + *(_QWORD *)(a1 + 24624) - 1;
      sub_100A3C6B8(*(_QWORD *)(*(_QWORD *)(a1 + 24600) + 8 * (v42 / 0xAA)) + 24 * (v42 % 0xAA), (uint64_t)v39);
      if (*(double *)v39 >= v46.n128_f64[0])
      {
        v39 += 24;
        if (&v39[-*v37] == (char *)4080)
        {
          v44 = (char *)v37[1];
          ++v37;
          v39 = v44;
        }
      }
      else
      {
        v37 = (_QWORD *)sub_100A3D6CC((int64x2_t *)(a1 + 24648), v37, v39);
        v39 = v43;
      }
      v35 = *(_QWORD *)(a1 + 24656);
      v38 = *(_QWORD *)(a1 + 24664);
    }
    operator delete(v17);
  }
}

void sub_100A3CDE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100A3CE04(uint64_t a1, _DWORD *a2, unsigned __int16 *a3, int a4)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _BYTE v30[2200];
  unsigned __int16 v31[516];

  *(_QWORD *)v31 = 0x10000000000;
  sub_1014022D8(v30);
  v7 = 0;
  v8 = 0;
  v9 = -4;
  do
  {
    v10 = v9 + 4;
    if (a4 == 256)
    {
      v18 = *(float *)(sub_10055E504(a3, v10) + 16);
      v19 = *(float *)(sub_10055E504(a3, v9 + 5) + 16);
      v20 = *(float *)(sub_10055E504(a3, v9 + 6) + 16);
      v21 = sub_10055E504(a3, v9 + 7);
      v16 = (float)(v18 + v19) + v20;
      v17 = *(float *)(v21 + 16);
    }
    else if (a4 == 16)
    {
      v22 = *(float *)(sub_10055E504(a3, v10) + 12);
      v23 = *(float *)(sub_10055E504(a3, v9 + 5) + 12);
      v24 = *(float *)(sub_10055E504(a3, v9 + 6) + 12);
      v25 = sub_10055E504(a3, v9 + 7);
      v16 = (float)(v22 + v23) + v24;
      v17 = *(float *)(v25 + 12);
    }
    else
    {
      v11 = 0.0;
      if (a4 != 1)
        goto LABEL_9;
      v12 = *(float *)(sub_10055E504(a3, v10) + 8);
      v13 = *(float *)(sub_10055E504(a3, v9 + 5) + 8);
      v14 = *(float *)(sub_10055E504(a3, v9 + 6) + 8);
      v15 = sub_10055E504(a3, v9 + 7);
      v16 = (float)(v12 + v13) + v14;
      v17 = *(float *)(v15 + 8);
    }
    v11 = (float)(v16 + v17) * 0.25;
LABEL_9:
    v26 = v8 + (unsigned __int16)v7;
    if (v26 >= 0x100)
      v27 = -256;
    else
      v27 = 0;
    *(float *)&v31[2 * v27 + 4 + 2 * v26] = v11;
    if (v8 > 0xFF)
    {
      if ((unsigned __int16)v7 >= 0xFFu)
        v28 = -256;
      else
        v28 = 0;
      v29 = v7 + v28;
      v7 = v29 + 1;
      v31[0] = v29 + 1;
    }
    else
    {
      v31[1] = ++v8;
    }
    v9 += 4;
  }
  while (v9 < 0x3FC);
  sub_1014022DC((uint64_t)v30, a2, v31);
}

float sub_100A3D01C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  int v5;
  int v6;
  float *v7;
  float *v8;
  float v9;
  double v10;
  int v11;
  uint64_t v12;
  int v13;
  float v14;
  double v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v27;
  float v28;

  v3 = atomic_load((unsigned __int8 *)&qword_102306418);
  if ((v3 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_102306418);
    if ((_DWORD)a1)
    {
      v27 = sub_100D043B4(25, 0x80uLL, 1.0);
      dword_102306410 = sub_100D041E0(v27) - 1;
      __cxa_guard_release(&qword_102306418);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_102306428);
  if ((v4 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_102306428);
    if ((_DWORD)a1)
    {
      v28 = sub_100D043B4(25, 0x80uLL, 2.6667);
      dword_102306420 = sub_100D041E0(v28);
      __cxa_guard_release(&qword_102306428);
    }
  }
  v5 = dword_102306410;
  v6 = dword_102306420;
  if (dword_102306410 >= dword_102306420)
  {
    v13 = dword_102306410;
  }
  else
  {
    v7 = (float *)(a2 + 4 * dword_102306410);
    v9 = *v7;
    v8 = v7 + 1;
    v10 = v9;
    v11 = dword_102306410 + 1;
    v12 = dword_102306420 - (uint64_t)dword_102306410;
    v13 = dword_102306410;
    do
    {
      v14 = *v8++;
      v15 = v14;
      if (v10 < v14)
      {
        v13 = v11;
        v10 = v15;
      }
      ++v11;
      --v12;
    }
    while (v12);
  }
  v16 = (float)v13 + -0.5;
  v17 = (float)v13 + 0.5;
  v19 = sub_100A3D998(v16, v17, a1, a2);
  v21 = v20;
  if (v13 >= 0)
    v22 = v13;
  else
    v22 = v13 + 1;
  if (v5 < v22 >> 1)
  {
    v23 = sub_100A3D998(v16 * 0.5, v17 * 0.5, v18, a2);
    if (v23 > v19)
    {
      v19 = v23;
      v21 = v24;
    }
  }
  if (v6 > 2 * v13 && sub_100A3D998(v16 + v16, v17 + v17, v18, a2) > v19)
    return v25;
  return v21;
}

void sub_100A3D1D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102306428);
  _Unwind_Resume(a1);
}

void sub_100A3D1F8(float a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int8 v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  signed int v12;
  float v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  float *v22;
  float v23;
  unint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int v38;
  float v39;
  uint64_t v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float *__p;
  float *v46;
  char *v47;

  v7 = atomic_load((unsigned __int8 *)&qword_102306438);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_102306438))
  {
    dword_102306430 = sub_100D043E4(25, 0x80uLL);
    __cxa_guard_release(&qword_102306438);
  }
  v8 = 0;
  v9 = 0;
  v10 = *(float *)&dword_102306430;
  v11 = a1 / *(float *)&dword_102306430;
  v12 = llroundf(v11);
  v13 = *(float *)(a3 + 4 * v12);
  __p = 0;
  v46 = 0;
  v47 = 0;
  if (dword_10230640C >= 2)
  {
    v8 = 0;
    v14 = 1;
    do
    {
      if (v8 >= (float *)v47)
      {
        v15 = __p;
        v16 = v8 - __p;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          sub_100259694();
        v18 = v47 - (char *)__p;
        if ((v47 - (char *)__p) >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_100260634((uint64_t)&v47, v19);
          v15 = __p;
          v8 = v46;
        }
        else
        {
          v20 = 0;
        }
        v21 = (float *)&v20[4 * v16];
        v10 = *(float *)(a3 + 4 * v14);
        *v21 = v10;
        v22 = v21 + 1;
        while (v8 != v15)
        {
          v23 = *--v8;
          v10 = v23;
          *--v21 = v23;
        }
        __p = v21;
        v47 = &v20[4 * v19];
        if (v15)
          operator delete(v15);
        v8 = v22;
      }
      else
      {
        v10 = *(float *)(a3 + 4 * v14);
        *v8++ = v10;
      }
      v46 = v8;
      ++v14;
    }
    while (v14 < dword_10230640C);
    v9 = __p;
  }
  v24 = (unint64_t)(v8 - v9) >> 1;
  v25 = &v9[v24];
  if (v25 != v8)
  {
    sub_10053EEC0(v9, v25, v8, v10);
    v9 = __p;
    v24 = (unint64_t)(v46 - __p) >> 1;
  }
  v26 = *a4;
  v27 = a4[1];
  v28 = v27 - *a4;
  if (v27 == *a4)
    goto LABEL_48;
  v29 = 0;
  v30 = v9[v24];
  v31 = v28 >> 2;
  v32 = dword_10230640C;
  if (v31 <= 1)
    v31 = 1;
  v33 = 0.12 / *(float *)&dword_102306430;
  do
  {
    v34 = v11 * *(float *)(v26 + 4 * v29);
    v35 = floorf(v34 + -0.001);
    v36 = ceilf(v34 - v33);
    if (v36 < v35)
      v35 = v36;
    v37 = ceilf(v34 + 0.001);
    v38 = (int)v35;
    v39 = floorf(v34 + v33);
    if (v37 >= v39)
      v39 = v37;
    if (v38 <= (int)v39)
    {
      v40 = v38;
      v41 = (int)v39 - v38 + 1;
      do
      {
        if (v12 != v40 && v40 <= v32)
        {
          v42 = *(float *)(a3 + 4 * v40) - v30;
          if (v42 >= v13)
            v43 = v13;
          else
            v43 = *(float *)(a3 + 4 * v40) - v30;
          if (*(float *)(v26 + 4 * v29) > 1.0)
            v42 = v43;
          v44 = *(float *)(a3 + 4 * v12);
          if ((float)(v30 - v44) >= v42)
            v42 = v30 - v44;
          *(float *)(a3 + 4 * v12) = v44 + v42;
          *(float *)(a3 + 4 * v40) = *(float *)(a3 + 4 * v40) - v42;
        }
        ++v40;
        --v41;
      }
      while (v41);
    }
    ++v29;
  }
  while (v29 != v31);
  if (v9)
LABEL_48:
    operator delete(v9);
}

void sub_100A3D4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  __cxa_guard_abort(&qword_102306438);
  _Unwind_Resume(a1);
}

float sub_100A3D518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  double v4;
  float *v5;
  float *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  _DWORD v15[128];

  v2 = dword_102306408;
  v3 = dword_10230640C;
  v4 = 0.0;
  if (dword_10230640C > dword_102306408)
  {
    v5 = (float *)(a2 + 4 * dword_102306408);
    v6 = (float *)&v15[dword_102306408];
    v7 = dword_10230640C - (uint64_t)dword_102306408;
    v8 = 0.0;
    v9 = v7;
    do
    {
      v10 = *v5++;
      *v6++ = v10 * v10;
      v8 = v8 + (float)(v10 * v10);
      --v9;
    }
    while (v9);
    v11 = (float *)&v15[v2];
    v4 = 0.0;
    do
    {
      v12 = *v11++;
      v13 = v12 / v8;
      v4 = v4 - (float)(log2f(v13) * v13);
      --v7;
    }
    while (v7);
  }
  return v4 / log2((double)(v3 - (int)v2));
}

__n128 sub_100A3D620(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100A3DF4C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

unint64_t sub_100A3D6CC(int64x2_t *a1, _QWORD *a2, char *a3)
{
  unint64_t v4;
  uint64_t v5;
  char **v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE **v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  __n128 v27[2];

  v4 = a1[2].u64[0];
  v5 = a1->i64[1];
  v6 = (char **)(v5 + 8 * (v4 / 0xAA));
  if (a1[1].i64[0] == v5)
    v7 = 0;
  else
    v7 = &(*v6)[24 * (v4 % 0xAA)];
  if (a3 == v7)
    v8 = 0;
  else
    v8 = 170 * ((char **)a2 - v6)
       - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 3)
       + 0x5555555555555555 * ((v7 - *v6) >> 3);
  v27[0].n128_u64[0] = v5 + 8 * (v4 / 0xAA);
  v27[0].n128_u64[1] = (unint64_t)v7;
  sub_1004CDD14(v27, v8);
  v9 = a1[2].i64[1];
  v10 = v27[0].n128_u64[1] - *(_QWORD *)v27[0].n128_u64[0];
  v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -23)
    {
      v15 = (_QWORD *)(v27[0].n128_u64[0] - 8 * ((168 - v11) / 0xAA));
      v16 = (char *)(*v15 + 24 * (170 * ((168 - v11) / 0xAA) - (168 - v11)) + 4056);
    }
    else
    {
      v15 = (_QWORD *)(v27[0].n128_u64[0] + 8 * ((v11 + 1) / 0xAA));
      v16 = (char *)(*v15 + 24 * ((v11 + 1) % 0xAA));
    }
    sub_100A3E260(v6, v7, (char **)v27[0].n128_u64[0], (char *)v27[0].n128_u64[1], v15, v16, v27);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
    sub_10047FDC4((uint64_t)a1, 1);
  }
  else
  {
    if (v10 < -23)
    {
      v17 = 168 - v11;
      v13 = (_QWORD *)(v27[0].n128_u64[0] - 8 * (v17 / 0xAA));
      v14 = (_BYTE *)(*v13 + 24 * (170 * (v17 / 0xAA) - v17) + 4056);
    }
    else
    {
      v12 = v11 + 1;
      v13 = (_QWORD *)(v27[0].n128_u64[0] + 8 * (v12 / 0xAA));
      v14 = (_BYTE *)(*v13 + 24 * (v12 % 0xAA));
    }
    v18 = a1[2].i64[0] + v9;
    v19 = a1->i64[1];
    v20 = (_BYTE **)(v19 + 8 * (v18 / 0xAA));
    if (a1[1].i64[0] == v19)
      v21 = 0;
    else
      v21 = &(*v20)[24 * (v18 % 0xAA)];
    sub_100A3E418(v13, v14, v20, v21, (uint64_t)v27);
    --a1[2].i64[1];
    sub_1004CDEEC(a1, 1);
  }
  v22 = a1[2].u64[0];
  v23 = a1->i64[1];
  v24 = (_QWORD *)(v23 + 8 * (v22 / 0xAA));
  if (a1[1].i64[0] == v23)
    v25 = 0;
  else
    v25 = *v24 + 24 * (v22 % 0xAA);
  v27[0].n128_u64[0] = (unint64_t)v24;
  v27[0].n128_u64[1] = v25;
  sub_1004CDD14(v27, v8);
  return v27[0].n128_u64[0];
}

float sub_100A3D998(float a1, float a2, uint64_t a3, uint64_t a4)
{
  int v4;
  signed int v5;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float *v10;
  double v11;
  float v12;
  double v13;
  float v14;
  float v15;
  float v16;
  signed int v17;
  signed int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  double v23;
  float v24;
  double v25;
  int v26;
  signed int v27;
  double v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  float *v32;
  double v33;
  float v34;
  double v35;
  float v36;
  int v37;
  signed int v38;
  double v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  float *v43;
  double v44;
  float v45;
  double v46;
  float v47;
  signed int v48;
  signed int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  double v54;
  float v55;
  double v56;

  v4 = vcvtms_s32_f32(a1);
  v5 = vcvtps_s32_f32(a2);
  v6 = *(float *)(a4 + 4 * v4);
  if (v4 < v5)
  {
    v7 = v5;
    v8 = v4 + 1;
    v9 = v7 - v4;
    v10 = (float *)(a4 + 4 * v4 + 4);
    v11 = *(float *)(a4 + 4 * v4);
    do
    {
      v12 = *v10++;
      v13 = v12;
      if (v11 < v12)
      {
        v4 = v8;
        v6 = v13;
        v11 = v13;
      }
      ++v8;
      --v9;
    }
    while (v9);
  }
  v14 = (float)v4;
  v15 = (float)v4 + -0.5;
  if (v15 <= a1)
    v15 = a1;
  if ((float)(v14 + 0.5) >= a2)
    v16 = a2;
  else
    v16 = v14 + 0.5;
  v17 = vcvtmd_s64_f64(v15 * 0.5);
  v18 = vcvtpd_s64_f64(v16 * 0.5);
  v19 = *(float *)(a4 + 4 * v17);
  if (v17 < v18)
  {
    v20 = v17;
    v21 = v18 - (uint64_t)v17;
    v22 = (float *)(a4 + 4 * v20 + 4);
    v23 = v19;
    do
    {
      v24 = *v22++;
      v25 = v24;
      if (v23 < v24)
      {
        v19 = v25;
        v23 = v25;
      }
      --v21;
    }
    while (v21);
  }
  v26 = vcvtms_s32_f32(v15 + v15);
  v27 = vcvtps_s32_f32(v16 + v16);
  v28 = *(float *)(a4 + 4 * v26);
  if (v26 < v27)
  {
    v29 = v27;
    v30 = v26 + 1;
    v31 = v29 - v26;
    v32 = (float *)(a4 + 4 * v26 + 4);
    v33 = *(float *)(a4 + 4 * v26);
    do
    {
      v34 = *v32++;
      v35 = v34;
      if (v33 < v34)
      {
        v26 = v30;
        v28 = v35;
        v33 = v35;
      }
      ++v30;
      --v31;
    }
    while (v31);
  }
  v36 = (float)((float)v26 + -0.5) * 0.5;
  if (v15 >= v36)
    v36 = v15;
  if ((float)((float)((float)v26 + 0.5) * 0.5) < v16)
    v16 = (float)((float)v26 + 0.5) * 0.5;
  v37 = vcvtms_s32_f32(v36 * 3.0);
  v38 = vcvtps_s32_f32(v16 * 3.0);
  v39 = *(float *)(a4 + 4 * v37);
  if (v37 < v38)
  {
    v40 = v38;
    v41 = v37 + 1;
    v42 = v40 - v37;
    v43 = (float *)(a4 + 4 * v37 + 4);
    v44 = *(float *)(a4 + 4 * v37);
    do
    {
      v45 = *v43++;
      v46 = v45;
      if (v44 < v45)
      {
        v37 = v41;
        v39 = v46;
        v44 = v46;
      }
      ++v41;
      --v42;
    }
    while (v42);
  }
  v47 = (float)((float)v37 + -0.5) / 3.0;
  if (v36 >= v47)
    v47 = v36;
  if ((float)((float)((float)v37 + 0.5) / 3.0) < v16)
    v16 = (float)((float)v37 + 0.5) / 3.0;
  v48 = vcvtmd_s64_f64(v47 * 1.5);
  v49 = vcvtpd_s64_f64(v16 * 1.5);
  v50 = *(float *)(a4 + 4 * v48);
  if (v48 < v49)
  {
    v51 = v48;
    v52 = v49 - (uint64_t)v48;
    v53 = (float *)(a4 + 4 * v51 + 4);
    v54 = v50;
    do
    {
      v55 = *v53++;
      v56 = v55;
      if (v54 < v55)
      {
        v50 = v56;
        v54 = v56;
      }
      --v52;
    }
    while (v52);
  }
  return v6 + v19 + v28 + v39 + v50;
}

void sub_100A3DC0C(id a1)
{
  off_10229FFF8 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_100A3DC38(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100A3DF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100A3DF4C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100A3E214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_100A3E260@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100A3E32C(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
    }
    v18 = *a1 + 4080;
    v19 = a2;
  }
  sub_100A3E32C(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100A3E32C@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3)) < v12)
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3);
      v11 -= 24 * v12;
      a4 -= 24 * v12;
      if (v12)
        result = memmove(a4, v11, 24 * v12 - 4);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100A3E418(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4080); ; i = v12 + 4080)
    {
      sub_100A3E4A8(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100A3E4A8(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100A3E4A8@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4080) >> 3);
      v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 24 * v12 - 4);
      v7 += 24 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 24 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

uint64_t sub_100A3E598()
{
  float v0;
  float v1;
  float v2;
  float v3;
  uint64_t result;

  v0 = sub_100D043B4(25, 0x80uLL, 1.0);
  dword_102306400 = sub_100D041E0(v0);
  v1 = sub_100D043B4(25, 0x80uLL, 3.0);
  dword_102306404 = sub_100D041E0(v1);
  v2 = sub_100D043B4(25, 0x80uLL, 0.25);
  dword_102306408 = sub_100D041E0(v2);
  v3 = sub_100D043B4(25, 0x80uLL, 7.25);
  result = sub_100D041E0(v3);
  dword_10230640C = result;
  return result;
}

_QWORD *sub_100A3E618(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *result;

  result = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *result = off_102165ED8;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t sub_100A3E63C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_102165ED8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = a1[7];
    a1[7] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = a1[6];
  a1[6] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_10002FA68((uint64_t)a1);
}

void sub_100A3E6CC(_QWORD *a1)
{
  sub_100A3E63C(a1);
  operator delete();
}

_QWORD *sub_100A3E6F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_102165FA0;
  v11[1] = sub_100A3E958;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessageSidebandOverride");
  sub_100A3F44C((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_102165FA0;
  v9[1] = sub_100A3EC88;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessageSidebandSensorFusionEnable");
  sub_100A3F44C((uint64_t)v16, (uint64_t)v9);
  sub_100A3F6A8(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_100A3E888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_100A3E958(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  void *Dictionary;
  id v6;
  id v7;
  void *v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  _QWORD v17[6];
  _WORD v18[8];
  uint8_t buf[1640];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1001A638C(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v6 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMOverrideSidebandOverride);
  v7 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMStateSidebandState);
  v8 = v7;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102165F50);
    v10 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Invalid message recieved from framework.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102165F50);
      v18[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Invalid message recieved from framework.", v18, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLSidebandSubscription::handleMessageSidebandOverride(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = sub_1001FBB04(0);
  if (objc_msgSend(v8, "unsignedIntValue") > 8)
  {
    v12 = 4;
LABEL_19:
    sub_100A3F208(a1, v12);
    goto LABEL_20;
  }
  if (!v11 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 80))(v11) & 1) == 0)
  {
    v12 = 2;
    goto LABEL_19;
  }
  v13 = objc_msgSend(v6, "BOOLValue");
  v14 = *(_QWORD *)(a1 + 48);
  if ((v13 & 1) != 0)
  {
    if (!v14)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100A3F3D0;
      v17[3] = &unk_102165F00;
      v17[4] = v8;
      v17[5] = a1;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 88))(v11, v17);
      goto LABEL_20;
    }
    (*(void (**)(uint64_t, id))(*(_QWORD *)v14 + 16))(v14, objc_msgSend(v8, "unsignedIntValue"));
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  sub_100A3F208(a1, 0);
LABEL_20:

}

void sub_100A3EC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100A3EC88(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  void *Dictionary;
  id v6;
  id v7;
  id v8;
  void *v9;
  BOOL v10;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  NSNumber *v30;
  _DWORD v31[2];
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  unsigned int v35;
  __int16 v36;
  int v37;
  uint8_t buf[8];
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  unsigned int v42;
  __int16 v43;
  int v44;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v6 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMSidebandSensorFusionEnable);
  v7 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMSidebandSensorFusionLatency);
  v8 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMSidebandSensorFusionSnoop);
  v9 = v8;
  if (v6)
    v10 = v7 == 0;
  else
    v10 = 1;
  if (!v10 && v8 != 0)
  {
    if ((objc_msgSend(v6, "BOOLValue") & 1) != 0
      || (objc_msgSend(v7, "BOOLValue") & 1) != 0
      || objc_msgSend(v9, "BOOLValue"))
    {
      v15 = *(_QWORD *)(a1 + 56);
      if (!v15)
      {
        v16 = sub_1001FBB04(0);
        if (v16)
        {
          (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v16 + 136))(buf);
          v17 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          v18 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v17;
          if (v18)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            v19 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
        }
        v15 = *(_QWORD *)(a1 + 56);
        if (!v15)
        {
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_102165F70);
          v22 = qword_10229FD28;
          if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
          {
            v23 = objc_msgSend(v6, "BOOLValue");
            v24 = objc_msgSend(v9, "BOOLValue");
            v25 = objc_msgSend(v7, "BOOLValue");
            *(_DWORD *)buf = 67240960;
            *(_DWORD *)&buf[4] = v23;
            v39 = 1026;
            v40 = v24;
            v41 = 1026;
            v42 = v25;
            v43 = 1026;
            v44 = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[SidebandSensorFusion] Request failed,enabled,%{public}d,snoop,%{public}d,latency,%{public}d,success,%{public}d", buf, 0x1Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD20 != -1)
              dispatch_once(&qword_10229FD20, &stru_102165F70);
            v26 = qword_10229FD28;
            v31[0] = 67240960;
            v31[1] = objc_msgSend(v6, "BOOLValue");
            v32 = 1026;
            v33 = objc_msgSend(v9, "BOOLValue");
            v34 = 1026;
            v35 = objc_msgSend(v7, "BOOLValue");
            v36 = 1026;
            v37 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "[SidebandSensorFusion] Request failed,enabled,%{public}d,snoop,%{public}d,latency,%{public}d,success,%{public}d", v31, 26);
            v28 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 2, "void CLSidebandSubscription::handleMessageSidebandSensorFusionEnable(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
          v20 = 0;
          goto LABEL_29;
        }
      }
      (*(void (**)(uint64_t, id))(*(_QWORD *)v15 + 16))(v15, objc_msgSend(v6, "BOOLValue"));
      (*(void (**)(_QWORD, id))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), objc_msgSend(v9, "BOOLValue"));
      (*(void (**)(_QWORD, id))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), objc_msgSend(v7, "BOOLValue"));
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    v20 = 1;
LABEL_29:
    v29 = CMSidebandSensorFusionSuccess;
    v30 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v20);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
    CLConnectionMessage::sendReply(*a2);
    goto LABEL_30;
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102165F70);
  v12 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "[SidebandSensorFusion] Wrong parameters were passed!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102165F70);
    LOWORD(v31[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "[SidebandSensorFusion] Wrong parameters were passed!", v31, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "void CLSidebandSubscription::handleMessageSidebandSensorFusionEnable(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
LABEL_30:

}

void sub_100A3F1B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100A3F208(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100A3F274;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_100A3F274(uint64_t a1)
{
  uint64_t v1;
  NSDictionary *v3;
  uint64_t v4;
  NSNumber *v5;

  v4 = CMOverrideResult;
  v1 = *(_QWORD *)(a1 + 32);
  v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40));
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_100A3F328(v1, &v3);
  return sub_1001A638C(v1);
}

void sub_100A3F328(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102166020, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100A3F3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A3F3D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v4 = *(_QWORD *)(v3 + 48);
  }
  if (v4)
  {
    (*(void (**)(uint64_t, id))(*(_QWORD *)v4 + 16))(v4, objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue"));
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  sub_100A3F208(v3, v6);
}

uint64_t sub_100A3F44C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100A3F4B0(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100A3F4DC(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

__n128 sub_100A3F508(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102165FA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100A3F544(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102165FA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100A3F568(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100A3F5B8(a1 + 8, a2, a3);
}

uint64_t sub_100A3F570(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100A3F5AC()
{
}

void sub_100A3F5B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100A3F68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100A3F6A8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100A3F720(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100A3F70C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100A3F720(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100A3F9A0(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100A3F988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100A3F9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100A3FA14(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100A3F9FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100A3FA14(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100A3FA6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A3FA88(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  sub_100349198((_QWORD *)a1, a2);
  v6 = a3[1];
  v5 = a3[2];
  v7 = *a3;
  *(_OWORD *)(a1 + 172) = *(__int128 *)((char *)a3 + 44);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 128) = v7;
  return 1;
}

uint64_t sub_100A3FAC8(_QWORD *a1)
{
  a1[8] = a1[7];
  a1[11] = a1[10];
  a1[14] = a1[13];
  return 1;
}

uint64_t sub_100A3FAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t i;
  const char **v7;
  float *j;
  uint64_t v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  const char **v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  double v83;
  const char *v84[168];
  int v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  int v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  char *v94;
  _BYTE buf[48];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char out[48];
  _DWORD __src[336];
  uuid_t dst;
  __int128 v108;
  uint64_t v109;

  if (**(_QWORD **)(a2 + 48) != *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8))
  {
    *(_QWORD *)&v108 = 0;
    v109 = 26;
    *((_QWORD *)&v108 + 1) = *(_QWORD *)(a2 + 24);
    uuid_copy(dst, (const unsigned __int8 *)a2);
    v4 = 0;
    *(_QWORD *)&v108 = *(_QWORD *)(a2 + 16);
    v109 = *(_QWORD *)(a2 + 32);
    do
    {
      v5 = &__src[v4];
      *v5 = 0;
      *((_QWORD *)v5 + 7) = 0;
      v5[16] = 0;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      v5[6] = 0;
      *((_QWORD *)v5 + 4) = 0;
      *((_QWORD *)v5 + 5) = 0;
      v5[12] = 0;
      *((_QWORD *)v5 + 10) = 0;
      *((_QWORD *)v5 + 11) = 0;
      v4 += 24;
      *((_QWORD *)v5 + 9) = 0;
    }
    while (v4 != 336);
    for (i = 0; i != 168; i += 12)
    {
      v7 = &v84[i];
      *(_DWORD *)v7 = 0;
      v7[7] = 0;
      *((_DWORD *)v7 + 16) = 0;
      v7[1] = 0;
      v7[2] = 0;
      *((_DWORD *)v7 + 6) = 0;
      v7[4] = 0;
      v7[5] = 0;
      *((_DWORD *)v7 + 12) = 0;
      v7[10] = 0;
      v7[11] = 0;
      v7[9] = 0;
    }
    for (j = *(float **)(a1 + 32); j; j = *(float **)j)
    {
      v9 = *((int *)j + 4);
      sub_100A40394(a1, a2, (uint64_t)buf, (float)(j[5] * 60.0));
      v10 = v96;
      v11 = &__src[24 * v9];
      v11[2] = *(_OWORD *)&buf[32];
      v11[3] = v10;
      v12 = v98;
      v11[4] = v97;
      v11[5] = v12;
      v13 = *(_OWORD *)&buf[16];
      *v11 = *(_OWORD *)buf;
      v11[1] = v13;
      v14 = &v84[12 * v9];
      v15 = v102;
      *((_OWORD *)v14 + 2) = v101;
      *((_OWORD *)v14 + 3) = v15;
      v16 = v104;
      *((_OWORD *)v14 + 4) = v103;
      *((_OWORD *)v14 + 5) = v16;
      v17 = v100;
      *(_OWORD *)v14 = v99;
      *((_OWORD *)v14 + 1) = v17;
    }
    v18 = *(_QWORD *)(a1 + 120);
    v19 = *(_QWORD *)(a1 + 112);
    if (v19 >= v18)
    {
      v32 = *(_QWORD *)(a1 + 104);
      v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v32) >> 3);
      v34 = v33 + 1;
      if (v33 + 1 > 0x666666666666666)
        sub_100259694();
      v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v32) >> 3);
      if (2 * v35 > v34)
        v34 = 2 * v35;
      if (v35 >= 0x333333333333333)
        v36 = 0x666666666666666;
      else
        v36 = v34;
      if (v36)
        v37 = (char *)sub_100357184(a1 + 120, v36);
      else
        v37 = 0;
      v38 = &v37[40 * v33];
      v39 = &v37[40 * v36];
      v40 = *(_OWORD *)dst;
      v41 = v108;
      *((_QWORD *)v38 + 4) = v109;
      *(_OWORD *)v38 = v40;
      *((_OWORD *)v38 + 1) = v41;
      v22 = v38 + 40;
      v43 = *(char **)(a1 + 104);
      v42 = *(char **)(a1 + 112);
      if (v42 != v43)
      {
        do
        {
          v44 = *(_OWORD *)(v42 - 40);
          v45 = *(_OWORD *)(v42 - 24);
          *((_QWORD *)v38 - 1) = *((_QWORD *)v42 - 1);
          *(_OWORD *)(v38 - 24) = v45;
          *(_OWORD *)(v38 - 40) = v44;
          v38 -= 40;
          v42 -= 40;
        }
        while (v42 != v43);
        v42 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v38;
      *(_QWORD *)(a1 + 112) = v22;
      *(_QWORD *)(a1 + 120) = v39;
      if (v42)
        operator delete(v42);
    }
    else
    {
      v20 = *(_OWORD *)dst;
      v21 = v108;
      *(_QWORD *)(v19 + 32) = v109;
      *(_OWORD *)v19 = v20;
      *(_OWORD *)(v19 + 16) = v21;
      v22 = (char *)(v19 + 40);
    }
    v46 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = v22;
    v47 = *(_QWORD *)(a1 + 64);
    if (v47 >= v46)
    {
      v49 = *(_QWORD *)(a1 + 56);
      v50 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v47 - v49) >> 6);
      if (v50 + 1 > 0x30C30C30C30C30)
        sub_100259694();
      v51 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v46 - v49) >> 6);
      v52 = 2 * v51;
      if (2 * v51 <= v50 + 1)
        v52 = v50 + 1;
      if (v51 >= 0x18618618618618)
        v53 = 0x30C30C30C30C30;
      else
        v53 = v52;
      if (v53)
        v54 = (char *)sub_100A40968(a1 + 72, v53);
      else
        v54 = 0;
      v55 = &v54[1344 * v50];
      v56 = &v54[1344 * v53];
      memcpy(v55, __src, 0x540uLL);
      v48 = v55 + 1344;
      v58 = *(char **)(a1 + 56);
      v57 = *(char **)(a1 + 64);
      if (v57 != v58)
      {
        do
        {
          v57 -= 1344;
          v55 -= 1344;
          memcpy(v55, v57, 0x540uLL);
        }
        while (v57 != v58);
        v57 = *(char **)(a1 + 56);
      }
      *(_QWORD *)(a1 + 56) = v55;
      *(_QWORD *)(a1 + 64) = v48;
      *(_QWORD *)(a1 + 72) = v56;
      if (v57)
        operator delete(v57);
    }
    else
    {
      memcpy(*(void **)(a1 + 64), __src, 0x540uLL);
      v48 = (char *)(v47 + 1344);
    }
    v59 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 64) = v48;
    v60 = *(_QWORD *)(a1 + 88);
    if (v60 >= v59)
    {
      v62 = *(_QWORD *)(a1 + 80);
      v63 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v60 - v62) >> 6);
      if (v63 + 1 > 0x30C30C30C30C30)
        sub_100259694();
      v64 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v59 - v62) >> 6);
      v65 = 2 * v64;
      if (2 * v64 <= v63 + 1)
        v65 = v63 + 1;
      if (v64 >= 0x18618618618618)
        v66 = 0x30C30C30C30C30;
      else
        v66 = v65;
      if (v66)
        v67 = (char *)sub_100A40968(a1 + 96, v66);
      else
        v67 = 0;
      v68 = &v67[1344 * v63];
      v69 = &v67[1344 * v66];
      memcpy(v68, v84, 0x540uLL);
      v61 = v68 + 1344;
      v71 = *(char **)(a1 + 80);
      v70 = *(char **)(a1 + 88);
      if (v70 != v71)
      {
        do
        {
          v70 -= 1344;
          v68 -= 1344;
          memcpy(v68, v70, 0x540uLL);
        }
        while (v70 != v71);
        v70 = *(char **)(a1 + 80);
      }
      *(_QWORD *)(a1 + 80) = v68;
      *(_QWORD *)(a1 + 88) = v61;
      *(_QWORD *)(a1 + 96) = v69;
      if (v70)
        operator delete(v70);
    }
    else
    {
      memcpy(*(void **)(a1 + 88), v84, 0x540uLL);
      v61 = (char *)(v60 + 1344);
    }
    *(_QWORD *)(a1 + 88) = v61;
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)a2, out);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102166028);
    v72 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
    {
      v73 = *(_QWORD *)(a2 + 16);
      v74 = *(_QWORD *)(a2 + 24);
      v75 = *(_QWORD *)(a2 + 32);
      v76 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) - **(_QWORD **)(a2 + 48)) >> 6;
      *(_DWORD *)buf = 134219010;
      *(_QWORD *)&buf[4] = v73;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v74;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v75;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v76;
      *(_WORD *)&buf[38] = 2080;
      *(_QWORD *)&buf[40] = out;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "CLCyclingFTPBoutStatsGenerator using session from, %f, to %f, workout_type, %d, size, %lu, session_id, %s", buf, 0x30u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102166028);
    v78 = *(_QWORD *)(a2 + 16);
    v79 = *(_QWORD *)(a2 + 24);
    v80 = *(_QWORD *)(a2 + 32);
    v81 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) - **(_QWORD **)(a2 + 48)) >> 6;
    v85 = 134219010;
    v86 = v78;
    v87 = 2048;
    v88 = v79;
    v89 = 1024;
    v90 = v80;
    v91 = 2048;
    v92 = v81;
    v93 = 2080;
    v94 = out;
    LODWORD(v83) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "CLCyclingFTPBoutStatsGenerator using session from, %f, to %f, workout_type, %d, size, %lu, session_id, %s", COERCE_DOUBLE(&v85), v83, LODWORD(v84[0]), v84[1], v84[2]);
    v31 = (char *)v82;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPBoutStatsGenerator::processSession(const CLCyclingFTPHistory::Session &)", "%s\n", v82);
LABEL_73:
    if (v31 != buf)
      free(v31);
    return 1;
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_102166028);
  v23 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
  {
    v24 = *(_QWORD *)(a2 + 16);
    v25 = *(_QWORD *)(a2 + 24);
    v26 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v25;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v26;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLCyclingFTPBoutStatsGenerator Ignoring empty session from, %f, to %f, workout_type, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102166028);
    v27 = *(_QWORD *)(a2 + 16);
    v28 = *(_QWORD *)(a2 + 24);
    v29 = *(_QWORD *)(a2 + 32);
    __src[0] = 134218496;
    *(_QWORD *)&__src[1] = v27;
    LOWORD(__src[3]) = 2048;
    *(_QWORD *)((char *)&__src[3] + 2) = v28;
    HIWORD(__src[5]) = 1024;
    __src[6] = v29;
    LODWORD(v83) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "CLCyclingFTPBoutStatsGenerator Ignoring empty session from, %f, to %f, workout_type, %d", COERCE_DOUBLE(__src), v83, LODWORD(v84[0]));
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPBoutStatsGenerator::processSession(const CLCyclingFTPHistory::Session &)", "%s\n", v30);
    goto LABEL_73;
  }
  return 1;
}

void sub_100A40394(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v5;
  double v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  double v19;
  double v20;
  unint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  double v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  int v38;
  int v39;
  double v40;
  double v41;
  int v42;
  double v43;
  double v44;
  int v45;
  double v46;
  int v47;
  double v48;
  double v49;
  uint64_t v50;

  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_DWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  v5 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24) - v5;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  if (v6 >= a4)
  {
    v39 = 0;
    v46 = 0.0;
    v47 = 0;
    v41 = 0.0;
    v42 = 0;
    v43 = 0.0;
    v44 = 0.0;
    v45 = 0;
    v49 = 0.0;
    v50 = 0;
    v48 = 0.0;
    v40 = a4;
    v8 = *(uint64_t **)(a2 + 48);
    v10 = *v8;
    v9 = v8[1];
    v11 = v9 - *v8;
    if (v9 != *v8)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0.0;
      v20 = 0.0;
      v21 = v11 >> 6;
      v22 = 0.0;
      v23 = 0.0;
      do
      {
        v24 = v10 + (v14 << 6);
        v25 = v10 + ((uint64_t)v16 << 6);
        v26 = *(double *)(v25 + 8);
        if (*(double *)(v24 + 8) - v26 <= a4)
        {
          v33 = *(float *)(v24 + 16);
          v34 = *(float *)(v24 + 20);
          v35 = *(float *)(v24 + 28);
          v36 = *(float *)(v24 + 32);
          v39 = ++v17;
          if (v36 >= 0.0 && v36 <= 1500.0)
          {
            v20 = v20 + v36;
            v41 = v20;
            v42 = ++v13;
          }
          v37 = v34;
          if (v37 > 0.39)
          {
            v22 = v22 + v33;
            v19 = v19 + v37;
            v43 = v22;
            v44 = v19;
            v45 = ++v12;
          }
          if (v35 > 0.0)
          {
            v23 = v23 + v35;
            v46 = v23;
            v47 = ++v18;
          }
        }
        else
        {
          v27 = v15 - 1;
          v48 = v26 - v5;
          v49 = v26;
          v50 = *(_QWORD *)(v10 + (v27 << 6) + 8);
          sub_100A4063C(a1, (uint64_t)&v39, a3);
          v28 = *(float *)(v25 + 16);
          v29 = *(float *)(v25 + 20);
          v30 = *(float *)(v25 + 28);
          v31 = *(float *)(v25 + 32);
          v39 = --v17;
          if (v31 >= 0.0 && v31 <= 1500.0)
          {
            v20 = v20 - v31;
            v41 = v20;
            v42 = --v13;
          }
          v32 = v29;
          if (v32 > 0.39)
          {
            v22 = v22 - v28;
            v19 = v19 - v32;
            v43 = v22;
            v44 = v19;
            v45 = --v12;
          }
          if (v30 > 0.0)
          {
            v23 = v23 - v30;
            v46 = v23;
            v47 = --v18;
          }
          ++v16;
          v15 = v27;
        }
        v38 = v15 + 1;
        if (v21 <= v15 + 1)
          break;
        v14 = v38;
        ++v15;
      }
      while (v38 >= v16);
    }
    sub_100A4063C(a1, (uint64_t)&v39, a3);
  }
}

_QWORD *sub_100A40630@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100A4072C(a2, a1 + 16);
}

__n128 sub_100A4063C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  int v4;
  double v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  result.n128_u64[0] = 0x40047AE147AE147BLL;
  v4 = (int)(*(double *)(a2 + 8) / 2.56);
  if (*(_DWORD *)a2 > v4)
    v4 = *(_DWORD *)a2;
  v5 = (double)v4;
  if ((double)v4 * 0.75 <= (double)*(int *)(a2 + 24))
  {
    if (*(double *)(a2 + 16) > *(double *)(a3 + 16))
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 16) = v6;
      v7 = *(_OWORD *)(a2 + 32);
      v8 = *(_OWORD *)(a2 + 48);
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 80) = v9;
      *(_OWORD *)(a3 + 32) = v7;
      *(_OWORD *)(a3 + 48) = v8;
      v10 = *(_DWORD *)a2;
      if (*(_DWORD *)a2 <= (int)(*(double *)(a2 + 8) / 2.56))
        v10 = (int)(*(double *)(a2 + 8) / 2.56);
      v5 = (double)v10;
    }
    result.n128_f64[0] = (double)*(int *)(a2 + 48);
    if (v5 * 0.5 <= result.n128_f64[0])
    {
      result.n128_u64[0] = *(_QWORD *)(a2 + 16);
      if (result.n128_f64[0] > *(double *)(a3 + 112))
      {
        v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a3 + 96) = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 112) = v11;
        result = *(__n128 *)(a2 + 32);
        v12 = *(_OWORD *)(a2 + 48);
        v13 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a3 + 160) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a3 + 176) = v13;
        *(__n128 *)(a3 + 128) = result;
        *(_OWORD *)(a3 + 144) = v12;
      }
    }
  }
  return result;
}

void sub_100A40700(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

_QWORD *sub_100A4072C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_100A40828((uint64_t)a1, a2);
  v4[5] = 0;
  v4[6] = 0;
  v4[7] = 0;
  sub_100A4089C(v4 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 6));
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  sub_100A4089C(a1 + 8, *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 6));
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  sub_1008BC19C(a1 + 11, *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  return a1;
}

void sub_100A407E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A40828(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_1004B7728(a1, i + 4, (_QWORD *)i + 2);
  return a1;
}

void sub_100A40884(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100A4089C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100A40914(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100A408F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100A40914(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x30C30C30C30C31)
    sub_100259694();
  result = (char *)sub_100A40968((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[1344 * v4];
  return result;
}

void *sub_100A40968(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x30C30C30C30C31)
    sub_10025955C();
  return operator new(1344 * a2);
}

char *sub_100A409B0(char *result, size_t a2, unint64_t a3, uint64_t (*a4)(char *, char *))
{
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char **v17;

  if (a3)
  {
    v7 = result;
    v8 = 0;
    v9 = &result[a2];
    v10 = 1;
    do
    {
      v17 = &v15;
      result = (char *)__chkstk_darwin();
      v15 = (char *)&v15 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = v8;
      v12 = v9;
      v13 = v10;
      v16 = v8 + 1;
      if (v8 + 1 < a3)
      {
        do
        {
          result = (char *)a4(&v7[v11 * a2], v12);
          if ((_DWORD)result)
            v11 = v13;
          ++v13;
          v12 += a2;
        }
        while (a3 != v13);
      }
      if (v8 != v11)
      {
        v14 = v15;
        memcpy(v15, &v7[v11 * a2], a2);
        memcpy(&v7[v11 * a2], &v7[v8 * a2], a2);
        result = (char *)memcpy(&v7[v8 * a2], v14, a2);
      }
      ++v10;
      v9 += a2;
      v8 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t sub_100A40B18()
{
  uint64_t result;

  if (sub_1002479B0())
    operator new();
  result = sub_10078EBC8();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_100A40B8C()
{
  operator delete();
}

void sub_100A40BC8(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLCompass", 2);
}

void sub_100A415C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[15];
  v1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v1[5];
  v1[5] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1009BAD18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A41678(unsigned __int8 *a1, uint64_t a2)
{
  return sub_100A41EF4(a2, *a1);
}

uint64_t sub_100A41688(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_100A42168(a4, a2, a3);
}

uint64_t sub_100A41690(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1001FBB04(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 160))(v2, *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
}

void sub_100A416C4(char *a1)
{
  NSObject *v2;
  char v3;
  NSObject *global_queue;
  char v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  char v9;
  uint8_t buf[4];
  char v11;

  if (*a1 - 2 <= 2)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102166168);
    v2 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      v3 = *a1;
      *(_DWORD *)buf = 16777472;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Resetting compass on hall effect event %hhu", buf, 5u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102166168);
      v5 = *a1;
      v8 = 16777472;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Resetting compass on hall effect event %hhu", &v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "static void CLCompass::onKeyboardHallEffect(const CLKeyboardMotionNotifier::HallEffectData *, void *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &stru_102166110);
  }
}

void sub_100A41894(_BYTE *a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  __CFRunLoopTimer *v7;
  CFAbsoluteTime Current;
  NSObject *global_queue;
  const char *v10;
  const char *v11;
  uint8_t *v12;
  _QWORD block[5];
  int v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102166168);
  v4 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    if (*a1)
      v5 = "open";
    else
      v5 = "closed";
    *(_DWORD *)buf = 136315138;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Cover %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102166168);
    if (*a1)
      v10 = "open";
    else
      v10 = "closed";
    v14 = 136315138;
    v15 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Cover %s", (const char *)&v14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "static void CLCompass::onCoverState(const BOOL *, void *)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (*a1)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      v6 = sub_1001FBB04(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 80) + 16))(v6 + 80);
    }
    if (*(_QWORD *)(a2 + 56))
    {
      if (*(_BYTE *)(a2 + 48))
      {
        *(_BYTE *)(a2 + 28) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
        objc_msgSend(*(id *)(*(_QWORD *)(a2 + 40) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), 0);
        *(_BYTE *)(a2 + 64) = 1;
        v7 = *(__CFRunLoopTimer **)(a2 + 56);
        Current = CFAbsoluteTimeGetCurrent();
        CFRunLoopTimerSetNextFireDate(v7, Current + 3.0);
      }
    }
    *(CFAbsoluteTime *)(a2 + 72) = CFAbsoluteTimeGetCurrent();
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100A41EC4;
    block[3] = &unk_10212ECA0;
    block[4] = a2;
    dispatch_async(global_queue, block);
  }
}

_QWORD *sub_100A41B3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_102166080;
  if (*(_QWORD *)(a1 + 88))
  {
    CFRunLoopTimerInvalidate(*(CFRunLoopTimerRef *)(a1 + 56));
    CFRelease(*(CFTypeRef *)(a1 + 56));
    *(_QWORD *)(a1 + 56) = 0;
    v2 = sub_100244568();
    sub_1000A4A6C(v2, 0, *(_QWORD *)(a1 + 88));
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
  if (*(_QWORD *)(a1 + 96))
  {
    v4 = sub_1000A6998();
    sub_1000A4A6C(v4, 0, *(_QWORD *)(a1 + 96));
    v5 = *(_QWORD *)(a1 + 96);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 96) = 0;
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v6 = sub_1009545A0();
    sub_1000A4A6C(v6, 4, *(_QWORD *)(a1 + 112));
    v7 = *(_QWORD *)(a1 + 112);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v8 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return sub_1009BAD18((_QWORD *)a1);
}

void sub_100A41C44(uint64_t a1)
{
  sub_100A41B3C(a1);
  operator delete();
}

uint64_t sub_100A41C68(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 48))
    result = sub_10021BBF8(a2);
  *(_BYTE *)(a2 + 64) = 0;
  return result;
}

uint64_t sub_100A41C98(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const __CFDictionary *v4;
  io_service_t MatchingService;
  io_object_t v6;
  _BOOL4 v7;
  unsigned int v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v2 = *(unsigned __int8 *)(a1 + 104);
  sub_1000A6998();
  v3 = sub_100CF3A00();
  if (*(_BYTE *)(a1 + 104))
  {
    if (v3 != 1104)
    {
      v4 = IOServiceMatching("AppleOrionManager");
      MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
      if (MatchingService)
      {
        v6 = MatchingService;
        v7 = sub_1011FEAE0(buf, MatchingService, CFSTR("IOAccessoryDigitalID"), (__objc2_class *)6);
        if ((v15 & 1) != 0)
          v8 = 2;
        else
          v8 = v2;
        if (v7)
          v2 = v8;
        else
          v2 = v2;
        IOObjectRelease(v6);
      }
    }
  }
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102166168);
  v9 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v15 = v2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Keyboard coexSource,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102166168);
    v13[0] = 67109120;
    v13[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Keyboard coexSource,%d", v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "CLCompass_Type::CompassCoexSource CLCompass::checkForCompassCoexSource()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return v2;
}

uint64_t sub_100A41EC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100244568();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, *(_QWORD *)(a1 + 32) + 72);
}

uint64_t sub_100A41EF4(uint64_t result, int a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  NSObject *global_queue;
  const char *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  if (*(unsigned __int8 *)(result + 104) != a2)
  {
    v3 = result;
    *(_BYTE *)(result + 104) = a2;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102166168);
    v4 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v5 = "disconnected";
      if (a2)
        v5 = "connected";
      *(_DWORD *)buf = 136315138;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Keyboard %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102166168);
      v7 = "disconnected";
      if (a2)
        v7 = "connected";
      v10 = 136315138;
      v11 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Keyboard %s", (const char *)&v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLCompass::updateKeyboardState(BOOL)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &stru_102166130);
    result = sub_100A41C98(v3);
    *(_BYTE *)(v3 + 129) = (_DWORD)result == 2;
  }
  return result;
}

void sub_100A4210C(id a1)
{
  uint64_t v1;

  v1 = sub_1001FBB04(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 80) + 16))(v1 + 80);
}

uint64_t sub_100A4212C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(a3, a1, a2);
}

void sub_100A42148(id a1)
{
  uint64_t v1;

  v1 = sub_1001FBB04(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 80) + 16))(v1 + 80);
}

uint64_t sub_100A42168(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*a2 == 7)
  {
    v3 = result;
    v4 = *(unsigned __int8 *)(a3 + 9);
    if (v4 != *(unsigned __int8 *)(result + 128))
    {
      if ((sub_100760428() & 1) == 0)
        sub_101917438(qword_10229FD40 == -1);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102166168);
      v5 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        v11 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Resetting compass on charging event,charging,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102166168);
        v9[0] = 67109120;
        v9[1] = v4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Resetting compass on charging event,charging,%d", v9);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLCompass::onDaemonStatus(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      v6 = sub_1001FBB04(0);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 80) + 16))(v6 + 80);
      *(_BYTE *)(v3 + 128) = v4;
    }
  }
  return result;
}

void sub_100A42354(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100A42380(uint64_t a1, _QWORD *a2, char a3)
{
  float v4;
  uint64_t v5;
  float v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = *a2;
  v4 = 1.0 / *(double *)a2;
  *(float *)(a1 + 8) = v4;
  v5 = a1 + 8;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 13) = a3;
  *(_QWORD *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 30) = 0;
  *(_QWORD *)(a1 + 22) = 0;
  *(_WORD *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 48) = off_1021388A0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1021388A0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_100A991FC(a1 + 112, 10, 30, 61.056, 2.0);
  *(_QWORD *)(v5 + 368) = 0xF00000000;
  *(_DWORD *)(v5 + 376) = 15;
  v6 = *(float *)v5;
  v7 = *(float *)v5;
  v8 = vcvtad_u64_f64(v7 * 0.125);
  *(_QWORD *)(v5 + 384) = off_102138340;
  *(_QWORD *)(v5 + 392) = v8;
  *(_QWORD *)(v5 + 400) = off_102138370;
  *(_QWORD *)(v5 + 408) = v8;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_QWORD *)(v5 + 464) = 0;
  *(_QWORD *)(v5 + 472) = off_102138370;
  *(_QWORD *)(v5 + 480) = v8;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_QWORD *)(v5 + 536) = 0;
  *(_QWORD *)(v5 + 544) = off_102138370;
  *(_QWORD *)(v5 + 552) = v8;
  *(_QWORD *)(v5 + 620) = 0xBF8000003F000000;
  *(_OWORD *)(v5 + 604) = 0u;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 592) = 0u;
  *(_OWORD *)(v5 + 560) = 0u;
  *(_DWORD *)(v5 + 628) = -1082130432;
  *(_QWORD *)(v5 + 632) = off_10214EBA0;
  *(_DWORD *)(v5 + 640) = 0;
  *(_OWORD *)(v5 + 648) = 0u;
  *(_OWORD *)(v5 + 664) = 0u;
  *(_OWORD *)(v5 + 680) = 0u;
  *(_QWORD *)(v5 + 704) = 0;
  *(_QWORD *)(v5 + 712) = 0;
  *(_QWORD *)(v5 + 696) = v5 + 704;
  *(_QWORD *)(v5 + 720) = off_10214EBA0;
  *(_DWORD *)(v5 + 728) = 0;
  *(_OWORD *)(v5 + 752) = 0u;
  *(_OWORD *)(v5 + 768) = 0u;
  *(_OWORD *)(v5 + 736) = 0u;
  *(_QWORD *)(v5 + 800) = 0;
  *(_QWORD *)(v5 + 792) = 0;
  *(_QWORD *)(v5 + 784) = v5 + 792;
  v9 = vcvtad_u64_f64(v7 * 0.05);
  *(_QWORD *)(v5 + 808) = off_102138340;
  *(_QWORD *)(v5 + 816) = v9;
  *(_QWORD *)(v5 + 824) = off_102138370;
  *(_QWORD *)(v5 + 832) = v9;
  *(_OWORD *)(v5 + 840) = 0u;
  *(_OWORD *)(v5 + 856) = 0u;
  *(_OWORD *)(v5 + 872) = 0u;
  *(_QWORD *)(v5 + 888) = 0;
  *(_QWORD *)(v5 + 896) = off_102138370;
  *(_QWORD *)(v5 + 904) = v9;
  *(_OWORD *)(v5 + 912) = 0u;
  *(_OWORD *)(v5 + 928) = 0u;
  *(_OWORD *)(v5 + 944) = 0u;
  *(_QWORD *)(v5 + 960) = 0;
  *(_QWORD *)(v5 + 968) = off_102138370;
  *(_QWORD *)(v5 + 976) = v9;
  *(_QWORD *)(v5 + 1032) = 0;
  *(_OWORD *)(v5 + 1016) = 0u;
  *(_OWORD *)(v5 + 1000) = 0u;
  *(_OWORD *)(v5 + 984) = 0u;
  *(_QWORD *)(v5 + 1040) = off_102138340;
  *(_QWORD *)(v5 + 1048) = v9;
  *(_QWORD *)(v5 + 1056) = off_102138370;
  *(_QWORD *)(v5 + 1064) = v9;
  *(_QWORD *)(v5 + 1120) = 0;
  *(_OWORD *)(v5 + 1088) = 0u;
  *(_OWORD *)(v5 + 1072) = 0u;
  *(_OWORD *)(v5 + 1104) = 0u;
  *(_QWORD *)(v5 + 1128) = off_102138370;
  *(_QWORD *)(v5 + 1136) = v9;
  *(_QWORD *)(v5 + 1192) = 0;
  *(_OWORD *)(v5 + 1176) = 0u;
  *(_OWORD *)(v5 + 1160) = 0u;
  *(_OWORD *)(v5 + 1144) = 0u;
  *(_QWORD *)(v5 + 1200) = off_102138370;
  *(_QWORD *)(v5 + 1208) = v9;
  *(_QWORD *)(v5 + 1264) = 0;
  *(_OWORD *)(v5 + 1248) = 0u;
  *(_OWORD *)(v5 + 1232) = 0u;
  *(_OWORD *)(v5 + 1216) = 0u;
  *(_QWORD *)(v5 + 1272) = off_1021388A0;
  *(_QWORD *)(v5 + 1280) = 0;
  *(_DWORD *)(v5 + 1288) = 0;
  *(_QWORD *)(v5 + 1296) = off_1021388A0;
  *(_QWORD *)(v5 + 1304) = 0;
  *(_DWORD *)(v5 + 1312) = 0;
  *(_QWORD *)(v5 + 1320) = off_1021388A0;
  *(_QWORD *)(v5 + 1328) = 0;
  *(_DWORD *)(v5 + 1336) = 0;
  *(_QWORD *)(v5 + 1408) = 0;
  *(_OWORD *)(v5 + 1392) = 0u;
  *(_OWORD *)(v5 + 1376) = 0u;
  *(_OWORD *)(v5 + 1344) = 0u;
  *(_OWORD *)(v5 + 1360) = 0u;
  *(_QWORD *)(v5 + 1416) = 0xBFF0000000000000;
  v10 = vcvtad_u64_f64(v7 * 0.5);
  *(_QWORD *)(v5 + 1424) = off_102138370;
  *(_QWORD *)(v5 + 1432) = v10;
  *(_QWORD *)(v5 + 1488) = 0;
  *(_OWORD *)(v5 + 1472) = 0u;
  *(_OWORD *)(v5 + 1456) = 0u;
  *(_OWORD *)(v5 + 1440) = 0u;
  *(_QWORD *)(v5 + 1496) = off_102138370;
  *(_QWORD *)(v5 + 1504) = v10;
  *(_QWORD *)(v5 + 1560) = 0;
  *(_OWORD *)(v5 + 1544) = 0u;
  *(_OWORD *)(v5 + 1528) = 0u;
  *(_OWORD *)(v5 + 1512) = 0u;
  *(_QWORD *)(v5 + 1568) = off_102138370;
  *(_QWORD *)(v5 + 1576) = vcvtas_u32_f32(v6);
  *(_QWORD *)(v5 + 1632) = 0;
  *(_OWORD *)(v5 + 1616) = 0u;
  *(_OWORD *)(v5 + 1600) = 0u;
  *(_OWORD *)(v5 + 1584) = 0u;
  sub_100A99A48(v5 + 1640);
  sub_100A99A48(a1 + 1976);
  *(_BYTE *)(a1 + 2304) = 0;
  v11 = vcvtad_u64_f64(*(float *)(a1 + 8) * 0.2);
  *(_QWORD *)(a1 + 2312) = off_102138370;
  *(_QWORD *)(a1 + 2320) = v11;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_QWORD *)(a1 + 2384) = 0x3F800000BF800000;
  if (*(_BYTE *)(a1 + 13))
    operator new();
  operator new();
}

void sub_100A43890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v17[289] = off_102138370;
  sub_100412390(v17 + 292);
  sub_100A99B10(a16);
  sub_100A99B10(a17);
  v17[197] = off_102138370;
  sub_100412390(v17 + 200);
  v17[188] = off_102138370;
  sub_100412390(v17 + 191);
  v17[179] = off_102138370;
  sub_100412390(v17 + 182);
  sub_100412424((_QWORD *)(v18 + 1040));
  sub_100412424((_QWORD *)(v18 + 808));
  sub_100A452E0(a14);
  sub_100412424(v20);
  sub_100A9925C(v19);
  _Unwind_Resume(a1);
}

_QWORD *sub_100A43A2C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[13];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    a1[13] = 0;
  }
  a1[289] = off_102138370;
  sub_100412390(a1 + 292);
  sub_100A99B10(a1 + 247);
  sub_100A99B10(a1 + 206);
  a1[197] = off_102138370;
  sub_100412390(a1 + 200);
  a1[188] = off_102138370;
  sub_100412390(a1 + 191);
  a1[179] = off_102138370;
  sub_100412390(a1 + 182);
  sub_100412424(a1 + 131);
  sub_100412424(a1 + 102);
  sub_100A452E0((uint64_t)(a1 + 78));
  sub_100412424(a1 + 49);
  sub_100A9925C(a1 + 14);
  return a1;
}

BOOL sub_100A43ADC(float32x2_t *a1, uint64_t *a2)
{
  __int32 v3;
  unint64_t v4;
  float v5;
  float v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  unint64_t v15;
  uint64_t (**v16)();
  uint64_t v17;
  int v18;

  v16 = off_1021388A0;
  v17 = *a2;
  v18 = *((_DWORD *)a2 + 2);
  v3 = a1[48].i32[0];
  if (v3)
  {
    a1[48].i32[0] = v3 - 1;
    if (v3 == 1)
      a1[47].i32[0] = 0;
  }
  else
  {
    sub_10007D084((uint64_t)&a1[51], (float *)&v17);
    sub_10007D084((uint64_t)&a1[60], (float *)&v17 + 1);
    sub_10007D084((uint64_t)&a1[69], (float *)&v18);
    v4 = (unint64_t)a1[59];
    v5 = 0.0;
    v6 = 0.0;
    if (v4)
      v6 = a1[53].f32[0] / (float)v4;
    v7 = (unint64_t)a1[68];
    if (v7)
      v5 = a1[62].f32[0] / (float)v7;
    v8 = (unint64_t)a1[77];
    if (v8)
      v9 = a1[71].f32[0] / (float)v8;
    else
      v9 = 0.0;
    a1[161].f32[0] = v6;
    a1[161].f32[1] = v5;
    a1[162].f32[0] = v9;
    a1[164].f32[0] = v6;
    a1[164].f32[1] = v5;
    a1[165].f32[0] = v9;
    a1[167].f32[0] = v6;
    a1[167].f32[1] = v5;
    a1[168].f32[0] = v9;
    v10 = sub_100A43D00((uint64_t)a1);
    if (a1[1].i8[6])
    {
      v11 = a1[169];
      a1[161] = vsub_f32(a1[161], v11);
      v12 = a1[170].f32[0];
      a1[162].f32[0] = a1[162].f32[0] - v12;
      a1[164] = vsub_f32(a1[164], v11);
      a1[165].f32[0] = a1[165].f32[0] - v12;
    }
    else
    {
      v13 = a1[13];
      v15 = 0xBFF0000000000000;
      (*(void (**)(float32x2_t, uint64_t (***)(), float32x2_t *, unint64_t *, float))(**(_QWORD **)&v13 + 32))(v13, &v16, a1 + 2, &v15, v10);
      ++a1[47].i32[0];
      (*(void (**)(_QWORD, float32x2_t *, uint64_t))(**(_QWORD **)&a1[13] + 48))(*(_QWORD *)&a1[13], a1 + 169, (uint64_t)&a1[170] + 4);
      (*(void (**)(_QWORD, float32x2_t *, float32x2_t *, float32x2_t *))(**(_QWORD **)&a1[13] + 56))(*(_QWORD *)&a1[13], a1 + 160, a1 + 163, a1 + 2);
      (*(void (**)(_QWORD, float32x2_t *, float32x2_t *))(**(_QWORD **)&a1[13] + 64))(*(_QWORD *)&a1[13], a1 + 166, a1 + 2);
      sub_100A43DC0((uint64_t)a1);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)&a1[13] + 88))(*(_QWORD *)&a1[13]))
      {
        sub_100A9A21C((uint64_t)&a1[206], 0);
        sub_100A9A21C((uint64_t)&a1[247], 0);
      }
    }
  }
  return v3 == 0;
}

float sub_100A43D00(uint64_t a1)
{
  uint64_t v2;
  float *v3;
  unint64_t v4;
  float v5;
  float v7;
  float v8;
  float v9;

  if (*(_BYTE *)(a1 + 13))
  {
    v9 = sqrtf((float)((float)(*(float *)(a1 + 60) * *(float *)(a1 + 60))+ (float)(*(float *)(a1 + 56) * *(float *)(a1 + 56)))+ (float)(*(float *)(a1 + 64) * *(float *)(a1 + 64)));
    sub_10007D084(a1 + 1576, &v9);
    v2 = a1 + 2312;
    v3 = &v9;
  }
  else
  {
    v8 = sqrtf((float)((float)(*(float *)(a1 + 84) * *(float *)(a1 + 84))+ (float)(*(float *)(a1 + 80) * *(float *)(a1 + 80)))+ (float)(*(float *)(a1 + 88) * *(float *)(a1 + 88)));
    sub_10007D084(a1 + 1432, &v8);
    v4 = *(_QWORD *)(a1 + 1496);
    if (v4)
      v5 = *(float *)(a1 + 1448) / (float)v4;
    else
      v5 = 0.0;
    v7 = (float)(v8 - v5) * (float)(v8 - v5);
    v2 = a1 + 1504;
    v3 = &v7;
  }
  return sub_10007D084(v2, v3);
}

uint64_t sub_100A43DC0(uint64_t a1)
{
  uint64_t result;
  float v3;
  float *v5;
  NSObject *v6;
  double v7;
  double v8;
  float v9;
  uint64_t *v10;
  NSObject *v11;
  double v12;
  float v13;
  float v14;
  float v15;
  NSObject *v16;
  double v17;
  double v18;
  float v19;
  double v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  uint8_t buf[4];
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 72))(*(_QWORD *)(a1 + 104));
  if (!(_DWORD)result)
    return result;
  if (*(_BYTE *)(a1 + 13) && *(int *)(a1 + 1364) < 4)
  {
    v3 = sqrtf((float)((float)(*(float *)(a1 + 1292) * *(float *)(a1 + 1292))+ (float)(*(float *)(a1 + 1288) * *(float *)(a1 + 1288)))+ (float)(*(float *)(a1 + 1296) * *(float *)(a1 + 1296)));
    if (v3 > 500.0)
    {
LABEL_18:
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021661D8);
      v11 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
      {
        v12 = sqrtf((float)((float)(*(float *)(a1 + 1292) * *(float *)(a1 + 1292))+ (float)(*(float *)(a1 + 1288) * *(float *)(a1 + 1288)))+ (float)(*(float *)(a1 + 1296) * *(float *)(a1 + 1296)));
        *(_DWORD *)buf = 134217984;
        v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "magnitude max threshold exceeded (%+.3f), resetting calibration", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021661D8);
        v20 = sqrtf((float)((float)(*(float *)(a1 + 1292) * *(float *)(a1 + 1292))+ (float)(*(float *)(a1 + 1288) * *(float *)(a1 + 1288)))+ (float)(*(float *)(a1 + 1296) * *(float *)(a1 + 1296)));
        v30 = 134217984;
        v31 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "magnitude max threshold exceeded (%+.3f), resetting calibration", COERCE_DOUBLE(&v30));
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLCompassCalculator::updateInterferenceChecks()", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
      *(_DWORD *)(a1 + 384) = *(_DWORD *)(a1 + 380);
      v10 = &qword_101C054F8;
LABEL_24:
      v13 = *(double *)v10;
      *(float *)(a1 + 112) = v13;
      return result;
    }
    v5 = (float *)(a1 + 1280);
    goto LABEL_27;
  }
  v3 = sqrtf((float)((float)(*(float *)(a1 + 1292) * *(float *)(a1 + 1292))+ (float)(*(float *)(a1 + 1288) * *(float *)(a1 + 1288)))+ (float)(*(float *)(a1 + 1296) * *(float *)(a1 + 1296)));
  if (v3 >= 250.0 || v3 > 500.0)
    goto LABEL_18;
  v5 = (float *)(a1 + 1280);
  if (*(_BYTE *)(a1 + 13))
  {
LABEL_27:
    *(float *)buf = v3;
    sub_100A99DF0(a1 + 1648, (float *)buf);
    result = sub_100A45170(a1);
    if ((_DWORD)result)
    {
      v14 = sub_100A45410(v5, (float *)(a1 + 72)) * -57.2957795 + 90.0;
      *(float *)buf = v14;
      return sub_100A99DF0(a1 + 1976, (float *)buf);
    }
    return result;
  }
  *(float *)buf = v3;
  if (sub_100A99DF0(a1 + 1648, (float *)buf))
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021661D8);
    v6 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      v7 = sub_100A9A318(a1 + 1648);
      v8 = sub_100A9A320(a1 + 1648);
      v9 = sub_100A9A340(a1 + 1648);
      *(_DWORD *)buf = 134218496;
      v37 = v7;
      v38 = 2048;
      v39 = v8;
      v40 = 2048;
      v41 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "magnitude threshold exceeded (%f) with (%f) from base value (%f), resetting calibration", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021661D8);
      v23 = qword_10229FD48;
      v30 = 134218496;
      v31 = sub_100A9A318(a1 + 1648);
      v32 = 2048;
      v33 = sub_100A9A320(a1 + 1648);
      v34 = 2048;
      v35 = sub_100A9A340(a1 + 1648);
      LODWORD(v29) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 1, "magnitude threshold exceeded (%f) with (%f) from base value (%f), resetting calibration", COERCE_DOUBLE(&v30), v29);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLCompassCalculator::updateInterferenceChecks()", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
    *(_DWORD *)(a1 + 384) = *(_DWORD *)(a1 + 380);
    v10 = &qword_101C054E8;
    goto LABEL_24;
  }
  result = sub_100A45170(a1);
  if ((_DWORD)result)
  {
    v15 = sub_100A45410((float *)(a1 + 1280), (float *)(a1 + 72)) * -57.2957795 + 90.0;
    *(float *)buf = v15;
    result = sub_100A99DF0(a1 + 1976, (float *)buf);
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 80))(*(_QWORD *)(a1 + 104));
      if ((_DWORD)result)
      {
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021661D8);
        v16 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
        {
          v17 = sub_100A9A318(a1 + 1976);
          v18 = sub_100A9A320(a1 + 1976);
          v19 = sub_100A9A340(a1 + 1976);
          *(_DWORD *)buf = 134218496;
          v37 = v17;
          v38 = 2048;
          v39 = v18;
          v40 = 2048;
          v41 = v19;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "inclination threshold exceeded (%f) with (%f) from base value (%f), resetting calibration", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021661D8);
          v26 = qword_10229FD48;
          v30 = 134218496;
          v31 = sub_100A9A318(a1 + 1976);
          v32 = 2048;
          v33 = sub_100A9A320(a1 + 1976);
          v34 = 2048;
          v35 = sub_100A9A340(a1 + 1976);
          LODWORD(v29) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 1, "inclination threshold exceeded (%f) with (%f) from base value (%f), resetting calibration", COERCE_DOUBLE(&v30), v29);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLCompassCalculator::updateInterferenceChecks()", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
        *(_DWORD *)(a1 + 384) = *(_DWORD *)(a1 + 380);
        v10 = &qword_101C054F0;
        goto LABEL_24;
      }
    }
  }
  return result;
}

float sub_100A44508(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 4);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 88) = result;
  return result;
}

float sub_100A44524(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float result;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 1);
  v2 = *a2;
  *(_QWORD *)(a1 + 32) = a2[3];
  *(_QWORD *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 11);
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 12);
  result = *((float *)a2 + 13);
  *(float *)(a1 + 64) = result;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 74);
  return result;
}

float sub_100A4455C(uint64_t a1, double *a2)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  float result;

  v2 = (_OWORD *)(a1 + 1368);
  if (a2[7] == -1.0)
  {
    *(_QWORD *)(a1 + 1416) = 0;
    *(_OWORD *)(a1 + 1384) = 0u;
    *(_OWORD *)(a1 + 1400) = 0u;
    *v2 = 0u;
    *(_QWORD *)(a1 + 1424) = 0xBFF0000000000000;
    *(_BYTE *)(a1 + 116) = 0;
    return sub_100A995BC(a1 + 112);
  }
  else
  {
    v3 = *(_OWORD *)a2;
    v4 = *((_OWORD *)a2 + 1);
    v5 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 1400) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 1416) = v5;
    *v2 = v3;
    *(_OWORD *)(a1 + 1384) = v4;
    *(_BYTE *)(a1 + 116) = 1;
    *(float *)&v3 = a2[6];
    sub_100A99260(a1 + 112, 10, 30, *(float *)&v3, 2.0);
  }
  return result;
}

uint64_t sub_100A445D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 128))(*(_QWORD *)(a1 + 104));
}

BOOL sub_100A445E0(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, float *a10, float *a11, float *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  _BOOL8 v23;
  float32x4_t v25;
  _BYTE v26[36];
  uint64_t v27;

  v17 = a10[2];
  v18 = a10[3];
  v19 = a10[4];
  v20 = a11[2];
  v21 = a11[3];
  v22 = a11[4];
  v27 = 0x3F8000003F800000;
  v25.i64[0] = 0;
  v25.i64[1] = 0x3F80000000000000;
  v23 = sub_100B62074((float *)&v27, &v25, (uint64_t)v26, v17, v18, v19, v20, v21, v22, a7, a8, (uint64_t)a12, a13, a14, a15, a16, 0x3F800000uLL, 0.0);
  if (v23)
    *a12 = sub_100B631D4(v25.f32);
  return v23;
}

BOOL sub_100A44684(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  double v18;
  _BOOL4 v19;
  float v20;
  _BOOL4 v21;
  _BOOL8 v22;
  __int128 v23;
  double v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unint64_t v46;
  float v47;
  float v48;
  float v49;
  unint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  double v56;
  double v57;
  float v58;
  float v59;
  float v60;
  float v61;
  NSObject *v62;
  float v63;
  double v64;
  NSObject *v65;
  double v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  int v73;
  float v74;
  float v76;
  double v77;
  double v78;
  const char *v79;
  uint8_t *v80;
  double v81;
  const char *v82;
  uint8_t *v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  uint64_t (**v91)();
  double v92;
  double v93;
  double v94;
  int v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  uint8_t buf[4];
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  double v134;
  __int16 v135;
  double v136;
  __int16 v137;
  double v138;
  __int16 v139;
  double v140;
  __int16 v141;
  double v142;

  HIDWORD(v94) = 0;
  v91 = off_1021388A0;
  v18 = *(double *)(a1 + 1312);
  v92 = v18;
  LODWORD(v18) = *(_DWORD *)(a1 + 1320);
  LODWORD(v93) = LODWORD(v18);
  if (*(_BYTE *)(a1 + 13))
  {
    v18 = *(double *)(a1 + 1336);
    v92 = v18;
    LODWORD(v18) = *(_DWORD *)(a1 + 1344);
    LODWORD(v93) = LODWORD(v18);
  }
  v19 = sub_100A445E0(v18, a4, a5, a6, a7, a8, a9, a10, a1, (float *)&v91, (float *)(a1 + 72), (float *)&v94 + 1, a13, a14, a15, a16);
  v20 = *((float *)&v94 + 1);
  v21 = *((float *)&v94 + 1) < 360.0 && v19;
  v22 = *((float *)&v94 + 1) >= 0.0 && v21;
  if (v22)
  {
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 1288);
    *(_QWORD *)&v23 = *(_QWORD *)(a1 + 1292);
    *((_QWORD *)&v23 + 1) = *(_QWORD *)(a1 + 1312);
    *(_OWORD *)(a2 + 4) = v23;
    LODWORD(v23) = *(_DWORD *)(a1 + 1320);
    *(_DWORD *)(a2 + 20) = v23;
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 1364);
    *(float *)(a2 + 44) = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)(&v23 + 8), *(float32x2_t *)(&v23 + 8)).i32[1]), *((float *)&v23 + 2), *((float *)&v23 + 2))+ (float)(*(float *)&v23 * *(float *)&v23));
    *(_BYTE *)(a2 + 40) = 0;
    v24 = -57.2957795;
    v25 = sub_100A45410((float *)(a1 + 1304), (float *)(a1 + 72)) * -57.2957795 + 90.0;
    *(float *)(a2 + 48) = v25;
    v26 = *(float *)(a2 + 44);
    v27 = v25 * 0.0174532925;
    *(float *)(a2 + 52) = v26 * cosf(v27);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
    v40 = *(double *)(a1 + 32);
    *(double *)(a2 + 80) = v40;
    if (*(_BYTE *)(a1 + 13))
    {
      *((float *)&v90 + 1) = v20;
      sub_100A445E0(v40, v33, v34, v35, v36, v37, v38, v39, v28, (float *)(a1 + 1280), (float *)(a1 + 72), (float *)&v90 + 1, v29, v30, v31, v32);
      v41 = *((float *)&v90 + 1);
      if (*(_BYTE *)(a1 + 2304))
      {
        v42 = *(float *)(a1 + 2384);
      }
      else
      {
        *(_BYTE *)(a1 + 2304) = 1;
        v42 = v41;
      }
      v44 = v20;
      if (vabds_f32(v42, v20) > 270.0)
        v44 = dbl_101C04610[(float)(v42 - v20) > 0.0] + v20;
      v45 = v41;
      if (vabds_f32(v42, v41) > 270.0)
        v45 = dbl_101C04610[(float)(v42 - v41) > 0.0] + v41;
      *(float *)&v90 = v45;
      v46 = *(_QWORD *)(a1 + 2376);
      v47 = 0.0;
      v48 = 0.0;
      if (v46 >= 2)
      {
        v49 = (float)((float)v46 * *(float *)(a1 + 2332)) - (float)(*(float *)(a1 + 2328) * *(float *)(a1 + 2328));
        v48 = v49 / (float)((v46 - 1) * v46);
        if (v49 < 0.0)
          v48 = 0.0;
      }
      v50 = *(_QWORD *)(a1 + 1640);
      if (v50)
        v47 = *(float *)(a1 + 1592) / (float)v50;
      *(float *)&v88 = v42 - v41;
      *((float *)&v88 + 1) = v42 - v20;
      v51 = (float)(v47 + -0.06) * 0.55 / 2.94000006 + 0.1;
      v52 = fmaxf(fminf(v51, 0.65), 0.1);
      *((float *)&v87 + 1) = v48;
      v86 = v47;
      if (v48 >= 0.0015 || v47 >= 6.28318531)
      {
        v54 = *(float *)(a1 + 2388) * 0.15 + 0.734964973;
        *(float *)(a1 + 2388) = v54;
      }
      else
      {
        *((float *)&v85 + 1) = v41;
        v53 = v44;
        v54 = 1.0 - expf(v47 * -0.2);
        *(float *)(a1 + 2388) = v54;
        if (v47 <= 1.0)
        {
          v44 = v53;
          v41 = *((float *)&v85 + 1);
          if (v47 < 0.06)
          {
            *(_DWORD *)(a1 + 2388) = 1011052224;
            v54 = 0.011928;
          }
        }
        else
        {
          v54 = 1.0 - expf(v47 * (float)(v47 * -0.2));
          *(float *)(a1 + 2388) = v54;
          v44 = v53;
          v41 = *((float *)&v85 + 1);
        }
      }
      v55 = *(float *)&v90;
      v56 = v52;
      v57 = v44;
      v58 = (float)(*(float *)&v90 * v52) + (1.0 - v52) * v44;
      v59 = (float)(v54 * v58) + (float)((float)(1.0 - v54) * v42);
      *(float *)(a1 + 2384) = v59;
      v60 = sub_100A3BC34(0, v59);
      *(float *)(a1 + 2384) = v60;
      v24 = -57.2957795;
      if (*(_BYTE *)(a1 + 12))
      {
        if (qword_10229FD40 != -1)
        {
          v76 = v60;
          dispatch_once(&qword_10229FD40, &stru_1021661D8);
          v60 = v76;
          v55 = *(float *)&v90;
        }
        v61 = v60 - v42;
        v62 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          v63 = *(float *)(a1 + 2388);
          v64 = *(float *)(a1 + 2384);
          *(_DWORD *)buf = 134220800;
          v120 = v20;
          v121 = 2048;
          v122 = v41;
          v123 = 2048;
          v124 = *((float *)&v88 + 1);
          v125 = 2048;
          v126 = *(float *)&v88;
          v127 = 2048;
          v128 = v57;
          v129 = 2048;
          v130 = v55;
          v131 = 2048;
          v132 = v64;
          v133 = 2048;
          v134 = v63;
          v135 = 2048;
          v136 = v56;
          v137 = 2048;
          v138 = *((float *)&v87 + 1);
          v139 = 2048;
          v140 = v86;
          v141 = 2048;
          v142 = v61;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "rawHeading, %.3f, gyroHeading, %.3f, deltaRaw, %.3f, deltaGyro, %.3f, rawHeadingU, %.3f, gyroHeadingU, %.3f, filteredHeading, %.3f, alpha, %.3f, gamma, %.3f, rotVar, %.5f, rotMag, %.3f, deltaFiltered, %.3f", buf, 0x7Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021661D8);
          v77 = *(float *)(a1 + 2384);
          v78 = *(float *)(a1 + 2388);
          v95 = 134220800;
          v96 = v20;
          v97 = 2048;
          v98 = v41;
          v99 = 2048;
          v100 = *((float *)&v88 + 1);
          v101 = 2048;
          v102 = *(float *)&v88;
          v103 = 2048;
          v104 = v57;
          v105 = 2048;
          v106 = *(float *)&v90;
          v107 = 2048;
          v108 = v77;
          v109 = 2048;
          v110 = v78;
          v111 = 2048;
          v112 = v56;
          v113 = 2048;
          v114 = *((float *)&v87 + 1);
          v115 = 2048;
          v116 = v86;
          v117 = 2048;
          v118 = v61;
          LODWORD(v84) = 122;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "rawHeading, %.3f, gyroHeading, %.3f, deltaRaw, %.3f, deltaGyro, %.3f, rawHeadingU, %.3f, gyroHeadingU, %.3f, filteredHeading, %.3f, alpha, %.3f, gamma, %.3f, rotVar, %.5f, rotMag, %.3f, deltaFiltered, %.3f", COERCE_DOUBLE(&v95), v84, v85, v86, v87, v88, -57.2957795, v90, *(double *)&v91, v92,
            v93,
            v94);
          v80 = (uint8_t *)v79;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLCompassCalculator::getCompassData(CLMotionTypeCompass &)", "%s\n", v79);
          v24 = v89;
          if (v80 != buf)
            free(v80);
        }
      }
      v43 = *(float *)(a1 + 2384);
    }
    else
    {
      sub_100A4500C(a1 + 624, (float *)&v94 + 1);
      v43 = *(float *)(a1 + 632);
      *(float *)(a1 + 2384) = v43;
    }
    if ((v43 >= 360.0 || v43 < 0.0) && *(_BYTE *)(a1 + 12))
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021661D8);
      v65 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
      {
        v66 = *(float *)(a1 + 2384);
        *(_DWORD *)buf = 134217984;
        v120 = v66;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "#Warning Heading  %.2f, is not in bound [0 360]", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021661D8);
        v81 = *(float *)(a1 + 2384);
        v95 = 134217984;
        v96 = v81;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "#Warning Heading  %.2f, is not in bound [0 360]", COERCE_DOUBLE(&v95));
        v83 = (uint8_t *)v82;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLCompassCalculator::getCompassData(CLMotionTypeCompass &)", "%s\n", v82);
        if (v83 != buf)
          free(v83);
      }
    }
    if (sub_100A45170(a1)
      && (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 72))(*(_QWORD *)(a1 + 104)) & 1) != 0
       || *(_BYTE *)(a1 + 15)))
    {
      v67 = sub_100A45410((float *)(a1 + 1280), (float *)(a1 + 72)) * v24 + 90.0;
      v68 = sqrtf((float)((float)(*(float *)(a1 + 1292) * *(float *)(a1 + 1292))+ (float)(*(float *)(a1 + 1288) * *(float *)(a1 + 1288)))+ (float)(*(float *)(a1 + 1296) * *(float *)(a1 + 1296)));
      v69 = v67 * 3.14159265 / 180.0;
      v70 = cosf(v69);
      sub_100A99490(a1 + 112, v67, v68 * v70);
    }
    v71 = *(float *)(a1 + 2384);
    *(float *)(a2 + 24) = v71;
    if (*(double *)(a1 + 1424) == -1.0)
      v72 = -1.0;
    else
      v72 = sub_10012C9E0(v71, *(double *)(a1 + 1408));
    *(float *)(a2 + 28) = v72;
    v73 = *(_DWORD *)(a1 + 1364);
    if (v73 || !*(_BYTE *)(a1 + 15))
    {
      v74 = 20.0;
      if (*(_BYTE *)(a1 + 14))
      {
LABEL_57:
        *(float *)(a2 + 32) = v74;
        if (*(_BYTE *)(a1 + 13) && *(_BYTE *)(*(_QWORD *)(a1 + 104) + 184))
          *(float *)(a2 + 32) = v74 + 1.0;
        return v22;
      }
    }
    else
    {
      v73 = 1;
    }
    v74 = sub_100A99664(a1 + 112, v73);
    goto LABEL_57;
  }
  return v22;
}

void sub_100A4500C(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  double v8;
  float v9;
  float v10;
  float v11;
  __float2 v12;

  v3 = *a2 * 0.0174532925;
  v12 = __sincosf_stret(v3);
  sub_1006D82B8(a1 + 16, &v12.__cosval);
  sub_1006D82B8(a1 + 104, (float *)&v12);
  sub_100A4533C((_QWORD *)(a1 + 16), 2, &v12.__cosval);
  sub_100A4533C((_QWORD *)(a1 + 104), 2, &v12);
  v4 = atan2f(v12.__sinval, v12.__cosval) * 57.2957795;
  *(float *)(a1 + 8) = v4;
  v5 = sub_100A3BC34(0, v4);
  *(float *)(a1 + 8) = v5;
  v6 = *(float *)(a1 + 12);
  if (v6 != -1.0)
  {
    v7 = sub_100096C00(v5, v6);
    v8 = v7;
    v9 = (cos(v7 * 0.0174532925) + 1.0) * *(float *)(a1 + 4);
    v10 = (1.2 - v9) * 0.75 * v8;
    if (sub_100A3BC34(1, *(float *)(a1 + 8) - *(float *)(a1 + 12)) >= 0.0)
      v11 = v10;
    else
      v11 = -v10;
    v5 = sub_10012C9E0(*(float *)(a1 + 12), (float)(v11 + 0.0));
    *(float *)(a1 + 8) = v5;
  }
  *(float *)(a1 + 12) = v5;
}

BOOL sub_100A45170(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 13))
    return sub_100A45214(a1);
  else
    return sub_100A451A4(a1);
}

uint64_t sub_100A45180(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 1352);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 1360);
  *(_QWORD *)a2 = v2;
  return result;
}

uint64_t sub_100A45194(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 120))(*(_QWORD *)(a1 + 104));
}

BOOL sub_100A451A4(uint64_t a1)
{
  _BOOL8 result;
  float v3;
  unint64_t v4;

  result = 0;
  v3 = sqrtf((float)((float)(*(float *)(a1 + 84) * *(float *)(a1 + 84)) + (float)(*(float *)(a1 + 80) * *(float *)(a1 + 80)))+ (float)(*(float *)(a1 + 88) * *(float *)(a1 + 88)));
  if (v3 < 1.2 && v3 > 0.8)
  {
    v4 = *(_QWORD *)(a1 + 1568);
    return !v4 || (float)(*(float *)(a1 + 1520) / (float)v4) < 0.09;
  }
  return result;
}

BOOL sub_100A45214(uint64_t a1)
{
  unint64_t v1;
  float v2;
  float v4;

  if (sqrtf((float)((float)(*(float *)(a1 + 60) * *(float *)(a1 + 60)) + (float)(*(float *)(a1 + 56) * *(float *)(a1 + 56)))+ (float)(*(float *)(a1 + 64) * *(float *)(a1 + 64))) > 4.71238911)return 0;
  v1 = *(_QWORD *)(a1 + 1640);
  if (!v1)
    return 1;
  v2 = *(float *)(a1 + 1592);
  if ((float)(v2 / (float)v1) > 3.1416)
    return 0;
  if (v1 >= 2 && (v4 = (float)((float)v1 * *(float *)(a1 + 1596)) - (float)(v2 * v2), v4 >= 0.0))
    return (float)(v4 / (float)((v1 - 1) * v1)) <= 0.64;
  else
    return 1;
}

void sub_100A452B4(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100A452E0(uint64_t a1)
{
  *(_QWORD *)(a1 + 104) = off_10214EBA0;
  sub_100008848(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_10047F25C((_QWORD *)(a1 + 120));
  *(_QWORD *)(a1 + 16) = off_10214EBA0;
  sub_100008848(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_10047F25C((_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_100A4533C(_QWORD *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  float v10;
  int v11;
  _QWORD *v12;
  int i;
  _QWORD *v14;

  v3 = a1[10];
  if (!v3)
    return 0;
  if (a2 == 2)
  {
    v10 = (double)v3 * 0.5;
    v11 = vcvtms_s32_f32(v10);
    v12 = (_QWORD *)a1[8];
    if (v11 < 1)
    {
      v7 = (_QWORD *)a1[8];
    }
    else
    {
      for (i = 0; i != v11; ++i)
      {
        v14 = (_QWORD *)v12[1];
        if (v14)
        {
          do
          {
            v7 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v12[2];
            v8 = *v7 == (_QWORD)v12;
            v12 = v7;
          }
          while (!v8);
        }
        v12 = v7;
      }
    }
    goto LABEL_22;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      v6 = (_QWORD *)a1[9];
      v4 = a1 + 9;
      v5 = v6;
      if (v6)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)v5[1];
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (v8);
      }
      goto LABEL_22;
    }
    return 0;
  }
  v7 = (_QWORD *)a1[8];
LABEL_22:
  *a3 = *((_DWORD *)v7 + 7);
  return 1;
}

float sub_100A45410(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = sqrtf((float)((float)(v3 * v3) + (float)(v2 * v2)) + (float)(v4 * v4));
  if (v5 > 0.0
    && (v6 = a2[2],
        v7 = a2[3],
        v8 = a2[4],
        v9 = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8)),
        v9 > 0.0)
    && (v10 = (float)((float)((float)((float)(v3 * v7) + (float)(v6 * v2)) + (float)(v8 * v4)) / v5) / v9, v10 <= 1.0))
  {
    return acosf(v10);
  }
  else
  {
    return 0.0;
  }
}

void sub_100A4547C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_102166208;
  v5[6] = 0;
  sub_10104508C();
}

void sub_100A4550C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_100A45538(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLProxPDPAndALSPhoneSubscription::onProxPDPData");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102166258);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLProxPDPAndALSPhoneSubscription::onProxPDPData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102166258);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLProxPDPAndALSPhoneSubscription::onProxPDPData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A464E0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A456F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A45714(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102166208;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_10002FA68((uint64_t)a1);
}

void sub_100A45758(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102166208;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10002FA68((uint64_t)a1);
  operator delete();
}

_QWORD *sub_100A457B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_1021662A8;
  v11[1] = sub_100A45A18;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessageProxPDPUpdate");
  sub_100A468D0((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_1021662A8;
  v9[1] = sub_100A45F7C;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessageALSPhoneUpdate");
  sub_100A468D0((uint64_t)v16, (uint64_t)v9);
  sub_100A46CC4(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_100A45948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_100A45A18(uint64_t a1, int a2)
{
  id v4;
  char v5;
  char v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  _UNKNOWN **v20;
  uint8_t buf[8];
  char v22;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_10051CF08() & 1) != 0)
  {
    sub_1015A2E04(buf, "com.apple.locationd.cmproxpdpandalsphonemanager");
    v5 = sub_1002255E0(a1);
    v6 = v5;
    if (v22 < 0)
    {
      operator delete(*(void **)buf);
      if ((v6 & 1) != 0)
      {
LABEL_4:
        sub_1001A638C(a1);
        if (a2)
        {
          if (qword_10229FC60 != -1)
            dispatch_once(&qword_10229FC60, &stru_102166278);
          v7 = qword_10229FC68;
          if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Requesting Prox PDP subscription", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC60 != -1)
              dispatch_once(&qword_10229FC60, &stru_102166278);
            v16[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "Requesting Prox PDP subscription", v16, 2);
            v13 = (uint8_t *)v12;
            sub_100512490("Generic", 1, 0, 2, "void CLProxPDPAndALSPhoneSubscription::handleRequestProxPDP(BOOL, const CLNameValuePair &)", "%s\n", v12);
            if (v13 != buf)
              free(v13);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 0, 0);
        }
        else
        {
          if (qword_10229FC60 != -1)
            dispatch_once(&qword_10229FC60, &stru_102166278);
          v9 = qword_10229FC68;
          if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Requesting Prox PDP unsubscription", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC60 != -1)
              dispatch_once(&qword_10229FC60, &stru_102166278);
            v16[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "Requesting Prox PDP unsubscription", v16, 2);
            v15 = (uint8_t *)v14;
            sub_100512490("Generic", 1, 0, 2, "void CLProxPDPAndALSPhoneSubscription::handleRequestProxPDP(BOOL, const CLNameValuePair &)", "%s\n", v14);
            if (v15 != buf)
              free(v15);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 0);
        }
        goto LABEL_25;
      }
    }
    else if ((v5 & 1) != 0)
    {
      goto LABEL_4;
    }
    v17 = CMErrorMessage;
    v18 = &off_10221BAF8;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
    sub_100A46764(a1, buf);
    goto LABEL_25;
  }
  if (qword_10229FC60 != -1)
    dispatch_once(&qword_10229FC60, &stru_102166278);
  v8 = qword_10229FC68;
  if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Subscription to Prox PDP is not available", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102166278);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 16, "Subscription to Prox PDP is not available", v16, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLProxPDPAndALSPhoneSubscription::handleRequestProxPDP(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v19 = CMErrorMessage;
  v20 = &off_10221BAE0;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
  sub_100A46764(a1, buf);
LABEL_25:

}

void sub_100A45F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_100A45F7C(uint64_t a1, int a2)
{
  id v4;
  char v5;
  char v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  _UNKNOWN **v20;
  uint8_t buf[8];
  char v22;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_10051CF08() & 1) != 0)
  {
    sub_1015A2E04(buf, "com.apple.locationd.cmproxpdpandalsphonemanager");
    v5 = sub_1002255E0(a1);
    v6 = v5;
    if (v22 < 0)
    {
      operator delete(*(void **)buf);
      if ((v6 & 1) != 0)
      {
LABEL_4:
        sub_1001A638C(a1);
        if (a2)
        {
          if (qword_10229FC60 != -1)
            dispatch_once(&qword_10229FC60, &stru_102166278);
          v7 = qword_10229FC68;
          if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Requesting ALS Phone subscription", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC60 != -1)
              dispatch_once(&qword_10229FC60, &stru_102166278);
            v16[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "Requesting ALS Phone subscription", v16, 2);
            v13 = (uint8_t *)v12;
            sub_100512490("Generic", 1, 0, 2, "void CLProxPDPAndALSPhoneSubscription::handleRequestALSPhone(BOOL, const CLNameValuePair &)", "%s\n", v12);
            if (v13 != buf)
              free(v13);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 1, 0);
        }
        else
        {
          if (qword_10229FC60 != -1)
            dispatch_once(&qword_10229FC60, &stru_102166278);
          v9 = qword_10229FC68;
          if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Requesting ALS Phone unsubscription", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC60 != -1)
              dispatch_once(&qword_10229FC60, &stru_102166278);
            v16[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "Requesting ALS Phone unsubscription", v16, 2);
            v15 = (uint8_t *)v14;
            sub_100512490("Generic", 1, 0, 2, "void CLProxPDPAndALSPhoneSubscription::handleRequestALSPhone(BOOL, const CLNameValuePair &)", "%s\n", v14);
            if (v15 != buf)
              free(v15);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 1);
        }
        goto LABEL_25;
      }
    }
    else if ((v5 & 1) != 0)
    {
      goto LABEL_4;
    }
    v17 = CMErrorMessage;
    v18 = &off_10221BAF8;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
    sub_100A46804(a1, buf);
    goto LABEL_25;
  }
  if (qword_10229FC60 != -1)
    dispatch_once(&qword_10229FC60, &stru_102166278);
  v8 = qword_10229FC68;
  if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Subscription to ALS is not available", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102166278);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 16, "Subscription to ALS is not available", v16, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLProxPDPAndALSPhoneSubscription::handleRequestALSPhone(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v19 = CMErrorMessage;
  v20 = &off_10221BAE0;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
  sub_100A46804(a1, buf);
LABEL_25:

}

void sub_100A46480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_100A464E0(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  id v15;
  double v16;
  id v17;
  NSDictionary *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;

  if (*a3 == 1)
  {
    v15 = objc_alloc((Class)CMALSPhone);
    LODWORD(v16) = *((_DWORD *)a4 + 2);
    v17 = objc_msgSend(v15, "initWithTimestamp:illumination:", *a4, v16);
    v19 = CMALSPhoneObject;
    v20 = v17;
    v18 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);

    sub_100A466BC(a1, &v18);
  }
  else if (!*a3)
  {
    v6 = objc_alloc((Class)CMProxPDP);
    LODWORD(v7) = *((_DWORD *)a4 + 2);
    LODWORD(v8) = *((_DWORD *)a4 + 3);
    LODWORD(v9) = *((_DWORD *)a4 + 4);
    LODWORD(v10) = *((_DWORD *)a4 + 5);
    LODWORD(v11) = *((_DWORD *)a4 + 6);
    LODWORD(v12) = *((_DWORD *)a4 + 7);
    LODWORD(v13) = *((_DWORD *)a4 + 8);
    v14 = objc_msgSend(v6, "initWithTimestamp:intensity:intensityCalDelta:intensityBaselineDelta:ambient:pocketProbability:baselineConfidence:rxNtcC:scanFlags:pocketFlag:", *((unsigned __int8 *)a4 + 36), *((unsigned __int8 *)a4 + 37), *a4, v7, v8, v9, v10, v11, v12, v13);
    v21 = CMProxPDPObject;
    v22 = v14;
    v18 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);

    sub_100A46614(a1, &v18);
  }
}

void sub_100A46614(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102166348, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100A466A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A466BC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102166350, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100A46750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A46764(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_102166348, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100A467F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A46804(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_102166350, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100A46890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A468A4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100A468D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100A46934(id a1)
{
  qword_10229FC68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

__n128 sub_100A46960(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021662A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100A4699C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021662A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100A469C0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100A46A10(a1 + 8, a2, a3);
}

uint64_t sub_100A469C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100A46A04()
{
}

void sub_100A46A10(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100A46A94(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100A46A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A46A94(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102166318);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102166318);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_100A46C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100A46C98(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100A46CC4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100A46D3C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100A46D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100A46D3C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100A46FBC(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100A46FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100A46FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100A47030(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100A47018(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100A47030(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100A47088(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_100A470A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_QWORD *sub_100A470AC@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, (&off_102166358)[*a1]);
}

uint64_t sub_100A47210(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  void *String;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      String = (void *)PBReaderReadString(a2);

      *(_QWORD *)(a1 + 16) = String;
    }
    else if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_30;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_32;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_32:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100A47664(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = -1;
  *(_BYTE *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  sub_100602438(a1 + 64, a2, (uint64_t)sub_100A47970, a1);
}

void sub_100A47888(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (*(_BYTE *)(v1 + 560) && *(char *)(v1 + 559) < 0)
    operator delete(*(void **)(v1 + 536));
  if (*(char *)(v1 + 487) < 0)
    operator delete(*(void **)(v1 + 464));
  if (*(char *)(v1 + 447) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 423) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 399) < 0)
    operator delete(*(void **)(v1 + 376));
  std::mutex::~mutex((std::mutex *)(v1 + 312));
  sub_100602508(v2);
  v7 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 24) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_100A47970(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 56), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102166378);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102166378);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_100A4DDD4(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_100A47B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A47B48(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  std::string *p_p;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  const char *v21;
  int v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  int v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  int v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  const char *v40;
  char *v41;
  std::string *v42;
  const char *v43;
  char *v44;
  const char *v45;
  const char *v46;
  char *v47;
  const char *v48;
  char *v49;
  const char *v50;
  char *v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  std::string *v55;
  std::string *v56;
  std::string *v57;
  BOOL v58;
  std::string::size_type v59;
  int v60;
  std::string *v61;
  std::string __p;
  _OWORD buf[102];

  v59 = 0;
  sub_1001E4804(buf);
  v2 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingAvlExpirationAgeDefaults", &v59);
  v3 = v2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_5;
  v5 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!v2)
      goto LABEL_12;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v59;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#RTTMA,defaults expirationAge,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v59;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,defaults expirationAge,%{public}.3lf", &__p, 12);
    v41 = (char *)v40;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v40);
    if (v41 != (char *)buf)
      free(v41);
  }
  *(_QWORD *)(a1 + 520) = v59;
  *(_BYTE *)(a1 + 528) = 1;
LABEL_12:
  sub_1015A2E04(&__p, "");
  sub_1001E4804(buf);
  v8 = sub_1000BCB64(*(uint64_t *)&buf[0], "RayTracingServerURLDefaults", &__p);
  v9 = v8;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_16;
  v11 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
LABEL_16:
    if (!v8)
      goto LABEL_25;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = p_p;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#RTTMA,RTAvailabilityFileURL,%{public}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v42 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v60 = 136446210;
    v61 = v42;
    LODWORD(v54) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,RTAvailabilityFileURL,%{public}s", &v60, v54);
    v44 = (char *)v43;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v43);
    if (v44 != (char *)buf)
      free(v44);
  }
  sub_1003408F0((std::string *)(a1 + 536), &__p);
LABEL_25:
  v58 = 0;
  sub_1001E4804(buf);
  v15 = sub_1001E4874(*(uint64_t *)&buf[0], "RayTracingFlushRTDataDefaults", &v58);
  v16 = v15;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_29;
  v18 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v16)
      goto LABEL_39;
  }
  else
  {
LABEL_29:
    if (!v15)
      goto LABEL_39;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v20 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (v58)
      v21 = "On";
    else
      v21 = "Off";
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#RTTMA,defaults FlushEnabled,%{public}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    if (v58)
      v45 = "On";
    else
      v45 = "Off";
    v60 = 136446210;
    v61 = (std::string *)v45;
    LODWORD(v54) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,defaults FlushEnabled,%{public}s", &v60, v54);
    v47 = (char *)v46;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v46);
    if (v47 != (char *)buf)
      free(v47);
  }
  *(_WORD *)(a1 + 568) = v58 | 0x100;
LABEL_39:
  v57 = 0;
  sub_1001E4804(buf);
  v22 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingFlushRTDataBeforeTimeDefaults", &v57);
  v23 = v22;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_43;
  v25 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v23)
      goto LABEL_50;
  }
  else
  {
LABEL_43:
    if (!v22)
      goto LABEL_50;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v27 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v57;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "#RTTMA,defaults flushTime,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v60 = 134349056;
    v61 = v57;
    LODWORD(v54) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,defaults flushTime,%{public}.3lf", &v60, v54);
    v49 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v48);
    if (v49 != (char *)buf)
      free(v49);
  }
  *(_QWORD *)(a1 + 576) = v57;
  *(_BYTE *)(a1 + 584) = 1;
LABEL_50:
  v56 = 0;
  sub_1001E4804(buf);
  v28 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingAvlDownloadRateOnWifiDefaults", &v56);
  v29 = v28;
  v30 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_54;
  v31 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if (!v29)
      goto LABEL_61;
  }
  else
  {
LABEL_54:
    if (!v28)
      goto LABEL_61;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v33 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v56;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#RTTMA,defaults wifiDownloadRateDefault,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v60 = 134349056;
    v61 = v56;
    LODWORD(v54) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,defaults wifiDownloadRateDefault,%{public}.3lf", &v60, v54);
    v51 = (char *)v50;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v50);
    if (v51 != (char *)buf)
      free(v51);
  }
  *(_QWORD *)(a1 + 592) = v56;
  *(_BYTE *)(a1 + 600) = 1;
LABEL_61:
  v55 = 0;
  sub_1001E4804(buf);
  v34 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingAvlDownloadRateOnCellDefaults", &v55);
  v35 = v34;
  v36 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_65;
  v37 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if (!v35)
      goto LABEL_72;
  }
  else
  {
LABEL_65:
    if (!v34)
      goto LABEL_72;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v39 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v55;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#RTTMA,defaults CellDownloadRateDefault,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v60 = 134349056;
    v61 = v55;
    LODWORD(v54) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,defaults CellDownloadRateDefault,%{public}.3lf", &v60, v54);
    v53 = (char *)v52;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v52);
    if (v53 != (char *)buf)
      free(v53);
  }
  *(_QWORD *)(a1 + 608) = v55;
  *(_BYTE *)(a1 + 616) = 1;
LABEL_72:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100A486D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100A48760(uint64_t a1)
{
  double result;

  if (*(_BYTE *)(a1 + 616))
  {
    result = *(double *)(a1 + 608);
    *(double *)(a1 + 512) = result;
  }
  if (*(_BYTE *)(a1 + 600))
  {
    result = *(double *)(a1 + 592);
    *(double *)(a1 + 504) = result;
  }
  if (*(_BYTE *)(a1 + 584))
  {
    result = *(double *)(a1 + 576);
    *(double *)(a1 + 496) = result;
  }
  if (*(_BYTE *)(a1 + 569))
    *(_BYTE *)(a1 + 488) = *(_BYTE *)(a1 + 568);
  if (*(_BYTE *)(a1 + 560))
    std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a1 + 536));
  if (*(_BYTE *)(a1 + 528))
  {
    result = *(double *)(a1 + 520);
    *(double *)(a1 + 456) = result;
  }
  return result;
}

void sub_100A487E0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLRayTracingTileAvailabilityManager::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 56), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102166378);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileAvailabilityManager::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102166378);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileAvailabilityManager::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A4F20C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A48998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A489B8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLRayTracingTileAvailabilityManager::onManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 56), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102166378);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileAvailabilityManager::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102166378);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileAvailabilityManager::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100A501C8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100A48B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A48B90(uint64_t a1)
{
  std::string::size_type size;
  void **v3;
  std::string::size_type v4;
  char *v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;
  std::string *p_dst;
  void **v12;
  uint64_t v13;
  std::string *v14;
  void **v15;
  std::string::size_type v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  std::string *v20;
  NSObject *v21;
  const char *v22;
  std::string *v23;
  NSObject *v24;
  std::string *v25;
  void **v26;
  const char *v27;
  std::string *v28;
  const char *v29;
  std::string *v30;
  const char *v31;
  uint64_t v32;
  std::string::size_type v33;
  std::string::size_type v34;
  uint64_t v35;
  void *v36[2];
  int64_t v37;
  std::string __dst;
  void *v39[2];
  unsigned __int8 v40;
  _BYTE __p[22];
  __int16 v42;
  uint64_t v43;
  std::string v44;
  uint64_t v45;

  sub_100A4DA84(a1, (uint64_t)v39);
  if (*(char *)(a1 + 487) < 0)
    sub_100115CE4(&__dst, *(void **)(a1 + 464), *(_QWORD *)(a1 + 472));
  else
    __dst = *(std::string *)(a1 + 464);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::append(&__dst, "/");
    if ((v40 & 0x80u) == 0)
      v3 = v39;
    else
      v3 = (void **)v39[0];
    if ((v40 & 0x80u) == 0)
      v4 = v40;
    else
      v4 = (std::string::size_type)v39[1];
    std::string::append(&__dst, (const std::string::value_type *)v3, v4);
    v5 = (char *)sub_1001FD94C();
    sub_1000B7884(v5, (uint64_t)&v44);
    sub_100A4DA84(a1, (uint64_t)__p);
    if (v42 >= 0)
      v6 = __p;
    else
      v6 = *(const std::string::value_type **)__p;
    if (v42 >= 0)
      v7 = HIBYTE(v42);
    else
      v7 = *(_QWORD *)&__p[8];
    v8 = std::string::append(&v44, v6, v7);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v37 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)v36 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v42) < 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      p_dst = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v12 = v36;
      if (v37 < 0)
        v12 = (void **)v36[0];
      LODWORD(v44.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_dst;
      WORD2(v44.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
      HIWORD(v44.__r_.__value_.__r.__words[2]) = 2050;
      v45 = 0x409C200000000000;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#RTTMA,Pressure,downloadAvailabilityFile,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", (uint8_t *)&v44, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v44, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v25 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v26 = v36;
      if (v37 < 0)
        v26 = (void **)v36[0];
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v25;
      *(_WORD *)&__p[12] = 2082;
      *(_QWORD *)&__p[14] = v26;
      v42 = 2050;
      v43 = 0x409C200000000000;
      _os_log_send_and_compose_impl(2, 0, &v44, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,Pressure,downloadAvailabilityFile,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", __p, 32);
      v28 = (std::string *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", v27);
      if (v28 != &v44)
        free(v28);
    }
    v35 = 0x404E000000000000;
    v13 = a1 + 64;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &__dst;
    else
      v14 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (v37 >= 0)
      v15 = v36;
    else
      v15 = (void **)v36[0];
    if (sub_100604D40(a1 + 64, (const std::string::value_type *)v14, (const std::string::value_type *)v15, (double *)&v35))
    {
      v16 = *(_QWORD *)(a1 + 504);
      v33 = *(_QWORD *)(a1 + 512);
      v34 = v16;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v17 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v44.__r_.__value_.__l.__data_) = 134349312;
        *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = v33;
        WORD2(v44.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = v34;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#RTTMA,AVL file update rate over cellular,%{public}.1lf,wifi,%{public}.1lf", (uint8_t *)&v44, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v44, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        *(_DWORD *)__p = 134349312;
        *(_QWORD *)&__p[4] = v33;
        *(_WORD *)&__p[12] = 2050;
        *(_QWORD *)&__p[14] = v34;
        LODWORD(v32) = 22;
        _os_log_send_and_compose_impl(2, 0, &v44, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,AVL file update rate over cellular,%{public}.1lf,wifi,%{public}.1lf", __p, v32);
        v30 = (std::string *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", v29);
        if (v30 != &v44)
          free(v30);
      }
      if ((sub_10060538C(v13, (double *)&v33, (double *)&v34) & 1) != 0)
        goto LABEL_67;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v18 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v44.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#RTTMA,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateRate AVl file updater", (uint8_t *)&v44, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_67;
      bzero(&v44, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      *(_WORD *)__p = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl(2, 0, &v44, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateRate AVl file updater", __p, v32);
      v20 = (std::string *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", v19);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v24 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v44.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#RTTMA,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateSource AVL file updater", (uint8_t *)&v44, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_67;
      bzero(&v44, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      *(_WORD *)__p = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl(2, 0, &v44, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateSource AVL file updater", __p, v32);
      v20 = (std::string *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", v31);
    }
    if (v20 != &v44)
      free(v20);
LABEL_67:
    if (SHIBYTE(v37) < 0)
      operator delete(v36[0]);
    goto LABEL_69;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LOWORD(v44.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#RTTMA,invalid URL path", (uint8_t *)&v44, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v44, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    *(_WORD *)__p = 0;
    _os_log_send_and_compose_impl(2, 0, &v44, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,invalid URL path", __p, 2);
    v23 = (std::string *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", v22);
    if (v23 != &v44)
      free(v23);
  }
LABEL_69:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
}

void sub_100A49428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

BOOL sub_100A494C8(uint64_t a1)
{
  char *v2;
  const std::string::value_type *v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  NSObject *v7;
  void **v8;
  _BOOL4 v9;
  void **v10;
  _BOOL4 v11;
  uint64_t v13;
  void **v14;
  _BOOL4 v15;
  const char *v16;
  std::string *v17;
  void *__p[2];
  int64_t v19;
  std::string v20;
  _BYTE __dst[24];

  v2 = (char *)sub_1001FD94C();
  sub_1000B7884(v2, (uint64_t)&v20);
  if (*(char *)(a1 + 423) < 0)
  {
    sub_100115CE4(__dst, *(void **)(a1 + 400), *(_QWORD *)(a1 + 408));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 400);
    *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 416);
  }
  if (__dst[23] >= 0)
    v3 = __dst;
  else
    v3 = *(const std::string::value_type **)__dst;
  if (__dst[23] >= 0)
    v4 = __dst[23];
  else
    v4 = *(_QWORD *)&__dst[8];
  v5 = std::string::append(&v20, v3, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v19 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (v19 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    v9 = sub_1000B78B0((const char *)v8);
    LODWORD(v20.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    WORD2(v20.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v20.__r_.__value_.__r.__words[1] + 6) = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#RTTMA,doesRTAvailabilityFileExist,availabilityFilePath,%{public}s,exist,%d", (uint8_t *)&v20, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v20, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v13 = qword_1022A0028;
    if (v19 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    v15 = sub_1000B78B0((const char *)v14);
    *(_DWORD *)__dst = 136446466;
    *(_QWORD *)&__dst[4] = v14;
    *(_WORD *)&__dst[12] = 1024;
    *(_DWORD *)&__dst[14] = v15;
    _os_log_send_and_compose_impl(2, 0, &v20, 1628, &_mh_execute_header, v13, 1, "#RTTMA,doesRTAvailabilityFileExist,availabilityFilePath,%{public}s,exist,%d", __dst, 18);
    v17 = (std::string *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::doesRTAvailabilityFileExist()", "%s\n", v16);
    if (v17 != &v20)
      free(v17);
  }
  if (v19 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  v11 = sub_1000B78B0((const char *)v10);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_100A49790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A497EC(uint64_t a1)
{
  NSObject *v2;
  CFAbsoluteTime Current;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[8];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#RTTMA,downloadRTAvlFile", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,downloadRTAvlFile", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::downloadRTAvlFile()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 448) = Current;
  *(double *)buf = Current + 5.0;
  return sub_100605798((double *)(a1 + 64), (double *)buf);
}

BOOL sub_100A499A0(uint64_t a1)
{
  char *v2;
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  std::string *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL8 v18;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double Current;
  NSObject *v30;
  unint64_t v31;
  void **v32;
  const char *v33;
  std::string *v34;
  const char *v35;
  const char *v36;
  std::string *v37;
  const char *v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41[2];
  uint64_t v42;
  char v43;
  std::string v44;
  void *v45[2];
  int64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  __int16 v57;
  double v58;
  void *__p[2];
  uint64_t v60;
  uint64_t v61;
  char v62;
  std::string v63[68];

  v48 = 0;
  v47 = 0;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0;
  v2 = (char *)sub_1001FD94C();
  sub_1000B7884(v2, (uint64_t)v63);
  if (*(char *)(a1 + 423) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 400), *(_QWORD *)(a1 + 408));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 400);
    v60 = *(_QWORD *)(a1 + 416);
  }
  if (v60 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v60 >= 0)
    v4 = HIBYTE(v60);
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append(v63, (const std::string::value_type *)v3, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v46 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)v45 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v60) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v63[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63[0].__r_.__value_.__l.__data_);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = v45;
    if (v46 < 0)
      v8 = (void **)v45[0];
    LODWORD(v63[0].__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v63[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,availabilityFilePath,%{public}s", (uint8_t *)v63, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v63, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v32 = v45;
    if (v46 < 0)
      v32 = (void **)v45[0];
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = v32;
    _os_log_send_and_compose_impl(2, 0, v63, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,isRTAvailabilityFileValid,availabilityFilePath,%{public}s", __p, 12);
    v34 = (std::string *)v33;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", v33);
    if (v34 != v63)
      free(v34);
  }
  sub_100166054(__p);
  memset(&v44, 0, sizeof(v44));
  if (!sub_10005DE60((uint64_t)v45, &v44))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(v63[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,error,failed to create/open protobuf input stream", (uint8_t *)v63, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_52;
    bzero(v63, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v41[0]) = 0;
    LODWORD(v40) = 2;
    _os_log_send_and_compose_impl(2, 0, v63, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,isRTAvailabilityFileValid,error,failed to create/open protobuf input stream", v41, v40);
    v13 = (std::string *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", v12);
    goto LABEL_105;
  }
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString(__p, &v44) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(v63[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,error,cannot ParseFromString()", (uint8_t *)v63, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_52;
    bzero(v63, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v41[0]) = 0;
    LODWORD(v40) = 2;
    _os_log_send_and_compose_impl(2, 0, v63, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,isRTAvailabilityFileValid,error,cannot ParseFromString()", v41, v40);
    v13 = (std::string *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", v15);
    goto LABEL_105;
  }
  if ((v62 & 2) == 0)
    goto LABEL_47;
  v9 = v61;
  if (!v61)
  {
    v10 = *(_QWORD *)(qword_102313BA0 + 40);
    if ((*(_BYTE *)(v10 + 493) & 2) != 0)
      goto LABEL_44;
LABEL_47:
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v17 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(v63[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,No AVL data", (uint8_t *)v63, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_52;
    bzero(v63, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v41[0]) = 0;
    LODWORD(v40) = 2;
    _os_log_send_and_compose_impl(2, 0, v63, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,isRTAvailabilityFileValid,No AVL data", v41, v40);
    v13 = (std::string *)v35;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", v35);
LABEL_105:
    if (v13 != v63)
      free(v13);
LABEL_52:
    v18 = 0;
    goto LABEL_53;
  }
  v10 = v61;
  if ((*(_BYTE *)(v61 + 493) & 2) == 0)
    goto LABEL_47;
LABEL_44:
  v16 = *(_QWORD *)(v10 + 336);
  if (!v16)
    v16 = *(_QWORD *)(qword_102310D28 + 336);
  if ((*(_BYTE *)(v16 + 20) & 1) == 0)
    goto LABEL_47;
  if (!v61)
    v9 = *(_QWORD *)(qword_102313BA0 + 40);
  v20 = *(_QWORD *)(v9 + 336);
  if (!v20)
    v20 = *(_QWORD *)(qword_102310D28 + 336);
  v21 = *(_QWORD *)(v20 + 8);
  if (!v21)
    v21 = *(_QWORD *)(qword_102310A20 + 8);
  sub_1006614D0((uint64_t)v41, v21);
  if ((v43 & 2) != 0)
  {
    v23 = v42;
    if (v42)
    {
      v24 = *(_DWORD *)(v42 + 48);
      v25 = v42;
      if ((v24 & 1) == 0)
      {
LABEL_85:
        if ((v24 & 4) == 0)
        {
LABEL_87:
          Current = CFAbsoluteTimeGetCurrent();
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          v30 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            LODWORD(v63[0].__r_.__value_.__l.__data_) = 134349568;
            *(std::string::size_type *)((char *)v63[0].__r_.__value_.__r.__words + 4) = v49;
            WORD2(v63[0].__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&v63[0].__r_.__value_.__r.__words[1] + 6) = DWORD2(v49);
            WORD1(v63[0].__r_.__value_.__r.__words[2]) = 2050;
            *(double *)((char *)&v63[0].__r_.__value_.__r.__words[2] + 4) = Current;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,timestamp_s,%{public}.3lf,expirationAge_s,%{public}d,curTime,%{public}.3lf", (uint8_t *)v63, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v63, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102166398);
            v53 = 134349568;
            v54 = v49;
            v55 = 1026;
            v56 = DWORD2(v49);
            v57 = 2050;
            v58 = Current;
            LODWORD(v40) = 28;
            _os_log_send_and_compose_impl(2, 0, v63, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,isRTAvailabilityFileValid,timestamp_s,%{public}.3lf,expirationAge_s,%{public}d,curTime,%{public}.3lf", &v53, v40);
            v39 = (std::string *)v38;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", v38);
            if (v39 != v63)
              free(v39);
          }
          LODWORD(v31) = DWORD2(v49);
          v18 = *(double *)&v49 + (double)v31 > Current;
          goto LABEL_93;
        }
LABEL_86:
        DWORD2(v49) = *(_DWORD *)(v23 + 20);
        goto LABEL_87;
      }
    }
    else
    {
      v25 = *(_QWORD *)(qword_102310A58 + 16);
      if ((*(_BYTE *)(v25 + 48) & 1) == 0)
        goto LABEL_94;
    }
    v26 = *(_QWORD *)(v25 + 8);
    if (!v26)
      v26 = *(_QWORD *)(qword_102310A38 + 8);
    if ((*(_BYTE *)(v26 + 20) & 1) != 0)
    {
      v27 = v42;
      if (!v42)
        v27 = *(_QWORD *)(qword_102310A58 + 16);
      v28 = *(_QWORD *)(v27 + 8);
      if (!v28)
        v28 = *(_QWORD *)(qword_102310A38 + 8);
      *(_QWORD *)&v49 = *(_QWORD *)(v28 + 8);
    }
    if (v42)
    {
      v24 = *(_DWORD *)(v42 + 48);
      goto LABEL_85;
    }
LABEL_94:
    v23 = *(_QWORD *)(qword_102310A58 + 16);
    if ((*(_BYTE *)(v23 + 48) & 4) == 0)
      goto LABEL_87;
    goto LABEL_86;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v22 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LOWORD(v63[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,No SepcificHeader", (uint8_t *)v63, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v63, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v53) = 0;
    LODWORD(v40) = 2;
    _os_log_send_and_compose_impl(2, 0, v63, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,isRTAvailabilityFileValid,No SepcificHeader", &v53, v40);
    v37 = (std::string *)v36;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", v36);
    if (v37 != v63)
      free(v37);
  }
  v18 = 0;
LABEL_93:
  sub_100661570(v41);
LABEL_53:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  sub_100166004(__p);
  if (SHIBYTE(v46) < 0)
    operator delete(v45[0]);
  v63[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  sub_100756E08((void ***)v63);
  return v18;
}

void sub_100A4A434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  sub_100661570(&a11);
  if (a23 < 0)
    operator delete(__p);
  sub_100166004(&a43);
  if (a29 < 0)
    operator delete(a24);
  a54 = &a36;
  sub_100756E08((void ***)&a54);
  _Unwind_Resume(a1);
}

BOOL sub_100A4A4EC(uint64_t a1, int *a2)
{
  char *v4;
  void **v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t *v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  std::string *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL8 v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  std::string *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  int v34;
  NSObject *v35;
  const char *v36;
  std::string *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  std::string::size_type v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  NSObject *v55;
  unint64_t v56;
  NSObject *v57;
  unsigned int v58;
  uint64_t v59;
  std::string::size_type v60;
  std::string::size_type v61;
  char *v62;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  NSObject *v73;
  std::string::size_type *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  std::string::size_type *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::string::size_type v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  char *v95;
  char **v96;
  char *v97;
  void **v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  const char *v110;
  std::string *v111;
  NSObject *v112;
  void **v113;
  const char *v114;
  std::string *v115;
  const char *v116;
  const char *v117;
  std::string *v118;
  const char *v119;
  std::string *v120;
  int v121;
  int v122;
  const char *v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  const char *v132;
  std::string *v133;
  const char *v134;
  std::string *v135;
  uint64_t v136;
  _BOOL4 v137;
  uint64_t v138;
  uint64_t *v139;
  int v140;
  unsigned int v141;
  std::string::size_type v142;
  int *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  char v149;
  std::string v150;
  void *v151[2];
  int64_t v152;
  int v153;
  _BYTE v154[20];
  char *v155;
  _BYTE v156[10];
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  int v161;
  _BYTE v162[20];
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  void *__p[2];
  uint64_t v170;
  uint64_t v171;
  char v172;
  std::string v173;
  char *v174;
  _BYTE v175[10];
  __int16 v176;
  int v177;
  __int16 v178;
  int v179;

  v4 = (char *)sub_1001FD94C();
  sub_1000B7884(v4, (uint64_t)&v173);
  if (*(char *)(a1 + 423) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 400), *(_QWORD *)(a1 + 408));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 400);
    v170 = *(_QWORD *)(a1 + 416);
  }
  if (v170 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (v170 >= 0)
    v6 = HIBYTE(v170);
  else
    v6 = (std::string::size_type)__p[1];
  v7 = std::string::append(&v173, (const std::string::value_type *)v5, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v152 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)v151 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v170) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  v9 = &qword_1022A0000;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v10 = &qword_1022A0000;
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v12 = v151;
    if (v152 < 0)
      v12 = (void **)v151[0];
    LODWORD(v173.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,availabilityFilePath,%{public}s", (uint8_t *)&v173, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v173, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v113 = v151;
    if (v152 < 0)
      v113 = (void **)v151[0];
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = v113;
    _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,readRTAvlFileContent,availabilityFilePath,%{public}s", __p, 12);
    v115 = (std::string *)v114;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v114);
    if (v115 != &v173)
      free(v115);
  }
  sub_100166054(__p);
  memset(&v150, 0, sizeof(v150));
  if (!sub_10005DE60((uint64_t)v151, &v150))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(v173.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,error,failed to create/open protobuf input stream", (uint8_t *)&v173, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_52;
    bzero(&v173, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v144) = 0;
    LODWORD(v136) = 2;
    _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,readRTAvlFileContent,error,failed to create/open protobuf input stream", &v144, v136);
    v17 = (std::string *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v16);
    goto LABEL_225;
  }
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString(__p, &v150) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(v173.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,error,cannot ParseFromString()", (uint8_t *)&v173, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_52;
    bzero(&v173, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v144) = 0;
    LODWORD(v136) = 2;
    _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,readRTAvlFileContent,error,cannot ParseFromString()", &v144, v136);
    v17 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v19);
    goto LABEL_225;
  }
  if ((v172 & 2) == 0)
    goto LABEL_47;
  v13 = v171;
  if (!v171)
  {
    v14 = *(_QWORD *)(qword_102313BA0 + 40);
    if ((*(_BYTE *)(v14 + 493) & 2) != 0)
      goto LABEL_44;
LABEL_47:
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(v173.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,readRTAvlFileContent,AVL data not found", (uint8_t *)&v173, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_52;
    bzero(&v173, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v144) = 0;
    LODWORD(v136) = 2;
    _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,readRTAvlFileContent,AVL data not found", &v144, v136);
    v17 = (std::string *)v116;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v116);
LABEL_225:
    if (v17 != &v173)
      free(v17);
LABEL_52:
    v22 = 0;
    goto LABEL_53;
  }
  v14 = v171;
  if ((*(_BYTE *)(v171 + 493) & 2) == 0)
    goto LABEL_47;
LABEL_44:
  v20 = *(_QWORD *)(v14 + 336);
  if (!v20)
    v20 = *(_QWORD *)(qword_102310D28 + 336);
  if ((*(_BYTE *)(v20 + 20) & 1) == 0)
    goto LABEL_47;
  if (!v171)
    v13 = *(_QWORD *)(qword_102313BA0 + 40);
  v24 = *(_QWORD *)(v13 + 336);
  if (!v24)
    v24 = *(_QWORD *)(qword_102310D28 + 336);
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
    v25 = *(_QWORD *)(qword_102310A20 + 8);
  sub_1006614D0((uint64_t)&v144, v25);
  v143 = a2;
  if ((v149 & 1) != 0)
  {
    v29 = v145;
    if (v145)
    {
      v30 = *(_DWORD *)(v145 + 20);
      if ((v30 & 1) != 0)
      {
        *a2 = *(_DWORD *)(v145 + 8);
        v30 = *(_DWORD *)(v29 + 20);
      }
    }
    else
    {
      v31 = *(_QWORD *)(qword_102310A58 + 8);
      if ((*(_BYTE *)(v31 + 20) & 1) != 0)
        *a2 = *(_DWORD *)(v31 + 8);
      v29 = *(_QWORD *)(qword_102310A58 + 8);
      LOBYTE(v30) = *(_BYTE *)(v29 + 20);
    }
    if ((v30 & 2) != 0)
      a2[1] = *(_DWORD *)(v29 + 12);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v32 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v33 = *a2;
      v34 = a2[1];
      LODWORD(v173.__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(v173.__r_.__value_.__r.__words[0]) = v33;
      LOWORD(v173.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v173.__r_.__value_.__r.__words[1] + 2) = v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,signature,%{public}u,sectionId,%{public}u", (uint8_t *)&v173, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v173, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v121 = *a2;
      v122 = a2[1];
      v161 = 67240448;
      *(_DWORD *)v162 = v121;
      *(_WORD *)&v162[4] = 1026;
      *(_DWORD *)&v162[6] = v122;
      LODWORD(v136) = 14;
      _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,readRTAvlFileContent,signature,%{public}u,sectionId,%{public}u", &v161, v136);
      v28 = (std::string *)v123;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v123);
      goto LABEL_240;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v26 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(v173.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,readRTAvlFileContent,No CommonHeader", (uint8_t *)&v173, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v173, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      LOWORD(v161) = 0;
      LODWORD(v136) = 2;
      _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,readRTAvlFileContent,No CommonHeader", &v161, v136);
      v28 = (std::string *)v27;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v27);
LABEL_240:
      if (v28 != &v173)
        free(v28);
    }
  }
  if ((v149 & 2) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v35 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(v173.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,No SepcificHeader", (uint8_t *)&v173, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v173, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      LOWORD(v161) = 0;
      LODWORD(v136) = 2;
      _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,readRTAvlFileContent,No SepcificHeader", &v161, v136);
      v37 = (std::string *)v36;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v36);
      if (v37 != &v173)
        free(v37);
    }
    goto LABEL_119;
  }
  v38 = v146;
  if (!v146)
    v38 = *(_QWORD *)(qword_102310A58 + 16);
  sub_10065F6FC((uint64_t)&v161, v38);
  v39 = v168;
  if ((v168 & 2) != 0)
    *((_BYTE *)a2 + 8) = v162[12];
  if ((v39 & 1) != 0)
  {
    v40 = *(_QWORD *)&v162[4];
    if (!*(_QWORD *)&v162[4])
      v40 = *(_QWORD *)(qword_102310A38 + 8);
    if ((*(_BYTE *)(v40 + 20) & 1) != 0)
      *((_QWORD *)a2 + 2) = *(_QWORD *)(v40 + 8);
  }
  if ((v39 & 4) != 0)
  {
    a2[6] = *(_DWORD *)&v162[16];
    if ((v39 & 0x10) == 0)
    {
LABEL_108:
      if ((v39 & 0x20) == 0)
        goto LABEL_109;
      goto LABEL_212;
    }
  }
  else if ((v39 & 0x10) == 0)
  {
    goto LABEL_108;
  }
  a2[7] = v164;
  if ((v39 & 0x20) == 0)
  {
LABEL_109:
    if ((v39 & 0x40) == 0)
      goto LABEL_110;
    goto LABEL_213;
  }
LABEL_212:
  a2[8] = v165;
  if ((v39 & 0x40) == 0)
  {
LABEL_110:
    if ((v39 & 0x80) == 0)
      goto LABEL_111;
LABEL_214:
    a2[10] = v167;
    if ((v39 & 8) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
LABEL_213:
  a2[9] = v166;
  if (v39 < 0)
    goto LABEL_214;
LABEL_111:
  if ((v39 & 8) != 0)
LABEL_112:
    a2[11] = v163;
LABEL_113:
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v41 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v42 = *((unsigned __int8 *)a2 + 8);
    v43 = *((_QWORD *)a2 + 2);
    v44 = a2[6];
    v45 = a2[7];
    v46 = a2[8];
    v47 = a2[9];
    v48 = a2[10];
    v49 = a2[11];
    LODWORD(v173.__r_.__value_.__l.__data_) = 67241984;
    HIDWORD(v173.__r_.__value_.__r.__words[0]) = v42;
    LOWORD(v173.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&v173.__r_.__value_.__r.__words[1] + 2) = v43;
    WORD1(v173.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v173.__r_.__value_.__r.__words[2]) = v44;
    LOWORD(v174) = 1026;
    *(_DWORD *)((char *)&v174 + 2) = v45;
    HIWORD(v174) = 1026;
    *(_DWORD *)v175 = v46;
    *(_WORD *)&v175[4] = 1026;
    *(_DWORD *)&v175[6] = v47;
    v176 = 1026;
    v177 = v48;
    v178 = 1026;
    v179 = v49;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,version,%{public}d,timestamp_s,%{public}.3lf,expirationAge_s,%{public}d,numberOfAvailableTiles,%{public}d,numberOfAvailableRegions,%{public}d,numberOfBitsForIndex,%{public}d,numberOfBitsForIODNum,%{public}d,zoomLevel,%{public}d", (uint8_t *)&v173, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v173, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v124 = *((unsigned __int8 *)a2 + 8);
    v125 = *((_QWORD *)a2 + 2);
    v126 = a2[6];
    v127 = a2[7];
    v128 = a2[8];
    v129 = a2[9];
    v130 = a2[10];
    v131 = a2[11];
    v153 = 67241984;
    *(_DWORD *)v154 = v124;
    *(_WORD *)&v154[4] = 2050;
    *(_QWORD *)&v154[6] = v125;
    *(_WORD *)&v154[14] = 1026;
    *(_DWORD *)&v154[16] = v126;
    LOWORD(v155) = 1026;
    *(_DWORD *)((char *)&v155 + 2) = v127;
    HIWORD(v155) = 1026;
    *(_DWORD *)v156 = v128;
    *(_WORD *)&v156[4] = 1026;
    *(_DWORD *)&v156[6] = v129;
    v157 = 1026;
    v158 = v130;
    v159 = 1026;
    v160 = v131;
    LODWORD(v136) = 54;
    _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,readRTAvlFileContent,version,%{public}d,timestamp_s,%{public}.3lf,expirationAge_s,%{public}d,numberOfAvailableTiles,%{public}d,numberOfAvailableRegions,%{public}d,numberOfBitsForIndex,%{public}d,numberOfBitsForIODNum,%{public}d,zoomLevel,%{public}d", &v153, v136);
    v133 = (std::string *)v132;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v132);
    if (v133 != &v173)
      free(v133);
  }
  sub_10065F750((wireless_diagnostics::google::protobuf::MessageLite *)&v161);
LABEL_119:
  v50 = a2[9];
  if (v50)
  {
    v51 = 0;
    v52 = a2[9];
    do
    {
      v51 = (2 * v51) | 1;
      --v52;
    }
    while (v52);
  }
  else
  {
    v51 = 0;
  }
  v53 = a2[10];
  if (v50 >= v53 + v50)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    do
    {
      v54 = (2 * v54) | 1;
      --v53;
    }
    while (v53);
  }
  v142 = v54 << v50;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v55 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(v173.__r_.__value_.__l.__data_) = 134349312;
    *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 4) = v51;
    WORD2(v173.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&v173.__r_.__value_.__r.__words[1] + 6) = v142;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,tileIDMask,%{public}llu,tileIDVersion,%{public}llu", (uint8_t *)&v173, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v173, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v161 = 134349312;
    *(_QWORD *)v162 = v51;
    *(_WORD *)&v162[8] = 2050;
    *(_QWORD *)&v162[10] = v142;
    LODWORD(v136) = 22;
    _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,readRTAvlFileContent,tileIDMask,%{public}llu,tileIDVersion,%{public}llu", &v161, v136);
    v118 = (std::string *)v117;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v117);
    if (v118 != &v173)
      free(v118);
    v9 = &qword_1022A0000;
  }
  v56 = v148;
  if (v9[4] != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v57 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(v173.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(v173.__r_.__value_.__r.__words[0]) = v56;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,lenOfRegions,%{public}d", (uint8_t *)&v173, 8u);
  }
  v140 = v56;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v173, 0x65CuLL);
    if (v9[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v161 = 67240192;
    *(_DWORD *)v162 = v56;
    LODWORD(v136) = 8;
    _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,readRTAvlFileContent,lenOfRegions,%{public}d", &v161, v136);
    v120 = (std::string *)v119;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v119);
    if (v120 != &v173)
      free(v120);
    v9 = &qword_1022A0000;
  }
  v137 = v56 != 0;
  if ((_DWORD)v56)
  {
    v139 = (uint64_t *)(a2 + 12);
    sub_100A4BE6C((uint64_t *)a2 + 6, v56);
    v58 = 0;
    v138 = (uint64_t)(a2 + 16);
    while (1)
    {
      if ((int)v148 <= (int)v58)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(&v173, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v59 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(&v173, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v153, v59);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v173);
      }
      sub_100660C8C((uint64_t)&v161, *(_QWORD *)(v147 + 8 * (int)v58));
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      if ((v167 & 1) == 0)
        goto LABEL_159;
      v64 = *(_QWORD *)&v162[4];
      v65 = *(_QWORD *)&v162[4];
      if (!*(_QWORD *)&v162[4])
        v65 = *(_QWORD *)(qword_102310A50 + 8);
      v66 = *(_QWORD *)(v65 + 8);
      if (!v66)
        v66 = *(_QWORD *)(qword_102310A48 + 8);
      v67 = *(_QWORD *)&v162[4];
      if (!*(_QWORD *)&v162[4])
        v67 = *(_QWORD *)(qword_102310A50 + 8);
      v68 = *(_QWORD *)(v67 + 8);
      if (!v68)
        v68 = *(_QWORD *)(qword_102310A48 + 8);
      v69 = *(_QWORD *)&v162[4];
      if (!*(_QWORD *)&v162[4])
        v69 = *(_QWORD *)(qword_102310A50 + 8);
      v70 = *(_QWORD *)(v69 + 16);
      if (v70)
      {
        if (!*(_QWORD *)&v162[4])
          goto LABEL_199;
      }
      else
      {
        v70 = *(_QWORD *)(qword_102310A48 + 16);
        if (!*(_QWORD *)&v162[4])
LABEL_199:
          v64 = *(_QWORD *)(qword_102310A50 + 8);
      }
      v71 = *(_QWORD *)(v64 + 16);
      if (!v71)
        v71 = *(_QWORD *)(qword_102310A48 + 16);
      v60 = *(_QWORD *)(v66 + 8);
      v61 = *(_QWORD *)(v68 + 16);
      v62 = *(char **)(v70 + 8);
      v63 = *(_QWORD *)(v71 + 16);
LABEL_159:
      v72 = v163;
      if (v9[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v73 = v10[5];
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        LODWORD(v173.__r_.__value_.__l.__data_) = 134284545;
        *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 4) = v60;
        WORD2(v173.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&v173.__r_.__value_.__r.__words[1] + 6) = v61;
        HIWORD(v173.__r_.__value_.__r.__words[2]) = 2049;
        v174 = v62;
        *(_WORD *)v175 = 2049;
        *(_QWORD *)&v175[2] = v63;
        v176 = 1026;
        v177 = v72;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,minLat_deg,%{private}.3lf,minLon_deg,%{private}.3lf,maxLat_deg,%{private}.3lf,maxLon_deg,%{private}.3lf,numberOfTiles,%{public}d", (uint8_t *)&v173, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v173, 0x65CuLL);
        if (v9[4] != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v109 = v10[5];
        v153 = 134284545;
        *(_QWORD *)v154 = v60;
        *(_WORD *)&v154[8] = 2049;
        *(_QWORD *)&v154[10] = v61;
        *(_WORD *)&v154[18] = 2049;
        v155 = v62;
        *(_WORD *)v156 = 2049;
        *(_QWORD *)&v156[2] = v63;
        v157 = 1026;
        v158 = v72;
        LODWORD(v136) = 48;
        _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, v109, 1, "#RTTMA,readRTAvlFileContent,minLat_deg,%{private}.3lf,minLon_deg,%{private}.3lf,maxLat_deg,%{private}.3lf,maxLon_deg,%{private}.3lf,numberOfTiles,%{public}d", &v153, v136);
        v111 = (std::string *)v110;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v110);
        if (v111 != &v173)
          free(v111);
      }
      v74 = (std::string::size_type *)*((_QWORD *)a2 + 7);
      v75 = *((_QWORD *)a2 + 8);
      if ((unint64_t)v74 >= v75)
      {
        v77 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v74 - *v139) >> 3);
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) > 0x492492492492492)
          sub_100259694();
        v79 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v75 - *v139) >> 3);
        if (2 * v79 > v78)
          v78 = 2 * v79;
        if (v79 >= 0x249249249249249)
          v80 = 0x492492492492492;
        else
          v80 = v78;
        *(_QWORD *)v175 = v138;
        v81 = (char *)sub_10025B800(v138, v80);
        v82 = (std::string::size_type *)&v81[56 * v77];
        v173.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
        v173.__r_.__value_.__l.__size_ = (std::string::size_type)v82;
        v174 = &v81[56 * v83];
        *v82 = v60;
        v82[1] = v61;
        v82[2] = (std::string::size_type)v62;
        v82[3] = v63;
        v82[5] = 0;
        v82[6] = 0;
        v82[4] = 0;
        v173.__r_.__value_.__r.__words[2] = (std::string::size_type)(v82 + 7);
        sub_100A50464(v139, &v173);
        v76 = (_QWORD *)*((_QWORD *)a2 + 7);
        sub_100757254((uint64_t)&v173);
      }
      else
      {
        *v74 = v60;
        v74[1] = v61;
        v74[2] = (std::string::size_type)v62;
        v74[3] = v63;
        v76 = v74 + 7;
        v74[5] = 0;
        v74[6] = 0;
        v74[4] = 0;
      }
      *((_QWORD *)a2 + 7) = v76;
      sub_100A4BF28((char **)(*((_QWORD *)a2 + 6) + 56 * v58 + 32), v72);
      v141 = v58;
      if ((_DWORD)v72)
      {
        v84 = 0;
        do
        {
          v85 = v163;
          if ((int)v163 <= v84)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(&v173, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
            v86 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(&v173, "CHECK failed: (index) < (size()): ");
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v153, v86);
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v173);
            v85 = v163;
          }
          v87 = *(_QWORD *)(*(_QWORD *)&v162[12] + 8 * v84);
          if (v85 <= v84)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(&v173, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
            v88 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(&v173, "CHECK failed: (index) < (size()): ");
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v153, v88);
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v173);
          }
          v89 = v87 & v51;
          v90 = (*(_QWORD *)(*(_QWORD *)&v162[12] + 8 * v84) & v142) >> v143[9];
          v91 = *((_QWORD *)v143 + 6) + 56 * v141;
          v94 = *(_QWORD *)(v91 + 48);
          v93 = (_QWORD *)(v91 + 48);
          v92 = v94;
          v96 = (char **)(v93 - 1);
          v95 = (char *)*(v93 - 1);
          if ((unint64_t)v95 >= v94)
          {
            v98 = (void **)(v93 - 2);
            v99 = (char *)*(v93 - 2);
            v100 = (v95 - v99) >> 4;
            v101 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 60)
              sub_100259694();
            v102 = v92 - (_QWORD)v99;
            if (v102 >> 3 > v101)
              v101 = v102 >> 3;
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
              v103 = 0xFFFFFFFFFFFFFFFLL;
            else
              v103 = v101;
            if (v103)
            {
              v104 = (char *)sub_10028E224((uint64_t)v93, v103);
              v95 = *v96;
              v99 = (char *)*v98;
            }
            else
            {
              v104 = 0;
            }
            v105 = &v104[16 * v100];
            *(_QWORD *)v105 = v89;
            *((_DWORD *)v105 + 2) = v90;
            v106 = v105;
            if (v95 != v99)
            {
              do
              {
                v107 = *((_QWORD *)v95 - 2);
                v95 -= 16;
                v108 = *((_DWORD *)v95 + 2);
                *((_QWORD *)v106 - 2) = v107;
                v106 -= 16;
                *((_DWORD *)v106 + 2) = v108;
              }
              while (v95 != v99);
              v99 = (char *)*v98;
            }
            *v98 = v106;
            v97 = v105 + 16;
            *v96 = v105 + 16;
            *v93 = &v104[16 * v103];
            if (v99)
              operator delete(v99);
          }
          else
          {
            *(_QWORD *)v95 = v89;
            *((_DWORD *)v95 + 2) = v90;
            v97 = v95 + 16;
          }
          *v96 = v97;
          ++v84;
        }
        while (v84 != (_DWORD)v72);
      }
      sub_100660CFC((wireless_diagnostics::google::protobuf::MessageLite *)&v161);
      v58 = v141 + 1;
      v10 = &qword_1022A0000;
      v9 = &qword_1022A0000;
      a2 = v143;
      if (v141 + 1 == v140)
        goto LABEL_209;
    }
  }
  if (v9[4] != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v112 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LOWORD(v173.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,there is no valid region", (uint8_t *)&v173, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v173, 0x65CuLL);
    if (v9[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v161) = 0;
    LODWORD(v136) = 2;
    _os_log_send_and_compose_impl(2, 0, &v173, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,readRTAvlFileContent,there is no valid region", &v161, v136);
    v135 = (std::string *)v134;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", v134);
    if (v135 != &v173)
      free(v135);
  }
LABEL_209:
  sub_100661570(&v144);
  v22 = v137;
LABEL_53:
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  sub_100166004(__p);
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  return v22;
}

void sub_100A4BD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  sub_100661570(&a21);
  if (a33 < 0)
    operator delete(__p);
  sub_100166004(&a57);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(a1);
}

uint64_t sub_100A4BE6C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      sub_100259694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10025B800(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    sub_100A50464(a1, v7);
    return sub_100757254((uint64_t)v7);
  }
  return result;
}

void sub_100A4BF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100757254((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A4BF28(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_100259694();
    v5 = a1[1] - *a1;
    v6 = (char *)sub_10028E224(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 2);
        v10 -= 16;
        v14 = *((_DWORD *)v10 + 2);
        *((_QWORD *)v12 - 2) = v13;
        v12 -= 16;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_100A4BFC0(uint64_t a1, double *a2, double *a3)
{
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  const char *v8;
  double v9;
  double v10;
  NSObject *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  NSObject *v15;
  double v16;
  _BOOL4 v17;
  double v18;
  NSObject *v19;
  double v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint8_t *v24;
  __int128 v25;
  uint8_t buf[4];
  _QWORD v27[204];

  if (!sub_10011CE64(*a2, *a3))
  {
    v9 = *a2;
    if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (v10 = *a3, (*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v11 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        v12 = (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        v13 = (*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        *(_DWORD *)buf = 67240448;
        LODWORD(v27[0]) = v12;
        WORD2(v27[0]) = 1026;
        *(_DWORD *)((char *)v27 + 6) = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,is latitude finite,%{public}d,is longitude finite,%{public}d", buf, 0xEu);
      }
      v14 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v14)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v22 = (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        v23 = (*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        LODWORD(v25) = 67240448;
        DWORD1(v25) = v22;
        WORD4(v25) = 1026;
        *(_DWORD *)((char *)&v25 + 10) = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#RTTMA,#Error,is latitude finite,%{public}d,is longitude finite,%{public}d", &v25, 14, v25);
        goto LABEL_40;
      }
      return result;
    }
    if (v9 < -90.0 || v9 > 90.0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v15 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        v16 = *a2;
        *(_DWORD *)buf = 134283521;
        *(double *)v27 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,invalid range,lat,%{private}.7lf", buf, 0xCu);
      }
      v17 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v17)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 == -1)
        goto LABEL_29;
    }
    else
    {
      if (v10 >= -180.0 && v10 <= 180.0)
        return 1;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v19 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        v20 = *a2;
        *(_DWORD *)buf = 134283521;
        *(double *)v27 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,invalid range,lat,%{private}.7lf", buf, 0xCu);
      }
      v21 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v21)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 == -1)
      {
LABEL_29:
        v18 = *a2;
        LODWORD(v25) = 134283521;
        *(double *)((char *)&v25 + 4) = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#RTTMA,#Error,invalid range,lat,%{private}.7lf", &v25, 12, v25);
LABEL_40:
        v24 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLRayTracingTileAvailabilityManager::isLatLonValid(const double &, const double &)", "%s\n", v8);
        if (v24 != buf)
          free(v24);
        return 0;
      }
    }
    dispatch_once(&qword_1022A0020, &stru_102166398);
    goto LABEL_29;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,null island", buf, 2u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v25) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#RTTMA,#Error,null island", &v25, 2, v25);
    goto LABEL_40;
  }
  return result;
}

uint64_t sub_100A4C534(uint64_t a1, double *a2, double *a3, uint64_t a4, double *a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  const char *v24;
  uint8_t *v25;
  NSObject *v26;
  _BOOL4 v27;
  uint64_t result;
  const char *v29;
  uint8_t *v30;
  __int128 v31;
  NSObject *v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  NSObject *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  const char *v52;
  uint8_t *v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  const char *v60;
  uint8_t *v61;
  uint64_t v62;
  int v63;
  double v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  uint8_t buf[4];
  double v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;

  if ((sub_100A4BFC0(a1, a2, a3) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v26 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,getRegionInfoFromLatLon,invalid location", buf, 2u);
    }
    v27 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v27)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(v63) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#RTTMA,#Error,getRegionInfoFromLatLon,invalid location", &v63, 2);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLRayTracingTileAvailabilityManager::getRegionInfoFromLatLon(const double &, const double &, const CLRayTracingTileAvailabilityInfo &, CLRayTracingTileAvailabilityRegionInfo &)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
    return 0;
  }
  v10 = *(_QWORD *)(a4 + 48);
  v9 = *(_QWORD *)(a4 + 56);
  if (v10 == v9)
    return 0;
  while (1)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v12 = *(double *)v10;
      v13 = *(_QWORD *)(v10 + 8);
      v14 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      v16 = *a2;
      v17 = *a3;
      *(_DWORD *)buf = 134284801;
      v76 = v12;
      v77 = 2049;
      v78 = v13;
      v79 = 2049;
      v80 = v14;
      v81 = 2049;
      v82 = v15;
      v83 = 2049;
      v84 = v16;
      v85 = 2049;
      v86 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#RTTMA,getRegionInfoFromLatLon,swLat,%{private}.3lf,swLon,%{private}.3lf,neLat,%{private}.3lf,neLon,%{private}.3lf,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v18 = *(double *)v10;
      v19 = *(_QWORD *)(v10 + 8);
      v20 = *(_QWORD *)(v10 + 16);
      v21 = *(_QWORD *)(v10 + 24);
      v22 = *a2;
      v23 = *a3;
      v63 = 134284801;
      v64 = v18;
      v65 = 2049;
      v66 = v19;
      v67 = 2049;
      v68 = v20;
      v69 = 2049;
      v70 = v21;
      v71 = 2049;
      v72 = v22;
      v73 = 2049;
      v74 = v23;
      LODWORD(v62) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,getRegionInfoFromLatLon,swLat,%{private}.3lf,swLon,%{private}.3lf,neLat,%{private}.3lf,neLon,%{private}.3lf,lat,%{private}.3lf,lon,%{private}.3lf", &v63, v62);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::getRegionInfoFromLatLon(const double &, const double &, const CLRayTracingTileAvailabilityInfo &, CLRayTracingTileAvailabilityRegionInfo &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    if (*a2 >= *(double *)v10
      && *a2 <= *(double *)(v10 + 16)
      && *a3 >= *(double *)(v10 + 8)
      && *a3 <= *(double *)(v10 + 24))
    {
      break;
    }
    v10 += 56;
    if (v10 == v9)
      return 0;
  }
  v31 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v10;
  *((_OWORD *)a5 + 1) = v31;
  if ((double *)v10 != a5)
    sub_100A505C4((char *)a5 + 32, *(char **)(v10 + 32), *(_QWORD *)(v10 + 40), (uint64_t)(*(_QWORD *)(v10 + 40) - *(_QWORD *)(v10 + 32)) >> 4);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v32 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v33 = *(double *)v10;
    v34 = *(_QWORD *)(v10 + 8);
    v35 = *(_QWORD *)(v10 + 16);
    v36 = *(_QWORD *)(v10 + 24);
    v37 = *a2;
    v38 = *a3;
    *(_DWORD *)buf = 134284801;
    v76 = v33;
    v77 = 2049;
    v78 = v34;
    v79 = 2049;
    v80 = v35;
    v81 = 2049;
    v82 = v36;
    v83 = 2049;
    v84 = v37;
    v85 = 2049;
    v86 = v38;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#RTTMA,getRegionInfoFromLatLon,swLat,%{private}.3lf,swLon,%{private}.3lf,neLat,%{private}.3lf,neLon,%{private}.3lf,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v46 = *(double *)v10;
    v47 = *(_QWORD *)(v10 + 8);
    v48 = *(_QWORD *)(v10 + 16);
    v49 = *(_QWORD *)(v10 + 24);
    v50 = *a2;
    v51 = *a3;
    v63 = 134284801;
    v64 = v46;
    v65 = 2049;
    v66 = v47;
    v67 = 2049;
    v68 = v48;
    v69 = 2049;
    v70 = v49;
    v71 = 2049;
    v72 = v50;
    v73 = 2049;
    v74 = v51;
    LODWORD(v62) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,getRegionInfoFromLatLon,swLat,%{private}.3lf,swLon,%{private}.3lf,neLat,%{private}.3lf,neLon,%{private}.3lf,lat,%{private}.3lf,lon,%{private}.3lf", &v63, v62);
    v53 = (uint8_t *)v52;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::getRegionInfoFromLatLon(const double &, const double &, const CLRayTracingTileAvailabilityInfo &, CLRayTracingTileAvailabilityRegionInfo &)", "%s\n", v52);
    if (v53 != buf)
      free(v53);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v39 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v40 = *a5;
    v41 = *((_QWORD *)a5 + 1);
    v42 = *((_QWORD *)a5 + 2);
    v43 = *((_QWORD *)a5 + 3);
    v44 = *a2;
    v45 = *a3;
    *(_DWORD *)buf = 134284801;
    v76 = v40;
    v77 = 2049;
    v78 = v41;
    v79 = 2049;
    v80 = v42;
    v81 = 2049;
    v82 = v43;
    v83 = 2049;
    v84 = v44;
    v85 = 2049;
    v86 = v45;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#RTTMA,getRegionInfoFromLatLon,swLat,%{private}.3lf,swLon,%{private}.3lf,neLat,%{private}.3lf,neLon,%{private}.3lf,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v54 = *a5;
    v55 = *((_QWORD *)a5 + 1);
    v56 = *((_QWORD *)a5 + 2);
    v57 = *((_QWORD *)a5 + 3);
    v58 = *a2;
    v59 = *a3;
    v63 = 134284801;
    v64 = v54;
    v65 = 2049;
    v66 = v55;
    v67 = 2049;
    v68 = v56;
    v69 = 2049;
    v70 = v57;
    v71 = 2049;
    v72 = v58;
    v73 = 2049;
    v74 = v59;
    LODWORD(v62) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,getRegionInfoFromLatLon,swLat,%{private}.3lf,swLon,%{private}.3lf,neLat,%{private}.3lf,neLon,%{private}.3lf,lat,%{private}.3lf,lon,%{private}.3lf", &v63, v62);
    v61 = (uint8_t *)v60;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::getRegionInfoFromLatLon(const double &, const double &, const CLRayTracingTileAvailabilityInfo &, CLRayTracingTileAvailabilityRegionInfo &)", "%s\n", v60);
    if (v61 != buf)
      free(v61);
  }
  return 1;
}

void sub_100A4CCA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _DWORD v25[2];
  __int16 v26;
  uint64_t v27;
  uint8_t buf[8];
  __int16 v29;
  uint64_t v30;

  v20 = 0;
  v19 = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  if (sub_100A4A4EC(a1, (int *)&v19))
  {
    v4 = *a2;
    v3 = a2[1];
    if (*a2 != v3)
    {
      do
      {
        for (i = v23; i != *((_QWORD *)&v23 + 1); i += 56)
        {
          v6 = *(_QWORD *)(i + 32);
          v7 = *(_QWORD *)(i + 40);
          if (v6 != v7)
          {
            while (*(_QWORD *)v6 != *(_QWORD *)(v4 + 24))
            {
              v6 += 16;
              if (v6 == v7)
                goto LABEL_8;
            }
            *(_DWORD *)(v4 + 40) = *(_DWORD *)(v6 + 8);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102166398);
            v8 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              v9 = *(_DWORD *)(v4 + 40);
              v10 = *(_QWORD *)(v4 + 24);
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)&buf[4] = v9;
              v29 = 2050;
              v30 = v10;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#RTTMA,getRayTracingTileAvailabilityFromTileId,tileId,%{public}u,tile.tileIndex,%{public}llu,", buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_102166398);
              v11 = *(_DWORD *)(v4 + 40);
              v12 = *(_QWORD *)(v4 + 24);
              v25[0] = 67240448;
              v25[1] = v11;
              v26 = 2050;
              v27 = v12;
              LODWORD(v18) = 18;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,getRayTracingTileAvailabilityFromTileId,tileId,%{public}u,tile.tileIndex,%{public}llu,", v25, v18);
              v14 = (uint8_t *)v13;
              sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::getRayTracingTileAvailabilityFromTileId(std::vector<CLRayTracingTileManager_Type::RayTracingTileOnDiskInfo> &)", "%s\n", v13);
              if (v14 != buf)
                free(v14);
            }
            break;
          }
LABEL_8:
          ;
        }
        v4 += 96;
      }
      while (v4 != v3);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#RTTMA,getRayTracingTileAvailabilityFromTileId,AVL file read error", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      LOWORD(v25[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#RTTMA,getRayTracingTileAvailabilityFromTileId,AVL file read error", v25, 2);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLRayTracingTileAvailabilityManager::getRayTracingTileAvailabilityFromTileId(std::vector<CLRayTracingTileManager_Type::RayTracingTileOnDiskInfo> &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  *(_QWORD *)buf = &v23;
  sub_100756E08((void ***)buf);
}

void sub_100A4D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  a27 = (void **)&a20;
  sub_100756E08(&a27);
  _Unwind_Resume(a1);
}

BOOL sub_100A4D080(uint64_t a1, double *a2, double *a3, unsigned int *a4, uint64_t *a5, char *a6)
{
  NSObject *v11;
  double v12;
  double v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  char *v18;
  void **v19;
  _QWORD **v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  _QWORD **v41;
  BOOL v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  _BOOL8 v47;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  const char *v56;
  char *v57;
  const char *v58;
  char *v59;
  const char *v60;
  char *v61;
  uint64_t v62;
  _QWORD **v64;
  _QWORD *v65[2];
  _OWORD v66[2];
  void *__p[2];
  uint64_t v68;
  int v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  int v74;
  _BYTE v75[12];
  __int16 v76;
  _BYTE v77[18];
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE buf[12];
  __int16 v82;
  double v83;
  __int16 v84;
  int v85;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v12 = *a2;
    v13 = *a3;
    *(_DWORD *)buf = 134283777;
    *(double *)&buf[4] = v12;
    v82 = 2049;
    v83 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#RTTMA,isRayTracingTileAvailable,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x16u);
  }
  v14 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v14)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v52 = *(_QWORD *)a2;
    v53 = *(_QWORD *)a3;
    *(_DWORD *)v75 = 134283777;
    *(_QWORD *)&v75[4] = v52;
    v76 = 2049;
    *(_QWORD *)v77 = v53;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,isRayTracingTileAvailable,lat,%{private}.3lf,lon,%{private}.3lf", v75, 22);
    v55 = (char *)v54;
    v14 = sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  if ((sub_100A4BFC0(v14, a2, a3) & 1) != 0)
  {
    v75[8] = 0;
    *(_QWORD *)v75 = 0;
    *(_OWORD *)&v77[2] = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0;
    v15 = sub_100A4A4EC(a1, (int *)v75);
    if (v15)
    {
      v68 = 0;
      *(_OWORD *)__p = 0u;
      memset(v66, 0, sizeof(v66));
      if ((sub_100A4C534(v15, a2, a3, (uint64_t)v75, (double *)v66) & 1) != 0)
      {
        buf[0] = BYTE12(v78);
        sub_100C32FA0(a2, a3, buf);
        *(_QWORD *)a1 = v16;
        *(_BYTE *)(a1 + 8) = v17;
        *a5 = sub_100C32FCC(a1);
        sub_100C32FE8(a1, *a4, (uint64_t)&v64);
        v19 = (void **)(a1 + 16);
        v18 = *(char **)(a1 + 16);
        *(_QWORD *)(a1 + 24) = v18;
        v20 = v64;
        if (v64 == v65)
        {
          v50 = (uint64_t)v18;
        }
        else
        {
          do
          {
            v21 = sub_100C32FCC((uint64_t)(v20 + 4));
            v22 = __p[0];
            if (__p[0] != __p[1])
            {
              v23 = v21;
              while (*(_QWORD *)v22 != v21)
              {
                v22 += 4;
                if (v22 == __p[1])
                  goto LABEL_37;
              }
              v24 = v22[2];
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_102166398);
              v25 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
              {
                v26 = *a5;
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v26;
                v82 = 2050;
                v83 = *(double *)&v23;
                v84 = 1026;
                v85 = v24;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#RTTMA,isRayTracingTileAvailable,tileId,%{public}llu,tile.tileIndex,%{public}llu,version,%{public}d", buf, 0x1Cu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_102166398);
                v43 = *a5;
                v69 = 134349568;
                v70 = v43;
                v71 = 2050;
                v72 = v23;
                v73 = 1026;
                v74 = v24;
                LODWORD(v62) = 28;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,isRayTracingTileAvailable,tileId,%{public}llu,tile.tileIndex,%{public}llu,version,%{public}d", &v69, v62);
                v45 = (char *)v44;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v44);
                if (v45 != buf)
                  free(v45);
              }
              v28 = *(char **)(a1 + 24);
              v27 = *(_QWORD *)(a1 + 32);
              if ((unint64_t)v28 >= v27)
              {
                v30 = (char *)*v19;
                v31 = (v28 - (_BYTE *)*v19) >> 4;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 60)
                  sub_100259694();
                v33 = v27 - (_QWORD)v30;
                if (v33 >> 3 > v32)
                  v32 = v33 >> 3;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
                  v34 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)sub_10028E224(a1 + 32, v34);
                  v30 = *(char **)(a1 + 16);
                  v28 = *(char **)(a1 + 24);
                }
                else
                {
                  v35 = 0;
                }
                v36 = &v35[16 * v31];
                *(_QWORD *)v36 = v23;
                *((_DWORD *)v36 + 2) = v24;
                v37 = v36;
                if (v28 != v30)
                {
                  do
                  {
                    v38 = *((_QWORD *)v28 - 2);
                    v28 -= 16;
                    v39 = *((_DWORD *)v28 + 2);
                    *((_QWORD *)v37 - 2) = v38;
                    v37 -= 16;
                    *((_DWORD *)v37 + 2) = v39;
                  }
                  while (v28 != v30);
                  v30 = (char *)*v19;
                }
                v29 = v36 + 16;
                *(_QWORD *)(a1 + 16) = v37;
                *(_QWORD *)(a1 + 24) = v36 + 16;
                *(_QWORD *)(a1 + 32) = &v35[16 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_QWORD *)v28 = v23;
                *((_DWORD *)v28 + 2) = v24;
                v29 = v28 + 16;
              }
              *(_QWORD *)(a1 + 24) = v29;
            }
LABEL_37:
            v40 = v20[1];
            if (v40)
            {
              do
              {
                v41 = (_QWORD **)v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v41 = (_QWORD **)v20[2];
                v42 = *v41 == v20;
                v20 = v41;
              }
              while (!v42);
            }
            v20 = v41;
          }
          while (v41 != v65);
          v18 = *(char **)(a1 + 16);
          v50 = *(_QWORD *)(a1 + 24);
        }
        if (v19 != (void **)a6)
        {
          sub_100A505C4(a6, v18, v50, (v50 - (uint64_t)v18) >> 4);
          v18 = *(char **)(a1 + 16);
          v50 = *(_QWORD *)(a1 + 24);
        }
        v47 = v50 != (_QWORD)v18;
        sub_100008848((uint64_t)&v64, v65[0]);
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v49 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#RTTMA,isRayTracingTileAvailable,no valid region in AVL file", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v69) = 0;
          LODWORD(v62) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#RTTMA,isRayTracingTileAvailable,no valid region in AVL file", &v69, v62);
          v61 = (char *)v60;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v60);
          if (v61 != buf)
            free(v61);
        }
        v47 = 0;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v48 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#RTTMA,isRayTracingTileAvailable,AVL file read error", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        LOWORD(v66[0]) = 0;
        LODWORD(v62) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#RTTMA,isRayTracingTileAvailable,AVL file read error", v66, v62);
        v59 = (char *)v58;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v58);
        if (v59 != buf)
          free(v59);
      }
      v47 = 0;
    }
    *(_QWORD *)buf = &v79;
    sub_100756E08((void ***)buf);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v46 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,isRayTracingTileAvailable,invalid location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      *(_WORD *)v75 = 0;
      LODWORD(v62) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#RTTMA,#Error,isRayTracingTileAvailable,invalid location", v75, v62);
      v57 = (char *)v56;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v56);
      if (v57 != buf)
        free(v57);
    }
    return 0;
  }
  return v47;
}

void sub_100A4DA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *a41)
{
  if (__p)
    operator delete(__p);
  a41 = &a37;
  sub_100756E08((void ***)&a41);
  _Unwind_Resume(a1);
}

void sub_100A4DA84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _OWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  char v10;
  NSObject *v11;
  void **v12;
  void **v13;
  const char *v14;
  char *v15;
  std::string __p;
  void *v17[2];
  uint64_t v18;
  int v19;
  void **v20;
  _OWORD buf[102];

  sub_1001E4804(buf);
  v4 = *(_QWORD *)&buf[0];
  v5 = (_OWORD *)(a1 + 424);
  if (*(char *)(a1 + 447) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 424), *(_QWORD *)(a1 + 432));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 440);
  }
  sub_1005F0F40(v4, "CLRayTracingAVLFileNameCompressed", &__p, (uint64_t)v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = v17[1];
  if (!v9)
  {
    if (*(char *)(a1 + 447) < 0)
    {
      sub_100115CE4((_BYTE *)a2, *(void **)(a1 + 424), *(_QWORD *)(a1 + 432));
      if ((v18 & 0x8000000000000000) == 0)
        return;
    }
    else
    {
      *(_OWORD *)a2 = *v5;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 440);
      if ((v10 & 0x80) == 0)
        return;
    }
    operator delete(v17[0]);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v12 = v17;
    if (v18 < 0)
      v12 = (void **)v17[0];
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#RTTMA,getRTCompressedAvailabilityFileName defaults,fileName,%{public}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v13 = v17;
    if (v18 < 0)
      v13 = (void **)v17[0];
    v19 = 136446210;
    v20 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,getRTCompressedAvailabilityFileName defaults,fileName,%{public}s", &v19, 12);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "std::string CLRayTracingTileAvailabilityManager::getRTCompressedAvailabilityFileName() const", "%s\n", v14);
    if (v15 != (char *)buf)
      free(v15);
  }
  *(_OWORD *)a2 = *(_OWORD *)v17;
  *(_QWORD *)(a2 + 16) = v18;
}

void sub_100A4DD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100A4DDA8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[487] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 58), *((_QWORD *)result + 59));
  *(_OWORD *)a2 = *((_OWORD *)result + 29);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 60);
  return result;
}

void sub_100A4DDD4(uint64_t a1, uint64_t a2, int a3)
{
  std::mutex *v6;
  NSObject *v7;
  const char *v8;
  std::string *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  void **v15;
  NSObject *v16;
  void **v17;
  char *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  char *v28;
  void **v29;
  NSObject *v30;
  void **v31;
  void **v32;
  void **v33;
  NSObject *v34;
  void **v35;
  _BOOL4 v36;
  NSObject *v37;
  const char *v38;
  std::string *v39;
  const char *v40;
  std::string *v41;
  void **v42;
  const char *v43;
  std::string *v44;
  void **v45;
  void **v46;
  const char *v47;
  std::string *v48;
  const char *v49;
  std::string *v50;
  void **v51;
  const char *v52;
  std::string *v53;
  void **v54;
  const char *v55;
  std::string *v56;
  uint64_t v57;
  _BYTE __p[24];
  void *v59[2];
  int64_t v60;
  void *v61[2];
  char v62;
  std::string buf[68];

  v6 = (std::mutex *)(a1 + 312);
  std::mutex::lock((std::mutex *)(a1 + 312));
  if (a2)
  {
    switch(a3)
    {
      case 0:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v7 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#RTTMA,onRTAvlFileUpdated,avl download status,NONE", (uint8_t *)buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v61[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#RTTMA,onRTAvlFileUpdated,avl download status,NONE", v61, 2);
          v9 = (std::string *)v8;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
          goto LABEL_66;
        }
        break;
      case 1:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v21 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#RTTMA,onRTAvlFileUpdated,avl download status,STARTED", (uint8_t *)buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v61[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#RTTMA,onRTAvlFileUpdated,avl download status,STARTED", v61, 2);
          v41 = (std::string *)v40;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v40);
          if (v41 != buf)
            free(v41);
        }
        *(CFAbsoluteTime *)(a1 + 448) = CFAbsoluteTimeGetCurrent();
        break;
      case 2:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v12 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#RTTMA,onRTAvlFileUpdated,avl download status,COMPLETED", (uint8_t *)buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v61[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#RTTMA,onRTAvlFileUpdated,avl download status,COMPLETED", v61, 2);
          v39 = (std::string *)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
        sub_100605D40(a2, (uint64_t)v61);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v13 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v14 = v61;
          if (v62 < 0)
            v14 = (void **)v61[0];
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#RTTMA,onRTAvlFileUpdated,avl downloaded,%{private}s", (uint8_t *)buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          v42 = v61;
          if (v62 < 0)
            v42 = (void **)v61[0];
          LODWORD(v59[0]) = 136380675;
          *(void **)((char *)v59 + 4) = v42;
          LODWORD(v57) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,onRTAvlFileUpdated,avl downloaded,%{private}s", v59, v57);
          v44 = (std::string *)v43;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v43);
          if (v44 != buf)
            free(v44);
        }
        if (v62 >= 0)
          v15 = v61;
        else
          v15 = (void **)v61[0];
        if (!sub_1005169DC((const char *)v15, 4))
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          v16 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            v17 = v61;
            if (v62 < 0)
              v17 = (void **)v61[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,onRTAvlFileUpdated,Cannot set protection class for Pressure avl file,%{private}s", (uint8_t *)buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102166398);
            v51 = v61;
            if (v62 < 0)
              v51 = (void **)v61[0];
            LODWORD(v59[0]) = 136380675;
            *(void **)((char *)v59 + 4) = v51;
            LODWORD(v57) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,onRTAvlFileUpdated,Cannot set protection class for Pressure avl file,%{private}s", v59, v57);
            v53 = (std::string *)v52;
            sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v52);
            if (v53 != buf)
              free(v53);
          }
        }
        v18 = (char *)sub_1001FD94C();
        sub_1000B7884(v18, (uint64_t)buf);
        if (*(char *)(a1 + 423) < 0)
        {
          sub_100115CE4(__p, *(void **)(a1 + 400), *(_QWORD *)(a1 + 408));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(a1 + 400);
          *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 416);
        }
        if (__p[23] >= 0)
          v24 = __p;
        else
          v24 = *(const std::string::value_type **)__p;
        if (__p[23] >= 0)
          v25 = __p[23];
        else
          v25 = *(_QWORD *)&__p[8];
        v26 = std::string::append(buf, v24, v25);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v60 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)v59 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
        *(CFAbsoluteTime *)(a1 + 448) = CFAbsoluteTimeGetCurrent();
        if (v62 >= 0)
          v28 = (char *)v61;
        else
          v28 = (char *)v61[0];
        if (v60 >= 0)
          v29 = v59;
        else
          v29 = (void **)v59[0];
        sub_100513F8C(v28, (const char *)v29);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v30 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v31 = v61;
          if (v62 < 0)
            v31 = (void **)v61[0];
          v32 = v59;
          if (v60 < 0)
            v32 = (void **)v59[0];
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v32;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#RTTMA,onRTAvlFileUpdated,avl file decompressed,%{private}s,to,%{private}s", (uint8_t *)buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          v45 = v61;
          if (v62 < 0)
            v45 = (void **)v61[0];
          v46 = v59;
          if (v60 < 0)
            v46 = (void **)v59[0];
          *(_DWORD *)__p = 136380931;
          *(_QWORD *)&__p[4] = v45;
          *(_WORD *)&__p[12] = 2081;
          *(_QWORD *)&__p[14] = v46;
          LODWORD(v57) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,onRTAvlFileUpdated,avl file decompressed,%{private}s,to,%{private}s", __p, v57);
          v48 = (std::string *)v47;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v47);
          if (v48 != buf)
            free(v48);
        }
        if (v60 >= 0)
          v33 = v59;
        else
          v33 = (void **)v59[0];
        if (!sub_1005169DC((const char *)v33, 4))
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          v34 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            v35 = v59;
            if (v60 < 0)
              v35 = (void **)v59[0];
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,onRTAvlFileUpdated,Cannot set protection class for Pressure decompressed avl file,%{private}s", (uint8_t *)buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102166398);
            v54 = v59;
            if (v60 < 0)
              v54 = (void **)v59[0];
            *(_DWORD *)__p = 136380675;
            *(_QWORD *)&__p[4] = v54;
            LODWORD(v57) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,onRTAvlFileUpdated,Cannot set protection class for Pressure decompressed avl file,%{private}s", __p, v57);
            v56 = (std::string *)v55;
            sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v55);
            if (v56 != buf)
              free(v56);
          }
        }
        v36 = sub_100A499A0(a1);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v37 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v36;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#RTTMA,onRTAvlFileUpdated,is availability file valid,%{public}d", (uint8_t *)buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          *(_DWORD *)__p = 67240192;
          *(_DWORD *)&__p[4] = v36;
          LODWORD(v57) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,onRTAvlFileUpdated,is availability file valid,%{public}d", __p, v57);
          v50 = (std::string *)v49;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v49);
          if (v50 != buf)
            free(v50);
        }
        if (!v36)
          sub_100A4EEB8(a1);
        if (SHIBYTE(v60) < 0)
          operator delete(v59[0]);
        if (v62 < 0)
          operator delete(v61[0]);
        break;
      case 3:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v19 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#RTTMA,#Warning,onRTAvlFileUpdated,avl download status,FAILED", (uint8_t *)buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v61[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#RTTMA,#Warning,onRTAvlFileUpdated,avl download status,FAILED", v61, 2);
          v9 = (std::string *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v20);
          goto LABEL_66;
        }
        break;
      default:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v22 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = a3;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#RTTMA,#Warning,onRTAvlFileUpdated,avl download status,%{public}d", (uint8_t *)buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LODWORD(v61[0]) = 67240192;
          HIDWORD(v61[0]) = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#RTTMA,#Warning,onRTAvlFileUpdated,avl download status,%{public}d", v61, 8);
          v9 = (std::string *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v23);
          goto LABEL_66;
        }
        break;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,onRTAvlFileUpdated,null pointer", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      LOWORD(v61[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#RTTMA,#Error,onRTAvlFileUpdated,null pointer", v61, 2);
      v9 = (std::string *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v11);
LABEL_66:
      if (v9 != buf)
        free(v9);
    }
  }
  std::mutex::unlock(v6);
}

void sub_100A4EE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::mutex *v37;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::mutex::unlock(v37);
  _Unwind_Resume(a1);
}

void sub_100A4EEB8(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  uint8_t *v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  uint8_t *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *p_dst;
  const char *v14;
  uint8_t *v15;
  std::string v16;
  std::string __dst;
  void *__p[2];
  int64_t v19;
  uint8_t buf[8];
  std::string::size_type v21;
  unsigned __int8 v22;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#RTTMA,#Warning,deleteRTAvailabilityFile", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#RTTMA,#Warning,deleteRTAvailabilityFile", __p, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::deleteRTAvailabilityFile()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v3 = (char *)sub_1001FD94C();
  sub_1000B7884(v3, (uint64_t)buf);
  if (*(char *)(a1 + 423) < 0)
    sub_100115CE4(&__dst, *(void **)(a1 + 400), *(_QWORD *)(a1 + 408));
  else
    __dst = *(std::string *)(a1 + 400);
  if ((v22 & 0x80u) == 0)
    v4 = buf;
  else
    v4 = *(uint8_t **)buf;
  if ((v22 & 0x80u) == 0)
    v5 = v22;
  else
    v5 = v21;
  v6 = std::string::insert(&__dst, 0, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v19 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v19 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  sub_1005164F0((const char *)v8);
  sub_100A4DA84(a1, (uint64_t)&v16);
  if ((v22 & 0x80u) == 0)
    v9 = buf;
  else
    v9 = *(uint8_t **)buf;
  if ((v22 & 0x80u) == 0)
    v10 = v22;
  else
    v10 = v21;
  v11 = std::string::insert(&v16, 0, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  sub_1005164F0((const char *)p_dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if ((char)v22 < 0)
    operator delete(*(void **)buf);
}

void sub_100A4F18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100A4F20C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  const char **v6;
  NSObject *v7;
  NSObject *v8;
  unsigned __int8 *v9;
  NSObject *v10;
  uint64_t *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  uint8_t *v46;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint8_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  _QWORD v63[2];
  int v64;
  uint64_t v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  uint8_t buf[4];
  uint64_t v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;

  if (*a3 == 2)
  {
    sub_100119F3C(v63);
    if (sub_100006BB4(a4, "RayTracingConfigurations_v1", v63))
    {
      v6 = (const char **)(a1 + 464);
      if (!sub_1000BCB64((uint64_t)v63, "RayTracingServerURL", (std::string *)(a1 + 464)))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v7 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,RayTracing URL config read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v64) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,MA-OTA,RayTracing URL config read error", &v64, 2);
          v42 = (uint8_t *)v41;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v41);
          if (v42 != buf)
            free(v42);
        }
      }
      if ((sub_1001FD98C((uint64_t)v63, "RayTracingAvlExpirationAge", (void *)(a1 + 456)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v8 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,AVL file exp age config read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v64) = 0;
          LODWORD(v62) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,MA-OTA,AVL file exp age config read error", &v64, v62);
          v44 = (uint8_t *)v43;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v43);
          if (v44 != buf)
            free(v44);
        }
        *(_QWORD *)(a1 + 456) = 0x415BAF8000000000;
      }
      v9 = (unsigned __int8 *)(a1 + 488);
      if ((sub_1001E4874((uint64_t)v63, "RayTracingFlushRTData", (BOOL *)(a1 + 488)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v10 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,RayTracing flush config read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v64) = 0;
          LODWORD(v62) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,MA-OTA,RayTracing flush config read error", &v64, v62);
          v46 = (uint8_t *)v45;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v45);
          if (v46 != buf)
            free(v46);
        }
      }
      v11 = (uint64_t *)(a1 + 496);
      if ((sub_1001FD98C((uint64_t)v63, "RayTracingFlushRTDataBeforeTime", (void *)(a1 + 496)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v12 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,flush time read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v64) = 0;
          LODWORD(v62) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,MA-OTA,flush time read error", &v64, v62);
          v48 = (uint8_t *)v47;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v47);
          if (v48 != buf)
            free(v48);
        }
      }
      if ((sub_1001FD98C((uint64_t)v63, "RayTracingAvlDownloadRateOnWifi", (void *)(a1 + 504)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v13 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,wifi download rate read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v64) = 0;
          LODWORD(v62) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,MA-OTA,wifi download rate read error", &v64, v62);
          v50 = (uint8_t *)v49;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v49);
          if (v50 != buf)
            free(v50);
        }
      }
      v14 = (uint64_t *)(a1 + 512);
      if ((sub_1001FD98C((uint64_t)v63, "RayTracingAvlDownloadRateOnCell", (void *)(a1 + 512)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v15 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,cell download rate read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102166398);
          LOWORD(v64) = 0;
          LODWORD(v62) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,MA-OTA,cell download rate read error", &v64, v62);
          v52 = (uint8_t *)v51;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v51);
          if (v52 != buf)
            free(v52);
        }
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v16 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v17 = *(_QWORD *)(a1 + 456);
        if (*(char *)(a1 + 487) < 0)
        {
          if (*(_QWORD *)(a1 + 472))
            v18 = *v6;
          else
            v18 = "default";
        }
        else if (*(_BYTE *)(a1 + 487))
        {
          v18 = (const char *)(a1 + 464);
        }
        else
        {
          v18 = "default";
        }
        v28 = *v9;
        v29 = *v11;
        v30 = *v14;
        *(_DWORD *)buf = 134350338;
        v77 = v17;
        v78 = 2082;
        v79 = v18;
        v80 = 1026;
        v81 = v28;
        v82 = 2050;
        v83 = v29;
        v84 = 2050;
        v85 = v30;
        v86 = 2050;
        v87 = v30;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#RTTMA,MA-OTA,AvlFileExpAge,%{public}.3lff,Url,%{public}s,flush,%{public}d,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf", buf, 0x3Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102166398);
        v37 = *(_QWORD *)(a1 + 456);
        if (*(char *)(a1 + 487) < 0)
        {
          if (*(_QWORD *)(a1 + 472))
            v38 = *v6;
          else
            v38 = "default";
        }
        else if (*(_BYTE *)(a1 + 487))
        {
          v38 = (const char *)(a1 + 464);
        }
        else
        {
          v38 = "default";
        }
        v53 = *v9;
        v54 = *v11;
        v55 = *v14;
        v64 = 134350338;
        v65 = v37;
        v66 = 2082;
        v67 = v38;
        v68 = 1026;
        v69 = v53;
        v70 = 2050;
        v71 = v54;
        v72 = 2050;
        v73 = v55;
        v74 = 2050;
        v75 = v55;
        LODWORD(v62) = 58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,MA-OTA,AvlFileExpAge,%{public}.3lff,Url,%{public}s,flush,%{public}d,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf", &v64, v62);
        v57 = (uint8_t *)v56;
        sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v56);
        if (v57 != buf)
          free(v57);
      }
      sub_100A48760(a1);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v31 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v32 = *(_QWORD *)(a1 + 456);
        if (*(char *)(a1 + 487) < 0)
        {
          if (*(_QWORD *)(a1 + 472))
            v33 = *v6;
          else
            v33 = "default";
        }
        else if (*(_BYTE *)(a1 + 487))
        {
          v33 = (const char *)(a1 + 464);
        }
        else
        {
          v33 = "default";
        }
        v34 = *v9;
        v35 = *v11;
        v36 = *v14;
        *(_DWORD *)buf = 134350338;
        v77 = v32;
        v78 = 2082;
        v79 = v33;
        v80 = 1026;
        v81 = v34;
        v82 = 2050;
        v83 = v35;
        v84 = 2050;
        v85 = v36;
        v86 = 2050;
        v87 = v36;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#RTTMA,final,AvlFileExpAge,%{public}.3lff,Url,%{public}s,flush,%{public}d,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf", buf, 0x3Au);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_81;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v39 = *(_QWORD *)(a1 + 456);
      if (*(char *)(a1 + 487) < 0)
      {
        if (*(_QWORD *)(a1 + 472))
          v40 = *v6;
        else
          v40 = "default";
      }
      else if (*(_BYTE *)(a1 + 487))
      {
        v40 = (const char *)(a1 + 464);
      }
      else
      {
        v40 = "default";
      }
      v58 = *v9;
      v59 = *v11;
      v60 = *v14;
      v64 = 134350338;
      v65 = v39;
      v66 = 2082;
      v67 = v40;
      v68 = 1026;
      v69 = v58;
      v70 = 2050;
      v71 = v59;
      v72 = 2050;
      v73 = v60;
      v74 = 2050;
      v75 = v60;
      LODWORD(v62) = 58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,final,AvlFileExpAge,%{public}.3lff,Url,%{public}s,flush,%{public}d,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf", &v64, v62);
      v27 = (uint8_t *)v61;
      sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v61);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      v25 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,RayTracing Config not available", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_81;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102166398);
      LOWORD(v64) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,MA-OTA,RayTracing Config not available", &v64, 2);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v26);
    }
    if (v27 != buf)
      free(v27);
LABEL_81:
    sub_10011A5A8(v63);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v20 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v21 = *a3;
    *(_DWORD *)buf = 67240192;
    LODWORD(v77) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,Invalid notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v22 = *a3;
    v64 = 67240192;
    LODWORD(v65) = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,#Warning,Invalid notification,%{public}d", &v64, 8);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
}

void sub_100A50188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100A501C8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  std::mutex *v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  v7 = (std::mutex *)(a1 + 312);
  std::mutex::lock((std::mutex *)(a1 + 312));
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102166398);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67240192;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#RTTMA,Notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102166398);
    v11 = *a3;
    v14[0] = 67240192;
    v14[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#RTTMA,Notification,%{public}d", v14, 8);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (*a3 == 4)
  {
    v10 = *(_DWORD *)(a4 + 188);
    if (v10 == 1)
    {
      if (!*(_BYTE *)(a1 + 624))
      {
        if (!sub_100A494C8(a1))
          sub_100A497EC(a1);
        *(_BYTE *)(a1 + 624) = 1;
      }
    }
    else if (!v10)
    {
      sub_100A4EEB8(a1);
      *(_BYTE *)(a1 + 624) = 0;
      sub_100605848(a1 + 64);
    }
  }
  std::mutex::unlock(v7);
}

void sub_100A503F4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100A5040C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100A50438(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100A50464(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100A504D8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100A504D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_100A50590((uint64_t)v11);
  return v9;
}

uint64_t sub_100A50590(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100757210(a1);
  return a1;
}

char *sub_100A505C4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      sub_100259694();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002AE87C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 4;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9 - 4);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 4;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_100A506D4()
{
  qword_102306448 = 0;
  unk_102306450 = 0;
  qword_102306458 = 0;
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306448, (void *)&_mh_execute_header);
}

uint64_t sub_100A506F8(uint64_t a1, int a2)
{
  void *__p[2];
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  void **v10;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 57) = 65793;
  if (byte_102311167 < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 64), (void *)xmmword_102311150, *((unint64_t *)&xmmword_102311150 + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 64) = xmmword_102311150;
    *(_QWORD *)(a1 + 80) = unk_102311160;
  }
  if (byte_10231117F < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 88), (void *)xmmword_102311168, *((unint64_t *)&xmmword_102311168 + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 88) = xmmword_102311168;
    *(_QWORD *)(a1 + 104) = unk_102311178;
  }
  if (byte_102311197 < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 112), (void *)xmmword_102311180, *((unint64_t *)&xmmword_102311180 + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 112) = xmmword_102311180;
    *(_QWORD *)(a1 + 128) = unk_102311190;
  }
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 136) = xmmword_101BDBEF0;
  *(_QWORD *)(a1 + 152) = 0x4024000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 224) = 257;
  *(_QWORD *)(a1 + 228) = 0x32000000018;
  *(_WORD *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 1;
  *(_DWORD *)(a1 + 244) = -115;
  *(_QWORD *)(a1 + 248) = 0x4000000000000000;
  *(_QWORD *)(a1 + 256) = 0x3E800000005;
  *(_WORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 268) = -1;
  *(_WORD *)(a1 + 276) = 257;
  *(_BYTE *)(a1 + 280) = 1;
  *(_WORD *)(a1 + 284) = 257;
  *(_QWORD *)(a1 + 288) = 0x32000000018;
  *(_WORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 304) = 0x6400000005;
  *(_WORD *)(a1 + 312) = 256;
  *(_WORD *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 320) = -1;
  *(_WORD *)(a1 + 328) = 257;
  *(_BYTE *)(a1 + 332) = 1;
  *(_WORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 340) = -1;
  *(_WORD *)(a1 + 348) = 257;
  *(_WORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 356) = -1;
  *(_WORD *)(a1 + 364) = 257;
  *(_WORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 372) = -1;
  *(_WORD *)(a1 + 380) = 257;
  *(_QWORD *)(a1 + 384) = 0x6400000002;
  *(_DWORD *)(a1 + 392) = 100;
  *(_WORD *)(a1 + 396) = 256;
  *(_OWORD *)(a1 + 400) = xmmword_101BDBEC0;
  *(_QWORD *)(a1 + 416) = 0x93A80018B8200;
  *(_BYTE *)(a1 + 424) = 0;
  if (byte_102311198[23] < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 432), *(void **)byte_102311198, *(unint64_t *)&byte_102311198[8]);
  }
  else
  {
    *(_OWORD *)(a1 + 432) = *(_OWORD *)byte_102311198;
    *(_QWORD *)(a1 + 448) = *(_QWORD *)&byte_102311198[16];
  }
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 1065353216;
  *(_OWORD *)(a1 + 496) = xmmword_101BDBED0;
  *(_QWORD *)(a1 + 512) = 0xE1000015180;
  *(_DWORD *)(a1 + 520) = 5184000;
  sub_100A50ACC(a1);
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  v6 = xmmword_101BDBED0;
  v7 = 0xE1000015180;
  v8 = 5184000;
  memset(v9, 0, sizeof(v9));
  sub_100A51788(a1, (unsigned __int8 *)__p);
  v10 = (void **)v9;
  sub_1003B01F4(&v10);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[1]);
  return a1;
}

void sub_100A50A10(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void **v6;
  void **v7;

  if (*(char *)(v1 + 223) < 0)
    operator delete(*v7);
  sub_100A921D8(v5);
  if (*(char *)(v1 + 135) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 111) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v6);
  _Unwind_Resume(a1);
}

uint64_t sub_100A50ACC(uint64_t a1)
{
  const char *v2;
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  int v15;
  _QWORD *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  int v24;
  _QWORD *v25;
  _BOOL4 v26;
  _BOOL4 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  int v33;
  _QWORD *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  NSObject *v41;
  int v42;
  _QWORD *v43;
  int v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  NSObject *v49;
  int v50;
  int v52;
  const char *v53;
  uint8_t *v54;
  int v55;
  const char *v56;
  uint8_t *v57;
  int v58;
  const char *v59;
  uint8_t *v60;
  int v61;
  const char *v62;
  uint8_t *v63;
  int v64;
  const char *v65;
  uint8_t *v66;
  uint64_t v67;
  std::string __p;
  _QWORD v69[2];
  int v70;
  int v71;
  __int16 v72;
  _QWORD *v73;
  std::string v74;
  std::string v75;
  std::string __str;
  uint8_t buf[32];
  int v78;

  sub_100119F3C(v69);
  sub_1001E4804(buf);
  if (byte_102306807 >= 0)
    v2 = (const char *)&qword_1023067F0;
  else
    v2 = (const char *)qword_1023067F0;
  v3 = sub_100006BB4(*(uint64_t *)buf, v2, v69);
  v4 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v3)
    sub_100A54CC8(a1, (uint64_t)v69);
  memset(buf, 0, sizeof(buf));
  v78 = 1065353216;
  sub_100A530B0(a1, (uint64_t)buf);
  v7 = *(uint64_t **)&buf[16];
  if (*(_QWORD *)&buf[16])
  {
    do
    {
      sub_1015A2E04(&__p, "");
      sub_100A523BC((int *)a1, (std::string *)(v7 + 2), (std::string *)(v7 + 5), 0, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  sub_100A9224C((uint64_t)buf);
  memset(&__p, 0, sizeof(__p));
  sub_1001E4804(buf);
  v8 = sub_1000BCB64(*(uint64_t *)buf, "EEDIntermediateCert", &__p);
  v9 = v8;
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_19;
  v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      goto LABEL_27;
  }
  else
  {
LABEL_19:
    if (!v8)
      goto LABEL_27;
  }
  v13 = (_QWORD *)(a1 + 200);
  std::string::operator=((std::string *)(a1 + 200), &__p);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_DWORD *)a1;
    v16 = (_QWORD *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      v16 = (_QWORD *)*v13;
    *(_DWORD *)buf = 67240451;
    *(_DWORD *)&buf[4] = v15;
    *(_WORD *)&buf[8] = 2081;
    *(_QWORD *)&buf[10] = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,overriding intermediate cert to %{private}s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v52 = *(_DWORD *)a1;
    if (*(char *)(a1 + 223) < 0)
      v13 = (_QWORD *)*v13;
    LODWORD(__str.__r_.__value_.__l.__data_) = 67240451;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v52;
    LOWORD(__str.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2Cfg,inst,%{public}d,overriding intermediate cert to %{private}s", &__str, 18);
    v54 = (uint8_t *)v53;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v53);
    if (v54 != buf)
      free(v54);
  }
LABEL_27:
  memset(&__str, 0, sizeof(__str));
  sub_1001E4804(buf);
  v17 = sub_1000BCB64(*(uint64_t *)buf, "EEDLISURL", &__str);
  v18 = v17;
  v19 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_31;
  v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v18)
      goto LABEL_39;
  }
  else
  {
LABEL_31:
    if (!v17)
      goto LABEL_39;
  }
  v22 = (_QWORD *)(a1 + 64);
  std::string::operator=((std::string *)(a1 + 64), &__str);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v23 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v24 = *(_DWORD *)a1;
    v25 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v25 = (_QWORD *)*v22;
    *(_DWORD *)buf = 67240451;
    *(_DWORD *)&buf[4] = v24;
    *(_WORD *)&buf[8] = 2081;
    *(_QWORD *)&buf[10] = v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,overriding LIS URL to %{private}s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v55 = *(_DWORD *)a1;
    if (*(char *)(a1 + 87) < 0)
      v22 = (_QWORD *)*v22;
    LODWORD(v75.__r_.__value_.__l.__data_) = 67240451;
    HIDWORD(v75.__r_.__value_.__r.__words[0]) = v55;
    LOWORD(v75.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v75.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v22;
    LODWORD(v67) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2Cfg,inst,%{public}d,overriding LIS URL to %{private}s", &v75, v67);
    v57 = (uint8_t *)v56;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v56);
    if (v57 != buf)
      free(v57);
  }
LABEL_39:
  memset(&v75, 0, sizeof(v75));
  sub_1001E4804(buf);
  v26 = sub_1000BCB64(*(uint64_t *)buf, "EEDADRURL", &v75);
  v27 = v26;
  v28 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_43;
  v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!v27)
      goto LABEL_51;
  }
  else
  {
LABEL_43:
    if (!v26)
      goto LABEL_51;
  }
  v31 = (_QWORD *)(a1 + 88);
  std::string::operator=((std::string *)(a1 + 88), &v75);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v32 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v33 = *(_DWORD *)a1;
    v34 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v34 = (_QWORD *)*v31;
    *(_DWORD *)buf = 67240451;
    *(_DWORD *)&buf[4] = v33;
    *(_WORD *)&buf[8] = 2081;
    *(_QWORD *)&buf[10] = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,overriding ADR URL to %{private}s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v58 = *(_DWORD *)a1;
    if (*(char *)(a1 + 111) < 0)
      v31 = (_QWORD *)*v31;
    LODWORD(v74.__r_.__value_.__l.__data_) = 67240451;
    HIDWORD(v74.__r_.__value_.__r.__words[0]) = v58;
    LOWORD(v74.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v74.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v31;
    LODWORD(v67) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2Cfg,inst,%{public}d,overriding ADR URL to %{private}s", &v74, v67);
    v60 = (uint8_t *)v59;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v59);
    if (v60 != buf)
      free(v60);
  }
LABEL_51:
  memset(&v74, 0, sizeof(v74));
  sub_1001E4804(buf);
  v35 = sub_1000BCB64(*(uint64_t *)buf, "EEDControlURL", &v74);
  v36 = v35;
  v37 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_55;
  v38 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (!v36)
      goto LABEL_63;
  }
  else
  {
LABEL_55:
    if (!v35)
      goto LABEL_63;
  }
  v40 = (_QWORD *)(a1 + 112);
  std::string::operator=((std::string *)(a1 + 112), &v74);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v41 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v42 = *(_DWORD *)a1;
    v43 = (_QWORD *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0)
      v43 = (_QWORD *)*v40;
    *(_DWORD *)buf = 67240451;
    *(_DWORD *)&buf[4] = v42;
    *(_WORD *)&buf[8] = 2081;
    *(_QWORD *)&buf[10] = v43;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,overriding Control URL to %{private}s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v61 = *(_DWORD *)a1;
    if (*(char *)(a1 + 135) < 0)
      v40 = (_QWORD *)*v40;
    v70 = 67240451;
    v71 = v61;
    v72 = 2081;
    v73 = v40;
    LODWORD(v67) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2Cfg,inst,%{public}d,overriding Control URL to %{private}s", &v70, v67);
    v63 = (uint8_t *)v62;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v62);
    if (v63 != buf)
      free(v63);
  }
LABEL_63:
  sub_1001E4804(buf);
  LOBYTE(v70) = 0;
  v44 = sub_1001E4874(*(uint64_t *)buf, "EEDForceEnable", (BOOL *)&v70);
  if ((_BYTE)v70)
    v45 = v44;
  else
    v45 = 0;
  v46 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_70;
  v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    if (!v45)
      goto LABEL_76;
  }
  else
  {
LABEL_70:
    if (!v45)
      goto LABEL_76;
  }
  *(_WORD *)(a1 + 56) = 257;
  *(_BYTE *)(a1 + 59) = 1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v49 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v50 = *(_DWORD *)a1;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v50;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,force enabling EED", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v64 = *(_DWORD *)a1;
    v70 = 67240192;
    v71 = v64;
    LODWORD(v67) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2Cfg,inst,%{public}d,force enabling EED", &v70, v67);
    v66 = (uint8_t *)v65;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v65);
    if (v66 != buf)
      free(v66);
  }
LABEL_76:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return sub_10011A5A8(v69);
}

void sub_100A5165C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
  if (a29 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a43 < 0)
    operator delete(a38);
  if (a17 < 0)
    operator delete(a12);
  sub_10011A5A8(&a18);
  _Unwind_Resume(a1);
}

BOOL sub_100A51788(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type size;
  const void **v48;
  std::string *p_str;
  _BOOL8 v50;
  _QWORD *v51;
  NSObject *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v64;
  __int128 v65;
  __int128 v66;
  int v67;
  std::string __str;
  uint8_t buf[8];
  _BYTE v70[10];
  __int16 v71;
  _BOOL4 v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  _QWORD *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;

  v4 = *a2;
  if (byte_102311198[23] < 0)
    sub_100115CE4(&__str, *(void **)byte_102311198, *(unint64_t *)&byte_102311198[8]);
  else
    __str = *(std::string *)byte_102311198;
  v5 = a2[31];
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 2);
  if (v5)
    std::string::operator=(&__str, (const std::string *)(a2 + 8));
  sub_1001E4804(buf);
  v6 = *((_DWORD *)a2 + 8);
  LODWORD(v65) = 0;
  v7 = sub_1001E4B84(*(uint64_t *)buf, "EEDPreCachedADRDebounceDelay", &v65);
  v8 = v65;
  if (!v7)
    v8 = v6;
  v64 = v8;
  v9 = *(std::__shared_weak_count **)v70;
  if (*(_QWORD *)v70)
  {
    v10 = (unint64_t *)(*(_QWORD *)v70 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_1001E4804(buf);
  v12 = *((_DWORD *)a2 + 9);
  LODWORD(v65) = 0;
  if (sub_1001E4B84(*(uint64_t *)buf, "EEDPreCachedADRDebounceGracePeriod", &v65))
    v13 = v65;
  else
    v13 = v12;
  v14 = *(std::__shared_weak_count **)v70;
  if (*(_QWORD *)v70)
  {
    v15 = (unint64_t *)(*(_QWORD *)v70 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_1001E4804(buf);
  v17 = *((_DWORD *)a2 + 10);
  LODWORD(v65) = 0;
  if (sub_1001E4B84(*(uint64_t *)buf, "EEDPreCachedADRPeriodicDelay", &v65))
    v18 = v65;
  else
    v18 = v17;
  v19 = *(std::__shared_weak_count **)v70;
  if (*(_QWORD *)v70)
  {
    v20 = (unint64_t *)(*(_QWORD *)v70 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_1001E4804(buf);
  v22 = *((_DWORD *)a2 + 11);
  LODWORD(v65) = 0;
  if (sub_1001E4B84(*(uint64_t *)buf, "EEDPreCachedADRPeriodicGracePeriod", &v65))
    v23 = v65;
  else
    v23 = v22;
  v24 = *(std::__shared_weak_count **)v70;
  if (*(_QWORD *)v70)
  {
    v25 = (unint64_t *)(*(_QWORD *)v70 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_1001E4804(buf);
  v27 = *((_DWORD *)a2 + 12);
  LODWORD(v65) = 0;
  if (sub_1001E4B84(*(uint64_t *)buf, "EEDPreCachedADRBackoffDelay", &v65))
    v28 = v65;
  else
    v28 = v27;
  v29 = *(std::__shared_weak_count **)v70;
  if (*(_QWORD *)v70)
  {
    v30 = (unint64_t *)(*(_QWORD *)v70 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_1001E4804(buf);
  v32 = *((_DWORD *)a2 + 13);
  LODWORD(v65) = 0;
  if (sub_1001E4B84(*(uint64_t *)buf, "EEDPreCachedADRBackoffGracePeriod", &v65))
    v33 = v65;
  else
    v33 = v32;
  v34 = *(std::__shared_weak_count **)v70;
  if (*(_QWORD *)v70)
  {
    v35 = (unint64_t *)(*(_QWORD *)v70 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  sub_1001E4804(buf);
  v37 = *((_DWORD *)a2 + 14);
  LODWORD(v65) = 0;
  if (sub_1001E4B84(*(uint64_t *)buf, "EEDPreCachedAdrValidityInterval", &v65))
    v38 = v65;
  else
    v38 = v37;
  v39 = *(std::__shared_weak_count **)v70;
  if (*(_QWORD *)v70)
  {
    v40 = (unint64_t *)(*(_QWORD *)v70 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v65 = 0u;
  v66 = 0u;
  v67 = 1065353216;
  v42 = (std::string *)*((_QWORD *)a2 + 8);
  v43 = (std::string *)*((_QWORD *)a2 + 9);
  while (v42 != v43)
  {
    v44 = v42 + 1;
    sub_100A52C00((int *)a1, (unsigned __int8 *)v42, v42 + 1, &v65);
    v42 = v44 + 1;
  }
  sub_100A530B0(a1, (uint64_t)&v65);
  if (*(unsigned __int8 *)(a1 + 424) != v4)
    goto LABEL_90;
  v45 = *(unsigned __int8 *)(a1 + 455);
  if ((v45 & 0x80u) == 0)
    v46 = *(unsigned __int8 *)(a1 + 455);
  else
    v46 = *(_QWORD *)(a1 + 440);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (v46 != size)
    goto LABEL_90;
  v48 = (const void **)(a1 + 432);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v45 & 0x80) != 0)
  {
    if (memcmp(*v48, p_str, *(_QWORD *)(a1 + 440)))
      goto LABEL_90;
  }
  else if (*(_BYTE *)(a1 + 455))
  {
    while (*(unsigned __int8 *)v48 == p_str->__r_.__value_.__s.__data_[0])
    {
      v48 = (const void **)((char *)v48 + 1);
      p_str = (std::string *)((char *)p_str + 1);
      if (!--v45)
        goto LABEL_82;
    }
    goto LABEL_90;
  }
LABEL_82:
  if (sub_100A92314(a1 + 456, &v65)
    && *(_DWORD *)(a1 + 496) == v64
    && *(_DWORD *)(a1 + 500) == v13
    && *(_DWORD *)(a1 + 504) == v18
    && *(_DWORD *)(a1 + 508) == v23
    && *(_DWORD *)(a1 + 512) == v28
    && *(_DWORD *)(a1 + 516) == v33)
  {
    v50 = *(_DWORD *)(a1 + 520) != v38;
    goto LABEL_91;
  }
LABEL_90:
  v50 = 1;
LABEL_91:
  *(_BYTE *)(a1 + 424) = v4;
  v51 = (_QWORD *)(a1 + 432);
  std::string::operator=((std::string *)(a1 + 432), &__str);
  if ((__int128 *)(a1 + 456) != &v65)
  {
    *(_DWORD *)(a1 + 488) = v67;
    sub_100A92474((_QWORD *)(a1 + 456), (uint64_t *)v66, 0);
  }
  *(_DWORD *)(a1 + 496) = v64;
  *(_DWORD *)(a1 + 500) = v13;
  *(_DWORD *)(a1 + 504) = v18;
  *(_DWORD *)(a1 + 508) = v23;
  *(_DWORD *)(a1 + 512) = v28;
  *(_DWORD *)(a1 + 516) = v33;
  *(_DWORD *)(a1 + 520) = v38;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v52 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v53 = *(_DWORD *)a1;
    v54 = *(unsigned __int8 *)(a1 + 424);
    if (*(char *)(a1 + 455) < 0)
      v51 = (_QWORD *)*v51;
    v55 = *(_DWORD *)(a1 + 496);
    v56 = *(_DWORD *)(a1 + 500);
    v57 = *(_DWORD *)(a1 + 504);
    v58 = *(_DWORD *)(a1 + 508);
    v59 = *(_DWORD *)(a1 + 512);
    v60 = *(_DWORD *)(a1 + 516);
    v61 = *(_DWORD *)(a1 + 520);
    v62 = *(_QWORD *)(a1 + 480);
    *(_DWORD *)buf = 68292099;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v70 = 2082;
    *(_QWORD *)&v70[2] = "";
    v71 = 1026;
    v72 = v50;
    v73 = 1026;
    v74 = v53;
    v75 = 1026;
    v76 = v54;
    v77 = 2081;
    v78 = v51;
    v79 = 1025;
    v80 = v55;
    v81 = 1025;
    v82 = v56;
    v83 = 1025;
    v84 = v57;
    v85 = 1025;
    v86 = v58;
    v87 = 1025;
    v88 = v59;
    v89 = 1025;
    v90 = v60;
    v91 = 1025;
    v92 = v61;
    v93 = 1026;
    v94 = v62;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EED2Cfg,#ADR,updatePreCachedAdrSettings\", \"changed\":%{public}d, \"sim\":%{public}d, \"enabled\":%{public}hhd, \"url\":%{private, location:escape_only}s, \"debounceDelay\":%{private}d, \"debounceGracePeriod\":%{private}d, \"periodicDelay\":%{private}d, \"periodicGracePeriod\":%{private}d, \"backoffDelay\":%{private}d, \"backoffGracePeriod\":%{private}d, \"validityInterval\":%{private}d, \"num partner certs\":%{public}d}", buf, 0x5Eu);
  }
  sub_100A9224C((uint64_t)&v65);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v50;
}

void sub_100A51E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A51EB4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 64);
  sub_1003B01F4(&v3);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

BOOL sub_100A51EFC(uint64_t a1, unsigned __int8 *a2, std::string *__str, const std::string *a4)
{
  signed __int8 v8;
  int v9;
  const void *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  size_t v14;
  _BOOL8 v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  const std::string *v30;
  const std::string *v31;
  const std::string *v32;
  NSObject *v33;
  std::string *v34;
  const std::string *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  signed __int8 v47;
  const void *v48;
  size_t v49;
  size_t v50;
  const void *v51;
  size_t v52;
  _DWORD v53[2];
  __int16 v54;
  const char *v55;
  __int16 v56;
  _BOOL4 v57;
  __int16 v58;
  int v59;
  __int16 v60;
  std::string *v61;
  __int16 v62;
  const std::string *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  _QWORD *v71;
  __int16 v72;
  _QWORD *v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  __int16 v82;
  _QWORD *v83;
  __int16 v84;
  int v85;
  __int16 v86;
  _QWORD *v87;
  __int16 v88;
  int v89;

  if (__PAIR64__(*(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 56)) != __PAIR64__(a2[1], *a2)
    || *(unsigned __int8 *)(a1 + 58) != a2[128])
  {
    goto LABEL_19;
  }
  v8 = a2[31];
  v9 = *(char *)(a1 + 87);
  if (v9 < 0)
  {
    v10 = *(const void **)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v10 = (const void *)(a1 + 64);
    v11 = v9;
  }
  v12 = v8 >= 0 ? a2[31] : *((_QWORD *)a2 + 2);
  v13 = v8 >= 0 ? a2 + 8 : (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v14 = v12 >= v11 ? v11 : v12;
  if (!memcmp(v10, v13, v14) && v12 == v11)
  {
    v47 = a2[55];
    if (*(char *)(a1 + 111) < 0)
    {
      v48 = *(const void **)(a1 + 88);
      v49 = *(_QWORD *)(a1 + 96);
    }
    else
    {
      v48 = (const void *)(a1 + 88);
      v49 = *(unsigned __int8 *)(a1 + 111);
    }
    if (v47 >= 0)
      v50 = a2[55];
    else
      v50 = *((_QWORD *)a2 + 5);
    if (v47 >= 0)
      v51 = a2 + 32;
    else
      v51 = (const void *)*((_QWORD *)a2 + 4);
    if (v50 >= v49)
      v52 = v49;
    else
      v52 = v50;
    v16 = 1;
    if (!memcmp(v48, v51, v52)
      && v50 == v49
      && *(double *)(a1 + 136) == *((double *)a2 + 10)
      && *(double *)(a1 + 144) == *((double *)a2 + 11)
      && *(double *)(a1 + 152) == *((double *)a2 + 12)
      && *(unsigned __int8 *)(a1 + 60) == a2[129]
      && !sub_100A52350((const void **)(a1 + 112), a2 + 56))
    {
      v16 = *(unsigned __int8 *)(a1 + 59) != a2[2];
    }
  }
  else
  {
LABEL_19:
    v16 = 1;
  }
  std::string::operator=((std::string *)(a1 + 8), __str);
  std::string::operator=((std::string *)(a1 + 32), a4);
  *(_WORD *)(a1 + 56) = *(_WORD *)a2;
  *(_BYTE *)(a1 + 58) = a2[128];
  *(_BYTE *)(a1 + 59) = a2[2];
  v17 = (_QWORD *)(a1 + 64);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 8));
  v18 = (_QWORD *)(a1 + 88);
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 32));
  v19 = (_QWORD *)(a1 + 112);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 56));
  *(_OWORD *)(a1 + 136) = *((_OWORD *)a2 + 5);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 12);
  v20 = (_QWORD *)(a1 + 200);
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 104));
  *(_BYTE *)(a1 + 60) = a2[129];
  v21 = *((_OWORD *)a2 + 16);
  v22 = *((_OWORD *)a2 + 17);
  v23 = *((_OWORD *)a2 + 19);
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 18);
  *(_OWORD *)(a1 + 368) = v23;
  *(_OWORD *)(a1 + 320) = v21;
  *(_OWORD *)(a1 + 336) = v22;
  v24 = *((_OWORD *)a2 + 12);
  v25 = *((_OWORD *)a2 + 13);
  v26 = *((_OWORD *)a2 + 15);
  *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 14);
  *(_OWORD *)(a1 + 304) = v26;
  *(_OWORD *)(a1 + 256) = v24;
  *(_OWORD *)(a1 + 272) = v25;
  v27 = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 240) = v27;
  v28 = *((_DWORD *)a2 + 82);
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 40);
  *(_DWORD *)(a1 + 392) = v28;
  sub_100A922C0(a1 + 160);
  v29 = *((_QWORD *)a2 + 17);
  v30 = (const std::string *)*((_QWORD *)a2 + 18);
  if ((const std::string *)v29 != v30)
  {
    v31 = (const std::string *)(v29 + 56);
    do
    {
      sub_100A523BC((int *)a1, (std::string *)&v31[-3].__r_.__value_.__r.__words[2], (std::string *)&v31[-2].__r_.__value_.__r.__words[2], v31[-1].__r_.__value_.__s.__data_[16], v31);
      v32 = v31 + 1;
      v31 = (const std::string *)((char *)v31 + 80);
    }
    while (v32 != v30);
  }
  sub_100A50ACC(a1);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v33 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = __str;
    else
      v34 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = a4;
    else
      v35 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    if (*(char *)(a1 + 87) < 0)
      v17 = (_QWORD *)*v17;
    if (*(char *)(a1 + 111) < 0)
      v18 = (_QWORD *)*v18;
    if (*(char *)(a1 + 223) < 0)
      v20 = (_QWORD *)*v20;
    v36 = *(_DWORD *)a1;
    v37 = *(unsigned __int8 *)(a1 + 56);
    v38 = *(unsigned __int8 *)(a1 + 57);
    v39 = *(unsigned __int8 *)(a1 + 58);
    v41 = *(_QWORD *)(a1 + 136);
    v40 = *(_QWORD *)(a1 + 144);
    v42 = *(_QWORD *)(a1 + 152);
    v43 = *(_DWORD *)(a1 + 184);
    v44 = *(unsigned __int8 *)(a1 + 60);
    if (*(char *)(a1 + 135) < 0)
      v19 = (_QWORD *)*v19;
    v45 = *(unsigned __int8 *)(a1 + 59);
    v53[0] = 68293379;
    v53[1] = 0;
    v54 = 2082;
    v55 = "";
    v56 = 1026;
    v57 = v16;
    v58 = 1026;
    v59 = v36;
    v60 = 2082;
    v61 = v34;
    v62 = 2082;
    v63 = v35;
    v64 = 1026;
    v65 = v37;
    v66 = 1026;
    v67 = v38;
    v68 = 1026;
    v69 = v39;
    v70 = 2081;
    v71 = v17;
    v72 = 2081;
    v73 = v18;
    v74 = 2049;
    v75 = v41;
    v76 = 2049;
    v77 = v40;
    v78 = 2049;
    v79 = v42;
    v80 = 1026;
    v81 = v43;
    v82 = 2082;
    v83 = v20;
    v84 = 1026;
    v85 = v44;
    v86 = 2081;
    v87 = v19;
    v88 = 1026;
    v89 = v45;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EED2Cfg updated CB info\", \"changed\":%{public}d, \"sim\":%{public}d, \"version\":%{public, location:escape_only}s, \"id\":%{public, location:escape_only}s, \"enabled\":%{public}hhd, \"adrEnabled\":%{public}hhd, \"dsaEnabled\":%{public}hhd, \"lisUrl\":%{private, location:escape_only}s, \"adrUrl\":%{private, location:escape_only}s, \"firstLisTimeout\":\"%{private}f\", \"periodicLisTimeout\":\"%{private}f\", \"initialAdrTimeout\":\"%{private}f\", \"partnerInfoMapSize\":%{public}d, \"intermediateCert\":%{public, location:escape_only}s, \"unmaskCrashDetection\":%{public}hhd, \"controlUrl\":%{private, location:escape_only}s, \"requestsEnabled\":%{public}hhd}", (uint8_t *)v53, 0x9Cu);
  }
  return v16;
}

uint64_t sub_100A52350(const void **a1, _BYTE *a2)
{
  char v2;
  size_t v3;
  const void **v4;
  size_t v5;
  size_t v6;
  uint64_t result;
  unsigned int v8;

  v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    v4 = a1;
    a1 = (const void **)*a1;
    v3 = (size_t)v4[1];
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 >= 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  if (v2 < 0)
    a2 = *(_BYTE **)a2;
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  LODWORD(result) = memcmp(a1, a2, v6);
  if (v3 < v5)
    v8 = -1;
  else
    v8 = v5 < v3;
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

void sub_100A523BC(int *a1, std::string *a2, std::string *a3, unsigned __int8 a4, const std::string *a5)
{
  SecCertificateRef v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  std::string *v14;
  int v15;
  uint8_t *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  int v20;
  std::string *v21;
  int v22;
  uint8_t *v23;
  const char *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  std::string *v27;
  NSObject *v28;
  int v29;
  unsigned __int8 *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  uint8_t *v35;
  char *v36;
  uint8_t v37[8];
  __int16 v38;
  uint8_t *v39;
  char v40;
  _DWORD v41[2];
  __int16 v42;
  uint8_t *v43;
  uint8_t buf[8];
  __int16 v45;
  std::string *v46;
  char v47;

  v10 = sub_100A54ACC((uint64_t *)a3);
  if (v10)
  {
    CFRelease(v10);
    v11 = (uint64_t)(a1 + 40);
    if (sub_1001986C8((_QWORD *)a1 + 20, (unsigned __int8 *)a2))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v13 = *a1;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = a2;
        else
          v14 = (std::string *)a2->__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)&buf[4] = v13;
        v45 = 2080;
        v46 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,found duplicate certifacte for partner %{partner}s", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v15 = *a1;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = (uint8_t *)a2;
        else
          v16 = (uint8_t *)a2->__r_.__value_.__r.__words[0];
        *(_DWORD *)v37 = 67240450;
        *(_DWORD *)&v37[4] = v15;
        v38 = 2080;
        v39 = v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning #EED2Cfg,inst,%{public}d,found duplicate certifacte for partner %{partner}s", v37, 18);
        v18 = (char *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::addPartnerInfo(const std::string &, const std::string &, BOOL, const std::string &)", "%s\n", v17);
        goto LABEL_31;
      }
    }
    else
    {
      *(_QWORD *)buf = a2;
      v25 = sub_100A92EF8((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
      std::string::operator=((std::string *)(v25 + 40), a2);
      *(_QWORD *)buf = a2;
      v26 = sub_100A92EF8((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
      std::string::operator=((std::string *)(v26 + 64), a3);
      *(_QWORD *)buf = a2;
      sub_100A92EF8((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf)[88] = a4;
      *(_QWORD *)buf = a2;
      v27 = (std::string *)sub_100A92EF8((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
      std::string::operator=(v27 + 4, a5);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v28 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v29 = *a1;
        *(_QWORD *)buf = a2;
        v30 = sub_100A92EF8((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
        sub_100A54B5C((uint64_t)(v30 + 40), buf);
        v31 = v47 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v37 = 67240450;
        *(_DWORD *)&v37[4] = v29;
        v38 = 2080;
        v39 = v31;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#EED2Cfg,inst,%{public}d,fPartnerInfoMap:%s", v37, 0x12u);
        if (v47 < 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v32 = qword_1022A0088;
        v33 = *a1;
        *(_QWORD *)v37 = a2;
        v34 = sub_100A92EF8(v11, (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)v37);
        sub_100A54B5C((uint64_t)(v34 + 40), v37);
        if (v40 >= 0)
          v35 = v37;
        else
          v35 = *(uint8_t **)v37;
        v41[0] = 67240450;
        v41[1] = v33;
        v42 = 2080;
        v43 = v35;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 0, "#EED2Cfg,inst,%{public}d,fPartnerInfoMap:%s", v41, 18);
        v18 = v36;
        if (v40 < 0)
          operator delete(*(void **)v37);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::addPartnerInfo(const std::string &, const std::string &, BOOL, const std::string &)", "%s\n", v18);
        if (v18 != (char *)buf)
          goto LABEL_51;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v20 = *a1;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = a2;
      else
        v21 = (std::string *)a2->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67240451;
      *(_DWORD *)&buf[4] = v20;
      v45 = 2081;
      v46 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,unable to convert base64 string to SecCertificateRef for partner %{private}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v22 = *a1;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = (uint8_t *)a2;
      else
        v23 = (uint8_t *)a2->__r_.__value_.__r.__words[0];
      *(_DWORD *)v37 = 67240451;
      *(_DWORD *)&v37[4] = v22;
      v38 = 2081;
      v39 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning #EED2Cfg,inst,%{public}d,unable to convert base64 string to SecCertificateRef for partner %{private}s", v37, 18);
      v18 = (char *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::addPartnerInfo(const std::string &, const std::string &, BOOL, const std::string &)", "%s\n", v24);
LABEL_31:
      if (v18 == (char *)buf)
        return;
LABEL_51:
      free(v18);
    }
  }
}

BOOL sub_100A52A10(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  _BOOL8 v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  __int16 v19;
  _BOOL4 v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v3 = *a2;
  if (*(unsigned __int8 *)(a1 + 396) != v3)
  {
    LOBYTE(v4) = a2[1];
LABEL_9:
    v5 = 1;
    goto LABEL_11;
  }
  v4 = *(unsigned __int8 *)(a1 + 397);
  if (v4 == a2[1])
  {
    if (*(_DWORD *)(a1 + 404) == *((_DWORD *)a2 + 2)
      && *(_DWORD *)(a1 + 408) == *((_DWORD *)a2 + 3)
      && *(_DWORD *)(a1 + 412) == *((_DWORD *)a2 + 4)
      && *(_DWORD *)(a1 + 416) == *((_DWORD *)a2 + 5))
    {
      v5 = *(_DWORD *)(a1 + 420) != *((_DWORD *)a2 + 6);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  v5 = 1;
  LOBYTE(v4) = a2[1];
LABEL_11:
  *(_BYTE *)(a1 + 396) = v3;
  *(_BYTE *)(a1 + 397) = v4;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 20);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 396);
    v8 = *(unsigned __int8 *)(a1 + 397);
    v9 = *(_DWORD *)(a1 + 400);
    v10 = *(_DWORD *)(a1 + 404);
    v11 = *(_DWORD *)(a1 + 408);
    v12 = *(_DWORD *)(a1 + 412);
    v13 = *(_DWORD *)(a1 + 416);
    v14 = *(_DWORD *)(a1 + 420);
    v16[0] = 68291330;
    v16[1] = 0;
    v17 = 2082;
    v18 = "";
    v19 = 1026;
    v20 = v5;
    v21 = 1026;
    v22 = v7;
    v23 = 1026;
    v24 = v8;
    v25 = 1026;
    v26 = v9;
    v27 = 1026;
    v28 = v10;
    v29 = 1026;
    v30 = v11;
    v31 = 1026;
    v32 = v12;
    v33 = 1026;
    v34 = v13;
    v35 = 1026;
    v36 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EED2Cfg updated BAA settings\", \"changed\":%{public}hhd, \"disabled\":%{public}hhd, \"EED enabled only\":%{public}hhd, \"cert validty period\":%{public}d, \"no cert request window\":%{public}d, \"no cert retry window\":%{public}d, \"cert available request window min\":%{public}d, \"cert available request window max\":%{public}d, \"cert available retry window\":%{public}d}", (uint8_t *)v16, 0x48u);
  }
  return v5;
}

void sub_100A52C00(int *a1, unsigned __int8 *a2, std::string *a3, _QWORD *a4)
{
  SecCertificateRef v8;
  NSObject *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  const char *v15;
  NSObject *v16;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  NSObject *v23;
  int v24;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  __int128 v31;
  uint8_t buf[8];
  __int16 v33;
  uint64_t *v34;

  v8 = sub_100A54ACC((uint64_t *)a3);
  if (v8)
  {
    CFRelease(v8);
    if (sub_1001986C8(a4, a2))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v10 = *a1;
        if ((a2[23] & 0x80u) == 0)
          v11 = (uint64_t *)a2;
        else
          v11 = *(uint64_t **)a2;
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)&buf[4] = v10;
        v33 = 2080;
        v34 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,found duplicate certifacte for partner %{partner}s", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v12 = qword_1022A0088;
        v13 = *a1;
        if ((a2[23] & 0x80u) == 0)
          v14 = (uint64_t *)a2;
        else
          v14 = *(uint64_t **)a2;
        LODWORD(v30) = 67240450;
        HIDWORD(v30) = v13;
        LOWORD(v31) = 2080;
        *(_QWORD *)((char *)&v31 + 2) = v14;
        v15 = "#Warning #EED2Cfg,inst,%{public}d,found duplicate certifacte for partner %{partner}s";
LABEL_31:
        v21 = 2;
LABEL_47:
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, v21, v15, &v30, 18, v30, v31);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::addPartnerCert(const std::string &, const std::string &, PartnerCertMap &)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
    }
    else
    {
      *(_QWORD *)buf = a2;
      v22 = sub_100A92BC0((uint64_t)a4, a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
      std::string::operator=((std::string *)(v22 + 40), a3);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v23 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *a1;
        if ((a2[23] & 0x80u) == 0)
          v25 = (uint64_t *)a2;
        else
          v25 = *(uint64_t **)a2;
        *(_DWORD *)buf = 67240451;
        *(_DWORD *)&buf[4] = v24;
        v33 = 2081;
        v34 = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2Cfg,inst,%{public}d,added cert for partner %{private}s", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v12 = qword_1022A0088;
        v26 = *a1;
        if ((a2[23] & 0x80u) == 0)
          v27 = (uint64_t *)a2;
        else
          v27 = *(uint64_t **)a2;
        LODWORD(v30) = 67240451;
        HIDWORD(v30) = v26;
        LOWORD(v31) = 2081;
        *(_QWORD *)((char *)&v31 + 2) = v27;
        v15 = "#EED2Cfg,inst,%{public}d,added cert for partner %{private}s";
        v21 = 0;
        goto LABEL_47;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v17 = *a1;
      if ((a2[23] & 0x80u) == 0)
        v18 = (uint64_t *)a2;
      else
        v18 = *(uint64_t **)a2;
      *(_DWORD *)buf = 67240451;
      *(_DWORD *)&buf[4] = v17;
      v33 = 2081;
      v34 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,unable to convert base64 string to SecCertificateRef for partner %{private}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = qword_1022A0088;
      v19 = *a1;
      if ((a2[23] & 0x80u) == 0)
        v20 = (uint64_t *)a2;
      else
        v20 = *(uint64_t **)a2;
      LODWORD(v30) = 67240451;
      HIDWORD(v30) = v19;
      LOWORD(v31) = 2081;
      *(_QWORD *)((char *)&v31 + 2) = v20;
      v15 = "#Warning #EED2Cfg,inst,%{public}d,unable to convert base64 string to SecCertificateRef for partner %{private}s";
      goto LABEL_31;
    }
  }
}

uint64_t sub_100A530B0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[4];
  void *v13[2];
  uint8_t buf[8];
  std::__shared_weak_count *v15;

  sub_100119F3C(v13);
  sub_1001E4804(buf);
  v3 = sub_100006BB4(*(uint64_t *)buf, "EEDPartnerCerts", v13);
  v4 = v3;
  v5 = v15;
  if (!v15)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v4)
    {
LABEL_6:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,partner certificate default overriding certs from other sources", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v12[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2Cfg,partner certificate default overriding certs from other sources", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::readPartnerCertDefault(PartnerCertMap &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      sub_100A93240(a2);
      memset(v12, 0, 24);
      sub_100525A8C((uint64_t)v13);
    }
  }
  else
  {
LABEL_5:
    if (v3)
      goto LABEL_6;
  }
  return sub_10011A5A8(v13);
}

void sub_100A537C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char *a30)
{
  a30 = &a13;
  sub_100259608((void ***)&a30);
  sub_10011A5A8(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100A53830@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v5[40];

  sub_100A5388C(a1, (uint64_t)v5);
  sub_100A53C20((uint64_t *)a1, (uint64_t)v5, a2);
  return sub_100A9224C((uint64_t)v5);
}

void sub_100A53878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100A9224C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A5388C(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *i;
  unsigned __int8 *v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint8_t buf[16];
  uint64_t v15;
  std::string v16;
  char v17;
  __int128 __p;
  uint64_t v19;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (*((_QWORD *)a1 + 23))
  {
    for (i = (uint64_t *)*((_QWORD *)a1 + 22); i; i = (uint64_t *)*i)
    {
      if (*((char *)i + 39) < 0)
      {
        sub_100115CE4(__dst, (void *)i[2], i[3]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)i + 1);
        v13 = i[4];
      }
      if (*((char *)i + 63) < 0)
      {
        sub_100115CE4(buf, (void *)i[5], i[6]);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(i + 5);
        v15 = i[7];
      }
      if (*((char *)i + 87) < 0)
        sub_100115CE4(&v16, (void *)i[8], i[9]);
      else
        v16 = *(std::string *)(i + 8);
      v17 = *((_BYTE *)i + 88);
      if (*((char *)i + 119) < 0)
      {
        sub_100115CE4(&__p, (void *)i[12], i[13]);
      }
      else
      {
        __p = *((_OWORD *)i + 6);
        v19 = i[14];
      }
      v11 = __dst;
      v5 = sub_100A92BC0(a2, (unsigned __int8 *)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v11);
      std::string::operator=((std::string *)(v5 + 40), &v16);
      if (SHIBYTE(v19) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15) < 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v13) < 0)
        operator delete(__dst[0]);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a1;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d, empty fPartnerInfoMap early return", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8 = *a1;
      LODWORD(__dst[0]) = 67240192;
      HIDWORD(__dst[0]) = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning #EED2Cfg,inst,%{public}d, empty fPartnerInfoMap early return", __dst, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getPartnerCertMap() const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_100A53BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  sub_100A9224C(v31);
  _Unwind_Resume(a1);
}

void sub_100A53C20(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SecCertificateRef v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  const char *v13;
  int v14;
  const __CFString *v15;
  uint64_t ApplePinned;
  const void *v17;
  uint64_t *i;
  NSObject *v19;
  _BYTE *v20;
  std::string *p_str;
  unsigned __int8 *v22;
  NSObject *v23;
  _BYTE *v24;
  std::string *v25;
  _BYTE *v26;
  std::string *v27;
  const char *v28;
  char *v29;
  _BYTE *v30;
  std::string *v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  const char *v38;
  int v39;
  const char *v40;
  char *v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  std::string __str;
  int v46;
  _BYTE *v47;
  __int16 v48;
  std::string *v49;
  _BYTE __p[24];
  _BYTE buf[1628];

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = sub_100A54ACC(a1 + 25);
  if (v6)
  {
    sub_1001E4804(buf);
    __p[0] = 0;
    v7 = sub_1001E4874(*(uint64_t *)buf, "EEDUseTestCertPolicy", __p);
    if (__p[0])
      v8 = v7;
    else
      v8 = 0;
    v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v13 = "Prod";
      v14 = *(_DWORD *)a1;
      if (v8)
        v13 = "Test";
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#EED2Cfg,inst,%{public}d,configured to use %{public}s ADR cert policy", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v38 = "Prod";
      v39 = *(_DWORD *)a1;
      if (v8)
        v38 = "Test";
      *(_DWORD *)__p = 67240450;
      *(_DWORD *)&__p[4] = v39;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2Cfg,inst,%{public}d,configured to use %{public}s ADR cert policy", __p, 18);
      v41 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    if (v8)
      v15 = CFSTR("1.2.840.113635.100.15.4");
    else
      v15 = CFSTR("1.2.840.113635.100.15.1");
    ApplePinned = SecPolicyCreateApplePinned(CFSTR("EED"), CFSTR("1.2.840.113635.100.6.2.3"), v15);
    v17 = (const void *)ApplePinned;
    if (ApplePinned)
    {
      for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
      {
        if (*((char *)i + 39) < 0)
        {
          ApplePinned = (uint64_t)sub_100115CE4(__p, (void *)i[2], i[3]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)i + 1);
          *(_QWORD *)&__p[16] = i[4];
        }
        if (*((char *)i + 63) < 0)
          ApplePinned = (uint64_t)sub_100115CE4(&__str, (void *)i[5], i[6]);
        else
          __str = *(std::string *)(i + 5);
        if (sub_100A55610(ApplePinned, v17, (uint64_t)v6, (uint64_t *)__p, (uint64_t *)&__str))
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v19 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            if (__p[23] >= 0)
              v20 = __p;
            else
              v20 = *(_BYTE **)__p;
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v20;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = p_str;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#EED2Cfg,partner certificate is valid,partner ID,%{public}s,partner cert,%{public}s", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            if (__p[23] >= 0)
              v26 = __p;
            else
              v26 = *(_BYTE **)__p;
            v27 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v46 = 136446466;
            v47 = v26;
            v48 = 2082;
            v49 = v27;
            LODWORD(v44) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2Cfg,partner certificate is valid,partner ID,%{public}s,partner cert,%{public}s", &v46, v44);
            v29 = (char *)v28;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
          *(_QWORD *)buf = __p;
          v22 = sub_100A92BC0(a3, __p, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
          ApplePinned = (uint64_t)std::string::operator=((std::string *)(v22 + 40), &__str);
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v23 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            if (__p[23] >= 0)
              v24 = __p;
            else
              v24 = *(_BYTE **)__p;
            v25 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v24;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v25;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#EED2Cfg,invalid partner certificate found,partner ID,%{public}s,partner cert,%{public}s", buf, 0x16u);
          }
          ApplePinned = sub_1001BFF7C(115, 0);
          if ((_DWORD)ApplePinned)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            if (__p[23] >= 0)
              v30 = __p;
            else
              v30 = *(_BYTE **)__p;
            v31 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v46 = 136446466;
            v47 = v30;
            v48 = 2082;
            v49 = v31;
            LODWORD(v44) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg,invalid partner certificate found,partner ID,%{public}s,partner cert,%{public}s", &v46, v44);
            v33 = (char *)v32;
            ApplePinned = sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v32);
            if (v33 != buf)
              free(v33);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      CFRelease(v6);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v37 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#EED2Cfg,failed to create ADR cert validation policy", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        *(_WORD *)__p = 0;
        LODWORD(v44) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg,failed to create ADR cert validation policy", __p, v44);
        v43 = (char *)v42;
        sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v42);
        if (v43 != buf)
          free(v43);
      }
      v17 = v6;
    }
    CFRelease(v17);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v34 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#EED2Cfg,unable to convert intermediate cert data to SecCertificateRef", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg,unable to convert intermediate cert data to SecCertificateRef", __p, 2);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
  }
}

void sub_100A54564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_100A9224C(v31);
  _Unwind_Resume(a1);
}

uint64_t sub_100A545DC@<X0>(int *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 v10;
  NSObject *v11;
  int v12;
  unsigned __int8 *v13;
  NSObject *v14;
  int v15;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[5];
  _DWORD v27[2];
  __int16 v28;
  uint64_t *v29;
  _DWORD v30[2];
  __int16 v31;
  unsigned __int8 *v32;
  uint64_t *v33;
  uint8_t buf[8];
  __int16 v35;
  unsigned __int8 *v36;

  sub_100A5388C(a1, (uint64_t)v26);
  v23 = 0u;
  v24 = 0u;
  LODWORD(v25) = 1065353216;
  v6 = sub_1001987C8(v26, a2);
  v7 = v6;
  if (v6)
  {
    *(_QWORD *)buf = v6 + 16;
    v8 = sub_100A92BC0((uint64_t)&v23, v6 + 16, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
    std::string::operator=((std::string *)(v8 + 40), (const std::string *)(v7 + 40));
    sub_100A53C20((uint64_t *)a1, (uint64_t)&v23, (uint64_t)v30);
    if (v33)
    {
      *(_QWORD *)buf = a2;
      v9 = sub_100A92BC0((uint64_t)v30, a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
      if ((char)v9[63] < 0)
      {
        sub_100115CE4((_BYTE *)a3, *((void **)v9 + 5), *((_QWORD *)v9 + 6));
      }
      else
      {
        v10 = *(_OWORD *)(v9 + 40);
        *(_QWORD *)(a3 + 16) = *((_QWORD *)v9 + 7);
        *(_OWORD *)a3 = v10;
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v15 = *a1;
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = v15;
        v35 = 2048;
        v36 = (unsigned __int8 *)v33;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,getValidatedCertForPartner,validatedCertMap size:%lu,early return", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v20 = *a1;
        v27[0] = 67240448;
        v27[1] = v20;
        v28 = 2048;
        v29 = v33;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning #EED2Cfg,inst,%{public}d,getValidatedCertForPartner,validatedCertMap size:%lu,early return", v27, 18, v23, v24, v25);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "std::string CLEmergencyEED2::SimConfig::getValidatedCertForPartner(std::string) const", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    sub_100A9224C((uint64_t)v30);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v12 = *a1;
      v13 = a2;
      if ((char)a2[23] < 0)
        v13 = *(unsigned __int8 **)a2;
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v12;
      v35 = 2080;
      v36 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,getValidatedCertForPartner,cert not found for partner: %s,early return", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v17 = *a1;
      if ((char)a2[23] < 0)
        a2 = *(unsigned __int8 **)a2;
      v30[0] = 67240450;
      v30[1] = v17;
      v31 = 2080;
      v32 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#Warning #EED2Cfg,inst,%{public}d,getValidatedCertForPartner,cert not found for partner: %s,early return", v30, 18, v23, v24, v25);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "std::string CLEmergencyEED2::SimConfig::getValidatedCertForPartner(std::string) const", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  sub_100A9224C((uint64_t)&v23);
  return sub_100A9224C((uint64_t)v26);
}

void sub_100A54A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_100A9224C((uint64_t)va2);
  sub_100A9224C((uint64_t)va);
  sub_100A9224C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100A54A74(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100A53C20(a1, (uint64_t)(a1 + 57), a2);
}

uint64_t sub_100A54A7C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

SecCertificateRef sub_100A54ACC(uint64_t *a1)
{
  id v2;
  uint64_t *v3;
  const __CFData *v4;
  const __CFData *v5;
  SecCertificateRef v6;

  v2 = objc_alloc((Class)NSData);
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = (const __CFData *)objc_msgSend(v2, "initWithBase64EncodedString:options:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), 0);
  v5 = v4;
  if (v4 && -[__CFData length](v4, "length"))
  {
    v6 = SecCertificateCreateWithData(0, v5);

    return v6;
  }
  else
  {

    return 0;
  }
}

uint64_t sub_100A54B5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;

  sub_100263E50((uint64_t)v25);
  v4 = sub_100263F7C(&v26, (uint64_t)"partnerID,", 10);
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = sub_100263F7C(v4, v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)",requestsSupported,", 19);
  v10 = (_QWORD *)std::ostream::operator<<(v9, *(unsigned __int8 *)(a1 + 48));
  v11 = sub_100263F7C(v10, (uint64_t)",baseURL,", 9);
  v12 = *(char *)(a1 + 79);
  if (v12 >= 0)
    v13 = a1 + 56;
  else
    v13 = *(_QWORD *)(a1 + 56);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a1 + 79);
  else
    v14 = *(_QWORD *)(a1 + 64);
  v15 = sub_100263F7C(v11, v13, v14);
  v16 = sub_100263F7C(v15, (uint64_t)",adrCert,", 9);
  v19 = *(_QWORD *)(a1 + 24);
  v18 = a1 + 24;
  v17 = v19;
  v20 = *(char *)(v18 + 23);
  if (v20 >= 0)
    v21 = v18;
  else
    v21 = v17;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = *(_QWORD *)(v18 + 8);
  sub_100263F7C(v16, v21, v22);
  std::stringbuf::str(a2, v27);
  *(_QWORD *)((char *)v25
  v26 = v23;
  if (v28 < 0)
    operator delete((void *)v27[8]);
  std::streambuf::~streambuf(v27);
  return std::ios::~ios(&v29);
}

void sub_100A54CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A54CC8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  void *v7[4];
  uint8_t buf[8];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,readPartnerInfoDefault,partner info default overriding certs and other partner info from other sources", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v7[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2Cfg,readPartnerInfoDefault,partner info default overriding certs and other partner info from other sources", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::readPartnerInfoDefault(CLNameValuePair &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100A922C0(a1 + 160);
  memset(v7, 0, 24);
  sub_100525A8C(a2);
}

void sub_100A55590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  a30 = &a15;
  sub_100259608((void ***)&a30);
  _Unwind_Resume(a1);
}

BOOL sub_100A55610(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  SecCertificateRef v8;
  __SecTrust *v9;
  id v10;
  uint64_t *v11;
  NSArray *v12;
  OSStatus v13;
  OSStatus v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t *v17;
  const char *v18;
  NSObject *v19;
  uint64_t *v20;
  _BOOL8 v21;
  uint64_t *v22;
  const char *v23;
  uint8_t *v24;
  NSObject *v25;
  uint64_t *v26;
  SecTrustRef v27;
  OSStatus Allowed;
  OSStatus v29;
  NSObject *v30;
  uint64_t *v31;
  NSObject *v33;
  uint64_t *v34;
  unsigned int v35;
  id v36;
  id v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v40;
  uint64_t *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  id v46;
  id v47;
  const char *v48;
  uint8_t *v49;
  CFErrorRef error;
  SecTrustRef trust;
  int v52;
  uint64_t *v53;
  __int16 v54;
  _BYTE v55[14];
  __int16 v56;
  id v57;
  _QWORD v58[2];
  uint8_t buf[4];
  uint64_t *v60;
  __int16 v61;
  _BYTE v62[14];
  __int16 v63;
  id v64;

  v8 = sub_100A54ACC(a5);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend((id)SecCertificateCopyCommonNames(), "objectAtIndexedSubscript:", 0);
    if (*((char *)a4 + 23) >= 0)
      v11 = a4;
    else
      v11 = (uint64_t *)*a4;
    if ((objc_msgSend(v10, "isEqualToString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v25 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0)
          v26 = a4;
        else
          v26 = (uint64_t *)*a4;
        *(_DWORD *)buf = 136446466;
        v60 = v26;
        v61 = 2082;
        *(_QWORD *)v62 = objc_msgSend(v10, "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#EED2Cfg,partner ID does not match common name in cert,partner ID,%{public}s,common name,%{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v38 = qword_1022A0088;
        if (*((char *)a4 + 23) < 0)
          a4 = (uint64_t *)*a4;
        v52 = 136446466;
        v53 = a4;
        v54 = 2082;
        *(_QWORD *)v55 = objc_msgSend(v10, "UTF8String");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 16, "#EED2Cfg,partner ID does not match common name in cert,partner ID,%{public}s,common name,%{public}s", &v52, 22);
        v40 = (uint8_t *)v39;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::SimConfig::validatePartnerCertificate(SecPolicyRef, SecCertificateRef, const std::string &, const std::string &) const", "%s\n", v39);
        if (v40 != buf)
          free(v40);
      }
      v27 = v9;
      goto LABEL_55;
    }
    v58[0] = v9;
    v58[1] = a3;
    v12 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v58, 2);
    CFRelease(v9);
    trust = 0;
    v13 = SecTrustCreateWithCertificates(v12, a2, &trust);
    if (v13)
    {
      v14 = v13;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v15 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0)
          v16 = a4;
        else
          v16 = (uint64_t *)*a4;
        *(_DWORD *)buf = 136446466;
        v60 = v16;
        v61 = 1026;
        *(_DWORD *)v62 = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#EED2Cfg,failed to create trust object when validating ADR cert,partner ID,%{public}s,err,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        if (*((char *)a4 + 23) >= 0)
          v17 = a4;
        else
          v17 = (uint64_t *)*a4;
        v52 = 136446466;
        v53 = v17;
        v54 = 1026;
        *(_DWORD *)v55 = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg,failed to create trust object when validating ADR cert,partner ID,%{public}s,err,%{public}d", &v52, 18);
LABEL_80:
        v42 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::SimConfig::validatePartnerCertificate(SecPolicyRef, SecCertificateRef, const std::string &, const std::string &) const", "%s\n", v18);
        if (v42 != buf)
          free(v42);
      }
    }
    else
    {
      Allowed = SecTrustSetNetworkFetchAllowed(trust, 0);
      if (!Allowed)
      {
        error = 0;
        v21 = SecTrustEvaluateWithError(trust, &error);
        CFRelease(trust);
        if (!error)
          return v21;
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v33 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a4 + 23) >= 0)
            v34 = a4;
          else
            v34 = (uint64_t *)*a4;
          v35 = -[__CFError code](error, "code");
          v36 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
          v37 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
          *(_DWORD *)buf = 136446978;
          v60 = v34;
          v61 = 1026;
          *(_DWORD *)v62 = v35;
          *(_WORD *)&v62[4] = 2082;
          *(_QWORD *)&v62[6] = v36;
          v63 = 2082;
          v64 = v37;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#EED2Cfg,ADR certificate validation failed,partner ID,%{public}s,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v43 = qword_1022A0088;
          if (*((char *)a4 + 23) >= 0)
            v44 = a4;
          else
            v44 = (uint64_t *)*a4;
          v45 = -[__CFError code](error, "code");
          v46 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
          v47 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
          v52 = 136446978;
          v53 = v44;
          v54 = 1026;
          *(_DWORD *)v55 = v45;
          *(_WORD *)&v55[4] = 2082;
          *(_QWORD *)&v55[6] = v46;
          v56 = 2082;
          v57 = v47;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 16, "#EED2Cfg,ADR certificate validation failed,partner ID,%{public}s,error code,%{public}d,domain,%{public}s,reason,%{public}s", &v52, 38);
          v49 = (uint8_t *)v48;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::SimConfig::validatePartnerCertificate(SecPolicyRef, SecCertificateRef, const std::string &, const std::string &) const", "%s\n", v48);
          if (v49 != buf)
            free(v49);
        }

        return 0;
      }
      v29 = Allowed;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v30 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0)
          v31 = a4;
        else
          v31 = (uint64_t *)*a4;
        *(_DWORD *)buf = 136446466;
        v60 = v31;
        v61 = 1026;
        *(_DWORD *)v62 = v29;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#EED2Cfg,failed to disable network use for trust eval,partner ID,%{public}s,err,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        if (*((char *)a4 + 23) >= 0)
          v41 = a4;
        else
          v41 = (uint64_t *)*a4;
        v52 = 136446466;
        v53 = v41;
        v54 = 1026;
        *(_DWORD *)v55 = v29;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg,failed to disable network use for trust eval,partner ID,%{public}s,err,%{public}d", &v52, 18);
        goto LABEL_80;
      }
    }
    v27 = trust;
    if (!trust)
      return 0;
LABEL_55:
    CFRelease(v27);
    return 0;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v19 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a4 + 23) >= 0)
      v20 = a4;
    else
      v20 = (uint64_t *)*a4;
    *(_DWORD *)buf = 136446210;
    v60 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#EED2Cfg,unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s", buf, 0xCu);
  }
  v21 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    if (*((char *)a4 + 23) >= 0)
      v22 = a4;
    else
      v22 = (uint64_t *)*a4;
    v52 = 136446210;
    v53 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg,unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s", &v52, 12);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::SimConfig::validatePartnerCertificate(SecPolicyRef, SecCertificateRef, const std::string &, const std::string &) const", "%s\n", v23);
    if (v24 != buf)
      free(v24);
    return 0;
  }
  return v21;
}

uint64_t sub_100A55F10(uint64_t a1)
{
  BOOL *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  _WORD v26[270];
  int v27;
  uint8_t buf[8];
  _QWORD v29[204];

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 5) = 0u;
  v2 = (BOOL *)(a1 + 5);
  *(_BYTE *)(a1 + 4) = 1;
  v3 = a1 + 8;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_QWORD *)(a1 + 36) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  v4 = a1 + 48;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  v27 = 0;
  sub_100A506F8((uint64_t)v26, 0);
  sub_100A91A44((uint64_t)buf, &v27, (uint64_t)v26);
  sub_100A93308(v3, (int *)buf, (uint64_t)buf);
  sub_100A91BC8((uint64_t)v29);
  sub_100A91BC8((uint64_t)v26);
  v27 = 0;
  sub_100A506F8((uint64_t)v26, 0);
  sub_100A91A44((uint64_t)buf, &v27, (uint64_t)v26);
  sub_100A93308(v4, (int *)buf, (uint64_t)buf);
  sub_100A91BC8((uint64_t)v29);
  sub_100A91BC8((uint64_t)v26);
  if (sub_1001DC538())
  {
    v27 = 1;
    sub_100A506F8((uint64_t)v26, 1);
    sub_100A91A44((uint64_t)buf, &v27, (uint64_t)v26);
    sub_100A93308(v3, (int *)buf, (uint64_t)buf);
    sub_100A91BC8((uint64_t)v29);
    sub_100A91BC8((uint64_t)v26);
    v27 = 1;
    sub_100A506F8((uint64_t)v26, 1);
    sub_100A91A44((uint64_t)buf, &v27, (uint64_t)v26);
    sub_100A93308(v4, (int *)buf, (uint64_t)buf);
    sub_100A91BC8((uint64_t)v29);
    sub_100A91BC8((uint64_t)v26);
  }
  LOBYTE(v27) = 0;
  sub_1001E4804(buf);
  v5 = sub_1001E4874(*(uint64_t *)buf, "GpsSimulatorTestMode", (BOOL *)&v27);
  if ((_BYTE)v27)
    v6 = v5;
  else
    v6 = 0;
  v7 = (std::__shared_weak_count *)v29[0];
  if (!v29[0])
    goto LABEL_10;
  v8 = (unint64_t *)(v29[0] + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v6)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    if (!v6)
      goto LABEL_16;
  }
  *(_BYTE *)(a1 + 6) = 1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg EED2 is disabled due to simulator mode", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v26[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2Cfg EED2 is disabled due to simulator mode", v26, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::Config::Config()", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
LABEL_16:
  sub_1001E4804(buf);
  v11 = sub_1001E4874(*(uint64_t *)buf, "GpsConformanceTestMode", (BOOL *)&v27);
  if ((_BYTE)v27)
    v12 = v11;
  else
    v12 = 0;
  v13 = (std::__shared_weak_count *)v29[0];
  if (!v29[0])
    goto LABEL_23;
  v14 = (unint64_t *)(v29[0] + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v12)
      goto LABEL_29;
  }
  else
  {
LABEL_23:
    if (!v12)
      goto LABEL_29;
  }
  *(_BYTE *)(a1 + 7) = 1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v16 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg EED2 is disabled due to conformance mode", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v26[0] = 0;
    LODWORD(v25) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2Cfg EED2 is disabled due to conformance mode", v26, v25);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::Config::Config()", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
LABEL_29:
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "EEDSendFullADR", v2);
  v17 = (std::__shared_weak_count *)v29[0];
  if (v29[0])
  {
    v18 = (unint64_t *)(v29[0] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_100A56484(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100A93294(v2);
  sub_100A93294(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A56504(uint64_t a1, int *a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  _BOOL4 v8;
  uint64_t *v9;
  uint64_t result;
  NSObject *v11;
  _BOOL4 v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _DWORD v16[4];
  uint8_t buf[4];
  int v18;

  v4 = *a2;
  HIDWORD(v15) = v4;
  *(_DWORD *)buf = v4;
  v5 = (_QWORD *)(a1 + 8);
  if (sub_1001F8DEC((_QWORD *)(a1 + 8), (int *)buf)
    && (*(_DWORD *)buf = v4, v6 = (_QWORD *)(a1 + 48), sub_1001F8DEC(v6, (int *)buf)))
  {
    v7 = sub_1001F8DEC(v6, (int *)&v15 + 1);
    if (!v7
      || (v8 = sub_100A51EFC((uint64_t)(v7 + 3), (unsigned __int8 *)a2 + 600, (std::string *)(a2 + 308), (const std::string *)(a2 + 314)), (v9 = sub_1001F8DEC(v5, (int *)&v15 + 1)) == 0))
    {
      sub_100263950("unordered_map::at: key not found");
    }
    return v8 | sub_100A51EFC((uint64_t)(v9 + 3), (unsigned __int8 *)a2 + 264, (std::string *)(a2 + 320), (const std::string *)(a2 + 326));
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v18 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2Cfg ignoring emergency settings for unexpected inst %{public}d", buf, 8u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v16[0] = 67240192;
      v16[1] = v4;
      LODWORD(v15) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg ignoring emergency settings for unexpected inst %{public}d", v16, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::updateEmergencySettings(const CLEmergencyController::LocationSettings &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
      return 0;
    }
  }
  return result;
}

BOOL sub_100A56754(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  const char *v12;
  uint8_t buf[4];
  const char *v14;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v5 = "disabled";
    if (a2)
      v5 = "allowed";
    *(_DWORD *)buf = 136446210;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Cfg EED2 %{public}s via user toggle", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = "disabled";
    if (a2)
      v8 = "allowed";
    v11 = 136446210;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2Cfg EED2 %{public}s via user toggle", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::updateUserSwitchState(const BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v6 = *(unsigned __int8 *)(a1 + 4);
  if (v6 != a2)
    *(_BYTE *)(a1 + 4) = a2;
  return v6 != a2;
}

BOOL sub_100A56948(int *a1, int a2)
{
  NSObject *v4;
  int v5;
  _BOOL8 result;
  NSObject *v7;
  NSObject *v8;
  _BOOL4 v9;
  double v10;
  uint8_t *v11;
  uint8_t *v12;
  int v13;
  double v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  int v19;
  uint8_t buf[4];
  int v21;

  if (a2 == 255 || *a1 == a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v5 = *a1;
      *(_DWORD *)buf = 67240192;
      v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Cfg keeping previous active inst %{public}d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v13 = *a1;
    v18 = 67240192;
    v19 = v13;
    v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2Cfg keeping previous active inst %{public}d", &v18, 8);
    v12 = v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::updateEmergencySim(const SimInstance)", "%s\n", v14);
LABEL_27:
    if (v12 != buf)
      free(v12);
    return 0;
  }
  *(_DWORD *)buf = a2;
  if (sub_1001F8DEC((_QWORD *)a1 + 1, (int *)buf))
  {
    *a1 = a2;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#EED2Cfg active inst changed to %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v18 = 67240192;
      v19 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2Cfg active inst changed to %{public}d", &v18, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::updateEmergencySim(const SimInstance)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    return 1;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2Cfg ignoring unexpected inst %{public}d", buf, 8u);
    }
    v9 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v18 = 67240192;
      v19 = a2;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg ignoring unexpected inst %{public}d", &v18, 8);
      v12 = v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::updateEmergencySim(const SimInstance)", "%s\n", v10);
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t sub_100A56DB8(uint64_t a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _BOOL4 v11;
  uint64_t *v12;
  uint64_t result;
  NSObject *v14;
  _BOOL4 v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _DWORD v19[4];
  uint8_t buf[4];
  int v21;

  HIDWORD(v18) = a2;
  *(_DWORD *)buf = a2;
  v8 = (_QWORD *)(a1 + 8);
  if (sub_1001F8DEC((_QWORD *)(a1 + 8), (int *)buf)
    && (*(_DWORD *)buf = a2, v9 = (_QWORD *)(a1 + 48), sub_1001F8DEC(v9, (int *)buf)))
  {
    v10 = sub_1001F8DEC(v9, (int *)&v18 + 1);
    if (!v10 || (v11 = sub_100A52A10((uint64_t)(v10 + 3), a4), (v12 = sub_1001F8DEC(v8, (int *)&v18 + 1)) == 0))
      sub_100263950("unordered_map::at: key not found");
    return v11 | sub_100A52A10((uint64_t)(v12 + 3), a3);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#EED2Cfg ignoring BAA settings for unexpected inst %{public}d", buf, 8u);
    }
    v15 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v15)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v19[0] = 67240192;
      v19[1] = a2;
      LODWORD(v18) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg ignoring BAA settings for unexpected inst %{public}d", v19, v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::updateBaaSettings(const SimInstance, const BAASettings &, const BAASettings &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A56FFC(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  _BOOL4 v8;
  uint64_t *v9;
  uint64_t result;
  NSObject *v11;
  _BOOL4 v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _DWORD v16[4];
  uint8_t buf[4];
  int v18;

  v4 = *(_DWORD *)a2;
  HIDWORD(v15) = v4;
  *(_DWORD *)buf = v4;
  v5 = (_QWORD *)(a1 + 8);
  if (sub_1001F8DEC((_QWORD *)(a1 + 8), (int *)buf)
    && (*(_DWORD *)buf = v4, v6 = (_QWORD *)(a1 + 48), sub_1001F8DEC(v6, (int *)buf)))
  {
    v7 = sub_1001F8DEC(v6, (int *)&v15 + 1);
    if (!v7 || (v8 = sub_100A51788((uint64_t)(v7 + 3), a2 + 1144), (v9 = sub_1001F8DEC(v5, (int *)&v15 + 1)) == 0))
      sub_100263950("unordered_map::at: key not found");
    return v8 | sub_100A51788((uint64_t)(v9 + 3), a2 + 1056);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v18 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2Cfg ignoring PreCachedADR settings for unexpected inst %{public}d", buf, 8u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v16[0] = 67240192;
      v16[1] = v4;
      LODWORD(v15) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg ignoring PreCachedADR settings for unexpected inst %{public}d", v16, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::updatePreCachedAdrSettings(const CLEmergencyController::LocationSettings &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
      return 0;
    }
  }
  return result;
}

BOOL sub_100A5723C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  _BOOL8 result;
  NSObject *v5;
  int v6;
  _BOOL4 v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v2 = (_QWORD *)(a1 + 8);
  *(_DWORD *)buf = *(_DWORD *)a1;
  if (sub_1001F8DEC((_QWORD *)(a1 + 8), (int *)buf))
  {
    v3 = sub_1001F8DEC(v2, (int *)a1);
    if (!v3)
      sub_100263950("unordered_map::at: key not found");
    if (!*((_BYTE *)v3 + 80) || !*(_BYTE *)(a1 + 4) || *(_BYTE *)(a1 + 6))
      return 0;
    return *(_BYTE *)(a1 + 7) == 0;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_DWORD *)a1;
      *(_DWORD *)buf = 67240192;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2Cfg unexpected inst %{public}d is active", buf, 8u);
    }
    v7 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8 = *(_DWORD *)a1;
      v11[0] = 67240192;
      v11[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg unexpected inst %{public}d is active", v11, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::isEnabled() const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A5745C(uint64_t a1)
{
  uint64_t *v2;
  char v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  uint64_t *i;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  const char *v16;
  const char *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;

  v2 = *(uint64_t **)(a1 + 24);
  v3 = 0;
  while (v2)
  {
    if (*((_BYTE *)v2 + 80)
      && *(_BYTE *)(a1 + 4)
      && !*(_BYTE *)(a1 + 6)
      && !*(_BYTE *)(a1 + 7)
      && *((_BYTE *)v2 + 81)
      && v2[26])
    {
      if (*((char *)v2 + 247) < 0)
      {
        if (v2[29])
        {
LABEL_7:
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v4 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v5 = *((_DWORD *)v2 + 4);
            *(_DWORD *)buf = 67240192;
            LODWORD(v25) = v5;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2Cfg EED enabled for sim %{public}d operator", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v6 = *((_DWORD *)v2 + 4);
            v22 = 67240192;
            LODWORD(v23) = v6;
            LODWORD(v21) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Cfg EED enabled for sim %{public}d operator", &v22, v21);
            v8 = (uint8_t *)v7;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldDisplayEEDUI() const", "%s\n", v7);
            if (v8 != buf)
              free(v8);
          }
          v3 = 1;
          goto LABEL_13;
        }
      }
      else if (*((_BYTE *)v2 + 247))
      {
        goto LABEL_7;
      }
    }
    if (*((_BYTE *)v2 + 448))
      goto LABEL_7;
LABEL_13:
    v2 = (uint64_t *)*v2;
  }
  for (i = *(uint64_t **)(a1 + 64); i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 80)
      && *(_BYTE *)(a1 + 4)
      && !*(_BYTE *)(a1 + 6)
      && !*(_BYTE *)(a1 + 7)
      && *((_BYTE *)i + 81)
      && i[26])
    {
      if (*((char *)i + 247) < 0)
      {
        if (i[29])
        {
LABEL_32:
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v10 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v11 = *((_DWORD *)i + 4);
            *(_DWORD *)buf = 67240192;
            LODWORD(v25) = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2Cfg EED enabled for sim %{public}d carrier", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v12 = *((_DWORD *)i + 4);
            v22 = 67240192;
            LODWORD(v23) = v12;
            LODWORD(v21) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Cfg EED enabled for sim %{public}d carrier", &v22, v21);
            v14 = (uint8_t *)v13;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldDisplayEEDUI() const", "%s\n", v13);
            if (v14 != buf)
              free(v14);
          }
          v3 = 1;
          continue;
        }
      }
      else if (*((_BYTE *)i + 247))
      {
        goto LABEL_32;
      }
    }
    if (*((_BYTE *)i + 448))
      goto LABEL_32;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v15 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v16 = "not be displayed";
    if ((v3 & 1) != 0)
      v16 = "be displayed";
    *(_DWORD *)buf = 136446210;
    v25 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2Cfg EED UI should %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v18 = "not be displayed";
    if ((v3 & 1) != 0)
      v18 = "be displayed";
    v22 = 136446210;
    v23 = v18;
    LODWORD(v21) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Cfg EED UI should %{public}s", &v22, v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldDisplayEEDUI() const", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return v3 & 1;
}

uint64_t sub_100A579D4(uint64_t a1)
{
  uint64_t *v2;
  char i;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  uint64_t *j;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  const char *v16;
  const char *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;

  v2 = *(uint64_t **)(a1 + 24);
  for (i = 0; v2; v2 = (uint64_t *)*v2)
  {
    if (!*((_BYTE *)v2 + 420) && (!*((_BYTE *)v2 + 421) || *((_BYTE *)v2 + 80)))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v5 = *((_DWORD *)v2 + 4);
        *(_DWORD *)buf = 67240192;
        LODWORD(v25) = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Cfg BAA enabled for sim %{public}d operator", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v6 = *((_DWORD *)v2 + 4);
        v22 = 67240192;
        LODWORD(v23) = v6;
        LODWORD(v21) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2Cfg BAA enabled for sim %{public}d operator", &v22, v21);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldRequestBaaCerts() const", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      i = 1;
    }
  }
  for (j = *(uint64_t **)(a1 + 64); j; j = (uint64_t *)*j)
  {
    if (!*((_BYTE *)j + 420) && (!*((_BYTE *)j + 421) || *((_BYTE *)j + 80)))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v11 = *((_DWORD *)j + 4);
        *(_DWORD *)buf = 67240192;
        LODWORD(v25) = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EED2Cfg BAA enabled for sim %{public}d carrier", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v12 = *((_DWORD *)j + 4);
        v22 = 67240192;
        LODWORD(v23) = v12;
        LODWORD(v21) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2Cfg BAA enabled for sim %{public}d carrier", &v22, v21);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldRequestBaaCerts() const", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      i = 1;
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v15 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v16 = "disabled";
    if ((i & 1) != 0)
      v16 = "enabled";
    *(_DWORD *)buf = 136446210;
    v25 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#EED2Cfg BAA cert requests %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v18 = "disabled";
    if ((i & 1) != 0)
      v18 = "enabled";
    v22 = 136446210;
    v23 = v18;
    LODWORD(v21) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2Cfg BAA cert requests %{public}s", &v22, v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldRequestBaaCerts() const", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return i & 1;
}

uint64_t *sub_100A57ECC(int *a1)
{
  _QWORD *v2;
  NSObject *v3;
  int v4;
  uint64_t *v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v2 = a1 + 2;
  *(_DWORD *)buf = *a1;
  if (!sub_1001F8DEC((_QWORD *)a1 + 1, (int *)buf))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2Cfg EED2 config for inst %{public}d wasn't created on construction", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v7 = *a1;
      v10[0] = 67240192;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg EED2 config for inst %{public}d wasn't created on construction", v10, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "const CLEmergencyEED2::SimConfig &CLEmergencyEED2::Config::getOperatorSimConfig() const", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  v5 = sub_1001F8DEC(v2, a1);
  if (!v5)
    sub_100263950("unordered_map::at: key not found");
  return v5 + 3;
}

uint64_t *sub_100A580B8(uint64_t a1, int a2, uint64_t *a3)
{
  int v3;
  _QWORD *v5;
  NSObject *v6;
  uint64_t *v7;
  _QWORD *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint8_t buf[4];
  int v19;

  HIDWORD(v15) = a2;
  v3 = *((char *)a3 + 23);
  if (v3 < 0)
  {
    if (a3[1] != 7)
    {
LABEL_10:
      *(_DWORD *)buf = a2;
      v5 = (_QWORD *)(a1 + 8);
      if (!sub_1001F8DEC((_QWORD *)(a1 + 8), (int *)buf))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v6 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          v19 = HIDWORD(v15);
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EED2Cfg EED2 operator config for inst %{public}d wasn't created on construction", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v16 = 67240192;
          v17 = HIDWORD(v15);
          LODWORD(v15) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg EED2 operator config for inst %{public}d wasn't created on construction", &v16, v15);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "const CLEmergencyEED2::SimConfig &CLEmergencyEED2::Config::getSimConfig(SimInstance, std::string) const", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
      }
      v7 = sub_1001F8DEC(v5, (int *)&v15 + 1);
      if (!v7)
        sub_100263950("unordered_map::at: key not found");
      return v7 + 3;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v3 != 7)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)a3 != 1920098659 || *(_DWORD *)((char *)a3 + 3) != 1919248754)
    goto LABEL_10;
  *(_DWORD *)buf = a2;
  v9 = (_QWORD *)(a1 + 48);
  if (!sub_1001F8DEC((_QWORD *)(a1 + 48), (int *)buf))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v19 = HIDWORD(v15);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2Cfg EED2 carrier config for inst %{public}d wasn't created on construction", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v16 = 67240192;
      v17 = HIDWORD(v15);
      LODWORD(v15) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg EED2 carrier config for inst %{public}d wasn't created on construction", &v16, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "const CLEmergencyEED2::SimConfig &CLEmergencyEED2::Config::getSimConfig(SimInstance, std::string) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  v7 = sub_1001F8DEC(v9, (int *)&v15 + 1);
  if (!v7)
    sub_100263950("unordered_map::at: key not found");
  return v7 + 3;
}

uint64_t *sub_100A58478(int *a1)
{
  int v2;
  uint64_t *v3;
  int v5;
  int v6;
  uint64_t *v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *__p[2];
  char v24;
  uint8_t buf[1640];

  v2 = *a1;
  sub_1015A2E04(__p, "operator");
  v3 = sub_100A580B8((uint64_t)a1, v2, (uint64_t *)__p);
  if (v24 < 0)
    operator delete(__p[0]);
  if (!*((_BYTE *)v3 + 396) && (!*((_BYTE *)v3 + 397) || *((_BYTE *)v3 + 56) != 0))
    return v3;
  if (!sub_1001DC538())
    goto LABEL_54;
  if (*a1 == 1)
    v5 = 0;
  else
    v5 = 255;
  if (*a1)
    v6 = v5;
  else
    v6 = 1;
  sub_1015A2E04(v21, "operator");
  v7 = sub_100A580B8((uint64_t)a1, v6, (uint64_t *)v21);
  if (v22 < 0)
    operator delete(v21[0]);
  if (*((_BYTE *)v7 + 396) || (*((_BYTE *)v7 + 397) ? (v8 = *((_BYTE *)v7 + 56) == 0) : (v8 = 0), v8))
  {
LABEL_54:
    v9 = *a1;
    sub_1015A2E04(v19, "carrier");
    v7 = sub_100A580B8((uint64_t)a1, v9, (uint64_t *)v19);
    if (v20 < 0)
      operator delete(v19[0]);
    if (*((_BYTE *)v7 + 396) || *((_BYTE *)v7 + 397) && !*((_BYTE *)v7 + 56))
    {
      if (!sub_1001DC538())
        goto LABEL_41;
      if (*a1 == 1)
        v10 = 0;
      else
        v10 = 255;
      if (*a1)
        v11 = v10;
      else
        v11 = 1;
      sub_1015A2E04(v17, "carrier");
      v7 = sub_100A580B8((uint64_t)a1, v11, (uint64_t *)v17);
      if (v18 < 0)
        operator delete(v17[0]);
      if (*((_BYTE *)v7 + 396) || *((_BYTE *)v7 + 397) && !*((_BYTE *)v7 + 56))
      {
LABEL_41:
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v12 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2Cfg requested sim config for BAA when not enabled", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v16[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Cfg requested sim config for BAA when not enabled", v16, 2);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 0, "const CLEmergencyEED2::SimConfig &CLEmergencyEED2::Config::getSimConfigForBaa() const", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        return v3;
      }
    }
  }
  return v7;
}

void sub_100A58790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100A587F4(int *a1)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  v2 = *a1;
  sub_1015A2E04(v17, "operator");
  v3 = sub_100A580B8((uint64_t)a1, v2, (uint64_t *)v17);
  if (v18 < 0)
    operator delete(v17[0]);
  if (*((_BYTE *)v3 + 424))
    return v3;
  if (!sub_1001DC538())
    goto LABEL_32;
  if (*a1 == 1)
    v6 = 0;
  else
    v6 = 255;
  if (*a1)
    v7 = v6;
  else
    v7 = 1;
  sub_1015A2E04(__p, "operator");
  v4 = sub_100A580B8((uint64_t)a1, v7, (uint64_t *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (!*((_BYTE *)v4 + 424))
  {
LABEL_32:
    v8 = *a1;
    sub_1015A2E04(v13, "carrier");
    v4 = sub_100A580B8((uint64_t)a1, v8, (uint64_t *)v13);
    if (v14 < 0)
      operator delete(v13[0]);
    if (!*((_BYTE *)v4 + 424))
    {
      if (!sub_1001DC538())
        return v3;
      v9 = *a1 == 1 ? 0 : 255;
      v10 = *a1 ? v9 : 1;
      sub_1015A2E04(v11, "carrier");
      v4 = sub_100A580B8((uint64_t)a1, v10, (uint64_t *)v11);
      if (v12 < 0)
        operator delete(v11[0]);
      if (!*((_BYTE *)v4 + 424))
        return v3;
    }
  }
  return v4;
}

void sub_100A58964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_100A589C0(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *__p;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint8_t buf[8];
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;

  sub_100270E34((uint64_t)v27, a4);
  v11 = (std::__shared_weak_count *)a5[1];
  v22 = *a5;
  v23 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_100270E34((uint64_t)v25, a6);
  sub_101399628((uint64_t)a1, a2, 1, a3, (uint64_t)v27, &v22, (uint64_t)v25);
  v14 = v26;
  if (v26 == v25)
  {
    v15 = 4;
    v14 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_9;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_9:
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v28;
  if (v28 == v27)
  {
    v20 = 4;
    v19 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_19;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_19:
  *a1 = off_1021663C8;
  sub_100A55F10((uint64_t)(a1 + 181));
  sub_1015A2E04(&__p, "#EED2 state machine");
  *(_QWORD *)buf = a1;
  operator new();
}

void sub_100A594F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = *v30;
  *v30 = 0;
  if (v32)
    operator delete();
  sub_10010D350(v27 + 2040, *(_QWORD **)(v27 + 2048));
  sub_100A93AA8((uint64_t *)(v27 + 1904), 0);
  sub_100067AC4(v27 + 1792);
  sub_100A93A6C(v29, 0);
  v33 = *(_QWORD *)(v27 + 1720);
  *(_QWORD *)(v27 + 1720) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(v27 + 1712);
  *(_QWORD *)(v27 + 1712) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  sub_100A93988(v28);
  sub_100A93294(v27 + 1496);
  sub_100A93294(v27 + 1456);
  sub_101399A8C(v27);
  _Unwind_Resume(a1);
}

uint64_t **sub_100A59790(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t **result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char *v17;
  char *v18;
  void *v19[2];
  char v20;
  int v21;
  _BYTE __p[12];
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  void **v26;
  _BYTE buf[12];
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  _BYTE *v31;

  v21 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_1019175FC(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_102166828);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    sub_100A6C7BC(v7, __p);
    if (SBYTE3(v26) >= 0)
      v11 = __p;
    else
      v11 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v28 = 1024;
    v29 = v7;
    v30 = 2080;
    v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v26) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v13 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v13 = (_QWORD *)*v13;
    v14 = qword_1022A0078;
    v15 = *(unsigned __int8 *)(v6 + 120);
    sub_100A6C7BC(v7, v19);
    if (v20 >= 0)
      v16 = v19;
    else
      v16 = (void **)v19[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v13;
    v23 = 1024;
    v24 = v7;
    v25 = 2080;
    v26 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, v15, "%sstate,%d,%s", __p, 28, (const char *)v19[0]);
    v18 = v17;
    if (v20 < 0)
      operator delete(v19[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyEED2>::setStateHandler(State, StateHandler) [T = CLEmergencyEED2]", "%s\n", v18);
    if (v18 != buf)
      free(v18);
  }
  *(_QWORD *)buf = &v21;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v21, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_100A59A5C(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;
  const void *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t **v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  uint64_t **v30;
  uint64_t **v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  const char *v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  const char *v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  uint8_t *v57;
  uint64_t v58;
  int v59[3];
  uint8_t buf[1640];

  result = 0;
  switch(a2)
  {
    case 0:
      v59[0] = 0;
      *(_QWORD *)buf = v59;
      *((_BYTE *)sub_10096ED18(a1 + 1792, v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20) = 0;
      if (sub_1001DC538())
      {
        v59[0] = 1;
        *(_QWORD *)buf = v59;
        *((_BYTE *)sub_10096ED18(a1 + 1792, v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20) = 0;
      }
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 1896) = 0;
      *(_DWORD *)(a1 + 1832) = 0;
      v4 = *(void **)(a1 + 1944);
      if (v4)
      {

        *(_QWORD *)(a1 + 1944) = 0;
      }
      v5 = *(const void **)(a1 + 1952);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(a1 + 1952) = 0;
      }
      sub_100A6E834(a1 + 1536, 17, 30.0);
      return 0;
    case 1:
      sub_100A6F304(a1 + 1536, 17);
      sub_100A6F304(a1 + 1536, 18);
      sub_100A6F794(a1);
      return 0;
    case 2:
      *(_BYTE *)(a1 + 1832) = 1;
      result = sub_100A6E5F4((_BYTE *)a1);
      if (!(_DWORD)result)
        return result;
      result = sub_100A6F8CC(a1);
      if ((_DWORD)result != 4)
        return result;
      sub_100A6FE08(a1);
      sub_100A7185C(a1);
      return 4;
    case 3:
      *(_BYTE *)(a1 + 1833) = 1;
      *(_BYTE *)(a1 + 1835) = 0;
      goto LABEL_84;
    case 4:
      *(_WORD *)(a1 + 1834) = 1;
LABEL_84:
      sub_100A6E834(a1 + 1536, 18, 1.0);
      return 0;
    case 7:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendFixTimeout fired while Initializing", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SendFixTimeout fired while Initializing", v59, v58);
      v8 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v10);
      goto LABEL_129;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendAdrTimeout fired while Initializing", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SendAdrTimeout fired while Initializing", v59, v58);
      v8 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v12);
      goto LABEL_129;
    case 11:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v13 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SessionAssertReleased fired in Initializing state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SessionAssertReleased fired in Initializing state", v59, v58);
        v43 = (uint8_t *)v42;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v42);
        if (v43 != buf)
          free(v43);
      }
      sub_101399E28(a1, 0);
      return 0;
    case 12:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v28 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CanSendADRTimeout fired while Initializing", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CanSendADRTimeout fired while Initializing", v59, v58);
      v8 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v29);
      goto LABEL_129;
    case 13:
      v59[0] = 0;
      *(_QWORD *)buf = v59;
      v30 = sub_1000BC378((uint64_t **)(a1 + 2040), v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      if (v30[6] == v30[5])
      {
        HIDWORD(v58) = 1;
        *(_QWORD *)buf = (char *)&v58 + 4;
        v31 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)&v58 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        if (v31[6] == v31[5])
        {
          sub_10139A508(a1);
          sub_100A71B64(a1);
          sub_100A6F304(a1 + 1536, 14);
        }
      }
      return 0;
    case 14:
      v14 = (uint64_t **)(a1 + 2040);
      v59[0] = 0;
      *(_QWORD *)buf = v59;
      v15 = sub_1000BC378((uint64_t **)(a1 + 2040), v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      if (v15[6] == v15[5]
        && (HIDWORD(v58) = 1,
            *(_QWORD *)buf = (char *)&v58 + 4,
            v16 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)&v58 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf),
            v16[6] == v16[5]))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v40 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#EED2 LIS Response timer timedout when no notifications were expected", buf, 2u);
        }
        result = sub_1001BFF7C(115, 0);
        if ((_DWORD)result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v59[0]) = 0;
          LODWORD(v58) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 LIS Response timer timedout when no notifications were expected", v59, v58);
          v8 = (uint8_t *)v41;
          sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v41);
LABEL_129:
          if (v8 != buf)
            free(v8);
          return 0;
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v17 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#EED2 LIS Response timer timedout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v59[0]) = 0;
          LODWORD(v58) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 LIS Response timer timedout. Submit AWD report with failure", v59, v58);
          v57 = (uint8_t *)v56;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v56);
          if (v57 != buf)
            free(v57);
        }
        sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 10);
        v18 = *(_QWORD *)(a1 + 2088);
        if (v18)
          sub_100A72390(a1, (unsigned int *)(v18 + 24), 3u);
        *(_QWORD *)(a1 + 352) = -1;
        sub_10139A508(a1);
        sub_100A71B64(a1);
        v59[0] = 0;
        *(_QWORD *)buf = v59;
        v19 = sub_1000BC378(v14, v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v19[6] = v19[5];
        v59[0] = 1;
        *(_QWORD *)buf = v59;
        v20 = sub_1000BC378(v14, v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        result = 0;
        v20[6] = v20[5];
      }
      return result;
    case 15:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v21 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSTokenReceived in Initializing state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSTokenReceived in Initializing state", v59, v58);
        v45 = (uint8_t *)v44;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v44);
        if (v45 != buf)
          free(v45);
      }
      v22 = *(void **)(a1 + 1840);
      if (!v22)
        return 0;

      result = 0;
      *(_QWORD *)(a1 + 1840) = 0;
      return result;
    case 16:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v23 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSMessageReceived in Initializing state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSMessageReceived in Initializing state", v59, v58);
        v47 = (uint8_t *)v46;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v46);
        if (v47 != buf)
          free(v47);
      }
      v24 = *(void **)(a1 + 1848);
      if (!v24)
        return 0;

      result = 0;
      *(_QWORD *)(a1 + 1848) = 0;
      return result;
    case 17:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v25 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#EED2 InitializationTimeout reached", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 InitializationTimeout reached", v59, v58);
        v49 = (uint8_t *)v48;
        sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v48);
        if (v49 != buf)
          free(v49);
      }
      result = sub_100A6F8CC(a1);
      if ((_DWORD)result == 4)
        goto LABEL_111;
      return result;
    case 18:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v32 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#EED2 DebounceTimeout reached", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 DebounceTimeout reached", v59, v58);
        v51 = (uint8_t *)v50;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v50);
        if (v51 != buf)
          free(v51);
      }
      *(_BYTE *)(a1 + 1835) = 1;
      result = sub_100A6E5F4((_BYTE *)a1);
      if ((_DWORD)result)
      {
        result = sub_100A6F8CC(a1);
        if ((_DWORD)result == 4)
          goto LABEL_111;
      }
      return result;
    case 19:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v33 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in Initializing State", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 PhoneNumberChanged in Initializing State", v59, v58);
        v53 = (uint8_t *)v52;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v52);
        if (v53 != buf)
          free(v53);
      }
      result = sub_100A6E5F4((_BYTE *)a1);
      if ((_DWORD)result)
      {
        result = sub_100A6F8CC(a1);
        if ((_DWORD)result == 4)
        {
LABEL_111:
          sub_100A6FE08(a1);
          sub_100A7185C(a1);
          return 4;
        }
      }
      return result;
    case 20:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v34 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CallEndpointChanged in Initializing State", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CallEndpointChanged in Initializing State", v59, v58);
      v8 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v35);
      goto LABEL_129;
    case 21:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v36 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in Initializing State, no-op", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 BAACertDownload in Initializing State, no-op", v59, v58);
      v8 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v37);
      goto LABEL_129;
    case 22:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSReconnected in Initializing state", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSReconnected in Initializing state", v59, v58);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v7);
      goto LABEL_129;
    case 23:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v26 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2 ControlDataResponseReceived in Initializing State, no-op", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 ControlDataResponseReceived in Initializing State, no-op", v59, v58);
      v8 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v27);
      goto LABEL_129;
    case 24:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v38 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CoexMetricUpdated in Initializing state, no-op", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CoexMetricUpdated in Initializing state, no-op", v59, v58);
        v55 = (uint8_t *)v54;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v54);
        if (v55 != buf)
          free(v55);
      }
      v39 = *(void **)(a1 + 2016);
      if (!v39)
        return 0;

      result = 0;
      *(_QWORD *)(a1 + 2016) = 0;
      return result;
    default:
      return result;
  }
}

uint64_t sub_100A5B1A8(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  const char *v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t **v36;
  uint64_t **v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  const char *v47;
  NSObject *v48;
  const char *v49;
  NSObject *v50;
  void *v51;
  NSObject *v53;
  const char *v54;
  const char *v55;
  uint8_t *v56;
  const char *v57;
  uint8_t *v58;
  const char *v59;
  uint8_t *v60;
  const char *v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  _BYTE v65[12];
  char v66;
  int v67;
  _BYTE *v68;
  uint8_t buf[8];
  char v70;

  v2 = 1;
  switch(a2)
  {
    case 0:
      sub_100A723DC();
      sub_100A72598();
      sub_100A72884();
      sub_100A7185C(a1);
      return v2;
    case 3:
      v2 = sub_100A6F8CC(a1);
      if ((v2 - 3) <= 1)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v12 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          sub_100A6C7BC(v2, buf);
          v13 = v70 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)v65 = 136315138;
          *(_QWORD *)&v65[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2, unexpected transition from Disabled state to %s state.", v65, 0xCu);
          if (v70 < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v14 = qword_1022A0088;
          sub_100A6C7BC(v2, v65);
          if (v66 >= 0)
            v15 = v65;
          else
            v15 = *(_BYTE **)v65;
          v67 = 136315138;
          v68 = v15;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 16, "#EED2, unexpected transition from Disabled state to %s state.", (const char *)&v67);
          v17 = v16;
          if (v66 < 0)
            operator delete(*(void **)v65);
          sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v17);
          if (v17 != (char *)buf)
            free(v17);
        }
      }
      return v2;
    case 7:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendFixTimeout fired while Disabled", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SendFixTimeout fired while Disabled", v65, 2);
      v7 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v19);
      goto LABEL_137;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendAdrTimeout fired while Disabled", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SendAdrTimeout fired while Disabled", v65, 2);
      v7 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v21);
      goto LABEL_137;
    case 11:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SessionAssertReleased fired in Disabled state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        *(_WORD *)v65 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SessionAssertReleased fired in Disabled state", v65, 2);
        v56 = (uint8_t *)v55;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
      sub_101399E28(a1, 0);
      return 1;
    case 12:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v22 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CanSendADRTimeout fired while Disabled", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CanSendADRTimeout fired while Disabled", v65, 2);
      v7 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v23);
      goto LABEL_137;
    case 13:
      *(_DWORD *)v65 = 0;
      *(_QWORD *)buf = v65;
      v24 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)v65, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      if (v24[6] == v24[5])
      {
        v67 = 1;
        *(_QWORD *)buf = &v67;
        v25 = sub_1000BC378((uint64_t **)(a1 + 2040), &v67, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        if (v25[6] == v25[5])
        {
          sub_10139A508(a1);
          sub_100A71B64(a1);
          sub_100A6F304(a1 + 1536, 14);
        }
      }
      return 1;
    case 14:
      v26 = (uint64_t **)(a1 + 2040);
      *(_DWORD *)v65 = 0;
      *(_QWORD *)buf = v65;
      v27 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)v65, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      if (v27[6] == v27[5]
        && (v67 = 1,
            *(_QWORD *)buf = &v67,
            v28 = sub_1000BC378((uint64_t **)(a1 + 2040), &v67, (uint64_t)&unk_101B9EB60, (_DWORD **)buf),
            v28[6] == v28[5]))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v53 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "#EED2 LIS Response timer timedout when no notifications were expected", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          *(_WORD *)v65 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 LIS Response timer timedout when no notifications were expected", v65, 2);
          v7 = (uint8_t *)v54;
          sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v54);
LABEL_137:
          if (v7 != buf)
            free(v7);
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v29 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#EED2 LIS Response timer timedout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          *(_WORD *)v65 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 LIS Response timer timedout. Submit AWD report with failure", v65, 2);
          v64 = (uint8_t *)v63;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v63);
          if (v64 != buf)
            free(v64);
        }
        v30 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 10);
        v31 = *(_QWORD *)(a1 + 2088);
        if (v31)
        {
          v33 = *(_DWORD *)(v31 + 24);
          v32 = (int *)(v31 + 24);
          v34 = sub_100A86958(v30, v33);
          v35 = *v32;
          if (v34 >= 0xFFFFFFFD)
            v35 = 3;
          *v32 = v35;
        }
        *(_QWORD *)(a1 + 352) = -1;
        sub_10139A508(a1);
        sub_100A71B64(a1);
        *(_DWORD *)v65 = 0;
        *(_QWORD *)buf = v65;
        v36 = sub_1000BC378(v26, (int *)v65, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v36[6] = v36[5];
        *(_DWORD *)v65 = 1;
        *(_QWORD *)buf = v65;
        v37 = sub_1000BC378(v26, (int *)v65, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v37[6] = v37[5];
      }
      return 1;
    case 15:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v38 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSTokenReceived in Disabled state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        *(_WORD *)v65 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSTokenReceived in Disabled state", v65, 2);
        v58 = (uint8_t *)v57;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v57);
        if (v58 != buf)
          free(v58);
      }
      v39 = *(void **)(a1 + 1840);
      if (v39)
      {

        *(_QWORD *)(a1 + 1840) = 0;
      }
      return 1;
    case 16:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v40 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSMessageReceived in Disabled state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        *(_WORD *)v65 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSMessageReceived in Disabled state", v65, 2);
        v60 = (uint8_t *)v59;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v59);
        if (v60 != buf)
          free(v60);
      }
      v41 = *(void **)(a1 + 1848);
      if (v41)
      {

        *(_QWORD *)(a1 + 1848) = 0;
      }
      return 1;
    case 17:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected InitializationTimeout in Disabled state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Warning #EED2 unexpected InitializationTimeout in Disabled state", v65, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v6);
      goto LABEL_137;
    case 18:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v42 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected DebounceTimeout in Disabled state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Warning #EED2 unexpected DebounceTimeout in Disabled state", v65, 2);
      v7 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v43);
      goto LABEL_137;
    case 19:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in Disabled State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 PhoneNumberChanged in Disabled State, no-op", v65, 2);
      v7 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v9);
      goto LABEL_137;
    case 20:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CallEndpointChanged in Disabled State", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CallEndpointChanged in Disabled State", v65, 2);
      v7 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v11);
      goto LABEL_137;
    case 21:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v44 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in Disabled State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 BAACertDownload in Disabled State, no-op", v65, 2);
      v7 = (uint8_t *)v45;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v45);
      goto LABEL_137;
    case 22:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v46 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSReconnected in Disabled state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSReconnected in Disabled state", v65, 2);
      v7 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v47);
      goto LABEL_137;
    case 23:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v48 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#EED2 ControlDataResponseReceived in Disabled State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v65 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 ControlDataResponseReceived in Disabled State, no-op", v65, 2);
      v7 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v49);
      goto LABEL_137;
    case 24:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v50 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CoexMetricUpdated in Disabled state, no-op", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        *(_WORD *)v65 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CoexMetricUpdated in Disabled state, no-op", v65, 2);
        v62 = (uint8_t *)v61;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v61);
        if (v62 != buf)
          free(v62);
      }
      v51 = *(void **)(a1 + 2016);
      if (v51)
      {

        *(_QWORD *)(a1 + 2016) = 0;
      }
      return 1;
    default:
      return v2;
  }
}

uint64_t sub_100A5C8D4(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t **v34;
  uint64_t **v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  const char *v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  NSObject *v45;
  const char *v46;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  const char *v56;
  uint8_t *v57;
  uint64_t v58;
  int v59[3];
  uint8_t buf[1640];

  switch(a2)
  {
    case 0:
      sub_100A723DC();
      sub_100A72598();
      sub_100A72884();
      sub_100A7185C(a1);
      return 2;
    case 3:
    case 4:
      return sub_100A6F8CC(a1);
    case 7:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendFixTimeout fired while Idle", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SendFixTimeout fired while Idle", v59, v58);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v5);
      goto LABEL_151;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendAdrTimeout fired while Idle", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SendAdrTimeout fired while Idle", v59, v58);
      v6 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v8);
      goto LABEL_151;
    case 11:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SessionAssertReleased fired in Idle state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SessionAssertReleased fired in Idle state", v59, v58);
        v48 = (uint8_t *)v47;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v47);
        if (v48 != buf)
          free(v48);
      }
      sub_101399E28(a1, 0);
      return 2;
    case 12:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CanSendADRTimeout fired while Idle", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CanSendADRTimeout fired while Idle", v59, v58);
      v6 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v21);
      goto LABEL_151;
    case 13:
      v59[0] = 0;
      *(_QWORD *)buf = v59;
      v22 = sub_1000BC378((uint64_t **)(a1 + 2040), v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      if (v22[6] == v22[5])
      {
        HIDWORD(v58) = 1;
        *(_QWORD *)buf = (char *)&v58 + 4;
        v23 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)&v58 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        if (v23[6] == v23[5])
        {
          sub_10139A508(a1);
          sub_100A71B64(a1);
          sub_100A6F304(a1 + 1536, 14);
        }
      }
      return 2;
    case 14:
      v24 = (uint64_t **)(a1 + 2040);
      v59[0] = 0;
      *(_QWORD *)buf = v59;
      v25 = sub_1000BC378((uint64_t **)(a1 + 2040), v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      if (v25[6] == v25[5]
        && (HIDWORD(v58) = 1,
            *(_QWORD *)buf = (char *)&v58 + 4,
            v26 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)&v58 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf),
            v26[6] == v26[5]))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v45 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "#EED2 LIS response timer timedout when no notifications were expected", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v59[0]) = 0;
          LODWORD(v58) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 LIS response timer timedout when no notifications were expected", v59, v58);
          v6 = (uint8_t *)v46;
          sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v46);
LABEL_151:
          if (v6 != buf)
            free(v6);
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v27 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#EED2 LIS response timer timedout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v59[0]) = 0;
          LODWORD(v58) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 LIS response timer timedout. Submit AWD report with failure", v59, v58);
          v57 = (uint8_t *)v56;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v56);
          if (v57 != buf)
            free(v57);
        }
        v28 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 10);
        v29 = *(_QWORD *)(a1 + 2088);
        if (v29)
        {
          v31 = *(_DWORD *)(v29 + 24);
          v30 = (int *)(v29 + 24);
          v32 = sub_100A86958(v28, v31);
          v33 = *v30;
          if (v32 >= 0xFFFFFFFD)
            v33 = 3;
          *v30 = v33;
        }
        *(_QWORD *)(a1 + 352) = -1;
        sub_10139A508(a1);
        sub_100A71B64(a1);
        v59[0] = 0;
        *(_QWORD *)buf = v59;
        v34 = sub_1000BC378(v24, v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v34[6] = v34[5];
        v59[0] = 1;
        *(_QWORD *)buf = v59;
        v35 = sub_1000BC378(v24, v59, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v35[6] = v35[5];
      }
      return 2;
    case 15:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v36 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSTokenReceived in Idle state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSTokenReceived in Idle state", v59, v58);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      v37 = *(void **)(a1 + 1840);
      if (v37)
      {

        *(_QWORD *)(a1 + 1840) = 0;
      }
      return 2;
    case 16:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSMessageReceived in Idle state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSMessageReceived in Idle state", v59, v58);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
      v11 = *(void **)(a1 + 1848);
      if (v11)
      {

        *(_QWORD *)(a1 + 1848) = 0;
      }
      return 2;
    case 17:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected InitializationTimeout in Idle state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Warning #EED2 unexpected InitializationTimeout in Idle state", v59, v58);
      v6 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v13);
      goto LABEL_151;
    case 18:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected DebounceTimeout in Idle state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Warning #EED2 unexpected DebounceTimeout in Idle state", v59, v58);
      v6 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v15);
      goto LABEL_151;
    case 19:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v16 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in Idle State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 PhoneNumberChanged in Idle State, no-op", v59, v58);
      v6 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v17);
      goto LABEL_151;
    case 20:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v38 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CallEndpointChanged in Idle State", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CallEndpointChanged in Idle State", v59, v58);
      v6 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v39);
      goto LABEL_151;
    case 21:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v40 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in Idle State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 BAACertDownload in Idle State, no-op", v59, v58);
      v6 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v41);
      goto LABEL_151;
    case 22:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v42 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSReconnected in Idle state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSReconnected in Idle state", v59, v58);
      v6 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v43);
      goto LABEL_151;
    case 23:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v44 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#EED2 ControlDataResponseReceived in Idle State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v59[0]) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 ControlDataResponseReceived in Idle State, no-op", v59, v58);
      v6 = (uint8_t *)v55;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v55);
      goto LABEL_151;
    case 24:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CoexMetricUpdated in Idle state, no-op", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v59[0]) = 0;
        LODWORD(v58) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CoexMetricUpdated in Idle state, no-op", v59, v58);
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
      v19 = *(void **)(a1 + 2016);
      if (v19)
      {

        *(_QWORD *)(a1 + 2016) = 0;
      }
      return 2;
    default:
      return 2;
  }
}

uint64_t sub_100A5DE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t **v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  int v37;
  int v38;
  NSObject *v39;
  const char *v40;
  uint64_t *v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  const char *v47;
  NSObject *v48;
  NSObject *v49;
  const char *v50;
  NSObject *v51;
  NSObject *v52;
  const char *v53;
  NSObject *v54;
  const char *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t i;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  char *v64;
  void *v65;
  NSObject *v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  NSObject *v73;
  const char *v74;
  uint8_t *v75;
  const char *v76;
  uint8_t *v77;
  const char *v78;
  uint8_t *v79;
  const char *v80;
  uint8_t *v81;
  uint64_t v82;
  int v83;
  int v84;
  const char *v85;
  uint8_t *v86;
  const char *v87;
  uint8_t *v88;
  const char *v89;
  uint8_t *v90;
  const char *v91;
  uint8_t *v92;
  const char *v93;
  uint8_t *v94;
  const char *v95;
  uint8_t *v96;
  const char *v97;
  uint8_t *v98;
  const char *v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102[3];
  uint64_t v103[4];
  char v104;
  uint8_t buf[8];
  uint64_t v106;
  int v107;
  int v108;
  _DWORD v109[10];
  uint64_t v110;
  void **v111;
  uint64_t v112;
  void **v113;
  char *v114;
  _BYTE *v115;
  char *v116;

  v2 = 3;
  switch((int)a2)
  {
    case 0:
      LODWORD(v114) = 0;
      *(_QWORD *)buf = &v114;
      v4 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)&v114, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      if (v4[6] != v4[5]
        || (LODWORD(v111) = 1,
            *(_QWORD *)buf = &v111,
            v5 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)&v111, (uint64_t)&unk_101B9EB60, (_DWORD **)buf),
            v5[6] != v5[5]))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v6 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2 Submitting previous session AWD report before starting new session", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 Submitting previous session AWD report before starting new session", &v114, 2);
          v75 = (uint8_t *)v74;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v74);
          if (v75 != buf)
            free(v75);
        }
        sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 10);
        v7 = *(_QWORD *)(a1 + 2088);
        if (v7)
          sub_100A72390(a1, (unsigned int *)(v7 + 24), 3u);
        *(_QWORD *)(a1 + 352) = -1;
        sub_10139A508(a1);
        sub_100A71B64(a1);
        LODWORD(v114) = 0;
        *(_QWORD *)buf = &v114;
        v8 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)&v114, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v8[6] = v8[5];
        LODWORD(v114) = 1;
        *(_QWORD *)buf = &v114;
        v9 = sub_1000BC378((uint64_t **)(a1 + 2040), (int *)&v114, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v9[6] = v9[5];
        sub_100A6F304(a1 + 1536, 14);
      }
      if (!*(_QWORD *)(a1 + 2088))
        operator new();
      if (!sub_100A6FE08(a1))
      {
        sub_100A72B70(a1);
        sub_100A72C3C(*(_QWORD *)(a1 + 2088));
      }
      sub_100A72D68(a1);
      sub_100A7185C(a1);
      *(_WORD *)(a1 + 1960) = 0;
      *(_BYTE *)(a1 + 1962) = 0;
      *(_DWORD *)(a1 + 1964) = 0;
      *(double *)(a1 + 176) = sub_1001FCBB4();
      v10 = *(_DWORD *)(a1 + 1780);
      *(_DWORD *)(a1 + 1784) = v10;
      v11 = *(_QWORD *)(a1 + 1768);
      if (v11)
      {
        sub_1012C5FA0(v11, v10);
        sub_1012C7A30(*(_QWORD *)(a1 + 1768));
      }
      sub_100A732B8(a1);
      if (!*(_QWORD *)(a1 + 1904))
        operator new();
      sub_100A734E4(a1);
      v56 = *(_QWORD *)(a1 + 1904);
      if (v56)
      {
        sub_101058168(v56, *(_DWORD *)(a1 + 132));
        sub_101058388(*(std::string **)(a1 + 1904), (const std::string *)(a1 + 136));
      }
      *(_DWORD *)(a1 + 1672) = 0;
      *(_WORD *)(a1 + 1777) = 0;
      *(_WORD *)(a1 + 2064) = 0;
      *(_BYTE *)(a1 + 1779) = 0;
      sub_10139A314(a1);
      IOPSGetPercentRemaining(*(_QWORD *)(a1 + 2088) + 104, 0, 0);
      *(_DWORD *)(a1 + 2080) = 2;
      v57 = sub_100217A98((unsigned int *)(a1 + 112));
      *(_DWORD *)buf = 141;
      LODWORD(v106) = v57;
      v58 = *(_DWORD *)(a1 + 2080);
      v108 = 0;
      v109[0] = 138;
      v109[2] = v58;
      v109[8] = 0;
      v115 = 0;
      v116 = 0;
      v114 = 0;
      v111 = (void **)&v114;
      LOBYTE(v112) = 0;
      v114 = (char *)operator new(0x50uLL);
      v115 = v114;
      v116 = v114 + 80;
      v115 = (_BYTE *)sub_1006AB40C((uint64_t)&v116, (uint64_t)buf, (uint64_t)&v110, (uint64_t)v114);
      for (i = 48; i != -32; i -= 40)
        sub_1001F8644((uint64_t)&buf[i]);
      v60 = *(void **)(a1 + 2096);
      memset(v103, 0, 24);
      sub_1006AB68C(v103, (uint64_t)v114, (uint64_t)v115, 0xCCCCCCCCCCCCCCCDLL * ((v115 - v114) >> 3));
      objc_msgSend(v60, "setMeasurements:", sub_1006A7590(v103));
      *(_QWORD *)buf = v103;
      sub_1006AB5A0((void ***)buf);
      v61 = sub_1001AC584();
      v62 = (void *)sub_100814EB4(v61);
      v63 = v62;
      if (v62)
      {
        v64 = (char *)objc_msgSend(v62, "UTF8String");
        *(_DWORD *)buf = 127;
        sub_1015A2E04(&v106, v64);
        v108 = 6;
        v112 = 0;
        v113 = 0;
        v111 = 0;
        v103[3] = (uint64_t)&v111;
        v104 = 0;
        v111 = (void **)operator new(0x28uLL);
        v112 = (uint64_t)v111;
        v113 = v111 + 5;
        v112 = sub_1006AB40C((uint64_t)&v113, (uint64_t)buf, (uint64_t)v109, (uint64_t)v111);
        sub_1001F8644((uint64_t)&v106);
        v65 = *(void **)(a1 + 2096);
        memset(v102, 0, sizeof(v102));
        sub_1006AB68C(v102, (uint64_t)v111, v112, 0xCCCCCCCCCCCCCCCDLL * ((v112 - (uint64_t)v111) >> 3));
        objc_msgSend(v65, "setMeasurements:", sub_1006A7590(v102));
        *(_QWORD *)buf = v102;
        sub_1006AB5A0((void ***)buf);

        *(_QWORD *)buf = &v111;
        sub_1006AB5A0((void ***)buf);
      }
      sub_100A62408(a1, 2u);
      if (sub_100CD596C(a1 + 112)
        || (*(_DWORD *)(a1 + 1440) - 2) <= 3 && (*(_DWORD *)(a1 + 1784) - 3) > 3)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v66 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#EED2 allowed to send ADR data immediately", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v111) = 0;
          LODWORD(v101) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 allowed to send ADR data immediately", &v111, v101);
          v90 = (uint8_t *)v89;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v89);
          if (v90 != buf)
            free(v90);
        }
        *(_BYTE *)(a1 + 1777) = 1;
      }
      else
      {
        sub_100A73868(a1);
      }
      v67 = (int *)(a1 + 1448);
      if (*((_BYTE *)sub_100A57ECC((int *)(a1 + 1448)) + 58))
      {
        v68 = *(_QWORD *)(a1 + 1744);
        if (v68)
          *(_QWORD *)(a1 + 1752) = +[CLEmergencyEnablementAssertion newAssertionForBundle:withReason:](CLEmergencyEnablementAssertion, "newAssertionForBundle:withReason:", v68, CFSTR("fetching DSA for EED2"));
      }
      sub_100A63754(a1);
      sub_100A73B40(a1);
      sub_101399E28(a1, 1);
      v69 = a1 + 1536;
      sub_100A6E834(v69, 11, 60.0);
      v70 = sub_100A57ECC(v67);
      sub_100A6E834(v69, 7, *((double *)v70 + 17));
      v71 = sub_100A57ECC(v67);
      sub_100A6E834(v69, 8, *((double *)v71 + 19));
      *(_QWORD *)buf = &v114;
      sub_1006AB5A0((void ***)buf);
      return 3;
    case 1:
      sub_100A7404C(a1);
      v33 = *(_QWORD *)(a1 + 2088);
      if (v33)
      {
        v34 = IOPSGetPercentRemaining(v33 + 108, 0, 0);
        *(_BYTE *)(*(_QWORD *)(a1 + 2088) + 112) = IOPSDrawingUnlimitedPower(v34);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v35 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v36 = *(_QWORD *)(a1 + 2088);
          v37 = *(_DWORD *)(v36 + 104);
          v38 = *(_DWORD *)(v36 + 108);
          LODWORD(v36) = *(unsigned __int8 *)(v36 + 112);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v37;
          LOWORD(v106) = 1024;
          *(_DWORD *)((char *)&v106 + 2) = v38;
          HIWORD(v106) = 1024;
          v107 = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#EED2 fBatteryLevelAtSessionStart:%d, fBatteryLevelAtCallEnd:%d, fPowerSourcePlugged:%d", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v82 = *(_QWORD *)(a1 + 2088);
          v83 = *(_DWORD *)(v82 + 104);
          v84 = *(_DWORD *)(v82 + 108);
          LODWORD(v82) = *(unsigned __int8 *)(v82 + 112);
          LODWORD(v114) = 67109632;
          HIDWORD(v114) = v83;
          LOWORD(v115) = 1024;
          *(_DWORD *)((char *)&v115 + 2) = v84;
          HIWORD(v115) = 1024;
          LODWORD(v116) = v82;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 fBatteryLevelAtSessionStart:%d, fBatteryLevelAtCallEnd:%d, fPowerSourcePlugged:%d", &v114, 20, LODWORD(v102[0]));
          v86 = (uint8_t *)v85;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v85);
          if (v86 != buf)
            free(v86);
        }
      }
      if (sub_100A6F8CC(a1) != 4)
      {
        sub_100A746A8(a1);
        sub_100A74EC4(a1);
        return 3;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v39 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#EED2 Moving from ActiveSession state to ExtendedSession state. No cleanup needed at this point", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v114) = 0;
      LODWORD(v101) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 Moving from ActiveSession state to ExtendedSession state. No cleanup needed at this point", &v114, v101);
      v20 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v40);
      goto LABEL_193;
    case 3:
      if (sub_100A6F8CC(a1) == 1)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v12 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 unexpectedly disabled during active emergency call", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 unexpectedly disabled during active emergency call", &v114, 2);
          v92 = (uint8_t *)v91;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v91);
          if (v92 != buf)
            free(v92);
        }
        sub_101399E28(a1, 0);
        sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 14);
        v13 = *(_QWORD *)(a1 + 2088);
        if (v13)
          sub_100A72390(a1, (unsigned int *)(v13 + 24), 5u);
        return sub_100A6F8CC(a1);
      }
      return v2;
    case 4:
      v2 = sub_100A6F8CC(a1);
      if (v2 <= 2)
      {
        sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 10);
        v26 = *(_QWORD *)(a1 + 2088);
        if (v26)
          sub_100A72390(a1, (unsigned int *)(v26 + 24), 3u);
      }
      v27 = *(void **)(a1 + 1984);
      if (v27)
      {
        v28 = *(unsigned int *)(a1 + 1448);
        *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
        v29 = *(_QWORD *)(a1 + 56);
        if (!v29)
          sub_10025FD1C();
        v30 = *(unsigned int *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v29 + 48))(v29, buf);
        v31 = sub_100CD593C(a1 + 112);
        *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
        v32 = *(_QWORD *)(a1 + 56);
        if (!v32)
          sub_10025FD1C();
        objc_msgSend(v27, "handleUpdatesToSim:Rat:WifiEmergency:bandInfo:", v28, v30, v31, *(unsigned int *)((*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v32 + 48))(v32, buf) + 160));
      }
      return v2;
    case 5:
      v14 = *(unsigned int *)(a1 + 1780);
      if ((_DWORD)v14)
      {
        *(_DWORD *)(a1 + 1784) = v14;
        *(_DWORD *)(a1 + 1292) = sub_100F78E40(v14, a2);
        v15 = *(_QWORD *)(a1 + 1768);
        if (v15)
          sub_1012C5FA0(v15, *(_DWORD *)(a1 + 1784));
      }
      if (*(_BYTE *)(a1 + 1777) || !*(_BYTE *)(a1 + 1776))
        return v2;
      if ((*(_DWORD *)(a1 + 1440) - 2) >= 4)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v73 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#EED2 EmergencyCallStatusChange,no ongoing call,cancel CanSendADRTimeout", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 EmergencyCallStatusChange,no ongoing call,cancel CanSendADRTimeout", &v114, 2);
          v98 = (uint8_t *)v97;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v97);
          if (v98 != buf)
            free(v98);
        }
        sub_100A75C90(a1);
      }
      else
      {
        if (!sub_100CD596C(a1 + 112)
          && ((*(_DWORD *)(a1 + 1440) - 2) > 3 || (*(_DWORD *)(a1 + 1784) - 3) < 4))
        {
          return v2;
        }
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v16 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2 EmergencyCallStatusChange,ADR allowed immediately", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 EmergencyCallStatusChange,ADR allowed immediately", &v114, 2);
          v100 = (uint8_t *)v99;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v99);
          if (v100 != buf)
            free(v100);
        }
        sub_100A75C90(a1);
        *(_BYTE *)(a1 + 1777) = 1;
        sub_100A75E30(a1);
      }
      return 3;
    case 6:
      if (*(_BYTE *)(a1 + 1779))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v22 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#EED2 CachedLocationUpdate,triggering ADR send", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 CachedLocationUpdate,triggering ADR send", &v114, 2);
          v81 = (uint8_t *)v80;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v80);
          if (v81 != buf)
            free(v81);
        }
        sub_100A75E30(a1);
      }
      if (*(_BYTE *)(a1 + 1856))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v23 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2 CachedLocationUpdate,triggering Control Data send for APNS token", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          LODWORD(v101) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 CachedLocationUpdate,triggering Control Data send for APNS token", &v114, v101);
          v88 = (uint8_t *)v87;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v87);
          if (v88 != buf)
            free(v88);
        }
        sub_100A768D0(a1);
        sub_100A77908(a1);
      }
      return 3;
    case 7:
      sub_100A746A8(a1);
      v41 = sub_100A57ECC((int *)(a1 + 1448));
      sub_100A6E834(a1 + 1536, 7, *((double *)v41 + 18));
      return 3;
    case 8:
      *(_BYTE *)(a1 + 1778) = 1;
      goto LABEL_160;
    case 9:
      if (*(_BYTE *)(a1 + 2064) && *(_BYTE *)(a1 + 2065))
        goto LABEL_135;
      if (*(_BYTE *)(a1 + 1778))
        goto LABEL_160;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v52 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#EED2 delaying sending updated ADR data until timer fires or we fetch all ADR data", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v114) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 delaying sending updated ADR data until timer fires or we fetch all ADR data", &v114, 2);
      v20 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v53);
      goto LABEL_193;
    case 10:
      if (*(_BYTE *)(a1 + 1778) || !*(_BYTE *)(a1 + 2064) || !*(_BYTE *)(a1 + 2065))
        return v2;
LABEL_135:
      *(_BYTE *)(a1 + 1778) = 1;
      sub_100A6F304(a1 + 1536, 8);
LABEL_160:
      sub_100A75E30(a1);
      return v2;
    case 11:
      sub_101399E28(a1, 0);
      return v2;
    case 12:
      *(_BYTE *)(a1 + 1776) = 0;
      if (*(_BYTE *)(a1 + 1777))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v24 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#EED2 CanSendADRTimeout,ADR sending already allowed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 CanSendADRTimeout,ADR sending already allowed", &v114, 2);
          v20 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v25);
          goto LABEL_193;
        }
      }
      else
      {
        if ((*(_DWORD *)(a1 + 1440) - 2) < 4)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v51 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#EED2 CanSendADRTimeout,ongoing emergency call,allow ADR", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            LOWORD(v114) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 CanSendADRTimeout,ongoing emergency call,allow ADR", &v114, 2);
            v96 = (uint8_t *)v95;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v95);
            if (v96 != buf)
              free(v96);
          }
          *(_BYTE *)(a1 + 1777) = 1;
          sub_100A75E30(a1);
          return 3;
        }
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v54 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#EED2 CanSendADRTimeout,no ongoing emergency call", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 CanSendADRTimeout,no ongoing emergency call", &v114, 2);
          v20 = (uint8_t *)v55;
          sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v55);
          goto LABEL_193;
        }
      }
      break;
    case 14:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 LIS Timeout while in ActiveSession. Ignoring it", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v114) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 LIS Timeout while in ActiveSession. Ignoring it", &v114, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v19);
      goto LABEL_193;
    case 15:
      sub_100A768D0(a1);
      sub_100A77908(a1);
      return v2;
    case 16:
      sub_100A78E14(a1);
      return v2;
    case 17:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v42 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected InitializationTimeout in ActiveSession state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v114) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Warning #EED2 unexpected InitializationTimeout in ActiveSession state", &v114, 2);
      v20 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v43);
      goto LABEL_193;
    case 18:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v46 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected DebounceTimeout in ActiveSession state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v114) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Warning #EED2 unexpected DebounceTimeout in ActiveSession state", &v114, 2);
      v20 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v47);
      goto LABEL_193;
    case 19:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v44 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in ActiveSession State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v114) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 PhoneNumberChanged in ActiveSession State, no-op", &v114, 2);
      v20 = (uint8_t *)v45;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v45);
      goto LABEL_193;
    case 20:
      sub_100A746A8(a1);
      if (*(_QWORD *)(a1 + 1840))
        sub_100A768D0(a1);
      return v2;
    case 21:
      if (*(_QWORD *)(a1 + 1840))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v21 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in ActiveSession State, sendControlData", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 BAACertDownload in ActiveSession State, sendControlData", &v114, 2);
          v79 = (uint8_t *)v78;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v78);
          if (v79 != buf)
            free(v79);
        }
        sub_100A768D0(a1);
      }
      if (*(_BYTE *)(a1 + 1778) && *(_BYTE *)(a1 + 2064) && *(_BYTE *)(a1 + 2065))
        sub_100A75E30(a1);
      return 3;
    case 22:
      if (*(_QWORD *)(a1 + 1840))
        return v2;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v48 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#EED2 APNSReconnected and nil fAPNSToken. Request APNS token", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v114) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 APNSReconnected and nil fAPNSToken. Request APNS token", &v114, 2);
        v94 = (uint8_t *)v93;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v93);
        if (v94 != buf)
          free(v94);
      }
      sub_100A734E4(a1);
      return 3;
    case 23:
      sub_100A7A3F0(a1);
      return v2;
    case 24:
      if (*(_QWORD *)(a1 + 2016))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v17 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#EED2 CoexMetricUpdated in ActiveSession state, cache the metric data", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 CoexMetricUpdated in ActiveSession state, cache the metric data", &v114, 2);
          v77 = (uint8_t *)v76;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v76);
          if (v77 != buf)
            free(v77);
        }
        sub_100A7A8B8(a1);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v49 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#EED2 CoexMetricUpdated in ActiveSession state, but nil fCoexMetricDict", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v114) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 CoexMetricUpdated in ActiveSession state, but nil fCoexMetricDict", &v114, 2);
          v20 = (uint8_t *)v50;
          sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v50);
LABEL_193:
          if (v20 != buf)
            free(v20);
        }
      }
      break;
    default:
      return v2;
  }
  return 3;
}

void sub_100A60194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  a19 = (void **)(v19 - 112);
  sub_1006AB5A0(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100A60374(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t *v8;
  double v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t *v15;
  double v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  uint8_t *v27;
  NSObject *v28;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  _QWORD v40[2];
  uint8_t buf[1640];

  v2 = 4;
  switch(a2)
  {
    case 0:
      if (*(double *)(a1 + 1896) <= 0.0)
        sub_100A7404C(a1);
      sub_100A75C90(a1);
      goto LABEL_5;
    case 1:
      sub_100A74EC4(a1);
      return v2;
    case 3:
      if (sub_100A6F8CC(a1) == 1)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v5 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 unexpectedly disabled during extended emergency state (i.e. EEM mode)", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v40[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 unexpectedly disabled during extended emergency state (i.e. EEM mode)", v40, 2);
          v39 = (uint8_t *)v38;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
        sub_101399E28(a1, 0);
        sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 14);
        v6 = *(_QWORD *)(a1 + 2088);
        if (v6)
          sub_100A72390(a1, (unsigned int *)(v6 + 24), 5u);
        return sub_100A6F8CC(a1);
      }
      return v2;
    case 4:
      v2 = sub_100A6F8CC(a1);
      if ((v2 & 6) != 2)
        return v2;
      goto LABEL_56;
    case 5:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2 EmergencyCallStatusChange in ExtendedSession state,no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 EmergencyCallStatusChange in ExtendedSession state,no-op", v40, 2, v40[0]);
      goto LABEL_159;
    case 6:
      if (!*(_BYTE *)(a1 + 1779))
        return v2;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2 CachedLocationUpdate,triggering ADR send", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v40[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 CachedLocationUpdate,triggering ADR send", v40, 2);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      sub_100A75E30(a1);
      return 4;
    case 7:
LABEL_5:
      sub_100A746A8(a1);
      v4 = sub_100A57ECC((int *)(a1 + 1448));
      sub_100A6E834(a1 + 1536, 7, *((double *)v4 + 18));
      return 4;
    case 8:
      *(_BYTE *)(a1 + 1778) = 1;
      goto LABEL_49;
    case 9:
      if (*(_BYTE *)(a1 + 2064) && *(_BYTE *)(a1 + 2065))
        goto LABEL_48;
      if (*(_BYTE *)(a1 + 1778))
        goto LABEL_49;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2 delaying sending updated ADR data until timer fires or we fetch all ADR data", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 delaying sending updated ADR data until timer fires or we fetch all ADR data", v40, 2, v40[0]);
      goto LABEL_159;
    case 10:
      if (*(_BYTE *)(a1 + 1778) || !*(_BYTE *)(a1 + 2064) || !*(_BYTE *)(a1 + 2065))
        return v2;
LABEL_48:
      *(_BYTE *)(a1 + 1778) = 1;
      sub_100A6F304(a1 + 1536, 8);
LABEL_49:
      sub_100A75E30(a1);
      return v2;
    case 11:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SessionAssertReleased fired in ExtendedSession state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v40[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SessionAssertReleased fired in ExtendedSession state", v40, 2);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      sub_101399E28(a1, 0);
      v2 = sub_100A6F8CC(a1);
      if ((_DWORD)v2 != 4)
      {
LABEL_56:
        sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 10);
        v13 = *(_QWORD *)(a1 + 2088);
        if (v13)
          sub_100A72390(a1, (unsigned int *)(v13 + 24), 3u);
      }
      return v2;
    case 12:
      *(_BYTE *)(a1 + 1776) = 0;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#EED2 CanSendADRTimeout,no ongoing emergency call in ExtendedSession state, ignore Event::CanSendADRTimeout", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 CanSendADRTimeout,no ongoing emergency call in ExtendedSession state, ignore Event::CanSendADRTimeout", v40, 2, v40[0]);
      goto LABEL_136;
    case 14:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v17 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 LISResponseTimeout while in ExtendedSession. Ignoring it", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 LISResponseTimeout while in ExtendedSession. Ignoring it", v40, 2, v40[0]);
      goto LABEL_159;
    case 15:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSTokenReceived in ExtendedSession state. Ignore it", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v40[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSTokenReceived in ExtendedSession state. Ignore it", v40, 2);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v19 = *(void **)(a1 + 1840);
      if (v19)
      {

        *(_QWORD *)(a1 + 1840) = 0;
      }
      return 4;
    case 16:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSMessageReceived in ExtendedSession state. Add directly to RequestsHandled queue", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v40[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSMessageReceived in ExtendedSession state. Add directly to RequestsHandled queue", v40, 2);
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      sub_100A7AB68(a1);
      return 4;
    case 17:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v21 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected InitializationTimeout in ExtendedSession state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Warning #EED2 unexpected InitializationTimeout in ExtendedSession state", v40, 2, v40[0]);
      goto LABEL_136;
    case 18:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v26 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected DebounceTimeout in ExtendedSession state", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Warning #EED2 unexpected DebounceTimeout in ExtendedSession state", v40, 2, v40[0]);
LABEL_136:
      v27 = v15;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v16);
      goto LABEL_160;
    case 19:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v22 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in ExtendedSession State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 PhoneNumberChanged in ExtendedSession State, no-op", v40, 2, v40[0]);
      goto LABEL_159;
    case 20:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v23 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2 CallEndpointChanged in ExtendedSession State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 CallEndpointChanged in ExtendedSession State, no-op", v40, 2, v40[0]);
      goto LABEL_159;
    case 21:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v24 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in ExtendedSession State, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 BAACertDownload in ExtendedSession State, no-op", v40, 2, v40[0]);
      goto LABEL_159;
    case 22:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v28 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSReconnected in ExtendedSession state, Ignore it", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 APNSReconnected in ExtendedSession state, Ignore it", v40, 2, v40[0]);
      goto LABEL_159;
    case 23:
      sub_100A7A3F0(a1);
      return v2;
    case 24:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v25 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CoexMetricUpdated in ExtendedSession state, no-op", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 4;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 CoexMetricUpdated in ExtendedSession state, no-op", v40, 2, v40[0]);
LABEL_159:
      v27 = v8;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v9);
LABEL_160:
      if (v27 != buf)
        free(v27);
      return 4;
    default:
      return v2;
  }
}

uint64_t sub_100A615C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _WORD v19[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v0 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,deleting cached info", buf, 2u);
  }
  v1 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v1)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v19[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,deleting cached info", v19, 2);
    v11 = (uint8_t *)v10;
    v1 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::deleteCachedBaaInfo()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v2 = sub_100A7C4FC(v1, (uint64_t)CFSTR("com.apple.locationd.BAA.key"));
  if ((v2 & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA private key", buf, 2u);
    }
    v2 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v2)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v19[0] = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unable to delete existing BAA private key", v19, v18);
      v13 = (uint8_t *)v12;
      v2 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::deleteCachedBaaInfo()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  v4 = sub_100A7CB94(v2, (uint64_t)CFSTR("com.apple.locationd.BAA.leafCert"));
  if ((v4 & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA leaf cert", buf, 2u);
    }
    v4 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v19[0] = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unable to delete existing BAA leaf cert", v19, v18);
      v15 = (uint8_t *)v14;
      v4 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::deleteCachedBaaInfo()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  if (!sub_100A7CB94(v4, (uint64_t)CFSTR("com.apple.locationd.BAA.intCert")))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA intermediate cert", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v19[0] = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unable to delete existing BAA intermediate cert", v19, v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::deleteCachedBaaInfo()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  v7 = sub_1001FD94C();
  *(_DWORD *)buf = 0;
  sub_10011B5B8(v7, CFSTR("BaaNextCertRequestTime"), buf);
  v8 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 944))(v8);
}

void sub_100A61B20(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const void *v9;
  NSObject *v10;
  NSObject *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  _DWORD v40[2];
  __int16 v41;
  _BOOL4 v42;
  __int16 v43;
  _BOOL4 v44;
  uint8_t buf[4];
  _BOOL4 v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  _BOOL4 v50;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,loading cached info", buf, 2u);
  }
  v3 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v3)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v40[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,loading cached info", v40, 2);
    v22 = (uint8_t *)v21;
    v3 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v39 = 0;
  v4 = sub_100A7C2BC(v3, (uint64_t)CFSTR("com.apple.locationd.BAA.key"), &v39);
  if (v4)
  {
    v5 = a1[210];
    if (v5)
      CFRelease((CFTypeRef)v5);
    a1[210] = v39;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to retrieve BAA private key from keychain", buf, 2u);
    }
    v5 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      LODWORD(v36) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unable to retrieve BAA private key from keychain", v40, v36);
      v29 = (uint8_t *)v28;
      v5 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
  v38 = 0;
  if (sub_100A7C968(v5, (uint64_t)CFSTR("com.apple.locationd.BAA.leafCert"), &v38))
  {
    v7 = a1[211];
    if (v7)
      CFRelease((CFTypeRef)v7);
    a1[211] = v38;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to retrieve BAA leaf cert from keychain", buf, 2u);
    }
    v7 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      LODWORD(v36) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unable to retrieve BAA leaf cert from keychain", v40, v36);
      v31 = (uint8_t *)v30;
      v7 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    v4 = 0;
  }
  v37 = 0;
  if (!sub_100A7C968(v7, (uint64_t)CFSTR("com.apple.locationd.BAA.intCert"), &v37))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to retrieve BAA intermediate cert from keychain", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      LODWORD(v36) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unable to retrieve BAA intermediate cert from keychain", v40, v36);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    goto LABEL_35;
  }
  v9 = (const void *)a1[212];
  if (v9)
    CFRelease(v9);
  a1[212] = v37;
  if (!v4)
  {
LABEL_35:
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v12 = a1[210] == 0;
      v13 = a1[211] == 0;
      v14 = a1[212] == 0;
      *(_DWORD *)buf = 67240704;
      v46 = v12;
      v47 = 1026;
      v48 = v13;
      v49 = 1026;
      v50 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,following info missing in keychain,private key,%{public}d,leaf cert,%{public}d,intermediate cert,%{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v23 = a1[210] == 0;
      v24 = a1[211] == 0;
      v25 = a1[212] == 0;
      v40[0] = 67240704;
      v40[1] = v23;
      v41 = 1026;
      v42 = v24;
      v43 = 1026;
      v44 = v25;
      LODWORD(v36) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,following info missing in keychain,private key,%{public}d,leaf cert,%{public}d,intermediate cert,%{public}d", v40, v36);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    v15 = (const void *)a1[210];
    if (v15)
    {
      CFRelease(v15);
      a1[210] = 0;
    }
    v16 = (const void *)a1[211];
    if (v16)
    {
      CFRelease(v16);
      a1[211] = 0;
    }
    v17 = (const void *)a1[212];
    if (v17)
    {
      CFRelease(v17);
      a1[212] = 0;
    }
  }
  v18 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 936))(v18);
  v19 = sub_1001FD94C();
  if ((sub_1001FD9FC(v19, (uint64_t)CFSTR("BaaNextCertRequestTime"), a1 + 213) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v20 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,cache did not contain next BAA cert request time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v40[0]) = 0;
      LODWORD(v36) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,cache did not contain next BAA cert request time", v40, v36);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
  }
  sub_100A7CFE8(a1);
}

void sub_100A62408(uint64_t a1, unsigned int a2)
{
  int v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  void *__p[2];
  char v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  void **v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;

  v4 = sub_100A7DA78((_QWORD *)a1);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100A7DAE4(a2, __p);
    v6 = v32 >= 0 ? __p : (void **)__p[0];
    v7 = *(_QWORD *)(a1 + 1704);
    *(_DWORD *)buf = 68289794;
    v34 = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2082;
    v38 = v6;
    v39 = 1026;
    v40 = v4;
    v41 = 2050;
    v42 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#BAA,checking cert request status\", \"reason\":%{public, location:escape_only}s, \"valid cart available\":%{public}hhd, \"next scheduled request\":\"%{public}.1f\"}", buf, 0x2Cu);
    if (v32 < 0)
      operator delete(__p[0]);
  }
  if (*(_BYTE *)(a1 + 1677))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,there is a cert request outstanding already,no need to do anything until we get a response", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,there is a cert request outstanding already,no need to do anything until we get a response", __p, 2);
    v13 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v18);
LABEL_72:
    if (v13 != buf)
      free(v13);
    return;
  }
  if (!*(_BYTE *)(a1 + 1676))
  {
    if ((sub_100A579D4(a1 + 1448) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,no need to start XPC activity", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,no need to start XPC activity", __p, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v12);
        goto LABEL_72;
      }
      return;
    }
    if (!*(_BYTE *)(a1 + 1676))
    {
LABEL_18:
      switch(a2)
      {
        case 0u:
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v14 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,need to start XPC activity", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            LOWORD(__p[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,need to start XPC activity", __p, 2);
            v24 = (uint8_t *)v23;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
          sub_100A7DCBC(a1, 0);
          sub_100A7E2AC(a1);
          break;
        case 1u:
          if (sub_100A7DCBC(a1, 1))
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v15 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,next cert request time changed so (re)starting XPC activity", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_102166788);
              LOWORD(__p[0]) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,next cert request time changed so (re)starting XPC activity", __p, 2);
              v26 = (uint8_t *)v25;
              sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v25);
              if (v26 != buf)
                free(v26);
            }
            sub_100A7DB10(a1);
            sub_100A7E2AC(a1);
          }
          else if (!*(_BYTE *)(a1 + 1676))
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v17 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,need to start XPC activity", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_102166788);
              LOWORD(__p[0]) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,need to start XPC activity", __p, 2);
              v30 = (uint8_t *)v29;
              sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v29);
              if (v30 != buf)
                free(v30);
            }
            sub_100A7E2AC(a1);
          }
          break;
        case 2u:
          if ((v4 & 1) == 0)
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v16 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,need to request cert immediately for ongoing session", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_102166788);
              LOWORD(__p[0]) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,need to request cert immediately for ongoing session", __p, 2);
              v28 = (uint8_t *)v27;
              sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v27);
              if (v28 != buf)
                free(v28);
            }
            sub_100A7DB10(a1);
            sub_100A7E794(a1);
          }
          break;
        case 3u:
        case 4u:
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v9 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,scheduling next cert request", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            LOWORD(__p[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,scheduling next cert request", __p, 2);
            v22 = (uint8_t *)v21;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v21);
            if (v22 != buf)
              free(v22);
          }
          sub_100A7DCBC(a1, a2);
          sub_100A7E2AC(a1);
          break;
        default:
          return;
      }
      return;
    }
  }
  if ((sub_100A579D4(a1 + 1448) & 1) != 0)
    goto LABEL_18;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,need to stop XPC activity due to device settings", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,need to stop XPC activity due to device settings", __p, 2);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_100A7DB10(a1);
}

void sub_100A62F84(uint64_t a1)
{
  double Current;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  id v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  _QWORD v16[5];
  int v17;
  double v18;
  _DWORD v19[4];
  uint8_t buf[8];
  std::__shared_weak_count *v21;

  v18 = 0.0;
  Current = CFAbsoluteTimeGetCurrent();
  v17 = 86400;
  sub_1001E4804(buf);
  sub_1001E4B84(*(uint64_t *)buf, "ConfiguredBAAReportingInterval", &v17);
  v3 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 936))(v6);
  v7 = sub_1001FD94C();
  if (sub_1001FD9FC(v7, (uint64_t)CFSTR("LastBAADailyReportSent"), &v18))
  {
    v8 = (int)(Current - v18);
    v9 = 300;
    v10 = __OFSUB__(v17, v8);
    v11 = v17 - v8;
    if (!((v11 < 0) ^ v10 | (v11 == 0)))
    {
      if (v11 <= 300)
        v9 = 300;
      else
        v9 = v11;
    }
  }
  else
  {
    v9 = 300;
  }
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
  *(_QWORD *)(a1 + 2072) = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100A85E28;
  v16[3] = &unk_10212ECA0;
  v16[4] = a1;
  objc_msgSend(v12, "setHandler:", v16);
  objc_msgSend(*(id *)(a1 + 2072), "setNextFireDelay:", (double)v9);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v13 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#EED2,initializeBAADailyReporting,send daily BAA report after %{public}d seconds", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v19[0] = 67240192;
    v19[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,initializeBAADailyReporting,send daily BAA report after %{public}d seconds", v19, 8);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeBAADailyReporting()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100A63254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A63270(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLEmergencyEED2::onSosProviderNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021667A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyEED2::onSosProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021667A8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyEED2::onSosProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100A6DBCC(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100A63420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100A63440(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  const char *v5;
  uint8_t *v6;
  _QWORD v7[5];
  void *__dst[2];
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  _WORD v22[8];
  uint8_t buf[24];
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;

  if (objc_opt_class(SOSUtilities, a2))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2 fetching SOS/EED2 UI toggle", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v22[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 fetching SOS/EED2 UI toggle", v22, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::fetchSosToggleState()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_1001B8590((std::string *)&qword_102306478, (uint64_t)buf);
    v4 = *(void **)(a1 + 24);
    sub_1001AF190((char *)__dst, (__int128 *)buf);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100A6DDB8;
    v7[3] = &unk_102145848;
    v7[4] = a1;
    objc_msgSend(v4, "fetchClientStaticRegistrationResult:withReply:", sub_1001AE728((__int128 *)__dst), v7);
    if (v21 < 0)
      operator delete(__p);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16);
    if (v15 < 0)
      operator delete(v14);
    if (v13 < 0)
      operator delete(v12);
    if (v11 < 0)
      operator delete(v10);
    if (v9 < 0)
      operator delete(__dst[0]);
    if (v35 < 0)
      operator delete(v34);
    if (v33 < 0)
      operator delete(v32);
    if (v31 < 0)
      operator delete(v30);
    if (v29 < 0)
      operator delete(v28);
    if (v27 < 0)
      operator delete(v26);
    if (v25 < 0)
      operator delete(v24);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
  }
}

void sub_100A63728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_100010174((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_100A63754(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint8_t *v5;
  NSObject *v6;
  void *v7;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[5];
  _WORD v11[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 2024))
  {
    if (*(_BYTE *)(a1 + 2032))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v2 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2 medical ID data fetch already pending", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 medical ID data fetch already pending", v11, 2);
LABEL_19:
        v5 = (uint8_t *)v3;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::fetchMedicalIdData()", "%s\n", v3);
        if (v5 != buf)
          free(v5);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2 fetching medical ID data", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 fetching medical ID data", v11, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::fetchMedicalIdData()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      *(_BYTE *)(a1 + 2032) = 1;
      v7 = *(void **)(a1 + 2024);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100A8519C;
      v10[3] = &unk_102166508;
      v10[4] = a1;
      objc_msgSend(v7, "fetchMedicalIDDataWithCompletion:", v10);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 cannot fetch medical ID data", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 cannot fetch medical ID data", v11, 2);
      goto LABEL_19;
    }
  }
}

void sub_100A63B30(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,medical ID changed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,medical ID changed", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::CLEmergencyEED2(id<CLIntersiloUniverse>, id<CLClientManagerPublicProtocol>, NetworkAndSimInfoCallback, std::shared_ptr<CLEmergencyAWD>, LocationCallback)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100A63754(v1);
}

uint64_t sub_100A63CC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  _QWORD *v28;
  _BYTE *v29;
  NSObject *v30;
  os_log_type_t v31;
  _QWORD *v32;
  uint64_t *v33;
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  NSObject *v44;
  os_log_type_t v45;
  _QWORD *v46;
  uint64_t *v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  void **v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  const char *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  void **v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  void **v92;
  char *v93;
  char *v94;
  const char *v95;
  const char *v96;
  int v97;
  void *v98[2];
  char v99;
  unsigned int v100;
  _BYTE __p[12];
  __int16 v102;
  _BYTE *v103;
  __int16 v104;
  void **v105;
  _BYTE buf[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  _BYTE *v110;
  _BYTE v111[12];
  __int16 v112;
  _BYTE *v113;
  char v114;

  ++*(_DWORD *)(a1 + 88);
  v100 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_101917770();
    goto LABEL_157;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_1019178E0(qword_1022A0070 == -1);
    goto LABEL_157;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102166828);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    sub_100A6C7BC(*(_DWORD *)(a1 + 4), __p);
    v8 = SHIBYTE(v104);
    v9 = *(_BYTE **)__p;
    sub_100A6C790(a2, v111);
    v10 = __p;
    if (v8 < 0)
      v10 = v9;
    if (v114 >= 0)
      v11 = v111;
    else
      v11 = *(_BYTE **)v111;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v107 = 2080;
    v108 = v10;
    v109 = 2080;
    v110 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v114 < 0)
      operator delete(*(void **)v111);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v58 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v58 = (_QWORD *)*v58;
    v59 = qword_1022A0078;
    v60 = *(unsigned __int8 *)(a1 + 120);
    sub_100A6C7BC(*(_DWORD *)(a1 + 4), v111);
    v61 = v114;
    v62 = *(_BYTE **)v111;
    sub_100A6C790(a2, v98);
    v63 = v111;
    if (v61 < 0)
      v63 = v62;
    if (v99 >= 0)
      v64 = v98;
    else
      v64 = (void **)v98[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v58;
    v102 = 2080;
    v103 = v63;
    v104 = 2080;
    v105 = v64;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, v60, "%scurrent_state,%s,event,%s", __p, 32, v96);
    v66 = v65;
    if (v99 < 0)
      operator delete(v98[0]);
    v3 = &qword_1022A0000;
    if (v114 < 0)
      operator delete(*(void **)v111);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v66);
    if (v66 != buf)
      free(v66);
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    goto LABEL_28;
  v13 = (uint64_t **)(a1 + 8);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = a1 + 16;
  do
  {
    v16 = *(_DWORD *)(v12 + 32);
    v17 = v16 < v14;
    if (v16 >= v14)
      v18 = (uint64_t *)v12;
    else
      v18 = (uint64_t *)(v12 + 8);
    if (!v17)
      v15 = v12;
    v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_101917A54();
    goto LABEL_157;
  }
  v20 = *(uint64_t (**)(_QWORD *, uint64_t))(v15 + 40);
  v19 = *(_QWORD *)(v15 + 48);
  v21 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v19 >> 1));
  if ((v19 & 1) != 0)
    v20 = *(uint64_t (**)(_QWORD *, uint64_t))(*v21 + v20);
  v22 = v20(v21, a2);
  v23 = v22;
  v97 = v22;
  if (a2 <= 1 && (_DWORD)v22 != v100)
  {
    sub_101917EA4();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v25 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v25 = (_QWORD *)*v25;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_102166828);
      v73 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v73 = (_QWORD *)*v73;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v73;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v75 = (char *)v74;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_102166828);
  v26 = qword_1022A0078;
  v27 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v27))
  {
    v28 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v28 = (_QWORD *)*v28;
    sub_100A6C7BC(v23, buf);
    if (v109 >= 0)
      v29 = buf;
    else
      v29 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v28;
    v102 = 2080;
    v103 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v67 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v67 = (_QWORD *)*v67;
    v68 = qword_1022A0078;
    v69 = *(unsigned __int8 *)(a1 + 120);
    sub_100A6C7BC(v23, __p);
    if (v104 >= 0)
      v70 = __p;
    else
      v70 = *(_BYTE **)__p;
    *(_DWORD *)v111 = 136315394;
    *(_QWORD *)&v111[4] = v67;
    v112 = 2080;
    v113 = v70;
    LODWORD(v95) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, v69, "%snewState,%s", v111, v95);
    v72 = v71;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v72);
    if (v72 != buf)
      free(v72);
  }
  if ((_DWORD)v23 != v100)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v30 = qword_1022A0078;
    v31 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v31))
    {
      v32 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v32 = (_QWORD *)*v32;
      sub_100A6C7BC(v100, __p);
      v33 = v3;
      v34 = SHIBYTE(v104);
      v35 = *(_BYTE **)__p;
      sub_1015A2E04(v111, "Exit");
      v36 = __p;
      if (v34 < 0)
        v36 = v35;
      if (v114 >= 0)
        v37 = v111;
      else
        v37 = *(_BYTE **)v111;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v32;
      v107 = 2080;
      v108 = v36;
      v109 = 2080;
      v110 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v114 < 0)
        operator delete(*(void **)v111);
      v3 = v33;
      if (SHIBYTE(v104) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_102166828);
      v76 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v76 = (_QWORD *)*v76;
      v77 = qword_1022A0078;
      v78 = *(unsigned __int8 *)(a1 + 120);
      sub_100A6C7BC(v100, v111);
      v79 = v3;
      v80 = v114;
      v81 = *(_BYTE **)v111;
      sub_1015A2E04(v98, "Exit");
      v82 = v111;
      if (v80 < 0)
        v82 = v81;
      if (v99 >= 0)
        v83 = v98;
      else
        v83 = (void **)v98[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v76;
      v102 = 2080;
      v103 = v82;
      v104 = 2080;
      v105 = v83;
      LODWORD(v95) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, v78, "%soldState,%s,event,%s", __p, v95, (const char *)(a1 + 8));
      v85 = v84;
      if (v99 < 0)
        operator delete(v98[0]);
      v3 = v79;
      v13 = (uint64_t **)v96;
      if (v114 < 0)
        operator delete(*(void **)v111);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v85);
      if (v85 != buf)
        free(v85);
    }
    v38 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v100;
    v39 = sub_1000610B4(v13, (int *)&v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v40 = v39[5];
    v41 = (uint64_t)v39[6];
    v42 = (_QWORD *)(v38 + (v41 >> 1));
    if ((v41 & 1) != 0)
      v40 = *(uint64_t **)(*v42 + v40);
    v43 = ((uint64_t (*)(_QWORD *, uint64_t))v40)(v42, 1);
    if (v43 == v100)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_102166828);
      v44 = qword_1022A0078;
      v45 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v45))
      {
        v46 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v46 = (_QWORD *)*v46;
        sub_100A6C7BC(v23, __p);
        v47 = v3;
        v48 = SHIBYTE(v104);
        v49 = *(_BYTE **)__p;
        sub_1015A2E04(v111, "Enter");
        v50 = __p;
        if (v48 < 0)
          v50 = v49;
        if (v114 >= 0)
          v51 = v111;
        else
          v51 = *(_BYTE **)v111;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v46;
        v107 = 2080;
        v108 = v50;
        v109 = 2080;
        v110 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v114 < 0)
          operator delete(*(void **)v111);
        v3 = v47;
        if (SHIBYTE(v104) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_102166828);
        v86 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v86 = (_QWORD *)*v86;
        v87 = qword_1022A0078;
        v88 = *(unsigned __int8 *)(a1 + 120);
        sub_100A6C7BC(v23, v111);
        v89 = v114;
        v90 = *(_BYTE **)v111;
        sub_1015A2E04(v98, "Enter");
        v91 = v111;
        if (v89 < 0)
          v91 = v90;
        if (v99 >= 0)
          v92 = v98;
        else
          v92 = (void **)v98[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v86;
        v102 = 2080;
        v103 = v91;
        v104 = 2080;
        v105 = v92;
        LODWORD(v95) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, v88, "%snewState,%s,event,%s", __p, v95, v96);
        v94 = v93;
        if (v99 < 0)
          operator delete(v98[0]);
        if (v114 < 0)
          operator delete(*(void **)v111);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v94);
        if (v94 != buf)
          free(v94);
      }
      v52 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v97;
      v53 = sub_1000610B4(v13, &v97, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v54 = v53[5];
      v55 = (uint64_t)v53[6];
      v56 = (_QWORD *)(v52 + (v55 >> 1));
      if ((v55 & 1) != 0)
        v54 = *(uint64_t **)(*v56 + v54);
      v23 = ((uint64_t (*)(_QWORD *, _QWORD))v54)(v56, 0);
      if ((_DWORD)v23 == v97)
        goto LABEL_89;
      sub_101917BC4();
    }
    else
    {
      sub_101917D34();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_100A649B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A64A14(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1021663C8;

  *(_QWORD *)(a1 + 1664) = 0;
  v2 = *(const void **)(a1 + 1680);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 1680) = 0;
  }
  v3 = *(const void **)(a1 + 1688);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 1688) = 0;
  }
  v4 = *(const void **)(a1 + 1696);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 1696) = 0;
  }

  *(_QWORD *)(a1 + 1728) = 0;
  *(_QWORD *)(a1 + 1736) = 0;

  *(_QWORD *)(a1 + 1744) = 0;
  objc_msgSend(*(id *)(a1 + 1752), "invalidate");

  *(_QWORD *)(a1 + 1752) = 0;
  *(_QWORD *)(a1 + 2024) = 0;
  v5 = *(_DWORD *)(a1 + 2036);
  if (v5 != -1)
    notify_cancel(v5);
  objc_msgSend(*(id *)(a1 + 2072), "invalidate");

  *(_QWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2096) = 0;

  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1848) = 0;

  *(_QWORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a1 + 1872) = 0;

  *(_QWORD *)(a1 + 1968) = 0;
  *(_QWORD *)(a1 + 1888) = 0;

  *(_QWORD *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 1920) = 0;

  *(_QWORD *)(a1 + 1928) = 0;
  *(_QWORD *)(a1 + 1936) = 0;

  *(_QWORD *)(a1 + 2016) = 0;
  v6 = *(_QWORD *)(a1 + 2088);
  *(_QWORD *)(a1 + 2088) = 0;
  if (v6)
    operator delete();
  sub_10010D350(a1 + 2040, *(_QWORD **)(a1 + 2048));
  sub_100A93AA8((uint64_t *)(a1 + 1904), 0);
  sub_100067AC4(a1 + 1792);
  sub_100A93A6C((uint64_t *)(a1 + 1768), 0);
  v7 = *(_QWORD *)(a1 + 1720);
  *(_QWORD *)(a1 + 1720) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 1712);
  *(_QWORD *)(a1 + 1712) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_100A93988(a1 + 1536);
  sub_100A93294(a1 + 1496);
  sub_100A93294(a1 + 1456);
  return sub_101399A8C(a1);
}

void sub_100A64C10(uint64_t a1)
{
  sub_100A64A14(a1);
  operator delete();
}

uint64_t sub_100A64C34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t *v7;
  NSObject *v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t *v11;
  const char *v12;
  NSObject *v13;
  uint64_t *v14;
  const char *v15;
  NSObject *v16;
  uint64_t *v17;
  uint64_t *v18;
  NSObject *v19;
  uint64_t *v20;
  NSObject *v21;
  uint64_t *v22;
  const char *v23;
  NSObject *v24;
  uint64_t *v25;
  NSObject *v26;
  uint64_t *v27;
  NSObject *v28;
  uint64_t *v29;
  NSObject *v30;
  uint64_t *v31;
  NSObject *v32;
  uint64_t *v33;
  id v34;
  uint64_t i;
  uint64_t v36;
  NSObject *v37;
  int v38;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  const char *v42;
  uint8_t *v43;
  NSObject *v44;
  uint64_t *v45;
  const char *v46;
  uint64_t *v47;
  NSObject *v48;
  uint64_t *v49;
  const char *v50;
  const char *v51;
  NSObject *v52;
  const char *v53;
  NSObject *v54;
  const char *v55;
  NSObject *v56;
  const char *v57;
  NSObject *v58;
  const char *v59;
  NSObject *v60;
  const char *v61;
  uint64_t *v62;
  NSObject *v63;
  uint64_t *v64;
  uint64_t *v65;
  const char *v66;
  uint8_t *v67;
  NSObject *v68;
  uint64_t *v69;
  const char *v70;
  const char *v71;
  NSObject *v72;
  const char *v73;
  uint64_t *v74;
  NSObject *v75;
  uint64_t *v76;
  uint64_t *v77;
  const char *v78;
  uint8_t *v79;
  NSObject *v80;
  const char *v81;
  uint64_t *v82;
  NSObject *v83;
  const char *v84;
  uint64_t *v85;
  NSObject *v86;
  const char *v87;
  const char *v88;
  NSObject *v89;
  const char *v90;
  uint64_t *v91;
  NSObject *v92;
  uint64_t *v93;
  uint64_t *v94;
  const char *v95;
  uint8_t *v96;
  NSObject *v97;
  const char *v98;
  uint64_t *v99;
  NSObject *v100;
  const char *v101;
  uint64_t *v102;
  NSObject *v103;
  const char *v104;
  const char *v105;
  NSObject *v106;
  const char *v107;
  NSObject *v108;
  const char *v109;
  NSObject *v110;
  const char *v111;
  uint8_t *v112;
  NSObject *v113;
  uint64_t *v114;
  uint64_t *v116;
  const char *v117;
  uint8_t *v118;
  uint64_t *v119;
  const char *v120;
  uint8_t *v121;
  uint64_t *v122;
  const char *v123;
  uint8_t *v124;
  uint64_t *v125;
  const char *v126;
  uint8_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  const char *v130;
  uint8_t *v131;
  uint64_t *v132;
  const char *v133;
  uint8_t *v134;
  uint64_t *v135;
  const char *v136;
  uint8_t *v137;
  uint64_t *v138;
  const char *v139;
  uint8_t *v140;
  uint64_t *v141;
  const char *v142;
  uint8_t *v143;
  uint64_t *v144;
  const char *v145;
  uint8_t *v146;
  uint64_t *v147;
  const char *v148;
  uint8_t *v149;
  uint64_t *v150;
  const char *v151;
  uint8_t *v152;
  uint64_t *v153;
  const char *v154;
  uint8_t *v155;
  uint64_t *v156;
  const char *v157;
  uint64_t *v158;
  const char *v159;
  const char *v160;
  uint8_t *v161;
  const char *v162;
  uint8_t *v163;
  const char *v164;
  uint8_t *v165;
  const char *v166;
  uint8_t *v167;
  const char *v168;
  uint8_t *v169;
  const char *v170;
  uint8_t *v171;
  uint64_t *v172;
  const char *v173;
  uint8_t *v174;
  const char *v175;
  uint8_t *v176;
  const char *v177;
  uint8_t *v178;
  const char *v179;
  uint8_t *v180;
  const char *v181;
  uint8_t *v182;
  const char *v183;
  uint8_t *v184;
  const char *v185;
  uint8_t *v186;
  const char *v187;
  uint8_t *v188;
  const char *v189;
  uint8_t *v190;
  const char *v191;
  uint8_t *v192;
  uint64_t v193;
  _WORD v194[8];
  _QWORD v195[3];
  _QWORD v196[5];
  int v197;
  uint64_t *v198;
  int v199;
  uint64_t *v200;
  int v201;
  uint64_t *v202;
  int v203;
  uint64_t *v204;
  int v205;
  uint64_t *v206;
  int v207;
  _BYTE v208[18];
  uint8_t buf[4];
  _BYTE v210[18];

  if ((sub_1001E4874(a2, "Enabled", (BOOL *)a3) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v7 = a1;
      else
        v7 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2,no Enabled key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v116 = a1;
      else
        v116 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v116;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no Enabled key in %{public}s EED2 dict, using default", &v207, 12);
      v118 = (uint8_t *)v117;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v117);
      if (v118 != buf)
        free(v118);
    }
  }
  if ((sub_1001E4874(a2, "ADREnabled", (BOOL *)(a3 + 1)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v9 = a1;
      else
        v9 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#EED2,no ADREnabled key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v119 = a1;
      else
        v119 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v119;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no ADREnabled key in %{public}s EED2 dict, using default", &v207, v193);
      v121 = (uint8_t *)v120;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v120);
      if (v121 != buf)
        free(v121);
    }
  }
  if ((sub_1001E4874(a2, "DSAEnabled", (BOOL *)(a3 + 128)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v11 = a1;
      else
        v11 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EED2,no DSAEnabled key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v122 = a1;
      else
        v122 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v122;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no DSAEnabled key in %{public}s EED2 dict, using default", &v207, v193);
      v124 = (uint8_t *)v123;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v123);
      if (v124 != buf)
        free(v124);
    }
  }
  if (byte_10231238F >= 0)
    v12 = (const char *)&qword_102312378;
  else
    v12 = (const char *)qword_102312378;
  if ((sub_1001E4874(a2, v12, (BOOL *)(a3 + 2)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v14 = a1;
      else
        v14 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#EED2,no RequestsEnabled key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v125 = a1;
      else
        v125 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v125;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no RequestsEnabled key in %{public}s EED2 dict, using default", &v207, v193);
      v127 = (uint8_t *)v126;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v126);
      if (v127 != buf)
        free(v127);
    }
  }
  if (byte_10231247F >= 0)
    v15 = (const char *)&qword_102312468;
  else
    v15 = (const char *)qword_102312468;
  if ((sub_1001E4874(a2, v15, (BOOL *)(a3 + 129)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10231247F >= 0)
        v17 = &qword_102312468;
      else
        v17 = (uint64_t *)qword_102312468;
      if (*((char *)a1 + 23) >= 0)
        v18 = a1;
      else
        v18 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v210 = v17;
      *(_WORD *)&v210[8] = 2082;
      *(_QWORD *)&v210[10] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#EED2,no %{public}s key in %{public}s EED2 dict, using default", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_10231247F >= 0)
        v128 = &qword_102312468;
      else
        v128 = (uint64_t *)qword_102312468;
      if (*((char *)a1 + 23) >= 0)
        v129 = a1;
      else
        v129 = (uint64_t *)*a1;
      v207 = 136446466;
      *(_QWORD *)v208 = v128;
      *(_WORD *)&v208[8] = 2082;
      *(_QWORD *)&v208[10] = v129;
      LODWORD(v193) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no %{public}s key in %{public}s EED2 dict, using default", &v207, v193);
      v131 = (uint8_t *)v130;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v130);
      if (v131 != buf)
        free(v131);
    }
  }
  if (sub_1000BCB64(a2, "LISURL", (std::string *)(a3 + 8)))
  {
    std::string::insert((std::string *)(a3 + 8), 0, "https://");
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v20 = a1;
      else
        v20 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#EED2,no LISURL key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v132 = a1;
      else
        v132 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v132;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no LISURL key in %{public}s EED2 dict, using default", &v207, v193);
      v134 = (uint8_t *)v133;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v133);
      if (v134 != buf)
        free(v134);
    }
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)&xmmword_102311150);
  }
  if (sub_1000BCB64(a2, "ADRURL", (std::string *)(a3 + 32)))
  {
    std::string::insert((std::string *)(a3 + 32), 0, "https://");
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v21 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v22 = a1;
      else
        v22 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#EED2,no ADRURL key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v135 = a1;
      else
        v135 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v135;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no ADRURL key in %{public}s EED2 dict, using default", &v207, v193);
      v137 = (uint8_t *)v136;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v136);
      if (v137 != buf)
        free(v137);
    }
    std::string::operator=((std::string *)(a3 + 32), (const std::string *)&xmmword_102311168);
  }
  if (byte_1023123D7 >= 0)
    v23 = (const char *)&qword_1023123C0;
  else
    v23 = (const char *)qword_1023123C0;
  if (sub_1000BCB64(a2, v23, (std::string *)(a3 + 56)))
  {
    std::string::insert((std::string *)(a3 + 56), 0, "https://");
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v24 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v25 = a1;
      else
        v25 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#EED2,no ControlURL key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v138 = a1;
      else
        v138 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v138;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no ControlURL key in %{public}s EED2 dict, using default", &v207, v193);
      v140 = (uint8_t *)v139;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v139);
      if (v140 != buf)
        free(v140);
    }
    std::string::operator=((std::string *)(a3 + 56), (const std::string *)&xmmword_102311180);
  }
  if ((sub_1001FD98C(a2, "FirstLISPOSTDelay", (void *)(a3 + 80)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v26 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v27 = a1;
      else
        v27 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#EED2,no FirstLISPOSTDelay key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v141 = a1;
      else
        v141 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v141;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no FirstLISPOSTDelay key in %{public}s EED2 dict, using default", &v207, v193);
      v143 = (uint8_t *)v142;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v142);
      if (v143 != buf)
        free(v143);
    }
  }
  if ((sub_1001FD98C(a2, "PeriodicLISPOSTDelay", (void *)(a3 + 88)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v28 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v29 = a1;
      else
        v29 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#EED2,no PeriodicLISPOSTDelay key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v144 = a1;
      else
        v144 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v144;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no PeriodicLISPOSTDelay key in %{public}s EED2 dict, using default", &v207, v193);
      v146 = (uint8_t *)v145;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v145);
      if (v146 != buf)
        free(v146);
    }
  }
  if ((sub_1001FD98C(a2, "InitialADRPOSTTimeout", (void *)(a3 + 96)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v30 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v31 = a1;
      else
        v31 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#EED2,no InitialADRPOSTTimeout key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v147 = a1;
      else
        v147 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v147;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no InitialADRPOSTTimeout key in %{public}s EED2 dict, using default", &v207, v193);
      v149 = (uint8_t *)v148;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v148);
      if (v149 != buf)
        free(v149);
    }
  }
  if (!sub_1000BCB64(a2, "IntermediateCert", (std::string *)(a3 + 104)))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v32 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v33 = a1;
      else
        v33 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#EED2,no IntermediateCert key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v150 = a1;
      else
        v150 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v150;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no IntermediateCert key in %{public}s EED2 dict, using default", &v207, v193);
      v152 = (uint8_t *)v151;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v151);
      if (v152 != buf)
        free(v152);
    }
  }
  v34 = objc_msgSend((id)sub_10011A5AC(a2), "valueForKey:", CFSTR("PartnerInfo"));
  if (v34)
  {
    v36 = *(_QWORD *)(a3 + 136);
    for (i = *(_QWORD *)(a3 + 144); i != v36; sub_10085822C(a3 + 152, i))
      i -= 80;
    *(_QWORD *)(a3 + 144) = v36;
    v196[0] = _NSConcreteStackBlock;
    v196[1] = 3221225472;
    v196[2] = sub_100A68438;
    v196[3] = &unk_102166460;
    v196[4] = a3;
    objc_msgSend(v34, "enumerateObjectsUsingBlock:", v196);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v37 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v38 = -858993459 * ((*(_QWORD *)(a3 + 144) - *(_QWORD *)(a3 + 136)) >> 4);
      if (*((char *)a1 + 23) >= 0)
        v39 = a1;
      else
        v39 = (uint64_t *)*a1;
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)v210 = v38;
      *(_WORD *)&v210[4] = 2082;
      *(_QWORD *)&v210[6] = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#EED2,found %{public}d partners in PartnerInfo array in EED2 %{public}s dict", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v40 = -858993459 * ((*(_QWORD *)(a3 + 144) - *(_QWORD *)(a3 + 136)) >> 4);
      if (*((char *)a1 + 23) >= 0)
        v41 = a1;
      else
        v41 = (uint64_t *)*a1;
      v207 = 67240450;
      *(_DWORD *)v208 = v40;
      *(_WORD *)&v208[4] = 2082;
      *(_QWORD *)&v208[6] = v41;
      LODWORD(v193) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,found %{public}d partners in PartnerInfo array in EED2 %{public}s dict", &v207, v193);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v42);
LABEL_536:
      if (v43 != buf)
        free(v43);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v44 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v45 = a1;
      else
        v45 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#EED2,no PartnerInfo key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v158 = a1;
      else
        v158 = (uint64_t *)*a1;
      v207 = 136446210;
      *(_QWORD *)v208 = v158;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,no PartnerInfo key in %{public}s EED2 dict, using default", &v207, v193);
      v43 = (uint8_t *)v159;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v159);
      goto LABEL_536;
    }
  }
  sub_100119F3C(&v207);
  if (byte_102312497 >= 0)
    v46 = (const char *)&qword_102312480;
  else
    v46 = (const char *)qword_102312480;
  if (sub_100006BB4(a2, v46, &v207))
  {
    if (byte_102312497 >= 0)
      v47 = &qword_102312480;
    else
      v47 = (uint64_t *)qword_102312480;
    sub_100A68C80((uint64_t)v47, (uint64_t)&v207, a3 + 160);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v48 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v49 = a1;
      else
        v49 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "#EED2MA,no nominalMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v153 = a1;
      else
        v153 = (uint64_t *)*a1;
      v205 = 136446210;
      v206 = v153;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no nominalMitigations key in %{public}s EED2 dict, using default", &v205, v193);
      v155 = (uint8_t *)v154;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v154);
      if (v155 != buf)
        free(v155);
    }
  }
  sub_100119F3C(&v205);
  if (byte_1023124DF >= 0)
    v50 = (const char *)&qword_1023124C8;
  else
    v50 = (const char *)qword_1023124C8;
  if (sub_100006BB4(a2, v50, &v205))
  {
    if (byte_1023121F7 >= 0)
      v51 = (const char *)&qword_1023121E0;
    else
      v51 = (const char *)qword_1023121E0;
    if ((sub_1001E4874((uint64_t)&v205, v51, (BOOL *)(a3 + 176)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v52 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "#EED2MA,no enableCellular field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v203) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no enableCellular field in cellularMitigations dictionary, using default", &v203, v193);
        v161 = (uint8_t *)v160;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v160);
        if (v161 != buf)
          free(v161);
      }
    }
    if (byte_1023124F7 >= 0)
      v53 = (const char *)&qword_1023124E0;
    else
      v53 = (const char *)qword_1023124E0;
    if ((sub_1001E4B84((uint64_t)&v205, v53, (_DWORD *)(a3 + 180)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v54 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "#EED2MA,no rsrpThreshold field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v203) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no rsrpThreshold field in cellularMitigations dictionary, using default", &v203, v193);
        v163 = (uint8_t *)v162;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v162);
        if (v163 != buf)
          free(v163);
      }
    }
    if (byte_10231250F >= 0)
      v55 = (const char *)&qword_1023124F8;
    else
      v55 = (const char *)qword_1023124F8;
    if ((sub_1001FD98C((uint64_t)&v205, v55, (void *)(a3 + 184)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v56 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "#EED2MA,no rsrpQueryRate field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v203) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no rsrpQueryRate field in cellularMitigations dictionary, using default", &v203, v193);
        v165 = (uint8_t *)v164;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v164);
        if (v165 != buf)
          free(v165);
      }
    }
    if (byte_102312527 >= 0)
      v57 = (const char *)&qword_102312510;
    else
      v57 = (const char *)qword_102312510;
    if ((sub_1001E4B84((uint64_t)&v205, v57, (_DWORD *)(a3 + 192)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v58 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "#EED2MA,no rsrpSamplesToAvg field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v203) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no rsrpSamplesToAvg field in cellularMitigations dictionary, using default", &v203, v193);
        v167 = (uint8_t *)v166;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v166);
        if (v167 != buf)
          free(v167);
      }
    }
    if (byte_10231253F >= 0)
      v59 = (const char *)&qword_102312528;
    else
      v59 = (const char *)qword_102312528;
    if ((sub_1001E4B84((uint64_t)&v205, v59, (_DWORD *)(a3 + 196)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v60 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "#EED2MA,no ulFreqThreshold field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v203) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no ulFreqThreshold field in cellularMitigations dictionary, using default", &v203, v193);
        v169 = (uint8_t *)v168;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v168);
        if (v169 != buf)
          free(v169);
      }
    }
    sub_100119F3C(&v203);
    if (byte_102312557 >= 0)
      v61 = (const char *)&qword_102312540;
    else
      v61 = (const char *)qword_102312540;
    if (sub_100006BB4((uint64_t)&v205, v61, &v203))
    {
      if (byte_102312557 >= 0)
        v62 = &qword_102312540;
      else
        v62 = (uint64_t *)qword_102312540;
      sub_100A68C80((uint64_t)v62, (uint64_t)&v203, a3 + 200);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v68 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a1 + 23) >= 0)
          v69 = a1;
        else
          v69 = (uint64_t *)*a1;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v210 = v69;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "#EED2MA,no belowThresholdMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        if (*((char *)a1 + 23) >= 0)
          v172 = a1;
        else
          v172 = (uint64_t *)*a1;
        v201 = 136446210;
        v202 = v172;
        LODWORD(v193) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no belowThresholdMitigations key in %{public}s EED2 dict, using default", &v201, v193);
        v174 = (uint8_t *)v173;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v173);
        if (v174 != buf)
          free(v174);
      }
    }
    sub_10011A5A8(&v203);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v63 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v64 = a1;
      else
        v64 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v64;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "#EED2MA,no cellularMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v65 = a1;
      else
        v65 = (uint64_t *)*a1;
      v203 = 136446210;
      v204 = v65;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no cellularMitigations key in %{public}s EED2 dict, using default", &v203, v193);
      v67 = (uint8_t *)v66;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v66);
      if (v67 != buf)
        free(v67);
    }
  }
  sub_100119F3C(&v203);
  if (byte_1023124C7 >= 0)
    v70 = (const char *)&qword_1023124B0;
  else
    v70 = (const char *)qword_1023124B0;
  if (sub_100006BB4(a2, v70, &v203))
  {
    if (byte_1023121F7 >= 0)
      v71 = (const char *)&qword_1023121E0;
    else
      v71 = (const char *)qword_1023121E0;
    if ((sub_1001E4874((uint64_t)&v203, v71, (BOOL *)(a3 + 216)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v72 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "#EED2MA,no enableThermal field in thermalMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v201) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no enableThermal field in thermalMitigations dictionary, using default", &v201, v193);
        v171 = (uint8_t *)v170;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v170);
        if (v171 != buf)
          free(v171);
      }
    }
    sub_100119F3C(&v201);
    if (byte_10231256F >= 0)
      v73 = (const char *)&qword_102312558;
    else
      v73 = (const char *)qword_102312558;
    if (sub_100006BB4((uint64_t)&v203, v73, &v201))
    {
      if (byte_10231256F >= 0)
        v74 = &qword_102312558;
      else
        v74 = (uint64_t *)qword_102312558;
      sub_100A68C80((uint64_t)v74, (uint64_t)&v201, a3 + 220);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v80 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "#EED2MA,no thermalLight field in thermalMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v199) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no thermalLight field in thermalMitigations dictionary, using default", &v199, v193);
        v176 = (uint8_t *)v175;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v175);
        if (v176 != buf)
          free(v176);
      }
    }
    sub_100119F3C(&v199);
    if (byte_102312587 >= 0)
      v81 = (const char *)&qword_102312570;
    else
      v81 = (const char *)qword_102312570;
    if (sub_100006BB4((uint64_t)&v203, v81, &v199))
    {
      if (byte_102312587 >= 0)
        v82 = &qword_102312570;
      else
        v82 = (uint64_t *)qword_102312570;
      sub_100A68C80((uint64_t)v82, (uint64_t)&v199, a3 + 236);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v83 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "#EED2MA,no thermalMod field in thermalMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v197) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no thermalMod field in thermalMitigations dictionary, using default", &v197, v193);
        v178 = (uint8_t *)v177;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v177);
        if (v178 != buf)
          free(v178);
      }
    }
    sub_100119F3C(&v197);
    if (byte_10231259F >= 0)
      v84 = (const char *)&qword_102312588;
    else
      v84 = (const char *)qword_102312588;
    if (sub_100006BB4((uint64_t)&v203, v84, &v197))
    {
      if (byte_10231259F >= 0)
        v85 = &qword_102312588;
      else
        v85 = (uint64_t *)qword_102312588;
      sub_100A68C80((uint64_t)v85, (uint64_t)&v197, a3 + 252);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v86 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "#EED2MA,no thermalHeavy field in thermalMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v195[0]) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no thermalHeavy field in thermalMitigations dictionary, using default", v195, v193);
        v182 = (uint8_t *)v181;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v181);
        if (v182 != buf)
          free(v182);
      }
    }
    sub_10011A5A8(&v197);
    sub_10011A5A8(&v199);
    sub_10011A5A8(&v201);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v75 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v76 = a1;
      else
        v76 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v76;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "#EED2MA,no thermalMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v77 = a1;
      else
        v77 = (uint64_t *)*a1;
      v201 = 136446210;
      v202 = v77;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no thermalMitigations key in %{public}s EED2 dict, using default", &v201, v193);
      v79 = (uint8_t *)v78;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v78);
      if (v79 != buf)
        free(v79);
    }
  }
  sub_100119F3C(&v201);
  if (byte_1023124AF >= 0)
    v87 = (const char *)&qword_102312498;
  else
    v87 = (const char *)qword_102312498;
  if (sub_100006BB4(a2, v87, &v201))
  {
    if (byte_1023121F7 >= 0)
      v88 = (const char *)&qword_1023121E0;
    else
      v88 = (const char *)qword_1023121E0;
    if ((sub_1001E4874((uint64_t)&v201, v88, (BOOL *)(a3 + 268)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v89 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "#EED2MA,no enablePower field in powerMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v199) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no enablePower field in powerMitigations dictionary, using default", &v199, v193);
        v180 = (uint8_t *)v179;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v179);
        if (v180 != buf)
          free(v180);
      }
    }
    sub_100119F3C(&v199);
    if (byte_10231256F >= 0)
      v90 = (const char *)&qword_102312558;
    else
      v90 = (const char *)qword_102312558;
    if (sub_100006BB4((uint64_t)&v201, v90, &v199))
    {
      if (byte_10231256F >= 0)
        v91 = &qword_102312558;
      else
        v91 = (uint64_t *)qword_102312558;
      sub_100A68C80((uint64_t)v91, (uint64_t)&v199, a3 + 272);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v97 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "#EED2MA,no powerLight field in powerMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v197) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no powerLight field in powerMitigations dictionary, using default", &v197, v193);
        v184 = (uint8_t *)v183;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v183);
        if (v184 != buf)
          free(v184);
      }
    }
    sub_100119F3C(&v197);
    if (byte_102312587 >= 0)
      v98 = (const char *)&qword_102312570;
    else
      v98 = (const char *)qword_102312570;
    if (sub_100006BB4((uint64_t)&v201, v98, &v197))
    {
      if (byte_102312587 >= 0)
        v99 = &qword_102312570;
      else
        v99 = (uint64_t *)qword_102312570;
      sub_100A68C80((uint64_t)v99, (uint64_t)&v197, a3 + 288);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v100 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "#EED2MA,no powerMod field in powerMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v195[0]) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no powerMod field in powerMitigations dictionary, using default", v195, v193);
        v186 = (uint8_t *)v185;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v185);
        if (v186 != buf)
          free(v186);
      }
    }
    sub_100119F3C(v195);
    if (byte_10231259F >= 0)
      v101 = (const char *)&qword_102312588;
    else
      v101 = (const char *)qword_102312588;
    if (sub_100006BB4((uint64_t)&v201, v101, v195))
    {
      if (byte_10231259F >= 0)
        v102 = &qword_102312588;
      else
        v102 = (uint64_t *)qword_102312588;
      sub_100A68C80((uint64_t)v102, (uint64_t)v195, a3 + 304);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v103 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "#EED2MA,no powerHeavy field in powerMitigations dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v194[0] = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no powerHeavy field in powerMitigations dictionary, using default", v194, v193);
        v190 = (uint8_t *)v189;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v189);
        if (v190 != buf)
          free(v190);
      }
    }
    sub_10011A5A8(v195);
    sub_10011A5A8(&v197);
    sub_10011A5A8(&v199);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v92 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v93 = a1;
      else
        v93 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v93;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "#EED2MA,no powerMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v94 = a1;
      else
        v94 = (uint64_t *)*a1;
      v199 = 136446210;
      v200 = v94;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no powerMitigations key in %{public}s EED2 dict, using default", &v199, v193);
      v96 = (uint8_t *)v95;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v95);
      if (v96 != buf)
        free(v96);
    }
  }
  sub_100119F3C(&v199);
  if (byte_102312647 >= 0)
    v104 = (const char *)&qword_102312630;
  else
    v104 = (const char *)qword_102312630;
  if (sub_100006BB4(a2, v104, &v199))
  {
    if (byte_10231265F >= 0)
      v105 = (const char *)&qword_102312648;
    else
      v105 = (const char *)qword_102312648;
    if ((sub_1001E4B84((uint64_t)&v199, v105, (_DWORD *)(a3 + 320)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v106 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "#EED2MA,no numInFlight field in uploadConfig dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v197) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no numInFlight field in uploadConfig dictionary, using default", &v197, v193);
        v188 = (uint8_t *)v187;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v187);
        if (v188 != buf)
          free(v188);
      }
    }
    if (byte_102312677 >= 0)
      v107 = (const char *)&qword_102312660;
    else
      v107 = (const char *)qword_102312660;
    if ((sub_1001E4B84((uint64_t)&v199, v107, (_DWORD *)(a3 + 324)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v108 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "#EED2MA,no maxFileSize field in uploadConfig dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v197) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no maxFileSize field in uploadConfig dictionary, using default", &v197, v193);
        v192 = (uint8_t *)v191;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v191);
        if (v192 != buf)
          free(v192);
      }
    }
    if (byte_10231268F >= 0)
      v109 = (const char *)&qword_102312678;
    else
      v109 = (const char *)qword_102312678;
    if ((sub_1001E4B84((uint64_t)&v199, v109, (_DWORD *)(a3 + 328)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v110 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "#EED2MA,no maxQuota field in uploadConfig dictionary, using default", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v197) = 0;
        LODWORD(v193) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no maxQuota field in uploadConfig dictionary, using default", &v197, v193);
        v112 = (uint8_t *)v111;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v111);
LABEL_528:
        if (v112 != buf)
          free(v112);
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v113 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v114 = a1;
      else
        v114 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v210 = v114;
      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "#EED2MA,no uploadConfig key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v156 = a1;
      else
        v156 = (uint64_t *)*a1;
      v197 = 136446210;
      v198 = v156;
      LODWORD(v193) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no uploadConfig key in %{public}s EED2 dict, using default", &v197, v193);
      v112 = (uint8_t *)v157;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v157);
      goto LABEL_528;
    }
  }
  sub_10011A5A8(&v199);
  sub_10011A5A8(&v201);
  sub_10011A5A8(&v203);
  sub_10011A5A8(&v205);
  return sub_10011A5A8(&v207);
}

void sub_100A68324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  sub_10011A5A8(&a23);
  sub_10011A5A8(&a25);
  sub_10011A5A8(&a27);
  sub_10011A5A8(&a29);
  sub_10011A5A8(&a31);
  _Unwind_Resume(a1);
}

void sub_100A68438(uint64_t a1, void *a2, int a3)
{
  id v6;
  id v7;
  uint64_t *v8;
  id v9;
  unsigned __int8 v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  _BYTE *v15;
  _BYTE *v16;
  const char *v17;
  uint64_t *v18;
  id v19;
  NSObject *v20;
  _BYTE *v21;
  NSObject *v22;
  _BYTE *v23;
  std::string *p_p;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  std::string *v29;
  const char *v30;
  uint8_t *v31;
  _BYTE *v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  _BYTE v36[32];
  __int128 v37;
  unsigned __int8 v38;
  std::string __p;
  int v40;
  int v41;
  __int16 v42;
  _BYTE *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  std::string *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  _BYTE *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  std::string *v55;

  v37 = 0u;
  memset(v36, 0, sizeof(v36));
  v38 = 1;
  memset(&__p, 0, sizeof(__p));
  v6 = objc_msgSend(a2, "valueForKey:", CFSTR("PartnerID"));
  if (v6)
  {
    std::string::assign((std::string *)v36, (const std::string::value_type *)objc_msgSend(v6, "UTF8String"));
    v7 = objc_msgSend(a2, "valueForKey:", CFSTR("ADRCert"));
    if (v7)
    {
      std::string::assign((std::string *)&v36[24], (const std::string::value_type *)objc_msgSend(v7, "UTF8String"));
      if (byte_10231226F >= 0)
        v8 = &qword_102312258;
      else
        v8 = (uint64_t *)qword_102312258;
      v9 = objc_msgSend(a2, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
      if (v9)
        v10 = objc_msgSend(v9, "BOOLValue");
      else
        v10 = 1;
      v38 = v10;
      if (byte_102312287 >= 0)
        v18 = &qword_102312270;
      else
        v18 = (uint64_t *)qword_102312270;
      v19 = objc_msgSend(a2, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
      if (v19)
      {
        std::string::assign(&__p, (const std::string::value_type *)objc_msgSend(v19, "UTF8String"));
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v20 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v21 = v36;
          if (v36[23] < 0)
            v21 = *(_BYTE **)v36;
          *(_DWORD *)buf = 67240450;
          v49 = a3;
          v50 = 2082;
          v51 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2,no baseURL field in partner info dictionary,idx,%{public}d,partner,%{public}s", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v32 = v36;
          if (v36[23] < 0)
            v32 = *(_BYTE **)v36;
          v40 = 67240450;
          v41 = a3;
          v42 = 2082;
          v43 = v32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,no baseURL field in partner info dictionary,idx,%{public}d,partner,%{public}s", &v40, 18);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)_block_invoke", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        std::string::assign(&__p, "");
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v22 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v23 = v36;
        if (v36[23] < 0)
          v23 = *(_BYTE **)v36;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67240962;
        v49 = a3;
        v50 = 2082;
        v51 = v23;
        v52 = 2050;
        v53 = v38;
        v54 = 2082;
        v55 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#EED2,adding partner info,idx,%{public}d,partner,%{public}s,requestsSupported,%{public}ld,baseURL,%{public}s", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v28 = v36;
        if (v36[23] < 0)
          v28 = *(_BYTE **)v36;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &__p;
        else
          v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v40 = 67240962;
        v41 = a3;
        v42 = 2082;
        v43 = v28;
        v44 = 2050;
        v45 = v38;
        v46 = 2082;
        v47 = v29;
        LODWORD(v35) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,adding partner info,idx,%{public}d,partner,%{public}s,requestsSupported,%{public}ld,baseURL,%{public}s", &v40, v35);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)_block_invoke", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      v25 = *(_QWORD **)(a1 + 32);
      v26 = v25[18];
      if (v26 >= v25[19])
      {
        v27 = sub_100A93C60(v25 + 17, (__int128 *)v36);
      }
      else
      {
        sub_100858958((_DWORD)v25 + 152, (char *)v25[18], (__int128 *)v36);
        v27 = v26 + 80;
        v25[18] = v26 + 80;
      }
      v25[18] = v27;
      goto LABEL_58;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v15 = v36;
      if (v36[23] < 0)
        v15 = *(_BYTE **)v36;
      *(_DWORD *)buf = 67240450;
      v49 = a3;
      v50 = 2082;
      v51 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#EED2,no ADRCert field in partner info dictionary so skipping,idx,%{public}d,partner,%{public}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v16 = v36;
      if (v36[23] < 0)
        v16 = *(_BYTE **)v36;
      v40 = 67240450;
      v41 = a3;
      v42 = 2082;
      v43 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,no ADRCert field in partner info dictionary so skipping,idx,%{public}d,partner,%{public}s", &v40, 18);
      v13 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)_block_invoke", "%s\n", v17);
LABEL_28:
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v49 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2,no PartnerID field in partner info dictionary so skipping,idx,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v40 = 67240192;
      v41 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,no PartnerID field in partner info dictionary so skipping,idx,%{public}d", &v40, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)_block_invoke", "%s\n", v12);
      goto LABEL_28;
    }
  }
LABEL_58:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37) < 0)
    operator delete(*(void **)&v36[24]);
  if ((v36[23] & 0x80000000) != 0)
    operator delete(*(void **)v36);
}

void sub_100A68C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100A54A7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A68C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint8_t buf[4];
  uint64_t v34;

  if (byte_1023125B7 >= 0)
    v6 = (const char *)&qword_1023125A0;
  else
    v6 = (const char *)qword_1023125A0;
  if ((sub_1001E4874(a2, v6, (BOOL *)a3) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v34 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#EED2MA,no allowNewStreamingRequests field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v31 = 136446210;
      v32 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no allowNewStreamingRequests field in %{public}s dictionary, using default", &v31, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  if (byte_1023125CF >= 0)
    v8 = (const char *)&qword_1023125B8;
  else
    v8 = (const char *)qword_1023125B8;
  if ((sub_1001E4874(a2, v8, (BOOL *)(a3 + 1)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v34 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#EED2MA,no allowNewMediaRequests field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v31 = 136446210;
      v32 = a1;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no allowNewMediaRequests field in %{public}s dictionary, using default", &v31, v30);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
  if (byte_1023125E7 >= 0)
    v10 = (const char *)&qword_1023125D0;
  else
    v10 = (const char *)qword_1023125D0;
  if ((sub_1001E4B84(a2, v10, (_DWORD *)(a3 + 4)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v34 = a1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#EED2MA,no maxFramerateFps field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v31 = 136446210;
      v32 = a1;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no maxFramerateFps field in %{public}s dictionary, using default", &v31, v30);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  if (byte_1023125FF >= 0)
    v12 = (const char *)&qword_1023125E8;
  else
    v12 = (const char *)qword_1023125E8;
  if ((sub_1001E4B84(a2, v12, (_DWORD *)(a3 + 8)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v34 = a1;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#EED2MA,no maxStreamingBitrateKbps field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v31 = 136446210;
      v32 = a1;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no maxStreamingBitrateKbps field in %{public}s dictionary, using default", &v31, v30);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
  if (byte_102312617 >= 0)
    v14 = (const char *)&qword_102312600;
  else
    v14 = (const char *)qword_102312600;
  if ((sub_1001E4874(a2, v14, (BOOL *)(a3 + 12)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v34 = a1;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#EED2MA,no dropStreaming field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v31 = 136446210;
      v32 = a1;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no dropStreaming field in %{public}s dictionary, using default", &v31, v30);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
  if (byte_10231262F >= 0)
    v16 = (const char *)&qword_102312618;
  else
    v16 = (const char *)qword_102312618;
  if ((sub_1001E4874(a2, v16, (BOOL *)(a3 + 13)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v34 = a1;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#EED2MA,no delayMedia field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v31 = 136446210;
      v32 = a1;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2MA,no delayMedia field in %{public}s dictionary, using default", &v31, v30);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
}

void sub_100A6957C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t *v7;
  NSObject *v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t *v11;
  NSObject *v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t *v15;
  NSObject *v16;
  uint64_t *v17;
  NSObject *v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  uint64_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t *v25;
  const char *v26;
  uint8_t *v27;
  uint64_t *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t *v40;
  const char *v41;
  uint8_t *v42;
  uint64_t *v43;
  const char *v44;
  uint8_t *v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint8_t buf[4];
  uint64_t *v50;

  if ((sub_1001E4874(a2, "Disabled", (BOOL *)a3) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v7 = a1;
      else
        v7 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      v50 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No Disabled key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v22 = a1;
      else
        v22 = (uint64_t *)*a1;
      v47 = 136446210;
      v48 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#BAA No Disabled key in %{public}s BAA dict, using default", &v47, 12);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  if ((sub_1001E4874(a2, "EEDEnabledOnly", (BOOL *)(a3 + 1)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v9 = a1;
      else
        v9 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      v50 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No EEDEnabledOnly key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v25 = a1;
      else
        v25 = (uint64_t *)*a1;
      v47 = 136446210;
      v48 = v25;
      LODWORD(v46) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#BAA No EEDEnabledOnly key in %{public}s BAA dict, using default", &v47, v46);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
  if ((sub_1001E4B84(a2, "CertValidityPeriod", (_DWORD *)(a3 + 4)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v11 = a1;
      else
        v11 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      v50 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No CertValidityPeriod key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v28 = a1;
      else
        v28 = (uint64_t *)*a1;
      v47 = 136446210;
      v48 = v28;
      LODWORD(v46) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#BAA No CertValidityPeriod key in %{public}s BAA dict, using default", &v47, v46);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
  if ((sub_1001E4B84(a2, "NoCertRequestWindow", (_DWORD *)(a3 + 8)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v13 = a1;
      else
        v13 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      v50 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No NoCertRequestWindow key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v31 = a1;
      else
        v31 = (uint64_t *)*a1;
      v47 = 136446210;
      v48 = v31;
      LODWORD(v46) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#BAA No NoCertRequestWindow key in %{public}s BAA dict, using default", &v47, v46);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  if ((sub_1001E4B84(a2, "NoCertRetryWindow", (_DWORD *)(a3 + 12)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v15 = a1;
      else
        v15 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      v50 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No NoCertRetryWindow key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v34 = a1;
      else
        v34 = (uint64_t *)*a1;
      v47 = 136446210;
      v48 = v34;
      LODWORD(v46) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#BAA No NoCertRetryWindow key in %{public}s BAA dict, using default", &v47, v46);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
  }
  if ((sub_1001E4B84(a2, "CertAvailableRequestWindowMin", (_DWORD *)(a3 + 16)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v17 = a1;
      else
        v17 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      v50 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No CertAvailableRequestWindowMin key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v37 = a1;
      else
        v37 = (uint64_t *)*a1;
      v47 = 136446210;
      v48 = v37;
      LODWORD(v46) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#BAA No CertAvailableRequestWindowMin key in %{public}s BAA dict, using default", &v47, v46);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
  }
  if ((sub_1001E4B84(a2, "CertAvailableRequestWindowMax", (_DWORD *)(a3 + 20)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v19 = a1;
      else
        v19 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      v50 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No CertAvailableRequestWindowMax key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v40 = a1;
      else
        v40 = (uint64_t *)*a1;
      v47 = 136446210;
      v48 = v40;
      LODWORD(v46) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#BAA No CertAvailableRequestWindowMax key in %{public}s BAA dict, using default", &v47, v46);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
  }
  if ((sub_1001E4B84(a2, "CertAvailableRetryWindow", (_DWORD *)(a3 + 24)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v20 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v21 = a1;
      else
        v21 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446210;
      v50 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No CertAvailableRetryWindow key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (*((char *)a1 + 23) >= 0)
        v43 = a1;
      else
        v43 = (uint64_t *)*a1;
      v47 = 136446210;
      v48 = v43;
      LODWORD(v46) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#BAA No CertAvailableRetryWindow key in %{public}s BAA dict, using default", &v47, v46);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
  }
}

void sub_100A6A1D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  const char *v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  const char *v16;
  NSObject *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const char *v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  const char *v26;
  NSObject *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  const char *v31;
  NSObject *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  const char *v36;
  NSObject *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  const char *v41;
  NSObject *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  const char *v46;
  NSObject *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  void *v51;
  uint64_t *v52;
  id v53;
  uint64_t i;
  uint64_t v55;
  NSObject *v56;
  int v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  int v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  const char *v65;
  uint8_t *v66;
  NSObject *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  const char *v74;
  uint8_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  const char *v79;
  uint8_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  const char *v84;
  uint8_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  const char *v89;
  uint8_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  const char *v94;
  uint8_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  const char *v99;
  uint8_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  const char *v104;
  uint8_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  const char *v109;
  uint8_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  const char *v114;
  uint8_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  const char *v119;
  uint64_t v120;
  _QWORD v121[5];
  int v122;
  _BYTE v123[34];
  uint8_t buf[4];
  _BYTE v125[34];

  if (byte_1023121F7 >= 0)
    v6 = (const char *)&qword_1023121E0;
  else
    v6 = (const char *)qword_1023121E0;
  if ((sub_1001E4874(a2, v6, (BOOL *)a3) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_1023121F7 >= 0)
        v8 = &qword_1023121E0;
      else
        v8 = (uint64_t *)qword_1023121E0;
      if (*((char *)a1 + 23) >= 0)
        v9 = a1;
      else
        v9 = (uint64_t *)*a1;
      v10 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v10 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v8;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v9;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_1023121F7 >= 0)
        v71 = &qword_1023121E0;
      else
        v71 = (uint64_t *)qword_1023121E0;
      if (*((char *)a1 + 23) >= 0)
        v72 = a1;
      else
        v72 = (uint64_t *)*a1;
      v73 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v73 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v71;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v72;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v73;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, 32);
      v75 = (uint8_t *)v74;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
  }
  if (byte_102312137 >= 0)
    v11 = (const char *)&qword_102312120;
  else
    v11 = (const char *)qword_102312120;
  if (sub_1000BCB64(a2, v11, (std::string *)(a3 + 8)))
  {
    std::string::insert((std::string *)(a3 + 8), 0, "https://");
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_102312137 >= 0)
        v13 = &qword_102312120;
      else
        v13 = (uint64_t *)qword_102312120;
      if (*((char *)a1 + 23) >= 0)
        v14 = a1;
      else
        v14 = (uint64_t *)*a1;
      v15 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v15 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v13;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v14;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_102312137 >= 0)
        v76 = &qword_102312120;
      else
        v76 = (uint64_t *)qword_102312120;
      if (*((char *)a1 + 23) >= 0)
        v77 = a1;
      else
        v77 = (uint64_t *)*a1;
      v78 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v78 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v76;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v77;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v78;
      LODWORD(v120) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, v120);
      v80 = (uint8_t *)v79;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)byte_102311198);
  }
  if (byte_1023126BF >= 0)
    v16 = (const char *)&qword_1023126A8;
  else
    v16 = (const char *)qword_1023126A8;
  if ((sub_1001E4B84(a2, v16, (_DWORD *)(a3 + 32)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_1023126BF >= 0)
        v18 = &qword_1023126A8;
      else
        v18 = (uint64_t *)qword_1023126A8;
      if (*((char *)a1 + 23) >= 0)
        v19 = a1;
      else
        v19 = (uint64_t *)*a1;
      v20 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v20 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v18;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v19;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_1023126BF >= 0)
        v81 = &qword_1023126A8;
      else
        v81 = (uint64_t *)qword_1023126A8;
      if (*((char *)a1 + 23) >= 0)
        v82 = a1;
      else
        v82 = (uint64_t *)*a1;
      v83 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v83 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v81;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v82;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v83;
      LODWORD(v120) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, v120);
      v85 = (uint8_t *)v84;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v84);
      if (v85 != buf)
        free(v85);
    }
  }
  if (byte_1023126D7 >= 0)
    v21 = (const char *)&qword_1023126C0;
  else
    v21 = (const char *)qword_1023126C0;
  if ((sub_1001E4B84(a2, v21, (_DWORD *)(a3 + 36)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v22 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_1023126D7 >= 0)
        v23 = &qword_1023126C0;
      else
        v23 = (uint64_t *)qword_1023126C0;
      if (*((char *)a1 + 23) >= 0)
        v24 = a1;
      else
        v24 = (uint64_t *)*a1;
      v25 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v25 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v23;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v24;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_1023126D7 >= 0)
        v86 = &qword_1023126C0;
      else
        v86 = (uint64_t *)qword_1023126C0;
      if (*((char *)a1 + 23) >= 0)
        v87 = a1;
      else
        v87 = (uint64_t *)*a1;
      v88 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v88 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v86;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v87;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v88;
      LODWORD(v120) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, v120);
      v90 = (uint8_t *)v89;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v89);
      if (v90 != buf)
        free(v90);
    }
  }
  if (byte_1023126EF >= 0)
    v26 = (const char *)&qword_1023126D8;
  else
    v26 = (const char *)qword_1023126D8;
  if ((sub_1001E4B84(a2, v26, (_DWORD *)(a3 + 40)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v27 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_1023126EF >= 0)
        v28 = &qword_1023126D8;
      else
        v28 = (uint64_t *)qword_1023126D8;
      if (*((char *)a1 + 23) >= 0)
        v29 = a1;
      else
        v29 = (uint64_t *)*a1;
      v30 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v30 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v28;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v29;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_1023126EF >= 0)
        v91 = &qword_1023126D8;
      else
        v91 = (uint64_t *)qword_1023126D8;
      if (*((char *)a1 + 23) >= 0)
        v92 = a1;
      else
        v92 = (uint64_t *)*a1;
      v93 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v93 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v91;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v92;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v93;
      LODWORD(v120) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, v120);
      v95 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v94);
      if (v95 != buf)
        free(v95);
    }
  }
  if (byte_102312707 >= 0)
    v31 = (const char *)&qword_1023126F0;
  else
    v31 = (const char *)qword_1023126F0;
  if ((sub_1001E4B84(a2, v31, (_DWORD *)(a3 + 44)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v32 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_102312707 >= 0)
        v33 = &qword_1023126F0;
      else
        v33 = (uint64_t *)qword_1023126F0;
      if (*((char *)a1 + 23) >= 0)
        v34 = a1;
      else
        v34 = (uint64_t *)*a1;
      v35 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v35 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v33;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v34;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v35;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_102312707 >= 0)
        v96 = &qword_1023126F0;
      else
        v96 = (uint64_t *)qword_1023126F0;
      if (*((char *)a1 + 23) >= 0)
        v97 = a1;
      else
        v97 = (uint64_t *)*a1;
      v98 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v98 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v96;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v97;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v98;
      LODWORD(v120) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, v120);
      v100 = (uint8_t *)v99;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v99);
      if (v100 != buf)
        free(v100);
    }
  }
  if (byte_10231271F >= 0)
    v36 = (const char *)&qword_102312708;
  else
    v36 = (const char *)qword_102312708;
  if ((sub_1001E4B84(a2, v36, (_DWORD *)(a3 + 48)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v37 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10231271F >= 0)
        v38 = &qword_102312708;
      else
        v38 = (uint64_t *)qword_102312708;
      if (*((char *)a1 + 23) >= 0)
        v39 = a1;
      else
        v39 = (uint64_t *)*a1;
      v40 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v40 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v38;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v39;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_10231271F >= 0)
        v101 = &qword_102312708;
      else
        v101 = (uint64_t *)qword_102312708;
      if (*((char *)a1 + 23) >= 0)
        v102 = a1;
      else
        v102 = (uint64_t *)*a1;
      v103 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v103 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v101;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v102;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v103;
      LODWORD(v120) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, v120);
      v105 = (uint8_t *)v104;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v104);
      if (v105 != buf)
        free(v105);
    }
  }
  if (byte_102312737 >= 0)
    v41 = (const char *)&qword_102312720;
  else
    v41 = (const char *)qword_102312720;
  if ((sub_1001E4B84(a2, v41, (_DWORD *)(a3 + 52)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v42 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_102312737 >= 0)
        v43 = &qword_102312720;
      else
        v43 = (uint64_t *)qword_102312720;
      if (*((char *)a1 + 23) >= 0)
        v44 = a1;
      else
        v44 = (uint64_t *)*a1;
      v45 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v45 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v43;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v44;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v45;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_102312737 >= 0)
        v106 = &qword_102312720;
      else
        v106 = (uint64_t *)qword_102312720;
      if (*((char *)a1 + 23) >= 0)
        v107 = a1;
      else
        v107 = (uint64_t *)*a1;
      v108 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v108 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v106;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v107;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v108;
      LODWORD(v120) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, v120);
      v110 = (uint8_t *)v109;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v109);
      if (v110 != buf)
        free(v110);
    }
  }
  if (byte_10231274F >= 0)
    v46 = (const char *)&qword_102312738;
  else
    v46 = (const char *)qword_102312738;
  if ((sub_1001E4B84(a2, v46, (_DWORD *)(a3 + 56)) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v47 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10231274F >= 0)
        v48 = &qword_102312738;
      else
        v48 = (uint64_t *)qword_102312738;
      if (*((char *)a1 + 23) >= 0)
        v49 = a1;
      else
        v49 = (uint64_t *)*a1;
      v50 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v50 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v48;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v49;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v50;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_10231274F >= 0)
        v111 = &qword_102312738;
      else
        v111 = (uint64_t *)qword_102312738;
      if (*((char *)a1 + 23) >= 0)
        v112 = a1;
      else
        v112 = (uint64_t *)*a1;
      v113 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v113 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v111;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v112;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v113;
      LODWORD(v120) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, v120);
      v115 = (uint8_t *)v114;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v114);
      if (v115 != buf)
        free(v115);
    }
  }
  v51 = (void *)sub_10011A5AC(a2);
  if (byte_10231244F >= 0)
    v52 = &qword_102312438;
  else
    v52 = (uint64_t *)qword_102312438;
  v53 = objc_msgSend(v51, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v52));
  if (v53)
  {
    v55 = *(_QWORD *)(a3 + 64);
    for (i = *(_QWORD *)(a3 + 72); i != v55; sub_100302B68(a3 + 80, i))
      i -= 48;
    *(_QWORD *)(a3 + 72) = v55;
    v121[0] = _NSConcreteStackBlock;
    v121[1] = 3221225472;
    v121[2] = sub_100A6B92C;
    v121[3] = &unk_102166460;
    v121[4] = a3;
    objc_msgSend(v53, "enumerateObjectsUsingBlock:", v121);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v56 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v57 = -1431655765 * ((*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 4);
      if (byte_10231244F >= 0)
        v58 = &qword_102312438;
      else
        v58 = (uint64_t *)qword_102312438;
      v59 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v59 = (uint64_t *)qword_102312690;
      if (*((char *)a1 + 23) >= 0)
        v60 = a1;
      else
        v60 = (uint64_t *)*a1;
      *(_DWORD *)buf = 67240962;
      *(_DWORD *)v125 = v57;
      *(_WORD *)&v125[4] = 2082;
      *(_QWORD *)&v125[6] = v58;
      *(_WORD *)&v125[14] = 2082;
      *(_QWORD *)&v125[16] = v59;
      *(_WORD *)&v125[24] = 2082;
      *(_QWORD *)&v125[26] = v60;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,found %{public}d partners in %{public}s array in %{public}s %{public}s dict", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v61 = -1431655765 * ((*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 4);
      if (byte_10231244F >= 0)
        v62 = &qword_102312438;
      else
        v62 = (uint64_t *)qword_102312438;
      v63 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v63 = (uint64_t *)qword_102312690;
      if (*((char *)a1 + 23) >= 0)
        v64 = a1;
      else
        v64 = (uint64_t *)*a1;
      v122 = 67240962;
      *(_DWORD *)v123 = v61;
      *(_WORD *)&v123[4] = 2082;
      *(_QWORD *)&v123[6] = v62;
      *(_WORD *)&v123[14] = 2082;
      *(_QWORD *)&v123[16] = v63;
      *(_WORD *)&v123[24] = 2082;
      *(_QWORD *)&v123[26] = v64;
      LODWORD(v120) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,found %{public}d partners in %{public}s array in %{public}s %{public}s dict", &v122, v120);
      v66 = (uint8_t *)v65;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v65);
LABEL_319:
      if (v66 != buf)
        free(v66);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v67 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10231244F >= 0)
        v68 = &qword_102312438;
      else
        v68 = (uint64_t *)qword_102312438;
      if (*((char *)a1 + 23) >= 0)
        v69 = a1;
      else
        v69 = (uint64_t *)*a1;
      v70 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v70 = (uint64_t *)qword_102312690;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v125 = v68;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v69;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v70;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_10231244F >= 0)
        v116 = &qword_102312438;
      else
        v116 = (uint64_t *)qword_102312438;
      if (*((char *)a1 + 23) >= 0)
        v117 = a1;
      else
        v117 = (uint64_t *)*a1;
      v118 = &qword_102312690;
      if (byte_1023126A7 < 0)
        v118 = (uint64_t *)qword_102312690;
      v122 = 136446722;
      *(_QWORD *)v123 = v116;
      *(_WORD *)&v123[8] = 2082;
      *(_QWORD *)&v123[10] = v117;
      *(_WORD *)&v123[18] = 2082;
      *(_QWORD *)&v123[20] = v118;
      LODWORD(v120) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", &v122, v120);
      v66 = (uint8_t *)v119;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v119);
      goto LABEL_319;
    }
  }
}

void sub_100A6B92C(uint64_t a1, void *a2, int a3)
{
  uint64_t *v6;
  id v7;
  uint64_t *v8;
  id v9;
  NSObject *v10;
  _BYTE *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t *v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  uint64_t *v21;
  _BYTE *v22;
  uint64_t *v23;
  _BYTE *v24;
  const char *v25;
  _BYTE *v26;
  const char *v27;
  uint8_t *v28;
  _BYTE v29[32];
  __int128 v30;
  int v31;
  _BYTE v32[14];
  __int16 v33;
  _BYTE *v34;
  uint8_t buf[4];
  _BYTE v36[14];
  __int16 v37;
  _BYTE *v38;

  v30 = 0u;
  memset(v29, 0, sizeof(v29));
  if (byte_10231223F >= 0)
    v6 = &qword_102312228;
  else
    v6 = (uint64_t *)qword_102312228;
  v7 = objc_msgSend(a2, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  if (v7)
  {
    std::string::assign((std::string *)v29, (const std::string::value_type *)objc_msgSend(v7, "UTF8String"));
    if (byte_102312257 >= 0)
      v8 = &qword_102312240;
    else
      v8 = (uint64_t *)qword_102312240;
    v9 = objc_msgSend(a2, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
    if (v9)
    {
      std::string::assign((std::string *)&v29[24], (const std::string::value_type *)objc_msgSend(v9, "UTF8String"));
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v11 = v29;
        if (v29[23] < 0)
          v11 = *(_BYTE **)v29;
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)v36 = a3;
        *(_WORD *)&v36[4] = 2082;
        *(_QWORD *)&v36[6] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,adding partner info,idx,%{public}d,partner,%{public}s", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v26 = v29;
        if (v29[23] < 0)
          v26 = *(_BYTE **)v29;
        v31 = 67240450;
        *(_DWORD *)v32 = a3;
        *(_WORD *)&v32[4] = 2082;
        *(_QWORD *)&v32[6] = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#ADR,adding partner info,idx,%{public}d,partner,%{public}s", &v31, 18);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)_block_invoke", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      v12 = *(uint64_t **)(a1 + 32);
      v13 = v12[9];
      if (v13 >= v12[10])
      {
        v14 = sub_100A93FB4(v12 + 8, (__int128 *)v29);
      }
      else
      {
        sub_100858DBC((_DWORD)v12 + 80, (_QWORD *)v12[9], (__int128 *)v29);
        v14 = v13 + 48;
        v12[9] = v13 + 48;
      }
      v12[9] = v14;
      goto LABEL_54;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v20 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      if (byte_102312257 >= 0)
        v21 = &qword_102312240;
      else
        v21 = (uint64_t *)qword_102312240;
      v22 = v29;
      if (v29[23] < 0)
        v22 = *(_BYTE **)v29;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v36 = v21;
      *(_WORD *)&v36[8] = 1026;
      *(_DWORD *)&v36[10] = a3;
      v37 = 2082;
      v38 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#EED2,#ADR,no %{public}s field in partner info dictionary so skipping,idx,%{public}d,partner,%{public}s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_102312257 >= 0)
        v23 = &qword_102312240;
      else
        v23 = (uint64_t *)qword_102312240;
      v24 = v29;
      if (v29[23] < 0)
        v24 = *(_BYTE **)v29;
      v31 = 136446722;
      *(_QWORD *)v32 = v23;
      *(_WORD *)&v32[8] = 1026;
      *(_DWORD *)&v32[10] = a3;
      v33 = 2082;
      v34 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#ADR,no %{public}s field in partner info dictionary so skipping,idx,%{public}d,partner,%{public}s", &v31, 28);
      v19 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 0, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)_block_invoke", "%s\n", v25);
LABEL_50:
      if (v19 != buf)
        free(v19);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      if (byte_10231223F >= 0)
        v16 = &qword_102312228;
      else
        v16 = (uint64_t *)qword_102312228;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v36 = v16;
      *(_WORD *)&v36[8] = 1026;
      *(_DWORD *)&v36[10] = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#EED2,#ADR,no %{public}s field in partner info dictionary so skipping,idx,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      if (byte_10231223F >= 0)
        v17 = &qword_102312228;
      else
        v17 = (uint64_t *)qword_102312228;
      v31 = 136446466;
      *(_QWORD *)v32 = v17;
      *(_WORD *)&v32[8] = 1026;
      *(_DWORD *)&v32[10] = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#ADR,no %{public}s field in partner info dictionary so skipping,idx,%{public}d", &v31, 18);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)_block_invoke", "%s\n", v18);
      goto LABEL_50;
    }
  }
LABEL_54:
  if (SHIBYTE(v30) < 0)
    operator delete(*(void **)&v29[24]);
  if ((v29[23] & 0x80000000) != 0)
    operator delete(*(void **)v29);
}

void sub_100A6BF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1002FDAA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A6BF70(uint64_t a1)
{
  return sub_100A5745C(a1 + 1448);
}

uint64_t sub_100A6BF78(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  uint8_t *v13;
  _QWORD v14[2];
  uint64_t v15[2];
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 1768);
  if (v3)
  {
    v15[0] = 0;
    v4 = sub_1012CCF28(v3, v15);
    if (v4)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,getEEDCloakingKey,releasing cloaking key", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,getEEDCloakingKey,releasing cloaking key", v14, 2, v14[0]);
LABEL_30:
        v13 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "NSData *CLEmergencyEED2::getEEDCloakingKey(NSError **)", "%s\n", v6);
        if (v13 != buf)
          free(v13);
      }
    }
    else
    {
      v8 = objc_alloc((Class)NSError);
      *a2 = objc_msgSend(v8, "initWithDomain:code:userInfo:", CFSTR("com.apple.locationd.EED.errorDomain"), v15[0], 0);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,getEEDCloakingKey,no cloaking key available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,getEEDCloakingKey,no cloaking key available", v14, 2, v14[0]);
        goto LABEL_30;
      }
    }
  }
  else
  {
    *a2 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.locationd.EED.errorDomain"), 1, 0);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2,getEEDCloakingKey,fAdr is empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,getEEDCloakingKey,fAdr is empty", v15, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyEED2::getEEDCloakingKey(NSError **)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return 0;
  }
  return v4;
}

uint64_t sub_100A6C384(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  uint8_t *v13;
  _QWORD v14[2];
  uint64_t v15[2];
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 1768);
  if (v3)
  {
    v15[0] = 0;
    v4 = sub_1012CCFB0(v3, v15);
    if (v4)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,getEmergencyContactNames,releasing emergency contact name", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,getEmergencyContactNames,releasing emergency contact name", v14, 2, v14[0]);
LABEL_30:
        v13 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "NSArray<NSString *> *CLEmergencyEED2::getEEDEmergencyContactNames(NSError **)", "%s\n", v6);
        if (v13 != buf)
          free(v13);
      }
    }
    else
    {
      v8 = objc_alloc((Class)NSError);
      *a2 = objc_msgSend(v8, "initWithDomain:code:userInfo:", CFSTR("com.apple.locationd.EED.errorDomain"), v15[0], 0);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,getEmergencyContactNames,no emergency contact available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,getEmergencyContactNames,no emergency contact available", v14, 2, v14[0]);
        goto LABEL_30;
      }
    }
  }
  else
  {
    *a2 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.locationd.EED.errorDomain"), 1, 0);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2,getEmergencyContactNames,fAdr is empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,getEmergencyContactNames,fAdr is empty", v15, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "NSArray<NSString *> *CLEmergencyEED2::getEEDEmergencyContactNames(NSError **)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return 0;
  }
  return v4;
}

_QWORD *sub_100A6C790@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0x18)
    v2 = "EventUnknown";
  else
    v2 = off_102166B78[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_100A6C7BC@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 4)
    v2 = "StateUnknown";
  else
    v2 = off_102166C40[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_100A6C7E8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1)
    v2 = "Companion";
  else
    v2 = "Native";
  return sub_1015A2E04(a2, v2);
}

void sub_100A6C808(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  NSObject *v4;
  _BOOL4 v5;
  int v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  void *__dst[2];
  uint64_t v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  _BOOL4 v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  void **v36;
  __int16 v37;
  void **v38;
  __int16 v39;
  void **v40;
  __int16 v41;
  void **v42;

  v2 = a1 + 1448;
  v3 = sub_100A57ECC((int *)(a1 + 1448));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100A5723C(v2);
    v6 = *(unsigned __int8 *)(a1 + 1452);
    v7 = *(_DWORD *)v3;
    if (*((char *)v3 + 55) < 0)
    {
      sub_100115CE4(__dst, (void *)v3[4], v3[5]);
    }
    else
    {
      *(_OWORD *)__dst = *((_OWORD *)v3 + 2);
      v22 = v3[6];
    }
    if (v22 >= 0)
      v8 = __dst;
    else
      v8 = (void **)__dst[0];
    if (*((char *)v3 + 31) < 0)
    {
      sub_100115CE4(v19, (void *)v3[1], v3[2]);
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)(v3 + 1);
      v20 = v3[3];
    }
    if (v20 >= 0)
      v9 = v19;
    else
      v9 = (void **)v19[0];
    if (*((char *)v3 + 87) < 0)
    {
      sub_100115CE4(v17, (void *)v3[8], v3[9]);
    }
    else
    {
      *(_OWORD *)v17 = *((_OWORD *)v3 + 4);
      v18 = v3[10];
    }
    if (v18 >= 0)
      v10 = v17;
    else
      v10 = (void **)v17[0];
    if (*((char *)v3 + 111) < 0)
    {
      sub_100115CE4(v15, (void *)v3[11], v3[12]);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)(v3 + 11);
      v16 = v3[13];
    }
    if (v16 >= 0)
      v11 = v15;
    else
      v11 = (void **)v15[0];
    if (*((char *)v3 + 135) < 0)
    {
      sub_100115CE4(__p, (void *)v3[14], v3[15]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)v3 + 7);
      v14 = v3[16];
    }
    v12 = __p;
    if (v14 < 0)
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 68291075;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 1026;
    v28 = v5;
    v29 = 1026;
    v30 = v6;
    v31 = 1026;
    v32 = v7;
    v33 = 2082;
    v34 = v8;
    v35 = 2082;
    v36 = v9;
    v37 = 2081;
    v38 = v10;
    v39 = 2081;
    v40 = v11;
    v41 = 2081;
    v42 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 logging current settings\", \"enabled\":%{public}d, \"switch state\":%{public}d, \"inst\":%{public}d, \"bundle ID\":%{public, location:escape_only}s, \"bundle version\":%{public, location:escape_only}s, \"LIS URL\":%{private, location:escape_only}s, \"ADR URL\":%{private, location:escape_only}s, \"Control URL\":%{private, location:escape_only}s}", buf, 0x56u);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[0]);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(__dst[0]);
  }
}

void sub_100A6CB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6CB6C(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  NSObject *v5;
  _QWORD *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[4];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  _QWORD *v22;
  __int16 v23;
  int v24;

  v4 = (unsigned int *)(a1 + 112);
  if (!sub_100CD597C(a1 + 112) && sub_100CD597C(a2))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (_QWORD *)(a1 + 136);
      if (*(char *)(a1 + 159) < 0)
        v6 = (_QWORD *)*v6;
      v7 = *(unsigned __int8 *)(a1 + 1452);
      *(_DWORD *)buf = 68289539;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2081;
      v22 = v6;
      v23 = 1026;
      v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext #EED2\", \"CompanionNum\":%{private, location:escape_only}s, \"UserToggle\":%{public}d}", buf, 0x22u);
    }
  }
  v8 = *(_OWORD *)a2;
  v4[4] = *(_DWORD *)(a2 + 16);
  *(_OWORD *)v4 = v8;
  sub_10139A378(a1);
  v9 = *(_QWORD *)(a1 + 1768);
  if (v9)
    sub_1012C5D80(v9, *(_DWORD *)(a1 + 132));
  v10 = *(_QWORD *)(a1 + 1904);
  if (v10)
    sub_101058168(v10, *(_DWORD *)(a1 + 132));
  v11 = sub_100217A98(v4);
  if (sub_100A56948((int *)(a1 + 1448), v11))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2 active inst changed to %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v16[0] = 67240192;
      v16[1] = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 active inst changed to %{public}d", v16, 8);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    sub_100A63CC8(a1 + 1536, 3);
    sub_100A62408(a1, 1u);
  }
  return sub_100A63CC8(a1 + 1536, 4);
}

id sub_100A6CE70(uint64_t a1, void *a2, int a3, int a4, unsigned int a5)
{
  id result;
  int v11;
  int v12;
  NSObject *v14;
  _BYTE *v15;
  int v16;
  void **v17;
  int v18;
  void **v19;
  void **v20;
  void **v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  uint8_t buf[4];
  _BYTE v34[24];
  __int16 v35;
  void **v36;
  __int16 v37;
  void **v38;
  __int16 v39;
  void **v40;
  __int16 v41;
  int v42;
  _BYTE v43[12];
  __int16 v44;
  uint64_t v45;
  char v46;

  result = a2;
  *(_QWORD *)(a1 + 1888) = result;
  v11 = *(_DWORD *)(a1 + 1780);
  v12 = *(_DWORD *)(a1 + 1440);
  if (v11 != a3 || v12 != a4)
  {
    sub_10139A564(a1, v12, a4);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      sub_100F789A8(*(_DWORD *)(a1 + 1780), v43);
      if (v46 >= 0)
        v15 = v43;
      else
        v15 = *(_BYTE **)v43;
      sub_100F789A8(a3, v31);
      v16 = a5;
      if (v32 >= 0)
        v17 = v31;
      else
        v17 = (void **)v31[0];
      sub_100F787D0(*(_DWORD *)(a1 + 1440), v29);
      v18 = v30;
      v19 = (void **)v29[0];
      sub_100F787D0(a4, __p);
      v20 = v29;
      if (v18 < 0)
        v20 = v19;
      v21 = __p;
      if (v28 < 0)
        v21 = (void **)__p[0];
      *(_DWORD *)buf = 68290306;
      *(_DWORD *)v34 = 0;
      *(_WORD *)&v34[4] = 2082;
      *(_QWORD *)&v34[6] = "";
      *(_WORD *)&v34[14] = 2082;
      *(_QWORD *)&v34[16] = v15;
      v35 = 2082;
      v36 = v17;
      v37 = 2082;
      v38 = v20;
      v39 = 2082;
      v40 = v21;
      v41 = 1026;
      a5 = v16;
      v42 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 emergency call status change\", \"old trigger\":%{public, location:escape_only}s, \"new trigger\":%{public, location:escape_only}s, \"old call status\":%{public, location:escape_only}s, \"new call status\":%{public, location:escape_only}s, \"endpointOnCurrentDevice\":%{public}hhd}", buf, 0x40u);
      if (v28 < 0)
        operator delete(__p[0]);
      if (v30 < 0)
        operator delete(v29[0]);
      if (v32 < 0)
        operator delete(v31[0]);
      if (v46 < 0)
        operator delete(*(void **)v43);
    }
    *(_DWORD *)(a1 + 1780) = a3;
    *(_DWORD *)(a1 + 1440) = a4;
    result = (id)sub_100A63CC8(a1 + 1536, 5);
    if (*(unsigned __int8 *)(a1 + 1880) != a5)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v22 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)v34 = v23;
        *(_WORD *)&v34[8] = 2050;
        *(_QWORD *)&v34[10] = a5;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#EED2 callEndpointOnCurrentDevice changed from %{public}ld to %{public}ld", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v24 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)v43 = 134349312;
        *(_QWORD *)&v43[4] = v24;
        v44 = 2050;
        v45 = a5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 callEndpointOnCurrentDevice changed from %{public}ld to %{public}ld", v43, 22);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleEmergencyCallStatusChange(NSString *, EmergencyTriggerType, CallStatus, BOOL)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      *(_BYTE *)(a1 + 1880) = a5;
      result = (id)sub_100A63CC8(a1 + 1536, 20);
    }
    if (v11 != a3 && (*(_DWORD *)(a1 + 1440) - 2) <= 3)
    {
      if (*(_BYTE *)(a1 + 1453))
        return (id)sub_100A63CC8(a1 + 1536, 9);
    }
  }
  return result;
}

void sub_100A6D270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 105) < 0)
    operator delete(*(void **)(v26 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6D2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v4 = a1 + 1448;
  v5 = sub_100A56504(a1 + 1448, (int *)a2);
  v6 = sub_100A56DB8(v4, *(_DWORD *)a2, (unsigned __int8 *)(a2 + 1000), (unsigned __int8 *)(a2 + 1028));
  if (sub_100A56FFC(v4, (unsigned __int8 *)a2))
  {
    v7 = *(_QWORD *)(a1 + 1768);
    if (v7)
      sub_1012C4840(v7);
  }
  if ((_DWORD)v5)
  {
    sub_100A63CC8(a1 + 1536, 3);
LABEL_7:
    sub_100A62408(a1, 1u);
    return v5;
  }
  if (v6)
    goto LABEL_7;
  return v5;
}

uint64_t sub_100A6D360(uint64_t a1)
{
  return sub_100A63CC8(a1 + 1536, 6);
}

uint64_t sub_100A6D36C(uint64_t a1, int a2)
{
  uint64_t v3;
  int v5;
  int *v6;

  v5 = a2;
  v6 = &v5;
  *((_BYTE *)sub_10096ED18(a1 + 1792, &v5, (uint64_t)&unk_101B9EB60, &v6) + 20) = 1;
  v3 = *(_QWORD *)(a1 + 1768);
  if (v3)
    sub_1012C5594(v3, v5);
  return sub_100A63CC8(a1 + 1536, 19);
}

std::string *sub_100A6D3DC(uint64_t a1, const std::string *a2)
{
  std::string *v4;
  std::string *result;

  sub_101399B88(a1, a2);
  v4 = *(std::string **)(a1 + 1768);
  if (v4)
    sub_1012C577C(v4, a2);
  result = *(std::string **)(a1 + 1904);
  if (result)
    return sub_101058388(result, a2);
  return result;
}

uint64_t sub_100A6D428(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  result = *(_QWORD *)(a1 + 1768);
  if (result)
  {
    result = sub_1012C5954(result, a2);
    if ((_DWORD)result)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 handleBatteryStatusChange,change in battery bin", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v7[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 handleBatteryStatusChange,change in battery bin", v7, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleBatteryStatusChange(const Battery &)", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
      return sub_100A63CC8(a1 + 1536, 9);
    }
  }
  return result;
}

id sub_100A6D5D4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id result;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 handleReachability,%{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = 134349056;
    v9 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 handleReachability,%{public}ld", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleReachability(const CLDaemonStatus_Type::Reachability)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_DWORD *)(a1 + 2008) = a2;
  if (!*(_BYTE *)(a1 + 2012))
    *(_BYTE *)(a1 + 2012) = 1;
  result = *(id *)(a1 + 1984);
  if (result)
    return objc_msgSend(result, "handleReachability:", a2);
  return result;
}

void sub_100A6D7AC(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2[3];
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 handleVlqmForActiveCall,%{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = a2[3];
    v14 = 134349056;
    v15 = v8;
    LODWORD(v13) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 handleVlqmForActiveCall,%{public}ld", &v14, v13);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleVlqmForActiveCall(std::unordered_map<SimInstance, int32_t> &)", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
  if (!*(_BYTE *)(a1 + 2004))
    *(_BYTE *)(a1 + 2004) = 1;
  HIDWORD(v13) = *(_DWORD *)(a1 + 1448);
  if (sub_1001F8DEC(a2, (int *)&v13 + 1))
  {
    *(_QWORD *)buf = (char *)&v13 + 4;
    *(_DWORD *)(a1 + 2000) = *((_DWORD *)sub_10006A62C((uint64_t)a2, (int *)&v13 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 5);
    v6 = *(void **)(a1 + 1984);
    if (v6)
      objc_msgSend(v6, "handleVlqmForActiveCall:");
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = SHIDWORD(v13);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2 handleVlqmForActiveCall, No vLqm data for simInstance:%{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14 = 134349056;
      v15 = SHIDWORD(v13);
      LODWORD(v13) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 handleVlqmForActiveCall, No vLqm data for simInstance:%{public}ld", &v14, v13);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEmergencyEED2::handleVlqmForActiveCall(std::unordered_map<SimInstance, int32_t> &)", "%s\n", v11);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
}

_QWORD *sub_100A6DB14(_QWORD *result)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  int v8;
  int v9;

  v1 = (void *)result[248];
  if (v1)
  {
    v2 = result;
    v3 = *((unsigned int *)result + 362);
    v8 = *((_DWORD *)result + 362);
    v4 = result[7];
    if (!v4
      || (v5 = *(unsigned int *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v4 + 48))(v4, &v8),
          v6 = sub_100CD593C((uint64_t)(v2 + 14)),
          v9 = *((_DWORD *)v2 + 362),
          (v7 = v2[7]) == 0))
    {
      sub_10025FD1C();
    }
    return objc_msgSend(v1, "handleUpdatesToSim:Rat:WifiEmergency:bandInfo:", v3, v5, v6, *(unsigned int *)((*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 48))(v7, &v9) + 160));
  }
  return result;
}

uint64_t sub_100A6DBBC(uint64_t a1, int a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 1768);
  if (result)
    return sub_1012C5B98(result, a2);
  return result;
}

void sub_100A6DBCC(uint64_t a1, uint64_t a2, int *a3)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*a3 == 14)
  {
    sub_100A63440(a1, a2);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v5 = *a3;
      *(_DWORD *)buf = 67240192;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2 received unexpected notification %{public}d from SOS provider", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v6 = *a3;
      v9[0] = 67240192;
      v9[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 received unexpected notification %{public}d from SOS provider", v9, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::onSosProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

uint64_t sub_100A6DDB8(uint64_t a1, int a2)
{
  return sub_100A6DDC0(*(_BYTE **)(a1 + 32), a2);
}

uint64_t sub_100A6DDC0(_BYTE *a1, int a2)
{
  NSObject *v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  uint8_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint8_t buf[4];
  int v29;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 checking SOS/EED2 UI toggle", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v26) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 checking SOS/EED2 UI toggle", &v26, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v5 = a1[1452] != 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2 SOS/EED2 UI toggle enabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v26) = 0;
        LODWORD(v25) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 SOS/EED2 UI toggle enabled", &v26, v25);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v5 = 1;
      break;
    case 2:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2 SOS/EED2 UI toggle disabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v26) = 0;
        LODWORD(v25) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 SOS/EED2 UI toggle disabled", &v26, v25);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      v5 = 0;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        v29 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EED2 SOS/EED2 UI toggle status unexpected value,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v26 = 67240192;
        v27 = a2;
        LODWORD(v25) = 8;
        v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 SOS/EED2 UI toggle status unexpected value,%{public}d", &v26, v25);
        v9 = v8;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v7);
        goto LABEL_59;
      }
      break;
    case 4:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v29 = 4;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SOS/EED2 UI toggle status could not be determined,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v26 = 67240192;
        v27 = 4;
        LODWORD(v25) = 8;
        v23 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 SOS/EED2 UI toggle status could not be determined,%{public}d", &v26, v25);
        v9 = v24;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v23);
LABEL_59:
        if (v9 != buf)
          free(v9);
      }
      break;
    default:
      break;
  }
  if (sub_100A56754((uint64_t)(a1 + 1448), v5))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2 SOS/EED2 UI toggle state changed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v26) = 0;
      LODWORD(v25) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 SOS/EED2 UI toggle state changed", &v26, v25);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
    sub_100A63CC8((uint64_t)(a1 + 1536), 3);
    sub_100A62408((uint64_t)a1, 1u);
  }
  return sub_100A63CC8((uint64_t)(a1 + 1536), 2);
}

BOOL sub_100A6E5F4(_BYTE *a1)
{
  uint64_t v2;
  _BOOL8 v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  _BOOL4 v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v2 = (uint64_t)(a1 + 1792);
  v13 = 0;
  *(_QWORD *)buf = &v13;
  v3 = *((_BYTE *)sub_10096ED18((uint64_t)(a1 + 1792), &v13, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20)
    && a1[1832]
    && a1[1833]
    && a1[1834]
    && a1[1835] != 0;
  if (sub_1001DC538() && v3)
  {
    v13 = 1;
    *(_QWORD *)buf = &v13;
    v3 = *((_BYTE *)sub_10096ED18(v2, &v13, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20) != 0;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 0;
    *(_QWORD *)buf = &v13;
    v5 = *((unsigned __int8 *)sub_10096ED18(v2, &v13, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20);
    v12 = 1;
    *(_QWORD *)buf = &v12;
    v6 = *((unsigned __int8 *)sub_10096ED18(v2, &v12, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20);
    v7 = a1[1832];
    v8 = a1[1833];
    v9 = a1[1834];
    v10 = a1[1835];
    *(_DWORD *)buf = 68290818;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1026;
    v18 = v3;
    v19 = 1026;
    v20 = v5;
    v21 = 1026;
    v22 = v6;
    v23 = 1026;
    v24 = v7;
    v25 = 1026;
    v26 = v8;
    v27 = 1026;
    v28 = v9;
    v29 = 1026;
    v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,requiredInitializationDataReceived\", \"initialized\":%{public}hhd, \"fPhoneNumbersReceived[SimInstance::kSim1]\":%{public}hhd, \"fPhoneNumbersReceived[SimInstance::kSim2]\":%{public}hhd, \"fSosToggleStateReceived\":%{public}hhd, \"fConfigChangeReceived\":%{public}hhd, \"fEmergencyStateChangeReceived\":%{public}hhd, \"fDebounceTimerTimedout\":%{public}hhd}", buf, 0x3Cu);
  }
  return v3;
}

void sub_100A6E834(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102166828);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyEED2>::setTimeoutEvent(Event, double) [T = CLEmergencyEED2]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102166828);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102166828);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_100A6C790(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102166828);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_100A6C790(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyEED2>::setTimeoutEvent(Event, double) [T = CLEmergencyEED2]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102166828);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_100A6C790(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102166828);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_100A6C790(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyEED2>::setTimeoutEvent(Event, double) [T = CLEmergencyEED2]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100A9421C;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102166828);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_100A6C790(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_100A6C790(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_100A6F304(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_100A6C790(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102166828);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_100A6C790(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyEED2>::cancelTimeoutEvent(Event) [T = CLEmergencyEED2]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_100A6C790(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102166828);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_100A6C790(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

CLEEDHelperService *sub_100A6F794(uint64_t a1)
{
  CLEEDHelperService *result;
  _QWORD v3[5];
  _QWORD v4[5];
  _QWORD v5[5];
  _QWORD v6[5];
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];

  v8[4] = a1;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100A8B8C8;
  v9[3] = &unk_102166598;
  v9[4] = a1;
  v7[4] = a1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100A8BBE4;
  v8[3] = &unk_1021665B8;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100A8BDAC;
  v7[3] = &unk_1021665D8;
  v5[4] = a1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100A8BF74;
  v6[3] = &unk_1021665F8;
  v6[4] = a1;
  v4[4] = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100A8C2E4;
  v5[3] = &unk_102166618;
  v3[4] = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100A8D38C;
  v4[3] = &unk_102166638;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100A8E23C;
  v3[3] = &unk_102166658;
  result = -[CLEEDHelperService initWithUniverse:pendingRequestsCB:streamingRequestCB:uploadRequestCB:streamingEndCB:uploadListCB:handleResponseCB:mitigationsCB:]([CLEEDHelperService alloc], "initWithUniverse:pendingRequestsCB:streamingRequestCB:uploadRequestCB:streamingEndCB:uploadListCB:handleResponseCB:mitigationsCB:", *(_QWORD *)(a1 + 8), v9, v8, v7, v6, v5, v4, v3);
  *(_QWORD *)(a1 + 1872) = result;
  return result;
}

uint64_t sub_100A6F8CC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[2];
  uint8_t buf[1640];

  if (!sub_100A5723C(a1 + 1448))
    return 1;
  if (!sub_100CD594C(a1 + 112) && (sub_100CD598C(a1 + 112) || *(_BYTE *)(a1 + 160) && sub_100CD597C(a1 + 112)))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,expectedState,State::ActiveSession", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v14[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,expectedState,State::ActiveSession", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::expectedState()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return 3;
  }
  if (!sub_100CD594C(a1 + 112) && sub_100CD599C(a1 + 112) && !sub_100CD598C(a1 + 112))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,expectedState,State::ExtendedSession due to fEmergencyState in EEM", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 4;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,expectedState,State::ExtendedSession due to fEmergencyState in EEM", v14, 2, v14[0]);
    goto LABEL_40;
  }
  if (*(_BYTE *)(a1 + 184))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,expectedState,State::ExtendedSession due to fAssertingSession", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 4;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,expectedState,State::ExtendedSession due to fAssertingSession", v14, 2, v14[0]);
LABEL_40:
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::expectedState()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 4;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,expectedState, State::Idle", buf, 2u);
  }
  v3 = 2;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,expectedState, State::Idle", v14, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::expectedState()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
    return 2;
  }
  return v3;
}

BOOL sub_100A6FE08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t *v5;
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint64_t *v12;
  double v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  id v18;
  const void *v19;
  uint64_t *v20;
  id v21;
  id v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t *v33;
  id v34;
  NSObject *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  id v40;
  NSObject *v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t *v45;
  id v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  id v53;
  id v54;
  uint64_t v55;
  id v56;
  id v57;
  const char *v58;
  uint8_t *v59;
  NSObject *v60;
  const char *v61;
  id v62;
  NSObject *v63;
  id v64;
  void *v65;
  uint64_t *v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  NSObject *v73;
  id v74;
  id v75;
  uint64_t v76;
  id v77;
  id v78;
  const char *v79;
  uint8_t *v80;
  NSObject *v81;
  const char *v82;
  id v83;
  NSObject *v84;
  id v85;
  void *v86;
  uint64_t *v87;
  id v88;
  NSObject *v89;
  void *v90;
  NSObject *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint8_t *v97;
  uint64_t v98;
  id v99;
  const char *v100;
  uint8_t *v101;
  uint64_t v102;
  id v103;
  const char *v104;
  uint8_t *v105;
  uint64_t v106;
  id v107;
  void *v108;
  const char *v109;
  uint8_t *v110;
  uint64_t v111;
  id v112;
  void *v113;
  const char *v114;
  uint8_t *v115;
  void *v116;
  const char *v117;
  uint8_t *v118;
  const char *v119;
  uint64_t v120;
  void *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  void *v131;
  _BYTE v132[128];
  _BYTE v133[128];
  int v134;
  id v135;
  __int16 v136;
  id v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  uint8_t buf[4];
  id v143;
  __int16 v144;
  id v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;

  v131 = 0;
  v2 = sub_1001FD94C();
  if ((sub_100219F40(v2, (uint64_t)CFSTR("EEDCacheData"), (CFTypeRef *)&v131) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,EED data not cached. Early Return", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v134) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDDataFromCache,EED data not cached. Early Return", &v134, 2);
      v9 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v11);
      goto LABEL_209;
    }
    return result;
  }
  v3 = *(_QWORD *)(a1 + 2088);
  if (!v3)
    operator new();
  v4 = sub_100A72C3C(v3);
  *(_BYTE *)(*(_QWORD *)(a1 + 2088) + 41) = 1;
  v121 = v131;
  if (byte_1023064D7 >= 0)
    v5 = &qword_1023064C0;
  else
    v5 = (uint64_t *)qword_1023064C0;
  if (objc_msgSend(objc_msgSend(v131, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5, v4)), "intValue") == 4&& sub_100A6F8CC(a1) == 3)
  {
    sub_100A723DC();
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,ignore cached data and clear it as new session has started in the interim. Early Return", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v134) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDDataFromCache,ignore cached data and clear it as new session has started in the interim. Early Return", &v134, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v8);
LABEL_209:
      if (v9 != buf)
        free(v9);
      return 0;
    }
    return result;
  }
  if (byte_1023064A7 >= 0)
    v12 = &qword_102306490;
  else
    v12 = (uint64_t *)qword_102306490;
  objc_msgSend(objc_msgSend(v121, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)), "doubleValue");
  *(double *)(a1 + 168) = v13;
  if (v13 <= 0.0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v23 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fSessionStartTime unavailable, Early Return", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v134) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDDataFromCache,fSessionStartTime unavailable, Early Return", &v134, 2);
      v9 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v24);
      goto LABEL_209;
    }
    return result;
  }
  if (byte_1023064BF >= 0)
    v14 = &qword_1023064A8;
  else
    v14 = (uint64_t *)qword_1023064A8;
  objc_msgSend(objc_msgSend(v121, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14)), "doubleValue");
  *(_QWORD *)(a1 + 1896) = v15;
  v16 = *(void **)(a1 + 1944);
  if (v16)

  if (byte_1023064EF >= 0)
    v17 = &qword_1023064D8;
  else
    v17 = (uint64_t *)qword_1023064D8;
  v18 = objc_msgSend(v121, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
  *(_QWORD *)(a1 + 1944) = v18;
  if (!v18)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v25 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fRootSecret unavailable, Early Return", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v134) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDDataFromCache,fRootSecret unavailable, Early Return", &v134, 2);
      v9 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v26);
      goto LABEL_209;
    }
    return result;
  }
  v19 = *(const void **)(a1 + 1952);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 1952) = 0;
  }
  if (byte_102306507 >= 0)
    v20 = &qword_1023064F0;
  else
    v20 = (uint64_t *)qword_1023064F0;
  v21 = objc_msgSend(v121, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
  if (v21)
  {
    v22 = +[CLEEDCryptoUtilities createKeyFromExternalRepresentationString:keyClass:](CLEEDCryptoUtilities, "createKeyFromExternalRepresentationString:keyClass:", v21, kSecAttrKeyClassPrivate);
    *(_QWORD *)(a1 + 1952) = v22;
  }
  else
  {
    v22 = *(id *)(a1 + 1952);
  }
  if (v22)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v27 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v28 = *(void **)(a1 + 168);
      v29 = *(void **)(a1 + 1896);
      v30 = *(_QWORD *)(a1 + 1944);
      v31 = *(_QWORD *)(a1 + 1952);
      *(_DWORD *)buf = 134349827;
      v143 = v28;
      v144 = 2050;
      v145 = v29;
      v146 = 2113;
      v147 = v30;
      v148 = 2113;
      v149 = v31;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched fSessionStartTime:%{public}f, fCallEndTime:%{public}f, fRootSecret:%{private}@, fDeviceSessionPrivateKey:%{private}@", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v92 = *(void **)(a1 + 168);
      v93 = *(void **)(a1 + 1896);
      v94 = *(_QWORD *)(a1 + 1944);
      v95 = *(_QWORD *)(a1 + 1952);
      v134 = 134349827;
      v135 = v92;
      v136 = 2050;
      v137 = v93;
      v138 = 2113;
      v139 = v94;
      v140 = 2113;
      v141 = v95;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDDataFromCache,fetched fSessionStartTime:%{public}f, fCallEndTime:%{public}f, fRootSecret:%{private}@, fDeviceSessionPrivateKey:%{private}@", &v134, 42);
      v97 = (uint8_t *)v96;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v96);
      if (v97 != buf)
        free(v97);
    }
    v32 = *(void **)(a1 + 1928);
    if (v32)
    {

      *(_QWORD *)(a1 + 1928) = 0;
    }
    if (byte_10230651F >= 0)
      v33 = &qword_102306508;
    else
      v33 = (uint64_t *)qword_102306508;
    v34 = objc_msgSend(v121, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v33));
    if (v34)
    {
      v130 = 0;
      *(_QWORD *)(a1 + 1928) = +[CLEEDRequest createRequestFromCachedDict:error:](CLEEDRequest, "createRequestFromCachedDict:error:", v34, &v130);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v35 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v36 = objc_msgSend(*(id *)(a1 + 1928), "ID");
        v37 = *(void **)(a1 + 1928);
        *(_DWORD *)buf = 138543875;
        v143 = v36;
        v144 = 2113;
        v145 = v37;
        v146 = 2050;
        v147 = v130;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched requestID:%{public}@, fCurrentStreamingRequest from cache:%{private}@, error:%{public}ld", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v106 = qword_1022A0088;
        v107 = objc_msgSend(*(id *)(a1 + 1928), "ID");
        v108 = *(void **)(a1 + 1928);
        v134 = 138543875;
        v135 = v107;
        v136 = 2113;
        v137 = v108;
        v138 = 2050;
        v139 = v130;
        LODWORD(v120) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v106, 0, "#EED2,readEEDDataFromCache,fetched requestID:%{public}@, fCurrentStreamingRequest from cache:%{private}@, error:%{public}ld", &v134, v120);
        v110 = (uint8_t *)v109;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v109);
        if (v110 != buf)
          free(v110);
      }
    }
    v38 = *(void **)(a1 + 1936);
    if (v38)
    {

      *(_QWORD *)(a1 + 1936) = 0;
    }
    if (byte_102306537 >= 0)
      v39 = &qword_102306520;
    else
      v39 = (uint64_t *)qword_102306520;
    v40 = objc_msgSend(v121, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v39));
    if (v40)
    {
      v130 = 0;
      *(_QWORD *)(a1 + 1936) = +[CLEEDRequest createRequestFromCachedDict:error:](CLEEDRequest, "createRequestFromCachedDict:error:", v40, &v130);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v41 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v42 = objc_msgSend(*(id *)(a1 + 1936), "ID");
        v43 = *(void **)(a1 + 1936);
        *(_DWORD *)buf = 138543875;
        v143 = v42;
        v144 = 2113;
        v145 = v43;
        v146 = 2050;
        v147 = v130;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched requestID:%{public}@, fCurrentUploadRequest from cache:%{private}@, error:%{public}ld", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v111 = qword_1022A0088;
        v112 = objc_msgSend(*(id *)(a1 + 1936), "ID");
        v113 = *(void **)(a1 + 1936);
        v134 = 138543875;
        v135 = v112;
        v136 = 2113;
        v137 = v113;
        v138 = 2050;
        v139 = v130;
        LODWORD(v120) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v111, 0, "#EED2,readEEDDataFromCache,fetched requestID:%{public}@, fCurrentUploadRequest from cache:%{private}@, error:%{public}ld", &v134, v120);
        v115 = (uint8_t *)v114;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v114);
        if (v115 != buf)
          free(v115);
      }
    }
    v44 = *(void **)(a1 + 1912);
    if (v44)

    *(_QWORD *)(a1 + 1912) = objc_alloc_init((Class)NSMutableArray);
    if (byte_102306567 >= 0)
      v45 = &qword_102306550;
    else
      v45 = (uint64_t *)qword_102306550;
    v46 = objc_msgSend(v121, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v45));
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v126, v133, 16);
    if (v47)
    {
      v48 = *(_QWORD *)v127;
      do
      {
        v49 = 0;
        do
        {
          if (*(_QWORD *)v127 != v48)
            objc_enumerationMutation(v46);
          v50 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 8 * (_QWORD)v49);
          v130 = 0;
          v51 = +[CLEEDRequest createRequestFromCachedDict:error:](CLEEDRequest, "createRequestFromCachedDict:error:", v50, &v130);
          if (v51)
          {
            objc_msgSend(*(id *)(a1 + 1912), "addObject:", v51);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v52 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              v53 = objc_msgSend(v51, "ID");
              v54 = objc_msgSend(v51, "type");
              *(_DWORD *)buf = 138543618;
              v143 = v53;
              v144 = 2050;
              v145 = v54;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched requestID:%{public}@, \"pending request\" with requestType:%{public}ld, from cache", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_102166788);
              v55 = qword_1022A0088;
              v56 = objc_msgSend(v51, "ID");
              v57 = objc_msgSend(v51, "type");
              v134 = 138543618;
              v135 = v56;
              v136 = 2050;
              v137 = v57;
              LODWORD(v120) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 0, "#EED2,readEEDDataFromCache,fetched requestID:%{public}@, \"pending request\" with requestType:%{public}ld, from cache", &v134, v120);
              v59 = (uint8_t *)v58;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v58);
LABEL_119:
              if (v59 != buf)
                free(v59);
            }
          }
          else
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v60 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "#EED2,readEEDDataFromCache,requestsPendingArray, prendingRequest creation failed. This should not happen", buf, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_102166788);
              LOWORD(v134) = 0;
              LODWORD(v120) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,readEEDDataFromCache,requestsPendingArray, prendingRequest creation failed. This should not happen", &v134, v120);
              v59 = (uint8_t *)v61;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v61);
              goto LABEL_119;
            }
          }
          v49 = (char *)v49 + 1;
        }
        while (v47 != v49);
        v62 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v126, v133, 16);
        v47 = v62;
      }
      while (v62);
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v63 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v64 = objc_msgSend(*(id *)(a1 + 1912), "count");
      *(_DWORD *)buf = 134349056;
      v143 = v64;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched %{public}lu \"pending requests\" from cache", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v98 = qword_1022A0088;
      v99 = objc_msgSend(*(id *)(a1 + 1912), "count");
      v134 = 134349056;
      v135 = v99;
      LODWORD(v120) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v98, 0, "#EED2,readEEDDataFromCache,fetched %{public}lu \"pending requests\" from cache", &v134, v120);
      v101 = (uint8_t *)v100;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v100);
      if (v101 != buf)
        free(v101);
    }
    v65 = *(void **)(a1 + 1920);
    if (v65)

    *(_QWORD *)(a1 + 1920) = objc_alloc_init((Class)NSMutableArray);
    if (byte_10230657F >= 0)
      v66 = &qword_102306568;
    else
      v66 = (uint64_t *)qword_102306568;
    v67 = objc_msgSend(v121, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v66));
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v68 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v122, v132, 16);
    if (!v68)
    {
LABEL_159:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v84 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v85 = objc_msgSend(*(id *)(a1 + 1920), "count");
        *(_DWORD *)buf = 134349056;
        v143 = v85;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched %{public}lu \"handled requests\" from cache", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v102 = qword_1022A0088;
        v103 = objc_msgSend(*(id *)(a1 + 1920), "count");
        v134 = 134349056;
        v135 = v103;
        LODWORD(v120) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v102, 0, "#EED2,readEEDDataFromCache,fetched %{public}lu \"handled requests\" from cache", &v134, v120);
        v105 = (uint8_t *)v104;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v104);
        if (v105 != buf)
          free(v105);
      }
      v86 = *(void **)(a1 + 1992);
      if (v86)
      {

        *(_QWORD *)(a1 + 1992) = 0;
      }
      if (byte_10230654F >= 0)
        v87 = &qword_102306538;
      else
        v87 = (uint64_t *)qword_102306538;
      v88 = objc_msgSend(v121, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v87));
      if (v88)
      {
        *(_QWORD *)(a1 + 1992) = +[CLEEDMitigation newMitigationFromDict:](CLEEDMitigation, "newMitigationFromDict:", v88);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v89 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v90 = *(void **)(a1 + 1992);
          *(_DWORD *)buf = 138543362;
          v143 = v90;
          _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched Mitigation:%{public}@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v116 = *(void **)(a1 + 1992);
          v134 = 138543362;
          v135 = v116;
          LODWORD(v120) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDDataFromCache,fetched Mitigation:%{public}@", &v134, v120);
          v118 = (uint8_t *)v117;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v117);
          if (v118 != buf)
            free(v118);
        }
      }
      sub_100A90F20(a1);
      return 1;
    }
    v69 = *(_QWORD *)v123;
LABEL_134:
    v70 = 0;
    while (1)
    {
      if (*(_QWORD *)v123 != v69)
        objc_enumerationMutation(v67);
      v71 = *(_QWORD *)(*((_QWORD *)&v122 + 1) + 8 * v70);
      v130 = 0;
      v72 = +[CLEEDRequest createRequestFromCachedDict:error:](CLEEDRequest, "createRequestFromCachedDict:error:", v71, &v130);
      if (v72)
      {
        objc_msgSend(*(id *)(a1 + 1920), "addObject:", v72);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v73 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v74 = objc_msgSend(v72, "ID");
          v75 = objc_msgSend(v72, "type");
          *(_DWORD *)buf = 138543618;
          v143 = v74;
          v144 = 2050;
          v145 = v75;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#EED2,readDataFromCache,fetched requestID:%{public}@, \"handled request\" with requestType:%{public}ld, from cache", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_151;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v76 = qword_1022A0088;
        v77 = objc_msgSend(v72, "ID");
        v78 = objc_msgSend(v72, "type");
        v134 = 138543618;
        v135 = v77;
        v136 = 2050;
        v137 = v78;
        LODWORD(v120) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v76, 0, "#EED2,readDataFromCache,fetched requestID:%{public}@, \"handled request\" with requestType:%{public}ld, from cache", &v134, v120);
        v80 = (uint8_t *)v79;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v79);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v81 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "#EED2,readEEDDataFromCache,requestsHandledArray, handledRequest creation failed. This should not happen", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_151;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v134) = 0;
        LODWORD(v120) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,readEEDDataFromCache,requestsHandledArray, handledRequest creation failed. This should not happen", &v134, v120);
        v80 = (uint8_t *)v82;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v82);
      }
      if (v80 != buf)
        free(v80);
LABEL_151:
      if (v68 == (id)++v70)
      {
        v83 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v122, v132, 16);
        v68 = v83;
        if (!v83)
          goto LABEL_159;
        goto LABEL_134;
      }
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v91 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fDeviceSessionPrivateKey unavailable, Early Return", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v134) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDDataFromCache,fDeviceSessionPrivateKey unavailable, Early Return", &v134, 2);
    v9 = (uint8_t *)v119;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v119);
    goto LABEL_209;
  }
  return result;
}

void sub_100A7185C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (*(int *)(a1 + 1976) < 5)
  {
    if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", CFSTR("/private/var/mobile/Library/CLEEDMediaService/CLEEDMSCache")))
    {
      ++*(_DWORD *)(a1 + 1976);
      sub_100A8FD18(a1);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,checkAndRestoreEEDMediaService, initialized media service", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v11[0]) = 0;
        v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,checkAndRestoreEEDMediaService, initialized media service", v11, 2);
        v7 = v10;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::checkAndRestoreEEDMediaService()", "%s\n", v9);
        goto LABEL_20;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v3 = *(_DWORD *)(a1 + 1976);
      *(_DWORD *)buf = 67240192;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#EED2,checkAndRestoreEEDMediaService,LaunchCount exceeded limit:%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v4 = *(_DWORD *)(a1 + 1976);
      v11[0] = 67240192;
      v11[1] = v4;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,checkAndRestoreEEDMediaService,LaunchCount exceeded limit:%{public}d", v11, 8);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::checkAndRestoreEEDMediaService()", "%s\n", v5);
LABEL_20:
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100A71B64(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  int v29;
  uint64_t i;
  void *v31;
  void *v32;
  NSObject *v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  uint64_t v41[3];
  void **v42;
  char v43;
  char *v44;
  _BYTE *v45;
  _BYTE v46[10];
  __int16 v47;
  unsigned int v48;
  __int16 v49;
  unsigned int v50;
  uint8_t buf[8];
  _BYTE v52[6];
  __int16 v53;
  unsigned int v54;
  __int16 v55;
  unsigned int v56;
  __int16 v57;
  unsigned int v58;
  _DWORD v59[74];
  char v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  char v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  uint64_t v134;

  v2 = *(void **)(a1 + 2016);
  if (v2)
  {
    v3 = objc_msgSend(objc_msgSend(v2, "valueForKey:", CFSTR("thermalLevelAtStartOfCall")), "intValue");
    v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 2016), "valueForKey:", CFSTR("maxThermalLevelInCall")), "intValue");
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 2016), "valueForKey:", CFSTR("thermalLevelAtEndOfCall")), "intValue");
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 2016), "valueForKey:", CFSTR("peakPowerAtStartOfCall")), "intValue");
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 2016), "valueForKey:", CFSTR("maxPeakPowerInCall")), "intValue");
    v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 2016), "valueForKey:", CFSTR("peakPowerAtEndOfCall")), "intValue");
  }
  else
  {
    v8 = -1;
    v7 = -1;
    v6 = -1;
    v5 = -1;
    v4 = -1;
    v3 = -1;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v3;
    *(_WORD *)v52 = 1024;
    *(_DWORD *)&v52[2] = v4;
    v53 = 1024;
    v54 = v5;
    v55 = 1024;
    v56 = v6;
    v57 = 1024;
    v58 = v7;
    LOWORD(v59[0]) = 1024;
    *(_DWORD *)((char *)v59 + 2) = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,submitEED2SessionDatatoCA,thermalLevelAtStartOfCall:%d, maxThermalLevelInCall:%d, thermalLevelAtEndOfCall:%d, peakPowerAtStartOfCall:%d, maxPeakPowerInCall:%d, peakPowerAtEndOfCall:%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LODWORD(v44) = 67110400;
    HIDWORD(v44) = v3;
    LOWORD(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 2) = v4;
    HIWORD(v45) = 1024;
    *(_DWORD *)v46 = v5;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v6;
    v47 = 1024;
    v48 = v7;
    v49 = 1024;
    v50 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,submitEED2SessionDatatoCA,thermalLevelAtStartOfCall:%d, maxThermalLevelInCall:%d, thermalLevelAtEndOfCall:%d, peakPowerAtStartOfCall:%d, maxPeakPowerInCall:%d, peakPowerAtEndOfCall:%d", &v44, 38, LODWORD(__p[0]), LODWORD(__p[1]), v40, LODWORD(v41[0]));
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::submitEED2SessionDatatoCA()", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  v10 = *(int **)(a1 + 2088);
  if (v10)
  {
    v11 = v10[2];
    *(_DWORD *)buf = 108;
    *(_DWORD *)v52 = v11;
    v59[0] = 0;
    v12 = *v10;
    v59[2] = 110;
    v59[4] = v12;
    v59[10] = 0;
    v13 = v10[1];
    v59[12] = 111;
    v59[14] = v13;
    v59[20] = 0;
    v14 = v10[3];
    v59[22] = 109;
    v59[24] = v14;
    v59[30] = 0;
    v15 = v10[4];
    v59[32] = 113;
    v59[34] = v15;
    v59[40] = 0;
    v16 = v10[5];
    v59[42] = 114;
    v59[44] = v16;
    v59[50] = 0;
    v17 = v10[6];
    v59[52] = 107;
    v59[54] = v17;
    v59[60] = 0;
    v18 = v10[9];
    v59[62] = 112;
    v59[64] = v18;
    v59[70] = 0;
    LOBYTE(v18) = *((_BYTE *)v10 + 40);
    v59[72] = 190;
    v60 = v18;
    v61 = 7;
    v19 = v10[11];
    v62 = 191;
    v63 = v19;
    v64 = 0;
    v20 = v10[12];
    v65 = 192;
    v66 = v20;
    v67 = 0;
    v21 = v10[13];
    v68 = 193;
    v69 = v21;
    v70 = 0;
    v22 = v10[14];
    v71 = 194;
    v72 = v22;
    v73 = 0;
    v23 = v10[15];
    v74 = 195;
    v75 = v23;
    v76 = 0;
    v24 = v10[16];
    v77 = 196;
    v78 = v24;
    v79 = 0;
    LOBYTE(v24) = *((_BYTE *)v10 + 41);
    v80 = 197;
    v81 = v24;
    v82 = 7;
    v25 = *((_QWORD *)v10 + 9);
    v83 = 198;
    v84 = v25;
    v85 = 0;
    LODWORD(v25) = v10[20];
    v86 = 199;
    v87 = v25;
    v88 = 0;
    LODWORD(v25) = v10[21];
    v89 = 200;
    v90 = v25;
    v91 = 0;
    LODWORD(v25) = v10[22];
    v92 = 201;
    v93 = v25;
    v94 = 0;
    LODWORD(v25) = v10[23];
    v95 = 202;
    v96 = v25;
    v97 = 0;
    LODWORD(v25) = v10[24];
    v98 = 203;
    v99 = v25;
    v100 = 0;
    LODWORD(v25) = v10[25];
    v101 = 204;
    v102 = v25;
    v103 = 0;
    v26 = v10[27] - v10[26];
    if (v26 < 0)
      v26 = v10[26] - v10[27];
    v104 = 205;
    v105 = v26;
    v106 = 0;
    v27 = *((_BYTE *)v10 + 112);
    v107 = 206;
    v108 = v27;
    v109 = 7;
    v28 = v10[26];
    v110 = 207;
    v111 = v28;
    v112 = 0;
    v29 = v10[27];
    v113 = 208;
    v114 = v29;
    v115 = 0;
    v116 = 220;
    v117 = v3;
    v118 = 0;
    v119 = 221;
    v120 = v4;
    v121 = 0;
    v122 = 222;
    v123 = v5;
    v124 = 0;
    v125 = 223;
    v126 = v6;
    v127 = 0;
    v128 = 224;
    v129 = v7;
    v130 = 0;
    v131 = 225;
    v132 = v8;
    v133 = 0;
    v44 = 0;
    v45 = 0;
    *(_QWORD *)v46 = 0;
    v42 = (void **)&v44;
    v43 = 0;
    v44 = (char *)operator new(0x528uLL);
    v45 = v44;
    *(_QWORD *)v46 = v44 + 1320;
    v45 = (_BYTE *)sub_1006AB40C((uint64_t)v46, (uint64_t)buf, (uint64_t)&v134, (uint64_t)v44);
    for (i = 1288; i != -32; i -= 40)
      sub_1001F8644((uint64_t)&buf[i]);
    v31 = *(void **)(a1 + 2096);
    memset(v41, 0, sizeof(v41));
    sub_1006AB68C(v41, (uint64_t)v44, (uint64_t)v45, 0xCCCCCCCCCCCCCCCDLL * ((v45 - v44) >> 3));
    objc_msgSend(v31, "setMeasurements:", sub_1006A7590(v41));
    *(_QWORD *)buf = v41;
    sub_1006AB5A0((void ***)buf);
    v32 = *(void **)(a1 + 2096);
    if (byte_102311257 < 0)
    {
      sub_100115CE4(__p, (void *)xmmword_102311240, *((unint64_t *)&xmmword_102311240 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_102311240;
      v40 = unk_102311250;
    }
    objc_msgSend(v32, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
    if (SHIBYTE(v40) < 0)
      operator delete(__p[0]);
    sub_100A72C3C(*(_QWORD *)(a1 + 2088));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v33 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#EED2,submitEED2SessionDatatoCA,metric submitted", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v42) = 0;
      LODWORD(v38) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,submitEED2SessionDatatoCA,metric submitted", &v42, v38);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::submitEED2SessionDatatoCA()", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
    *(_QWORD *)buf = &v44;
    sub_1006AB5A0((void ***)buf);
  }
}

void sub_100A72304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28)
{
  a28 = &a22;
  sub_1006AB5A0((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_100A72390(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;

  v5 = sub_100A86958(a1, *a2);
  v6 = v5;
  result = sub_100A86958(v5, a3);
  v8 = *a2;
  if (v6 >= result)
    v8 = a3;
  *a2 = v8;
  return result;
}

void sub_100A723DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v0 = sub_1001FD94C();
  if (sub_100525C4C(v0))
  {
    v1 = sub_1001FD94C();
    sub_1005254E4(v1);
    v2 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 944))(v2);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2,clearEEDDataFromCache,complete", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,clearEEDDataFromCache,complete", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::clearEEDDataFromCache()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100A72598()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v0 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#EED2,clearEEDMetricDataFromCache,entered", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,clearEEDMetricDataFromCache,entered", v10, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::clearEEDMetricDataFromCache()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v1 = sub_1001FD94C();
  if (sub_100525C4C(v1))
  {
    v2 = sub_1001FD94C();
    sub_1005254E4(v2);
    v3 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,clearEEDMetricDataFromCache,complete", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10[0] = 0;
      LODWORD(v9) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,clearEEDMetricDataFromCache,complete", v10, v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::clearEEDMetricDataFromCache()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100A72884()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v0 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#EED2,clearCoexMetricDataFromCache,entered", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,clearCoexMetricDataFromCache,entered", v10, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::clearCoexMetricDataFromCache()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v1 = sub_1001FD94C();
  if (sub_100525C4C(v1))
  {
    v2 = sub_1001FD94C();
    sub_1005254E4(v2);
    v3 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,clearCoexMetricDataFromCache,complete", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10[0] = 0;
      LODWORD(v9) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,clearCoexMetricDataFromCache,complete", v10, v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::clearCoexMetricDataFromCache()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100A72B70(uint64_t a1)
{
  void *v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(CFAbsoluteTime *)(a1 + 168) = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(a1 + 1896) = 0;
  v2 = *(void **)(a1 + 1944);
  if (v2)

  *(_QWORD *)(a1 + 1944) = +[CLEEDCryptoUtilities getRandomBytes:](CLEEDCryptoUtilities, "getRandomBytes:", 32);
  v3 = *(const void **)(a1 + 1952);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 1952) = +[CLEEDCryptoUtilities createRandomP256PrivateKey](CLEEDCryptoUtilities, "createRandomP256PrivateKey");
  v4 = *(void **)(a1 + 1912);
  if (v4)

  *(_QWORD *)(a1 + 1912) = objc_alloc_init((Class)NSMutableArray);
  v5 = *(void **)(a1 + 1920);
  if (v5)

  *(_QWORD *)(a1 + 1920) = objc_alloc_init((Class)NSMutableArray);
  v6 = *(void **)(a1 + 1928);
  if (v6)
  {

    *(_QWORD *)(a1 + 1928) = 0;
  }
  v7 = *(void **)(a1 + 1936);
  if (v7)
  {

    *(_QWORD *)(a1 + 1936) = 0;
  }
  v8 = *(void **)(a1 + 1992);
  if (v8)
  {

    *(_QWORD *)(a1 + 1992) = 0;
  }
  sub_100A77908(a1);
}

double sub_100A72C3C(uint64_t a1)
{
  NSObject *v2;
  __int128 v8;
  double result;
  uint8_t buf[40];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca AnalyticsReport::reset\"}", buf, 0x12u);
  }
  memset(buf, 0, 32);
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 28) = _D0;
  *(_OWORD *)(a1 + 44) = 0uLL;
  v8 = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&buf[16];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 10;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 72) = v8;
  result = NAN;
  *(_QWORD *)(a1 + 104) = -1;
  *(_BYTE *)(a1 + 112) = 0;
  return result;
}

void sub_100A72D68(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  CLEEDCoexMonitor *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  CLEEDCoexMonitor *v18;
  NSObject *v19;
  double v20;
  uint8_t *v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD v31[5];
  _QWORD v32[5];
  _OWORD v33[10];
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  uint64_t v41;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 1992);
    v4 = *(_QWORD *)(a1 + 1984);
    *(_DWORD *)buf = 138543618;
    v39 = v3;
    v40 = 2114;
    v41 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CX, initializeCoexMonitor:Mitigations:%{public}@, Monitor:%{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v24 = *(_QWORD *)(a1 + 1992);
    v25 = *(_QWORD *)(a1 + 1984);
    v34 = 138543618;
    v35 = v24;
    v36 = 2114;
    v37 = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CX, initializeCoexMonitor:Mitigations:%{public}@, Monitor:%{public}@", &v34, 22);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeCoexMonitor()", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }

  v5 = [CLEEDCoexMonitor alloc];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 1992);
  v8 = sub_100A57ECC((int *)(a1 + 1448));
  v9 = *((_OWORD *)v8 + 21);
  v33[6] = *((_OWORD *)v8 + 20);
  v33[7] = v9;
  v10 = *((_OWORD *)v8 + 23);
  v33[8] = *((_OWORD *)v8 + 22);
  v33[9] = v10;
  v11 = *((_OWORD *)v8 + 17);
  v33[2] = *((_OWORD *)v8 + 16);
  v33[3] = v11;
  v12 = *((_OWORD *)v8 + 19);
  v33[4] = *((_OWORD *)v8 + 18);
  v33[5] = v12;
  v13 = *((_OWORD *)v8 + 15);
  v33[0] = *((_OWORD *)v8 + 14);
  v33[1] = v13;
  v14 = *(unsigned int *)(a1 + 1448);
  *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
  v15 = *(_QWORD *)(a1 + 56);
  if (!v15)
    sub_10025FD1C();
  v16 = *(unsigned int *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v15 + 48))(v15, buf);
  v17 = sub_100CD593C(a1 + 112);
  v31[4] = a1;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100A8E768;
  v32[3] = &unk_102166678;
  v32[4] = a1;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100A8F710;
  v31[3] = &unk_102166698;
  v18 = -[CLEEDCoexMonitor initWithUniverse:initialMitigation:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:mitigationCB:coexMetricUpdateCB:](v5, "initWithUniverse:initialMitigation:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:mitigationCB:coexMetricUpdateCB:", v6, v7, v33, v14, v16, v17, sub_100A8E450(), v32, v31);
  *(_QWORD *)(a1 + 1984) = v18;
  if (v18)
  {
    if (*(_BYTE *)(a1 + 2012))
      -[CLEEDCoexMonitor handleReachability:](v18, "handleReachability:", *(unsigned int *)(a1 + 2008));
    if (*(_BYTE *)(a1 + 2004))
      objc_msgSend(*(id *)(a1 + 1984), "handleVlqmForActiveCall:", *(unsigned int *)(a1 + 2000));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EED2CX,fEEDCoexMonitor initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v34) = 0;
      LODWORD(v30) = 2;
      v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CX,fEEDCoexMonitor initialized", &v34, v30);
      v22 = v21;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeCoexMonitor()", "%s\n", v20);
LABEL_33:
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v23 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#EED2CX,fEEDCoexMonitor initialization failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v34) = 0;
      LODWORD(v30) = 2;
      v28 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2CX,fEEDCoexMonitor initialization failed", &v34, v30);
      v22 = v29;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeCoexMonitor()", "%s\n", v28);
      goto LABEL_33;
    }
  }
}

void sub_100A732B8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  CLEmergencyEED2APNSHelper *v5;
  uint64_t v6;
  __int16 v7;
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 1864))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#EED2,initializeAPNSHelper,fAPNSHelper object already available. This should not happen!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v7 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,initializeAPNSHelper,fAPNSHelper object already available. This should not happen!", &v7, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeAPNSHelper()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  else
  {
    v5 = [CLEmergencyEED2APNSHelper alloc];
    v6 = *(_QWORD *)(a1 + 8);
    v9[4] = a1;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100A87284;
    v10[3] = &unk_102153F28;
    v10[4] = a1;
    v8[4] = a1;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100A875A8;
    v9[3] = &unk_102166528;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100A87920;
    v8[3] = &unk_10212ECA0;
    *(_QWORD *)(a1 + 1864) = -[CLEmergencyEED2APNSHelper initWithUniverse:apnsTokenCallback:apnsMessageCallback:apnsReconnectedCallback:](v5, "initWithUniverse:apnsTokenCallback:apnsMessageCallback:apnsReconnectedCallback:", v6, v10, v9, v8);
  }
  sub_100A81AD8(a1);
}

void sub_100A734E4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  NSObject *v7;
  double v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (!*((_BYTE *)sub_100A57ECC((int *)(a1 + 1448)) + 59))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2,requestAPNSToken,feature not enabled or requests not supported,early return", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10[0] = 0;
    v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,requestAPNSToken,feature not enabled or requests not supported,early return", v10, 2);
    v6 = v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::requestAPNSToken()", "%s\n", v4);
LABEL_21:
    if (v6 != buf)
      free(v6);
    return;
  }
  v2 = *(void **)(a1 + 1864);
  if (v2)
  {
    _objc_msgSend(v2, "requestAPNSToken");
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2,requestAPNSToken,nil fAPNSHelper,early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10[0] = 0;
    v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,requestAPNSToken,nil fAPNSHelper,early return", v10, 2);
    v6 = v9;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::requestAPNSToken()", "%s\n", v8);
    goto LABEL_21;
  }
}

_QWORD *sub_100A737CC(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_100593090(a1, a3);
    a1[1] = sub_1006AB40C(v4, a2, a2 + 40 * a3, a1[1]);
  }
  return a1;
}

void sub_100A73848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1006AB5A0(&a9);
  _Unwind_Resume(a1);
}

void sub_100A73868(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 1776))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v1 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#EED2 startCanSendADRTimeout called when timeout is already running, ignoring", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 startCanSendADRTimeout called when timeout is already running, ignoring", v8, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::startCanSendADRTimeout()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2 startCanSendADRTimeout", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 startCanSendADRTimeout", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::startCanSendADRTimeout()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    *(_BYTE *)(a1 + 1776) = 1;
    sub_100A6E834(a1 + 1536, 12, 12.0);
  }
}

void sub_100A73B40(uint64_t a1)
{
  NSObject *v2;
  uint8_t *v3;
  double v4;
  NSObject *v5;
  uint8_t *v6;
  NSObject *v7;
  double v8;
  uint8_t *v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[5];
  _WORD v15[8];
  uint8_t buf[1640];

  if (*((_BYTE *)sub_100A57ECC((int *)(a1 + 1448)) + 58))
  {
    if (*(_QWORD *)(a1 + 1728))
    {
      if (*(_BYTE *)(a1 + 1760))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v2 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#DSA,already registered for DSA so ignoring", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v15[0] = 0;
          v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#DSA,already registered for DSA so ignoring", v15, 2);
LABEL_20:
          v6 = v3;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::registerForDispatchableSearchArea()", "%s\n", v4);
LABEL_29:
          if (v6 != buf)
            free(v6);
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v10 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2,#DSA,fetching infered place", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v15[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#DSA,fetching infered place", v15, 2);
          v13 = (uint8_t *)v12;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::registerForDispatchableSearchArea()", "%s\n", v12);
          if (v13 != buf)
            free(v13);
        }
        *(_BYTE *)(a1 + 1760) = 1;
        v11 = *(void **)(a1 + 1728);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_100A85268;
        v14[3] = &unk_10214C458;
        v14[4] = a1;
        objc_msgSend(v11, "_fetchContinuousPlaceInferencesWithFidelityPolicy:handler:", 4, v14);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2,#DSA,cannot register for infered place due to not having LM", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v15[0] = 0;
        v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#DSA,cannot register for infered place due to not having LM", v15, 2);
        v6 = v9;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::registerForDispatchableSearchArea()", "%s\n", v8);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,#DSA,is disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v15[0] = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#DSA,is disabled", v15, 2);
      goto LABEL_20;
    }
  }
}

void sub_100A7404C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  NSObject *v10;
  id v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  int v32;
  id v33;
  uint8_t buf[4];
  id v35;

  *(CFAbsoluteTime *)(a1 + 1896) = CFAbsoluteTimeGetCurrent();
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(a1 + 1896);
    *(_DWORD *)buf = 134283521;
    v35 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupOnEmergencyCallEnd,set fCallEndTime to %{private}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v15 = *(void **)(a1 + 1896);
    v32 = 134283521;
    v33 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 cleanupOnEmergencyCallEnd,set fCallEndTime to %{private}f", &v32, 12);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupOnEmergencyCallEnd()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v4 = *(void **)(a1 + 1912);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "setState:", 2);
        objc_msgSend(*(id *)(a1 + 1920), "addObject:", v9);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    }
    while (v6);
  }
  if (*(_QWORD *)(a1 + 1912))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v11 = objc_msgSend(*(id *)(a1 + 1912), "count");
      *(_DWORD *)buf = 134349056;
      v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupOnEmergencyCallEnd,moved %{public}ld requests from fRequestsPending to fRequestsHandled queue", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v20 = qword_1022A0088;
      v21 = objc_msgSend(*(id *)(a1 + 1912), "count");
      v32 = 134349056;
      v33 = v21;
      LODWORD(v26) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "#EED2 cleanupOnEmergencyCallEnd,moved %{public}ld requests from fRequestsPending to fRequestsHandled queue", &v32, v26);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupOnEmergencyCallEnd()", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }

    *(_QWORD *)(a1 + 1912) = 0;
  }
  sub_100A7AE50(a1, (id *)(a1 + 1928));
  sub_100A7AE50(a1, (id *)(a1 + 1936));
  sub_100A77908(a1);
  v12 = *(void **)(a1 + 1840);
  if (v12)
  {

    *(_QWORD *)(a1 + 1840) = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupOnEmergencyCallEnd,fAPNSToken cleared", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v32) = 0;
      LODWORD(v26) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 cleanupOnEmergencyCallEnd,fAPNSToken cleared", &v32, v26);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupOnEmergencyCallEnd()", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
  sub_100A768D0(a1);
  sub_100A7B080(a1);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupOnEmergencyCallEnd,completed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v32) = 0;
    LODWORD(v26) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 cleanupOnEmergencyCallEnd,completed", &v32, v26);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupOnEmergencyCallEnd()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
}

void sub_100A746A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  _WORD v36[8];
  void *__p[2];
  uint64_t v38;
  uint8_t buf[1640];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
  {
    ++*(_DWORD *)(a1 + 1672);
    *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
    v2 = *(_QWORD *)(a1 + 56);
    if (!v2)
      sub_10025FD1C();
    v3 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v2 + 48))(v2, buf);
    if (*(char *)(v3 + 159) < 0)
    {
      sub_100115CE4(__p, *(void **)(v3 + 136), *(_QWORD *)(v3 + 144));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v3 + 136);
      v38 = *(_QWORD *)(v3 + 152);
    }
    sub_10139A464(a1, (uint64_t)__p, a1 + 136);
    sub_100A7FDFC(a1, (uint64_t)__p, a1 + 136);
    if (v38 >= 0)
      v11 = (void *)HIBYTE(v38);
    else
      v11 = __p[1];
    if (v11)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2 sending message for native number", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v36[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 sending message for native number", v36, 2);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation()", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      sub_100A7FFC4(a1, 0, (uint64_t *)__p);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v13 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2 native number is empty, not sending message", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v36[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 native number is empty, not sending message", v36, 2);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation()", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      v14 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 30);
      v15 = *(_QWORD *)(a1 + 2088);
      if (v15)
      {
        v16 = sub_100A86958(v14, *(_DWORD *)(v15 + 24));
        v17 = *(_DWORD *)(v15 + 24);
        if (v16 >= 6)
          v17 = 8;
        *(_DWORD *)(v15 + 24) = v17;
      }
    }
    if (*(char *)(a1 + 159) < 0)
      v18 = *(_QWORD *)(a1 + 144);
    else
      v18 = *(unsigned __int8 *)(a1 + 159);
    if (!v18 || byte_102313FC8)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2 companion number is empty or device supports alternate account, not sending message", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v36[0] = 0;
        LODWORD(v35) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 companion number is empty or device supports alternate account, not sending message", v36, v35);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation()", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      if (!byte_102313FC8)
      {
        v21 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 30);
        v22 = *(_QWORD *)(a1 + 2088);
        if (v22)
        {
          v23 = sub_100A86958(v21, *(_DWORD *)(v22 + 24));
          v24 = *(_DWORD *)(v22 + 24);
          if (v23 >= 6)
            v24 = 8;
          *(_DWORD *)(v22 + 24) = v24;
        }
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v19 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EED2 sending message for companion number", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v36[0] = 0;
        LODWORD(v35) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 sending message for companion number", v36, v35);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation()", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      sub_100A7FFC4(a1, 1, (uint64_t *)(a1 + 136));
    }
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#EED2 attempted to send location when not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#EED2 attempted to send location when not enabled", __p, 2);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendLocation()", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v5 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 12);
    v6 = *(_QWORD *)(a1 + 2088);
    if (v6)
    {
      v8 = *(_DWORD *)(v6 + 24);
      v7 = (int *)(v6 + 24);
      v9 = sub_100A86958(v5, v8);
      v10 = *v7;
      if (v9 >= 2)
        v10 = 4;
      *v7 = v10;
    }
  }
}

void sub_100A74E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100A74EC4(uint64_t a1)
{
  uint64_t *v2;
  NSObject *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  __int128 v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  int v15;
  id v16;
  id v17;
  id v18;
  int v19;
  id v20;
  int v21;
  unsigned int v22;
  NSObject *v23;
  int v24;
  id v25;
  uint64_t v26;
  int v27;
  id v28;
  id v29;
  id v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  id v35;
  const char *v36;
  char *v37;
  id v38;
  NSObject *v39;
  uint64_t v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  const void *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t **v56;
  uint64_t **v57;
  void *v58;
  NSObject *v59;
  const char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  char *v68;
  const char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  const char *v73;
  char *v74;
  const char *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  _BYTE v86[38];
  __int16 v87;
  uint64_t v88;
  _BYTE v89[128];
  _BYTE buf[42];
  __int16 v91;
  uint64_t v92;

  v2 = &qword_1022A0000;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EED2 cleanupSession entered", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v85) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2 cleanupSession entered", &v85, 2);
    v61 = (char *)v60;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v60);
    if (v61 != buf)
      free(v61);
  }
  sub_100A7B0DC(a1);
  sub_100A7B4FC(a1);
  v4 = sub_100A7BC8C((_QWORD *)a1);
  v5 = v4;
  v6 = +[NSMutableSet set](NSMutableSet, "set");
  if (*(_QWORD *)(a1 + 2088))
  {
    v7 = v6;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v8 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v81, v89, 16);
    if (v8)
    {
      v10 = v8;
      v79 = *(_QWORD *)v82;
      *(_QWORD *)&v9 = 67109632;
      v78 = v9;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v82 != v79)
            objc_enumerationMutation(v4);
          v12 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * (_QWORD)v11);
          if (objc_msgSend(v12, "state") == (id)1)
            ++*(_DWORD *)(*(_QWORD *)(a1 + 2088) + 48);
          if (objc_msgSend(v12, "type") == (id)2)
          {
            if (v2[16] != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v13 = v4;
            v14 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              v15 = *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 88);
              v16 = objc_msgSend(v12, "numDuplicateMediaSelections");
              v17 = objc_msgSend(objc_msgSend(v12, "mediaList"), "count");
              v18 = objc_msgSend(v7, "count");
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)&buf[4] = v15;
              *(_WORD *)&buf[8] = 2048;
              *(_QWORD *)&buf[10] = v16;
              v2 = &qword_1022A0000;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v17;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v18;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupSession,looping,before update,fEED2Report->fNumDuplicateMediaSelections:%d, eedRequest.numDuplicateMediaSelections:%ld, eedRequest.mediaList.count:%ld, mediaItemsAcrossRequests.count:%ld", buf, 0x26u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v2[16] != -1)
                dispatch_once(&qword_1022A0080, &stru_102166788);
              v26 = qword_1022A0088;
              v27 = *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 88);
              v28 = objc_msgSend(v12, "numDuplicateMediaSelections");
              v29 = objc_msgSend(objc_msgSend(v12, "mediaList"), "count");
              v30 = objc_msgSend(v7, "count");
              v85 = 67109888;
              *(_DWORD *)v86 = v27;
              *(_WORD *)&v86[4] = 2048;
              *(_QWORD *)&v86[6] = v28;
              *(_WORD *)&v86[14] = 2048;
              *(_QWORD *)&v86[16] = v29;
              *(_WORD *)&v86[24] = 2048;
              *(_QWORD *)&v86[26] = v30;
              LODWORD(v77) = 38;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#EED2 cleanupSession,looping,before update,fEED2Report->fNumDuplicateMediaSelections:%d, eedRequest.numDuplicateMediaSelections:%ld, eedRequest.mediaList.count:%ld, mediaItemsAcrossRequests.count:%ld", &v85, v77, (_QWORD)v78, *((_QWORD *)&v78 + 1));
              v32 = (char *)v31;
              sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v31);
              if (v32 != buf)
                free(v32);
              v2 = &qword_1022A0000;
            }
            v19 = *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 88);
            *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 88) = v19
                                                       + objc_msgSend(v12, "numDuplicateMediaSelections");
            v20 = objc_msgSend(v7, "count");
            objc_msgSend(v7, "unionSet:", objc_msgSend(v12, "mediaList"));
            v21 = *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 88);
            v22 = objc_msgSend(objc_msgSend(v12, "mediaList"), "count") + (_DWORD)v20;
            *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 88) = v21 + v22 - objc_msgSend(v7, "count");
            if (v2[16] != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v4 = v13;
            v23 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              v24 = *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 88);
              v25 = objc_msgSend(v7, "count");
              *(_DWORD *)buf = v78;
              *(_DWORD *)&buf[4] = v24;
              *(_WORD *)&buf[8] = 2048;
              *(_QWORD *)&buf[10] = v20;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v25;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupSession,looping,after update,fNumDuplicateMediaSelections:%d, itemListCountBeforeUpdate:%ld, mediaItemsAcrossRequests.count:%ld", buf, 0x1Cu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v2[16] != -1)
                dispatch_once(&qword_1022A0080, &stru_102166788);
              v33 = qword_1022A0088;
              v34 = *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 88);
              v35 = objc_msgSend(v7, "count");
              v85 = v78;
              *(_DWORD *)v86 = v34;
              *(_WORD *)&v86[4] = 2048;
              *(_QWORD *)&v86[6] = v20;
              *(_WORD *)&v86[14] = 2048;
              *(_QWORD *)&v86[16] = v35;
              LODWORD(v77) = 28;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "#EED2 cleanupSession,looping,after update,fNumDuplicateMediaSelections:%d, itemListCountBeforeUpdate:%ld, mediaItemsAcrossRequests.count:%ld", &v85, v77, (_QWORD)v78);
              v37 = (char *)v36;
              sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v36);
              if (v37 != buf)
                free(v37);
              v4 = v13;
            }
          }
          v11 = (char *)v11 + 1;
        }
        while (v10 != v11);
        v38 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v81, v89, 16);
        v10 = v38;
      }
      while (v38);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 92) = objc_msgSend(v7, "count");
    if (v2[16] != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v39 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v40 = *(_QWORD *)(a1 + 2088);
      v41 = *(_DWORD *)(v40 + 88);
      LODWORD(v40) = *(_DWORD *)(v40 + 92);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v41;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupSession,fNumDuplicateMediaSelections:%d, fTotalItems:%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v2[16] != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v71 = *(_QWORD *)(a1 + 2088);
      v72 = *(_DWORD *)(v71 + 88);
      LODWORD(v71) = *(_DWORD *)(v71 + 92);
      v85 = 67109376;
      *(_DWORD *)v86 = v72;
      *(_WORD *)&v86[4] = 1024;
      *(_DWORD *)&v86[6] = v71;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 cleanupSession,fNumDuplicateMediaSelections:%d, fTotalItems:%d", &v85, 14);
      v74 = (char *)v73;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v73);
      if (v74 != buf)
        free(v74);
    }
  }
  v42 = *(void **)(a1 + 1912);
  if (v42)
  {

    *(_QWORD *)(a1 + 1912) = 0;
  }
  v43 = *(void **)(a1 + 1920);
  if (v43)
  {

    *(_QWORD *)(a1 + 1920) = 0;
  }
  v44 = *(void **)(a1 + 1928);
  if (v44)
  {

    *(_QWORD *)(a1 + 1928) = 0;
  }
  v45 = *(void **)(a1 + 1936);
  if (v45)
  {

    *(_QWORD *)(a1 + 1936) = 0;
  }
  v46 = *(void **)(a1 + 1944);
  if (v46)
  {

    *(_QWORD *)(a1 + 1944) = 0;
  }
  v47 = *(const void **)(a1 + 1952);
  if (v47)
  {
    CFRelease(v47);
    *(_QWORD *)(a1 + 1952) = 0;
  }
  sub_100A723DC();
  sub_100A72598();
  sub_100A72884();
  if (v2[16] != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v48 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v49 = *(_QWORD *)(a1 + 1912);
    v50 = *(_QWORD *)(a1 + 1920);
    v51 = *(_QWORD *)(a1 + 1928);
    v52 = *(_QWORD *)(a1 + 1936);
    v53 = *(_QWORD *)(a1 + 1968);
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v49;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v50;
    *(_WORD *)&buf[22] = 2114;
    *(_QWORD *)&buf[24] = v51;
    *(_WORD *)&buf[32] = 2114;
    *(_QWORD *)&buf[34] = v52;
    v91 = 2114;
    v92 = v53;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#EED2,cleanupSession,all queues and requests are cleaned up. fRequestsPending:%{public}@, fRequestsHandled:%{public}@, fCurrentStreamingRequest:%{public}@, fCurrentUploadRequest:%{public}@, fMediaService:%{public}@", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[16] != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v62 = *(_QWORD *)(a1 + 1912);
    v63 = *(_QWORD *)(a1 + 1920);
    v64 = *(_QWORD *)(a1 + 1928);
    v65 = *(_QWORD *)(a1 + 1936);
    v66 = *(_QWORD *)(a1 + 1968);
    v85 = 138544386;
    *(_QWORD *)v86 = v62;
    *(_WORD *)&v86[8] = 2114;
    *(_QWORD *)&v86[10] = v63;
    *(_WORD *)&v86[18] = 2114;
    *(_QWORD *)&v86[20] = v64;
    *(_WORD *)&v86[28] = 2114;
    *(_QWORD *)&v86[30] = v65;
    v87 = 2114;
    v88 = v66;
    LODWORD(v77) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,cleanupSession,all queues and requests are cleaned up. fRequestsPending:%{public}@, fRequestsHandled:%{public}@, fCurrentStreamingRequest:%{public}@, fCurrentUploadRequest:%{public}@, fMediaService:%{public}@", &v85, v77);
    v68 = (char *)v67;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v67);
    if (v68 != buf)
      free(v68);
  }
  sub_100A6F304(a1 + 1536, 7);
  sub_100A6F304(a1 + 1536, 8);
  sub_100A6F304(a1 + 1536, 11);
  sub_100A75C90(a1);
  *(_DWORD *)(a1 + 1784) = 0;
  v54 = *(_QWORD *)(a1 + 1768);
  if (v54)
    sub_1012C5FA0(v54, 0);
  sub_100A7BFEC(a1);
  objc_msgSend(*(id *)(a1 + 1752), "invalidate");

  *(_QWORD *)(a1 + 1752) = 0;
  if (*(_BYTE *)(a1 + 184))
  {
    if (v2[16] != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v55 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "#EED2 session assertion active during Session Exit,clearing", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v2[16] != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v85) = 0;
      LODWORD(v77) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 session assertion active during Session Exit,clearing", &v85, v77);
      v76 = (char *)v75;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::cleanupSession()", "%s\n", v75);
      if (v76 != buf)
        free(v76);
    }
    sub_101399E28(a1, 0);
  }
  v85 = 0;
  *(_QWORD *)buf = &v85;
  v56 = sub_1000BC378((uint64_t **)(a1 + 2040), &v85, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  if (v56[6] == v56[5]
    && (v80 = 1,
        *(_QWORD *)buf = &v80,
        v57 = sub_1000BC378((uint64_t **)(a1 + 2040), &v80, (uint64_t)&unk_101B9EB60, (_DWORD **)buf),
        v57[6] == v57[5]))
  {
    sub_10139A508(a1);
    sub_100A71B64(a1);
  }
  else
  {
    sub_100A6E834(a1 + 1536, 14, 60.0);
  }
  v58 = *(void **)(a1 + 2016);
  if (v58)
  {

    *(_QWORD *)(a1 + 2016) = 0;
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 1960) = 0;
  *(_BYTE *)(a1 + 1962) = 0;
  *(_DWORD *)(a1 + 1964) = 0;

  *(_QWORD *)(a1 + 1864) = 0;
  if (v2[16] != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v59 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "#EED2 cleanupSession completed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[16] != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v85) = 0;
    LODWORD(v77) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2 cleanupSession completed", &v85, v77);
    v70 = (char *)v69;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v69);
    if (v70 != buf)
      free(v70);
  }
}

void sub_100A75C90(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2 cancelCanSendADRTimeout", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 cancelCanSendADRTimeout", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cancelCanSendADRTimeout()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(_BYTE *)(a1 + 1776) = 0;
  sub_100A6F304(a1 + 1536, 12);
}

void sub_100A75E30(uint64_t a1)
{
  uint64_t *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  void *v20;
  uint64_t v22;
  id v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  id v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  char *v39;
  const char *v40;
  char *v41;
  const char *v42;
  char *v43;
  _WORD v44[8];
  void *__p[2];
  uint64_t v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t buf;
  __int16 v50;
  const char *v51;
  std::__shared_weak_count *v52;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#EED2,sendAdr,attempted to send ADR when not enabled", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#EED2,sendAdr,attempted to send ADR when not enabled", __p, 2);
      v39 = (char *)v38;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendAdr()", "%s\n", v38);
      if (v39 != (char *)&buf)
        free(v39);
    }
    v8 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 12);
    v9 = *(_QWORD *)(a1 + 2088);
    if (v9)
    {
      v11 = *(_DWORD *)(v9 + 24);
      v10 = (int *)(v9 + 24);
      v12 = sub_100A86958(v8, v11);
      v13 = *v10;
      if (v12 >= 2)
        v13 = 4;
      *v10 = v13;
    }
    return;
  }
  if (!*(_BYTE *)(a1 + 1777))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,sendAdr,ignoring ADR send request,not allowed to send ADR data at this time", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,sendAdr,ignoring ADR send request,not allowed to send ADR data at this time", __p, 2);
    v16 = (char *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendAdr()", "%s\n", v15);
LABEL_43:
    if (v16 != (char *)&buf)
      free(v16);
    return;
  }
  if (!*(_BYTE *)(a1 + 1778))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#EED2,sendAdr,ignoring ADR send request,not finished gathering ADR data", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,sendAdr,ignoring ADR send request,not finished gathering ADR data", __p, 2);
    v16 = (char *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendAdr()", "%s\n", v19);
    goto LABEL_43;
  }
  v2 = sub_100A57ECC((int *)(a1 + 1448));
  if (*((_BYTE *)v2 + 57))
    v3 = v2[23] == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = *((unsigned __int8 *)v2 + 223);
    if ((v4 & 0x80u) != 0)
      v4 = v2[26];
    if (v4)
    {
      LODWORD(buf) = *(_DWORD *)(a1 + 1448);
      v5 = *(_QWORD *)(a1 + 56);
      if (!v5)
        sub_10025FD1C();
      v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &buf);
      if (*(char *)(v6 + 159) < 0)
      {
        sub_100115CE4(__p, *(void **)(v6 + 136), *(_QWORD *)(v6 + 144));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v6 + 136);
        v46 = *(_QWORD *)(v6 + 152);
      }
      v20 = (void *)HIBYTE(v46);
      if (v46 < 0)
        v20 = __p[1];
      if (!v20 && !(*(char *)(a1 + 159) < 0 ? *(_QWORD *)(a1 + 144) : *(unsigned __int8 *)(a1 + 159)))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v33 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#EED2,sendAdr,neither native nor companion number available so not sending ADR", (uint8_t *)&buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v44[0] = 0;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,sendAdr,neither native nor companion number available so not sending ADR", v44, 2);
          v35 = (char *)v34;
          sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendAdr()", "%s\n", v34);
          if (v35 != (char *)&buf)
            free(v35);
        }
        goto LABEL_90;
      }
      v22 = *(_QWORD *)(a1 + 104);
      if (!v22)
        sub_10025FD1C();
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v22 + 48))(&buf);
      v23 = sub_100A807C4((uint64_t)&buf);
      v24 = v52;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = v23;
      if (!v23)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v32 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#EED2,sendAdr,no location available so not sending ADR", (uint8_t *)&buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v44[0] = 0;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,sendAdr,no location available so not sending ADR", v44, 2);
          v43 = (char *)v42;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendAdr()", "%s\n", v42);
          if (v43 != (char *)&buf)
            free(v43);
        }
        *(_BYTE *)(a1 + 1779) = 1;
        goto LABEL_90;
      }
      *(_BYTE *)(a1 + 1779) = 0;
      v28 = *(_QWORD *)(a1 + 1768);
      if (!v28)
        goto LABEL_84;
      v47[0] = off_102166A78;
      v47[1] = a1;
      v48 = v47;
      v29 = sub_1012C7A5C(v28, v23, a1 + 192, (uint64_t)v47);
      v30 = v48;
      if (v48 == v47)
      {
        v31 = 4;
        v30 = v47;
      }
      else
      {
        if (!v48)
          goto LABEL_81;
        v31 = 5;
      }
      (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_81:
      if ((v29 & 1) != 0)
      {
        v36 = *(_QWORD *)(a1 + 2088);
        if (v36)
          ++*(_DWORD *)(v36 + 16);
LABEL_89:
        sub_100A81AD8(a1);
LABEL_90:
        if (SHIBYTE(v46) < 0)
          operator delete(__p[0]);
        return;
      }
LABEL_84:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v37 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#EED2,sendAdr,failed to send", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v44[0] = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,sendAdr,failed to send", v44, 2);
        v41 = (char *)v40;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendAdr()", "%s\n", v40);
        if (v41 != (char *)&buf)
          free(v41);
      }
      goto LABEL_89;
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v17 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v50 = 2082;
    v51 = "";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,sendAdr,not configured for ADR encryption\"}", (uint8_t *)&buf, 0x12u);
  }
}

void sub_100A76850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100A768D0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  void *v21;
  NSObject *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  double v36;
  double v37;
  uint64_t *v38;
  uint64_t v39;
  NSArray *v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  uint8_t *v46;
  NSObject *v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  uint8_t *v51;
  NSObject *v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint8_t *v63;
  const char *v64;
  const char *v65;
  uint8_t *v66;
  uint64_t v67;
  void *__p[2];
  uint64_t v69;
  _QWORD v70[3];
  _QWORD *v71;
  int v72;
  id v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  id v81;
  uint8_t buf[4];
  _BYTE v83[18];
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  id v89;
  uint64_t v90;

  if (sub_100195F08())
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,not enabled for watches", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v72) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,sendControlData,not enabled for watches", &v72, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v3);
LABEL_10:
      if (v4 != buf)
        free(v4);
      return;
    }
    return;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "#EED2,sendControlData,attempted to send Control data when not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v72) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#EED2,sendControlData,attempted to send Control data when not enabled", &v72, 2);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendControlData()", "%s\n", v53);
      if (v54 != buf)
        free(v54);
    }
    v10 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 12);
    v11 = *(_QWORD *)(a1 + 2088);
    if (v11)
    {
      v13 = *(_DWORD *)(v11 + 24);
      v12 = (int *)(v11 + 24);
      v14 = sub_100A86958(v10, v13);
      v15 = *v12;
      if (v14 >= 2)
        v15 = 4;
      *v12 = v15;
    }
    return;
  }
  if (!*((_BYTE *)sub_100A57ECC((int *)(a1 + 1448)) + 59))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,feature not enabled or requests not supported,early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v72) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,sendControlData,feature not enabled or requests not supported,early return", &v72, 2);
      v4 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v17);
      goto LABEL_10;
    }
    return;
  }
  if (*(_QWORD *)(a1 + 1904))
  {
    v5 = sub_100A57ECC((int *)(a1 + 1448));
    if (!*((_BYTE *)v5 + 59) || !v5[23])
      goto LABEL_40;
    v6 = *((unsigned __int8 *)v5 + 223);
    if ((v6 & 0x80u) != 0)
      v6 = v5[26];
    if (!v6)
    {
LABEL_40:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)v83 = 0;
        *(_WORD *)&v83[4] = 2082;
        *(_QWORD *)&v83[6] = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,sendControlData,not configured for Control Data encryption\"}", buf, 0x12u);
      }
      return;
    }
    *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
    v7 = *(_QWORD *)(a1 + 56);
    if (!v7)
      sub_10025FD1C();
    v8 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v7 + 48))(v7, buf);
    if (*(char *)(v8 + 159) < 0)
    {
      sub_100115CE4(__p, *(void **)(v8 + 136), *(_QWORD *)(v8 + 144));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v8 + 136);
      v69 = *(_QWORD *)(v8 + 152);
    }
    v21 = (void *)HIBYTE(v69);
    if (v69 < 0)
      v21 = __p[1];
    if (!v21 && !(*(char *)(a1 + 159) < 0 ? *(_QWORD *)(a1 + 144) : *(unsigned __int8 *)(a1 + 159)))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v44 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#EED2,sendControlData,neither native nor companion number available so not sending Control Data", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v72) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,sendControlData,neither native nor companion number available so not sending Control Data", &v72, 2, __p[0]);
        v46 = (uint8_t *)v45;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendControlData()", "%s\n", v45);
        if (v46 != buf)
          free(v46);
      }
      goto LABEL_112;
    }
    if (*(_BYTE *)(a1 + 1960))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v23 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,waiting for response for previous sendControlData. set fControlDataSendPending", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v72) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,sendControlData,waiting for response for previous sendControlData. set fControlDataSendPending", &v72, 2, __p[0]);
        v56 = (uint8_t *)v55;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
      *(_BYTE *)(a1 + 1961) = 1;
      goto LABEL_112;
    }
    v24 = sub_100A7BC8C((_QWORD *)a1);
    v25 = v24;
    v26 = *(_QWORD *)(a1 + 104);
    if (!v26)
      sub_10025FD1C();
    (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v26 + 48))(buf);
    v27 = sub_100A807C4((uint64_t)buf);
    sub_100261F44((uint64_t)&v90);
    v28 = v27;
    if (!v27)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v47 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,no location available not sending Control data right now", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v72) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,sendControlData,no location available not sending Control data right now", &v72, 2, __p[0]);
        v66 = (uint8_t *)v65;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v65);
        if (v66 != buf)
          free(v66);
      }
      *(_BYTE *)(a1 + 1856) = 1;
      goto LABEL_112;
    }
    *(_BYTE *)(a1 + 1856) = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v29 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v30 = objc_msgSend(v24, "count");
      v31 = *(_QWORD *)(a1 + 1840);
      v32 = *(_QWORD *)(a1 + 168);
      v33 = *(_QWORD *)(a1 + 1896);
      *(_DWORD *)buf = 134219010;
      *(_QWORD *)v83 = v30;
      *(_WORD *)&v83[8] = 2112;
      *(_QWORD *)&v83[10] = v31;
      v84 = 2048;
      v85 = v32;
      v86 = 2048;
      v87 = v33;
      v88 = 2112;
      v89 = v27;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,eedRequests Count:%ld,fAPNSToken:%@,fSessionStartTime:%f,fCallEndTime:%f, locationDict:%@", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v57 = qword_1022A0088;
      v58 = objc_msgSend(v24, "count");
      v59 = *(_QWORD *)(a1 + 1840);
      v60 = *(_QWORD *)(a1 + 168);
      v61 = *(_QWORD *)(a1 + 1896);
      v72 = 134219010;
      v73 = v58;
      v74 = 2112;
      v75 = v59;
      v76 = 2048;
      v77 = v60;
      v78 = 2048;
      v79 = v61;
      v80 = 2112;
      v81 = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v57, 0, "#EED2,sendControlData,eedRequests Count:%ld,fAPNSToken:%@,fSessionStartTime:%f,fCallEndTime:%f, locationDict:%@", &v72, 52);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
    v34 = *(_QWORD *)(a1 + 1904);
    if (!v34)
      goto LABEL_106;
    v35 = *(void **)(a1 + 1840);
    v36 = *(double *)(a1 + 168);
    v37 = *(double *)(a1 + 1896);
    v38 = *(uint64_t **)(a1 + 1944);
    v39 = *(_QWORD *)(a1 + 1952);
    v40 = sub_100A82664(a1);
    v70[0] = off_102166B08;
    v70[1] = a1;
    v71 = v70;
    v41 = sub_101058560(v34, v35, (uint64_t)v27, v24, v38, v39, (uint64_t)v40, (uint64_t)v70, v36, v37);
    v42 = v71;
    if (v71 == v70)
    {
      v43 = 4;
      v42 = v70;
    }
    else
    {
      if (!v71)
        goto LABEL_95;
      v43 = 5;
    }
    (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_95:
    if ((v41 & 1) != 0)
    {
      *(_BYTE *)(a1 + 1960) = 1;
      v48 = *(_QWORD *)(a1 + 2088);
      if (v48)
        ++*(_DWORD *)(v48 + 52);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v49 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,control send Successful", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_111;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,sendControlData,control send Successful", &v72, v67, __p[0]);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v50);
LABEL_130:
      if (v51 != buf)
        free(v51);
LABEL_111:
      sub_100A81AD8(a1);
LABEL_112:
      if (SHIBYTE(v69) < 0)
        operator delete(__p[0]);
      return;
    }
LABEL_106:
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v52 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "#EED2,sendControlData,failed to send", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_111;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v72) = 0;
    LODWORD(v67) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,sendControlData,failed to send", &v72, v67, __p[0]);
    v51 = (uint8_t *)v64;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendControlData()", "%s\n", v64);
    goto LABEL_130;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v19 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#EED2,sendControlData,nil fControl,early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v72) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,sendControlData,nil fControl,early return", &v72, 2);
    v4 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendControlData()", "%s\n", v20);
    goto LABEL_10;
  }
}

void sub_100A77870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100A77908(uint64_t a1)
{
  id v2;
  NSNumber *v3;
  uint64_t *v4;
  NSNumber *v5;
  uint64_t *v6;
  uint64_t *v7;
  NSNumber *v8;
  uint64_t *v9;
  id v10;
  uint64_t *v11;
  void *v12;
  id v13;
  uint64_t *v14;
  NSObject *v15;
  uint8_t *v16;
  double v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  NSObject *v22;
  uint8_t *v23;
  NSObject *v24;
  void *v25;
  id v26;
  uint64_t *v27;
  NSObject *v28;
  uint8_t *v29;
  double v30;
  NSObject *v31;
  uint8_t *v32;
  NSObject *v33;
  id v34;
  void *v35;
  uint64_t *v36;
  NSObject *v37;
  id v38;
  uint64_t v39;
  id v40;
  const char *v41;
  uint8_t *v42;
  NSObject *v43;
  id v44;
  void *v45;
  uint64_t *v46;
  NSObject *v47;
  id v48;
  uint64_t v49;
  id v50;
  const char *v51;
  uint8_t *v52;
  NSObject *v53;
  void *v54;
  id v55;
  uint64_t *v56;
  NSObject *v57;
  uint8_t *v58;
  double v59;
  NSObject *v60;
  uint8_t *v61;
  NSObject *v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint8_t *v67;
  const char *v68;
  const char *v69;
  double v70;
  uint8_t *v71;
  double v72;
  uint8_t *v73;
  double v74;
  uint8_t *v75;
  uint64_t v76;
  _QWORD v77[5];
  _QWORD v78[5];
  int v79;
  id v80;
  uint8_t buf[4];
  id v82;

  if (*(_QWORD *)(a1 + 1944) && *(_QWORD *)(a1 + 1952))
  {
    v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    v3 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 168));
    if (byte_1023064A7 >= 0)
      v4 = &qword_102306490;
    else
      v4 = (uint64_t *)qword_102306490;
    objc_msgSend(v2, "setValue:forKey:", v3, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
    v5 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 1896));
    if (byte_1023064BF >= 0)
      v6 = &qword_1023064A8;
    else
      v6 = (uint64_t *)qword_1023064A8;
    objc_msgSend(v2, "setValue:forKey:", v5, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
    if (byte_1023064EF >= 0)
      v7 = &qword_1023064D8;
    else
      v7 = (uint64_t *)qword_1023064D8;
    objc_msgSend(v2, "setValue:forKey:", *(_QWORD *)(a1 + 1944), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
    v8 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A6F8CC(a1));
    if (byte_1023064D7 >= 0)
      v9 = &qword_1023064C0;
    else
      v9 = (uint64_t *)qword_1023064C0;
    objc_msgSend(v2, "setValue:forKey:", v8, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
    v10 = +[CLEEDCryptoUtilities getKeyExternalRepresentation:](CLEEDCryptoUtilities, "getKeyExternalRepresentation:", *(_QWORD *)(a1 + 1952));
    if (v10)
    {
      if (byte_102306507 >= 0)
        v11 = &qword_1023064F0;
      else
        v11 = (uint64_t *)qword_1023064F0;
      objc_msgSend(v2, "setValue:forKey:", v10, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
      v12 = *(void **)(a1 + 1928);
      if (v12)
      {
        v13 = objc_msgSend(v12, "getRequestDict");
        if (v13)
        {
          if (byte_10230651F >= 0)
            v14 = &qword_102306508;
          else
            v14 = (uint64_t *)qword_102306508;
          objc_msgSend(v2, "setValue:forKey:", v13, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v15 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added fCurrentStreamingRequest to cacheDataDict", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            LOWORD(v79) = 0;
            v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDDataToCache,Added fCurrentStreamingRequest to cacheDataDict", &v79, 2);
LABEL_58:
            v23 = v16;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v17);
LABEL_176:
            if (v23 != buf)
              free(v23);
          }
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v24 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fCurrentStreamingRequest,nil dict", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            LOWORD(v79) = 0;
            v70 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,storeEEDDataToCache,fCurrentStreamingRequest,nil dict", &v79, 2);
            v23 = v71;
            sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v70);
            goto LABEL_176;
          }
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v22 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fCurrentStreamingRequest is empty", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v79) = 0;
          v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDDataToCache,fCurrentStreamingRequest is empty", &v79, 2);
          goto LABEL_58;
        }
      }
      v25 = *(void **)(a1 + 1936);
      if (v25)
      {
        v26 = objc_msgSend(v25, "getRequestDict");
        if (v26)
        {
          if (byte_102306537 >= 0)
            v27 = &qword_102306520;
          else
            v27 = (uint64_t *)qword_102306520;
          objc_msgSend(v2, "setValue:forKey:", v26, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27));
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v28 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added fCurrentUploadRequest to cacheDataDict", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            LOWORD(v79) = 0;
            LODWORD(v76) = 2;
            v30 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDDataToCache,Added fCurrentUploadRequest to cacheDataDict", &v79, v76);
LABEL_85:
            v32 = v29;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v30);
LABEL_181:
            if (v32 != buf)
              free(v32);
          }
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v33 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fCurrentUploadRequest,nil dict", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            LOWORD(v79) = 0;
            LODWORD(v76) = 2;
            v72 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,storeEEDDataToCache,fCurrentUploadRequest,nil dict", &v79, v76);
            v32 = v73;
            sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v72);
            goto LABEL_181;
          }
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v31 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fCurrentUploadRequest is empty", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v79) = 0;
          LODWORD(v76) = 2;
          v30 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDDataToCache,fCurrentUploadRequest is empty", &v79, v76);
          goto LABEL_85;
        }
      }
      v34 = +[NSMutableArray array](NSMutableArray, "array");
      v35 = *(void **)(a1 + 1912);
      v78[0] = _NSConcreteStackBlock;
      v78[1] = 3221225472;
      v78[2] = sub_100A908E0;
      v78[3] = &unk_102166750;
      v78[4] = v34;
      objc_msgSend(v35, "enumerateObjectsUsingBlock:", v78);
      if (objc_msgSend(v34, "count"))
      {
        if (byte_102306567 >= 0)
          v36 = &qword_102306550;
        else
          v36 = (uint64_t *)qword_102306550;
        objc_msgSend(v2, "setValue:forKey:", v34, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v36));
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v37 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v38 = objc_msgSend(v34, "count");
          *(_DWORD *)buf = 134349056;
          v82 = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added %{public}lu requests from fRequestsPending to cacheDataDict", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_109;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v39 = qword_1022A0088;
        v40 = objc_msgSend(v34, "count");
        v79 = 134349056;
        v80 = v40;
        LODWORD(v76) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 0, "#EED2,storeEEDDataToCache,Added %{public}lu requests from fRequestsPending to cacheDataDict", &v79, v76);
        v42 = (uint8_t *)v41;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v41);
        if (v42 == buf)
          goto LABEL_109;
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v43 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fRequestsPending is empty", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_109;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v79) = 0;
        LODWORD(v76) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDDataToCache,fRequestsPending is empty", &v79, v76);
        v42 = (uint8_t *)v68;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v68);
        if (v42 == buf)
        {
LABEL_109:
          v44 = +[NSMutableArray array](NSMutableArray, "array");
          v45 = *(void **)(a1 + 1920);
          v77[0] = _NSConcreteStackBlock;
          v77[1] = 3221225472;
          v77[2] = sub_100A90C00;
          v77[3] = &unk_102166750;
          v77[4] = v44;
          objc_msgSend(v45, "enumerateObjectsUsingBlock:", v77);
          if (objc_msgSend(v44, "count"))
          {
            if (byte_10230657F >= 0)
              v46 = &qword_102306568;
            else
              v46 = (uint64_t *)qword_102306568;
            objc_msgSend(v2, "setValue:forKey:", v44, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v46));
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v47 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              v48 = objc_msgSend(v44, "count");
              *(_DWORD *)buf = 134349056;
              v82 = v48;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added %{public}lu requests from fRequestsHandled to cacheDataDict", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_127;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v49 = qword_1022A0088;
            v50 = objc_msgSend(v44, "count");
            v79 = 134349056;
            v80 = v50;
            LODWORD(v76) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 0, "#EED2,storeEEDDataToCache,Added %{public}lu requests from fRequestsHandled to cacheDataDict", &v79, v76);
            v52 = (uint8_t *)v51;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v51);
            if (v52 == buf)
              goto LABEL_127;
          }
          else
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v53 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fRequestsHandled is empty", buf, 2u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_127;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            LOWORD(v79) = 0;
            LODWORD(v76) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDDataToCache,fRequestsHandled is empty", &v79, v76);
            v52 = (uint8_t *)v69;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v69);
            if (v52 == buf)
            {
LABEL_127:
              v54 = *(void **)(a1 + 1992);
              if (v54)
              {
                v55 = objc_msgSend(v54, "newMitigationDict");
                if (!v55)
                {
                  if (qword_1022A0080 != -1)
                    dispatch_once(&qword_1022A0080, &stru_102166788);
                  v62 = qword_1022A0088;
                  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fEEDCoexMitigation,nil dict", buf, 2u);
                  }
                  if (!sub_1001BFF7C(115, 0))
                    goto LABEL_154;
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0080 != -1)
                    dispatch_once(&qword_1022A0080, &stru_102166788);
                  LOWORD(v79) = 0;
                  LODWORD(v76) = 2;
                  v74 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,storeEEDDataToCache,fEEDCoexMitigation,nil dict", &v79, v76);
                  v61 = v75;
                  sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v74);
                  goto LABEL_186;
                }
                if (byte_10230654F >= 0)
                  v56 = &qword_102306538;
                else
                  v56 = (uint64_t *)qword_102306538;
                objc_msgSend(v2, "setValue:forKey:", v55, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v56));
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_102166788);
                v57 = qword_1022A0088;
                if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added fEEDCoexMitigation to cacheDataDict", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_154;
                bzero(buf, 0x65CuLL);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_102166788);
                LOWORD(v79) = 0;
                LODWORD(v76) = 2;
                v59 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDDataToCache,Added fEEDCoexMitigation to cacheDataDict", &v79, v76);
              }
              else
              {
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_102166788);
                v60 = qword_1022A0088;
                if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fEEDCoexMitigation is empty", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_154;
                bzero(buf, 0x65CuLL);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_102166788);
                LOWORD(v79) = 0;
                LODWORD(v76) = 2;
                v59 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDDataToCache,fEEDCoexMitigation is empty", &v79, v76);
              }
              v61 = v58;
              sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v59);
LABEL_186:
              if (v61 != buf)
                free(v61);
LABEL_154:
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_102166788);
              v63 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v82 = v2;
                _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,storing the dictionary to cache:%@", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_102166788);
                v79 = 138412290;
                v80 = v2;
                LODWORD(v76) = 12;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDDataToCache,storing the dictionary to cache:%@", &v79, v76);
                v67 = (uint8_t *)v66;
                sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v66);
                if (v67 != buf)
                  free(v67);
              }
              v64 = sub_1001FD94C();
              sub_10023EC14(v64);
              v65 = sub_1001FD94C();
              (*(void (**)(uint64_t))(*(_QWORD *)v65 + 944))(v65);
              return;
            }
          }
          free(v52);
          goto LABEL_127;
        }
      }
      free(v42);
      goto LABEL_109;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v21 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,nil deviceSessionPrivateKeyRep,cannot store data,early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v79) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,storeEEDDataToCache,nil deviceSessionPrivateKeyRep,cannot store data,early return", &v79, 2);
LABEL_40:
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,nil fRootSecret or fDeviceSessionPrivateKey,cannot store data,early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v79) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,storeEEDDataToCache,nil fRootSecret or fDeviceSessionPrivateKey,cannot store data,early return", &v79, 2);
      goto LABEL_40;
    }
  }
}

void sub_100A78E14(uint64_t a1)
{
  id v2;
  uint64_t *v3;
  std::string::size_type size;
  uint64_t *v5;
  id v6;
  unsigned __int8 *v7;
  const std::string *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  id v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  std::string *v17;
  id v18;
  id v19;
  NSObject *v20;
  std::string *v21;
  id v22;
  std::string *v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  double v28;
  NSObject *v29;
  id v30;
  NSDate *v31;
  id v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  NSArray *v39;
  NSObject *v40;
  id v41;
  uint64_t v42;
  id v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  id v47;
  NSObject *v48;
  const char *v49;
  char *v50;
  const char *v51;
  char *v52;
  uint64_t v53;
  id v54;
  const char *v55;
  char *v56;
  std::string *v57;
  const char *v58;
  char *v59;
  const char *v60;
  char *v61;
  const char *v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  id v66;
  NSDate *v67;
  id v68;
  const char *v69;
  char *v70;
  const char *v71;
  char *v72;
  const char *v73;
  char *v74;
  uint64_t v75;
  id v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  _QWORD v80[6];
  uint64_t v81;
  std::string v82;
  std::string v83;
  void *__p[2];
  char v85;
  std::string __str;
  int v87;
  uint64_t v88;
  _BYTE v89[24];
  uint64_t v90;
  int v91;
  id v92;
  _BYTE buf[12];
  __int16 v94;
  void *v95;
  __int16 v96;
  uint64_t v97;

  if (sub_100A884A8(a1))
  {
    v2 = +[CLEEDRequest getPartnerIDFromDict:](CLEEDRequest, "getPartnerIDFromDict:", *(_QWORD *)(a1 + 1848));
    v3 = sub_100A57ECC((int *)(a1 + 1448));
    sub_1015A2E04(__p, (char *)objc_msgSend(v2, "UTF8String"));
    sub_100A545DC((int *)v3, (unsigned __int8 *)__p, (uint64_t)&__str);
    if (v85 < 0)
      operator delete(__p[0]);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (!size)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v12 = objc_msgSend(v2, "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,valid cert not found for receviedPartnerID: %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v53 = qword_1022A0088;
        v54 = objc_msgSend(v2, "UTF8String");
        v91 = 136315138;
        v92 = v54;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v53, 16, "#EED2,handleAPNSMessage,valid cert not found for receviedPartnerID: %s", (const char *)&v91);
        v56 = (char *)v55;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
      sub_100A88CEC(a1, 8);

      *(_QWORD *)(a1 + 1848) = 0;
      goto LABEL_74;
    }
    memset(&v83, 0, sizeof(v83));
    memset(&v82, 0, sizeof(v82));
    v5 = sub_100A57ECC((int *)(a1 + 1448));
    sub_100A91C94((uint64_t)&v91, (uint64_t)(v5 + 20));
    v6 = +[CLEEDRequest getCallIDFromDict:](CLEEDRequest, "getCallIDFromDict:", *(_QWORD *)(a1 + 1848));
    sub_1015A2E04(buf, (char *)objc_msgSend(v2, "UTF8String"));
    v7 = sub_1001986C8(&v91, buf);
    v8 = (const std::string *)v7;
    if (SHIBYTE(v96) < 0)
    {
      operator delete(*(void **)buf);
      if (!v8)
        goto LABEL_63;
    }
    else if (!v7)
    {
LABEL_63:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v35 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,nil deviceSessionSecretForPartner due to phone number mismatch,early return", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_68;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v89 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleAPNSMessage,nil deviceSessionSecretForPartner due to phone number mismatch,early return", v89, 2);
      v52 = (char *)v51;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v51);
      if (v52 == buf)
        goto LABEL_68;
      goto LABEL_126;
    }
    std::string::operator=(&v83, v8 + 4);
    v13 = v8[3].__r_.__value_.__s.__data_[16];
    std::string::operator=(&v82, &__str);
    v14 = *(_QWORD *)(a1 + 1904);
    sub_1015A2E04(buf, (char *)objc_msgSend(v6, "UTF8String"));
    v15 = sub_10105B330(v14, (uint64_t *)&v8[1].__r_.__value_.__r.__words[2], (uint64_t *)buf, *(uint64_t **)(a1 + 1944));
    v16 = v15;
    if (SHIBYTE(v96) < 0)
    {
      operator delete(*(void **)buf);
      if (!v16)
        goto LABEL_63;
    }
    else if (!v15)
    {
      goto LABEL_63;
    }
    if (!v13)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v36 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,requestsSupportedByPartner is false,early return", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        *(_WORD *)v89 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleAPNSMessage,requestsSupportedByPartner is false,early return", v89, 2);
        v61 = (char *)v60;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v60);
        if (v61 != buf)
          free(v61);
      }
      sub_100A88CEC(a1, 12);

      goto LABEL_69;
    }
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v82;
    else
      v17 = (std::string *)v82.__r_.__value_.__r.__words[0];
    v18 = +[CLEEDCryptoUtilities copyAdrPublicKeyData:](CLEEDCryptoUtilities, "copyAdrPublicKeyData:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
    v19 = v18;
    if (!v18)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v37 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,nil partnerAdrPublicKeyData,early return", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_68;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v89 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleAPNSMessage,nil partnerAdrPublicKeyData,early return", v89, 2);
      v52 = (char *)v62;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v62);
      if (v52 == buf)
        goto LABEL_68;
LABEL_126:
      free(v52);
LABEL_68:
      sub_100A88CEC(a1, 7);

LABEL_69:
      *(_QWORD *)(a1 + 1848) = 0;
LABEL_70:
      sub_100A921D8((uint64_t)&v91);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
LABEL_74:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v20 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v21 = &v83;
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = (std::string *)v83.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v2;
      v94 = 2080;
      v95 = v21;
      v96 = 2048;
      v97 = 1;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,receviedPartnerID:%@,baseURL:%s,requestsSupportedByPartner:%ld", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v57 = &v83;
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v57 = (std::string *)v83.__r_.__value_.__r.__words[0];
      *(_DWORD *)v89 = 138412802;
      *(_QWORD *)&v89[4] = v2;
      *(_WORD *)&v89[12] = 2080;
      *(_QWORD *)&v89[14] = v57;
      *(_WORD *)&v89[22] = 2048;
      v90 = 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,handleAPNSMessage,receviedPartnerID:%@,baseURL:%s,requestsSupportedByPartner:%ld", v89, 32);
      v59 = (char *)v58;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
    v22 = +[CLEEDCryptoUtilities getSessionIDWithPhoneNumber:sessionStartTime:](CLEEDCryptoUtilities, "getSessionIDWithPhoneNumber:sessionStartTime:", v6, +[CLEEDRequest getSessionStartTimeFromDict:](CLEEDRequest, "getSessionStartTimeFromDict:", *(_QWORD *)(a1 + 1848)));
    v81 = 0;
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v83;
    else
      v23 = (std::string *)v83.__r_.__value_.__r.__words[0];
    v24 = +[CLEEDRequest createRequestFromDict:baseURL:sessionID:partnerAdrPublicKeyData:deviceSessionPrivateKey:deviceSessionSecret:error:](CLEEDRequest, "createRequestFromDict:baseURL:sessionID:partnerAdrPublicKeyData:deviceSessionPrivateKey:deviceSessionSecret:error:", *(_QWORD *)(a1 + 1848), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23), v22, v18, *(_QWORD *)(a1 + 1952), v16, &v81);
    v25 = v24;
    if (!v24 || v81)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v38 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,decryption failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        *(_WORD *)v89 = 0;
        LODWORD(v79) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleAPNSMessage,decryption failed", v89, v79);
        v64 = (char *)v63;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v63);
        if (v64 != buf)
          free(v64);
      }
      sub_100A88CEC(a1, 8);

      goto LABEL_69;
    }

    *(_QWORD *)(a1 + 1848) = 0;
    v26 = *(_QWORD *)(a1 + 2088);
    if (v26)
    {
      if (!*(_QWORD *)(v26 + 72))
      {
        v27 = objc_msgSend(v24, "type");
        v26 = *(_QWORD *)(a1 + 2088);
        *(_QWORD *)(v26 + 72) = v27;
      }
      sub_100A86AF8(v26, v24);
    }
    objc_msgSend(v24, "setRequestReceivedTime:", CFAbsoluteTimeGetCurrent());
    objc_msgSend(objc_msgSend(v24, "requestDate"), "timeIntervalSinceNow");
    objc_msgSend(v24, "setRequestTransmissionTime:", (int)vcvtpd_s64_f64(fabs(v28) * 1000.0));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v29 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v30 = objc_msgSend(v24, "requestDate");
      v31 = +[NSDate date](NSDate, "date");
      v32 = objc_msgSend(v24, "requestTransmissionTime");
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v30;
      v94 = 2112;
      v95 = v31;
      v96 = 2048;
      v97 = (uint64_t)v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,request sent date:%@, request received date: %@, requestTransmissionTime:%ld milliseconds", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v65 = qword_1022A0088;
      v66 = objc_msgSend(v24, "requestDate");
      v67 = +[NSDate date](NSDate, "date");
      v68 = objc_msgSend(v24, "requestTransmissionTime");
      *(_DWORD *)v89 = 138412802;
      *(_QWORD *)&v89[4] = v66;
      *(_WORD *)&v89[12] = 2112;
      *(_QWORD *)&v89[14] = v67;
      *(_WORD *)&v89[22] = 2048;
      v90 = (uint64_t)v68;
      LODWORD(v79) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v65, 0, "#EED2,handleAPNSMessage,request sent date:%@, request received date: %@, requestTransmissionTime:%ld milliseconds", v89, v79);
      v70 = (char *)v69;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v69);
      if (v70 != buf)
        free(v70);
    }
    if (sub_100A8914C(a1, v24))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v33 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,duplicate request, add to fRequestsHandled queue and early return", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        *(_WORD *)v89 = 0;
        LODWORD(v79) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,handleAPNSMessage,duplicate request, add to fRequestsHandled queue and early return", v89, v79);
        v72 = (char *)v71;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v71);
        if (v72 != buf)
          free(v72);
      }
      if (objc_msgSend(v24, "type") == (id)1)
        v34 = 13;
      else
        v34 = 9;
      objc_msgSend(v24, "setState:", v34);
      objc_msgSend(*(id *)(a1 + 1920), "addObject:", v24);
      sub_100A768D0(a1);
      sub_100A77908(a1);
      sub_100A81AD8(a1);
      goto LABEL_70;
    }
    v39 = sub_100A82664(a1);
    *(_QWORD *)v89 = 0;
    *(_QWORD *)&v89[8] = v89;
    *(_QWORD *)&v89[16] = 0x2020000000;
    LOBYTE(v90) = 0;
    v80[0] = _NSConcreteStackBlock;
    v80[1] = 3221225472;
    v80[2] = sub_100A8A2E8;
    v80[3] = &unk_102166550;
    v80[4] = v24;
    v80[5] = v89;
    -[NSArray enumerateObjectsUsingBlock:](v39, "enumerateObjectsUsingBlock:", v80);
    if (*(_BYTE *)(*(_QWORD *)&v89[8] + 24))
    {
      if (!v81)
      {
        objc_msgSend(*(id *)(a1 + 1912), "addObject:", v24);
        objc_msgSend(*(id *)(a1 + 1872), "notifyNewRequestAvailable");
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v40 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v41 = objc_msgSend(*(id *)(a1 + 1912), "count");
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v41;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,CLEEDRequestTypeStreaming added to pending queue and client is notified. Queue size:%ld", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v42 = qword_1022A0088;
          v43 = objc_msgSend(*(id *)(a1 + 1912), "count");
          v87 = 134217984;
          v88 = (uint64_t)v43;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "#EED2,handleAPNSMessage,CLEEDRequestTypeStreaming added to pending queue and client is notified. Queue size:%ld", &v87);
          v45 = (char *)v44;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v44);
          if (v45 != buf)
            free(v45);
        }
LABEL_118:
        sub_100A768D0(a1);
        sub_100A77908(a1);
        sub_100A81AD8(a1);
        _Block_object_dispose(v89, 8);
        goto LABEL_70;
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v46 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v47 = objc_msgSend(v24, "type");
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v47;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,device does not support request type: %{public}ld . Set error to CLEEDHelperErrorFeatureNotSupported", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v75 = qword_1022A0088;
        v76 = objc_msgSend(v24, "type");
        v87 = 134349056;
        v88 = (uint64_t)v76;
        LODWORD(v79) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v75, 0, "#EED2,handleAPNSMessage,device does not support request type: %{public}ld . Set error to CLEEDHelperErrorFeatureNotSupported", &v87, v79);
        v78 = (char *)v77;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v77);
        if (v78 != buf)
          free(v78);
      }
      objc_msgSend(v24, "setState:", 14);
      v81 = 11;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v48 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v81;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,CLEEDRequest object created with an error: %ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v87 = 134217984;
      v88 = v81;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleAPNSMessage,CLEEDRequest object created with an error: %ld", &v87);
      v74 = (char *)v73;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v73);
      if (v74 != buf)
        free(v74);
    }
    objc_msgSend(*(id *)(a1 + 1920), "addObject:", v24);
    goto LABEL_118;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,canHandleAPNSMessage retuns false, reject APNS message and early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v91) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleAPNSMessage,canHandleAPNSMessage retuns false, reject APNS message and early return", &v91, 2);
    v50 = (char *)v49;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  v10 = *(void **)(a1 + 1848);
  if (v10)
  {

    *(_QWORD *)(a1 + 1848) = 0;
  }
}

void sub_100A7A2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  _Block_object_dispose(&a45, 8);
  sub_100A921D8((uint64_t)&a49);
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(a1);
}

void sub_100A7A3F0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  if (*(_BYTE *)(a1 + 1961))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,processControlDataResponseEvent,fControlDataSendPending,sendControlData", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,processControlDataResponseEvent,fControlDataSendPending,sendControlData", &v15, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponseEvent()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_100A768D0(a1);
    *(_WORD *)(a1 + 1961) = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a1 + 1962))
  {
LABEL_8:
    *(_DWORD *)(a1 + 1964) = 0;
    return;
  }
  if (*(int *)(a1 + 1964) > 2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_DWORD *)(a1 + 1964) + 1;
      *(_DWORD *)buf = 67109376;
      v20 = v6;
      v21 = 1024;
      v22 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,processControlDataResponseEvent,fControlDataSendFailed,fControlDataSendRetryCount:%d,kEEDControlDataSendMaxRetry:%d. Not reattempting.", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = *(_DWORD *)(a1 + 1964) + 1;
      v15 = 67109376;
      v16 = v12;
      v17 = 1024;
      v18 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,processControlDataResponseEvent,fControlDataSendFailed,fControlDataSendRetryCount:%d,kEEDControlDataSendMaxRetry:%d. Not reattempting.", &v15, 14);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleControlDataResponseEvent()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *(_DWORD *)(a1 + 1964) = 0;
    *(_BYTE *)(a1 + 1962) = 0;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_DWORD *)(a1 + 1964);
      *(_DWORD *)buf = 67109376;
      v20 = v4;
      v21 = 1024;
      v22 = 3;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2,processControlDataResponseEvent,fControlDataSendFailed,fControlDataSendRetryCount:%d,kEEDControlDataSendMaxRetry:%d,attempt sendControlData", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9 = *(_DWORD *)(a1 + 1964);
      v15 = 67109376;
      v16 = v9;
      v17 = 1024;
      v18 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,processControlDataResponseEvent,fControlDataSendFailed,fControlDataSendRetryCount:%d,kEEDControlDataSendMaxRetry:%d,attempt sendControlData", &v15, 14);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleControlDataResponseEvent()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    ++*(_DWORD *)(a1 + 1964);
    sub_100A768D0(a1);
    *(_BYTE *)(a1 + 1961) = 0;
  }
}

void sub_100A7A8B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint8_t *v9;
  __int128 v10;
  uint8_t buf[4];
  uint64_t v12;

  if (*(_QWORD *)(a1 + 2016))
  {
    v2 = sub_1001FD94C();
    sub_10023EC14(v2);
    v3 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 944))(v3);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 2016);
      *(_DWORD *)buf = 138412290;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,storeCoexMetricDataToCache,stored the Co-ex metric dictionary to cache:%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v6 = *(_QWORD *)(a1 + 2016);
      LODWORD(v10) = 138412290;
      *(_QWORD *)((char *)&v10 + 4) = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeCoexMetricDataToCache,stored the Co-ex metric dictionary to cache:%@", &v10, 12, v10);
LABEL_19:
      v9 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeCoexMetricDataToCache()", "%s\n", v7);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,storeCoexMetricDataToCache, coexMetricDict nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeCoexMetricDataToCache, coexMetricDict nil", &v10, 2, v10);
      goto LABEL_19;
    }
  }
}

void sub_100A7AB68(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (sub_100A884A8(a1))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessageInExtendedSession,Received request when not in emergency call. reject the request and inform partner", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,handleAPNSMessageInExtendedSession,Received request when not in emergency call. reject the request and inform partner", v10, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessageInExtendedSession()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_100A88CEC(a1, 14);
    v3 = (_QWORD *)(a1 + 1848);
    v4 = *(void **)(a1 + 1848);
    goto LABEL_15;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessageInExtendedSession,canHandleAPNSMessage retuns false, reject  APNS message and early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleAPNSMessageInExtendedSession,canHandleAPNSMessage retuns false, reject  APNS message and early return", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessageInExtendedSession()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v4 = *(void **)(a1 + 1848);
  if (v4)
  {
    v3 = (_QWORD *)(a1 + 1848);
LABEL_15:

    *v3 = 0;
  }
}

void sub_100A7AE50(uint64_t a1, id *a2)
{
  NSObject *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  id v13;
  __int16 v14;
  id v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  id v19;

  if (*a2)
  {
    if (objc_msgSend(*a2, "state") == (id)4)
      objc_msgSend(*a2, "setState:", 2);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*a2, "type");
      v6 = objc_msgSend(*a2, "state");
      *(_DWORD *)buf = 134349312;
      v17 = v5;
      v18 = 2050;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,moveCurrentRequestToHandledQueueOnCallEnd,requestType:%{public}ld,requestState:%{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v7 = qword_1022A0088;
      v8 = objc_msgSend(*a2, "type");
      v9 = objc_msgSend(*a2, "state");
      v12 = 134349312;
      v13 = v8;
      v14 = 2050;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "#EED2,moveCurrentRequestToHandledQueueOnCallEnd,requestType:%{public}ld,requestState:%{public}ld", &v12, 22);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::moveCurrentRequestToHandledQueueOnCallEnd(CLEEDRequest **)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    objc_msgSend(*(id *)(a1 + 1920), "addObject:", *a2);

    *a2 = 0;
  }
}

id sub_100A7B080(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 2088);
  v3 = *(unsigned int *)(v2 + 108);
  v5 = v3;
  if ((int)v3 <= 0)
  {
    IOPSGetPercentRemaining(&v5, 0, 0);
    v2 = *(_QWORD *)(a1 + 2088);
    v3 = v5;
  }
  return objc_msgSend(*(id *)(a1 + 1984), "submitCoexMetricToCAWithBatteryLevelAtCallStart:batteryLevelAtCallEnd:", *(unsigned int *)(v2 + 104), v3);
}

void sub_100A7B0DC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CX, cleanupCoexMonitor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CX, cleanupCoexMonitor", v14, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupCoexMonitor()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (*(_QWORD *)(a1 + 1968) && sub_100A6F8CC(a1) != 3)
    objc_msgSend(*(id *)(a1 + 1968), "processMediaEndOfExtendedSessionNotification");
  v3 = *(void **)(a1 + 1984);
  if (v3)
  {

    *(_QWORD *)(a1 + 1984) = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2CX cleanupOnEmergencyCallEnd,fEEDCoexMonitor cleared", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CX cleanupOnEmergencyCallEnd,fEEDCoexMonitor cleared", v14, v13);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupCoexMonitor()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  v5 = *(void **)(a1 + 1992);
  if (v5)
  {

    *(_QWORD *)(a1 + 1992) = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2CX cleanupOnEmergencyCallEnd,fEEDCoexMitigation cleared", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CX cleanupOnEmergencyCallEnd,fEEDCoexMitigation cleared", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupCoexMonitor()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

id sub_100A7B4FC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id result;
  id v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  double v14;
  unsigned int v15;
  double v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t i;
  void *v21;
  void *v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  id v26;
  const char *v27;
  char *v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  id obj;
  uint64_t v33;
  void *__p[2];
  uint64_t v35;
  uint64_t v36[3];
  char *v37;
  _BYTE *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t v44[128];
  _BYTE buf[24];
  int v46;
  int v47;
  uint64_t v48[3];
  int v49;
  int v50;
  uint64_t v51[3];
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  _BYTE v78[12];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,submitEED2RequestDataToCA,entered", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v37) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,submitEED2RequestDataToCA,entered", &v37, 2);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::submitEED2RequestDataToCA()", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  obj = sub_100A7BC8C((_QWORD *)a1);
  v3 = obj;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  v5 = result;
  if (result)
  {
    v33 = *(_QWORD *)v41;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v41 != v33)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)v6);
        v8 = (char *)objc_msgSend(objc_msgSend(v7, "partnerID"), "UTF8String");
        *(_DWORD *)buf = 209;
        sub_1015A2E04(&buf[8], v8);
        v46 = 6;
        v9 = (char *)objc_msgSend(objc_msgSend(v7, "psapID"), "UTF8String");
        v47 = 210;
        sub_1015A2E04(v48, v9);
        v49 = 6;
        v10 = (char *)objc_msgSend(objc_msgSend(v7, "geofenceID"), "UTF8String");
        v50 = 211;
        sub_1015A2E04(v51, v10);
        v52 = 6;
        v11 = objc_msgSend(v7, "type");
        v53 = 212;
        v54 = v11;
        v55 = 0;
        v12 = objc_msgSend(v7, "requestStatusAtFirstUserResponse");
        v56 = 213;
        v57 = v12;
        v58 = 0;
        v13 = objc_msgSend(v7, "state");
        v59 = 214;
        v60 = v13;
        v61 = 0;
        objc_msgSend(v7, "requestReceivedTime");
        v15 = vcvtpd_s64_f64(v14 - *(double *)(a1 + 168));
        v62 = 215;
        v63 = v15;
        v64 = 0;
        objc_msgSend(v7, "receivedTimeToFirstUserResponse");
        v65 = 216;
        v66 = vcvtpd_s64_f64(v16);
        v67 = 0;
        objc_msgSend(v7, "receivedTimeToAcceptTime");
        v68 = 217;
        v69 = vcvtpd_s64_f64(v17);
        v70 = 0;
        v18 = objc_msgSend(v7, "numMediaSelectIterations");
        v71 = 218;
        v72 = v18;
        v73 = 0;
        v19 = objc_msgSend(v7, "requestTransmissionTime");
        v74 = 219;
        v75 = v19;
        v76 = 0;
        v38 = 0;
        v39 = 0;
        v37 = 0;
        *(_QWORD *)v78 = &v37;
        v78[8] = 0;
        v37 = (char *)operator new(0x1B8uLL);
        v38 = v37;
        v39 = v37 + 440;
        v38 = (_BYTE *)sub_1006AB40C((uint64_t)&v39, (uint64_t)buf, (uint64_t)&v77, (uint64_t)v37);
        for (i = 408; i != -32; i -= 40)
          sub_1001F8644((uint64_t)&buf[i]);
        v21 = *(void **)(a1 + 2096);
        memset(v36, 0, sizeof(v36));
        sub_1006AB68C(v36, (uint64_t)v37, (uint64_t)v38, 0xCCCCCCCCCCCCCCCDLL * ((v38 - v37) >> 3));
        objc_msgSend(v21, "setMeasurements:", sub_1006A7590(v36));
        *(_QWORD *)buf = v36;
        sub_1006AB5A0((void ***)buf);
        v22 = *(void **)(a1 + 2096);
        if (byte_1023112E7 < 0)
        {
          sub_100115CE4(__p, (void *)xmmword_1023112D0, *((unint64_t *)&xmmword_1023112D0 + 1));
        }
        else
        {
          *(_OWORD *)__p = xmmword_1023112D0;
          v35 = unk_1023112E0;
        }
        objc_msgSend(v22, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
        if (SHIBYTE(v35) < 0)
          operator delete(__p[0]);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v23 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v24 = objc_msgSend(v7, "ID");
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2,submitEED2RequestDataToCA,metric submitted for request:%@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v25 = qword_1022A0088;
          v26 = objc_msgSend(v7, "ID");
          *(_DWORD *)v78 = 138412290;
          *(_QWORD *)&v78[4] = v26;
          LODWORD(v31) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 0, "#EED2,submitEED2RequestDataToCA,metric submitted for request:%@", v78, v31);
          v28 = (char *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::submitEED2RequestDataToCA()", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        *(_QWORD *)buf = &v37;
        sub_1006AB5A0((void ***)buf);
        v6 = (char *)v6 + 1;
      }
      while (v6 != v5);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_100A7BB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a63 = (uint64_t)&a35;
  sub_1006AB5A0((void ***)&a63);
  _Unwind_Resume(a1);
}

void *sub_100A7BC8C(_QWORD *a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  int v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = v2;
  if (a1[241])
    objc_msgSend(v2, "addObject:");
  if (a1[242])
    objc_msgSend(v3, "addObject:");
  v4 = (void *)a1[239];
  if (v4 && objc_msgSend(v4, "count"))
    objc_msgSend(v3, "addObjectsFromArray:", a1[239]);
  v5 = (void *)a1[240];
  if (v5 && objc_msgSend(v5, "count"))
    objc_msgSend(v3, "addObjectsFromArray:", a1[240]);
  if (objc_msgSend(v3, "count"))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v17 = objc_msgSend(v3, "count");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,createEEDRequestsList,created list with %{public}ld requests", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v7 = qword_1022A0088;
      v14 = 134349056;
      v15 = objc_msgSend(v3, "count");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "#EED2,createEEDRequestsList,created list with %{public}ld requests", &v14, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "NSArray<CLEEDRequest *> *CLEmergencyEED2::createEEDRequestsList()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2,createEEDRequestsList,no eed Requests", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v14) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,createEEDRequestsList,no eed Requests", &v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "NSArray<CLEEDRequest *> *CLEmergencyEED2::createEEDRequestsList()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }

    return 0;
  }
  return v3;
}

void sub_100A7BFEC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 1728))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#DSA,deregistering for DSA", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#DSA,deregistering for DSA", v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::deregisterForDispatchableSearchArea()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    *(_BYTE *)(a1 + 1760) = 0;
    objc_msgSend(*(id *)(a1 + 1728), "_stopFetchingContinuousPlaceInferences");
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2,#DSA,not registered for DSA since we don't have an LM", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#DSA,not registered for DSA since we don't have an LM", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::deregisterForDispatchableSearchArea()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

BOOL sub_100A7C2BC(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  OSStatus v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  OSStatus v10;
  _QWORD v11[5];
  _QWORD v12[5];

  v11[0] = kSecAttrLabel;
  v11[1] = kSecClass;
  v12[0] = a2;
  v12[1] = kSecClassKey;
  v11[2] = kSecUseSystemKeychain;
  v11[3] = kSecAttrIsPermanent;
  v12[2] = &__kCFBooleanTrue;
  v12[3] = &__kCFBooleanTrue;
  v11[4] = kSecReturnRef;
  v12[4] = &__kCFBooleanTrue;
  v3 = SecItemCopyMatching((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 5), a3);
  if (v3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2,#Sec,failed to copy key from keychain,response,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8[0] = 67240192;
      v8[1] = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#Sec,failed to copy key from keychain,response,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::copyCachedKey(NSString *, SecKeyRef *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return v3 == 0;
}

BOOL sub_100A7C4FC(uint64_t a1, uint64_t a2)
{
  OSStatus v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  OSStatus v9;
  _QWORD v10[4];
  _QWORD v11[4];

  v10[0] = kSecAttrLabel;
  v10[1] = kSecClass;
  v11[0] = a2;
  v11[1] = kSecClassKey;
  v10[2] = kSecUseSystemKeychain;
  v10[3] = kSecAttrIsPermanent;
  v11[2] = &__kCFBooleanTrue;
  v11[3] = &__kCFBooleanTrue;
  v2 = SecItemDelete((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 4));
  if (v2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EED2,#Sec,failed to delete key from keychain,response,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v7[0] = 67240192;
      v7[1] = v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#Sec,failed to delete key from keychain,response,%{public}d", v7, 8);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::deleteCachedKey(NSString *)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return v2 == 0;
}

BOOL sub_100A7C720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OSStatus v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  OSStatus v11;
  _QWORD v12[6];
  _QWORD v13[6];

  v12[0] = kSecAttrLabel;
  v12[1] = kSecClass;
  v13[0] = a2;
  v13[1] = kSecClassKey;
  v12[2] = kSecUseSystemKeychain;
  v12[3] = kSecAttrIsPermanent;
  v13[2] = &__kCFBooleanTrue;
  v13[3] = &__kCFBooleanTrue;
  v12[4] = kSecValueRef;
  v12[5] = kSecAttrAccessible;
  v13[4] = a4;
  v13[5] = a3;
  v4 = SecItemAdd((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 6), 0);
  if (v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,#Sec,failed to add key to keychain,response,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9[0] = 67240192;
      v9[1] = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#Sec,failed to add key to keychain,response,%{public}d", v9, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::cacheKey(NSString *, NSString *, SecKeyRef)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return v4 == 0;
}

BOOL sub_100A7C968(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  OSStatus v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  OSStatus v10;
  _QWORD v11[4];
  _QWORD v12[4];

  v11[0] = kSecAttrLabel;
  v11[1] = kSecClass;
  v12[0] = a2;
  v12[1] = kSecClassCertificate;
  v11[2] = kSecUseSystemKeychain;
  v11[3] = kSecReturnRef;
  v12[2] = &__kCFBooleanTrue;
  v12[3] = &__kCFBooleanTrue;
  v3 = SecItemCopyMatching((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 4), a3);
  if (v3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2,#Sec,failed to copy cert from keychain,response,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8[0] = 67240192;
      v8[1] = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#Sec,failed to copy cert from keychain,response,%{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::copyCachedCert(NSString *, SecCertificateRef *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return v3 == 0;
}

BOOL sub_100A7CB94(uint64_t a1, uint64_t a2)
{
  OSStatus v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  OSStatus v9;
  _QWORD v10[3];
  _QWORD v11[3];

  v10[0] = kSecAttrLabel;
  v10[1] = kSecClass;
  v11[0] = a2;
  v11[1] = kSecClassCertificate;
  v10[2] = kSecUseSystemKeychain;
  v11[2] = &__kCFBooleanTrue;
  v2 = SecItemDelete((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 3));
  if (v2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EED2,#Sec,failed to delete cert,response,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v7[0] = 67240192;
      v7[1] = v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#Sec,failed to delete cert,response,%{public}d", v7, 8);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::deleteCachedCert(NSString *)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return v2 == 0;
}

BOOL sub_100A7CDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OSStatus v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  OSStatus v11;
  _QWORD v12[5];
  _QWORD v13[5];

  v12[0] = kSecAttrLabel;
  v12[1] = kSecClass;
  v13[0] = a2;
  v13[1] = kSecClassCertificate;
  v12[2] = kSecUseSystemKeychain;
  v12[3] = kSecValueRef;
  v13[2] = &__kCFBooleanTrue;
  v13[3] = a4;
  v12[4] = kSecAttrAccessible;
  v13[4] = a3;
  v4 = SecItemAdd((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 5), 0);
  if (v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,#Sec,failed to add cert to keychain,response,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9[0] = 67240192;
      v9[1] = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#Sec,failed to add cert to keychain,response,%{public}d", v9, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::cacheCert(NSString *, NSString *, SecCertificateRef)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return v4 == 0;
}

void sub_100A7CFE8(_QWORD *a1)
{
  int v2;
  double v3;
  double v4;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  double v13;
  __int16 v14;
  double v15;
  __int16 v16;
  uint64_t v17;

  v2 = sub_100A7DA78(a1);
  v3 = 0.0;
  v4 = 0.0;
  if (v2)
  {
    v3 = SecCertificateNotValidBefore(a1[211]);
    v4 = SecCertificateNotValidAfter(a1[211]);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[213];
    v7[0] = 68290050;
    v8 = 2082;
    v7[1] = 0;
    v9 = "";
    v10 = 1026;
    v11 = v2;
    v12 = 2050;
    v13 = v3;
    v14 = 2050;
    v15 = v4;
    v16 = 2050;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#BAA,current BAA info\", \"cert valid\":%{public}hhd, \"cert validity begins\":\"%{public}.1f\", \"cert validity ends\":\"%{public}.1f\", \"next cert request\":\"%{public}.1f\"}", (uint8_t *)v7, 0x36u);
  }
}

void sub_100A7D128(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  _WORD v33[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,writing info to disk", buf, 2u);
  }
  v3 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v3)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v33[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,writing info to disk", v33, 2);
    v19 = (uint8_t *)v18;
    v3 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (a1[210] && a1[211] && a1[212])
  {
    v4 = sub_100A7C4FC(v3, (uint64_t)CFSTR("com.apple.locationd.BAA.key"));
    if ((v4 & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA private key", buf, 2u);
      }
      v4 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v4)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v33[0] = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unable to delete existing BAA private key", v33, v32);
        v21 = (uint8_t *)v20;
        v4 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
    }
    v6 = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    v7 = sub_100A7C720(v4, (uint64_t)CFSTR("com.apple.locationd.BAA.key"), kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, a1[210]);
    if ((v7 & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2,#BAA,failed to add BAA private key to keychain", buf, 2u);
      }
      v7 = sub_1001BFF7C(115, 0);
      if ((_DWORD)v7)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v33[0] = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#BAA,failed to add BAA private key to keychain", v33, v32);
        v23 = (uint8_t *)v22;
        v7 = sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
    }
    v9 = sub_100A7CB94(v7, (uint64_t)CFSTR("com.apple.locationd.BAA.leafCert"));
    if ((v9 & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA leaf cert", buf, 2u);
      }
      v9 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v9)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v33[0] = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unable to delete existing BAA leaf cert", v33, v32);
        v25 = (uint8_t *)v24;
        v9 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
    }
    v11 = sub_100A7CDAC(v9, (uint64_t)CFSTR("com.apple.locationd.BAA.leafCert"), v6, a1[211]);
    if ((v11 & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2,#BAA,failed to add BAA leaf cert to keychain", buf, 2u);
      }
      v11 = sub_1001BFF7C(115, 0);
      if ((_DWORD)v11)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v33[0] = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#BAA,failed to add BAA leaf cert to keychain", v33, v32);
        v27 = (uint8_t *)v26;
        v11 = sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
    }
    v13 = sub_100A7CB94(v11, (uint64_t)CFSTR("com.apple.locationd.BAA.intCert"));
    if ((v13 & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA intermediate cert", buf, 2u);
      }
      v13 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v33[0] = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unable to delete existing BAA intermediate cert", v33, v32);
        v29 = (uint8_t *)v28;
        v13 = sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
    }
    if (!sub_100A7CDAC(v13, (uint64_t)CFSTR("com.apple.locationd.BAA.intCert"), v6, a1[212]))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v15 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#EED2,#BAA,failed to add BAA intermediate cert to keychain", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v33[0] = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#BAA,failed to add BAA intermediate cert to keychain", v33, v32);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
    }
  }
  v16 = sub_1001FD94C();
  sub_10018A534(v16, CFSTR("BaaNextCertRequestTime"), a1 + 213);
  v17 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 944))(v17);
  sub_100A7CFE8(a1);
}

uint64_t sub_100A7DA78(_QWORD *a1)
{
  if (a1[210] && a1[211] && a1[212] && (CFAbsoluteTimeGetCurrent(), SecCertificateIsValid(a1[211])))
    return SecCertificateIsValid(a1[212]);
  else
    return 0;
}

_QWORD *sub_100A7DAE4@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 4)
    v2 = "ReasonUnknown";
  else
    v2 = off_102166C68[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_100A7DB10(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 1676))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unregistering BAA cert request activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,unregistering BAA cert request activity", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::unregisterBaaCertRequestActivity()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    xpc_activity_unregister((const char *)objc_msgSend(CFSTR("com.apple.locationd.BAA"), "UTF8String"));
    *(_BYTE *)(a1 + 1676) = 0;
  }
}

BOOL sub_100A7DCBC(uint64_t a1, int a2)
{
  double v4;
  double Current;
  int v6;
  char v7;
  double v8;
  double v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  double v14;
  double v15;
  double v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  double v22;
  NSObject *v23;
  double v24;
  NSObject *v25;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  _WORD v32[8];
  uint8_t buf[1640];

  v4 = *(double *)(a1 + 1704);
  Current = CFAbsoluteTimeGetCurrent();
  v6 = sub_100A7DA78((_QWORD *)a1);
  v7 = v6;
  v8 = 0.0;
  v9 = 0.0;
  if (v6)
  {
    v9 = SecCertificateNotValidBefore(*(_QWORD *)(a1 + 1688));
    v8 = SecCertificateNotValidAfter(*(_QWORD *)(a1 + 1688));
  }
  v10 = (int *)sub_100A58478((int *)(a1 + 1448));
  v11 = v10[102];
  v12 = v10[103];
  v13 = v10[104];
  switch(a2)
  {
    case 0:
    case 1:
      v14 = *(double *)(a1 + 1704);
      if ((v7 & 1) != 0)
      {
        v15 = v9 + (double)v12;
        if (v14 < v15 || v14 > v9 + (double)v13)
        {
          v17 = v15 + (double)(v13 - v12) * ((double)arc4random() / 4294967300.0);
          goto LABEL_24;
        }
        v17 = Current;
        if (Current > v14)
          goto LABEL_24;
        goto LABEL_25;
      }
      v24 = (double)v10[101];
      if (v14 == 0.0 || v14 > Current + v24)
        goto LABEL_37;
      if (Current > v14)
        goto LABEL_39;
      goto LABEL_40;
    case 2:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#EED2,#BAA,shouldn't be checking next cert request time during SessionStart", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v32[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#BAA,shouldn't be checking next cert request time during SessionStart", v32, 2);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::checkNextCertRequestTime(CertRequestStatusCheckReason)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      goto LABEL_20;
    case 3:
      *(double *)(a1 + 1704) = v9 + (double)v12 + (double)(v13 - v12) * ((double)arc4random() / 4294967300.0);
      goto LABEL_20;
    case 4:
      v21 = v10[105];
      v22 = (double)arc4random() / 4294967300.0;
      if ((v7 & 1) == 0)
      {
        Current = Current + (double)v11 * v22;
        goto LABEL_39;
      }
      v17 = Current + (double)v21 * v22;
LABEL_24:
      *(double *)(a1 + 1704) = v17;
      v14 = v17;
LABEL_25:
      if (v14 > v8)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v23 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,#BAA,next cert request time places us beyond expiration of current cert so modifying", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v32[0] = 0;
          LODWORD(v31) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2,#BAA,next cert request time places us beyond expiration of current cert so modifying", v32, v31);
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::checkNextCertRequestTime(CertRequestStatusCheckReason)", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        v14 = (Current + v8) * 0.5;
        *(double *)(a1 + 1704) = v14;
        v24 = (double)v11;
        if (v14 - Current < (double)v11)
        {
LABEL_37:
          Current = Current + v24 * ((double)arc4random() / 4294967300.0);
LABEL_39:
          *(double *)(a1 + 1704) = Current;
          v14 = Current;
        }
      }
LABEL_40:
      if (v4 != v14)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v25 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,updated next cert request time", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v32[0] = 0;
          LODWORD(v31) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,updated next cert request time", v32, v31);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::checkNextCertRequestTime(CertRequestStatusCheckReason)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        sub_100A7D128((_QWORD *)a1);
      }
      return v4 != v14;
    default:
LABEL_20:
      v14 = *(double *)(a1 + 1704);
      if ((v7 & 1) == 0)
        goto LABEL_40;
      goto LABEL_25;
  }
}

void sub_100A7E2AC(uint64_t a1)
{
  double v2;
  double Current;
  int64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  xpc_object_t v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;
  _QWORD handler[5];
  _BYTE v16[12];
  __int16 v17;
  int64_t v18;
  _BYTE buf[1628];

  if ((sub_100A579D4(a1 + 1448) & 1) != 0)
  {
    v2 = *(double *)(a1 + 1704);
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001E4804(buf);
    *(_QWORD *)v16 = 0;
    if (sub_1005262B4(*(uint64_t *)buf, "BAAGracePeriod", v16))
      v4 = *(_QWORD *)v16;
    else
      v4 = 600;
    v5 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v6 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REPEATING, 0);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_string(v8, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_DOWNLOAD);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 0);
    xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, (uint64_t)(v2 - Current) & ~((uint64_t)(v2 - Current) >> 63));
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, v4);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = (uint64_t)(v2 - Current) & ~((uint64_t)(v2 - Current) >> 63);
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,registering BAA cert request activity,delay,%{public}lld,gracePeriod,%{public}lld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_DWORD *)v16 = 134349312;
      *(_QWORD *)&v16[4] = (uint64_t)(v2 - Current) & ~((uint64_t)(v2 - Current) >> 63);
      v17 = 2050;
      v18 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,registering BAA cert request activity,delay,%{public}lld,gracePeriod,%{public}lld", v16, 22);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::registerBaaCertRequestActivity()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    *(_BYTE *)(a1 + 1676) = 1;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100A7EB64;
    handler[3] = &unk_102154A38;
    handler[4] = a1;
    xpc_activity_register((const char *)objc_msgSend(CFSTR("com.apple.locationd.BAA"), "UTF8String"), v8, handler);
    xpc_release(v8);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2,#BAA,requesting of BAA certs not allowed by config,not starting XPC activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)v16 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#BAA,requesting of BAA certs not allowed by config,not starting XPC activity", v16, 2);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::registerBaaCertRequestActivity()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_100A7E778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A7E794(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  NSDictionary *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[5];
  int v13;
  _WORD v14[8];
  _QWORD v15[3];
  _QWORD v16[3];
  uint8_t buf[1640];

  v2 = (int *)(a1 + 1448);
  if ((sub_100A579D4(a1 + 1448) & 1) != 0)
  {
    v3 = (*((_DWORD *)sub_100A58478(v2) + 100) / 60);
    v15[0] = kMAOptionsBAAValidity;
    v16[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
    v16[1] = &__kCFBooleanTrue;
    v15[1] = kMAOptionsBAASCRTAttestation;
    v15[2] = kMAOptionsBAAIgnoreExistingKeychainItems;
    v16[2] = &__kCFBooleanTrue;
    v4 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 3);
    *(CFAbsoluteTime *)(a1 + 1704) = CFAbsoluteTimeGetCurrent();
    sub_100A7D128((_QWORD *)a1);
    *(_BYTE *)(a1 + 1677) = 1;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,requesting cert", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,requesting cert", v14, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::requestBaaCert()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue");
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100A7EE9C;
    v12[3] = &unk_102166480;
    v12[4] = a1;
    v13 = v3;
    DeviceIdentityIssueClientCertificateWithCompletion(v6, v4, v12);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2,#BAA,attempted to request BAA cert when not configured to do so", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#BAA,attempted to request BAA cert when not configured to do so", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::requestBaaCert()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_100A7EB64(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v2;
  xpc_activity_state_t state;
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _QWORD block[5];
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v2 = *(_QWORD *)(a1 + 32);
  state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,cert request activity handler triggered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,cert request activity handler triggered", v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::registerBaaCertRequestActivity()_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v5 = objc_msgSend(objc_msgSend(*(id *)(v2 + 8), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100A7EE90;
    block[3] = &unk_10212ECA0;
    block[4] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    v6 = state;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,cert request activity handler triggered with unexpected state %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v13[0] = 67240192;
      v13[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,#BAA,cert request activity handler triggered with unexpected state %{public}d", v13, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::registerBaaCertRequestActivity()_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_100A7EE90(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 1676) = 0;
  sub_100A7E794(v1);
}

void sub_100A7EE9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v7 + 8), "silo");
  *(_BYTE *)(v7 + 1677) = 0;
  sub_100A7EEE8((_QWORD *)v7, a2, a3, v8, a4);
}

void sub_100A7EEE8(_QWORD *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  NSObject *v10;
  const __CFString *v11;
  NSObject *v12;
  __SecCertificate *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  id v17;
  id v18;
  NSObject *v19;
  double v20;
  double v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  _DWORD v31[2];
  __int16 v32;
  id v33;
  __int16 v34;
  id v35;
  uint8_t buf[4];
  unsigned int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;

  v9 = sub_100A7DA78(a1);
  if (a5)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240706;
      v37 = objc_msgSend(a5, "code");
      v38 = 2082;
      v39 = (const char *)objc_msgSend(objc_msgSend(a5, "domain"), "UTF8String");
      v40 = 2082;
      v41 = COERCE_DOUBLE(objc_msgSend(objc_msgSend(a5, "localizedDescription"), "UTF8String"));
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2,#BAA,error in response to cert request,error code,%{public}d,domain,%{public}s,reason,%{public}s\n", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v24 = qword_1022A0088;
      v31[0] = 67240706;
      v31[1] = objc_msgSend(a5, "code");
      v32 = 2082;
      v33 = objc_msgSend(objc_msgSend(a5, "domain"), "UTF8String");
      v34 = 2082;
      v35 = objc_msgSend(objc_msgSend(a5, "localizedDescription"), "UTF8String");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 16, "#EED2,#BAA,error in response to cert request,error code,%{public}d,domain,%{public}s,reason,%{public}s\n", v31, 28);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleBaaCertResponse(SecKeyRef, NSArray *, int32_t, NSError *)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ErrorDomain:%s,ErrorCode:%d"), objc_msgSend(objc_msgSend(a5, "domain"), "UTF8String"), objc_msgSend(a5, "code"));
    sub_100A62408(a1, 4);
  }
  else if ((unint64_t)objc_msgSend(a3, "count") > 1)
  {
    v13 = (__SecCertificate *)objc_msgSend(a3, "objectAtIndexedSubscript:", 0);
    if ((sub_100A7F58C((uint64_t)v13, (__SecKey *)a2, v13) & 1) != 0)
    {
      v14 = (const void *)a1[210];
      if (v14)
        CFRelease(v14);
      v15 = (const void *)a1[211];
      if (v15)
        CFRelease(v15);
      v16 = (const void *)a1[212];
      if (v16)
        CFRelease(v16);
      a1[210] = a2;
      CFRetain(a2);
      v17 = objc_msgSend(a3, "objectAtIndexedSubscript:", 0);
      a1[211] = v17;
      CFRetain(v17);
      v18 = objc_msgSend(a3, "objectAtIndexedSubscript:", 1);
      a1[212] = v18;
      CFRetain(v18);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v19 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v20 = SecCertificateNotValidBefore(a1[211]);
        v21 = SecCertificateNotValidAfter(a1[211]);
        *(_DWORD *)buf = 68289538;
        v37 = 0;
        v38 = 2082;
        v39 = "";
        v40 = 2050;
        v41 = v20;
        v42 = 2050;
        v43 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#BAA,cert request successful\", \"validity starts\":\"%{public}.1f\", \"validity ends\":\"%{public}.1f\"}", buf, 0x26u);
      }
      sub_100A7D128(a1);
      sub_100A62408(a1, 3);
      v22 = a1[221];
      if (v22)
        sub_1012C5D74(v22);
      sub_100A63CC8((uint64_t)(a1 + 192), 21);
      v11 = CFSTR("Success");
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v23 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#EED2,#BAA,could not ceate and verify signature using received leaf certificate and key", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v31[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#BAA,could not ceate and verify signature using received leaf certificate and key", v31, 2);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleBaaCertResponse(SecKeyRef, NSArray *, int32_t, NSError *)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      sub_100A62408(a1, 4);
      v11 = CFSTR("CertificateVerifyError");
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2,#BAA,returned certificate array does not include both leaf and intermediate certs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v31[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,#BAA,returned certificate array does not include both leaf and intermediate certs", v31, 2);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleBaaCertResponse(SecKeyRef, NSArray *, int32_t, NSError *)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    sub_100A62408(a1, 4);
    v11 = CFSTR("CertificateCountError");
  }
  sub_100A7FD50((uint64_t)a1, (uint64_t)v11, v9);
}

uint64_t sub_100A7F58C(uint64_t a1, __SecKey *a2, __SecCertificate *a3)
{
  NSMutableData *v5;
  NSObject *v6;
  _BOOL8 v7;
  CFDataRef v8;
  NSObject *v9;
  unsigned int v10;
  id v11;
  id v12;
  uint64_t v13;
  unsigned int v14;
  id v15;
  id v16;
  const char *v17;
  uint8_t *v18;
  const __CFData *v19;
  __SecKey *v20;
  __SecKey *v21;
  int v22;
  NSObject *v23;
  unsigned int v24;
  id v25;
  id v26;
  uint64_t v27;
  unsigned int v28;
  id v29;
  id v30;
  const char *v31;
  NSObject *v32;
  NSObject *v33;
  const char *v35;
  uint8_t *v36;
  uint8_t *v37;
  CFErrorRef error;
  int v39;
  unsigned int v40;
  __int16 v41;
  id v42;
  __int16 v43;
  id v44;
  uint8_t buf[4];
  unsigned int v46;
  __int16 v47;
  id v48;
  __int16 v49;
  id v50;

  v5 = +[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 256);
  if (SecRandomCopyBytes(kSecRandomDefault, 0x100uLL, -[NSMutableData mutableBytes](v5, "mutableBytes")))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,verifyKeyAndBaaLeafCertPair,failed to sign dummy data", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v39) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2,verifyKeyAndBaaLeafCertPair,failed to sign dummy data", &v39, 2);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::verifyKeyAndBaaLeafCertPair(SecKeyRef, SecCertificateRef)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    return 1;
  }
  error = 0;
  v8 = SecKeyCreateSignature(a2, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v5, &error);
  if (error)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v10 = -[__CFError code](error, "code");
      v11 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
      v12 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 67109634;
      v46 = v10;
      v47 = 2080;
      v48 = v11;
      v49 = 2080;
      v50 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#EED2,verifyKeyAndBaaLeafCertPair,failed to produce signature for data,error code,%d,domain,%s,reason,%s", buf, 0x1Cu);
    }
    v7 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v13 = qword_1022A0088;
      v14 = -[__CFError code](error, "code");
      v15 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
      v16 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
      v39 = 67109634;
      v40 = v14;
      v41 = 2080;
      v42 = v15;
      v43 = 2080;
      v44 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 16, "#EED2,verifyKeyAndBaaLeafCertPair,failed to produce signature for data,error code,%d,domain,%s,reason,%s", &v39, 28);
LABEL_17:
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::verifyKeyAndBaaLeafCertPair(SecKeyRef, SecCertificateRef)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
      return 0;
    }
    return v7;
  }
  v19 = v8;
  if (v8)
  {
    v20 = SecCertificateCopyKey(a3);
    if (v20)
    {
      v21 = v20;
      v22 = SecKeyVerifySignature(v20, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v5, v19, &error);
      CFRelease(v21);
      if (!error)
      {
        v7 = v22 != 0;

        return v7;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v23 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v24 = -[__CFError code](error, "code");
        v25 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
        v26 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
        *(_DWORD *)buf = 67109634;
        v46 = v24;
        v47 = 2080;
        v48 = v25;
        v49 = 2080;
        v50 = v26;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#EED2,verifyKeyAndBaaLeafCertPair,unable to verify signature,error code,%d,domain,%s,reason,%s", buf, 0x1Cu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_43;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v27 = qword_1022A0088;
      v28 = -[__CFError code](error, "code");
      v29 = objc_msgSend(-[__CFError domain](error, "domain"), "UTF8String");
      v30 = objc_msgSend(-[__CFError localizedDescription](error, "localizedDescription"), "UTF8String");
      v39 = 67109634;
      v40 = v28;
      v41 = 2080;
      v42 = v29;
      v43 = 2080;
      v44 = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 16, "#EED2,verifyKeyAndBaaLeafCertPair,unable to verify signature,error code,%d,domain,%s,reason,%s", &v39, 28);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v33 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#EED2,verifyKeyAndBaaLeafCertPair,failed to extract public key from cert", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_43;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v39) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,verifyKeyAndBaaLeafCertPair,failed to extract public key from cert", &v39, 2);
    }
    v37 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::verifyKeyAndBaaLeafCertPair(SecKeyRef, SecCertificateRef)", "%s\n", v31);
    if (v37 != buf)
      free(v37);
LABEL_43:

    return 0;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v32 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#EED2,verifyKeyAndBaaLeafCertPair,failed to sign dummy data", buf, 2u);
  }
  v7 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v39) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,verifyKeyAndBaaLeafCertPair,failed to sign dummy data", &v39, 2);
    goto LABEL_17;
  }
  return v7;
}

void sub_100A7FD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;

  if (sub_100A579D4(a1 + 1448))
  {
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    v7 = v6;
    sub_100A861BC(a1, &v7);
    objc_msgSend(v6, "setValue:forKey:", a2, CFSTR("result"));
    objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3), CFSTR("certAvailable"));
    AnalyticsSendEvent(CFSTR("com.apple.locationd.eed.baa.certreq"), v6);

  }
}

void sub_100A7FDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  int v9;
  int v10;
  void *v11;
  uint64_t v12[3];
  char *v13;
  _BYTE *v14;
  _QWORD v15[2];
  char v16;
  void **v17;
  _DWORD v18[8];
  uint64_t v19;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  v6 = v5 == 0;
  if (v5)
    v7 = 3;
  else
    v7 = 1;
  if (v6 || v4 == 0)
    v9 = 2;
  else
    v9 = 4;
  if (v4)
    v10 = v9;
  else
    v10 = v7;
  LODWORD(v17) = 31;
  v18[0] = v10;
  v18[6] = 0;
  v14 = 0;
  v15[0] = 0;
  v13 = 0;
  v15[1] = &v13;
  v16 = 0;
  v13 = (char *)operator new(0x28uLL);
  v14 = v13;
  v15[0] = v13 + 40;
  v14 = (_BYTE *)sub_1006AB40C((uint64_t)v15, (uint64_t)&v17, (uint64_t)&v19, (uint64_t)v13);
  sub_1001F8644((uint64_t)v18);
  v11 = *(void **)(a1 + 2096);
  memset(v12, 0, sizeof(v12));
  sub_1006AB68C(v12, (uint64_t)v13, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - v13) >> 3));
  objc_msgSend(v11, "setMeasurements:", sub_1006A7590(v12));
  v17 = (void **)v12;
  sub_1006AB5A0(&v17);
  v17 = (void **)&v13;
  sub_1006AB5A0(&v17);
}

void sub_100A7FF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_1006AB5A0(&a17);
  _Unwind_Resume(a1);
}

void sub_100A7FFC4(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  char *v12;
  void **v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  NSObject *v26;
  const char *v27;
  void **v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  const char *v37;
  void **v38;
  uint64_t v39;
  char *v40;
  _BYTE *v41;
  int v42;
  char *v43;
  char *v44;
  const char *v45;
  void **v46;
  _QWORD v47[86];
  std::__shared_weak_count *v48;
  _BYTE buf[12];
  __int16 v50;
  int v51;
  char v52;
  int v53;
  _BYTE *v54;
  __int16 v55;
  int v56;
  void *__p[2];
  char v58;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 104);
    if (!v6)
      sub_10025FD1C();
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v6 + 48))(v47);
    sub_10139A3E0(a1, (uint64_t)v47);
    if (sub_100182290((uint64_t)v47))
    {
      ++*(_DWORD *)(a1 + 412);
      v7 = *(_QWORD *)(a1 + 2088);
      if (v7)
        ++*(_DWORD *)(v7 + 8);
      v8 = sub_100A807C4((uint64_t)v47);
      v9 = sub_100A80BF4(a1, a3);
      objc_msgSend(v9, "setValue:forKey:", v8, CFSTR("location"));

      v10 = sub_100A80EB0(a1);
      objc_msgSend(v9, "setValue:forKey:", v10, CFSTR("internal"));

      if (*(_QWORD *)(a1 + 1664))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v11 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v12 = a2 ? "Companion" : "Native";
          sub_1015A2E04(__p, v12);
          v13 = v58 >= 0 ? __p : (void **)__p[0];
          v14 = *(_DWORD *)(a1 + 1672);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v13;
          v50 = 1026;
          v51 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2 POSTing LIS data for %{public}s number message %{public}d", buf, 0x12u);
          if (v58 < 0)
            operator delete(__p[0]);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v39 = qword_1022A0088;
          if (a2)
            v40 = "Companion";
          else
            v40 = "Native";
          sub_1015A2E04(buf, v40);
          if (v52 >= 0)
            v41 = buf;
          else
            v41 = *(_BYTE **)buf;
          v42 = *(_DWORD *)(a1 + 1672);
          v53 = 136446466;
          v54 = v41;
          v55 = 1026;
          v56 = v42;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v39, 0, "#EED2 POSTing LIS data for %{public}s number message %{public}d", &v53, 18);
          v44 = v43;
          if (v52 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation(NumberType, const std::string &)", "%s\n", v44);
          if (v44 != (char *)__p)
            free(v44);
        }
        sub_100A81428(a1, a2, (uint64_t)v9, (uint64_t)v47);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v29 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#EED2 can't POST message due to invalid URL session", (uint8_t *)__p, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          *(_WORD *)buf = 0;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 can't POST message due to invalid URL session", buf, 2);
          v46 = (void **)v45;
          sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendLocation(NumberType, const std::string &)", "%s\n", v45);
          if (v46 != __p)
            free(v46);
        }
        v30 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 3);
        v31 = *(_QWORD *)(a1 + 2088);
        if (v31)
        {
          v32 = sub_100A86958(v30, *(_DWORD *)(v31 + 24));
          v33 = *(_DWORD *)(v31 + 24);
          if (v32 >= 2)
            v33 = 2;
          *(_DWORD *)(v31 + 24) = v33;
        }
      }

      sub_100A81AD8(a1);
    }
    else
    {
      ++*(_DWORD *)(a1 + 416);
      v22 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 2);
      v23 = *(_QWORD *)(a1 + 2088);
      if (v23)
      {
        ++*(_DWORD *)(v23 + 12);
        v24 = sub_100A86958(v22, *(_DWORD *)(v23 + 24));
        v25 = *(_DWORD *)(v23 + 24);
        if (v24 >= 5)
          v25 = 1;
        *(_DWORD *)(v23 + 24) = v25;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v26 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2 no fix available to send in LIS payload, not sending", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        *(_WORD *)buf = 0;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 no fix available to send in LIS payload, not sending", buf, 2);
        v28 = (void **)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation(NumberType, const std::string &)", "%s\n", v27);
        if (v28 != __p)
          free(v28);
      }
    }
    v34 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "#EED2 attempted to send location when not enabled", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v47[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 17, "#EED2 attempted to send location when not enabled", v47, 2);
      v38 = (void **)v37;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::sendLocation(NumberType, const std::string &)", "%s\n", v37);
      if (v38 != __p)
        free(v38);
    }
    v16 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 12);
    v17 = *(_QWORD *)(a1 + 2088);
    if (v17)
    {
      v19 = *(_DWORD *)(v17 + 24);
      v18 = (int *)(v17 + 24);
      v20 = sub_100A86958(v16, v19);
      v21 = *v18;
      if (v20 >= 2)
        v21 = 4;
      *v18 = v21;
    }
  }
}

void sub_100A80788(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

id sub_100A807C4(uint64_t a1)
{
  id v2;
  double v3;
  double *v4;
  double *v5;
  double v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  double v16;
  double v17[2];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;

  if ((sub_100182290(a1) & 1) != 0)
  {
    v2 = objc_alloc_init((Class)NSMutableDictionary);
    v3 = *(double *)(a1 + 184);
    v4 = (double *)sub_100B94758();
    v5 = (double *)(a1 + 76);
    if (v3 != v4[3])
      v5 = (double *)(a1 + 184);
    -[NSDate timeIntervalSince1970](+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *v5), "timeIntervalSince1970");
    v7 = llround(v6);
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v7), CFSTR("timestamp"));
    v8 = round(*(double *)(a1 + 4) * 100000.0) / 100000.0;
    v9 = round(*(double *)(a1 + 12) * 100000.0) / 100000.0;
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v8), CFSTR("latitude"));
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9), CFSTR("longitude"));
    v16 = 0.0;
    v17[0] = 0.0;
    sub_101390CF8(a1, v17, &v16);
    v17[0] = round(v17[0] * 10.0) / 10.0;
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("hunc"));
    v10 = 0.0;
    if (sub_101390BB8(a1))
    {
      v10 = round((*(double *)(a1 + 28) + *(float *)(a1 + 476)) * 10.0) / 10.0;
      v16 = round(v16 * 10.0) / 10.0;
      objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v10), CFSTR("altitude"));
      objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16), CFSTR("vunc"));
    }
    objc_msgSend(v2, "setValue:forKey:", &off_10221BB10, CFSTR("confidence"));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290563;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2050;
      v23 = v7;
      v24 = 2049;
      v25 = v8;
      v26 = 2049;
      v27 = v9;
      v28 = 2049;
      v29 = v10;
      v30 = 2050;
      v31 = v17[0];
      v32 = 2050;
      v33 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 created location dict\", \"timestamp\":%{public}lld, \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"altitude (HAE)\":\"%{private}f\", \"hunc\":\"%{public}f\", \"vunc\":\"%{public}f\"}", buf, 0x4Eu);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2,location is not valid so not creating location dict", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,location is not valid so not creating location dict", v17, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "static NSDictionary *CLEmergencyEED2::createLocationDict(const GNSS::DaemonLocation &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
  return v2;
}

id sub_100A80BF4(uint64_t a1, uint64_t *a2)
{
  double v4;
  double v5;
  id v6;
  uint64_t *v7;
  unint64_t v8;
  void **v9;
  double v10;
  NSArray *v11;
  NSObject *v12;
  uint64_t *v13;
  void **v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t *v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  void **v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  NSArray *v32;

  -[NSDate timeIntervalSince1970](+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 168)), "timeIntervalSince1970");
  v5 = v4;
  sub_1015A2E04(__p, off_102166C90[*(int *)(a1 + 132)]);
  v6 = objc_alloc_init((Class)NSMutableDictionary);
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(v6, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), CFSTR("call_ID"));
  v8 = llround(v5);
  objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v8), CFSTR("session_start_time"));
  if (v18 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  objc_msgSend(v6, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9), CFSTR("medium"));
  if (*(double *)(a1 + 1896) > 0.0)
  {
    -[NSDate timeIntervalSince1970](+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"), "timeIntervalSince1970");
    objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", llround(v10)), CFSTR("session_end_time"));
  }
  v11 = sub_100A82664(a1);
  if (v11)
    objc_msgSend(v6, "setValue:forKey:", v11, CFSTR("capabilities"));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v12 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    v14 = __p;
    if (v18 < 0)
      v14 = (void **)__p[0];
    v15 = *(_QWORD *)(a1 + 1896);
    *(_DWORD *)buf = 68290307;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2081;
    v24 = v13;
    v25 = 2050;
    v26 = v8;
    v27 = 2082;
    v28 = v14;
    v29 = 2050;
    v30 = v15;
    v31 = 2114;
    v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 created LIS dict\", \"phone number\":%{private, location:escape_only}s, \"session start time\":%{public}lld, \"medium\":%{public, location:escape_only}s, \"Call End time Absolute\":\"%{public}.1f\", \"request capabilitites\":%{public, location:escape_only}@}", buf, 0x44u);
  }
  if (v18 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_100A80E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

id sub_100A80EB0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int *v4;
  id v5;
  uint64_t *v6;
  std::string::size_type size;
  char v8;
  std::string *p_dst;
  uint64_t *v10;
  std::string::size_type v11;
  char v12;
  std::string *v13;
  NSString *v14;
  NSString *v15;
  uint8_t *v16;
  NSString *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  std::string *v22;
  const char *v23;
  std::string *v24;
  const char *v25;
  const char *v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  void *v31[2];
  char v32;
  std::string v33;
  void *__p[2];
  char v35;
  std::string __dst;
  uint8_t buf[8];
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  std::string *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  std::string *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;

  v2 = *(_DWORD *)(a1 + 1448);
  *(_DWORD *)buf = v2;
  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    sub_10025FD1C();
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v3 + 48))(v3, buf);
  v5 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v5, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1672)), CFSTR("message_ID"));
  objc_msgSend(v5, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1448)), CFSTR("sim"));
  objc_msgSend(v5, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v4), CFSTR("rat"));
  sub_1015A2E04(__p, "carrier");
  v6 = sub_100A580B8(a1 + 1448, v2, (uint64_t *)__p);
  if (*((char *)v6 + 55) < 0)
    sub_100115CE4(&__dst, (void *)v6[4], v6[5]);
  else
    __dst = *(std::string *)(v6 + 4);
  if (v35 < 0)
    operator delete(__p[0]);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v8 >= 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  objc_msgSend(v5, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst), CFSTR("sim_bundle_id"));
  sub_1015A2E04(v31, "operator");
  v10 = sub_100A580B8(a1 + 1448, v2, (uint64_t *)v31);
  if (*((char *)v10 + 55) < 0)
    sub_100115CE4(&v33, (void *)v10[4], v10[5]);
  else
    v33 = *(std::string *)(v10 + 4);
  if (v32 < 0)
    operator delete(v31[0]);
  v11 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  v12 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v33.__r_.__value_.__l.__size_;
  if (!v11)
  {
    std::string::assign(&v33, "Unavailable");
    v12 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  if (v12 >= 0)
    v13 = &v33;
  else
    v13 = (std::string *)v33.__r_.__value_.__r.__words[0];
  objc_msgSend(v5, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), CFSTR("operator_bundle_id"));
  v14 = sub_100F7F650(v4[8]);
  objc_msgSend(v5, "setValue:forKey:", v14, CFSTR("sim_country"));
  v15 = sub_100F7F650(v4[2]);
  objc_msgSend(v5, "setValue:forKey:", v15, CFSTR("operator_country"));
  sub_100197040();
  sub_10075B048((uint64_t)buf);
  if (v41 >= 0)
    v16 = buf;
  else
    v16 = *(uint8_t **)buf;
  v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16);
  if (SHIBYTE(v41) < 0)
    operator delete(*(void **)buf);
  objc_msgSend(v5, "setValue:forKey:", v17, CFSTR("product_type"));
  sub_100197040();
  v18 = sub_10075A924();
  objc_msgSend(v5, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18), CFSTR("release_type"));
  objc_msgSend(v5, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100F79058(*(unsigned int *)(a1 + 1784), v19)), CFSTR("trigger_type"));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v20 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(_DWORD *)(a1 + 1672);
    LODWORD(v29) = *(_DWORD *)(a1 + 1448);
    HIDWORD(v29) = *v4;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &__dst;
    else
      v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v23 = -[NSString UTF8String](v14, "UTF8String", v29);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v33;
    else
      v24 = (std::string *)v33.__r_.__value_.__r.__words[0];
    v25 = -[NSString UTF8String](v15, "UTF8String");
    v26 = -[NSString UTF8String](v17, "UTF8String");
    v27 = *(_DWORD *)(a1 + 1784);
    *(_DWORD *)buf = 68291587;
    *(_DWORD *)&buf[4] = 0;
    v38 = 2082;
    v39 = "";
    v40 = 1026;
    v41 = v21;
    v42 = 1026;
    v43 = v30;
    v44 = 1026;
    v45 = HIDWORD(v30);
    v46 = 2082;
    v47 = v22;
    v48 = 2082;
    v49 = v23;
    v50 = 2082;
    v51 = v24;
    v52 = 2082;
    v53 = v25;
    v54 = 2081;
    v55 = v26;
    v56 = 1026;
    v57 = v18;
    v58 = 1026;
    v59 = v27;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 created internal dict\", \"message_ID\":%{public}d, \"sim\":%{public}d, \"rat\":%{public}d, \"sim_bundle_id\":%{public, location:escape_only}s, \"sim_country\":%{public, location:escape_only}s, \"operator_bundle_id\":%{public, location:escape_only}s, \"operator_country\":%{public, location:escape_only}s, \"product_type\":%{private, location:escape_only}s, \"release_type\":%{public}d, \"trigger_type\":%{public}d}", buf, 0x62u);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v5;
}

void sub_100A81388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_100A81428(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  id v6;
  void *v7;
  uint64_t *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  __int128 *p_p;
  NSObject *v17;
  int v18;
  __int128 *v19;
  id v20;
  __int128 *v21;
  uint64_t **v22;
  uint64_t **v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  int v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  NSMutableURLRequest *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  char *v60;
  _QWORD v61[5];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[2];
  _BYTE v71[513];
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char v80;
  int v81;
  int v82;
  NSMutableURLRequest *v83;
  __int128 __p;
  uint64_t v85;
  int v86;
  _BYTE buf[48];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[2];
  _BYTE v94[513];
  uint64_t v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103;

  v86 = a2;
  v6 = sub_100A82980(a3);
  if (v6)
  {
    v7 = v6;
    v8 = sub_100A57ECC((int *)(a1 + 1448));
    if (*((char *)v8 + 87) < 0)
    {
      sub_100115CE4(&__p, (void *)v8[8], v8[9]);
    }
    else
    {
      __p = *((_OWORD *)v8 + 4);
      v85 = v8[10];
    }
    if (v85 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    v83 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p)));
    -[NSMutableURLRequest setHTTPMethod:](v83, "setHTTPMethod:", CFSTR("POST"));
    sub_100A82CC0((__SecKey **)a1, v7, (id *)&v83);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v18 = SHIBYTE(v85);
      v19 = (__int128 *)__p;
      v20 = objc_msgSend(v7, "length");
      v21 = &__p;
      *(_DWORD *)buf = 68289539;
      if (v18 < 0)
        v21 = v19;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v21;
      *(_WORD *)&buf[28] = 2049;
      *(_QWORD *)&buf[30] = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,sending LIS POST\", \"URL\":%{private, location:escape_only}s, \"length\":%{private}lld}", buf, 0x26u);
    }
    *(_QWORD *)buf = &v86;
    v22 = sub_1000BC378((uint64_t **)(a1 + 2040), &v86, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v23 = v22;
    v24 = (char *)v22[6];
    v25 = (uint64_t)(v22 + 7);
    v26 = v22[7];
    if (v24 >= (char *)v26)
    {
      v28 = v22[5];
      v29 = (v24 - (char *)v28) >> 2;
      if ((unint64_t)(v29 + 1) >> 62)
        sub_100259694();
      v30 = (char *)v26 - (char *)v28;
      v31 = ((char *)v26 - (char *)v28) >> 1;
      if (v31 <= v29 + 1)
        v31 = v29 + 1;
      if (v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        v33 = (char *)sub_100260634(v25, v32);
        v28 = v23[5];
        v24 = (char *)v23[6];
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[4 * v29];
      v35 = (uint64_t *)&v33[4 * v32];
      *(_DWORD *)v34 = *(_DWORD *)(a1 + 1672);
      v27 = (uint64_t *)(v34 + 4);
      while (v24 != (char *)v28)
      {
        v36 = *((_DWORD *)v24 - 1);
        v24 -= 4;
        *((_DWORD *)v34 - 1) = v36;
        v34 -= 4;
      }
      v23[5] = (uint64_t *)v34;
      v23[6] = v27;
      v23[7] = v35;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_DWORD *)v24 = *(_DWORD *)(a1 + 1672);
      v27 = (uint64_t *)(v24 + 4);
    }
    v23[6] = v27;
    v37 = *(_DWORD *)(a1 + 1672);
    v38 = *(_OWORD *)(a4 + 112);
    v91 = *(_OWORD *)(a4 + 96);
    v92 = v38;
    v93[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)(a4 + 140);
    v39 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a4 + 32);
    v88 = v39;
    v40 = *(_OWORD *)(a4 + 80);
    v89 = *(_OWORD *)(a4 + 64);
    v90 = v40;
    v41 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)buf = *(_OWORD *)a4;
    *(_OWORD *)&buf[16] = v41;
    memcpy(v94, (const void *)(a4 + 160), sizeof(v94));
    v42 = *(_QWORD *)(a4 + 680);
    v95 = v42;
    v43 = *(std::__shared_weak_count **)(a4 + 688);
    v96 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
    v46 = *(_OWORD *)(a4 + 776);
    v101 = *(_OWORD *)(a4 + 760);
    v102 = v46;
    v47 = *(_OWORD *)(a4 + 712);
    v97 = *(_OWORD *)(a4 + 696);
    v98 = v47;
    v48 = *(_OWORD *)(a4 + 744);
    v99 = *(_OWORD *)(a4 + 728);
    v100 = v48;
    v61[1] = 3321888768;
    v62 = *(_OWORD *)buf;
    v63 = *(_OWORD *)&buf[16];
    v66 = v89;
    v67 = v90;
    v64 = *(_OWORD *)&buf[32];
    v65 = v88;
    *(_OWORD *)((char *)v70 + 12) = *(_OWORD *)((char *)v93 + 12);
    v70[0] = v93[0];
    v69 = v92;
    v103 = *(_BYTE *)(a4 + 792);
    v49 = *(void **)(a1 + 1664);
    v50 = v83;
    v61[0] = _NSConcreteStackBlock;
    v61[2] = sub_100A83D4C;
    v61[3] = &unk_1021664D8;
    v61[4] = a1;
    v81 = v86;
    v82 = v37;
    v68 = v91;
    memcpy(v71, v94, sizeof(v71));
    v72 = v42;
    v73 = v43;
    if (v43)
    {
      v51 = (unint64_t *)&v43->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v78 = v101;
    v79 = v102;
    v80 = v103;
    v74 = v97;
    v75 = v98;
    v77 = v100;
    v76 = v99;
    objc_msgSend(objc_msgSend(v49, "uploadTaskWithRequest:fromData:completionHandler:", v50, v7, v61), "resume");
    v53 = v73;
    if (v73)
    {
      v54 = (unint64_t *)&v73->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v96;
    if (v96)
    {
      v57 = (unint64_t *)&v96->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (SHIBYTE(v85) < 0)
      operator delete((void *)__p);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#EED2 failed to serialize LIS dict into JSON", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2 failed to serialize LIS dict into JSON", &__p, 2);
      v60 = (char *)v59;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::postMessage(NumberType, NSDictionary *, const GNSS::DaemonLocation &)", "%s\n", v59);
      if (v60 != buf)
        free(v60);
    }
    v10 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 21);
    v11 = *(_QWORD *)(a1 + 2088);
    if (v11)
    {
      v13 = *(_DWORD *)(v11 + 24);
      v12 = (int *)(v11 + 24);
      v14 = sub_100A86958(v10, v13);
      v15 = *v12;
      if (v14 >= 2)
        v15 = 7;
      *v12 = v15;
    }
  }
}

void sub_100A81A88(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  _Unwind_Resume(a1);
}

void sub_100A81AD8(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  id v8;
  NSNumber *v9;
  uint64_t *v10;
  NSNumber *v11;
  uint64_t *v12;
  NSNumber *v13;
  uint64_t *v14;
  NSNumber *v15;
  uint64_t *v16;
  NSNumber *v17;
  uint64_t *v18;
  NSNumber *v19;
  uint64_t *v20;
  NSNumber *v21;
  uint64_t *v22;
  NSNumber *v23;
  uint64_t *v24;
  double v25;
  NSNumber *v26;
  uint64_t *v27;
  double v28;
  NSNumber *v29;
  uint64_t *v30;
  NSNumber *v31;
  uint64_t *v32;
  NSNumber *v33;
  uint64_t *v34;
  NSNumber *v35;
  uint64_t *v36;
  NSNumber *v37;
  uint64_t *v38;
  NSNumber *v39;
  uint64_t *v40;
  NSNumber *v41;
  uint64_t *v42;
  NSNumber *v43;
  uint64_t *v44;
  NSNumber *v45;
  uint64_t *v46;
  NSNumber *v47;
  uint64_t *v48;
  NSNumber *v49;
  uint64_t *v50;
  NSNumber *v51;
  uint64_t *v52;
  NSNumber *v53;
  uint64_t *v54;
  NSNumber *v55;
  uint64_t *v56;
  NSNumber *v57;
  uint64_t *v58;
  NSNumber *v59;
  uint64_t *v60;
  NSNumber *v61;
  uint64_t *v62;
  NSNumber *v63;
  uint64_t *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint8_t *v69;
  int v70;
  id v71;
  uint8_t buf[4];
  unint64_t v73;

  if (*(_QWORD *)(a1 + 2088))
  {
    v2 = sub_100A6F8CC(a1);
    if (v2 > 2)
    {
      v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100A6F8CC(a1));
      if (byte_1023064D7 >= 0)
        v10 = &qword_1023064C0;
      else
        v10 = (uint64_t *)qword_1023064C0;
      objc_msgSend(v8, "setValue:forKey:", v9, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
      v11 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned int **)(a1 + 2088));
      if (byte_102306597 >= 0)
        v12 = &qword_102306580;
      else
        v12 = (uint64_t *)qword_102306580;
      objc_msgSend(v8, "setValue:forKey:", v11, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
      v13 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 4));
      if (byte_1023065AF >= 0)
        v14 = &qword_102306598;
      else
        v14 = (uint64_t *)qword_102306598;
      objc_msgSend(v8, "setValue:forKey:", v13, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
      v15 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 8));
      if (byte_1023065C7 >= 0)
        v16 = &qword_1023065B0;
      else
        v16 = (uint64_t *)qword_1023065B0;
      objc_msgSend(v8, "setValue:forKey:", v15, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
      v17 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 12));
      if (byte_1023065DF >= 0)
        v18 = &qword_1023065C8;
      else
        v18 = (uint64_t *)qword_1023065C8;
      objc_msgSend(v8, "setValue:forKey:", v17, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
      v19 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 16));
      if (byte_1023065F7 >= 0)
        v20 = &qword_1023065E0;
      else
        v20 = (uint64_t *)qword_1023065E0;
      objc_msgSend(v8, "setValue:forKey:", v19, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
      v21 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 20));
      if (byte_10230660F >= 0)
        v22 = &qword_1023065F8;
      else
        v22 = (uint64_t *)qword_1023065F8;
      objc_msgSend(v8, "setValue:forKey:", v21, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22));
      v23 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 24));
      if (byte_102306627 >= 0)
        v24 = &qword_102306610;
      else
        v24 = (uint64_t *)qword_102306610;
      objc_msgSend(v8, "setValue:forKey:", v23, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24));
      LODWORD(v25) = *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 28);
      v26 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v25);
      if (byte_10230663F >= 0)
        v27 = &qword_102306628;
      else
        v27 = (uint64_t *)qword_102306628;
      objc_msgSend(v8, "setValue:forKey:", v26, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27));
      LODWORD(v28) = *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 32);
      v29 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v28);
      if (byte_102306657 >= 0)
        v30 = &qword_102306640;
      else
        v30 = (uint64_t *)qword_102306640;
      objc_msgSend(v8, "setValue:forKey:", v29, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30));
      v31 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 36));
      if (byte_10230666F >= 0)
        v32 = &qword_102306658;
      else
        v32 = (uint64_t *)qword_102306658;
      objc_msgSend(v8, "setValue:forKey:", v31, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v32));
      v33 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 2088) + 40));
      if (byte_102306687 >= 0)
        v34 = &qword_102306670;
      else
        v34 = (uint64_t *)qword_102306670;
      objc_msgSend(v8, "setValue:forKey:", v33, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34));
      v35 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 44));
      if (byte_10230669F >= 0)
        v36 = &qword_102306688;
      else
        v36 = (uint64_t *)qword_102306688;
      objc_msgSend(v8, "setValue:forKey:", v35, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v36));
      v37 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 52));
      if (byte_1023066B7 >= 0)
        v38 = &qword_1023066A0;
      else
        v38 = (uint64_t *)qword_1023066A0;
      objc_msgSend(v8, "setValue:forKey:", v37, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v38));
      v39 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 56));
      if (byte_1023066CF >= 0)
        v40 = &qword_1023066B8;
      else
        v40 = (uint64_t *)qword_1023066B8;
      objc_msgSend(v8, "setValue:forKey:", v39, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v40));
      v41 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 60));
      if (byte_1023066E7 >= 0)
        v42 = &qword_1023066D0;
      else
        v42 = (uint64_t *)qword_1023066D0;
      objc_msgSend(v8, "setValue:forKey:", v41, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42));
      v43 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 64));
      if (byte_1023066FF >= 0)
        v44 = &qword_1023066E8;
      else
        v44 = (uint64_t *)qword_1023066E8;
      objc_msgSend(v8, "setValue:forKey:", v43, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v44));
      v45 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 72));
      if (byte_102306717 >= 0)
        v46 = &qword_102306700;
      else
        v46 = (uint64_t *)qword_102306700;
      objc_msgSend(v8, "setValue:forKey:", v45, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v46));
      v47 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 80));
      if (byte_10230672F >= 0)
        v48 = &qword_102306718;
      else
        v48 = (uint64_t *)qword_102306718;
      objc_msgSend(v8, "setValue:forKey:", v47, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v48));
      v49 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 84));
      if (byte_102306747 >= 0)
        v50 = &qword_102306730;
      else
        v50 = (uint64_t *)qword_102306730;
      objc_msgSend(v8, "setValue:forKey:", v49, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v50));
      v51 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 88));
      if (byte_10230675F >= 0)
        v52 = &qword_102306748;
      else
        v52 = (uint64_t *)qword_102306748;
      objc_msgSend(v8, "setValue:forKey:", v51, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v52));
      v53 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 92));
      if (byte_102306777 >= 0)
        v54 = &qword_102306760;
      else
        v54 = (uint64_t *)qword_102306760;
      objc_msgSend(v8, "setValue:forKey:", v53, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v54));
      v55 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 96));
      if (byte_10230678F >= 0)
        v56 = &qword_102306778;
      else
        v56 = (uint64_t *)qword_102306778;
      objc_msgSend(v8, "setValue:forKey:", v55, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v56));
      v57 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 100));
      if (byte_1023067A7 >= 0)
        v58 = &qword_102306790;
      else
        v58 = (uint64_t *)qword_102306790;
      objc_msgSend(v8, "setValue:forKey:", v57, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v58));
      v59 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 104));
      if (byte_1023067BF >= 0)
        v60 = &qword_1023067A8;
      else
        v60 = (uint64_t *)qword_1023067A8;
      objc_msgSend(v8, "setValue:forKey:", v59, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v60));
      v61 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 2088) + 108));
      if (byte_1023067D7 >= 0)
        v62 = &qword_1023067C0;
      else
        v62 = (uint64_t *)qword_1023067C0;
      objc_msgSend(v8, "setValue:forKey:", v61, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v62));
      v63 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 2088) + 112));
      if (byte_1023067EF >= 0)
        v64 = &qword_1023067D8;
      else
        v64 = (uint64_t *)qword_1023067D8;
      objc_msgSend(v8, "setValue:forKey:", v63, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v64));
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v65 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v73 = (unint64_t)v8;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDMetricDataToCache,storing the dictionary to cache:%@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v70 = 138412290;
        v71 = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,storeEEDMetricDataToCache,storing the dictionary to cache:%@", &v70, 12);
        v69 = (uint8_t *)v68;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDMetricDataToCache()", "%s\n", v68);
        if (v69 != buf)
          free(v69);
      }
      v66 = sub_1001FD94C();
      sub_10023EC14(v66);
      v67 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 944))(v67);
    }
    else
    {
      v3 = v2;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v73 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2,storeEEDMetricDataToCache,trying to cache metric data in state:%ld,early return", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,storeEEDMetricDataToCache,trying to cache metric data in state:%ld,early return", &v70);
LABEL_19:
        v7 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDMetricDataToCache()", "%s\n", v5);
        if (v7 != buf)
          free(v7);
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EED2,storeEEDMetricDataToCache,nil fEED2Report,early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,storeEEDMetricDataToCache,nil fEED2Report,early return");
      goto LABEL_19;
    }
  }
}

unint64_t sub_100A8262C()
{
  double v0;

  -[NSDate timeIntervalSince1970](+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"), "timeIntervalSince1970");
  return llround(v0);
}

_QWORD *sub_100A82650@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_102166C90[a1]);
}

NSArray *sub_100A82664(uint64_t a1)
{
  void *v2;
  const __CFString *v3;
  const __CFString *v4;
  _QWORD *v5;
  NSArray *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  int v11;
  NSArray *v12;
  uint8_t buf[4];
  NSArray *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];

  if (sub_10075E868()
    && *(_DWORD *)(a1 + 132) == 1
    && *(_BYTE *)(a1 + 1880)
    && *((_BYTE *)sub_100A57ECC((int *)(a1 + 1448)) + 59)
    && (v2 = *(void **)(a1 + 1992)) != 0)
  {
    v17[0] = CFSTR("capability");
    v17[1] = CFSTR("status");
    v18[0] = kRequestTypeVideoStreaming;
    if (objc_msgSend(v2, "newStreamingAllowed"))
      v3 = CFSTR("supported");
    else
      v3 = CFSTR("not_supported");
    v18[1] = v3;
    v19[0] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
    v15[1] = CFSTR("status");
    v16[0] = kRequestTypeMediaUpload;
    v15[0] = CFSTR("capability");
    if (objc_msgSend(*(id *)(a1 + 1992), "newUploadAllowed"))
      v4 = CFSTR("supported");
    else
      v4 = CFSTR("not_supported");
    v16[1] = v4;
    v19[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 2);
    v5 = v19;
  }
  else
  {
    v22[0] = CFSTR("capability");
    v22[1] = CFSTR("status");
    v23[0] = kRequestTypeVideoStreaming;
    v23[1] = CFSTR("not_supported");
    v24[0] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 2);
    v20[0] = CFSTR("capability");
    v20[1] = CFSTR("status");
    v21[0] = kRequestTypeMediaUpload;
    v21[1] = CFSTR("not_supported");
    v24[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 2);
    v5 = v24;
  }
  v6 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v5, 2);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2 getRequestCapabilities,%@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = 138412290;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2 getRequestCapabilities,%@", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "NSArray *CLEmergencyEED2::getRequestCapabilities()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v6;
}

id sub_100A82980(uint64_t a1)
{
  NSData *v1;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  id v6;
  unsigned int v7;
  uint64_t v8;
  id v9;
  unsigned int v10;
  uint8_t *v11;
  id v12;
  int v13;
  id v14;
  __int16 v15;
  unsigned int v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  unsigned int v20;

  if (!a1)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2,getSerializedJsonData,dict is nil", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v13) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,getSerializedJsonData,dict is nil", &v13, 2);
    goto LABEL_21;
  }
  v12 = 0;
  v1 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", a1, 0, &v12);
  if (v1)
    return objc_msgSend(objc_msgSend(objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v1, 4), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\\/"), CFSTR("/")), "dataUsingEncoding:", 4);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    v6 = objc_msgSend(objc_msgSend(v12, "domain"), "UTF8String");
    v7 = objc_msgSend(v12, "code");
    *(_DWORD *)buf = 136446466;
    v18 = v6;
    v19 = 1026;
    v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,getSerializedJsonData,failed to serialize dict into JSON,domain,%{public}s,code,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    v9 = objc_msgSend(objc_msgSend(v12, "domain"), "UTF8String");
    v10 = objc_msgSend(v12, "code");
    v13 = 136446466;
    v14 = v9;
    v15 = 1026;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 16, "#EED2,getSerializedJsonData,failed to serialize dict into JSON,domain,%{public}s,code,%{public}d", &v13, 18);
LABEL_21:
    v11 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "static NSData *CLEmergencyEED2::getSerializedJsonData(NSDictionary *)", "%s\n", v4);
    if (v11 != buf)
      free(v11);
  }
  return 0;
}

void sub_100A82CC0(__SecKey **a1, void *a2, id *a3)
{
  uint64_t v6;
  const __CFString *v7;
  __SecKey *v8;
  CFDataRef Signature;
  id v10;
  NSObject *v11;
  id v12;
  CFDataRef v13;
  id v14;
  NSObject *v15;
  id v16;
  CFDataRef v17;
  id v18;
  NSObject *v19;
  id v20;
  id v21;
  NSObject *v22;
  std::string::size_type size;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  std::string *p_p;
  std::string *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  std::string *p_error;
  std::string *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  int v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  const char *v55;
  char *v56;
  const char *v57;
  char *v58;
  const char *v59;
  char *v60;
  std::string *v61;
  const char *v62;
  char *v63;
  std::string *v64;
  const char *v65;
  char *v66;
  uint64_t v67;
  id v68;
  const char *v69;
  char *v70;
  uint64_t v71;
  id v72;
  const char *v73;
  char *v74;
  uint64_t v75;
  id v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  int v80;
  std::string *v81;
  std::string error;
  std::string __p;
  __int128 buf;
  char v85;

  objc_msgSend(*a3, "setValue:forHTTPHeaderField:", CFSTR("application/json"), CFSTR("content-type"));
  objc_msgSend(*a3, "setValue:forHTTPHeaderField:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(a2, "length")), CFSTR("content-length"));
  objc_msgSend(*a3, "setValue:forHTTPHeaderField:", CFSTR("1"), CFSTR("x-eed-payload-version"));
  if (objc_opt_class(AADeviceInfo, v6))
    v7 = (const __CFString *)+[AADeviceInfo clientInfoHeader](AADeviceInfo, "clientInfoHeader");
  else
    v7 = &stru_1021D8FB8;
  objc_msgSend(*a3, "setValue:forHTTPHeaderField:", v7, CFSTR("x-mme-client-info"));
  v8 = a1[210];
  if (v8 && a1[211] && a1[212])
  {
    error.__r_.__value_.__r.__words[0] = 0;
    Signature = SecKeyCreateSignature(v8, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)a2, (CFErrorRef *)&error);
    v10 = -[__CFData base64EncodedStringWithOptions:](Signature, "base64EncodedStringWithOptions:", 0);

    objc_msgSend(*a3, "setValue:forHTTPHeaderField:", v10, CFSTR("x-eed-baa-signature"));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v12 = objc_msgSend(v10, "UTF8String");
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#EED2,#BAA,added header x-eed-baa-signature : %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v67 = qword_1022A0088;
      v68 = objc_msgSend(v10, "UTF8String");
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v67, 2, "#EED2,#BAA,added header x-eed-baa-signature : %{public}s", &__p, 12);
      v70 = (char *)v69;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v69);
      if (v70 != (char *)&buf)
        free(v70);
    }
    v13 = SecCertificateCopyData(a1[211]);
    v14 = -[__CFData base64EncodedStringWithOptions:](v13, "base64EncodedStringWithOptions:", 0);

    objc_msgSend(*a3, "setValue:forHTTPHeaderField:", v14, CFSTR("x-eed-baa-leaf-cert"));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v16 = objc_msgSend(v14, "UTF8String");
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#EED2,#BAA,added header x-eed-baa-leaf-cert : %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v71 = qword_1022A0088;
      v72 = objc_msgSend(v14, "UTF8String");
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v72;
      LODWORD(v79) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v71, 2, "#EED2,#BAA,added header x-eed-baa-leaf-cert : %{public}s", &__p, v79);
      v74 = (char *)v73;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v73);
      if (v74 != (char *)&buf)
        free(v74);
    }
    v17 = SecCertificateCopyData(a1[212]);
    v18 = -[__CFData base64EncodedStringWithOptions:](v17, "base64EncodedStringWithOptions:", 0);

    objc_msgSend(*a3, "setValue:forHTTPHeaderField:", v18, CFSTR("x-eed-baa-int-cert-1"));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v20 = objc_msgSend(v18, "UTF8String");
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#EED2,#BAA,added header x-eed-baa-int-cert-1 : %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v75 = qword_1022A0088;
      v76 = objc_msgSend(v18, "UTF8String");
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v76;
      LODWORD(v79) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v75, 2, "#EED2,#BAA,added header x-eed-baa-int-cert-1 : %{public}s", &__p, v79);
      v78 = (char *)v77;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v77);
      if (v78 != (char *)&buf)
        free(v78);
    }
    v21 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", a2, 4);
    sub_1015A2E04(&buf, "#EED2,#BAA,POST body");
    sub_1015A2E04(&__p, (char *)objc_msgSend(v21, "UTF8String"));
    sub_1013900C0((std::string::size_type)&buf, (std::string::size_type)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v85 < 0)
      operator delete((void *)buf);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v22 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#EED2,#BAA,addHeadersToUrlRequest,cert not available", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,#BAA,addHeadersToUrlRequest,cert not available", &__p, 2);
      v56 = (char *)v55;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v55);
      if (v56 != (char *)&buf)
        free(v56);
    }
  }
  memset(&__p, 0, sizeof(__p));
  sub_1001E4804(&buf);
  if (sub_1000BCB64(buf, "EED2EnvHeader", &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v24 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (!*((_QWORD *)&buf + 1))
      goto LABEL_39;
    v25 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if (!size)
        goto LABEL_57;
    }
    else
    {
LABEL_39:
      if (!size)
        goto LABEL_57;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v27 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136380675;
      *(_QWORD *)((char *)&buf + 4) = p_p;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,sending environment override header for %{private}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v61 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v61 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(error.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)error.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
      LODWORD(v79) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2,sending environment override header for %{private}s", &error, v79);
      v63 = (char *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v62);
      if (v63 != (char *)&buf)
        free(v63);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &__p;
    else
      v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(*a3, "setValue:forHTTPHeaderField:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29), CFSTR("x-eed-environment"));
  }
  else
  {
    v30 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
LABEL_57:
  memset(&error, 0, sizeof(error));
  sub_1001E4804(&buf);
  if (sub_1000BCB64(buf, "EEDDemoHeader", &error))
  {
    if ((error.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(error.__r_.__value_.__r.__words[2]);
    else
      v33 = error.__r_.__value_.__l.__size_;
    v34 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (!*((_QWORD *)&buf + 1))
      goto LABEL_65;
    v35 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (!v33)
        goto LABEL_83;
    }
    else
    {
LABEL_65:
      if (!v33)
        goto LABEL_83;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v37 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      p_error = &error;
      if ((error.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_error = (std::string *)error.__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136380675;
      *(_QWORD *)((char *)&buf + 4) = p_error;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,sending demo header for %{private}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v64 = &error;
      if ((error.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v64 = (std::string *)error.__r_.__value_.__r.__words[0];
      v80 = 136380675;
      v81 = v64;
      LODWORD(v79) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2,sending demo header for %{private}s", &v80, v79);
      v66 = (char *)v65;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v65);
      if (v66 != (char *)&buf)
        free(v66);
    }
    if ((error.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &error;
    else
      v39 = (std::string *)error.__r_.__value_.__r.__words[0];
    objc_msgSend(*a3, "setValue:forHTTPHeaderField:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v39), CFSTR("x-eed-demo"));
  }
  else
  {
    v40 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
LABEL_83:
  sub_1001E4804(&buf);
  LOBYTE(v80) = 0;
  v43 = sub_1001E4874(buf, "EEDControlEnable", (BOOL *)&v80);
  if ((_BYTE)v80)
    v44 = v43;
  else
    v44 = 0;
  v45 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_90;
  v46 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if (!v44)
      goto LABEL_97;
  }
  else
  {
LABEL_90:
    if (!v44)
      goto LABEL_97;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v48 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#EED2,sending x-eed-control-enabled as true", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v80) = 0;
    LODWORD(v79) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,sending x-eed-control-enabled as true", &v80, v79);
    v58 = (char *)v57;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v57);
    if (v58 != (char *)&buf)
      free(v58);
  }
  objc_msgSend(*a3, "setValue:forHTTPHeaderField:", CFSTR("true"), CFSTR("x-eed-control-enabled"));
LABEL_97:
  sub_1001E4804(&buf);
  LOBYTE(v80) = 0;
  v49 = sub_1001E4874(buf, "EEDTestApplicationEnable", (BOOL *)&v80);
  if ((_BYTE)v80)
    v50 = v49;
  else
    v50 = 0;
  v51 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_104;
  v52 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if (!v50)
      goto LABEL_111;
  }
  else
  {
LABEL_104:
    if (!v50)
      goto LABEL_111;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v54 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,sending X-Apple-Test-Application as true", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v80) = 0;
    LODWORD(v79) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2,sending X-Apple-Test-Application as true", &v80, v79);
    v60 = (char *)v59;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v59);
    if (v60 != (char *)&buf)
      free(v60);
  }
  objc_msgSend(*a3, "setValue:forHTTPHeaderField:", CFSTR("true"), CFSTR("X-Apple-Test-Application"));
LABEL_111:
  if (SHIBYTE(error.__r_.__value_.__r.__words[2]) < 0)
    operator delete(error.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100A83C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_100A83D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[7];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  _BYTE v28[513];
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = objc_msgSend(objc_msgSend(*(id *)(v7 + 8), "silo"), "queue");
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3321888768;
  v18[2] = sub_100A83ED0;
  v18[3] = &unk_1021664A8;
  v18[6] = v7;
  v38 = *(_QWORD *)(a1 + 840);
  v25 = *(_OWORD *)(a1 + 136);
  v26 = *(_OWORD *)(a1 + 152);
  v27[0] = *(_OWORD *)(a1 + 168);
  *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)(a1 + 180);
  v21 = *(_OWORD *)(a1 + 72);
  v22 = *(_OWORD *)(a1 + 88);
  v23 = *(_OWORD *)(a1 + 104);
  v24 = *(_OWORD *)(a1 + 120);
  v19 = *(_OWORD *)(a1 + 40);
  v20 = *(_OWORD *)(a1 + 56);
  memcpy(v28, (const void *)(a1 + 200), sizeof(v28));
  v29 = *(_QWORD *)(a1 + 720);
  v9 = *(std::__shared_weak_count **)(a1 + 728);
  v30 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_OWORD *)(a1 + 816);
  v35 = *(_OWORD *)(a1 + 800);
  v36 = v12;
  v37 = *(_BYTE *)(a1 + 832);
  v13 = *(_OWORD *)(a1 + 752);
  v31 = *(_OWORD *)(a1 + 736);
  v32 = v13;
  v14 = *(_OWORD *)(a1 + 784);
  v33 = *(_OWORD *)(a1 + 768);
  v34 = v14;
  v18[4] = a3;
  v18[5] = a4;
  dispatch_async(v8, v18);
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100A83ED0(uint64_t a1)
{
  sub_100A83EEC(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 856), *(_DWORD *)(a1 + 860), a1 + 56, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100A83EEC(uint64_t a1, int a2, __int32 a3, uint64_t a4, void *a5, void *a6)
{
  NSObject *v11;
  char *v12;
  void **v13;
  id v14;
  id v15;
  id v16;
  id v17;
  __int32 *v18;
  uint64_t *v19;
  __int32 *v20;
  uint64_t **v21;
  uint64_t *v22;
  int64_t v23;
  int v24;
  NSObject *v25;
  char *v26;
  int v27;
  void **v28;
  unsigned int v29;
  void **v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unsigned int v35;
  int v36;
  int v37;
  double v38;
  uint64_t v39;
  float v40;
  double v41;
  int v42;
  uint64_t i;
  void *v44;
  double v45;
  NSObject *v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  char *v50;
  void **v51;
  unsigned int v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  NSObject *v61;
  char *v62;
  int v63;
  void **v64;
  unsigned int v65;
  void **v66;
  unsigned int v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float v73;
  BOOL v74;
  uint64_t v75;
  float v76;
  double v77;
  int v78;
  uint64_t j;
  void *v80;
  uint64_t v81;
  char *v82;
  void *v83;
  unsigned int v84;
  id v85;
  id v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  int v91;
  void **v92;
  unsigned int v93;
  void **v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  int v99;
  void **v100;
  unsigned int v101;
  void **v102;
  char *v103;
  char *v104;
  const char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v109[3];
  uint64_t v110[3];
  double v111;
  double v112;
  void *v113;
  char v114;
  char v115;
  int v116;
  void *__p[3];
  __int16 v118;
  id v119;
  __int16 v120;
  id v121;
  _BYTE buf[18];
  __int16 v123;
  __int128 v124;
  id v125;
  __int16 v126;
  id v127;
  __int16 v128;
  id v129;
  __int16 v130;
  _BYTE v131[10];
  int v132;
  int v133;
  int v134;
  int v135;
  float v136;
  int v137;
  uint64_t v138;

  v116 = a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v11 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v12 = "Companion";
    else
      v12 = "Native";
    v13 = __p;
    sub_1015A2E04(__p, v12);
    if (SHIBYTE(__p[2]) < 0)
      v13 = (void **)__p[0];
    v14 = objc_msgSend(objc_msgSend(a5, "valueForHTTPHeaderField:", CFSTR("X-Responding-Instance")), "UTF8String");
    v15 = objc_msgSend(objc_msgSend(a5, "valueForHTTPHeaderField:", CFSTR("X-Apple-Request-UUID")), "UTF8String");
    v16 = objc_msgSend(objc_msgSend(a5, "valueForHTTPHeaderField:", CFSTR("X-Apple-Jingle-Correlation-Key")), "UTF8String");
    v17 = objc_msgSend(objc_msgSend(a5, "valueForHTTPHeaderField:", CFSTR("Via")), "UTF8String");
    *(_DWORD *)buf = 68290563;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v123 = 2082;
    *(_QWORD *)&v124 = v13;
    WORD4(v124) = 1026;
    *(_DWORD *)((char *)&v124 + 10) = a3;
    HIWORD(v124) = 2081;
    v125 = v14;
    v126 = 2081;
    v127 = v15;
    v128 = 2081;
    v129 = v16;
    v130 = 2081;
    *(_QWORD *)v131 = v17;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#LIS,handleHttpsResponse,response headers\", \"numberType\":%{public, location:escape_only}s, \"message\":%{public}d, \"responding instance\":%{private, location:escape_only}s, \"UUID\":%{private, location:escape_only}s, \"jingle corr key\":%{private, location:escape_only}s, \"via\":%{private, location:escape_only}s}", buf, 0x4Au);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  *(_QWORD *)buf = &v116;
  v18 = (__int32 *)sub_1000BC378((uint64_t **)(a1 + 2040), &v116, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
  *(_QWORD *)buf = &v116;
  v19 = sub_1000BC378((uint64_t **)(a1 + 2040), &v116, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[6];
  v20 = wmemchr(v18, a3, ((char *)v19 - (char *)v18) >> 2);
  if (v20)
    v19 = (uint64_t *)v20;
  *(_QWORD *)buf = &v116;
  if (v19 != sub_1000BC378((uint64_t **)(a1 + 2040), &v116, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[6])
  {
    *(_QWORD *)buf = &v116;
    v21 = sub_1000BC378((uint64_t **)(a1 + 2040), &v116, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v22 = v21[6];
    v23 = (char *)v22 - ((char *)v19 + 4);
    if (v22 != (uint64_t *)((char *)v19 + 4))
      memmove(v19, (char *)v19 + 4, (char *)v22 - ((char *)v19 + 4));
    v21[6] = (uint64_t *)((char *)v19 + v23);
    v24 = sub_100182290(a4);
    if (!a5)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v49 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v50 = v116 ? "Companion" : "Native";
        sub_1015A2E04(__p, v50);
        v51 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        v52 = objc_msgSend(a6, "code");
        v53 = objc_msgSend(a6, "domain");
        v54 = objc_msgSend(a6, "localizedDescription");
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v51;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = a3;
        v123 = 1026;
        LODWORD(v124) = v52;
        WORD2(v124) = 2114;
        *(_QWORD *)((char *)&v124 + 6) = v53;
        HIWORD(v124) = 2114;
        v125 = v54;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#EED2 POST for %{public}s number message %{public}d failed with error code,%{public}d,domain,%{public}@,reason,%{public}@", buf, 0x2Cu);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v81 = qword_1022A0088;
        if (v116)
          v82 = "Companion";
        else
          v82 = "Native";
        sub_1015A2E04(&v113, v82);
        if (v115 >= 0)
          v83 = &v113;
        else
          v83 = v113;
        v84 = objc_msgSend(a6, "code");
        v85 = objc_msgSend(a6, "domain");
        v86 = objc_msgSend(a6, "localizedDescription");
        LODWORD(__p[0]) = 136447234;
        *(void **)((char *)__p + 4) = v83;
        WORD2(__p[1]) = 1026;
        *(_DWORD *)((char *)&__p[1] + 6) = a3;
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = v84;
        v118 = 2114;
        v119 = v85;
        v120 = 2114;
        v121 = v86;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v81, 0, "#EED2 POST for %{public}s number message %{public}d failed with error code,%{public}d,domain,%{public}@,reason,%{public}@", __p, 44);
        v88 = v87;
        if (v115 < 0)
          operator delete(v113);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v88);
        if (v88 != buf)
          free(v88);
      }
      *(_DWORD *)(a1 + 428) = objc_msgSend(a6, "code");
      if (*(_QWORD *)(a1 + 2088))
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 36) = objc_msgSend(0, "statusCode");
      if (v24)
      {
        v55 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 16);
        ++*(_DWORD *)(a1 + 424);
        v56 = *(_QWORD *)(a1 + 2088);
        if (v56)
        {
          v58 = *(_DWORD *)(v56 + 24);
          v57 = (int *)(v56 + 24);
          v59 = sub_100A86958(v55, v58);
          v60 = *v57;
          if (v59 >= 4)
            v60 = 6;
          *v57 = v60;
          ++*(_DWORD *)(*(_QWORD *)(a1 + 2088) + 4);
        }
      }
      goto LABEL_104;
    }
    if (objc_msgSend(a5, "statusCode") == (id)200)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v25 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (v116)
          v26 = "Companion";
        else
          v26 = "Native";
        sub_1015A2E04(__p, v26);
        v27 = SHIBYTE(__p[2]);
        v28 = (void **)__p[0];
        v29 = objc_msgSend(a5, "statusCode");
        v30 = __p;
        *(_DWORD *)buf = 136446722;
        if (v27 < 0)
          v30 = v28;
        *(_QWORD *)&buf[4] = v30;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = a3;
        v123 = 1026;
        LODWORD(v124) = v29;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#EED2 POST for %{public}s number message %{public}d succeeded with response code %{public}d", buf, 0x18u);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v89 = qword_1022A0088;
        if (v116)
          v90 = "Companion";
        else
          v90 = "Native";
        sub_1015A2E04(&v113, v90);
        v91 = v115;
        v92 = (void **)v113;
        v93 = objc_msgSend(a5, "statusCode");
        v94 = &v113;
        LODWORD(__p[0]) = 136446722;
        if (v91 < 0)
          v94 = v92;
        *(void **)((char *)__p + 4) = v94;
        WORD2(__p[1]) = 1026;
        *(_DWORD *)((char *)&__p[1] + 6) = a3;
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = v93;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v89, 0, "#EED2 POST for %{public}s number message %{public}d succeeded with response code %{public}d", __p, 24);
        v96 = v95;
        if (v115 < 0)
          operator delete(v113);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v96);
        if (v96 != buf)
          free(v96);
      }
      if (!v24)
        goto LABEL_104;
      v31 = sub_1001FCBB4();
      v32 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 0);
      ++*(_DWORD *)(a1 + 420);
      v33 = *(_QWORD *)(a1 + 2088);
      if (v33)
      {
        v35 = *(_DWORD *)(v33 + 24);
        v34 = (int *)(v33 + 24);
        v36 = sub_100A86958(v32, v35);
        v37 = *v34;
        if (v36)
          v37 = 0;
        *v34 = v37;
        ++**(_DWORD **)(a1 + 2088);
      }
      v111 = 0.0;
      v112 = 0.0;
      sub_101390CF8(a4, &v112, &v111);
      v38 = *(double *)(a1 + 248);
      if (v38 < 0.0 || v38 >= v112)
      {
        *(double *)(a1 + 248) = v112;
        sub_1017E2E94(a1 + 192, a4);
        if (sub_101390BB8(a4))
          *(double *)(a1 + 256) = v111;
      }
      v39 = *(_QWORD *)(a1 + 2088);
      if (!v39)
        goto LABEL_104;
      v40 = *(float *)(v39 + 28);
      if (v40 < 0.0)
      {
        v41 = v31 - *(double *)(a1 + 176);
        *(_DWORD *)buf = 101;
        *(_DWORD *)&buf[8] = (int)v41;
        v42 = *(_DWORD *)(a4 + 96);
        HIDWORD(v124) = 0;
        HIDWORD(v125) = 102;
        *(_DWORD *)((char *)&v127 + 2) = v42;
        *(_DWORD *)&v131[6] = 0;
        sub_100A737CC(__p, (uint64_t)buf, 2uLL);
        for (i = 48; i != -32; i -= 40)
          sub_1001F8644((uint64_t)&buf[i]);
        v44 = *(void **)(a1 + 2096);
        memset(v110, 0, sizeof(v110));
        sub_1006AB68C(v110, (uint64_t)__p[0], (uint64_t)__p[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        objc_msgSend(v44, "setMeasurements:", sub_1006A7590(v110));
        *(_QWORD *)buf = v110;
        sub_1006AB5A0((void ***)buf);
        *(_QWORD *)buf = __p;
        sub_1006AB5A0((void ***)buf);
        v45 = v112;
        v39 = *(_QWORD *)(a1 + 2088);
LABEL_98:
        v73 = v45;
        *(float *)(v39 + 28) = v73;
        v74 = sub_101390BB8(a4);
        v75 = *(_QWORD *)(a1 + 2088);
        if (v74)
        {
          v76 = v111;
          *(float *)(v75 + 32) = v76;
        }
        else
        {
          v76 = *(float *)(v75 + 32);
        }
        v77 = v31 - *(double *)(a1 + 176);
        *(_DWORD *)buf = 103;
        *(_DWORD *)&buf[8] = (int)v77;
        v78 = *(_DWORD *)(a4 + 96);
        HIDWORD(v124) = 0;
        HIDWORD(v125) = 104;
        *(_DWORD *)((char *)&v127 + 2) = v78;
        *(_DWORD *)&v131[6] = 0;
        LODWORD(v77) = *(_DWORD *)(v75 + 28);
        v132 = 105;
        v133 = LODWORD(v77);
        v134 = 4;
        v135 = 106;
        v136 = v76;
        v137 = 4;
        memset(__p, 0, sizeof(__p));
        v113 = __p;
        v114 = 0;
        __p[0] = operator new(0xA0uLL);
        __p[1] = __p[0];
        __p[2] = (char *)__p[0] + 160;
        __p[1] = (void *)sub_1006AB40C((uint64_t)&__p[2], (uint64_t)buf, (uint64_t)&v138, (uint64_t)__p[0]);
        for (j = 128; j != -32; j -= 40)
          sub_1001F8644((uint64_t)&buf[j]);
        v80 = *(void **)(a1 + 2096);
        memset(v109, 0, sizeof(v109));
        sub_1006AB68C(v109, (uint64_t)__p[0], (uint64_t)__p[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        objc_msgSend(v80, "setMeasurements:", sub_1006A7590(v109));
        *(_QWORD *)buf = v109;
        sub_1006AB5A0((void ***)buf);
        *(_QWORD *)buf = __p;
        sub_1006AB5A0((void ***)buf);
        goto LABEL_104;
      }
      v72 = v40;
      v45 = v112;
      if (v112 < v72)
        goto LABEL_98;
LABEL_104:
      sub_100A81AD8(a1);
      sub_100A63CC8(a1 + 1536, 13);
      return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v61 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (v116)
        v62 = "Companion";
      else
        v62 = "Native";
      sub_1015A2E04(__p, v62);
      v63 = SHIBYTE(__p[2]);
      v64 = (void **)__p[0];
      v65 = objc_msgSend(a5, "statusCode");
      v66 = __p;
      *(_DWORD *)buf = 136446722;
      if (v63 < 0)
        v66 = v64;
      *(_QWORD *)&buf[4] = v66;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = a3;
      v123 = 1026;
      LODWORD(v124) = v65;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#EED2 POST for %{public}s number message %{public}d failed with response code %{public}d", buf, 0x18u);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v97 = qword_1022A0088;
      if (v116)
        v98 = "Companion";
      else
        v98 = "Native";
      sub_1015A2E04(&v113, v98);
      v99 = v115;
      v100 = (void **)v113;
      v101 = objc_msgSend(a5, "statusCode");
      v102 = &v113;
      LODWORD(__p[0]) = 136446722;
      if (v99 < 0)
        v102 = v100;
      *(void **)((char *)__p + 4) = v102;
      WORD2(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 6) = a3;
      WORD1(__p[2]) = 1026;
      HIDWORD(__p[2]) = v101;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v97, 0, "#EED2 POST for %{public}s number message %{public}d failed with response code %{public}d", __p, 24);
      v104 = v103;
      if (v115 < 0)
        operator delete(v113);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v104);
      if (v104 != buf)
        free(v104);
    }
    *(_DWORD *)(a1 + 428) = objc_msgSend(a5, "statusCode");
    if (*(_QWORD *)(a1 + 2088))
    {
      v67 = objc_msgSend(a5, "statusCode");
      v68 = *(_QWORD *)(a1 + 2088);
      *(_DWORD *)(v68 + 36) = v67;
      if ((v24 & 1) == 0)
        goto LABEL_104;
      ++*(_DWORD *)(a1 + 424);
      ++*(_DWORD *)(v68 + 4);
    }
    else
    {
      if (!v24)
        goto LABEL_104;
      ++*(_DWORD *)(a1 + 424);
    }
    if (objc_msgSend(a5, "statusCode") == (id)416)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v69 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "#EED2 POST was determined to be outside coverage area", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(__p[0]) = 0;
        LODWORD(v107) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2 POST was determined to be outside coverage area", __p, v107);
        v106 = (char *)v105;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v105);
        if (v106 != buf)
          free(v106);
      }
      sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 31);
      v70 = *(_QWORD *)(a1 + 2088);
      if (v70)
        sub_100A72390(a1, (unsigned int *)(v70 + 24), 9u);
    }
    else
    {
      sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 16);
      v71 = *(_QWORD *)(a1 + 2088);
      if (v71)
        sub_100A72390(a1, (unsigned int *)(v71 + 24), 6u);
    }
    goto LABEL_104;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v46 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#EED2, messageID is not part of pending messageID!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2, messageID is not part of pending messageID!", __p, 2);
    v48 = (char *)v47;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v47);
    if (v48 != buf)
      free(v48);
  }
}

void sub_100A84F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_100A84FEC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  __int128 v17;
  __int128 v18;

  v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  v8 = *(_OWORD *)(a2 + 152);
  v9 = *(_OWORD *)(a2 + 168);
  v10 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  memcpy((void *)(a1 + 216), (const void *)(a2 + 216), 0x201uLL);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  v11 = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 744) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_OWORD *)(a2 + 752);
  v15 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v15;
  *(_OWORD *)(a1 + 752) = v14;
  result = *(__n128 *)(a2 + 800);
  v17 = *(_OWORD *)(a2 + 816);
  v18 = *(_OWORD *)(a2 + 832);
  *(_BYTE *)(a1 + 848) = *(_BYTE *)(a2 + 848);
  *(_OWORD *)(a1 + 816) = v17;
  *(_OWORD *)(a1 + 832) = v18;
  *(__n128 *)(a1 + 800) = result;
  return result;
}

uint64_t sub_100A850BC(uint64_t a1)
{
  return sub_100261F44(a1 + 736);
}

__n128 sub_100A850C4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  __int128 v17;
  __int128 v18;

  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  v8 = *(_OWORD *)(a2 + 136);
  v9 = *(_OWORD *)(a2 + 152);
  v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  memcpy((void *)(a1 + 200), (const void *)(a2 + 200), 0x201uLL);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  v11 = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 728) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_OWORD *)(a2 + 736);
  v15 = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 768) = v15;
  *(_OWORD *)(a1 + 736) = v14;
  result = *(__n128 *)(a2 + 784);
  v17 = *(_OWORD *)(a2 + 800);
  v18 = *(_OWORD *)(a2 + 816);
  *(_BYTE *)(a1 + 832) = *(_BYTE *)(a2 + 832);
  *(_OWORD *)(a1 + 800) = v17;
  *(_OWORD *)(a1 + 816) = v18;
  *(__n128 *)(a1 + 784) = result;
  return result;
}

uint64_t sub_100A85194(uint64_t a1)
{
  return sub_100261F44(a1 + 720);
}

void sub_100A8519C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  _QWORD block[7];

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend(objc_msgSend(*(id *)(v5 + 8), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A85218;
  block[3] = &unk_102161180;
  block[5] = a3;
  block[6] = v5;
  block[4] = a2;
  dispatch_async(v6, block);
}

uint64_t sub_100A85218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(v1 + 2032) = 0;
  *(_BYTE *)(v1 + 2064) = 1;
  if (*(_QWORD *)(v1 + 1768) && sub_1012C61C0(*(_QWORD *)(v1 + 1768), *(void **)(a1 + 32), *(void **)(a1 + 40)))
    v2 = 9;
  else
    v2 = 10;
  return sub_100A63CC8(v1 + 1536, v2);
}

uint64_t sub_100A85268(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v3 + 2065) = 1;
  v4 = *(_QWORD *)(v3 + 1768);
  if (v4 && sub_1012C6934(v4, a2, a3))
    v5 = 9;
  else
    v5 = 10;
  return sub_100A63CC8(v3 + 1536, v5);
}

void sub_100A852AC(uint64_t a1, int a2, void *a3, void *a4)
{
  NSObject *v8;
  char *v9;
  _BYTE *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  int v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  NSObject *v30;
  char *v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  id v35;
  uint64_t v36;
  char *v37;
  _BYTE *v38;
  unsigned int v39;
  id v40;
  id v41;
  char *v42;
  NSObject *v43;
  char *v44;
  int v45;
  _BYTE *v46;
  unsigned int v47;
  _BYTE *v48;
  NSObject *v49;
  uint64_t v50;
  char *v51;
  int v52;
  _BYTE *v53;
  unsigned int v54;
  _BYTE *v55;
  char *v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  _BYTE v60[12];
  __int16 v61;
  unsigned int v62;
  char v63;
  _BYTE __p[12];
  __int16 v65;
  unsigned int v66;
  __int16 v67;
  id v68;
  __int16 v69;
  id v70;
  _BYTE buf[18];
  __int16 v72;
  _BYTE *v73;
  __int16 v74;
  id v75;
  __int16 v76;
  id v77;
  __int16 v78;
  id v79;
  __int16 v80;
  id v81;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a2 ? "Companion" : "Native";
    sub_1015A2E04(__p, v9);
    v10 = SBYTE3(v68) >= 0 ? __p : *(_BYTE **)__p;
    v11 = objc_msgSend(objc_msgSend(a3, "valueForHTTPHeaderField:", CFSTR("X-Responding-Instance")), "UTF8String");
    v12 = objc_msgSend(objc_msgSend(a3, "valueForHTTPHeaderField:", CFSTR("X-Apple-Request-UUID")), "UTF8String");
    v13 = objc_msgSend(objc_msgSend(a3, "valueForHTTPHeaderField:", CFSTR("X-Apple-Jingle-Correlation-Key")), "UTF8String");
    v14 = objc_msgSend(objc_msgSend(a3, "valueForHTTPHeaderField:", CFSTR("Via")), "UTF8String");
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v72 = 2082;
    v73 = v10;
    v74 = 2081;
    v75 = v11;
    v76 = 2081;
    v77 = v12;
    v78 = 2081;
    v79 = v13;
    v80 = 2081;
    v81 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#ADR,handleAdrResponse,response headers\", \"numberType\":%{public, location:escape_only}s, \"responding instance\":%{private, location:escape_only}s, \"UUID\":%{private, location:escape_only}s, \"jingle corr key\":%{private, location:escape_only}s, \"via\":%{private, location:escape_only}s}", buf, 0x44u);
    if (SBYTE3(v68) < 0)
      operator delete(*(void **)__p);
  }
  if (a3)
  {
    if (objc_msgSend(a3, "statusCode") != (id)200)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v43 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (a2)
          v44 = "Companion";
        else
          v44 = "Native";
        sub_1015A2E04(buf, v44);
        v45 = SBYTE3(v73);
        v46 = *(_BYTE **)buf;
        v47 = objc_msgSend(a3, "statusCode");
        v48 = buf;
        if (v45 < 0)
          v48 = v46;
        *(_DWORD *)__p = 136446466;
        *(_QWORD *)&__p[4] = v48;
        v65 = 1026;
        v66 = v47;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#EED2,ADR POST for %{public}s number failed with response code %{public}d", __p, 0x12u);
        if (SBYTE3(v73) < 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v50 = qword_1022A0088;
        if (a2)
          v51 = "Companion";
        else
          v51 = "Native";
        sub_1015A2E04(__p, v51);
        v52 = SBYTE3(v68);
        v53 = *(_BYTE **)__p;
        v54 = objc_msgSend(a3, "statusCode");
        v55 = __p;
        if (v52 < 0)
          v55 = v53;
        *(_DWORD *)v60 = 136446466;
        *(_QWORD *)&v60[4] = v55;
        v61 = 1026;
        v62 = v54;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 0, "#EED2,ADR POST for %{public}s number failed with response code %{public}d", v60, 18);
        v57 = v56;
        if (SBYTE3(v68) < 0)
          operator delete(*(void **)__p);
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAdrResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v57);
        if (v57 != buf)
          free(v57);
      }
      if (objc_msgSend(a3, "statusCode") == (id)416)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v49 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#EED2,ADR POST was determined to be outside coverage area", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          *(_WORD *)__p = 0;
          LODWORD(v59) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,ADR POST was determined to be outside coverage area", __p, v59);
          v29 = (char *)v58;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAdrResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v58);
          if (v29 != buf)
            goto LABEL_60;
        }
      }
      goto LABEL_78;
    }
    ++*(_DWORD *)(a1 + 1288);
    v15 = *(_QWORD *)(a1 + 2088);
    if (v15)
      ++*(_DWORD *)(v15 + 20);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v16 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
        v17 = "Companion";
      else
        v17 = "Native";
      sub_1015A2E04(buf, v17);
      v18 = SBYTE3(v73);
      v19 = *(_BYTE **)buf;
      v20 = objc_msgSend(a3, "statusCode");
      v21 = buf;
      if (v18 < 0)
        v21 = v19;
      *(_DWORD *)__p = 136446466;
      *(_QWORD *)&__p[4] = v21;
      v65 = 1026;
      v66 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2,ADR POST for %{public}s number succeeded with response code %{public}d", __p, 0x12u);
      if (SBYTE3(v73) < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_78;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v22 = qword_1022A0088;
    if (a2)
      v23 = "Companion";
    else
      v23 = "Native";
    sub_1015A2E04(__p, v23);
    v24 = SBYTE3(v68);
    v25 = *(_BYTE **)__p;
    v26 = objc_msgSend(a3, "statusCode");
    v27 = __p;
    if (v24 < 0)
      v27 = v25;
    *(_DWORD *)v60 = 136446466;
    *(_QWORD *)&v60[4] = v27;
    v61 = 1026;
    v62 = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#EED2,ADR POST for %{public}s number succeeded with response code %{public}d", v60, 18);
    v29 = v28;
    if (SBYTE3(v68) < 0)
      operator delete(*(void **)__p);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v30 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v31 = a2 ? "Companion" : "Native";
      sub_1015A2E04(__p, v31);
      v32 = SBYTE3(v68) >= 0 ? __p : *(_BYTE **)__p;
      v33 = objc_msgSend(a4, "code");
      v34 = objc_msgSend(a4, "domain");
      v35 = objc_msgSend(a4, "localizedDescription");
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v33;
      v72 = 2114;
      v73 = v34;
      v74 = 2114;
      v75 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#EED2,ADR POST for %{public}s number failed with error code,%{public}d,domain,%{public}@,reason,%{public}@", buf, 0x26u);
      if (SBYTE3(v68) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_78;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v36 = qword_1022A0088;
    if (a2)
      v37 = "Companion";
    else
      v37 = "Native";
    sub_1015A2E04(v60, v37);
    if (v63 >= 0)
      v38 = v60;
    else
      v38 = *(_BYTE **)v60;
    v39 = objc_msgSend(a4, "code");
    v40 = objc_msgSend(a4, "domain");
    v41 = objc_msgSend(a4, "localizedDescription");
    *(_DWORD *)__p = 136446978;
    *(_QWORD *)&__p[4] = v38;
    v65 = 1026;
    v66 = v39;
    v67 = 2114;
    v68 = v40;
    v69 = 2114;
    v70 = v41;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 0, "#EED2,ADR POST for %{public}s number failed with error code,%{public}d,domain,%{public}@,reason,%{public}@", __p, 38);
    v29 = v42;
    if (v63 < 0)
      operator delete(*(void **)v60);
  }
  sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAdrResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v29);
  if (v29 != buf)
LABEL_60:
    free(v29);
LABEL_78:
  sub_100A81AD8(a1);
}

void sub_100A85C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100A85C6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  void **v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;
  __int128 __dst;
  uint64_t v16;

  v2 = a1 + 1448;
  sub_1015A2E04(__p, "carrier");
  v3 = sub_100A580B8(v2, 0, (uint64_t *)__p);
  if (*((char *)v3 + 31) < 0)
  {
    sub_100115CE4(&__dst, (void *)v3[1], v3[2]);
  }
  else
  {
    __dst = *(_OWORD *)(v3 + 1);
    v16 = v3[3];
  }
  v4 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = __dst;
  *(_QWORD *)(a1 + 1168) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(__dst) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(v11, "carrier");
  v5 = sub_100A580B8(v2, 0, (uint64_t *)v11);
  if (*((char *)v5 + 55) < 0)
  {
    sub_100115CE4(&__dst, (void *)v5[4], v5[5]);
  }
  else
  {
    __dst = *((_OWORD *)v5 + 2);
    v16 = v5[6];
  }
  v7 = (void **)(a1 + 1176);
  if (*(char *)(a1 + 1199) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = __dst;
  *(_QWORD *)(a1 + 1192) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(__dst) = 0;
  if (v12 < 0)
    operator delete(v11[0]);
  *(_DWORD *)(a1 + 1292) = sub_100F78E40(*(unsigned int *)(a1 + 1784), v6);
  *(_QWORD *)(a1 + 280) = 0x800000009;
  *(_DWORD *)(a1 + 276) = 3;
  *(_DWORD *)(a1 + 328) = 2;
  v8 = sub_1001AC584();
  v9 = (void *)sub_100814EB4(v8);
  if (v9)
  {
    v10 = v9;
    std::string::assign((std::string *)(a1 + 1368), (const std::string::value_type *)objc_msgSend(v9, "UTF8String"));

  }
}

void sub_100A85DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100A85E28(uint64_t a1)
{
  sub_100A85E30(*(_QWORD *)(a1 + 32));
}

void sub_100A85E30(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  id v19;
  _DWORD v20[4];
  uint8_t buf[8];
  std::__shared_weak_count *v22;

  v2 = a1 + 1448;
  if (sub_100A579D4(a1 + 1448))
  {
    v3 = objc_alloc_init((Class)NSMutableDictionary);
    v19 = v3;
    sub_100A861BC(a1, &v19);
    v4 = sub_100A579D4(v2);
    v5 = v4;
    v6 = *(double *)(a1 + 1704);
    if (v6 == 0.0 || (_DWORD)v4 == 0)
    {
      v8 = 0xFFFFFFFFLL;
    }
    else
    {
      v9 = vcvtmd_s64_f64((v6 - CFAbsoluteTimeGetCurrent()) / 86400.0);
      if (v9 < 0)
        v9 = -2;
      if (v9 <= 365)
        v8 = v9;
      else
        v8 = 4294967293;
    }
    objc_msgSend(v3, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A7DA78((_QWORD *)a1)), CFSTR("certAvailable"));
    objc_msgSend(v3, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5), CFSTR("certRequestEnabled"));
    objc_msgSend(v3, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8), CFSTR("nextCertRequestDay"));
    AnalyticsSendEvent(CFSTR("com.apple.locationd.eed.baa.dailyreport"), v3);

    v10 = sub_1001FD94C();
    *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
    sub_10018A534(v10, CFSTR("LastBAADailyReportSent"), buf);
    v11 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 944))(v11);
    v18 = 86400;
    sub_1001E4804(buf);
    sub_1001E4B84(*(uint64_t *)buf, "ConfiguredBAAReportingInterval", &v18);
    v12 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    objc_msgSend(*(id *)(a1 + 2072), "setNextFireDelay:", (double)v18);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#EED2,submitDailyBAAReport,com.apple.locationd.eed.baa.dailyreport event sent to CA. Next report after %{public}d seconds", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v20[0] = 67240192;
      v20[1] = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,submitDailyBAAReport,com.apple.locationd.eed.baa.dailyreport event sent to CA. Next report after %{public}d seconds", v20, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::submitDailyBAAReport()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_100A861A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A861BC(uint64_t a1, id *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  std::string::size_type size;
  char v12;
  std::string *p_dst;
  uint64_t *v14;
  std::string::size_type v15;
  char v16;
  std::string *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  std::string::size_type v25;
  char v26;
  std::string *v27;
  uint64_t *v28;
  std::string::size_type v29;
  char v30;
  id v31;
  std::string *v32;
  void *v33[2];
  char v34;
  std::string v35;
  void *v36[2];
  char v37;
  std::string v38;
  void *__p[2];
  char v40;
  std::string v41;
  void *v42[2];
  char v43;
  std::string __dst;

  v3 = *a2;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4
    || (v6 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 48))(v4, &__dst),
        objc_msgSend(v3, "setValue:forKey:", sub_100F7F650(*(unsigned int *)(v6 + 32)), CFSTR("simCountry1")),
        v7 = *a2,
        LODWORD(__dst.__r_.__value_.__l.__data_) = 0,
        (v8 = *(_QWORD *)(a1 + 56)) == 0))
  {
    sub_10025FD1C();
  }
  v9 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 48))(v8, &__dst);
  objc_msgSend(v7, "setValue:forKey:", sub_100F7F650(*(unsigned int *)(v9 + 8)), CFSTR("operatorCountry1"));
  sub_1015A2E04(v42, "carrier");
  v10 = sub_100A580B8(a1 + 1448, 0, (uint64_t *)v42);
  if (*((char *)v10 + 55) < 0)
    sub_100115CE4(&__dst, (void *)v10[4], v10[5]);
  else
    __dst = *(std::string *)(v10 + 4);
  if (v43 < 0)
    operator delete(v42[0]);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v12 >= 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  objc_msgSend(*a2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst), CFSTR("simBundleId1"));
  sub_1015A2E04(__p, "operator");
  v14 = sub_100A580B8(a1 + 1448, 0, (uint64_t *)__p);
  if (*((char *)v14 + 55) < 0)
    sub_100115CE4(&v41, (void *)v14[4], v14[5]);
  else
    v41 = *(std::string *)(v14 + 4);
  if (v40 < 0)
    operator delete(__p[0]);
  v15 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  v16 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = v41.__r_.__value_.__l.__size_;
  if (!v15)
  {
    std::string::assign(&v41, "Unavailable");
    v16 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  }
  if (v16 >= 0)
    v17 = &v41;
  else
    v17 = (std::string *)v41.__r_.__value_.__r.__words[0];
  objc_msgSend(*a2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17), CFSTR("operatorBundleId1"));
  if (sub_1001DC538())
  {
    v18 = *a2;
    LODWORD(v38.__r_.__value_.__l.__data_) = 1;
    v19 = *(_QWORD *)(a1 + 56);
    if (!v19
      || (v20 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 48))(v19, &v38),
          objc_msgSend(v18, "setValue:forKey:", sub_100F7F650(*(unsigned int *)(v20 + 32)), CFSTR("simCountry2")),
          v21 = *a2,
          LODWORD(v38.__r_.__value_.__l.__data_) = 1,
          (v22 = *(_QWORD *)(a1 + 56)) == 0))
    {
      sub_10025FD1C();
    }
    v23 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 48))(v22, &v38);
    objc_msgSend(v21, "setValue:forKey:", sub_100F7F650(*(unsigned int *)(v23 + 8)), CFSTR("operatorCountry2"));
    sub_1015A2E04(v36, "carrier");
    v24 = sub_100A580B8(a1 + 1448, 1, (uint64_t *)v36);
    if (*((char *)v24 + 55) < 0)
      sub_100115CE4(&v38, (void *)v24[4], v24[5]);
    else
      v38 = *(std::string *)(v24 + 4);
    if (v37 < 0)
      operator delete(v36[0]);
    v25 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    v26 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = v38.__r_.__value_.__l.__size_;
    if (!v25)
    {
      std::string::assign(&v38, "Unavailable");
      v26 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    if (v26 >= 0)
      v27 = &v38;
    else
      v27 = (std::string *)v38.__r_.__value_.__r.__words[0];
    objc_msgSend(*a2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27), CFSTR("simBundleId2"));
    sub_1015A2E04(v33, "operator");
    v28 = sub_100A580B8(a1 + 1448, 1, (uint64_t *)v33);
    if (*((char *)v28 + 55) < 0)
      sub_100115CE4(&v35, (void *)v28[4], v28[5]);
    else
      v35 = *(std::string *)(v28 + 4);
    if (v34 < 0)
      operator delete(v33[0]);
    v29 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    v30 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v29 = v35.__r_.__value_.__l.__size_;
    if (!v29)
    {
      std::string::assign(&v35, "Unavailable");
      v30 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    v31 = *a2;
    if (v30 >= 0)
      v32 = &v35;
    else
      v32 = (std::string *)v35.__r_.__value_.__r.__words[0];
    objc_msgSend(v31, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v32), CFSTR("operatorBundleId2"));
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_100A86638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a33 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (*(char *)(v45 - 57) < 0)
    operator delete(*(void **)(v45 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A866FC(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a2 > 20)
  {
    if (a2 > 29)
    {
      if (a2 == 30)
        return 6;
      if (a2 == 31)
        return 3;
    }
    else
    {
      if (a2 == 21)
        return 2;
      if (a2 == 26)
        return 4294967294;
    }
LABEL_15:
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 unexpected error code", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 unexpected error code", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "virtual uint32_t CLEmergencyEED2::getErrorCodePriority(Emergency::SessionErrorCode)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    result = 1;
    switch(a2)
    {
      case 0:
        return result;
      case 2:
        result = 5;
        break;
      case 3:
      case 12:
        return 2;
      case 10:
      case 14:
        result = 4294967293;
        break;
      case 16:
        result = 4;
        break;
      default:
        goto LABEL_15;
    }
  }
  return result;
}

uint64_t sub_100A86958(uint64_t a1, unsigned int a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a2 < 0xB)
    return dword_101C0546C[a2];
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 unexpected error code", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #EED2 unexpected error code", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLEmergencyEED2::getEED2ErrorCodePriority(EED2SessionErrorCode)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0xFFFFFFFFLL;
}

void sub_100A86AF8(uint64_t a1, void *a2)
{
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  id v9;
  int v10;
  int v11;
  uint64_t v12;
  id v13;
  int v14;
  int v15;
  double v16;
  uint8_t *v17;
  int v18;
  id v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  id v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  if (a2)
  {
    if (objc_msgSend(a2, "type") == (id)1)
    {
      ++*(_DWORD *)(a1 + 80);
    }
    else if (objc_msgSend(a2, "type") == (id)2)
    {
      ++*(_DWORD *)(a1 + 84);
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(a2, "type");
      v10 = *(_DWORD *)(a1 + 80);
      v11 = *(_DWORD *)(a1 + 84);
      *(_DWORD *)buf = 134218496;
      v25 = v9;
      v26 = 1024;
      v27 = v10;
      v28 = 1024;
      v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestTypeCountForCA,eedRequest.type:%ld, fNumStreamingRequests:%d,fNumUploadRequests:%d", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v12 = qword_1022A0088;
    v13 = objc_msgSend(a2, "type");
    v14 = *(_DWORD *)(a1 + 80);
    v15 = *(_DWORD *)(a1 + 84);
    v18 = 134218496;
    v19 = v13;
    v20 = 1024;
    v21 = v14;
    v22 = 1024;
    v23 = v15;
    v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#EED2,updateRequestTypeCountForCA,eedRequest.type:%ld, fNumStreamingRequests:%d,fNumUploadRequests:%d", &v18, 24);
    v7 = v17;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::AnalyticsReport::updateRequestTypeCountForCA(CLEEDRequest *)", "%s\n", v16);
LABEL_23:
    if (v7 != buf)
      free(v7);
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2,updateRequestTypeCountForCA,nil eedRequest,early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    LOWORD(v18) = 0;
    v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,updateRequestTypeCountForCA,nil eedRequest,early return", &v18, 2);
    v7 = v6;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::AnalyticsReport::updateRequestTypeCountForCA(CLEEDRequest *)", "%s\n", v5);
    goto LABEL_23;
  }
}

void sub_100A86E44(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  NSObject *v13;
  id v14;
  int v15;
  int v16;
  uint64_t v17;
  id v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  int v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  int v34;
  id v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  id v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(a2, "count");
    v6 = *(_DWORD *)(a1 + 96);
    v7 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)buf = 134218496;
    v41 = v5;
    v42 = 1024;
    v43 = v6;
    v44 = 1024;
    v45 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,updateMediaItemTypeCountForCA,before update, mediaItemList.count:%ld, fNumImages:%d, fNumVideos:%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v17 = qword_1022A0088;
    v18 = objc_msgSend(a2, "count");
    v19 = *(_DWORD *)(a1 + 96);
    v20 = *(_DWORD *)(a1 + 100);
    v34 = 134218496;
    v35 = v18;
    v36 = 1024;
    v37 = v19;
    v38 = 1024;
    v39 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#EED2,updateMediaItemTypeCountForCA,before update, mediaItemList.count:%ld, fNumImages:%d, fNumVideos:%d", &v34, 24, (_DWORD)v29);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::AnalyticsReport::updateMediaItemTypeCountForCA(NSSet<CLEEDMediaItem *> *)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v30 != v10)
          objc_enumerationMutation(a2);
        v12 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v12, "type") == (id)1)
        {
          ++*(_DWORD *)(a1 + 96);
        }
        else if (objc_msgSend(v12, "type") == (id)2)
        {
          ++*(_DWORD *)(a1 + 100);
        }
      }
      v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v9);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v13 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v14 = objc_msgSend(a2, "count");
    v15 = *(_DWORD *)(a1 + 96);
    v16 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)buf = 134218496;
    v41 = v14;
    v42 = 1024;
    v43 = v15;
    v44 = 1024;
    v45 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2,updateMediaItemTypeCountForCA,after update, mediaItemList.count:%ld, fNumImages:%d, fNumVideos:%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v23 = qword_1022A0088;
    v24 = objc_msgSend(a2, "count");
    v25 = *(_DWORD *)(a1 + 96);
    v26 = *(_DWORD *)(a1 + 100);
    v34 = 134218496;
    v35 = v24;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 0, "#EED2,updateMediaItemTypeCountForCA,after update, mediaItemList.count:%ld, fNumImages:%d, fNumVideos:%d", &v34, 24, (_DWORD)v29);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::AnalyticsReport::updateMediaItemTypeCountForCA(NSSet<CLEEDMediaItem *> *)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
}

void sub_100A87284(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 32);
  if (sub_100CD598C(v3 + 112))
  {
    v4 = *(void **)(v3 + 1840);
    if (v4)

    *(_QWORD *)(v3 + 1840) = a2;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(v3 + 1840);
      *(_DWORD *)buf = 138477827;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,initializeAPNSHelper,apnsTokenCallback,receveived token,%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9 = *(_QWORD *)(v3 + 1840);
      v14 = 138477827;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,initializeAPNSHelper,apnsTokenCallback,receveived token,%{private}@", &v14, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v7 = *(_QWORD *)(v3 + 2088);
    if (v7)
      *(_BYTE *)(v7 + 40) = 1;
    sub_100A63CC8(v3 + 1536, 15);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2,initializeAPNSHelper,not in emergency call,early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v14) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,initializeAPNSHelper,not in emergency call,early return", &v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

uint64_t sub_100A875A8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  _BYTE v20[10];
  uint8_t buf[4];
  _QWORD v22[204];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 1848);
  if (v4)

  *(_QWORD *)(v3 + 1848) = a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(v3 + 1848);
    *(_DWORD *)buf = 138477827;
    v22[0] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,initializeAPNSHelper,apnsMessageCallback,receveived message,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v12 = *(_QWORD *)(v3 + 1848);
    v19 = 138477827;
    *(_QWORD *)v20 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,initializeAPNSHelper,apnsMessageCallback,receveived message,%{private}@", &v19, 12);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v7 = *(_QWORD *)(v3 + 2088);
  if (v7)
  {
    ++*(_DWORD *)(v7 + 44);
    if (sub_100A6F8CC(v3) == 4)
      ++*(_DWORD *)(*(_QWORD *)(v3 + 2088) + 60);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(v3 + 2088);
      v10 = *(_DWORD *)(v9 + 44);
      LODWORD(v9) = *(_DWORD *)(v9 + 60);
      *(_DWORD *)buf = 67109376;
      LODWORD(v22[0]) = v10;
      WORD2(v22[0]) = 1024;
      *(_DWORD *)((char *)v22 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,initializeAPNSHelper,apnsMessageCallback,fNumRequestsReceived:%d,fNumRequestsDuringEEM:%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v15 = *(_QWORD *)(v3 + 2088);
      v16 = *(_DWORD *)(v15 + 44);
      LODWORD(v15) = *(_DWORD *)(v15 + 60);
      v19 = 67109376;
      *(_DWORD *)v20 = v16;
      *(_WORD *)&v20[4] = 1024;
      *(_DWORD *)&v20[6] = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,initializeAPNSHelper,apnsMessageCallback,fNumRequestsReceived:%d,fNumRequestsDuringEEM:%d", &v19, 14);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  return sub_100A63CC8(v3 + 1536, 16);
}

uint64_t sub_100A87920(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,initializeAPNSHelper,apnsReconnectedCallback", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,initializeAPNSHelper,apnsReconnectedCallback", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100A63CC8(v1 + 1536, 22);
}

uint64_t sub_100A87ABC(uint64_t a1, int a2, void *a3, void *a4)
{
  NSObject *v8;
  char *v9;
  _BYTE *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  int v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  NSObject *v30;
  char *v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  id v35;
  NSObject *v36;
  char *v37;
  int v38;
  _BYTE *v39;
  unsigned int v40;
  _BYTE *v41;
  NSObject *v42;
  uint64_t v44;
  char *v45;
  _BYTE *v46;
  unsigned int v47;
  id v48;
  id v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  int v54;
  _BYTE *v55;
  unsigned int v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  const char *v60;
  uint64_t v61;
  _BYTE v62[12];
  __int16 v63;
  unsigned int v64;
  char v65;
  _BYTE __p[12];
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  id v70;
  __int16 v71;
  id v72;
  _BYTE buf[18];
  __int16 v74;
  _BYTE *v75;
  __int16 v76;
  id v77;
  __int16 v78;
  id v79;
  __int16 v80;
  id v81;
  __int16 v82;
  id v83;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a2 ? "Companion" : "Native";
    sub_1015A2E04(__p, v9);
    v10 = SBYTE3(v70) >= 0 ? __p : *(_BYTE **)__p;
    v11 = objc_msgSend(objc_msgSend(a3, "valueForHTTPHeaderField:", CFSTR("X-Responding-Instance")), "UTF8String");
    v12 = objc_msgSend(objc_msgSend(a3, "valueForHTTPHeaderField:", CFSTR("X-Apple-Request-UUID")), "UTF8String");
    v13 = objc_msgSend(objc_msgSend(a3, "valueForHTTPHeaderField:", CFSTR("X-Apple-Jingle-Correlation-Key")), "UTF8String");
    v14 = objc_msgSend(objc_msgSend(a3, "valueForHTTPHeaderField:", CFSTR("Via")), "UTF8String");
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v74 = 2082;
    v75 = v10;
    v76 = 2081;
    v77 = v11;
    v78 = 2081;
    v79 = v12;
    v80 = 2081;
    v81 = v13;
    v82 = 2081;
    v83 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#ControlData,handleControlDataResponse,response headers\", \"numberType\":%{public, location:escape_only}s, \"responding instance\":%{private, location:escape_only}s, \"UUID\":%{private, location:escape_only}s, \"jingle corr key\":%{private, location:escape_only}s, \"via\":%{private, location:escape_only}s}", buf, 0x44u);
    if (SBYTE3(v70) < 0)
      operator delete(*(void **)__p);
  }
  if (a3)
  {
    if (objc_msgSend(a3, "statusCode") == (id)200)
    {
      v15 = *(_QWORD *)(a1 + 2088);
      if (v15)
        ++*(_DWORD *)(v15 + 56);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v16 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (a2)
          v17 = "Companion";
        else
          v17 = "Native";
        sub_1015A2E04(buf, v17);
        v18 = SBYTE3(v75);
        v19 = *(_BYTE **)buf;
        v20 = objc_msgSend(a3, "statusCode");
        v21 = buf;
        if (v18 < 0)
          v21 = v19;
        *(_DWORD *)__p = 136446466;
        *(_QWORD *)&__p[4] = v21;
        v67 = 1026;
        v68 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2,ControlData POST for %{public}s number succeeded with response code %{public}d", __p, 0x12u);
        if (SBYTE3(v75) < 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_68;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v22 = qword_1022A0088;
      if (a2)
        v23 = "Companion";
      else
        v23 = "Native";
      sub_1015A2E04(__p, v23);
      v24 = SBYTE3(v70);
      v25 = *(_BYTE **)__p;
      v26 = objc_msgSend(a3, "statusCode");
      v27 = __p;
      if (v24 < 0)
        v27 = v25;
      *(_DWORD *)v62 = 136446466;
      *(_QWORD *)&v62[4] = v27;
      v63 = 1026;
      v64 = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#EED2,ControlData POST for %{public}s number succeeded with response code %{public}d", v62, 18);
      v29 = v28;
      if (SBYTE3(v70) < 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v29);
      if (v29 == buf)
        goto LABEL_68;
      goto LABEL_96;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v36 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
        v37 = "Companion";
      else
        v37 = "Native";
      sub_1015A2E04(buf, v37);
      v38 = SBYTE3(v75);
      v39 = *(_BYTE **)buf;
      v40 = objc_msgSend(a3, "statusCode");
      v41 = buf;
      if (v38 < 0)
        v41 = v39;
      *(_DWORD *)__p = 136446466;
      *(_QWORD *)&__p[4] = v41;
      v67 = 1026;
      v68 = v40;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#EED2,ControlData POST for %{public}s number failed with response code %{public}d", __p, 0x12u);
      if (SBYTE3(v75) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v52 = qword_1022A0088;
      if (a2)
        v53 = "Companion";
      else
        v53 = "Native";
      sub_1015A2E04(__p, v53);
      v54 = SBYTE3(v70);
      v55 = *(_BYTE **)__p;
      v56 = objc_msgSend(a3, "statusCode");
      v57 = __p;
      if (v54 < 0)
        v57 = v55;
      *(_DWORD *)v62 = 136446466;
      *(_QWORD *)&v62[4] = v57;
      v63 = 1026;
      v64 = v56;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v52, 0, "#EED2,ControlData POST for %{public}s number failed with response code %{public}d", v62, 18);
      v59 = v58;
      if (SBYTE3(v70) < 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v59);
      if (v59 != buf)
        free(v59);
    }
    *(_BYTE *)(a1 + 1962) = 1;
    if (objc_msgSend(a3, "statusCode") == (id)416)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v42 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#EED2,ControlData POST was determined to be outside coverage area", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_68;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      *(_WORD *)__p = 0;
      LODWORD(v61) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2,ControlData POST was determined to be outside coverage area", __p, v61);
      v29 = (char *)v60;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v60);
      if (v29 == buf)
        goto LABEL_68;
LABEL_96:
      free(v29);
LABEL_68:
      *(_BYTE *)(a1 + 1962) = 0;
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v30 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v31 = a2 ? "Companion" : "Native";
      sub_1015A2E04(__p, v31);
      v32 = SBYTE3(v70) >= 0 ? __p : *(_BYTE **)__p;
      v33 = objc_msgSend(a4, "code");
      v34 = objc_msgSend(a4, "domain");
      v35 = objc_msgSend(a4, "localizedDescription");
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v33;
      v74 = 2114;
      v75 = v34;
      v76 = 2114;
      v77 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#EED2,ControlData POST for %{public}s number failed with error code,%{public}d,domain,%{public}@,reason,%{public}@", buf, 0x26u);
      if (SBYTE3(v70) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v44 = qword_1022A0088;
      if (a2)
        v45 = "Companion";
      else
        v45 = "Native";
      sub_1015A2E04(v62, v45);
      if (v65 >= 0)
        v46 = v62;
      else
        v46 = *(_BYTE **)v62;
      v47 = objc_msgSend(a4, "code");
      v48 = objc_msgSend(a4, "domain");
      v49 = objc_msgSend(a4, "localizedDescription");
      *(_DWORD *)__p = 136446978;
      *(_QWORD *)&__p[4] = v46;
      v67 = 1026;
      v68 = v47;
      v69 = 2114;
      v70 = v48;
      v71 = 2114;
      v72 = v49;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 0, "#EED2,ControlData POST for %{public}s number failed with error code,%{public}d,domain,%{public}@,reason,%{public}@", __p, 38);
      v51 = v50;
      if (v65 < 0)
        operator delete(*(void **)v62);
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v51);
      if (v51 != buf)
        free(v51);
    }
    *(_BYTE *)(a1 + 1962) = 1;
  }
  sub_100A81AD8(a1);
  return sub_100A63CC8(a1 + 1536, 23);
}

void sub_100A8844C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100A884A8(uint64_t a1)
{
  id v2;
  double v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  size_t v9;
  NSObject *v10;
  _BOOL8 result;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  _QWORD *v16;
  size_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  _WORD v29[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 1848))
  {
    if (!*(_QWORD *)(a1 + 1912) || !*(_QWORD *)(a1 + 1920))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,nil fRequestsPending or fRequestsHandled queue,early return", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v29[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleAPNSMessage,nil fRequestsPending or fRequestsHandled queue,early return", v29, 2);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      if (*(_QWORD *)(a1 + 1920))
        sub_100A88CEC(a1, 7);

      goto LABEL_19;
    }
    if (!*(_QWORD *)(a1 + 1872))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v13 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#EED2,canHandleAPNSMessage,nil fHelperService,early return", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v29[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,canHandleAPNSMessage,nil fHelperService,early return", v29, 2);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      sub_100A88CEC(a1, 7);

      goto LABEL_19;
    }
    v2 = +[CLEEDRequest getSessionStartTimeFromDict:](CLEEDRequest, "getSessionStartTimeFromDict:");
    -[NSDate timeIntervalSince1970](+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 168)), "timeIntervalSince1970");
    if (v2 != (id)llround(v3))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#EED2,canHandleAPNSMessage,receivedSessionStartTime and device session start time mismatch, early return", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v29[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,canHandleAPNSMessage,receivedSessionStartTime and device session start time mismatch, early return", v29, 2);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      sub_100A88CEC(a1, 10);

      goto LABEL_19;
    }
    v4 = +[CLEEDRequest getCallIDFromDict:](CLEEDRequest, "getCallIDFromDict:", *(_QWORD *)(a1 + 1848));
    *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
    v5 = *(_QWORD *)(a1 + 56);
    if (!v5)
      sub_10025FD1C();
    v6 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v5 + 48))(v5, buf);
    v7 = (const char *)objc_msgSend(v4, "UTF8String");
    v8 = (_QWORD *)(v6 + 136);
    v9 = strlen(v7);
    if (*(char *)(v6 + 159) < 0)
    {
      if (v9 != *(_QWORD *)(v6 + 144))
        goto LABEL_42;
      if (v9 == -1)
        goto LABEL_79;
      v8 = (_QWORD *)*v8;
    }
    else
    {
      if (v9 != *(unsigned __int8 *)(v6 + 159))
        goto LABEL_42;
      if (v9 == -1)
LABEL_79:
        sub_10035AD9C();
    }
    if (!memcmp(v8, v7, v9))
      return 1;
LABEL_42:
    v15 = (const char *)objc_msgSend(v4, "UTF8String");
    v16 = (_QWORD *)(a1 + 136);
    v17 = strlen(v15);
    if (*(char *)(a1 + 159) < 0)
    {
      if (v17 == *(_QWORD *)(a1 + 144))
      {
        if (v17 == -1)
          goto LABEL_80;
        v16 = (_QWORD *)*v16;
        goto LABEL_49;
      }
    }
    else if (v17 == *(unsigned __int8 *)(a1 + 159))
    {
      if (v17 == -1)
LABEL_80:
        sub_10035AD9C();
LABEL_49:
      if (memcmp(v16, v15, v17))
        goto LABEL_50;
      return 1;
    }
LABEL_50:
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#EED2,canHandleAPNSMessage,receivedCallID doesn't match native or companion number, early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v29[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,canHandleAPNSMessage,receivedCallID doesn't match native or companion number, early return", v29, 2);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    sub_100A88CEC(a1, 11);

LABEL_19:
    result = 0;
    *(_QWORD *)(a1 + 1848) = 0;
    return result;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v12 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2,canHandleAPNSMessage,nil fAPNSMessage early return", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v29[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,canHandleAPNSMessage,nil fAPNSMessage early return", v29, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v21);
    if (v22 != buf)
      free(v22);
    return 0;
  }
  return result;
}

void sub_100A88CD8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_100A88CEC(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  double v7;
  NSObject *v8;
  id v9;
  NSDate *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  NSDate *v15;
  id v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  id v23;
  __int16 v24;
  NSDate *v25;
  __int16 v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  NSDate *v31;
  __int16 v32;
  id v33;

  v21 = 0;
  v4 = +[CLEEDRequest createRequestFromDict:baseURL:sessionID:partnerAdrPublicKeyData:deviceSessionPrivateKey:deviceSessionSecret:error:](CLEEDRequest, "createRequestFromDict:baseURL:sessionID:partnerAdrPublicKeyData:deviceSessionPrivateKey:deviceSessionSecret:error:", *(_QWORD *)(a1 + 1848), CFSTR("https://dummyURL"), objc_msgSend(CFSTR("dummySessionID"), "dataUsingEncoding:", 4), objc_msgSend(CFSTR("dummyPartnerAdrPublicKeyData"), "dataUsingEncoding:", 4), *(_QWORD *)(a1 + 1952), objc_msgSend(CFSTR("dummyDeviceSessionSecretForPartner"), "dataUsingEncoding:", 4), &v21);
  if (v4)
  {
    v5 = v4;
    v6 = v4;
    objc_msgSend(v5, "setState:", a2);
    objc_msgSend(v5, "setRequestReceivedTime:", CFAbsoluteTimeGetCurrent());
    objc_msgSend(objc_msgSend(v5, "requestDate"), "timeIntervalSinceDate:", +[NSDate date](NSDate, "date"));
    objc_msgSend(v5, "setRequestTransmissionTime:", (int)vcvtpd_s64_f64(fabs(v7) * 1000.0));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(v5, "requestDate");
      v10 = +[NSDate date](NSDate, "date");
      v11 = objc_msgSend(v5, "requestTransmissionTime");
      *(_DWORD *)buf = 138412802;
      v29 = v9;
      v30 = 2112;
      v31 = v10;
      v32 = 2048;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,handleRequestRejection,request sent date:%@, request received date: %@, requestTransmissionTime:%ld milliseconds", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v13 = qword_1022A0088;
      v14 = objc_msgSend(v5, "requestDate");
      v15 = +[NSDate date](NSDate, "date");
      v16 = objc_msgSend(v5, "requestTransmissionTime");
      v22 = 138412802;
      v23 = v14;
      v24 = 2112;
      v25 = v15;
      v26 = 2048;
      v27 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "#EED2,handleRequestRejection,request sent date:%@, request received date: %@, requestTransmissionTime:%ld milliseconds", &v22, 32);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleRequestRejection(CLEEDRequestState)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    objc_msgSend(*(id *)(a1 + 1920), "addObject:", v5);
    sub_100A768D0(a1);
    sub_100A77908(a1);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2,handleRequestRejection,CLEEDRequest could not be created. This should not happen", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleRequestRejection,CLEEDRequest could not be created. This should not happen", &v22, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleRequestRejection(CLEEDRequestState)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
}

uint64_t sub_100A8914C(uint64_t a1, void *a2)
{
  void *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  NSObject *v26;
  id v27;
  NSObject *v28;
  id v29;
  uint64_t v30;
  id v31;
  const char *v32;
  uint8_t *v33;
  NSObject *v34;
  id v35;
  uint64_t v36;
  id v37;
  const char *v38;
  NSObject *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  NSObject *v44;
  id v45;
  NSObject *v46;
  id v47;
  uint64_t v49;
  id v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  id v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  id v65;
  const char *v66;
  uint8_t *v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  const char *v72;
  uint8_t *v73;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  id v78;
  const char *v79;
  uint8_t *v80;
  uint64_t v81;
  id v82;
  const char *v83;
  uint8_t *v84;
  uint64_t v85;
  id v86;
  const char *v87;
  uint64_t v88;
  _QWORD v89[6];
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  int v94;
  id v95;
  __int16 v96;
  id v97;
  __int16 v98;
  id v99;
  __int16 v100;
  id v101;
  uint8_t buf[4];
  id v103;
  __int16 v104;
  id v105;
  __int16 v106;
  id v107;
  __int16 v108;
  id v109;

  v90 = 0;
  v91 = &v90;
  v92 = 0x2020000000;
  v93 = -1;
  v4 = *(void **)(a1 + 1912);
  v89[0] = _NSConcreteStackBlock;
  v89[1] = 3221225472;
  v89[2] = sub_100A8A538;
  v89[3] = &unk_102166578;
  v89[4] = a2;
  v89[5] = &v90;
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", v89);
  if ((v91[3] & 0x80000000) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1912), "objectAtIndexedSubscript:", *((int *)v91 + 6)), "ID");
      *(_DWORD *)buf = 138543362;
      v103 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,pending request:%{public}@ moved from fRequestsPending queue to fRequestsHandled queue", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v49 = qword_1022A0088;
      v50 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1912), "objectAtIndexedSubscript:", *((int *)v91 + 6)), "ID");
      v94 = 138543362;
      v95 = v50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 0, "#EED2,isDuplicateRequest,pending request:%{public}@ moved from fRequestsPending queue to fRequestsHandled queue", &v94, 12);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 1912), "objectAtIndexedSubscript:", *((int *)v91 + 6)), "setState:", 15);
    objc_msgSend(*(id *)(a1 + 1920), "addObject:", objc_msgSend(*(id *)(a1 + 1912), "objectAtIndex:", *((int *)v91 + 6)));
    objc_msgSend(*(id *)(a1 + 1912), "removeObjectAtIndex:", *((int *)v91 + 6));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v8 = objc_msgSend(a2, "ID");
      *(_DWORD *)buf = 138543362;
      v103 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest, Allow the new request:%{public}@ to be added to pending queue", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v53 = qword_1022A0088;
      v54 = objc_msgSend(a2, "ID");
      v94 = 138543362;
      v95 = v54;
      LODWORD(v88) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v53, 0, "#EED2,isDuplicateRequest, Allow the new request:%{public}@ to be added to pending queue", &v94, v88);
      v56 = (uint8_t *)v55;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v55);
      if (v56 != buf)
        free(v56);
    }
    v9 = *(_QWORD *)(a1 + 2088);
    if (v9)
    {
      v10 = 0;
      ++*(_DWORD *)(v9 + 64);
      goto LABEL_73;
    }
LABEL_72:
    v10 = 0;
    goto LABEL_73;
  }
  v11 = *(void **)(a1 + 1928);
  if (!v11 || (v12 = objc_msgSend(v11, "type"), v12 != objc_msgSend(a2, "type")))
  {
    v18 = *(void **)(a1 + 1936);
    if (v18 && (v19 = objc_msgSend(v18, "type"), v19 == objc_msgSend(a2, "type")))
    {
      v20 = *(_QWORD *)(a1 + 2088);
      if (v20)
        ++*(_DWORD *)(v20 + 64);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v21 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v22 = objc_msgSend(a2, "ID");
        v23 = objc_msgSend(a2, "type");
        v24 = objc_msgSend(*(id *)(a1 + 1936), "ID");
        v25 = objc_msgSend(*(id *)(a1 + 1936), "state");
        *(_DWORD *)buf = 138544130;
        v103 = v22;
        v104 = 2048;
        v105 = v23;
        v106 = 2114;
        v107 = v24;
        v108 = 2050;
        v109 = v25;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current upload request with RequestID:%{public}@ which is in state:%{public}ld", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v57 = qword_1022A0088;
        v58 = objc_msgSend(a2, "ID");
        v59 = objc_msgSend(a2, "type");
        v60 = objc_msgSend(*(id *)(a1 + 1936), "ID");
        v61 = objc_msgSend(*(id *)(a1 + 1936), "state");
        v94 = 138544130;
        v95 = v58;
        v96 = 2048;
        v97 = v59;
        v98 = 2114;
        v99 = v60;
        v100 = 2050;
        v101 = v61;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v57, 0, "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current upload request with RequestID:%{public}@ which is in state:%{public}ld", &v94, 42);
        v63 = (uint8_t *)v62;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v62);
        if (v63 != buf)
          free(v63);
      }
      if (objc_msgSend(*(id *)(a1 + 1936), "state") != (id)1)
        objc_msgSend(*(id *)(a1 + 1936), "setState:", 16);
      objc_msgSend(*(id *)(a1 + 1920), "addObject:", *(_QWORD *)(a1 + 1936));
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v26 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v27 = objc_msgSend(*(id *)(a1 + 1936), "ID");
        *(_DWORD *)buf = 138543362;
        v103 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,fCurrentUploadRequest:%{public}@ moved to fRequestsHandled queue", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v64 = qword_1022A0088;
        v65 = objc_msgSend(*(id *)(a1 + 1936), "ID");
        v94 = 138543362;
        v95 = v65;
        LODWORD(v88) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, 0, "#EED2,isDuplicateRequest,fCurrentUploadRequest:%{public}@ moved to fRequestsHandled queue", &v94, v88);
        v67 = (uint8_t *)v66;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v66);
        if (v67 != buf)
          free(v67);
      }

      *(_QWORD *)(a1 + 1936) = 0;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v28 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v29 = objc_msgSend(a2, "ID");
        *(_DWORD *)buf = 138543362;
        v103 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest, Allow the new upload request:%{public}@ to be added to pending queue", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_72;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v30 = qword_1022A0088;
      v31 = objc_msgSend(a2, "ID");
      v94 = 138543362;
      v95 = v31;
      LODWORD(v88) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "#EED2,isDuplicateRequest, Allow the new upload request:%{public}@ to be added to pending queue", &v94, v88);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v32);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v34 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v35 = objc_msgSend(a2, "ID");
        *(_DWORD *)buf = 138543362;
        v103 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest, duplicate request not found, allow the new request:%{public}@ to be added to pending queue", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_72;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v36 = qword_1022A0088;
      v37 = objc_msgSend(a2, "ID");
      v94 = 138543362;
      v95 = v37;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 0, "#EED2,isDuplicateRequest, duplicate request not found, allow the new request:%{public}@ to be added to pending queue", &v94, 12);
      v33 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v38);
    }
LABEL_105:
    if (v33 != buf)
      free(v33);
    goto LABEL_72;
  }
  v13 = *(_QWORD *)(a1 + 2088);
  if (v13)
    ++*(_DWORD *)(v13 + 64);
  if (objc_msgSend(*(id *)(a1 + 1928), "state") != (id)1)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v39 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v40 = objc_msgSend(a2, "ID");
      v41 = objc_msgSend(a2, "type");
      v42 = objc_msgSend(*(id *)(a1 + 1928), "ID");
      v43 = objc_msgSend(*(id *)(a1 + 1928), "state");
      *(_DWORD *)buf = 138544130;
      v103 = v40;
      v104 = 2048;
      v105 = v41;
      v106 = 2114;
      v107 = v42;
      v108 = 2050;
      v109 = v43;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current streaming request with RequestID:%{public}@ which is in state:%{public}ld", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v74 = qword_1022A0088;
      v75 = objc_msgSend(a2, "ID");
      v76 = objc_msgSend(a2, "type");
      v77 = objc_msgSend(*(id *)(a1 + 1928), "ID");
      v78 = objc_msgSend(*(id *)(a1 + 1928), "state");
      v94 = 138544130;
      v95 = v75;
      v96 = 2048;
      v97 = v76;
      v98 = 2114;
      v99 = v77;
      v100 = 2050;
      v101 = v78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v74, 0, "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current streaming request with RequestID:%{public}@ which is in state:%{public}ld", &v94, 42);
      v80 = (uint8_t *)v79;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
    objc_msgSend(*(id *)(a1 + 1928), "setState:", 16);
    objc_msgSend(*(id *)(a1 + 1920), "addObject:", *(_QWORD *)(a1 + 1928));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v44 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v45 = objc_msgSend(*(id *)(a1 + 1928), "ID");
      *(_DWORD *)buf = 138543362;
      v103 = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,fCurrentStreamingRequest:%{public}@ moved to fRequestsHandled queue and marked as duplicate", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v81 = qword_1022A0088;
      v82 = objc_msgSend(*(id *)(a1 + 1928), "ID");
      v94 = 138543362;
      v95 = v82;
      LODWORD(v88) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v81, 0, "#EED2,isDuplicateRequest,fCurrentStreamingRequest:%{public}@ moved to fRequestsHandled queue and marked as duplicate", &v94, v88);
      v84 = (uint8_t *)v83;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v83);
      if (v84 != buf)
        free(v84);
    }

    *(_QWORD *)(a1 + 1928) = 0;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v46 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v47 = objc_msgSend(a2, "ID");
      *(_DWORD *)buf = 138543362;
      v103 = v47;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest, Allow the new streaming request:%{public}@ to be added to pending queue", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_72;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v85 = qword_1022A0088;
    v86 = objc_msgSend(a2, "ID");
    v94 = 138543362;
    v95 = v86;
    LODWORD(v88) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v85, 0, "#EED2,isDuplicateRequest, Allow the new streaming request:%{public}@ to be added to pending queue", &v94, v88);
    v33 = (uint8_t *)v87;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v87);
    goto LABEL_105;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v15 = objc_msgSend(a2, "ID");
    v16 = objc_msgSend(a2, "type");
    v17 = objc_msgSend(*(id *)(a1 + 1928), "ID");
    *(_DWORD *)buf = 138543874;
    v103 = v15;
    v104 = 2048;
    v105 = v16;
    v106 = 2114;
    v107 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current ACCEPTED streaming request with RequestID:%{public}@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v68 = qword_1022A0088;
    v69 = objc_msgSend(a2, "ID");
    v70 = objc_msgSend(a2, "type");
    v71 = objc_msgSend(*(id *)(a1 + 1928), "ID");
    v94 = 138543874;
    v95 = v69;
    v96 = 2048;
    v97 = v70;
    v98 = 2114;
    v99 = v71;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, 0, "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current ACCEPTED streaming request with RequestID:%{public}@", &v94, 32);
    v73 = (uint8_t *)v72;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v72);
    if (v73 != buf)
      free(v73);
  }
  v10 = 1;
LABEL_73:
  _Block_object_dispose(&v90, 8);
  return v10;
}

void sub_100A8A258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100A8A2E8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v7 = +[CLEEDRequest toCLEEDRequestType:](CLEEDRequest, "toCLEEDRequestType:", objc_msgSend(a2, "valueForKey:", CFSTR("capability")));
  if (v7 == objc_msgSend(*(id *)(a1 + 32), "type"))
  {
    if ((objc_msgSend(objc_msgSend(a2, "valueForKey:", CFSTR("status")), "isEqualToString:", CFSTR("supported")) & 1) != 0|| objc_msgSend(objc_msgSend(a2, "valueForKey:", CFSTR("status")), "isEqualToString:", CFSTR("supported_nearby_device")))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v9 = objc_msgSend(*(id *)(a1 + 32), "type");
        *(_DWORD *)buf = 134349056;
        v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,requestType:%{public}ld is supported by device", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v10 = qword_1022A0088;
        v11 = objc_msgSend(*(id *)(a1 + 32), "type");
        v14 = 134349056;
        v15 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#EED2,handleAPNSMessage,requestType:%{public}ld is supported by device", &v14, 12);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()_block_invoke", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
    *a4 = 1;
  }
}

void sub_100A8A538(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  id v8;
  NSObject *v9;
  id v10;
  int v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  int v16;
  id v17;
  id v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  id v22;
  __int16 v23;
  int v24;
  __int16 v25;
  id v26;
  __int16 v27;
  id v28;
  uint8_t buf[4];
  id v30;
  __int16 v31;
  int v32;
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;

  v8 = objc_msgSend(*(id *)(a1 + 32), "type");
  if (v8 == objc_msgSend(a2, "type"))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(a2, "ID");
      v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v12 = objc_msgSend(*(id *)(a1 + 32), "ID");
      v13 = objc_msgSend(*(id *)(a1 + 32), "type");
      *(_DWORD *)buf = 138544130;
      v30 = v10;
      v31 = 1026;
      v32 = v11;
      v33 = 2114;
      v34 = v12;
      v35 = 2050;
      v36 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,found pending request:%{public}@ at index:%{public}d that matches received request:%{public}@ for request type:%{public}ld", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14 = qword_1022A0088;
      v15 = objc_msgSend(a2, "ID");
      v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v17 = objc_msgSend(*(id *)(a1 + 32), "ID");
      v18 = objc_msgSend(*(id *)(a1 + 32), "type");
      v21 = 138544130;
      v22 = v15;
      v23 = 1026;
      v24 = v16;
      v25 = 2114;
      v26 = v17;
      v27 = 2050;
      v28 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#EED2,isDuplicateRequest,found pending request:%{public}@ at index:%{public}d that matches received request:%{public}@ for request type:%{public}ld", &v21, 38);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)_block_invoke", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    *a4 = 1;
  }
}

id sub_100A8A7C8(id *a1, int a2, void *a3, _QWORD *a4)
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint8_t *v26;
  _QWORD v27[6];
  _QWORD v28[6];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  NSErrorUserInfoKey v33;
  const __CFString *v34;
  int v35;
  id v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  NSErrorUserInfoKey v40;
  const __CFString *v41;
  uint8_t buf[4];
  id v43;

  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = -1;
  v8 = a1[240];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100A8AD0C;
  v28[3] = &unk_102166578;
  v28[4] = a3;
  v28[5] = &v29;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v28);
  if ((v30[3] & 0x80000000) != 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v43 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2,checkHandledQueueForDuplicateRequest,matching handled request not found for request:%{public}@, early return", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LODWORD(v37) = 138543362;
      *(_QWORD *)((char *)&v37 + 4) = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,checkHandledQueueForDuplicateRequest,matching handled request not found for request:%{public}@, early return", &v37, 12);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::checkHandledQueueForDuplicateRequest(BOOL, NSUUID *, NSError **)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v14 = objc_alloc((Class)NSError);
    v40 = NSLocalizedDescriptionKey;
    v41 = CFSTR("Request not found");
    v15 = objc_msgSend(v14, "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), 4, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
    v12 = 0;
    *a4 = v15;
  }
  else
  {
    v9 = objc_msgSend(a1[240], "objectAtIndex:");
    *(_QWORD *)&v37 = 0;
    *((_QWORD *)&v37 + 1) = &v37;
    v38 = 0x2020000000;
    v39 = -1;
    v10 = a1[239];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100A8AF1C;
    v27[3] = &unk_102166578;
    v27[4] = v9;
    v27[5] = &v37;
    objc_msgSend(v10, "enumerateObjectsUsingBlock:", v27);
    if ((*(_DWORD *)(*((_QWORD *)&v37 + 1) + 24) & 0x80000000) != 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v16 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v17 = objc_msgSend(v9, "type");
        *(_DWORD *)buf = 134349056;
        v43 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#EED2,checkHandledQueueForDuplicateRequest,request of type:%{public}ld not found in fRequestsPending queue, early return", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v23 = qword_1022A0088;
        v24 = objc_msgSend(v9, "type");
        v35 = 134349056;
        v36 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 16, "#EED2,checkHandledQueueForDuplicateRequest,request of type:%{public}ld not found in fRequestsPending queue, early return", &v35, 12);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 0, "CLEEDRequest *CLEmergencyEED2::checkHandledQueueForDuplicateRequest(BOOL, NSUUID *, NSError **)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      v18 = objc_alloc((Class)NSError);
      v33 = NSLocalizedDescriptionKey;
      v34 = CFSTR("Request not found");
      v19 = objc_msgSend(v18, "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), 4, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
      v12 = 0;
      *a4 = v19;
    }
    else
    {
      v11 = objc_msgSend(a1[239], "objectAtIndex:");
      if (v11)
      {
        v12 = sub_100A8B14C(a1, v11, a2, a4);
        objc_msgSend(a1[239], "removeObjectAtIndex:", *(int *)(*((_QWORD *)&v37 + 1) + 24));
      }
      else
      {
        v12 = 0;
      }
    }
    _Block_object_dispose(&v37, 8);
  }
  _Block_object_dispose(&v29, 8);
  return v12;
}

void sub_100A8ACC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_100A8AD0C(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  int v21;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqual:", objc_msgSend(a2, "ID")))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 138543618;
      v19 = v8;
      v20 = 1026;
      v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,checkHandledQueueForDuplicateRequest,found matching handled request for request ID:%{public}@ at index:%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v14 = 138543618;
      v15 = v10;
      v16 = 1026;
      v17 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,checkHandledQueueForDuplicateRequest,found matching handled request for request ID:%{public}@ at index:%{public}d", &v14, 18);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::checkHandledQueueForDuplicateRequest(BOOL, NSUUID *, NSError **)_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *a4 = 1;
  }
}

void sub_100A8AF1C(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  id v8;
  NSObject *v9;
  id v10;
  int v11;
  uint64_t v12;
  id v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  id v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  int v24;

  v8 = objc_msgSend(*(id *)(a1 + 32), "type");
  if (v8 == objc_msgSend(a2, "type"))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(a2, "ID");
      v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 138543618;
      v22 = v10;
      v23 = 1026;
      v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,checkHandledQueueForDuplicateRequest,found matching pending request with request ID:%{public}@ at index:%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = qword_1022A0088;
      v13 = objc_msgSend(a2, "ID");
      v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v17 = 138543618;
      v18 = v13;
      v19 = 1026;
      v20 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#EED2,checkHandledQueueForDuplicateRequest,found matching pending request with request ID:%{public}@ at index:%{public}d", &v17, 18);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::checkHandledQueueForDuplicateRequest(BOOL, NSUUID *, NSError **)_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a4 = 1;
  }
}

id sub_100A8B14C(id *a1, void *a2, int a3, _QWORD *a4)
{
  void *v6;
  NSObject *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  BOOL v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  const char *v32;
  uint8_t *v33;
  NSErrorUserInfoKey v34;
  const __CFString *v35;
  int v36;
  id v37;
  uint8_t buf[4];
  id v39;

  v6 = a2;
  objc_msgSend(a2, "updateDurationInformationForCA:");
  switch((unint64_t)objc_msgSend(v6, "type"))
  {
    case 0uLL:
    case 3uLL:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2,updatePendingRequestForResponse,unknown Request Type. This is unexpected", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,updatePendingRequestForResponse,unknown Request Type. This is unexpected", &v36, 2);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 0, "CLEEDRequest *CLEmergencyEED2::updatePendingRequestForResponse(CLEEDRequest *, BOOL, NSError **)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      objc_msgSend(a1[240], "addObject:", v6);
      v34 = NSLocalizedDescriptionKey;
      v35 = CFSTR("Unknown Request Type");
      v6 = 0;
      *a4 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), 4, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
      return v6;
    case 1uLL:
      v9 = a1[249];
      if (v9 && objc_msgSend(v9, "dropStreaming") && (a3 & 1) != 0)
      {
        v10 = 17;
      }
      else
      {
        if (objc_msgSend(v6, "state") == (id)17)
          goto LABEL_29;
        if (a3)
          v10 = 1;
        else
          v10 = 4;
      }
      objc_msgSend(v6, "setState:", v10);
LABEL_29:
      if (!objc_msgSend(v6, "requestStatusAtFirstUserResponse"))
        objc_msgSend(v6, "setRequestStatusAtFirstUserResponse:", objc_msgSend(v6, "state"));
      if (objc_msgSend(v6, "state") == (id)17)
      {
        objc_msgSend(a1[240], "addObject:", v6);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v14 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          v39 = objc_msgSend(v6, "ID");
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,updatePendingRequestForResponse,request:%{public}@ found and moved from pending queue to requestsHandled queue", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v15 = qword_1022A0088;
          v36 = 138543362;
          v37 = objc_msgSend(v6, "ID");
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#EED2,updatePendingRequestForResponse,request:%{public}@ found and moved from pending queue to requestsHandled queue", &v36, 12);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::updatePendingRequestForResponse(CLEEDRequest *, BOOL, NSError **)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      else
      {
        a1[241] = v6;
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v18 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v19 = objc_msgSend(a1[241], "ID");
          *(_DWORD *)buf = 138543362;
          v39 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#EED2,updatePendingRequestForResponse,request:%{public}@ found and moved from pending queue to fCurrentStreamingRequest", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v30 = qword_1022A0088;
          v31 = objc_msgSend(a1[241], "ID");
          v36 = 138543362;
          v37 = v31;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "#EED2,updatePendingRequestForResponse,request:%{public}@ found and moved from pending queue to fCurrentStreamingRequest", &v36, 12);
          v33 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::updatePendingRequestForResponse(CLEEDRequest *, BOOL, NSError **)", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        return a1[241];
      }
      return v6;
    case 2uLL:
      v11 = v6;
      a1[242] = v11;
      if (!a1[249]
        || ((v12 = objc_msgSend(a1[249], "uploadMigitation"), v11 = a1[242], v12 == (id)1) ? (v13 = a3 == 0) : (v13 = 1),
            v13))
      {
        if (objc_msgSend(v11, "state") == (id)18)
          goto LABEL_48;
        if (a3)
          v20 = 1;
        else
          v20 = 4;
        v11 = a1[242];
      }
      else
      {
        v20 = 18;
      }
      objc_msgSend(v11, "setState:", v20);
LABEL_48:
      if (!objc_msgSend(a1[242], "requestStatusAtFirstUserResponse"))
        objc_msgSend(a1[242], "setRequestStatusAtFirstUserResponse:", objc_msgSend(a1[242], "state"));
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v21 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v22 = objc_msgSend(a1[242], "ID");
        *(_DWORD *)buf = 138543362;
        v39 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#EED2,updatePendingRequestForResponse,request:%{public}@ found and moved from pending queue to fCurrentUploadRequest", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v26 = qword_1022A0088;
        v27 = objc_msgSend(a1[242], "ID");
        v36 = 138543362;
        v37 = v27;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#EED2,updatePendingRequestForResponse,request:%{public}@ found and moved from pending queue to fCurrentUploadRequest", &v36, 12);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::updatePendingRequestForResponse(CLEEDRequest *, BOOL, NSError **)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      return a1[242];
    default:
      return 0;
  }
}

uint64_t sub_100A8B8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v3 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(*(id *)(v3 + 1912), "count"))
  {
    v4 = objc_msgSend(objc_alloc((Class)NSSet), "initWithArray:", *(_QWORD *)(v3 + 1912));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,pendingRequestCB,pending requests: %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v12 = 138477827;
      v13 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,pendingRequestCB,pending requests: %{private}@", &v12, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,pendingRequestCB,No pending requests available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,pendingRequestCB,No pending requests available", &v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v4 = 0;
  }
  return (*(uint64_t (**)(uint64_t, id, _QWORD))(a2 + 16))(a2, v4, 0);
}

uint64_t sub_100A8BBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(v3 + 1928);
    *(_DWORD *)buf = 138477827;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,streamingRequestCB,current streaming request:%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = *(_QWORD *)(v3 + 1928);
    v10 = 138477827;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,streamingRequestCB,current streaming request:%{private}@", &v10, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, *(_QWORD *)(v3 + 1928), 0);
}

uint64_t sub_100A8BDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(v3 + 1936);
    *(_DWORD *)buf = 138477827;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,uploadRequestCB,current upload request:%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = *(_QWORD *)(v3 + 1936);
    v10 = 138477827;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,uploadRequestCB,current upload request:%{private}@", &v10, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, *(_QWORD *)(v3 + 1936), 0);
}

uint64_t sub_100A8BF74(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  NSErrorUserInfoKey v14;
  const __CFString *v15;
  int v16;
  void *v17;
  uint8_t buf[4];
  void *v19;

  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 1928);
  if (v5 && objc_msgSend(a2, "isEqual:", objc_msgSend(v5, "ID")))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,streamingEndCB,fCurrentStreamingRequest has ended", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v16) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,streamingEndCB,fCurrentStreamingRequest has ended", &v16, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v7 = 0;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2,streamingEndCB,request:%{public}@ does not match fCurrentStreamingRequest.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v16 = 138543362;
      v17 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,streamingEndCB,request:%{public}@ does not match fCurrentStreamingRequest.", &v16, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v14 = NSLocalizedDescriptionKey;
    v15 = CFSTR("Streaming End for unavailable request Id");
    v7 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
  }
  return (*(uint64_t (**)(uint64_t, id))(a3 + 16))(a3, v7);
}

void sub_100A8C2E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  NSMutableSet *v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  NSErrorUserInfoKey v22;
  const __CFString *v23;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = +[NSMutableSet setWithSet:](NSMutableSet, "setWithSet:", a2);
  v8 = sub_100A8C5B4(v6, a3, (uint64_t)v7);
  v9 = *(_QWORD *)(v6 + 2088);
  if (v9)
    sub_100A86E44(v9, v7);
  if (v8)
  {
    sub_100A8CAFC(v6, v7, v8, (void (**)(_QWORD))a4);
    sub_100A77908(v6);
    sub_100A81AD8(v6);
  }
  else
  {
    v22 = NSLocalizedDescriptionKey;
    v23 = CFSTR("No matching requestID and upload request");
    v10 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      v19 = a3;
      v20 = 2114;
      v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2,uploadListCB,request:%{public}@,no matching upload request,return error:%{public}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v14 = 138543618;
      v15 = a3;
      v16 = 2114;
      v17 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,uploadListCB,request:%{public}@,no matching upload request,return error:%{public}@", &v14, 22);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    (*(void (**)(uint64_t, id))(a4 + 16))(a4, v10);
  }
}

void *sub_100A8C5B4(uint64_t a1, void *a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  NSObject *v14;
  NSObject *v15;
  id v16;
  uint64_t v18;
  id v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  int v31;
  id v32;
  uint8_t buf[4];
  id v34;

  v6 = *(void **)(a1 + 1936);
  if (v6 && objc_msgSend(a2, "isEqual:", objc_msgSend(v6, "ID")))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      v34 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ matches fCurrentUploadRequest", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v31 = 138543362;
      v32 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 1, "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ matches fCurrentUploadRequest", &v31, 12);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "CLEEDUploadRequest *CLEmergencyEED2::getUpdatedRequestForMediaItemUpload(NSUUID *, NSMutableSet<CLEEDMediaItem *> *)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    objc_msgSend(*(id *)(a1 + 1936), "updateRequestWithMediaItemList:", a3);
    return *(void **)(a1 + 1936);
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v9 = *(void **)(a1 + 1920);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v27;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v27 != v12)
            objc_enumerationMutation(v9);
          v8 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(a2, "isEqual:", objc_msgSend(v8, "ID")))
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102166788);
            v15 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              v16 = objc_msgSend(v8, "ID");
              *(_DWORD *)buf = 138543362;
              v34 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2,getUpdatedRequestForMediaItemUpload,return the request:%{public}@ found in fRequestsHandled queue", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_102166788);
              v18 = qword_1022A0088;
              v19 = objc_msgSend(v8, "ID");
              v31 = 138543362;
              v32 = v19;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "#EED2,getUpdatedRequestForMediaItemUpload,return the request:%{public}@ found in fRequestsHandled queue", &v31, 12);
              v21 = (uint8_t *)v20;
              sub_100512490("Generic", 1, 0, 2, "CLEEDUploadRequest *CLEmergencyEED2::getUpdatedRequestForMediaItemUpload(NSUUID *, NSMutableSet<CLEEDMediaItem *> *)", "%s\n", v20);
              if (v21 != buf)
                free(v21);
            }
            objc_msgSend(v8, "updateRequestWithMediaItemList:", a3);
            return v8;
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        if (v11)
          continue;
        break;
      }
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      v34 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ was not found", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v31 = 138543362;
      v32 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 1, "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ was not found", &v31, 12);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "CLEEDUploadRequest *CLEmergencyEED2::getUpdatedRequestForMediaItemUpload(NSUUID *, NSMutableSet<CLEEDMediaItem *> *)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    return 0;
  }
}

void sub_100A8CAFC(uint64_t a1, void *a2, void *a3, void (**a4)(_QWORD))
{
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  id v11;
  NSDictionary *v12;
  uint64_t v13;
  id v14;
  std::string *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  id v28;
  id v29;
  NSObject *v30;
  id v31;
  uint64_t v32;
  NSDictionary *v33;
  id v34;
  NSObject *v35;
  const char *v36;
  void **v37;
  const char *v38;
  void **v39;
  const char *v40;
  void **v41;
  _QWORD v42[8];
  _WORD v43[8];
  _QWORD v44[5];
  std::string v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  void (*v50)(uint64_t);
  uint64_t v51;
  NSErrorUserInfoKey v52;
  const __CFString *v53;
  NSErrorUserInfoKey v54;
  const __CFString *v55;
  NSErrorUserInfoKey v56;
  const __CFString *v57;
  void *__p[2];
  char v59;
  NSErrorUserInfoKey v60;
  const __CFString *v61;
  NSErrorUserInfoKey v62;
  const __CFString *v63;

  v46 = 0;
  v47 = &v46;
  v48 = 0x3052000000;
  v49 = sub_1002070A0;
  v50 = sub_100207C00;
  v51 = 0;
  if (!a2 || !objc_msgSend(a2, "count"))
  {
    v11 = objc_alloc((Class)NSError);
    v62 = NSLocalizedDescriptionKey;
    v63 = CFSTR("MediaList is empty, count 0");
    v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1);
    v13 = 10;
LABEL_8:
    v14 = objc_msgSend(v11, "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), v13, v12);
    v47[5] = (uint64_t)v14;
    a4[2](a4);
    goto LABEL_9;
  }
  if (!a3)
  {
    v11 = objc_alloc((Class)NSError);
    v60 = NSLocalizedDescriptionKey;
    v61 = CFSTR("No matching upload request");
    v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1);
    v13 = 6;
    goto LABEL_8;
  }
  memset(&v45, 0, sizeof(v45));
  v8 = sub_100A57ECC((int *)(a1 + 1448));
  sub_100A91C94((uint64_t)v44, (uint64_t)(v8 + 20));
  sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(a3, "partnerID"), "UTF8String"));
  v9 = sub_1001986C8(v44, (unsigned __int8 *)__p);
  v10 = v9;
  if (v59 < 0)
  {
    operator delete(__p[0]);
    if (!v10)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v9)
LABEL_12:
    std::string::operator=(&v45, (const std::string *)(v10 + 64));
LABEL_13:
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v45;
  else
    v15 = (std::string *)v45.__r_.__value_.__r.__words[0];
  v16 = +[CLEEDCryptoUtilities copyAdrPublicKeyData:](CLEEDCryptoUtilities, "copyAdrPublicKeyData:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
  v17 = v16;
  if (!v16)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v27 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#EED2,handleMediaUploadRequest,nil partnerAdrPublicKeyData,early return", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v43[0] = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleMediaUploadRequest,nil partnerAdrPublicKeyData,early return", v43, 2);
      v37 = (void **)v36;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)", "%s\n", v36);
      if (v37 != __p)
        free(v37);
    }
    v28 = objc_alloc((Class)NSError);
    v56 = NSLocalizedDescriptionKey;
    v57 = CFSTR("Unable to generate partnerAdrPublicKey data");
    v29 = objc_msgSend(v28, "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1));
    v47[5] = (uint64_t)v29;
    a4[2](a4);
    goto LABEL_34;
  }
  v18 = +[CLEEDRequest getSharedInfoPrefixFromSessionID:partnerID:partnerAdrPublicKeyData:deviceSessionPrivateKey:](CLEEDRequest, "getSharedInfoPrefixFromSessionID:partnerID:partnerAdrPublicKeyData:deviceSessionPrivateKey:", objc_msgSend(a3, "sessionID"), objc_msgSend(a3, "partnerID"), v16, *(_QWORD *)(a1 + 1952));
  if (v18)
  {
    if (*(_QWORD *)(a1 + 1968) || (sub_100A8FD18(a1), *(_QWORD *)(a1 + 1968)))
    {
      v19 = _Block_copy(a4);
      v20 = *(void **)(a1 + 1968);
      v21 = objc_msgSend(a3, "ID");
      v22 = *(_QWORD *)(a1 + 1888);
      v23 = objc_msgSend(a3, "uploadURL");
      v24 = objc_msgSend(a3, "combinedSecret");
      v25 = objc_msgSend(a3, "token");
      v26 = *(_QWORD *)(a1 + 1992);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = sub_100A90678;
      v42[3] = &unk_102166728;
      v42[6] = &v46;
      v42[7] = a1;
      v42[4] = a3;
      v42[5] = v19;
      objc_msgSend(v20, "processMediaForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:", v21, v22, v23, v18, v24, v25, a2, v26, v42);
      goto LABEL_34;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v35 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#EED2,handleMediaUploadRequest,EEDMediaService initialization failed", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v43[0] = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleMediaUploadRequest,EEDMediaService initialization failed", v43, 2);
      v41 = (void **)v40;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)", "%s\n", v40);
      if (v41 != __p)
        free(v41);
    }
    v31 = objc_alloc((Class)NSError);
    v52 = NSLocalizedDescriptionKey;
    v53 = CFSTR("EED Media Service initialization failed");
    v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
    v32 = 7;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v30 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#EED2,handleMediaUploadRequest,nil sharedInfoPrefix,early return", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v43[0] = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,handleMediaUploadRequest,nil sharedInfoPrefix,early return", v43, 2);
      v39 = (void **)v38;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)", "%s\n", v38);
      if (v39 != __p)
        free(v39);
    }
    v31 = objc_alloc((Class)NSError);
    v54 = NSLocalizedDescriptionKey;
    v55 = CFSTR("Unable to generate shared info prefix");
    v32 = 1;
    v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1);
  }
  v34 = objc_msgSend(v31, "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), v32, v33);
  v47[5] = (uint64_t)v34;
  a4[2](a4);
LABEL_34:
  sub_100A921D8((uint64_t)v44);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
LABEL_9:
  _Block_object_dispose(&v46, 8);
}

void sub_100A8D318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  sub_100A921D8((uint64_t)&a23);
  if (a33 < 0)
    operator delete(__p);
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_100A8D38C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  NSErrorUserInfoKey v15;
  const __CFString *v16;
  _DWORD v17[2];
  __int16 v18;
  void *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  void *v23;

  v7 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240450;
    v21 = a2;
    v22 = 2114;
    v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,userResponseCB,received response:%{public}u for the request:%{public}@", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v17[0] = 67240450;
    v17[1] = a2;
    v18 = 2114;
    v19 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,userResponseCB,received response:%{public}u for the request:%{public}@", v17, 18);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (a3 && a4)
  {
    sub_100A8D724(v7, a2, a3, a4);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#EED2,userResponseCB,requestID or statusCompletion nil, early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v17[0]) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,userResponseCB,requestID or statusCompletion nil, early return", v17, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    if (a4)
    {
      v15 = NSLocalizedDescriptionKey;
      v16 = CFSTR("Request ID not received");
      (*(void (**)(uint64_t, _QWORD, id))(a4 + 16))(a4, 0, objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), 4, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1)));
    }
  }
}

void sub_100A8D724(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  NSObject *v23;
  id v24;
  NSObject *v25;
  id v26;
  NSObject *v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  id v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  id v42;
  id v43;
  const char *v44;
  uint8_t *v45;
  uint64_t v46;
  id v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  const char *v52;
  uint8_t *v53;
  uint64_t v54;
  _QWORD v55[6];
  uint64_t v56;
  int v57;
  id v58;
  _BYTE v59[24];
  int v60;
  uint8_t buf[4];
  id v62;
  __int16 v63;
  id v64;

  v56 = 0;
  v8 = *(void **)(a1 + 1928);
  if (v8 && objc_msgSend(a3, "isEqual:", objc_msgSend(v8, "ID")))
  {
    objc_msgSend(*(id *)(a1 + 1928), "updateDurationInformationForCA:", a2);
    v9 = *(void **)(a1 + 1992);
    if (v9 && objc_msgSend(v9, "dropStreaming") && (a2 & 1) != 0)
    {
      v10 = 17;
    }
    else
    {
      if (objc_msgSend(*(id *)(a1 + 1928), "state") == (id)17)
      {
LABEL_31:
        if (!objc_msgSend(*(id *)(a1 + 1928), "requestStatusAtFirstUserResponse"))
          objc_msgSend(*(id *)(a1 + 1928), "setRequestStatusAtFirstUserResponse:", objc_msgSend(*(id *)(a1 + 1928), "state"));
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v20 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v21 = objc_msgSend(*(id *)(a1 + 1928), "ID");
          v22 = objc_msgSend(*(id *)(a1 + 1928), "state");
          *(_DWORD *)buf = 138543618;
          v62 = v21;
          v63 = 2050;
          v64 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,updated streaming request:%{public}@ to state:%{public}ld", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v41 = qword_1022A0088;
          v42 = objc_msgSend(*(id *)(a1 + 1928), "ID");
          v43 = objc_msgSend(*(id *)(a1 + 1928), "state");
          *(_DWORD *)v59 = 138543618;
          *(_QWORD *)&v59[4] = v42;
          *(_WORD *)&v59[12] = 2050;
          *(_QWORD *)&v59[14] = v43;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 0, "#EED2,handleUserResponse,updated streaming request:%{public}@ to state:%{public}ld", v59, 22);
          v45 = (uint8_t *)v44;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v44);
          if (v45 != buf)
            free(v45);
        }
        v19 = *(id *)(a1 + 1928);
        goto LABEL_60;
      }
      if ((_DWORD)a2)
        v10 = 1;
      else
        v10 = 4;
    }
    objc_msgSend(*(id *)(a1 + 1928), "setState:", v10);
    goto LABEL_31;
  }
  v11 = *(void **)(a1 + 1936);
  if (v11 && objc_msgSend(a3, "isEqual:", objc_msgSend(v11, "ID")))
  {
    objc_msgSend(*(id *)(a1 + 1936), "updateDurationInformationForCA:", a2);
    v12 = *(void **)(a1 + 1992);
    if (v12 && objc_msgSend(v12, "uploadMigitation") == (id)1 && (a2 & 1) != 0)
    {
      v13 = 18;
    }
    else
    {
      if (objc_msgSend(*(id *)(a1 + 1936), "state") == (id)18)
      {
LABEL_50:
        if (!objc_msgSend(*(id *)(a1 + 1936), "requestStatusAtFirstUserResponse"))
          objc_msgSend(*(id *)(a1 + 1936), "setRequestStatusAtFirstUserResponse:", objc_msgSend(*(id *)(a1 + 1936), "state"));
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v25 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v26 = objc_msgSend(*(id *)(a1 + 1936), "state");
          *(_DWORD *)buf = 138543618;
          v62 = a3;
          v63 = 2050;
          v64 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,updated upload request:%{public}@ to state:%{public}ld", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v46 = qword_1022A0088;
          v47 = objc_msgSend(*(id *)(a1 + 1936), "state");
          *(_DWORD *)v59 = 138543618;
          *(_QWORD *)&v59[4] = a3;
          *(_WORD *)&v59[12] = 2050;
          *(_QWORD *)&v59[14] = v47;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v46, 0, "#EED2,handleUserResponse,updated upload request:%{public}@ to state:%{public}ld", v59, 22);
          v49 = (uint8_t *)v48;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v48);
          if (v49 != buf)
            free(v49);
        }
        v19 = *(id *)(a1 + 1936);
        goto LABEL_60;
      }
      if ((_DWORD)a2)
        v13 = 1;
      else
        v13 = 4;
    }
    objc_msgSend(*(id *)(a1 + 1936), "setState:", v13);
    goto LABEL_50;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,no matching current streaming or upload request found. Search in other queues", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    *(_WORD *)v59 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,handleUserResponse,no matching current streaming or upload request found. Search in other queues", v59, 2);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v15 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v16 = objc_msgSend(*(id *)(a1 + 1912), "count");
    *(_DWORD *)buf = 134349056;
    v62 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,there are %{public}ld pending requests in fRequestsPending queue", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v37 = qword_1022A0088;
    v38 = objc_msgSend(*(id *)(a1 + 1912), "count");
    *(_DWORD *)v59 = 134349056;
    *(_QWORD *)&v59[4] = v38;
    LODWORD(v54) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "#EED2,handleUserResponse,there are %{public}ld pending requests in fRequestsPending queue", v59, v54);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  *(_QWORD *)v59 = 0;
  *(_QWORD *)&v59[8] = v59;
  *(_QWORD *)&v59[16] = 0x2020000000;
  v60 = -1;
  v17 = *(void **)(a1 + 1912);
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_100A8FB08;
  v55[3] = &unk_102166578;
  v55[4] = a3;
  v55[5] = v59;
  objc_msgSend(v17, "enumerateObjectsUsingBlock:", v55);
  if ((*(_DWORD *)(*(_QWORD *)&v59[8] + 24) & 0x80000000) != 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v23 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v24 = objc_msgSend(*(id *)(a1 + 1920), "count");
      *(_DWORD *)buf = 134349056;
      v62 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,there are %{public}ld handled requests in fRequestsHandled queue", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v50 = qword_1022A0088;
      v51 = objc_msgSend(*(id *)(a1 + 1920), "count");
      v57 = 134349056;
      v58 = v51;
      LODWORD(v54) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 0, "#EED2,handleUserResponse,there are %{public}ld handled requests in fRequestsHandled queue", &v57, v54);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    v19 = sub_100A8A7C8((id *)a1, a2, a3, &v56);
  }
  else
  {
    v18 = objc_msgSend(*(id *)(a1 + 1912), "objectAtIndex:");
    if (v18)
    {
      v19 = sub_100A8B14C((id *)a1, v18, a2, &v56);
      objc_msgSend(*(id *)(a1 + 1912), "removeObjectAtIndex:", *(int *)(*(_QWORD *)&v59[8] + 24));
    }
    else
    {
      v19 = 0;
    }
  }
  _Block_object_dispose(v59, 8);
LABEL_60:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v27 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v28 = objc_msgSend(v19, "ID");
    v29 = objc_msgSend(v19, "state");
    *(_DWORD *)buf = 138543618;
    v62 = v28;
    v63 = 2050;
    v64 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,returning back to phone app, the updatedRequest:%{public}@ in state:%{public}ld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v30 = qword_1022A0088;
    v31 = objc_msgSend(v19, "ID");
    v32 = objc_msgSend(v19, "state");
    *(_DWORD *)v59 = 138543618;
    *(_QWORD *)&v59[4] = v31;
    *(_WORD *)&v59[12] = 2050;
    *(_QWORD *)&v59[14] = v32;
    LODWORD(v54) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "#EED2,handleUserResponse,returning back to phone app, the updatedRequest:%{public}@ in state:%{public}ld", v59, v54);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  (*(void (**)(uint64_t, id, uint64_t))(a4 + 16))(a4, v19, v56);
  sub_100A768D0(a1);
  sub_100A77908(a1);
  sub_100A81AD8(a1);
}

void sub_100A8E20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A8E23C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  id v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  NSErrorUserInfoKey v12;
  const __CFString *v13;
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,mitigationsCB", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,mitigationsCB", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v5 = *(_QWORD *)(v3 + 1992);
  if (v5)
  {
    v6 = 0;
  }
  else
  {
    v7 = objc_alloc((Class)NSError);
    v12 = NSLocalizedDescriptionKey;
    v13 = CFSTR("Mitigations not available");
    v6 = objc_msgSend(v7, "initWithDomain:code:userInfo:", CFSTR("com.apple.CoreLocation.CLEEDHelperService"), 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));
    v5 = *(_QWORD *)(v3 + 1992);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, id))(a2 + 16))(a2, v5, v6);
}

id sub_100A8E450()
{
  uint64_t v0;
  id v1;
  id v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  CFTypeRef v10;
  int v11;
  id v12;
  uint8_t buf[4];
  id v14;

  v10 = 0;
  v0 = sub_1001FD94C();
  if ((sub_100219F40(v0, (uint64_t)CFSTR("EEDCoexCacheMetricData"), &v10) & 1) != 0)
  {
    v1 = objc_alloc((Class)NSDictionary);
    v2 = objc_msgSend(v1, "initWithDictionary:", v10);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2,readCoexMetricDataFromCache,Co-ex metric data read from cache:%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11 = 138412290;
      v12 = v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readCoexMetricDataFromCache,Co-ex metric data read from cache:%@", &v11, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLEmergencyEED2::readCoexMetricDataFromCache()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,readCoexMetricDataFromCache,Co-ex metric data not cached,early Return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v11) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readCoexMetricDataFromCache,Co-ex metric data not cached,early Return", &v11, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLEmergencyEED2::readCoexMetricDataFromCache()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return 0;
  }
  return v2;
}

void sub_100A8E768(uint64_t a1, void *a2)
{
  id *v3;
  NSObject *v4;
  id v5;
  id v6;
  _BOOL4 v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;

  v3 = *(id **)(a1 + 32);
  dispatch_assert_queue_V2((dispatch_queue_t)objc_msgSend(objc_msgSend(v3[1], "silo"), "queue"));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = v3[249];
    *(_DWORD *)buf = 138543618;
    v24 = a2;
    v25 = 2114;
    v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2CX,NewMitigationReceived:%{public}@, OldMitigation:%{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v11 = v3[249];
    v19 = 138543618;
    v20 = a2;
    v21 = 2114;
    v22 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CX,NewMitigationReceived:%{public}@, OldMitigation:%{public}@", &v19, 22);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeCoexMonitor()_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (a2)
  {
    v6 = v3[249];
    v7 = !v6
      || (objc_msgSend(v6, "anyChangeToNewRequestsComparedTo:", a2) & 1) != 0
      || objc_msgSend(v3[249], "needsRequestStateUpdateComparedTo:", a2);

    v8 = objc_msgSend(objc_alloc((Class)CLEEDMitigation), "initWithStreamingAllowed:framerateFps:bitrateKbps:dropStreaming:uploadAllowed:uploadMitigation:source:", objc_msgSend(a2, "newStreamingAllowed"), objc_msgSend(a2, "streamingFPS"), objc_msgSend(a2, "streamingBitrate"), objc_msgSend(a2, "dropStreaming"), objc_msgSend(a2, "newUploadAllowed"), objc_msgSend(a2, "uploadMigitation"), objc_msgSend(a2, "source"));
    v3[249] = v8;
    if (v7)
    {
      sub_100A8ECB4(v3);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2CX,UpdateControlData", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v19) = 0;
        LODWORD(v18) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CX,UpdateControlData", &v19, v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeCoexMonitor()_block_invoke", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      sub_100A768D0((uint64_t)v3);
      sub_100A77908((uint64_t)v3);
      sub_100A81AD8((uint64_t)v3);
      v8 = v3[249];
    }
    objc_msgSend(v3[234], "notifyMitigationNeeded:", v8);
    objc_msgSend(v3[246], "processMediaForMitigations:", v3[249]);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2CX,initializeCoexMonitor, callback, new mitigation is null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v19) = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2CX,initializeCoexMonitor, callback, new mitigation is null", &v19, v18);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeCoexMonitor()_block_invoke", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_100A8ECB4(id *a1)
{
  id v2;
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  id v20;
  const char *v21;
  uint8_t *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  id v26;
  id v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  id v35;
  id v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  const char *v41;
  uint8_t *v42;
  uint64_t v43;
  _QWORD v44[5];
  int v45;
  id v46;
  __int16 v47;
  id v48;
  _BYTE v49[24];
  int v50;
  uint8_t buf[4];
  id v52;
  __int16 v53;
  id v54;

  v2 = a1[249];
  if (v2 && ((objc_msgSend(v2, "dropStreaming") & 1) != 0 || objc_msgSend(a1[249], "uploadMigitation")))
  {
    if (objc_msgSend(a1[249], "dropStreaming"))
    {
      v3 = a1[241];
      if (v3)
      {
        objc_msgSend(v3, "updateDurationInformationForCA:", 0);
        objc_msgSend(a1[241], "setState:", 17);
        if (!objc_msgSend(a1[241], "requestStatusAtFirstUserResponse"))
          objc_msgSend(a1[241], "setRequestStatusAtFirstUserResponse:", objc_msgSend(a1[241], "state"));
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v4 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v5 = objc_msgSend(a1[241], "ID");
          v6 = objc_msgSend(a1[241], "state");
          *(_DWORD *)buf = 138543618;
          v52 = v5;
          v53 = 2050;
          v54 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,updated streaming request:%{public}@ to state:%{public}ld", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v25 = qword_1022A0088;
          v26 = objc_msgSend(a1[241], "ID");
          v27 = objc_msgSend(a1[241], "state");
          *(_DWORD *)v49 = 138543618;
          *(_QWORD *)&v49[4] = v26;
          *(_WORD *)&v49[12] = 2050;
          *(_QWORD *)&v49[14] = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 0, "#EED2,updateRequestForMitigation,updated streaming request:%{public}@ to state:%{public}ld", v49, 22);
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        objc_msgSend(a1[240], "addObject:", a1[241]);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v7 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v8 = objc_msgSend(a1[241], "ID");
          *(_DWORD *)buf = 138543362;
          v52 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,fCurrentStreamingRequest:%{public}@ moved to fRequestsHandled queue", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v30 = qword_1022A0088;
          v31 = objc_msgSend(a1[241], "ID");
          *(_DWORD *)v49 = 138543362;
          *(_QWORD *)&v49[4] = v31;
          LODWORD(v43) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "#EED2,updateRequestForMitigation,fCurrentStreamingRequest:%{public}@ moved to fRequestsHandled queue", v49, v43);
          v33 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }

        a1[241] = 0;
      }
      *(_QWORD *)v49 = 0;
      *(_QWORD *)&v49[8] = v49;
      *(_QWORD *)&v49[16] = 0x2020000000;
      v50 = -1;
      v9 = a1[239];
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = sub_100A8F8E4;
      v44[3] = &unk_1021666C0;
      v44[4] = v49;
      objc_msgSend(v9, "enumerateObjectsUsingBlock:", v44);
      if ((*(_DWORD *)(*(_QWORD *)&v49[8] + 24) & 0x80000000) == 0)
      {
        v10 = objc_msgSend(a1[239], "objectAtIndex:");
        objc_msgSend(v10, "setState:", 17);
        if (!objc_msgSend(v10, "requestStatusAtFirstUserResponse"))
          objc_msgSend(v10, "setRequestStatusAtFirstUserResponse:", objc_msgSend(v10, "state"));
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v11 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v12 = objc_msgSend(v10, "ID");
          v13 = objc_msgSend(v10, "state");
          *(_DWORD *)buf = 138543618;
          v52 = v12;
          v53 = 2050;
          v54 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,updated pending streaming request:%{public}@ to state:%{public}ld", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v34 = qword_1022A0088;
          v35 = objc_msgSend(v10, "ID");
          v36 = objc_msgSend(v10, "state");
          v45 = 138543618;
          v46 = v35;
          v47 = 2050;
          v48 = v36;
          LODWORD(v43) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 0, "#EED2,updateRequestForMitigation,updated pending streaming request:%{public}@ to state:%{public}ld", &v45, v43);
          v38 = (uint8_t *)v37;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v37);
          if (v38 != buf)
            free(v38);
        }
        objc_msgSend(a1[240], "addObject:", v10);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v14 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v15 = objc_msgSend(v10, "ID");
          *(_DWORD *)buf = 138543362;
          v52 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation, pendingRequest:%{public}@ moved to fRequestsHandled queue", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          v39 = qword_1022A0088;
          v40 = objc_msgSend(v10, "ID");
          v45 = 138543362;
          v46 = v40;
          LODWORD(v43) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 0, "#EED2,updateRequestForMitigation, pendingRequest:%{public}@ moved to fRequestsHandled queue", &v45, v43);
          v42 = (uint8_t *)v41;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v41);
          if (v42 != buf)
            free(v42);
        }
        objc_msgSend(a1[239], "removeObjectAtIndex:", *(int *)(*(_QWORD *)&v49[8] + 24));
      }
      _Block_object_dispose(v49, 8);
    }
    if (objc_msgSend(a1[249], "uploadMigitation") != (id)1)
      return;
    v16 = a1[242];
    if (!v16 || objc_msgSend(v16, "state") != (id)1)
      return;
    objc_msgSend(a1[242], "setState:", 18);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v18 = objc_msgSend(a1[242], "ID");
      *(_DWORD *)buf = 138543362;
      v52 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,fCurrentUploadRequest:%{public}@ state updated to MitigationDelayed", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v19 = qword_1022A0088;
    v20 = objc_msgSend(a1[242], "ID");
    *(_DWORD *)v49 = 138543362;
    *(_QWORD *)&v49[4] = v20;
    LODWORD(v43) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "#EED2,updateRequestForMitigation,fCurrentUploadRequest:%{public}@ state updated to MitigationDelayed", v49, v43);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v21);
    if (v22 == buf)
      return;
LABEL_55:
    free(v22);
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v23 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,request state update not needed, early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    *(_WORD *)v49 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,updateRequestForMitigation,request state update not needed, early return", v49, 2);
    v22 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v24);
    if (v22 != buf)
      goto LABEL_55;
  }
}

void sub_100A8F6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100A8F710(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 2016);
    if (v4)

    *(_QWORD *)(v3 + 2016) = a2;
    sub_100A63CC8(v3 + 1536, 24);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2CX,fEEDCoexMonitor,coexMetricUpdateCB, nil coexMetricDict, early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2CX,fEEDCoexMonitor,coexMetricUpdateCB, nil coexMetricDict, early return", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeCoexMonitor()_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100A8F8E4(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  NSObject *v8;
  id v9;
  int v10;
  uint64_t v11;
  id v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  id v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  int v23;

  if (objc_msgSend(a2, "type") == (id)1)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(a2, "ID");
      v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      *(_DWORD *)buf = 138543618;
      v21 = v9;
      v22 = 1026;
      v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,found matching pending streaming request ID:%{public}@ at index:%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11 = qword_1022A0088;
      v12 = objc_msgSend(a2, "ID");
      v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v16 = 138543618;
      v17 = v12;
      v18 = 1026;
      v19 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "#EED2,updateRequestForMitigation,found matching pending streaming request ID:%{public}@ at index:%{public}d", &v16, 18);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()_block_invoke", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    *a4 = 1;
  }
}

void sub_100A8FB08(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  int v21;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqual:", objc_msgSend(a2, "ID")))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 138543618;
      v19 = v8;
      v20 = 1026;
      v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,found matching pending request for request ID:%{public}@ at index:%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v14 = 138543618;
      v15 = v10;
      v16 = 1026;
      v17 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,handleUserResponse,found matching pending request for request ID:%{public}@ at index:%{public}d", &v14, 18);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *a4 = 1;
  }
}

void sub_100A8FD18(uint64_t a1)
{
  CLEEDMediaServiceHandler *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];
  uint8_t buf[1640];

  if (!*(_QWORD *)(a1 + 1968))
  {
    v9[4] = a1;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100A8FF58;
    v10[3] = &unk_102130FC8;
    v10[4] = a1;
    v8[4] = a1;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100A90120;
    v9[3] = &unk_10212ECA0;
    v7[4] = a1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100A902E4;
    v8[3] = &unk_1021666E0;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100A90498;
    v7[3] = &unk_102166700;
    v2 = -[CLEEDMediaServiceHandler initWithUniverse:serviceCompletionCB:getMitigationCB:getUploadConfigCB:errorCB:]([CLEEDMediaServiceHandler alloc], "initWithUniverse:serviceCompletionCB:getMitigationCB:getUploadConfigCB:errorCB:", *(_QWORD *)(a1 + 8), v9, v8, v7, v10);
    *(_QWORD *)(a1 + 1968) = v2;
    if (!v2)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v3 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2,initializeMediaService,EEDMediaService initialization failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v6[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,initializeMediaService,EEDMediaService initialization failed", v6, 2);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeMediaService()", "%s\n", v4);
        if (v5 != buf)
          free(v5);
      }
    }
  }
}

void sub_100A8FF58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2,initializeMediaService,received mediaServiceErrorCB,error:%{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v7 = 138543362;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,initializeMediaService,received mediaServiceErrorCB,error:%{public}@", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  objc_msgSend(*(id *)(v3 + 1968), "cleanup");

  *(_QWORD *)(v3 + 1968) = 0;
  sub_100A7185C(v3);
}

void sub_100A90120(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#EED2,initializeMediaService,received mediaServiceCompletionCB", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 1, "#EED2,initializeMediaService,received mediaServiceCompletionCB", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(_DWORD *)(v1 + 1976) = 0;
  if (!-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", CFSTR("/private/var/mobile/Library/CLEEDMediaService/CLEEDMSCache")))
  {
    objc_msgSend(*(id *)(v1 + 1968), "cleanup");

    *(_QWORD *)(v1 + 1968) = 0;
  }
}

uint64_t sub_100A902E4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(v1 + 1992);
    *(_DWORD *)buf = 138543362;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#EED2,initializeMediaService,received getMitigationCB, mitigation:%{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = *(_QWORD *)(v1 + 1992);
    v8 = 138543362;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 1, "#EED2,initializeMediaService,received getMitigationCB, mitigation:%{public}@", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return *(_QWORD *)(v1 + 1992);
}

id sub_100A90498(uint64_t a1)
{
  uint64_t *v1;
  id v2;
  id v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  v1 = sub_100A57ECC((int *)(*(_QWORD *)(a1 + 32) + 1448));
  v2 = objc_msgSend(objc_alloc((Class)CLEEDUploadServiceConfig), "initWithNumInflightUploads:maxUploadFileSizeMB:maxUploadQuotaMB:", (int)v1[48], v1[48] >> 32, *((int *)v1 + 98));
  v3 = v2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#EED2,initializeMediaService,received getUploadConfigCB, uploadConfig:%{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v8 = 138543362;
    v9 = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 1, "#EED2,initializeMediaService,received getUploadConfigCB, uploadConfig:%{public}@", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return v2;
}

void sub_100A90678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint8_t *v12;
  _QWORD block[6];
  int v14;
  id v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102166788);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "ID");
    *(_DWORD *)buf = 138543618;
    v19 = v6;
    v20 = 2114;
    v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,handleMediaUploadRequest,processMedia request for ID:%{public}@ returned :%{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    v10 = objc_msgSend(*(id *)(a1 + 32), "ID");
    v14 = 138543618;
    v15 = v10;
    v16 = 2114;
    v17 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#EED2,handleMediaUploadRequest,processMedia request for ID:%{public}@ returned :%{public}@", &v14, 22);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) = a2;
  v7 = objc_msgSend(objc_msgSend(*(id *)(v4 + 8), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A908B0;
  block[3] = &unk_1021629E0;
  v8 = *(_QWORD *)(a1 + 40);
  block[4] = a2;
  block[5] = v8;
  dispatch_async(v7, block);
}

void sub_100A908B0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
}

void sub_100A908E0(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  uint8_t *v13;
  int v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v4 = objc_msgSend(a2, "getRequestDict");
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v17 = objc_msgSend(a2, "type");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added pending request of type:%{public}ld to pending array of cacheDataDict", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v6 = qword_1022A0088;
      v14 = 134349056;
      v15 = objc_msgSend(a2, "type");
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#EED2,storeEEDDataToCache,Added pending request of type:%{public}ld to pending array of cacheDataDict", &v14, 12);
      v9 = v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n", v7);
LABEL_19:
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v17 = objc_msgSend(a2, "type");
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fRequestsPending,nil dict for request type:%{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11 = qword_1022A0088;
      v14 = 134349056;
      v15 = objc_msgSend(a2, "type");
      v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "#EED2,storeEEDDataToCache,fRequestsPending,nil dict for request type:%{public}ld", &v14, 12);
      v9 = v13;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n", v12);
      goto LABEL_19;
    }
  }
}

void sub_100A90C00(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  uint8_t *v13;
  int v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v4 = objc_msgSend(a2, "getRequestDict");
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v17 = objc_msgSend(a2, "type");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added handled request of type:%{public}ld to handled array of cacheDataDict", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v6 = qword_1022A0088;
      v14 = 134349056;
      v15 = objc_msgSend(a2, "type");
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#EED2,storeEEDDataToCache,Added handled request of type:%{public}ld to handled array of cacheDataDict", &v14, 12);
      v9 = v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n", v7);
LABEL_19:
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v17 = objc_msgSend(a2, "type");
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fRequestsHandled,ignoring request type:%{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v11 = qword_1022A0088;
      v14 = 134349056;
      v15 = objc_msgSend(a2, "type");
      v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "#EED2,storeEEDDataToCache,fRequestsHandled,ignoring request type:%{public}ld", &v14, 12);
      v9 = v13;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n", v12);
      goto LABEL_19;
    }
  }
}

BOOL sub_100A90F20(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  NSObject *v5;
  _BOOL8 result;
  uint8_t *v7;
  double v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  NSObject *v39;
  NSObject *v40;
  _BOOL4 v41;
  const char *v42;
  uint8_t *v43;
  double v44;
  uint8_t *v45;
  uint64_t v46;
  void *v47;
  uint8_t buf[1640];

  v47 = 0;
  v2 = sub_1001FD94C();
  if ((sub_100219F40(v2, (uint64_t)CFSTR("EEDCacheMetricData"), (CFTypeRef *)&v47) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 2088))
    {
      v3 = v47;
      if (byte_1023064D7 >= 0)
        v4 = &qword_1023064C0;
      else
        v4 = (uint64_t *)qword_1023064C0;
      if (objc_msgSend(objc_msgSend(v47, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)), "intValue") == 4&& sub_100A6F8CC(a1) == 3)
      {
        sub_100A72598();
        sub_100A72884();
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v5 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDMetricDataFromCache,ignore cached data and clear it as new session has started in the interim. Early Return", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v46) = 0;
          v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDMetricDataFromCache,ignore cached data and clear it as new session has started in the interim. Early Return", &v46, 2, v46);
LABEL_24:
          v10 = v7;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDMetricDataFromCache()", "%s\n", v8);
LABEL_122:
          if (v10 != buf)
            free(v10);
          return 0;
        }
      }
      else
      {
        if (byte_102306597 >= 0)
          v11 = &qword_102306580;
        else
          v11 = (uint64_t *)qword_102306580;
        **(_DWORD **)(a1 + 2088) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11)), "intValue");
        if (byte_1023065AF >= 0)
          v12 = &qword_102306598;
        else
          v12 = (uint64_t *)qword_102306598;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 4) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)), "intValue");
        if (byte_1023065C7 >= 0)
          v13 = &qword_1023065B0;
        else
          v13 = (uint64_t *)qword_1023065B0;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 8) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13)), "intValue");
        if (byte_1023065DF >= 0)
          v14 = &qword_1023065C8;
        else
          v14 = (uint64_t *)qword_1023065C8;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 12) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14)), "intValue");
        if (byte_1023065F7 >= 0)
          v15 = &qword_1023065E0;
        else
          v15 = (uint64_t *)qword_1023065E0;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 16) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15)), "intValue");
        if (byte_10230660F >= 0)
          v16 = &qword_1023065F8;
        else
          v16 = (uint64_t *)qword_1023065F8;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 20) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16)), "intValue");
        if (byte_102306627 >= 0)
          v17 = &qword_102306610;
        else
          v17 = (uint64_t *)qword_102306610;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 24) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17)), "intValue");
        if (byte_10230663F >= 0)
          v18 = &qword_102306628;
        else
          v18 = (uint64_t *)qword_102306628;
        objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18)), "floatValue");
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 28) = v19;
        if (byte_102306657 >= 0)
          v20 = &qword_102306640;
        else
          v20 = (uint64_t *)qword_102306640;
        objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20)), "floatValue");
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 32) = v21;
        if (byte_10230666F >= 0)
          v22 = &qword_102306658;
        else
          v22 = (uint64_t *)qword_102306658;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 36) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22)), "intValue");
        if (byte_102306687 >= 0)
          v23 = &qword_102306670;
        else
          v23 = (uint64_t *)qword_102306670;
        *(_BYTE *)(*(_QWORD *)(a1 + 2088) + 40) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23)), "BOOLValue");
        if (byte_10230669F >= 0)
          v24 = &qword_102306688;
        else
          v24 = (uint64_t *)qword_102306688;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 44) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24)), "intValue");
        if (byte_1023066B7 >= 0)
          v25 = &qword_1023066A0;
        else
          v25 = (uint64_t *)qword_1023066A0;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 52) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25)), "intValue");
        if (byte_1023066CF >= 0)
          v26 = &qword_1023066B8;
        else
          v26 = (uint64_t *)qword_1023066B8;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 56) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26)), "intValue");
        if (byte_1023066E7 >= 0)
          v27 = &qword_1023066D0;
        else
          v27 = (uint64_t *)qword_1023066D0;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 60) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27)), "intValue");
        if (byte_1023066FF >= 0)
          v28 = &qword_1023066E8;
        else
          v28 = (uint64_t *)qword_1023066E8;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 64) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28)), "intValue");
        if (byte_102306717 >= 0)
          v29 = &qword_102306700;
        else
          v29 = (uint64_t *)qword_102306700;
        *(_QWORD *)(*(_QWORD *)(a1 + 2088) + 72) = (int)objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29)), "intValue");
        if (byte_10230672F >= 0)
          v30 = &qword_102306718;
        else
          v30 = (uint64_t *)qword_102306718;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 80) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30)), "intValue");
        if (byte_102306747 >= 0)
          v31 = &qword_102306730;
        else
          v31 = (uint64_t *)qword_102306730;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 84) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31)), "intValue");
        if (byte_10230675F >= 0)
          v32 = &qword_102306748;
        else
          v32 = (uint64_t *)qword_102306748;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 88) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v32)), "intValue");
        if (byte_102306777 >= 0)
          v33 = &qword_102306760;
        else
          v33 = (uint64_t *)qword_102306760;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 92) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v33)), "intValue");
        if (byte_10230678F >= 0)
          v34 = &qword_102306778;
        else
          v34 = (uint64_t *)qword_102306778;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 96) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34)), "intValue");
        if (byte_1023067A7 >= 0)
          v35 = &qword_102306790;
        else
          v35 = (uint64_t *)qword_102306790;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 100) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v35)), "intValue");
        if (byte_1023067BF >= 0)
          v36 = &qword_1023067A8;
        else
          v36 = (uint64_t *)qword_1023067A8;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 104) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v36)), "intValue");
        if (byte_1023067D7 >= 0)
          v37 = &qword_1023067C0;
        else
          v37 = (uint64_t *)qword_1023067C0;
        *(_DWORD *)(*(_QWORD *)(a1 + 2088) + 108) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v37)), "intValue");
        if (byte_1023067EF >= 0)
          v38 = &qword_1023067D8;
        else
          v38 = (uint64_t *)qword_1023067D8;
        *(_BYTE *)(*(_QWORD *)(a1 + 2088) + 112) = objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v38)), "BOOLValue");
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        v39 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDMetricDataFromCache,EED metric data successfully read from cache", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102166788);
          LOWORD(v46) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDMetricDataFromCache,EED metric data successfully read from cache", &v46, 2);
          v43 = (uint8_t *)v42;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDMetricDataFromCache()", "%s\n", v42);
          if (v43 != buf)
            free(v43);
        }
        return 1;
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      v40 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#EED2,readEEDMetricDataFromCache,nil fEED2Report,early return", buf, 2u);
      }
      v41 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v41)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102166788);
        LOWORD(v46) = 0;
        v44 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2,readEEDMetricDataFromCache,nil fEED2Report,early return", &v46, 2);
        v10 = v45;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::readEEDMetricDataFromCache()", "%s\n", v44);
        goto LABEL_122;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102166788);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDMetricDataFromCache,EED metric data not cached,early Return", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102166788);
      LOWORD(v46) = 0;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,readEEDMetricDataFromCache,EED metric data not cached,early Return", &v46, 2, v46);
      goto LABEL_24;
    }
  }
  return result;
}

BOOL sub_100A91A10(uint64_t a1)
{
  return sub_100A5723C(a1 + 1448);
}

void sub_100A91A18(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_100A91A44(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  v5 = (_OWORD *)(a1 + 8);
  v6 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v8 = *(_DWORD *)(a3 + 56);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a3 + 60);
  *(_DWORD *)(a1 + 64) = v8;
  v9 = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  v10 = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  v11 = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  v12 = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a3 + 152);
  *(_OWORD *)(a1 + 144) = v12;
  sub_10012D080(a1 + 168, (uint64_t *)(a3 + 160));
  v13 = *(_OWORD *)(a3 + 200);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a3 + 216);
  *(_OWORD *)(a1 + 208) = v13;
  *(_QWORD *)(a3 + 208) = 0;
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 200) = 0;
  v14 = *(_OWORD *)(a3 + 272);
  v15 = *(_OWORD *)(a3 + 288);
  v16 = *(_OWORD *)(a3 + 256);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a3 + 240);
  v5[17] = v14;
  v5[18] = v15;
  v5[16] = v16;
  v17 = *(_OWORD *)(a3 + 352);
  v19 = *(_OWORD *)(a3 + 304);
  v18 = *(_OWORD *)(a3 + 320);
  v5[21] = *(_OWORD *)(a3 + 336);
  v5[22] = v17;
  v5[19] = v19;
  v5[20] = v18;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a3 + 224);
  v21 = *(_OWORD *)(a3 + 384);
  v20 = *(_OWORD *)(a3 + 400);
  v22 = *(_OWORD *)(a3 + 368);
  *(_OWORD *)(a1 + 417) = *(_OWORD *)(a3 + 409);
  v5[24] = v21;
  v5[25] = v20;
  v5[23] = v22;
  v23 = *(_OWORD *)(a3 + 432);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a3 + 448);
  v5[27] = v23;
  *(_QWORD *)(a3 + 440) = 0;
  *(_QWORD *)(a3 + 448) = 0;
  *(_QWORD *)(a3 + 432) = 0;
  sub_10012D080(a1 + 464, (uint64_t *)(a3 + 456));
  v24 = *(_OWORD *)(a3 + 496);
  *(_OWORD *)((char *)v5 + 508) = *(_OWORD *)(a3 + 508);
  v5[31] = v24;
  return a1;
}

uint64_t sub_100A91BC8(uint64_t a1)
{
  sub_100A9224C(a1 + 456);
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  sub_100A921D8(a1 + 160);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100A91C68(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100A91C94(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    sub_100A91D08(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_100A91CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100A921D8(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100A91D08(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100A91F88(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100A92130((uint64_t)v25, 0);
  return i;
}

void sub_100A91F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100A92130((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_100A91F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 16;
  v8 = operator new(0x78uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = sub_100A91FFC((char *)v8 + 16, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100A91FE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100A92130(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100A91FFC(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  __dst[72] = *((_BYTE *)a2 + 72);
  v7 = __dst + 80;
  if (*((char *)a2 + 103) < 0)
  {
    sub_100115CE4(v7, *((void **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v8 = a2[5];
    *((_QWORD *)__dst + 12) = *((_QWORD *)a2 + 12);
    *(_OWORD *)v7 = v8;
  }
  return __dst;
}

void sub_100A920E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100A92130(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100A92174((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_100A92174(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_100A921D8(uint64_t a1)
{
  void *v2;

  sub_100A92210(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100A92210(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100A92174((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100A9224C(uint64_t a1)
{
  void *v2;

  sub_100A92284(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100A92284(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100356E88((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100A922C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100A92210(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t sub_100A92314(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  const void **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v2 = *(uint64_t **)(a1 + 16);
  if (!v2)
    return 1;
  do
  {
    v4 = (const void **)(v2 + 2);
    result = (uint64_t)sub_1001986C8(a2, (unsigned __int8 *)v2 + 16);
    if (!result)
      break;
    v6 = result;
    v7 = *((unsigned __int8 *)v2 + 39);
    if ((v7 & 0x80u) == 0)
      v8 = *((unsigned __int8 *)v2 + 39);
    else
      v8 = v2[3];
    v9 = *(unsigned __int8 *)(result + 39);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(result + 24);
    if (v8 != v9)
      return 0;
    if (v10 >= 0)
      v11 = (unsigned __int8 *)(result + 16);
    else
      v11 = *(unsigned __int8 **)(result + 16);
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v4, v11, v2[3]))
        return 0;
    }
    else if (*((_BYTE *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v11)
      {
        v4 = (const void **)((char *)v4 + 1);
        ++v11;
        if (!--v7)
          goto LABEL_19;
      }
      return 0;
    }
LABEL_19:
    v12 = *((unsigned __int8 *)v2 + 63);
    if ((v12 & 0x80u) == 0)
      v13 = *((unsigned __int8 *)v2 + 63);
    else
      v13 = v2[6];
    v14 = *(unsigned __int8 *)(v6 + 63);
    v15 = (char)v14;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(v6 + 48);
    if (v13 != v14)
      return 0;
    v16 = (const void **)(v2 + 5);
    v19 = *(unsigned __int8 **)(v6 + 40);
    v18 = (unsigned __int8 *)(v6 + 40);
    v17 = v19;
    if (v15 >= 0)
      v20 = v18;
    else
      v20 = v17;
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*v16, v20, v2[6]))
        return 0;
    }
    else if (*((_BYTE *)v2 + 63))
    {
      while (*(unsigned __int8 *)v16 == *v20)
      {
        v16 = (const void **)((char *)v16 + 1);
        ++v20;
        if (!--v12)
          goto LABEL_34;
      }
      return 0;
    }
LABEL_34:
    v2 = (uint64_t *)*v2;
    result = 1;
  }
  while (v2);
  return result;
}

void sub_100A92474(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v4 + 5));
        v10 = (_QWORD *)*v8;
        sub_100A92578(a1, v8);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_100A92284((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_100A929F0(a1, (__int128 *)v4 + 1);
    v4 = (uint64_t *)*v4;
  }
}

void sub_100A92548(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_100A92284(v1, v2);
  __cxa_rethrow();
}

void sub_100A92564(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_100A92578(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = sub_10025A024((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  v6 = sub_100A925D8((uint64_t)a1, v5, v4);
  sub_10012923C(a1, a2, v6);
  return a2;
}

unsigned __int8 *sub_100A925D8(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_100A92748(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    v18 = *(unsigned __int8 **)v17;
    if (*(_QWORD *)v17)
    {
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)v18 + 1);
        if (v15 > 1)
        {
          v21 = *((_QWORD *)v18 + 1);
          if (v20 >= v8)
            v21 = v20 % v8;
        }
        else
        {
          v21 = v20 & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = v20 == a2 ? sub_10025A4CC(v6, v18 + 16, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0)
          break;
        v19 |= v22;
        v17 = *(unsigned __int8 **)v17;
        v18 = *(unsigned __int8 **)v17;
      }
      while (*(_QWORD *)v17);
    }
  }
  return v17;
}

void sub_100A92748(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_100A92824(a1, prime);
  }
}

void sub_100A92824(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      sub_10025955C();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (unsigned __int8 **)v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = *(unsigned __int8 **)v12;
            if (*(_QWORD *)v12)
            {
              v15 = v12;
              while (1)
              {
                v16 = sub_10025A4CC(a1 + 32, v12 + 16, v14 + 16);
                v17 = *(unsigned __int8 **)v15;
                if (!v16)
                  break;
                v14 = *(unsigned __int8 **)v17;
                v15 = *(unsigned __int8 **)v15;
                if (!*(_QWORD *)v17)
                  goto LABEL_32;
              }
              v14 = *(unsigned __int8 **)v15;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *(_QWORD *)v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (unsigned __int8 **)v12;
            v8 = v13;
          }
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_100A929F0(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v5[3];

  sub_100A92A58((uint64_t)a1, a2, (uint64_t)v5);
  v3 = sub_100A92578(a1, v5[0]);
  v5[0] = 0;
  sub_100A92B7C((uint64_t)v5, 0);
  return v3;
}

void sub_100A92A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100A92B7C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_100A92A58@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x40uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_100A92AE8((char *)v7 + 16, a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_10025A024(a1 + 24, (uint64_t)v7 + 16);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_100A92AD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100A92B7C(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100A92AE8(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_100A92B60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100A92B7C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100356E88((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *sub_100A92BC0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_100A92E58(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_100A92B7C((uint64_t)v26, 0);
  return i;
}

void sub_100A92E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100A92B7C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_100A92E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100A92EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100A92B7C(v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100A92EF8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_100A93190(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_100A92130((uint64_t)v26, 0);
  return i;
}

void sub_100A93178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100A92130((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_100A93190@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x78uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = v8 + 16;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_100115CE4(v9, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v9 = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100A93228(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100A92130(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100A93240(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100A92284(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t sub_100A93294(uint64_t a1)
{
  void *v2;

  sub_100A932CC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100A932CC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100A91BC8((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_100A93308(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 16;
  v13 = operator new(0x228uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  sub_100A9355C((uint64_t)(v13 + 2), a3);
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  i = (uint64_t *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100A936E8((uint64_t)v23, 0);
  return i;
}

void sub_100A93544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100A936E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100A9355C(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = (_OWORD *)(a1 + 8);
  v6 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v8;
  v9 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v10 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v11 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v12 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v12;
  sub_10012D080(a1 + 168, (uint64_t *)(a2 + 168));
  v13 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v13;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v14 = v4[16];
  v15 = v4[17];
  v16 = v4[18];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v5[17] = v15;
  v5[18] = v16;
  v5[16] = v14;
  v17 = v4[22];
  v19 = v4[19];
  v18 = v4[20];
  v5[21] = v4[21];
  v5[22] = v17;
  v5[19] = v19;
  v5[20] = v18;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  v21 = v4[24];
  v20 = v4[25];
  v22 = v4[23];
  *(_OWORD *)(a1 + 417) = *(_OWORD *)(a2 + 417);
  v5[24] = v21;
  v5[25] = v20;
  v5[23] = v22;
  v23 = v4[27];
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  v5[27] = v23;
  *(_QWORD *)(a2 + 448) = 0;
  *(_QWORD *)(a2 + 456) = 0;
  *((_QWORD *)v4 + 54) = 0;
  sub_10012D080(a1 + 464, (uint64_t *)(a2 + 464));
  v24 = v4[31];
  *(_OWORD *)((char *)v5 + 508) = *(_OWORD *)((char *)v4 + 508);
  v5[31] = v24;
  return a1;
}

void sub_100A936E8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100A91BC8((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

void sub_100A93730(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100A93758(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100A93798(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
      goto LABEL_6;
LABEL_21:
    sub_101918014();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_100259584((uint64_t)&v12, v9 + 1);
  if (v13 >= 0)
    v10 = &v12;
  else
    v10 = (__int128 *)v12;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(a1 + 112) = v13;
}

void sub_100A9391C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

void sub_100A9395C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100A93988(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_100A939F0(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_100A939F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_100A6F304(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_100A93A6C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1012C29FC();
    operator delete();
  }
  return result;
}

uint64_t sub_100A93AA8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101058164();
    operator delete();
  }
  return result;
}

void sub_100A93AE8()
{
  operator delete();
}

_QWORD *sub_100A93AFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102166858;
  result[1] = v3;
  return result;
}

uint64_t sub_100A93B30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102166858;
  a2[1] = v2;
  return result;
}

uint64_t sub_100A93B4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 1448;
}

uint64_t sub_100A93B58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100A93B94()
{
}

void sub_100A93BA4()
{
  operator delete();
}

_QWORD *sub_100A93BB8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021668E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100A93BEC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021668E8;
  a2[1] = v2;
  return result;
}

void sub_100A93C08(uint64_t a1, void **a2, id **a3)
{
  sub_100A82CC0(*(__SecKey ***)(a1 + 8), *a2, *a3);
}

uint64_t sub_100A93C18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100A93C54()
{
}

uint64_t sub_100A93C60(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_100259694();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1002952D4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[80 * v3];
  v13 = &v7[80 * v6];
  sub_100858958((_DWORD)a1 + 16, v11, a2);
  v12 = v11 + 80;
  sub_100A93D6C(a1, &v10);
  v8 = a1[1];
  sub_100A93F40(&v10);
  return v8;
}

void sub_100A93D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100A93F40((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A93D6C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100A93DE0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100A93DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v8 - 64) = *(_QWORD *)(a3 - 64);
      *(_OWORD *)(v8 - 80) = v9;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v10 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v8 - 56) = v10;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_BYTE *)(v8 - 32) = *(_BYTE *)(a3 - 32);
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v8 - 24) = v11;
      v8 -= 80;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v8;
    v12 = v17;
  }
  v15 = 1;
  sub_100A93EBC((uint64_t)v14);
  return v12;
}

uint64_t sub_100A93EBC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100A93EF0((uint64_t *)a1);
  return a1;
}

void sub_100A93EF0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_10085822C(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_100A93F40(void **a1)
{
  sub_100A93F70(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100A93F70(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    sub_10085822C(v4, i - 80);
  }
}

uint64_t sub_100A93FB4(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_100259694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100313718((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[48 * v3];
  v13 = &v7[48 * v6];
  sub_100858DBC((_DWORD)a1 + 16, v11, a2);
  v12 = v11 + 48;
  sub_100A940C0(a1, &v10);
  v8 = a1[1];
  sub_1003B0424(&v10);
  return v8;
}

void sub_100A940AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003B0424((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A940C0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100A94134((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100A94134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  sub_100A941E8((uint64_t)v13);
  return a6;
}

uint64_t sub_100A941E8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1003B03D4((uint64_t *)a1);
  return a1;
}

uint64_t sub_100A9421C(uint64_t a1)
{
  return sub_100A63CC8(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_100A94230()
{
  operator delete();
}

_QWORD *sub_100A94244(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102166978;
  result[1] = v3;
  return result;
}

uint64_t sub_100A94278(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102166978;
  a2[1] = v2;
  return result;
}

uint64_t sub_100A94294(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 1448;
}

uint64_t sub_100A942A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100A942DC()
{
}

void sub_100A942EC()
{
  operator delete();
}

_QWORD *sub_100A94300(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021669F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100A94334(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021669F8;
  a2[1] = v2;
  return result;
}

void sub_100A94350(uint64_t a1, void **a2, id **a3)
{
  sub_100A82CC0(*(__SecKey ***)(a1 + 8), *a2, *a3);
}

uint64_t sub_100A94360(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100A9439C()
{
}

void sub_100A943AC()
{
  operator delete();
}

_QWORD *sub_100A943C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102166A78;
  result[1] = v3;
  return result;
}

uint64_t sub_100A943F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102166A78;
  a2[1] = v2;
  return result;
}

void sub_100A94410(uint64_t a1, int *a2, void **a3, void **a4)
{
  sub_100A852AC(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t sub_100A94424(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100A94460()
{
}

void sub_100A94470()
{
  operator delete();
}

_QWORD *sub_100A94484(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102166B08;
  result[1] = v3;
  return result;
}

uint64_t sub_100A944B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102166B08;
  a2[1] = v2;
  return result;
}

uint64_t sub_100A944D4(uint64_t a1, int *a2, void **a3, void **a4)
{
  int v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 1960) = 0;
  return sub_100A87ABC(v7, v4, v5, v6);
}

uint64_t sub_100A944EC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100A94528()
{
}

uint64_t sub_100A94534()
{
  sub_1015A2E04(&qword_102306460, "Emergency SOS");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306460, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306478, "/System/Library/LocationBundles/Emergency SOS.bundle");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306478, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102311150, "https://gateway.icloud.com/eedservice/Device/LIS/Update");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102311150, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102311168, "https://gateway.icloud.com/eedservice/Device/ADR/Update");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102311168, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102311180, "https://gateway.icloud.com/eedservice/Device/Control/Update");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102311180, (void *)&_mh_execute_header);
  sub_1015A2E04(byte_102311198, "https://gateway.icloud.com/eedservice/Device/ADR/CacheUpdate");
  __cxa_atexit((void (*)(void *))&std::string::~string, byte_102311198, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306490, "EEDSessionStartTime");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306490, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023064A8, "EEDCallEndTime");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023064A8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023064C0, "EEDSessionState");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023064C0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023064D8, "EEDDeviceRootSecret");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023064D8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023064F0, "EEDDeviceSessionPrivateKey");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023064F0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306508, "EEDCurrentStreamingRequest");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306508, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306520, "EEDCurrentUploadRequest");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306520, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306538, "EEDCurrentMitigation");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306538, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306550, "EEDRequestsPending");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306550, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306568, "EEDRequestsHandled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306568, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306580, "EEDNumSendSuccessForValidFix");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306580, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306598, "EEDNumSendFailForValidFixes");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306598, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023065B0, "EEDNumValidFixesSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023065B0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023065C8, "EEDNumNoFixMessagesSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023065C8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023065E0, "EEDNumADRPayloadsSentTotal");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023065E0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023065F8, "EEDNumADRPayloadsSentSuccessfulTotal");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023065F8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306610, "EEDErrorCode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306610, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306628, "EEDHorzAccuracy");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306628, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306640, "EEDVertAccuracy");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306640, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306658, "EEDLastHttpPostFailureCode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306658, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306670, "EEDAPNSTokenReceived");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306670, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306688, "EEDNumRequestsReceived");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306688, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023066A0, "EEDNumControlPayloadsSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023066A0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023066B8, "EEDNumSuccessfulControlPayloadsSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023066B8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023066D0, "EEDNumRequestsDuringEEM");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023066D0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023066E8, "EEDNumDuplicateRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023066E8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306700, "EEDFirstRequestTypeReceived");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306700, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306718, "EEDNumStreamingRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306718, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306730, "EEDNumUploadRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306730, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306748, "EEDNumDuplicateMediaSelections");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306748, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306760, "EEDTotalItems");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306760, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306778, "EEDNumImages");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306778, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306790, "EEDNumVideos");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306790, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023067A8, "EEDBatteryLevelAtSessionStart");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023067A8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023067C0, "EEDBatteryLevelAtCallEnd");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023067C0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023067D8, "EEDPowerSourceConnected");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023067D8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023067F0, "EEDPartnerInfo");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023067F0, (void *)&_mh_execute_header);
}

float sub_100A94C18(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  v2 = 0;
  while (1)
  {
    v3 = v2;
    v4 = dword_1022A6650[63 * a2 + v2];
    if ((_DWORD)v4 == 10000)
      break;
    v5 = *(float *)(a1 + 4 * v4);
    v2 = 2 * v3 + 2;
    if (dbl_1022C2148[63 * a2 + v3] >= v5)
      v2 = (2 * v3) | 1;
    if (v2 >= 63)
      return 0.0;
  }
  return dbl_1022C2148[63 * a2 + v3];
}

uint64_t sub_100A94C9C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  uint64_t i;
  uint64_t v9;
  float v10;
  float v11;
  _BYTE v13[48];

  v2 = 0;
  v3 = -6;
  do
  {
    v4 = 0.0;
    v5 = v3;
    do
    {
      v5 += 6;
      v4 = v4 + sub_100A94C18(a1, v5);
    }
    while (v5 < 0x1BC);
    *(float *)&v13[4 * v2++ + 24] = v4;
    ++v3;
  }
  while (v2 != 6);
  v6 = 0;
  v7 = 0.0;
  do
  {
    v7 = v7 + expf(*(float *)&v13[v6 + 24]);
    v6 += 4;
  }
  while (v6 != 24);
  for (i = 0; i != 24; i += 4)
    *(float *)&v13[i] = expf(*(float *)&v13[i + 24]) / v7;
  v9 = 0;
  v10 = 0.0;
  v11 = -1.0;
  do
  {
    if (*(float *)&v13[4 * v9] >= v10)
    {
      v10 = *(float *)&v13[4 * v9];
      v11 = (float)(int)v9;
    }
    ++v9;
  }
  while (v9 != 6);
  return (int)v11;
}

uint64_t sub_100A94DC8(uint64_t a1, uint64_t a2)
{
  sub_100A94DEC(a1, a2);
  return sub_100A94C9C(a1 + 8);
}

float sub_100A94DEC(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 320);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 388);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 328);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 356);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 360);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 364);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 368);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 376);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 380);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 404);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 420);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 428);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 436);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 444);
  result = *(float *)(a2 + 448);
  *(float *)(a1 + 328) = result;
  return result;
}

void sub_100A95078()
{
  operator delete();
}

double sub_100A9508C(uint64_t a1, double *a2, int a3)
{
  NSObject *v6;
  double v7;
  double result;
  double v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  double v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  int v19;

  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102166CE8);
  v6 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a2;
    *(_DWORD *)buf = 134349312;
    v17 = v7;
    v18 = 1026;
    v19 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,updatePASCDTransmissionState,time,%{public}.1lf,state,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102166CE8);
    v9 = *a2;
    v12 = 134349312;
    v13 = v9;
    v14 = 1026;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessoryHeadingCorrector,updatePASCDTransmissionState,time,%{public}.1lf,state,%{public}d", &v12, 18);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryHeadingCorrector::updatePASCDTransmissionState(const CFAbsoluteTime &, const CLNmeaSCDTransmissionState)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  result = *a2;
  *(double *)(a1 + 24) = *a2;
  *(_DWORD *)a1 = a3;
  return result;
}

void sub_100A95270(double *a1, double *a2, double a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  double v9;
  int v10;
  uint64_t v11;
  double v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;

  a1[1] = a3;
  a1[2] = *a2;
  v6 = *a2 + 180.0;
  if (v6 >= 360.0)
    v6 = v6 + -360.0;
  *a2 = v6;
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102166CE8);
  v7 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v8 = *((_QWORD *)a1 + 2);
    v9 = *a2;
    v10 = *(_DWORD *)a1;
    *(_DWORD *)buf = 134349824;
    v25 = a3;
    v26 = 2050;
    v27 = v8;
    v28 = 2050;
    v29 = v9;
    v30 = 1026;
    v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,%{public}.1lf,corrected course from,%{public}.2lf,to,%{public}.2lf,in PASCD state,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102166CE8);
    v11 = *((_QWORD *)a1 + 2);
    v12 = *a2;
    v13 = *(_DWORD *)a1;
    v16 = 134349824;
    v17 = a3;
    v18 = 2050;
    v19 = v11;
    v20 = 2050;
    v21 = v12;
    v22 = 1026;
    v23 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessoryHeadingCorrector,%{public}.1lf,corrected course from,%{public}.2lf,to,%{public}.2lf,in PASCD state,%{public}d", &v16, 38);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryHeadingCorrector::flipCourse(double, double &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100A954BC(int *a1, double a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  int v33;

  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102166CE8);
  v6 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v7 = *((_QWORD *)a1 + 5);
    v8 = *a1;
    *(_DWORD *)buf = 134349824;
    v27 = a2;
    v28 = 2050;
    v29 = v7;
    v30 = 2050;
    v31 = a3;
    v32 = 1026;
    v33 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,%{public}.1lf,stored course,prev,%{public}.2lf,now,%{public}.2lf,PASCDState,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102166CE8);
    v14 = *((_QWORD *)a1 + 5);
    v15 = *a1;
    v18 = 134349824;
    v19 = a2;
    v20 = 2050;
    v21 = v14;
    v22 = 2050;
    v23 = a3;
    v24 = 1026;
    v25 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessoryHeadingCorrector,%{public}.1lf,stored course,prev,%{public}.2lf,now,%{public}.2lf,PASCDState,%{public}d", &v18, 38);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryHeadingCorrector::storeGPRMCCourse(double, double)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  *((double *)a1 + 4) = a2;
  *((double *)a1 + 5) = a3;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 2) = _Q0;
}

void sub_100A956D0(uint64_t a1, double *a2, double a3, double a4)
{
  NSObject *v8;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  BOOL v16;
  double v17;
  double v18;
  double v19;
  _BOOL4 v20;
  NSObject *v21;
  _BOOL4 v22;
  double v23;
  double v24;
  _BOOL4 v25;
  double v26;
  int *v27;
  double v28;
  double v30;
  double *v31;
  double v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  double v42;
  int v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint8_t buf[4];
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;

  v42 = a3;
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102166CE8);
  v8 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a2;
    v10 = *(_DWORD *)a1;
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134350592;
    v58 = v9;
    v59 = 2050;
    v60 = a3;
    v61 = 2050;
    v62 = a4;
    v63 = 1026;
    v64 = v10;
    v65 = 2050;
    v66 = v11;
    v67 = 2050;
    v68 = v12;
    v69 = 2050;
    v70 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,%{public}.1lf,gprmcCourse,%{public}.2lf,speed,%{public}.2lf,fPASCDTransmissionState,%{public}d,fPASCDTimestamp,%{public}.1lf,fLastGPRMCTimeStamp,%{public}.1lf,fLastGPRMCCourse,%{public}.2lf", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102166CE8);
    v32 = *a2;
    v33 = *(_DWORD *)a1;
    v34 = *(_QWORD *)(a1 + 24);
    v35 = *(_QWORD *)(a1 + 32);
    v36 = *(_QWORD *)(a1 + 40);
    v43 = 134350592;
    v44 = v32;
    v45 = 2050;
    v46 = a3;
    v47 = 2050;
    v48 = a4;
    v49 = 1026;
    v50 = v33;
    v51 = 2050;
    v52 = v34;
    v53 = 2050;
    v54 = v35;
    v55 = 2050;
    v56 = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessoryHeadingCorrector,%{public}.1lf,gprmcCourse,%{public}.2lf,speed,%{public}.2lf,fPASCDTransmissionState,%{public}d,fPASCDTimestamp,%{public}.1lf,fLastGPRMCTimeStamp,%{public}.1lf,fLastGPRMCCourse,%{public}.2lf", &v43, 68);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "double CLAccessoryHeadingCorrector::getHeading(const CFAbsoluteTime &, double, double)", "%s\n", v37);
    if (v38 != buf)
      free(v38);
  }
  v14 = *(double *)(a1 + 24);
  v15 = *a2;
  v16 = v14 < 0.0 || *a2 - v14 > 5.0;
  if (v16 || *(_DWORD *)a1 != 82)
  {
    v28 = *(double *)(a1 + 8);
    if (v28 < 0.0 || v15 - v28 > 5.0)
      goto LABEL_43;
    v30 = fmod(a3 - *(double *)(a1 + 16), 360.0);
    if (v30 < 0.0)
      v30 = v30 + 360.0;
    if (v30 > 180.0)
      v30 = v30 + -360.0;
    if (a4 >= 1.5 || fabs(v30) >= 15.0)
    {
LABEL_43:
      v27 = (int *)a1;
      v26 = v15;
      goto LABEL_44;
    }
    v31 = (double *)a1;
    v24 = v15;
    goto LABEL_54;
  }
  v17 = *(double *)(a1 + 40);
  v18 = -1.0;
  if (v17 >= 0.0)
  {
    v19 = fmod(a3 - v17, 360.0);
    if (v19 < 0.0)
      v19 = v19 + 360.0;
    if (v19 > 180.0)
      v19 = v19 + -360.0;
    v18 = fabs(v19);
  }
  v20 = v18 >= 0.0 && v15 - *(double *)(a1 + 32) <= 5.0;
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102166CE8);
  v21 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    v58 = v18;
    v59 = 1026;
    LODWORD(v60) = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,courseDiff,%{public}.2lf,courseDiffValid,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102166CE8);
    v43 = 134349312;
    v44 = v18;
    v45 = 1026;
    LODWORD(v46) = v20;
    LODWORD(v41) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessoryHeadingCorrector,courseDiff,%{public}.2lf,courseDiffValid,%{public}d", &v43, v41);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "double CLAccessoryHeadingCorrector::getHeading(const CFAbsoluteTime &, double, double)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  v22 = v18 > 45.0 && v20;
  if (a4 >= 1.5 || v22)
  {
    v24 = *a2;
LABEL_53:
    v31 = (double *)a1;
LABEL_54:
    sub_100A95270(v31, &v42, v24);
    return;
  }
  v23 = *(double *)(a1 + 8);
  if (v23 >= 0.0)
  {
    v24 = *a2;
    if (*a2 - v23 <= 5.0)
      goto LABEL_53;
  }
  v25 = v23 < 0.0 && v20;
  if (v25 && v18 < 15.0)
  {
    v26 = *a2;
    v27 = (int *)a1;
LABEL_44:
    sub_100A954BC(v27, v26, a3);
  }
}

void sub_100A95C30(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

void sub_100A95F30(uint64_t a1, mach_error_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t *v10;
  _DWORD v11[3];
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  char *v15;

  if (a2)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102166DA0);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134218242;
      v13 = v5;
      v14 = 2080;
      v15 = mach_error_string(a2);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLHidManager] setReport: id=0x%lx, failed=%s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102166DA0);
      v6 = qword_10229FC78;
      mach_error_string(a2);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 1, "[CLHidManager] setReport: id=0x%lx, failed=%s", v11, 22);
LABEL_19:
      v10 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "-[CLHidDevice setReport:payload:length:]_block_invoke", "%s\n", v7);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102166DA0);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134218240;
      v13 = v9;
      v14 = 1024;
      LODWORD(v15) = 1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[CLHidManager] setReport: id=0x%lx, success=%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102166DA0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "[CLHidManager] setReport: id=0x%lx, success=%d", v11, 18);
      goto LABEL_19;
    }
  }
}

id sub_100A964C8(id result, uint64_t a2, uint64_t a3)
{
  void *v3;

  v3 = (void *)*((_QWORD *)result + 4);
  if (v3)
  {
    result = objc_msgSend(objc_msgSend(*((id *)result + 4), "clientDevices"), "count");
    if (result)
      return _objc_msgSend(v3, "updateClientDeviceWithHidDevice:added:", a2, a3);
  }
  return result;
}

uint64_t sub_100A96600(uint64_t result)
{
  void *v1;
  uint64_t v2;

  v1 = *(void **)(result + 32);
  if (v1)
  {
    v2 = result;
    result = objc_opt_respondsToSelector(objc_msgSend(*(id *)(result + 32), "delegate"), "monitorUpdateForDevice:added:");
    if ((result & 1) != 0)
      return (uint64_t)_objc_msgSend(objc_msgSend(v1, "delegate"), "monitorUpdateForDevice:added:", *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48));
  }
  return result;
}

void sub_100A96824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  NSObject *v9;
  _QWORD block[7];

  v6 = *(_QWORD *)(a1 + 32);
  if (v6
    && objc_msgSend(*(id *)(a1 + 40), "hidDevice")
    && (objc_opt_respondsToSelector(objc_msgSend(*(id *)(a1 + 48), "delegate"), "inputReportForDevice:report:length:") & 1) != 0)
  {
    if (objc_msgSend(*(id *)(a1 + 48), "delegateQueue"))
    {
      v9 = objc_msgSend(*(id *)(a1 + 48), "delegateQueue");
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100A968D4;
      block[3] = &unk_10212BBA8;
      block[4] = a6;
      block[5] = v6;
      block[6] = *(_QWORD *)(a1 + 40);
      dispatch_async(v9, block);
    }
  }
}

id sub_100A968D4(uint64_t a1)
{
  _BYTE v3[128];

  objc_msgSend(*(id *)(a1 + 32), "getBytes:length:", v3, objc_msgSend(*(id *)(a1 + 32), "length"));
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "delegate"), "inputReportForDevice:report:length:", *(_QWORD *)(a1 + 48), v3, objc_msgSend(*(id *)(a1 + 32), "length"));
}

void sub_100A970DC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100A97108(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_100A97184((uint64_t **)a1);
  return a1;
}

void sub_100A97160(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100090AE4(v2, *(char **)(v1 + 48));
  sub_100090AE4(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100A97184(uint64_t **a1)
{
  uint64_t **v2;
  void *__p[2];
  char v4;
  void **v5;

  sub_1015A2E04(__p, "Gsm");
  v5 = __p;
  *((_QWORD *)sub_100318A40(a1, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "Cdma");
  v5 = __p;
  *((_QWORD *)sub_100318A40(a1, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "Lte");
  v5 = __p;
  *((_QWORD *)sub_100318A40(a1, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "NR5G");
  v5 = __p;
  *((_QWORD *)sub_100318A40(a1, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  v2 = a1 + 5;
  sub_1015A2E04(__p, "Gsm");
  v5 = __p;
  *((_QWORD *)sub_100318A40(v2, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "Cdma");
  v5 = __p;
  *((_QWORD *)sub_100318A40(v2, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "Lte");
  v5 = __p;
  *((_QWORD *)sub_100318A40(v2, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "NR5G");
  v5 = __p;
  *((_QWORD *)sub_100318A40(v2, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_100A973EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A97428(uint64_t a1)
{
  sub_100090AE4(a1 + 40, *(char **)(a1 + 48));
  sub_100090AE4(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_100A97460(uint64_t **a1)
{
  a1[3] = 0;
  a1[4] = 0;
  a1[8] = 0;
  a1[9] = 0;
  sub_100A97184(a1);
}

uint64_t sub_100A9746C(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  _QWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void **v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[5];
  void *__p[2];
  char v35;
  void *v36[2];
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  _QWORD v45[10];
  char v46;
  uint64_t v47;
  _BYTE buf[38];
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  void **v52;
  __int16 v53;
  void **v54;
  __int16 v55;
  uint64_t v56;

  sub_100263E50((uint64_t)v43);
  sub_100263E50((uint64_t)v38);
  v2 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v3 = 1;
    do
    {
      if (*((char *)v2 + 55) < 0)
      {
        sub_100115CE4(buf, (void *)v2[4], v2[5]);
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v2 + 2);
        *(_QWORD *)&buf[16] = v2[6];
      }
      *(_QWORD *)&buf[24] = v2[7];
      if ((v3 & 1) == 0)
        sub_100263F7C(&v44, (uint64_t)", ", 2);
      v4 = sub_100263F7C(&v44, (uint64_t)"rat, ", 5);
      if (buf[23] >= 0)
        v5 = buf;
      else
        v5 = *(_BYTE **)buf;
      if (buf[23] >= 0)
        v6 = buf[23];
      else
        v6 = *(_QWORD *)&buf[8];
      v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
      v8 = sub_100263F7C(v7, (uint64_t)", numAlsRequests, ", 18);
      std::ostream::operator<<(v8, *(_QWORD *)&buf[24]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v9 = (_QWORD *)v2[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v2[2];
          v11 = *v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (!v11);
      }
      v3 = 0;
      v2 = v10;
    }
    while (v10 != a1 + 1);
  }
  v12 = (_QWORD *)a1[5];
  if (v12 != a1 + 6)
  {
    do
    {
      if (*((char *)v12 + 55) < 0)
      {
        sub_100115CE4(buf, (void *)v12[4], v12[5]);
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v12 + 2);
        *(_QWORD *)&buf[16] = v12[6];
      }
      *(_QWORD *)&buf[24] = v12[7];
      sub_100263F7C(&v39, (uint64_t)", ", 2);
      v13 = sub_100263F7C(&v39, (uint64_t)"rat, ", 5);
      if (buf[23] >= 0)
        v14 = buf;
      else
        v14 = *(_BYTE **)buf;
      if (buf[23] >= 0)
        v15 = buf[23];
      else
        v15 = *(_QWORD *)&buf[8];
      v16 = sub_100263F7C(v13, (uint64_t)v14, v15);
      v17 = sub_100263F7C(v16, (uint64_t)", numCellsRequested, ", 21);
      std::ostream::operator<<(v17, *(_QWORD *)&buf[24]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v18 = (_QWORD *)v12[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v12[2];
          v11 = *v19 == (_QWORD)v12;
          v12 = v19;
        }
        while (!v11);
      }
      v12 = v19;
    }
    while (v19 != a1 + 6);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102166DE0);
  v20 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v21 = a1[4];
    v23 = a1[8];
    v22 = a1[9];
    std::stringbuf::str(v36, v45);
    v24 = v37;
    v25 = (void **)v36[0];
    std::stringbuf::str(__p, v40);
    v26 = v36;
    if (v24 < 0)
      v26 = v25;
    if (v35 >= 0)
      v27 = __p;
    else
      v27 = (void **)__p[0];
    v28 = a1[3];
    *(_QWORD *)buf = 68290562;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v21;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = v23;
    v49 = 2050;
    v50 = v22;
    v51 = 2082;
    v52 = v26;
    v53 = 2082;
    v54 = v27;
    v55 = 2050;
    v56 = v28;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"AlsNetworkRequestMetric\", \"number of ALS requests triggered by WiFi\":%{public}lu, \"number of APs requested\":%{public}lu, \"number of surrounding APs requested\":%{public}lu, \"number of ALS requests per Rat\":%{public, location:escape_only}s, \"number of Als Cells requested per Rat\":%{public, location:escape_only}s, \"number of ALS cell requests with different rats\":%{public}lu}", buf, 0x4Eu);
    if (v35 < 0)
      operator delete(__p[0]);
    if (v37 < 0)
      operator delete(v36[0]);
  }
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_100A9797C;
  v33[3] = &unk_102166DC0;
  v33[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.alsrequests"), v33);
  *(_QWORD *)((char *)v38
  v39 = v30;
  if (v41 < 0)
    operator delete((void *)v40[8]);
  std::streambuf::~streambuf(v40);
  std::ios::~ios(&v42);
  v43[0] = v29;
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v29 - 24)) = v31;
  v44 = v30;
  if (v46 < 0)
    operator delete((void *)v45[8]);
  std::streambuf::~streambuf(v45);
  return std::ios::~ios(&v47);
}

void sub_100A97914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a23 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a24);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

id sub_100A9797C(uint64_t a1)
{
  _QWORD *v1;
  id v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  NSNumber *v6;
  size_t v7;
  void **v8;
  void **v9;
  void **v10;
  NSNumber *v11;
  size_t v12;
  void **v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  NSNumber *v21;
  size_t v22;
  void **v23;
  void **v24;
  void **v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v30;
  void *__p[2];
  char v32;
  void *__dst[2];
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v30 = v1;
  v5 = (_QWORD *)*v1;
  v3 = v1 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
      {
        sub_100115CE4(__dst, (void *)v4[4], v4[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v4 + 2);
        v34 = v4[6];
      }
      v35 = v4[7];
      v6 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v30);
      if (v34 >= 0)
        v7 = HIBYTE(v34);
      else
        v7 = (size_t)__dst[1];
      sub_100259584((uint64_t)__p, v7 + 11);
      if (v32 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if (v7)
      {
        if (v34 >= 0)
          v9 = __dst;
        else
          v9 = (void **)__dst[0];
        memmove(v8, v9, v7);
      }
      strcpy((char *)v8 + v7, "NumRequests");
      if (v32 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
      if (v32 < 0)
        operator delete(__p[0]);
      v11 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v35);
      if (v34 >= 0)
        v12 = HIBYTE(v34);
      else
        v12 = (size_t)__dst[1];
      sub_100259584((uint64_t)__p, v12 + 18);
      if (v32 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (v12)
      {
        if (v34 >= 0)
          v14 = __dst;
        else
          v14 = (void **)__dst[0];
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, "NumRequestsBounded");
      if (v32 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
      if (v32 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete(__dst[0]);
      v16 = (_QWORD *)v4[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v4[2];
          v18 = *v17 == (_QWORD)v4;
          v4 = v17;
        }
        while (!v18);
      }
      v4 = v17;
    }
    while (v17 != v3);
  }
  v19 = (_QWORD *)v30[5];
  v20 = v30 + 6;
  if (v19 != v30 + 6)
  {
    do
    {
      if (*((char *)v19 + 55) < 0)
      {
        sub_100115CE4(__dst, (void *)v19[4], v19[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v19 + 2);
        v34 = v19[6];
      }
      v35 = v19[7];
      v21 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v30);
      if (v34 >= 0)
        v22 = HIBYTE(v34);
      else
        v22 = (size_t)__dst[1];
      sub_100259584((uint64_t)__p, v22 + 8);
      if (v32 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      if (v22)
      {
        if (v34 >= 0)
          v24 = __dst;
        else
          v24 = (void **)__dst[0];
        memmove(v23, v24, v22);
      }
      strcpy((char *)v23 + v22, "NumTower");
      if (v32 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v21, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25));
      if (v32 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete(__dst[0]);
      v26 = (_QWORD *)v19[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v19[2];
          v18 = *v27 == (_QWORD)v19;
          v19 = v27;
        }
        while (!v18);
      }
      v19 = v27;
    }
    while (v27 != v20);
  }
  v28 = v30;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v30[3], v30), CFSTR("CellRequestsWithDifferentRats"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[3]), CFSTR("CellRequestsWithDifferentRatsBounded"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[4]), CFSTR("WifiRequests"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[4]), CFSTR("WifiRequestsBounded"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[8]), CFSTR("WifiNumAps"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[9]), CFSTR("WifiNumSurroundingAps"));
  return v2;
}

void sub_100A97E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A97E60(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  NSObject *v15;
  void **v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *__p[2];
  char v28;
  _QWORD v29[2];
  uint64_t v30;
  _QWORD v31[10];
  char v32;
  uint64_t v33;
  uint8_t buf[40];

  sub_100263E50((uint64_t)v29);
  v6 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      if (*((char *)v5 + 55) < 0)
      {
        sub_100115CE4(buf, (void *)v5[4], v5[5]);
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v5 + 2);
        *(_QWORD *)&buf[16] = v5[6];
      }
      *(_QWORD *)&buf[24] = v5[7];
      sub_100263F7C(&v30, (uint64_t)", ", 2);
      v7 = sub_100263F7C(&v30, (uint64_t)"rat, ", 5);
      if ((buf[23] & 0x80u) == 0)
        v8 = buf;
      else
        v8 = *(uint8_t **)buf;
      if ((buf[23] & 0x80u) == 0)
        v9 = buf[23];
      else
        v9 = *(_QWORD *)&buf[8];
      v10 = sub_100263F7C(v7, (uint64_t)v8, v9);
      v11 = sub_100263F7C(v10, (uint64_t)", numCellsRequested, ", 21);
      std::ostream::operator<<(v11, *(_QWORD *)&buf[24]);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v14 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v14);
      }
      v5 = v13;
    }
    while (v13 != v6);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102166DE0);
  v15 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str(__p, v31);
    v16 = v28 >= 0 ? __p : (void **)__p[0];
    *(_QWORD *)buf = 68289282;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LogCellAlsMetric\", \"number of Als Cells requested per Rat\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v28 < 0)
      operator delete(__p[0]);
  }
  v17 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != v6)
  {
    v18 = 0;
    do
    {
      if (*((char *)v17 + 55) < 0)
      {
        sub_100115CE4(buf, (void *)v17[4], v17[5]);
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v17 + 2);
        *(_QWORD *)&buf[16] = v17[6];
      }
      *(_QWORD *)&buf[24] = v17[7];
      if (*(_QWORD *)&buf[24])
      {
        __p[0] = buf;
        v19 = sub_1004ADED8((uint64_t **)a1, (const void **)buf, (uint64_t)&unk_101B9EB60, (__int128 **)__p);
        ++v19[7];
        v20 = *(_QWORD *)&buf[24];
        __p[0] = buf;
        v21 = sub_1004ADED8((uint64_t **)(a1 + 40), (const void **)buf, (uint64_t)&unk_101B9EB60, (__int128 **)__p);
        ++v18;
        v21[7] += v20;
      }
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      v22 = (_QWORD *)v17[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v17[2];
          v14 = *v23 == (_QWORD)v17;
          v17 = v23;
        }
        while (!v14);
      }
      v17 = v23;
    }
    while (v23 != v6);
    if (v18 > 1)
      ++*(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 72) += a3;
  *(_QWORD *)((char *)v29
  v30 = v24;
  if (v32 < 0)
    operator delete((void *)v31[8]);
  std::streambuf::~streambuf(v31);
  return std::ios::~ios(&v33);
}

void sub_100A98224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A98264(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102166DE0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289538;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2050;
    v12 = a2;
    v13 = 2050;
    v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LogWifiAlsMetric\", \"number of APs requested\":%{public}lu, \"number of surrounding APs requested\":%{public}lu}", (uint8_t *)v8, 0x26u);
  }
  ++a1[4];
  v7 = a1[9] + a3;
  a1[8] += a2;
  a1[9] = v7;
}

_QWORD *sub_100A9837C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "Gsm");
}

_QWORD *sub_100A9838C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "Cdma");
}

_QWORD *sub_100A9839C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "Lte");
}

_QWORD *sub_100A983AC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "NR5G");
}

void sub_100A983BC(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

NSDictionary *sub_100A983E8(double *a1)
{
  double *v2;
  _QWORD v4[25];
  _QWORD v5[25];

  v2 = (double *)((char *)a1 + 300);
  v4[0] = CFSTR("timerFireCount");
  v5[0] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *(unsigned int *)a1);
  v4[1] = CFSTR("locationCount");
  v5[1] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 1));
  v4[2] = CFSTR("declaredEntry");
  v5[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 8));
  v4[3] = CFSTR("duration");
  v5[3] = +[CLFenceBinner binForConvergingSessionDuration:](CLFenceBinner, "binForConvergingSessionDuration:", a1[2]);
  v4[4] = CFSTR("distanceFromFenceAtTimeout");
  v5[4] = +[CLFenceBinner binForDistance:](CLFenceBinner, "binForDistance:", a1[3]);
  v4[5] = CFSTR("lastLocationAgeAtTimeout");
  v5[5] = +[CLFenceBinner binForAge:](CLFenceBinner, "binForAge:", a1[4]);
  v4[6] = CFSTR("cellLocationCount");
  v5[6] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 12));
  v4[7] = CFSTR("wifiLocationCount");
  v5[7] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 13));
  v4[8] = CFSTR("gnssLocationCount");
  v5[8] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 14));
  v4[9] = CFSTR("gnssDuration");
  v5[9] = +[CLFenceBinner binForConvergingSessionDuration:](CLFenceBinner, "binForConvergingSessionDuration:", a1[5]);
  v4[10] = CFSTR("wifiLocationRequestCount");
  v5[10] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 15));
  v4[11] = CFSTR("registeredForEPNO");
  v5[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 64));
  v4[12] = CFSTR("triggerReceivedCount");
  v5[12] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 17));
  v4[13] = CFSTR("triggerCountEPNO");
  v5[13] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 18));
  v4[14] = CFSTR("entryLatency");
  v5[14] = +[CLFenceBinner binForConvergingSessionDuration:](CLFenceBinner, "binForConvergingSessionDuration:", a1[25] - v2[7]);
  v4[15] = CFSTR("distanceLatency");
  v5[15] = +[CLFenceBinner binForDistance:](CLFenceBinner, "binForDistance:", a1[11]);
  v4[16] = CFSTR("thresholdNearDuration");
  v5[16] = +[CLFenceBinner binForConvergingSessionDuration:](CLFenceBinner, "binForConvergingSessionDuration:", a1[12]);
  v4[17] = CFSTR("thresholdAdjacentDuration");
  v5[17] = +[CLFenceBinner binForConvergingSessionDuration:](CLFenceBinner, "binForConvergingSessionDuration:", a1[13]);
  v4[18] = CFSTR("triggerCountCarConnection");
  v5[18] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 28));
  v4[19] = CFSTR("triggerCountWifiAssociation");
  v5[19] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 29));
  v4[20] = CFSTR("triggerCountChargeState");
  v5[20] = +[CLFenceBinner binForConvergingSessionCount:](CLFenceBinner, "binForConvergingSessionCount:", *((unsigned int *)a1 + 30));
  v4[21] = CFSTR("entryLocationType");
  v5[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a1 + 55));
  v4[22] = CFSTR("entryLocationAccuracy");
  v5[22] = +[CLFenceBinner binForAccuracy:](CLFenceBinner, "binForAccuracy:", a1[18]);
  v4[23] = CFSTR("previousLocationType");
  v5[23] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a1 + 94));
  v4[24] = CFSTR("previousLocationAccuracy");
  v5[24] = +[CLFenceBinner binForAccuracy:](CLFenceBinner, "binForAccuracy:", *v2);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 25);
}

uint64_t sub_100A98730(uint64_t result, int a2, double a3)
{
  int v3;
  double *v4;

  v3 = *(_DWORD *)(result + 688);
  if (v3 == 3)
  {
    v4 = (double *)(result + 104);
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    v4 = (double *)(result + 96);
LABEL_5:
    *v4 = *v4 + a3 - *(double *)(result + 696);
  }
  *(_DWORD *)(result + 688) = a2;
  *(double *)(result + 696) = a3;
  return result;
}

__n128 sub_100A98770(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *(_OWORD *)(a1 + 204);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a1 + 188);
  *(_OWORD *)(a1 + 360) = v2;
  v3 = *(_OWORD *)(a1 + 172);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a1 + 156);
  *(_OWORD *)(a1 + 328) = v3;
  v4 = *(_OWORD *)(a1 + 252);
  v5 = *(_OWORD *)(a1 + 220);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a1 + 236);
  *(_OWORD *)(a1 + 408) = v4;
  *(_OWORD *)(a1 + 376) = v5;
  *(_OWORD *)(a1 + 420) = *(_OWORD *)(a1 + 264);
  v6 = *(_OWORD *)(a1 + 140);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a1 + 124);
  *(_OWORD *)(a1 + 296) = v6;
  v7 = *a2;
  *(_OWORD *)(a1 + 140) = a2[1];
  *(_OWORD *)(a1 + 124) = v7;
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  *(_OWORD *)(a1 + 204) = a2[5];
  *(_OWORD *)(a1 + 188) = v10;
  *(_OWORD *)(a1 + 172) = v9;
  *(_OWORD *)(a1 + 156) = v8;
  result = (__n128)a2[6];
  v12 = a2[7];
  v13 = a2[8];
  *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(a1 + 252) = v13;
  *(_OWORD *)(a1 + 236) = v12;
  *(__n128 *)(a1 + 220) = result;
  return result;
}

uint64_t sub_100A987FC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100A9882C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100A9885C(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4[4];
  char v5;
  __int128 v6;
  void *v7[3];
  __int128 v8;
  __int128 v9;

  *a1 = 0;
  v3 = (uint64_t)(a1 + 2);
  v6 = xmmword_102306808;
  memset(v7, 0, sizeof(v7));
  sub_10027205C(v7, (const void *)qword_102306818, qword_102306820[0], (qword_102306820[0] - qword_102306818) >> 2);
  v8 = *(_OWORD *)&qword_102306820[2];
  memset(v4, 0, 24);
  sub_10027205C(v4, (const void *)qword_102306840, unk_102306848, (unk_102306848 - qword_102306840) >> 2);
  v4[3] = (void *)qword_102306858;
  v5 = 1;
  sub_1009FAE18((uint64_t)&v9, (uint64_t)&v6, (uint64_t)v4);
  sub_1009FB764(v3, a2, &v9);
}

void sub_100A98990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  sub_1009FBA24(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_100A989F0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  sub_1009FB7F8(a1 + 8);
  sub_10114B3D8(a1 + 152);
  sub_10114B58C(a1 + 152);
  sub_1009FBA24(v2);
  return a1;
}

BOOL sub_100A98A48(int *a1, int a2)
{
  NSObject *v3;
  int v4;
  _BOOL8 result;
  int v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  if (*a1 == a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102166E00);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67109120;
      v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Already correct power mode, %d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102166E00);
      v6 = *a1;
      v15 = 67109120;
      v16 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Already correct power mode, %d", &v15);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCachedLocationScanMode::setScanMode(CachedLocationScanPowerMode)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102166E00);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *a1;
      *(_DWORD *)buf = 67109376;
      v20 = v11;
      v21 = 1024;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Changing cached location power mode from %d to %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102166E00);
      v12 = *a1;
      v15 = 67109376;
      v16 = v12;
      v17 = 1024;
      v18 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Changing cached location power mode from %d to %d", &v15, 14);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCachedLocationScanMode::setScanMode(CachedLocationScanPowerMode)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *a1 = a2;
    if (a2 == 1)
    {
      sub_1009FBA28((uint64_t)(a1 + 2));
      sub_10114B590((uint64_t)(a1 + 38));
    }
    else
    {
      if (a2)
        return 0;
      sub_1009FB7F8((uint64_t)(a1 + 2));
      sub_10114B3D8((uint64_t)(a1 + 38));
    }
    return 1;
  }
  return result;
}

