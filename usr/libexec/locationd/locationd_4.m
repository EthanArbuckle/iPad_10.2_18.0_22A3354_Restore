void sub_10025255C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100252594(uint64_t a1, NSObject *a2, uint64_t a3)
{
  NSObject *v6;
  char *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  char v12;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WiFi power state changed to %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v10[0] = 67109120;
    v10[1] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WiFi power state changed to %d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::setWifiPowered(std::chrono::steady_clock::time_point, BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 8), "setWifiPowered:", a3);
  if ((_DWORD)a3)
    v7 = "setWifiPowered:ON";
  else
    v7 = "setWifiPowered:OFF";
  sub_1015A2E04(buf, v7);
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v12 < 0)
    operator delete(*(void **)buf);
}

void sub_100252798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002527BC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  NSObject *v6;
  char *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  char v12;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WiFi association state changed to %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v10[0] = 67109120;
    v10[1] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WiFi association state changed to %d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::setWifiAssociated(std::chrono::steady_clock::time_point, BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 8), "setWifiAssociated:", a3);
  if ((_DWORD)a3)
    v7 = "setWifiAssociated:ON";
  else
    v7 = "setWifiAssociated:OFF";
  sub_1015A2E04(buf, v7);
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v12 < 0)
    operator delete(*(void **)buf);
}

void sub_1002529C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002529E4(uint64_t a1, NSObject *a2, uint64_t a3)
{
  NSObject *v6;
  char *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  char v12;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Streaming Client in fitness session changed to %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v10[0] = 67240192;
    v10[1] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "Streaming Client in fitness session changed to %{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::setStreamingClientInFitnessSession(std::chrono::steady_clock::time_point, BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 8), "setIsStreamingClientInFitnessSession:", a3);
  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    if ((_DWORD)a3)
    {
      sub_1015A2E04(buf, "streaming");
      sub_1001CEC00(a1, 2, (uint64_t *)buf);
      if (v12 < 0)
        operator delete(*(void **)buf);
    }
  }
  if ((_DWORD)a3)
    v7 = "setInFitnessSession:ON";
  else
    v7 = "setInFitnessSession:OFF";
  sub_1015A2E04(buf, v7);
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v12 < 0)
    operator delete(*(void **)buf);
}

void sub_100252C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100252C54(uint64_t a1, NSObject *a2, uint64_t a3)
{
  NSObject *v6;
  char *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  char v12;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Vehicle connection changed to %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v10[0] = 67240192;
    v10[1] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "Vehicle connection changed to %{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::setVehicleConnected(std::chrono::steady_clock::time_point, BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 8), "setIsVehicleConnected:", a3);
  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded") && (_DWORD)a3)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      sub_1015A2E04(buf, "vehicleconnect");
      sub_1001CEC00(a1, 1, (uint64_t *)buf);
    }
    else
    {
      sub_1015A2E04(buf, "vehicleconnect");
      sub_1001CEC00(a1, 2, (uint64_t *)buf);
    }
    if (v12 < 0)
      operator delete(*(void **)buf);
  }
  if ((_DWORD)a3)
    v7 = "setVehicleConnected:ON";
  else
    v7 = "setVehicleConnected:OFF";
  sub_1015A2E04(buf, v7);
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v12 < 0)
    operator delete(*(void **)buf);
}

void sub_100252EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100252EF4(uint64_t a1, NSObject *a2, int a3)
{
  NSObject *v6;
  char *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  char v12;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Vehicle navigation mode changed to %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v10[0] = 67240192;
    v10[1] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "Vehicle navigation mode changed to %{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::setVehicleNavigation(std::chrono::steady_clock::time_point, BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded") && a3)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      sub_1015A2E04(buf, "vehiclenav");
      sub_1001CEC00(a1, 1, (uint64_t *)buf);
    }
    else
    {
      sub_1015A2E04(buf, "vehiclenav");
      sub_1001CEC00(a1, 2, (uint64_t *)buf);
    }
    if (v12 < 0)
      operator delete(*(void **)buf);
  }
  if (a3)
    v7 = "setVehicleNavigation:ON";
  else
    v7 = "setVehicleNavigation:OFF";
  sub_1015A2E04(buf, v7);
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v12 < 0)
    operator delete(*(void **)buf);
}

void sub_100253158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100253184(uint64_t a1, NSObject *a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
  if ((objc_msgSend(*(id *)(a1 + 8), "isInVehicleNavigation") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 8), "setIsInVehicleNavigation:", 1);
    sub_100252EF4(a1, a2, 1);
  }
}

void sub_1002531E4(uint64_t a1, NSObject *a2)
{
  objc_msgSend(*(id *)(a1 + 8), "setIsInVehicleNavigation:", 0);
  sub_100252EF4(a1, a2, 0);
}

void sub_10025321C(uint64_t a1, NSObject *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[8];
  char v9;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Removed pipelined client", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Removed pipelined client", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onClientRemoval(std::chrono::steady_clock::time_point)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 208))(*(_QWORD *)(a1 + 24)) & 1) == 0)
    sub_10001E7A0(a1, 0);
  sub_1015A2E04(buf, "onClientRemoval");
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v9 < 0)
    operator delete(*(void **)buf);
}

void sub_100253400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100253424(uint64_t a1, NSObject *a2)
{
  NSObject *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[8];
  char v8;

  if ((objc_msgSend(*(id *)(a1 + 8), "hasAtLeastOneClientWithCLActivityTypeFitness") & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "At least 1 client using a fitness CLActivityType", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v6[0] = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "At least 1 client using a fitness CLActivityType", v6, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onAtLeastOneClientHasCLActivityTypeFitness(std::chrono::steady_clock::time_point)", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  objc_msgSend(*(id *)(a1 + 8), "setHasAtLeastOneClientWithCLActivityTypeFitness:", 1);
  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    sub_1015A2E04(buf, "fitness");
    sub_1001CEC00(a1, 2, (uint64_t *)buf);
    if (v8 < 0)
      operator delete(*(void **)buf);
  }
  sub_1015A2E04(buf, "onAtLeastOneClientHasCLActivityTypeFitness");
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v8 < 0)
    operator delete(*(void **)buf);
}

void sub_100253640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100253668(uint64_t a1, NSObject *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[8];
  char v9;

  if (objc_msgSend(*(id *)(a1 + 8), "hasAtLeastOneClientWithCLActivityTypeFitness"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "no clients using a fitness CLActivityType", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "no clients using a fitness CLActivityType", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onNoClientsHaveCLActivityTypeFitness(std::chrono::steady_clock::time_point)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  objc_msgSend(*(id *)(a1 + 8), "setHasAtLeastOneClientWithCLActivityTypeFitness:", 0);
  sub_1015A2E04(buf, "onNoClientsHaveCLActivityTypeFitness");
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v9 < 0)
    operator delete(*(void **)buf);
}

void sub_100253844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100253868(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 8), "setLastARSessionState:");
  result = objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded");
  if ((_DWORD)result)
    return (id)(*(uint64_t (**)(_QWORD, id))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24), objc_msgSend(*(id *)(a1 + 8), "lastARSessionState"));
  return result;
}

id sub_1002538C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded");
  if ((_DWORD)result)
    return (id)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24), a3);
  return result;
}

id sub_100253908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded");
  if ((_DWORD)result)
    return (id)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24), a3);
  return result;
}

void sub_100253950(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  NSMutableArray *v31;
  NSObject *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  int v38;
  NSMutableArray *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  void *i;
  void *v61;
  double v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  double v67;
  std::string *v68;
  std::string::size_type size;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  std::string::size_type v73;
  char v74;
  std::string::size_type *v75;
  std::string::size_type v76;
  std::string::size_type *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  NSObject *v84;
  id v85;
  _BYTE *v86;
  id v87;
  NSObject *v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  void *v93;
  void *v94;
  __int128 **v95;
  id v96;
  void *v97;
  uint64_t v98;
  double v99;
  void *j;
  void *v101;
  double v102;
  _QWORD *v103;
  uint64_t v104;
  id v105;
  NSObject *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  char *v117;
  NSObject *v118;
  id v119;
  id v120;
  id v121;
  std::string::size_type v122;
  std::string::size_type v123;
  void *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  double *v129;
  std::string::size_type v130;
  __int128 v131;
  NSObject *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  id v144;
  const char *v145;
  id v146;
  unint64_t v147;
  uint64_t v148;
  NSObject *v149;
  std::string::size_type v150;
  std::string::size_type v151;
  unint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  id v156;
  std::string::size_type v157;
  uint64_t v158;
  std::string::size_type v159;
  NSObject *v160;
  id v161;
  uint64_t v162;
  id v163;
  const char *v164;
  char *v165;
  NSObject *v166;
  NSObject *v167;
  std::string *v168;
  NSObject *v169;
  const char *v170;
  char *v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  id v177;
  int v178;
  const char *v179;
  char *v180;
  const char *v181;
  char *v182;
  uint64_t v183;
  id v184;
  _BYTE *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  id v189;
  id v190;
  const char *v191;
  char *v192;
  const char *v193;
  char *v194;
  const char *v195;
  char *v196;
  const char *v197;
  char *v198;
  const char *v199;
  uint64_t v201;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  std::string v213;
  std::string v214;
  std::string v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  std::string::size_type *v221;
  unint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  _QWORD v227[3];
  NSMutableArray *v228;
  NSMutableArray *v229;
  _BYTE v230[38];
  _BYTE v231[128];
  _BYTE v232[128];
  _QWORD v233[2];
  _BYTE v234[128];
  _BYTE v235[128];
  _BYTE v236[32];
  _BYTE v237[10];
  __int16 v238;
  int v239;
  uint64_t v240[4];
  char v241;
  uint64_t v242;
  char v243;
  int v244;
  char v245;
  __int128 v246;
  double v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  int v253;
  char v254;
  _BYTE buf[42];
  __int16 v256;
  int v257;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = a8;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = a3;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = a9;
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = (int)((double)a4 / 86400.0);
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SelectIndoor, params, radius, %{public}lf ,maxFloors, %{public}zu, clusterRadius, %{public}lf, loiMaxAge, %{public}d", buf, 0x26u);
  }
  v201 = a4;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    *(_DWORD *)v236 = 134349824;
    *(double *)&v236[4] = a8;
    *(_WORD *)&v236[12] = 2050;
    *(_QWORD *)&v236[14] = a3;
    *(_WORD *)&v236[22] = 2050;
    *(double *)&v236[24] = a9;
    *(_WORD *)v237 = 1026;
    *(_DWORD *)&v237[2] = (int)((double)a4 / 86400.0);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectIndoor, params, radius, %{public}lf ,maxFloors, %{public}zu, clusterRadius, %{public}lf, loiMaxAge, %{public}d", v236, 38);
    v171 = (char *)v170;
    sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v170);
    if (v171 != buf)
      free(v171);
  }
  v229 = 0;
  v229 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3));
  v228 = 0;
  v228 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3));
  v227[0] = &v229;
  v227[1] = &v228;
  *(double *)&v227[2] = a9;
  v15 = *a1;
  if (a1[1] != *a1)
  {
    v16 = a1[1] - 72;
    do
    {
      v17 = *(double *)(v16 + 16);
      if (v17 <= a9)
      {
        v246 = *(_OWORD *)v16;
        v247 = v17;
        v248 = *(_QWORD *)(v16 + 24);
        v249 = 0;
        if (*(_BYTE *)(v16 + 32))
        {
          v250 = *(_QWORD *)(v16 + 40);
          v249 = 1;
        }
        v251 = 0;
        if (*(_BYTE *)(v16 + 48))
        {
          v252 = *(_QWORD *)(v16 + 56);
          v251 = 1;
        }
        v253 = *(_DWORD *)(v16 + 64);
        v254 = *(_BYTE *)(v16 + 68);
        sub_100255E14((uint64_t)v227, (uint64_t *)&v246);
        if (v251)
          v251 = 0;
        if (v249)
          v249 = 0;
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v18 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *(_QWORD *)v16;
          v20 = *(_QWORD *)(v16 + 8);
          *(_DWORD *)buf = 134283777;
          *(_QWORD *)&buf[4] = v19;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "SelectIndoor, loi, skipradius, %{private}.7f, %{private}.7f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          v21 = *(_QWORD *)v16;
          v22 = *(_QWORD *)(v16 + 8);
          *(_DWORD *)v236 = 134283777;
          *(_QWORD *)&v236[4] = v21;
          *(_WORD *)&v236[12] = 2049;
          *(_QWORD *)&v236[14] = v22;
          LODWORD(v199) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectIndoor, loi, skipradius, %{private}.7f, %{private}.7f", v236, v199);
          v24 = (char *)v23;
          sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
      }
      v25 = v16 == v15;
      v16 -= 72;
    }
    while (!v25);
  }
  if (*a5)
  {
    v26 = *(_QWORD *)(a5 + 108);
    v27 = *(_QWORD *)(a5 + 116);
    v28 = *(_QWORD *)(a5 + 28);
    v29 = sub_10025DC34((uint64_t)(a5 + 8));
    v240[0] = v26;
    v240[1] = v27;
    v240[2] = v28;
    v240[3] = 0x3FF0000000000000;
    v242 = v29;
    v241 = 1;
    v243 = 0;
    v244 = 1;
    v245 = 0;
    sub_100255E14((uint64_t)v227, v240);
    if (v243)
      v243 = 0;
    if (v241)
      v241 = 0;
  }
  v30 = (char *)-[NSMutableArray count](v229, "count");
  v31 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", &v30[(_QWORD)-[NSMutableArray count](v228, "count")]);
  -[NSMutableArray addObjectsFromArray:](v31, "addObjectsFromArray:", v229);
  -[NSMutableArray addObjectsFromArray:](v31, "addObjectsFromArray:", v228);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v32 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v33 = -[NSMutableArray count](v31, "count");
    v35 = *a1;
    v34 = a1[1];
    v36 = -[NSMutableArray count](v228, "count");
    v37 = -[NSMutableArray count](v229, "count");
    v38 = *a5;
    *(_DWORD *)buf = 134350080;
    *(_QWORD *)&buf[4] = v33;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = 0x8E38E38E38E38E39 * ((v34 - v35) >> 3);
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v36;
    *(_WORD *)&buf[32] = 2050;
    *(_QWORD *)&buf[34] = v37;
    v256 = 1026;
    v257 = v38;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "SelectIndoor, clusters, %{public}ld, LOIs, %{public}ld, historical, %{public}ld, predicted, %{public}ld, lastFix, %{public}d", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v172 = qword_1022A0048;
    v173 = -[NSMutableArray count](v31, "count");
    v175 = *a1;
    v174 = a1[1];
    v176 = -[NSMutableArray count](v228, "count");
    v177 = -[NSMutableArray count](v229, "count");
    v178 = *a5;
    *(_DWORD *)v236 = 134350080;
    *(_QWORD *)&v236[4] = v173;
    *(_WORD *)&v236[12] = 2050;
    *(_QWORD *)&v236[14] = 0x8E38E38E38E38E39 * ((v174 - v175) >> 3);
    *(_WORD *)&v236[22] = 2050;
    *(_QWORD *)&v236[24] = v176;
    *(_WORD *)v237 = 2050;
    *(_QWORD *)&v237[2] = v177;
    v238 = 1026;
    v239 = v178;
    LODWORD(v199) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v172, 0, "SelectIndoor, clusters, %{public}ld, LOIs, %{public}ld, historical, %{public}ld, predicted, %{public}ld, lastFix, %{public}d", v236, v199);
    v180 = (char *)v179;
    sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v179);
    if (v180 != buf)
      free(v180);
  }
  v39 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", -[NSMutableArray count](v31, "count"));
  v225 = 0u;
  v226 = 0u;
  v223 = 0u;
  v224 = 0u;
  v40 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v223, v235, 16);
  if (v40)
  {
    v41 = 1000000 * v201;
    v42 = *(_QWORD *)v224;
    do
    {
      v43 = 0;
      do
      {
        if (*(_QWORD *)v224 != v42)
          objc_enumerationMutation(v31);
        v44 = *(void **)(*((_QWORD *)&v223 + 1) + 8 * (_QWORD)v43);
        v45 = a6 - (_QWORD)objc_msgSend(v44, "relevancy:", a6);
        if (v41 < v45)
          -[NSMutableArray addObject:](v39, "addObject:", v44);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v46 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(objc_msgSend(v44, "latlon"), "latitude");
          v48 = v47;
          objc_msgSend(objc_msgSend(v44, "latlon"), "longitude");
          *(_DWORD *)buf = 134284033;
          *(_QWORD *)&buf[4] = v48;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v49;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v41 >= v45;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "SelectIndoor, cluster, %{private}.7f, %{private}.7f, relevant, %{public}d", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          v50 = qword_1022A0048;
          objc_msgSend(objc_msgSend(v44, "latlon"), "latitude");
          v52 = v51;
          objc_msgSend(objc_msgSend(v44, "latlon"), "longitude");
          *(_DWORD *)v236 = 134284033;
          *(_QWORD *)&v236[4] = v52;
          *(_WORD *)&v236[12] = 2049;
          *(_QWORD *)&v236[14] = v53;
          *(_WORD *)&v236[22] = 1026;
          *(_DWORD *)&v236[24] = v41 >= v45;
          LODWORD(v199) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 2, "SelectIndoor, cluster, %{private}.7f, %{private}.7f, relevant, %{public}d", v236, v199);
          v55 = (char *)v54;
          sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v54);
          if (v55 != buf)
            free(v55);
        }
        v43 = (char *)v43 + 1;
      }
      while (v40 != v43);
      v56 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v223, v235, 16);
      v40 = v56;
    }
    while (v56);
  }
  -[NSMutableArray removeObjectsInArray:](v31, "removeObjectsInArray:", v39);
  v57 = -[NSMutableArray count](v31, "count");
  if (v31 && v57)
  {
    v220 = 0;
    v221 = 0;
    v222 = 0;
    sub_100256310(&v220, (unint64_t)-[NSMutableArray count](v31, "count"));
    v218 = 0u;
    v219 = 0u;
    v216 = 0u;
    v217 = 0u;
    v58 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v216, v234, 16);
    if (v58)
    {
      v59 = *(_QWORD *)v217;
      do
      {
        for (i = 0; i != v58; i = (char *)i + 1)
        {
          if (*(_QWORD *)v217 != v59)
            objc_enumerationMutation(v31);
          v61 = *(void **)(*((_QWORD *)&v216 + 1) + 8 * (_QWORD)i);
          objc_msgSend(objc_msgSend(v61, "latlon"), "latitude");
          std::to_string(&v214, v62);
          v63 = std::string::insert(&v214, 0, "(");
          v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v215.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          v65 = std::string::append(&v215, ",");
          v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          *(_QWORD *)&v230[16] = *((_QWORD *)&v65->__r_.__value_.__l + 2);
          *(_OWORD *)v230 = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          objc_msgSend(objc_msgSend(v61, "latlon"), "longitude");
          std::to_string(&v213, v67);
          if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v213;
          else
            v68 = (std::string *)v213.__r_.__value_.__r.__words[0];
          if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v213.__r_.__value_.__r.__words[2]);
          else
            size = v213.__r_.__value_.__l.__size_;
          v70 = std::string::append((std::string *)v230, (const std::string::value_type *)v68, size);
          v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          *(_QWORD *)&v236[16] = *((_QWORD *)&v70->__r_.__value_.__l + 2);
          *(_OWORD *)v236 = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          v72 = std::string::append((std::string *)v236, ")");
          v73 = v72->__r_.__value_.__r.__words[0];
          v233[0] = v72->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v233 + 7) = *(std::string::size_type *)((char *)&v72->__r_.__value_.__r.__words[1] + 7);
          v74 = HIBYTE(v72->__r_.__value_.__r.__words[2]);
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          v75 = v221;
          if ((unint64_t)v221 >= v222)
          {
            v78 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v221 - v220) >> 3);
            v79 = v78 + 1;
            if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_100259694();
            if (0x5555555555555556 * ((uint64_t)(v222 - v220) >> 3) > v79)
              v79 = 0x5555555555555556 * ((uint64_t)(v222 - v220) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - v220) >> 3) >= 0x555555555555555)
              v80 = 0xAAAAAAAAAAAAAAALL;
            else
              v80 = v79;
            *(_QWORD *)&buf[32] = &v222;
            if (v80)
              v81 = (char *)sub_1002596A8((uint64_t)&v222, v80);
            else
              v81 = 0;
            v82 = &v81[24 * v78];
            *(_QWORD *)buf = v81;
            *(_QWORD *)&buf[8] = v82;
            *(_QWORD *)&buf[24] = &v81[24 * v80];
            v83 = v233[0];
            *(_QWORD *)v82 = v73;
            *((_QWORD *)v82 + 1) = v83;
            *(_QWORD *)(v82 + 15) = *(_QWORD *)((char *)v233 + 7);
            v82[23] = v74;
            v233[0] = 0;
            *(_QWORD *)((char *)v233 + 7) = 0;
            *(_QWORD *)&buf[16] = v82 + 24;
            sub_100074D44(&v220, buf);
            v77 = v221;
            sub_100074DB8((uint64_t)buf);
          }
          else
          {
            v76 = v233[0];
            *v221 = v73;
            v75[1] = v76;
            *(std::string::size_type *)((char *)v75 + 15) = *(_QWORD *)((char *)v233 + 7);
            *((_BYTE *)v75 + 23) = v74;
            v233[0] = 0;
            *(_QWORD *)((char *)v233 + 7) = 0;
            v77 = v75 + 3;
          }
          v221 = v77;
          if ((v236[23] & 0x80000000) != 0)
            operator delete(*(void **)v236);
          if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v213.__r_.__value_.__l.__data_);
          if ((v230[23] & 0x80000000) != 0)
            operator delete(*(void **)v230);
          if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v215.__r_.__value_.__l.__data_);
          if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v214.__r_.__value_.__l.__data_);
        }
        v58 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v216, v234, 16);
      }
      while (v58);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v84 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v85 = -[NSMutableArray count](v31, "count");
      sub_1002563C0(", ", &v220, (uint64_t)buf);
      v86 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v236 = 134218242;
      *(_QWORD *)&v236[4] = v85;
      *(_WORD *)&v236[12] = 2080;
      *(_QWORD *)&v236[14] = v86;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "%zu clusters to evaluate prefetch across: %s", v236, 0x16u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v183 = qword_1022A0048;
      v184 = -[NSMutableArray count](v31, "count");
      sub_1002563C0(", ", &v220, (uint64_t)v236);
      if (v236[23] >= 0)
        v185 = v236;
      else
        v185 = *(_BYTE **)v236;
      *(_DWORD *)v230 = 134218242;
      *(_QWORD *)&v230[4] = v184;
      *(_WORD *)&v230[12] = 2080;
      *(_QWORD *)&v230[14] = v185;
      LODWORD(v199) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v183, 2, "%zu clusters to evaluate prefetch across: %s", (size_t)v230, v199);
      v187 = v186;
      if ((v236[23] & 0x80000000) != 0)
        operator delete(*(void **)v236);
      sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v187);
      if (v187 != buf)
        free(v187);
    }
    memset(&v215, 0, sizeof(v215));
    memset(v236, 0, sizeof(v236));
    *(_DWORD *)v237 = 1065353216;
    v87 = objc_msgSend(a2, "count");
    sub_10012E444((uint64_t)v236, vcvtps_u32_f32((float)(unint64_t)v87 / *(float *)v237));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v88 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v89 = objc_msgSend(a2, "count");
      v90 = -[NSMutableArray count](v31, "count");
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v89;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v90;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "SelectIndoor, selection, groups, %{public}ld, clusters, %{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v188 = qword_1022A0048;
      v189 = objc_msgSend(a2, "count");
      v190 = -[NSMutableArray count](v31, "count");
      *(_DWORD *)v230 = 134349312;
      *(_QWORD *)&v230[4] = v189;
      *(_WORD *)&v230[12] = 2050;
      *(_QWORD *)&v230[14] = v190;
      LODWORD(v199) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v188, 0, "SelectIndoor, selection, groups, %{public}ld, clusters, %{public}ld", v230, v199);
      v192 = (char *)v191;
      sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v191);
      if (v192 != buf)
        free(v192);
    }
    v211 = 0u;
    v212 = 0u;
    v209 = 0u;
    v210 = 0u;
    v91 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v209, v232, 16);
    if (v91)
    {
      v92 = *(_QWORD *)v210;
      do
      {
        v93 = 0;
        do
        {
          if (*(_QWORD *)v210 != v92)
            objc_enumerationMutation(a2);
          v94 = *(void **)(*((_QWORD *)&v209 + 1) + 8 * (_QWORD)v93);
          v95 = (__int128 **)objc_msgSend(v94, "getLocationIds");
          memset(&v214, 0, sizeof(v214));
          sub_100259B94((char *)&v214, *v95, v95[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v95[1] - (char *)*v95) >> 3));
          if (v214.__r_.__value_.__r.__words[0] == v214.__r_.__value_.__l.__size_)
          {
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102129DE0);
            v118 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              v119 = objc_msgSend(objc_msgSend(v94, "groupId"), "UTF8String");
              *(_DWORD *)buf = 136380675;
              *(_QWORD *)&buf[4] = v119;
              _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "SelectIndoor, group, %{private}s, #Warning", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102129DE0);
              v143 = qword_1022A0048;
              v144 = objc_msgSend(objc_msgSend(v94, "groupId"), "UTF8String");
              *(_DWORD *)v230 = 136380675;
              *(_QWORD *)&v230[4] = v144;
              LODWORD(v199) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v143, 0, "SelectIndoor, group, %{private}s, #Warning", v230, v199);
              v117 = (char *)v145;
              sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v145);
              goto LABEL_173;
            }
          }
          else
          {
            v207 = 0u;
            v208 = 0u;
            v205 = 0u;
            v206 = 0u;
            v96 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v205, v231, 16);
            if (v96)
            {
              v97 = 0;
              v98 = *(_QWORD *)v206;
              v99 = INFINITY;
              do
              {
                for (j = 0; j != v96; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v206 != v98)
                    objc_enumerationMutation(v31);
                  v101 = *(void **)(*((_QWORD *)&v205 + 1) + 8 * (_QWORD)j);
                  objc_msgSend(v94, "distance:", objc_msgSend(v101, "ecef"));
                  if (v102 < v99)
                  {
                    v99 = v102;
                    v97 = v101;
                  }
                }
                v96 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v205, v231, 16);
              }
              while (v96);
              if (v99 < a8)
              {
                sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(v94, "groupId"), "UTF8String"));
                *(_QWORD *)v230 = buf;
                v103 = sub_100259D9C((uint64_t)v236, buf, (uint64_t)&unk_101B9EB60, (__int128 **)v230);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                if (*((_BYTE *)v103 + 40))
                {
                  v104 = v103[6];
                  if (v99 < *(double *)(v104 + 8))
                  {
                    *(double *)(v104 + 8) = v99;
                    v105 = objc_msgSend(v97, "relevancy:", a6);
                    if (!*((_BYTE *)v103 + 40))
                      __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
                    *(_QWORD *)(v103[6] + 16) = v105;
                    if (qword_1022A0040 != -1)
                      dispatch_once(&qword_1022A0040, &stru_102129DE0);
                    v106 = qword_1022A0048;
                    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
                    {
                      v107 = objc_msgSend(objc_msgSend(v94, "groupId"), "UTF8String");
                      objc_msgSend(objc_msgSend(v97, "latlon"), "latitude");
                      v109 = v108;
                      objc_msgSend(objc_msgSend(v97, "latlon"), "longitude");
                      *(_DWORD *)buf = 136381187;
                      *(_QWORD *)&buf[4] = v107;
                      *(_WORD *)&buf[12] = 2049;
                      *(_QWORD *)&buf[14] = v109;
                      *(_WORD *)&buf[22] = 2049;
                      *(_QWORD *)&buf[24] = v110;
                      _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "SelectIndoor, group, disjoint, %{private}s, cluster, %{private}.7f, %{private}.7f", buf, 0x20u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0040 != -1)
                        dispatch_once(&qword_1022A0040, &stru_102129DE0);
                      v111 = qword_1022A0048;
                      v112 = objc_msgSend(objc_msgSend(v94, "groupId"), "UTF8String");
                      objc_msgSend(objc_msgSend(v97, "latlon"), "latitude");
                      v114 = v113;
                      objc_msgSend(objc_msgSend(v97, "latlon"), "longitude");
                      *(_DWORD *)v230 = 136381187;
                      *(_QWORD *)&v230[4] = v112;
                      *(_WORD *)&v230[12] = 2049;
                      *(_QWORD *)&v230[14] = v114;
                      *(_WORD *)&v230[22] = 2049;
                      *(_QWORD *)&v230[24] = v115;
                      LODWORD(v199) = 32;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v111, 2, "SelectIndoor, group, disjoint, %{private}s, cluster, %{private}.7f, %{private}.7f", v230, v199);
                      v117 = (char *)v116;
                      sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v116);
LABEL_173:
                      if (v117 != buf)
                        free(v117);
                    }
                  }
                }
                else
                {
                  v120 = objc_msgSend(v97, "relevancy:", a6);
                  v121 = v120;
                  v122 = v215.__r_.__value_.__l.__size_;
                  if (v215.__r_.__value_.__l.__size_ >= v215.__r_.__value_.__r.__words[2])
                  {
                    v124 = (void *)v215.__r_.__value_.__r.__words[0];
                    v125 = 0xAAAAAAAAAAAAAAABLL
                         * ((uint64_t)(v215.__r_.__value_.__l.__size_ - v215.__r_.__value_.__r.__words[0]) >> 3);
                    v126 = v125 + 1;
                    if (v125 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_100259694();
                    if (0x5555555555555556
                       * ((uint64_t)(v215.__r_.__value_.__r.__words[2] - v215.__r_.__value_.__r.__words[0]) >> 3) > v126)
                      v126 = 0x5555555555555556
                           * ((uint64_t)(v215.__r_.__value_.__r.__words[2] - v215.__r_.__value_.__r.__words[0]) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL
                       * ((uint64_t)(v215.__r_.__value_.__r.__words[2] - v215.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                      v127 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v127 = v126;
                    if (v127)
                    {
                      v128 = (char *)sub_1002596A8((uint64_t)&v215.__r_.__value_.__r.__words[2], v127);
                      v122 = v215.__r_.__value_.__l.__size_;
                      v124 = (void *)v215.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      v128 = 0;
                    }
                    v129 = (double *)&v128[24 * v125];
                    *(_QWORD *)v129 = v94;
                    v129[1] = v99;
                    *((_QWORD *)v129 + 2) = v121;
                    v130 = (std::string::size_type)v129;
                    if ((void *)v122 != v124)
                    {
                      do
                      {
                        v131 = *(_OWORD *)(v122 - 24);
                        *(_QWORD *)(v130 - 8) = *(_QWORD *)(v122 - 8);
                        *(_OWORD *)(v130 - 24) = v131;
                        v130 -= 24;
                        v122 -= 24;
                      }
                      while ((void *)v122 != v124);
                      v124 = (void *)v215.__r_.__value_.__r.__words[0];
                    }
                    v123 = (std::string::size_type)(v129 + 3);
                    v215.__r_.__value_.__r.__words[0] = v130;
                    v215.__r_.__value_.__l.__size_ = (std::string::size_type)(v129 + 3);
                    v215.__r_.__value_.__r.__words[2] = (std::string::size_type)&v128[24 * v127];
                    if (v124)
                      operator delete(v124);
                  }
                  else
                  {
                    *(_QWORD *)v215.__r_.__value_.__l.__size_ = v94;
                    *(double *)(v122 + 8) = v99;
                    v123 = v122 + 24;
                    *(_QWORD *)(v122 + 16) = v120;
                  }
                  v215.__r_.__value_.__l.__size_ = v123;
                  if (!*((_BYTE *)v103 + 40))
                    *((_BYTE *)v103 + 40) = 1;
                  v103[6] = v123 - 24;
                  if (qword_1022A0040 != -1)
                    dispatch_once(&qword_1022A0040, &stru_102129DE0);
                  v132 = qword_1022A0048;
                  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
                  {
                    v133 = objc_msgSend(objc_msgSend(v94, "groupId"), "UTF8String");
                    objc_msgSend(objc_msgSend(v97, "latlon"), "latitude");
                    v135 = v134;
                    objc_msgSend(objc_msgSend(v97, "latlon"), "longitude");
                    *(_DWORD *)buf = 136381187;
                    *(_QWORD *)&buf[4] = v133;
                    *(_WORD *)&buf[12] = 2049;
                    *(_QWORD *)&buf[14] = v135;
                    *(_WORD *)&buf[22] = 2049;
                    *(_QWORD *)&buf[24] = v136;
                    _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEBUG, "SelectIndoor, group, new, %{private}s, cluster, %{private}.7f, %{private}.7f", buf, 0x20u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0040 != -1)
                      dispatch_once(&qword_1022A0040, &stru_102129DE0);
                    v137 = qword_1022A0048;
                    v138 = objc_msgSend(objc_msgSend(v94, "groupId"), "UTF8String");
                    objc_msgSend(objc_msgSend(v97, "latlon"), "latitude");
                    v140 = v139;
                    objc_msgSend(objc_msgSend(v97, "latlon"), "longitude");
                    *(_DWORD *)v230 = 136381187;
                    *(_QWORD *)&v230[4] = v138;
                    *(_WORD *)&v230[12] = 2049;
                    *(_QWORD *)&v230[14] = v140;
                    *(_WORD *)&v230[22] = 2049;
                    *(_QWORD *)&v230[24] = v141;
                    LODWORD(v199) = 32;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v137, 2, "SelectIndoor, group, new, %{private}s, cluster, %{private}.7f, %{private}.7f", v230, v199);
                    v117 = (char *)v142;
                    sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v142);
                    goto LABEL_173;
                  }
                }
              }
            }
          }
          *(_QWORD *)buf = &v214;
          sub_100259608((void ***)buf);
          v93 = (char *)v93 + 1;
        }
        while (v93 != v91);
        v146 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v209, v232, 16);
        v91 = v146;
      }
      while (v146);
    }
    v147 = 126
         - 2
         * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v215.__r_.__value_.__l.__size_ - v215.__r_.__value_.__r.__words[0]) >> 3));
    if (v215.__r_.__value_.__l.__size_ == v215.__r_.__value_.__r.__words[0])
      v148 = 0;
    else
      v148 = v147;
    sub_10025A5C8((uint64_t)v215.__r_.__value_.__l.__data_, (double *)v215.__r_.__value_.__l.__size_, (uint64_t)buf, v148, 1);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v149 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL
                         * ((uint64_t)(v215.__r_.__value_.__l.__size_ - v215.__r_.__value_.__r.__words[0]) >> 3);
      _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "SelectIndoor, candidates, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      *(_DWORD *)v230 = 134349056;
      *(_QWORD *)&v230[4] = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(v215.__r_.__value_.__l.__size_ - v215.__r_.__value_.__r.__words[0]) >> 3);
      LODWORD(v199) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectIndoor, candidates, %{public}ld", v230, v199);
      v194 = (char *)v193;
      sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v193);
      if (v194 != buf)
        free(v194);
    }
    memset(&v214, 0, sizeof(v214));
    v151 = v215.__r_.__value_.__l.__size_;
    v150 = v215.__r_.__value_.__r.__words[0];
    if (v215.__r_.__value_.__r.__words[0] == v215.__r_.__value_.__l.__size_)
      goto LABEL_215;
    v152 = 0;
    do
    {
      v153 = objc_msgSend(*(id *)v150, "getLocationIds");
      v154 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153[1] - *v153) >> 3);
      v155 = v152;
      if (v152 < a3)
      {
        *(_QWORD *)buf = objc_msgSend(objc_msgSend(*(id *)v150, "groupId"), "UTF8String");
        v156 = objc_msgSend(*(id *)v150, "getLocationIds");
        *(_QWORD *)v230 = objc_msgSend(*(id *)v150, "locationContext");
        v157 = v214.__r_.__value_.__l.__size_;
        if (v214.__r_.__value_.__l.__size_ >= v214.__r_.__value_.__r.__words[2])
        {
          v159 = sub_10025B634((uint64_t *)&v214, (char **)buf, (uint64_t)v156, (_QWORD *)(v150 + 16), v230, &dword_101B97F18);
        }
        else
        {
          sub_1015A2E04((_QWORD *)v214.__r_.__value_.__l.__size_, *(char **)buf);
          *(_QWORD *)(v157 + 24) = v156;
          v158 = *(_QWORD *)v230;
          *(_QWORD *)(v157 + 32) = *(_QWORD *)(v150 + 16);
          *(_QWORD *)(v157 + 40) = v158;
          *(_DWORD *)(v157 + 48) = 0;
          v159 = v157 + 56;
        }
        v214.__r_.__value_.__l.__size_ = v159;
        v155 = v154 + v152;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v160 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v161 = objc_msgSend(objc_msgSend(*(id *)v150, "groupId"), "UTF8String");
        *(_DWORD *)buf = 136381443;
        *(_QWORD *)&buf[4] = v161;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v152 < a3;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = v154;
        *(_WORD *)&buf[28] = 2050;
        *(_QWORD *)&buf[30] = v155;
        _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEBUG, "SelectIndoor, candidate, %{private}s, added, %{public}d, floors, %{public}ld, total, %{public}ld", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v162 = qword_1022A0048;
        v163 = objc_msgSend(objc_msgSend(*(id *)v150, "groupId"), "UTF8String");
        *(_DWORD *)v230 = 136381443;
        *(_QWORD *)&v230[4] = v163;
        *(_WORD *)&v230[12] = 1026;
        *(_DWORD *)&v230[14] = v152 < a3;
        *(_WORD *)&v230[18] = 2050;
        *(_QWORD *)&v230[20] = v154;
        *(_WORD *)&v230[28] = 2050;
        *(_QWORD *)&v230[30] = v155;
        LODWORD(v199) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v162, 2, "SelectIndoor, candidate, %{private}s, added, %{public}d, floors, %{public}ld, total, %{public}ld", v230, v199);
        v165 = (char *)v164;
        sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v164);
        if (v165 != buf)
          free(v165);
      }
      v150 += 24;
      v152 = v155;
    }
    while (v150 != v151);
    if (v214.__r_.__value_.__r.__words[0] == v214.__r_.__value_.__l.__size_)
    {
LABEL_215:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v169 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEFAULT, "SelectIndoor, selected, none", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        *(_WORD *)v230 = 0;
        LODWORD(v199) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectIndoor, selected, none", v230, v199);
        v196 = (char *)v195;
        sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v195);
        if (v196 != buf)
          free(v196);
      }
      v168 = a7;
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v167 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = 0x6DB6DB6DB6DB6DB7
                           * ((uint64_t)(v214.__r_.__value_.__l.__size_ - v214.__r_.__value_.__r.__words[0]) >> 3);
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v155;
        _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "SelectIndoor, selected, venues, %{public}ld, floors, %{public}ld", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        *(_DWORD *)v230 = 134349312;
        *(_QWORD *)&v230[4] = 0x6DB6DB6DB6DB6DB7
                            * ((uint64_t)(v214.__r_.__value_.__l.__size_ - v214.__r_.__value_.__r.__words[0]) >> 3);
        *(_WORD *)&v230[12] = 2050;
        *(_QWORD *)&v230[14] = v155;
        LODWORD(v199) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectIndoor, selected, venues, %{public}ld, floors, %{public}ld", v230, v199);
        v198 = (char *)v197;
        sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v197);
        if (v198 != buf)
          free(v198);
      }
      *a7 = v214;
      v168 = &v214;
    }
    v168->__r_.__value_.__r.__words[0] = 0;
    v168->__r_.__value_.__l.__size_ = 0;
    v168->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)buf = &v214;
    sub_10025B5A8((void ***)buf);
    sub_100259B0C((uint64_t)v236);
    if (v215.__r_.__value_.__r.__words[0])
    {
      v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
      operator delete(v215.__r_.__value_.__l.__data_);
    }
    *(_QWORD *)buf = &v220;
    sub_100259608((void ***)buf);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v166 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEFAULT, "SelectIndoor, noclusters, #Warning", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      *(_WORD *)v236 = 0;
      LODWORD(v199) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectIndoor, noclusters, #Warning", v236, v199);
      v182 = (char *)v181;
      sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v181);
      if (v182 != buf)
        free(v182);
    }
    a7->__r_.__value_.__r.__words[0] = 0;
    a7->__r_.__value_.__l.__size_ = 0;
    a7->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_100255C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  STACK[0x520] = (unint64_t)&a41;
  sub_10025B5A8((void ***)&STACK[0x520]);
  sub_100259B0C((uint64_t)&STACK[0x450]);
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
  }
  STACK[0x450] = (unint64_t)&a58;
  sub_100259608((void ***)&STACK[0x450]);
  _Unwind_Resume(a1);
}

void sub_100255E14(uint64_t a1, uint64_t *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  if (*((_BYTE *)a2 + 68))
  {
    v4 = -[CLIndoorPrefetchRegion initFromLOI:]([CLIndoorPrefetchRegion alloc], "initFromLOI:", a2);
    objc_msgSend(**(id **)a1, "addObject:", v4);

    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v6 = *a2;
      v7 = a2[1];
      *(_DWORD *)buf = 134283777;
      v41 = v6;
      v42 = 2049;
      v43 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "SelectIndoor, loi, predicted, %{private}.7f, %{private}.7f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v8 = qword_1022A0048;
    v9 = *a2;
    v10 = a2[1];
    v36 = 134283777;
    v37 = v9;
    v38 = 2049;
    v39 = v10;
    v11 = "SelectIndoor, loi, predicted, %{private}.7f, %{private}.7f";
LABEL_10:
    v12 = 2;
LABEL_36:
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, v12, v11, &v36, 22);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "auto selectIndoorPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)::(anonymous class)::operator()(CLIndoorPrefetchLocationOfInterest) const", "%s\n", v29);
    if (v30 != buf)
      free(v30);
    return;
  }
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v13 = **(void ***)(a1 + 8);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (!v14)
  {
LABEL_19:
    v18 = -[CLIndoorPrefetchRegion initFromLOI:]([CLIndoorPrefetchRegion alloc], "initFromLOI:", a2);
    objc_msgSend(**(id **)(a1 + 8), "addObject:", v18);

    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v20 = *a2;
      v21 = a2[1];
      *(_DWORD *)buf = 134283777;
      v41 = v20;
      v42 = 2049;
      v43 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "SelectIndoor, loi, historical, %{private}.7f, %{private}.7f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v8 = qword_1022A0048;
    v22 = *a2;
    v23 = a2[1];
    v36 = 134283777;
    v37 = v22;
    v38 = 2049;
    v39 = v23;
    v11 = "SelectIndoor, loi, historical, %{private}.7f, %{private}.7f";
    goto LABEL_10;
  }
  v15 = v14;
  v16 = *(_QWORD *)v32;
LABEL_13:
  v17 = 0;
  while (1)
  {
    if (*(_QWORD *)v32 != v16)
      objc_enumerationMutation(v13);
    if (objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v17), "mergeLocationOfInterest:clusterRadius:", a2, *(double *)(a1 + 16)))break;
    if (v15 == (id)++v17)
    {
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      if (v15)
        goto LABEL_13;
      goto LABEL_19;
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v24 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *a2;
    v26 = a2[1];
    *(_DWORD *)buf = 134283777;
    v41 = v25;
    v42 = 2049;
    v43 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "SelectIndoor, loi, skiphist, %{private}.7f, %{private}.7f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v8 = qword_1022A0048;
    v27 = *a2;
    v28 = a2[1];
    v36 = 134283777;
    v37 = v27;
    v38 = 2049;
    v39 = v28;
    v11 = "SelectIndoor, loi, skiphist, %{private}.7f, %{private}.7f";
    v12 = 0;
    goto LABEL_36;
  }
}

uint64_t sub_100256310(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_100259694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1002596A8(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_100074D44(a1, v7);
    return sub_100074DB8((uint64_t)v7);
  }
  return result;
}

void sub_1002563AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100074DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002563C0@<X0>(char *__s@<X1>, uint64_t *result@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  std::string::size_type v19;

  v5 = *result;
  v6 = result[1];
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v5 == v6)
    goto LABEL_10;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = (char *)v5;
  else
    v8 = *(char **)v5;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  for (result = (uint64_t *)sub_100259854((std::string *)a3, a3, v8, &v8[v9], v9);
        ;
        result = (uint64_t *)sub_100259854((std::string *)a3, v16, v18, &v18[v19], v19))
  {
    v5 += 24;
LABEL_10:
    if (v5 == v6)
      break;
    v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = a3;
    else
      v11 = *(_QWORD *)a3;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a3 + 8);
    v12 = v11 + v10;
    v13 = strlen(__s);
    sub_100259854((std::string *)a3, v12, __s, &__s[v13], v13);
    v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) == 0)
      v15 = a3;
    else
      v15 = *(_QWORD *)a3;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a3 + 8);
    v16 = v15 + v14;
    v17 = *(char *)(v5 + 23);
    if (v17 >= 0)
      v18 = (char *)v5;
    else
      v18 = *(char **)v5;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v5 + 23);
    else
      v19 = *(_QWORD *)(v5 + 8);
  }
  return result;
}

void sub_1002564C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_1002564E0(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSMutableArray *v18;
  int v19;
  id v20;
  uint64_t v21;
  void *i;
  NSObject *v23;
  const char *v24;
  double v25;
  uint64_t v26;
  double v27;
  const char *v28;
  double v29;
  unint64_t v30;
  double v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  NSMutableArray *v49;
  id v50;
  uint64_t v51;
  void *v52;
  void *v53;
  double v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  char *v64;
  id v65;
  NSObject *v66;
  id v67;
  id v68;
  double v69;
  id v70;
  unint64_t v71;
  int v72;
  id v73;
  id v74;
  NSObject *v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  void *v80;
  __int128 **v81;
  id v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  int v88;
  void *v89;
  double v90;
  double v91;
  _BYTE *v92;
  NSObject *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  id v99;
  unint64_t v100;
  unint64_t v101;
  double v102;
  const char *v103;
  char *v104;
  NSObject *v105;
  id v106;
  uint64_t v107;
  id v108;
  const char *v109;
  id v110;
  id v111;
  int v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  NSObject *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  double v130;
  id v131;
  uint64_t v132;
  id v133;
  unint64_t v134;
  unint64_t v135;
  double v136;
  double v137;
  id v138;
  const char *v139;
  id v140;
  unint64_t v141;
  uint64_t v142;
  NSObject *v143;
  char *v144;
  double v145;
  id *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  id v155;
  char *v156;
  uint64_t v158;
  id v159;
  const char *v160;
  char *v161;
  NSObject *v162;
  NSObject *v163;
  __int128 *v164;
  NSObject *v165;
  const char *v166;
  char *v167;
  uint64_t v168;
  id v169;
  id v170;
  double v171;
  id v172;
  unint64_t v173;
  int v174;
  const char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  const char *v182;
  char *v183;
  const char *v184;
  char *v185;
  uint64_t v186;
  id v187;
  id v188;
  const char *v189;
  char *v190;
  const char *v191;
  char *v192;
  const char *v193;
  char *v194;
  const char *v195;
  char *v196;
  uint64_t v197;
  unsigned __int8 *v200;
  NSMutableArray *v202;
  NSMutableArray *obj;
  uint64_t v206;
  NSMutableArray *v207;
  int v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  unint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  _BYTE v219[32];
  float v220;
  char *v221;
  char *v222;
  unint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  _BYTE v232[128];
  _BYTE v233[128];
  _BYTE v234[12];
  __int16 v235;
  unint64_t v236;
  __int16 v237;
  double v238;
  __int16 v239;
  _BYTE v240[24];
  _BYTE v241[128];
  _BYTE v242[128];
  _BYTE buf[24];
  double v244;
  __int16 v245;
  _BYTE v246[24];
  int v247;
  char v248;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v200 = a5;
  v13 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = a8;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = a3;
    *(_WORD *)&buf[22] = 2050;
    v244 = a9;
    v245 = 1026;
    *(_DWORD *)v246 = (int)((double)a4 / 86400.0);
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SelectWifi2, params, radius, %{public}lf, maxFloors, %{public}zu, clusterRadius, %{public}lf, loiMaxDays, %{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    *(_DWORD *)v234 = 134349824;
    *(double *)&v234[4] = a8;
    v235 = 2050;
    v236 = a3;
    v237 = 2050;
    v238 = a9;
    v239 = 1026;
    *(_DWORD *)v240 = (int)((double)a4 / 86400.0);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectWifi2, params, radius, %{public}lf, maxFloors, %{public}zu, clusterRadius, %{public}lf, loiMaxDays, %{public}d", v234, 38);
    v167 = (char *)v166;
    sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v166);
    if (v167 != buf)
      free(v167);
  }
  v202 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3));
  obj = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3));
  v14 = a1[1];
  v15 = *a1;
  if (v14 != *a1)
  {
    do
    {
      v16 = v14 - 72;
      if (*(_BYTE *)(v14 - 4) || *(int *)(v14 - 8) >= 1)
      {
        v17 = -[CLIndoorPrefetchRegion initFromLOI:]([CLIndoorPrefetchRegion alloc], "initFromLOI:", v14 - 72);
        v18 = v202;
        if (!*(_BYTE *)(v14 - 4))
        {
          v230 = 0u;
          v231 = 0u;
          v228 = 0u;
          v229 = 0u;
          v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v228, v242, 16);
          v18 = obj;
          if (v20)
          {
            v21 = *(_QWORD *)v229;
            while (2)
            {
              for (i = 0; i != v20; i = (char *)i + 1)
              {
                if (*(_QWORD *)v229 != v21)
                  objc_enumerationMutation(obj);
                if ((objc_msgSend(*(id *)(*((_QWORD *)&v228 + 1) + 8 * (_QWORD)i), "mergeLocationOfInterest:clusterRadius:", v14 - 72, a9) & 1) != 0)
                {
                  v19 = 77;
                  goto LABEL_21;
                }
              }
              v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v228, v242, 16);
              if (v20)
                continue;
              break;
            }
            v18 = obj;
          }
        }
        -[NSMutableArray addObject:](v18, "addObject:", v17);
        v19 = 65;
LABEL_21:

      }
      else
      {
        v19 = 83;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v23 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v24 = "predicted";
        if (*(_BYTE *)(v14 - 4))
        {
          v25 = *(double *)(v14 - 48);
        }
        else
        {
          v24 = "historical";
          v25 = (double)*(int *)(v14 - 8);
        }
        v26 = *(_QWORD *)(v14 - 72);
        v27 = *(double *)(v14 - 64);
        *(_DWORD *)buf = 136447235;
        *(_QWORD *)&buf[4] = v24;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v26;
        *(_WORD *)&buf[22] = 2049;
        v244 = v27;
        v245 = 2050;
        *(double *)v246 = v25;
        *(_WORD *)&v246[8] = 1026;
        *(_DWORD *)&v246[10] = v19;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "SelectWifi2, loi, %{public}s, %{private}.7f, %{private}.7f, visitconf, %{public}.1f, action, %{public}c", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        if (*(_BYTE *)(v14 - 4))
          v28 = "predicted";
        else
          v28 = "historical";
        v30 = *(_QWORD *)(v14 - 72);
        v29 = *(double *)(v14 - 64);
        if (*(_BYTE *)(v14 - 4))
          v31 = *(double *)(v14 - 48);
        else
          v31 = (double)*(int *)(v14 - 8);
        *(_DWORD *)v234 = 136447235;
        *(_QWORD *)&v234[4] = v28;
        v235 = 2049;
        v236 = v30;
        v237 = 2049;
        v238 = v29;
        v239 = 2050;
        *(double *)v240 = v31;
        *(_WORD *)&v240[8] = 1026;
        *(_DWORD *)&v240[10] = v19;
        LODWORD(v197) = 48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectWifi2, loi, %{public}s, %{private}.7f, %{private}.7f, visitconf, %{public}.1f, action, %{public}c", v234, v197);
        v33 = (char *)v32;
        sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v14 -= 72;
    }
    while (v16 != v15);
  }
  if (*v200)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v34 = qword_1022A0048;
    v35 = os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT);
    if (v35)
    {
      if (!*v200)
        sub_1018ED2D4(v35, v36, v37);
      v38 = *(_QWORD *)(v200 + 108);
      v39 = *(_QWORD *)(v200 + 116);
      *(_DWORD *)buf = 134283777;
      *(_QWORD *)&buf[4] = v38;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v39;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "SelectWifi2, loi, historical, %{private}.7f, %{private}.7f, visitconf, 0, action, A", buf, 0x16u);
    }
    v40 = sub_1001BFF7C(115, 2);
    v43 = v200;
    if ((_DWORD)v40)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      if (!*v200)
        sub_1018ED2D4(v177, v178, v179);
      v180 = *(_QWORD *)(v200 + 108);
      v181 = *(_QWORD *)(v200 + 116);
      *(_DWORD *)v234 = 134283777;
      *(_QWORD *)&v234[4] = v180;
      v235 = 2049;
      v236 = v181;
      LODWORD(v197) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectWifi2, loi, historical, %{private}.7f, %{private}.7f, visitconf, 0, action, A", v234, v197);
      v183 = (char *)v182;
      v40 = sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v182);
      if (v183 != buf)
        free(v183);
      v43 = v200;
    }
    if (!*v43)
      sub_1018ED2D4(v40, v41, v42);
    v44 = *(_QWORD *)(v43 + 108);
    v45 = *(_QWORD *)(v43 + 116);
    v46 = *(_QWORD *)(v43 + 28);
    v47 = sub_10025DC34((uint64_t)(v43 + 8));
    *(_QWORD *)buf = v44;
    *(_QWORD *)&buf[8] = v45;
    *(_QWORD *)&buf[16] = v46;
    v244 = 1.0;
    *(_QWORD *)&v246[6] = v47;
    LOBYTE(v245) = 1;
    v246[14] = 0;
    v247 = 1;
    v248 = 0;
    v48 = -[CLIndoorPrefetchRegion initFromLOI:]([CLIndoorPrefetchRegion alloc], "initFromLOI:", buf);
    -[NSMutableArray addObject:](obj, "addObject:", v48);

  }
  v207 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (char *)-[NSMutableArray count](v202, "count") + (_QWORD)-[NSMutableArray count](obj, "count"));
  -[NSMutableArray addObjectsFromArray:](v207, "addObjectsFromArray:", obj);
  -[NSMutableArray addObjectsFromArray:](v207, "addObjectsFromArray:", v202);
  v49 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", -[NSMutableArray count](v207, "count"));
  v226 = 0u;
  v227 = 0u;
  v224 = 0u;
  v225 = 0u;
  v50 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v207, "countByEnumeratingWithState:objects:count:", &v224, v241, 16);
  if (v50)
  {
    v51 = *(_QWORD *)v225;
    do
    {
      v52 = 0;
      do
      {
        if (*(_QWORD *)v225 != v51)
          objc_enumerationMutation(v207);
        v53 = *(void **)(*((_QWORD *)&v224 + 1) + 8 * (_QWORD)v52);
        v54 = COERCE_DOUBLE(objc_msgSend(v53, "relevancy:", a6));
        if (1000000 * a4 < a6 - *(_QWORD *)&v54)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          v55 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(objc_msgSend(v53, "latlon"), "latitude");
            v57 = v56;
            objc_msgSend(objc_msgSend(v53, "latlon"), "longitude");
            *(_DWORD *)buf = 134284033;
            *(_QWORD *)&buf[4] = v57;
            *(_WORD *)&buf[12] = 2049;
            *(_QWORD *)&buf[14] = v58;
            *(_WORD *)&buf[22] = 2050;
            v244 = v54;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "SelectWifi2, irrelevant, %{private}.7f, %{private}.7f, relevancy, %{public}ld", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102129DE0);
            v59 = qword_1022A0048;
            objc_msgSend(objc_msgSend(v53, "latlon"), "latitude");
            v61 = v60;
            objc_msgSend(objc_msgSend(v53, "latlon"), "longitude");
            *(_DWORD *)v234 = 134284033;
            *(_QWORD *)&v234[4] = v61;
            v235 = 2049;
            v236 = v62;
            v237 = 2050;
            v238 = v54;
            LODWORD(v197) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 2, "SelectWifi2, irrelevant, %{private}.7f, %{private}.7f, relevancy, %{public}ld", v234, v197);
            v64 = (char *)v63;
            sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v63);
            if (v64 != buf)
              free(v64);
          }
          -[NSMutableArray addObject:](v49, "addObject:", v53);
        }
        v52 = (char *)v52 + 1;
      }
      while (v50 != v52);
      v65 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v207, "countByEnumeratingWithState:objects:count:", &v224, v241, 16);
      v50 = v65;
    }
    while (v65);
  }
  -[NSMutableArray removeObjectsInArray:](v207, "removeObjectsInArray:", v49);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v66 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v67 = -[NSMutableArray count](v207, "count");
    v68 = -[NSMutableArray count](obj, "count");
    v69 = COERCE_DOUBLE(-[NSMutableArray count](v202, "count"));
    v70 = -[NSMutableArray count](v49, "count");
    v71 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
    v72 = *v200;
    *(_DWORD *)buf = 134350336;
    *(_QWORD *)&buf[4] = v67;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v68;
    *(_WORD *)&buf[22] = 2050;
    v244 = v69;
    v245 = 2050;
    *(_QWORD *)v246 = v70;
    *(_WORD *)&v246[8] = 2050;
    *(_QWORD *)&v246[10] = v71;
    *(_WORD *)&v246[18] = 1026;
    *(_DWORD *)&v246[20] = v72;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "SelectWifi2, clusters, %{public}ld, historical, %{public}ld, predicted, %{public}ld, irrelevant, %{public}ld, inputLOIs, %{public}ld, lastFix, %{public}d", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v168 = qword_1022A0048;
    v169 = -[NSMutableArray count](v207, "count");
    v170 = -[NSMutableArray count](obj, "count");
    v171 = COERCE_DOUBLE(-[NSMutableArray count](v202, "count"));
    v172 = -[NSMutableArray count](v49, "count");
    v173 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
    v174 = *v200;
    *(_DWORD *)v234 = 134350336;
    *(_QWORD *)&v234[4] = v169;
    v235 = 2050;
    v236 = (unint64_t)v170;
    v237 = 2050;
    v238 = v171;
    v239 = 2050;
    *(_QWORD *)v240 = v172;
    *(_WORD *)&v240[8] = 2050;
    *(_QWORD *)&v240[10] = v173;
    *(_WORD *)&v240[18] = 1026;
    *(_DWORD *)&v240[20] = v174;
    LODWORD(v197) = 58;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v168, 0, "SelectWifi2, clusters, %{public}ld, historical, %{public}ld, predicted, %{public}ld, irrelevant, %{public}ld, inputLOIs, %{public}ld, lastFix, %{public}d", v234, v197);
    v176 = (char *)v175;
    sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v175);
    if (v176 != buf)
      free(v176);
  }
  v73 = -[NSMutableArray count](v207, "count");
  if (v207 && v73)
  {
    v221 = 0;
    v222 = 0;
    v223 = 0;
    memset(v219, 0, sizeof(v219));
    v220 = 1.0;
    v74 = objc_msgSend(a2, "count");
    sub_10012E444((uint64_t)v219, vcvtps_u32_f32((float)(unint64_t)v74 / v220));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v75 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v76 = objc_msgSend(a2, "count");
      v77 = -[NSMutableArray count](v207, "count");
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v76;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v77;
      *(_WORD *)&buf[22] = 2050;
      v244 = a8;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "SelectWifi2, selection, avlgroups, %{public}ld, visitlois, %{public}ld, radius, %{public}lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v186 = qword_1022A0048;
      v187 = objc_msgSend(a2, "count");
      v188 = -[NSMutableArray count](v207, "count");
      *(_DWORD *)v234 = 134349568;
      *(_QWORD *)&v234[4] = v187;
      v235 = 2050;
      v236 = (unint64_t)v188;
      v237 = 2050;
      v238 = a8;
      LODWORD(v197) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v186, 0, "SelectWifi2, selection, avlgroups, %{public}ld, visitlois, %{public}ld, radius, %{public}lf", v234, v197);
      v190 = (char *)v189;
      sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v189);
      if (v190 != buf)
        free(v190);
    }
    v217 = 0u;
    v218 = 0u;
    v215 = 0u;
    v216 = 0u;
    v78 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v215, v233, 16);
    if (v78)
    {
      v206 = *(_QWORD *)v216;
      do
      {
        v79 = 0;
        do
        {
          if (*(_QWORD *)v216 != v206)
            objc_enumerationMutation(a2);
          v80 = *(void **)(*((_QWORD *)&v215 + 1) + 8 * (_QWORD)v79);
          v81 = (__int128 **)objc_msgSend(v80, "getLocationIds");
          v213 = 0uLL;
          v214 = 0;
          sub_100259B94((char *)&v213, *v81, v81[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v81[1] - (char *)*v81) >> 3));
          if ((_QWORD)v213 == *((_QWORD *)&v213 + 1))
          {
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102129DE0);
            v105 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              v106 = objc_msgSend(objc_msgSend(v80, "groupId"), "UTF8String");
              *(_DWORD *)buf = 136380675;
              *(_QWORD *)&buf[4] = v106;
              _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "SelectWifi2, group, %{private}s, #Warning", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102129DE0);
              v107 = qword_1022A0048;
              v108 = objc_msgSend(objc_msgSend(v80, "groupId"), "UTF8String");
              *(_DWORD *)v234 = 136380675;
              *(_QWORD *)&v234[4] = v108;
              LODWORD(v197) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v107, 0, "SelectWifi2, group, %{private}s, #Warning", v234, v197);
              v104 = (char *)v109;
              sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v109);
LABEL_145:
              if (v104 != buf)
                free(v104);
            }
          }
          else
          {
            v211 = 0u;
            v212 = 0u;
            v209 = 0u;
            v210 = 0u;
            v82 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v207, "countByEnumeratingWithState:objects:count:", &v209, v232, 16);
            if (v82)
            {
              v83 = 0;
              v84 = *(_QWORD *)v210;
LABEL_91:
              v85 = a6;
              v86 = v78;
              v87 = 0;
              v88 = v83 + (_DWORD)v82;
              while (1)
              {
                if (*(_QWORD *)v210 != v84)
                  objc_enumerationMutation(v207);
                v89 = *(void **)(*((_QWORD *)&v209 + 1) + 8 * v87);
                objc_msgSend(v80, "distance:", objc_msgSend(v89, "ecef"));
                v91 = v90;
                if (v90 <= a8)
                  break;
                if (v82 == (id)++v87)
                {
                  v82 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v207, "countByEnumeratingWithState:objects:count:", &v209, v232, 16);
                  v83 = v88;
                  v78 = v86;
                  a6 = v85;
                  if (v82)
                    goto LABEL_91;
                  goto LABEL_140;
                }
              }
              sub_1015A2E04(buf, (char *)objc_msgSend(objc_msgSend(v80, "groupId"), "UTF8String"));
              *(_QWORD *)v234 = buf;
              v92 = sub_100259D9C((uint64_t)v219, buf, (uint64_t)&unk_101B9EB60, (__int128 **)v234);
              v78 = v86;
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              a6 = v85;
              if (v92[40])
              {
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_102129DE0);
                v93 = qword_1022A0048;
                if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
                {
                  v94 = objc_msgSend(objc_msgSend(v80, "groupId"), "UTF8String");
                  objc_msgSend(objc_msgSend(v89, "latlon"), "latitude");
                  v96 = v95;
                  objc_msgSend(objc_msgSend(v89, "latlon"), "longitude");
                  *(_DWORD *)buf = 136381187;
                  *(_QWORD *)&buf[4] = v94;
                  *(_WORD *)&buf[12] = 2049;
                  *(_QWORD *)&buf[14] = v96;
                  *(_WORD *)&buf[22] = 2049;
                  v244 = v97;
                  _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_INFO, "SelectWifi2, overlap, %{private}s, loi, %{private}.7f, %{private}.7f", buf, 0x20u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0040 != -1)
                    dispatch_once(&qword_1022A0040, &stru_102129DE0);
                  v98 = qword_1022A0048;
                  v99 = objc_msgSend(objc_msgSend(v80, "groupId"), "UTF8String");
                  objc_msgSend(objc_msgSend(v89, "latlon"), "latitude");
                  v101 = v100;
                  objc_msgSend(objc_msgSend(v89, "latlon"), "longitude");
                  *(_DWORD *)v234 = 136381187;
                  *(_QWORD *)&v234[4] = v99;
                  v235 = 2049;
                  v236 = v101;
                  v237 = 2049;
                  v238 = v102;
                  LODWORD(v197) = 32;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v98, 1, "SelectWifi2, overlap, %{private}s, loi, %{private}.7f, %{private}.7f", v234, v197);
                  v104 = (char *)v103;
                  sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v103);
                  goto LABEL_145;
                }
              }
              else
              {
                v110 = objc_msgSend(v89, "relevancy:", v85);
                v111 = v110;
                v112 = v83 + 1 + v87;
                v113 = v222;
                if ((unint64_t)v222 >= v223)
                {
                  v115 = v221;
                  v116 = (v222 - v221) >> 5;
                  v117 = v116 + 1;
                  if ((unint64_t)(v116 + 1) >> 59)
                    sub_100259694();
                  v118 = v223 - (_QWORD)v221;
                  if ((uint64_t)(v223 - (_QWORD)v221) >> 4 > v117)
                    v117 = v118 >> 4;
                  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFE0)
                    v119 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v119 = v117;
                  if (v119)
                  {
                    v120 = (char *)sub_10025BA00((uint64_t)&v223, v119);
                    v115 = v221;
                    v113 = v222;
                  }
                  else
                  {
                    v120 = 0;
                  }
                  v121 = &v120[32 * v116];
                  *(_QWORD *)v121 = v80;
                  *((double *)v121 + 1) = v91;
                  *((_QWORD *)v121 + 2) = v111;
                  *((_DWORD *)v121 + 6) = v112;
                  if (v113 == v115)
                  {
                    v123 = &v120[32 * v116];
                  }
                  else
                  {
                    v122 = &v120[32 * v116];
                    do
                    {
                      v123 = v122 - 32;
                      v124 = *((_OWORD *)v113 - 1);
                      *((_OWORD *)v122 - 2) = *((_OWORD *)v113 - 2);
                      *((_OWORD *)v122 - 1) = v124;
                      v113 -= 32;
                      v122 -= 32;
                    }
                    while (v113 != v115);
                  }
                  v114 = (uint64_t *)(v121 + 32);
                  v221 = v123;
                  v222 = v121 + 32;
                  v223 = (unint64_t)&v120[32 * v119];
                  if (v115)
                    operator delete(v115);
                }
                else
                {
                  *(_QWORD *)v222 = v80;
                  *((double *)v113 + 1) = v91;
                  *((_QWORD *)v113 + 2) = v110;
                  v114 = (uint64_t *)(v113 + 32);
                  *((_DWORD *)v113 + 6) = v112;
                }
                v222 = (char *)v114;
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_102129DE0);
                v125 = qword_1022A0048;
                if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
                {
                  v126 = objc_msgSend(objc_msgSend(v80, "groupId"), "UTF8String");
                  objc_msgSend(objc_msgSend(v89, "latlon"), "latitude");
                  v128 = v127;
                  objc_msgSend(objc_msgSend(v89, "latlon"), "longitude");
                  v130 = v129;
                  v131 = objc_msgSend(v89, "relevancy:", v85);
                  *(_DWORD *)buf = 136381955;
                  *(_QWORD *)&buf[4] = v126;
                  *(_WORD *)&buf[12] = 2049;
                  *(_QWORD *)&buf[14] = v128;
                  *(_WORD *)&buf[22] = 2049;
                  v244 = v130;
                  v245 = 1026;
                  *(_DWORD *)v246 = v112;
                  *(_WORD *)&v246[4] = 2050;
                  *(_QWORD *)&v246[6] = v131;
                  *(_WORD *)&v246[14] = 2050;
                  *(_QWORD *)&v246[16] = (v222 - v221) >> 5;
                  _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "SelectWifi2, cluster, %{private}s, loi, %{private}.7f, %{private}.7f, priority, %{public}d, relevancy, %{public}llu, n, %{public}ld", buf, 0x3Au);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0040 != -1)
                    dispatch_once(&qword_1022A0040, &stru_102129DE0);
                  v132 = qword_1022A0048;
                  v133 = objc_msgSend(objc_msgSend(v80, "groupId"), "UTF8String");
                  objc_msgSend(objc_msgSend(v89, "latlon"), "latitude");
                  v135 = v134;
                  objc_msgSend(objc_msgSend(v89, "latlon"), "longitude");
                  v137 = v136;
                  v138 = objc_msgSend(v89, "relevancy:", v85);
                  *(_DWORD *)v234 = 136381955;
                  *(_QWORD *)&v234[4] = v133;
                  v235 = 2049;
                  v236 = v135;
                  v237 = 2049;
                  v238 = v137;
                  v239 = 1026;
                  *(_DWORD *)v240 = v112;
                  *(_WORD *)&v240[4] = 2050;
                  *(_QWORD *)&v240[6] = v138;
                  *(_WORD *)&v240[14] = 2050;
                  *(_QWORD *)&v240[16] = (v222 - v221) >> 5;
                  LODWORD(v197) = 58;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v132, 0, "SelectWifi2, cluster, %{private}s, loi, %{private}.7f, %{private}.7f, priority, %{public}d, relevancy, %{public}llu, n, %{public}ld", v234, v197);
                  v104 = (char *)v139;
                  sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v139);
                  goto LABEL_145;
                }
              }
            }
          }
LABEL_140:
          *(_QWORD *)buf = &v213;
          sub_100259608((void ***)buf);
          v79 = (char *)v79 + 1;
        }
        while (v79 != v78);
        v140 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v215, v233, 16);
        v78 = v140;
      }
      while (v140);
    }
    v141 = 126 - 2 * __clz((v222 - v221) >> 5);
    if (v222 == v221)
      v142 = 0;
    else
      v142 = v141;
    sub_10025BA34((double *)v221, (uint64_t *)v222, (uint64_t)buf, v142, 1);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v143 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = (v222 - v221) >> 5;
      _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, "SelectWifi2, candidates, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      *(_DWORD *)v234 = 134349056;
      *(_QWORD *)&v234[4] = (v222 - v221) >> 5;
      LODWORD(v197) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectWifi2, candidates, %{public}ld", v234, v197);
      v192 = (char *)v191;
      sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v191);
      if (v192 != buf)
        free(v192);
    }
    v213 = 0uLL;
    v214 = 0;
    v144 = v222;
    if (v221 == v222)
      goto LABEL_189;
    v145 = 0.0;
    v146 = (id *)(v221 + 16);
    do
    {
      v147 = (uint64_t *)objc_msgSend(*(v146 - 2), "getLocationIds");
      v148 = *v147;
      v149 = v147[1];
      v208 = *((_DWORD *)v146 + 2);
      *(_QWORD *)buf = objc_msgSend(objc_msgSend(*(v146 - 2), "groupId"), "UTF8String");
      v150 = objc_msgSend(*(v146 - 2), "getLocationIds");
      *(_QWORD *)v234 = objc_msgSend(*(v146 - 2), "locationContext");
      v151 = *((_QWORD *)&v213 + 1);
      if (*((_QWORD *)&v213 + 1) >= v214)
      {
        v153 = sub_10025B634((uint64_t *)&v213, (char **)buf, (uint64_t)v150, v146, v234, &v208);
      }
      else
      {
        sub_1015A2E04(*((_QWORD **)&v213 + 1), *(char **)buf);
        *(_QWORD *)(v151 + 24) = v150;
        v152 = *(_QWORD *)v234;
        *(_QWORD *)(v151 + 32) = *v146;
        *(_QWORD *)(v151 + 40) = v152;
        *(_DWORD *)(v151 + 48) = v208;
        v153 = v151 + 56;
      }
      *((_QWORD *)&v213 + 1) = v153;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      *(_QWORD *)&v145 += 0xAAAAAAAAAAAAAAABLL * ((v149 - v148) >> 3);
      v154 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v155 = objc_msgSend(objc_msgSend(*(v146 - 2), "groupId"), "UTF8String");
        *(_DWORD *)buf = 136381443;
        *(_QWORD *)&buf[4] = v155;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((v149 - v148) >> 3);
        *(_WORD *)&buf[22] = 2050;
        v244 = v145;
        v245 = 1026;
        *(_DWORD *)v246 = v208;
        _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEFAULT, "SelectWifi2, tile, %{private}s, floors, %{public}ld, total, %{public}ld, priority, %{public}d", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v158 = qword_1022A0048;
        v159 = objc_msgSend(objc_msgSend(*(v146 - 2), "groupId"), "UTF8String");
        *(_DWORD *)v234 = 136381443;
        *(_QWORD *)&v234[4] = v159;
        v235 = 2050;
        v236 = 0xAAAAAAAAAAAAAAABLL * ((v149 - v148) >> 3);
        v237 = 2050;
        v238 = v145;
        v239 = 1026;
        *(_DWORD *)v240 = v208;
        LODWORD(v197) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v158, 0, "SelectWifi2, tile, %{private}s, floors, %{public}ld, total, %{public}ld, priority, %{public}d", v234, v197);
        v161 = (char *)v160;
        sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v160);
        if (v161 != buf)
          free(v161);
      }
      v156 = (char *)(v146 + 2);
      v146 += 4;
    }
    while (*(_QWORD *)&v145 <= a3 && v156 != v144);
    if ((_QWORD)v213 == *((_QWORD *)&v213 + 1))
    {
LABEL_189:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v165 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEFAULT, "SelectWifi2, selected, none", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        *(_WORD *)v234 = 0;
        LODWORD(v197) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectWifi2, selected, none", v234, v197);
        v194 = (char *)v193;
        sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v193);
        if (v194 != buf)
          free(v194);
      }
      v164 = a7;
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v163 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v213 + 1) - v213) >> 3);
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v145;
        _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEFAULT, "SelectWifi2, selected, venues, %{public}ld, floors, %{public}ld", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        *(_DWORD *)v234 = 134349312;
        *(_QWORD *)&v234[4] = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v213 + 1) - v213) >> 3);
        v235 = 2050;
        v236 = *(_QWORD *)&v145;
        LODWORD(v197) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectWifi2, selected, venues, %{public}ld, floors, %{public}ld", v234, v197);
        v196 = (char *)v195;
        sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v195);
        if (v196 != buf)
          free(v196);
      }
      *a7 = v213;
      *((_QWORD *)a7 + 2) = v214;
      v164 = &v213;
    }
    *(_QWORD *)v164 = 0;
    *((_QWORD *)v164 + 1) = 0;
    *((_QWORD *)v164 + 2) = 0;
    *(_QWORD *)buf = &v213;
    sub_10025B5A8((void ***)buf);
    sub_100259B0C((uint64_t)v219);
    if (v221)
    {
      v222 = v221;
      operator delete(v221);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v162 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEFAULT, "SelectWifi2, noclusters, #Warning", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      *(_WORD *)v234 = 0;
      LODWORD(v197) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectWifi2, noclusters, #Warning", v234, v197);
      v185 = (char *)v184;
      sub_100512490("Generic", 1, 0, 2, "vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> selectRegionalPrefetchVenues(const std::vector<CLIndoorPrefetchLocationOfInterest> &, NSArray<CLLocationGroup *> *, double, size_t, double, std::chrono::seconds, const boost::optional<CLLastFix> &, std::chrono::system_clock::time_point)", "%s\n", v184);
      if (v185 != buf)
        free(v185);
    }
    *(_QWORD *)a7 = 0;
    *((_QWORD *)a7 + 1) = 0;
    *((_QWORD *)a7 + 2) = 0;
  }
}

void sub_10025861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,void *a55)
{
  STACK[0x440] = (unint64_t)&a37;
  sub_10025B5A8((void ***)&STACK[0x440]);
  sub_100259B0C((uint64_t)&a49);
  if (a54)
  {
    a55 = a54;
    operator delete(a54);
  }
  _Unwind_Resume(a1);
}

void sub_10025873C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSURL *v5;
  NSURL *v6;
  id v7;
  double *v8;
  double *v9;
  id v10;
  double v11;
  double v12;
  id v13;
  id v14;
  NSMutableArray *v15;
  NSMutableArray *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  std::string *p_buf;
  char *v25;
  char *v26;
  id v27;
  id *v28;
  unsigned __int8 v29;
  void *v30;
  void *v31;
  id *v32;
  void *v33;
  void *v34;
  unsigned __int8 v35;
  void *v36;
  void *v37;
  id v38;
  unsigned __int8 v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  unsigned __int8 v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  NSObject *v50;
  double v51;
  NSObject *v52;
  uint64_t v53;
  const char *v54;
  void **v55;
  NSObject *v56;
  std::string::size_type size;
  __int128 *v58;
  char *v59;
  __int128 *v60;
  __int128 *i;
  void *v62;
  NSObject *v63;
  const char *v64;
  void **v65;
  const char *v66;
  void **v67;
  const char *v68;
  void **v69;
  uint64_t v70;
  double v71;
  uint64_t *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  __int16 v76[8];
  void **v77;
  char *v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char v84[8];
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  __int128 v86;
  void *v87;
  std::string buf;
  void *v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  unint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  double v97;
  _BYTE v98[128];
  void *__p[4];
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  unint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  double v107;

  v73 = a2;
  if (objc_msgSend(*(id *)(a1 + 8), "avlTilePathOverrideForTest"))
    v5 = (NSURL *)objc_msgSend(*(id *)(a1 + 8), "avlTilePathOverrideForTest");
  else
    v5 = sub_100020B48();
  v6 = v5;
  v7 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3));
  v8 = (double *)*a3;
  v9 = (double *)a3[1];
  v72 = a3;
  if ((double *)*a3 != v9)
  {
    do
    {
      v10 = objc_alloc((Class)GeographicCoordinate);
      v11 = *v8;
      v12 = v8[1];
      v8 += 9;
      v13 = objc_msgSend(v10, "initWithLatitude:longitude:andAltitude:", v11, v12, 0.0);
      objc_msgSend(v7, "addObject:", v13);

    }
    while (v8 != v9);
  }
  v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "availableVenuesState"), "getNearbyLocationGroups:withUpdatedPos:nearLocationsOfInterest:", v6, 0, v7);

  if (v14)
  {
    v74 = *(double *)&a1;
    objc_msgSend(*(id *)(a1 + 8), "updatePrefetchParameters:", objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "availableVenuesState"), "availabilityTileParams"));
    v15 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v14, "count"));
    v16 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v14, "count"));
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v17 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v80, v98, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v81;
      v75 = 136315138;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v81 != v18)
            objc_enumerationMutation(v14);
          v20 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * (_QWORD)v19);
          if (+[CLLocationContextUtil isRegional:](CLLocationContextUtil, "isRegional:", objc_msgSend(v20, "locationContext")))
          {
            -[NSMutableArray addObject:](v16, "addObject:", v20);
          }
          else if (+[CLLocationContextUtil isIndoor:](CLLocationContextUtil, "isIndoor:", objc_msgSend(v20, "locationContext")))
          {
            -[NSMutableArray addObject:](v15, "addObject:", v20);
          }
          else
          {
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102129DE0);
            v21 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
            {
              if (v20)
              {
                objc_msgSend(v20, "getGroupId");
                v22 = __p;
                if (SHIBYTE(__p[2]) < 0)
                  v22 = (void **)__p[0];
              }
              else
              {
                memset(__p, 0, 24);
                v22 = __p;
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Group %s has neither indoor nor regional locations", (uint8_t *)&buf, 0xCu);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102129DE0);
              v23 = qword_1022A0048;
              if (v20)
              {
                objc_msgSend(v20, "getGroupId");
                p_buf = &buf;
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              else
              {
                memset(&buf, 0, sizeof(buf));
                p_buf = &buf;
              }
              LODWORD(v86) = 136315138;
              *(_QWORD *)((char *)&v86 + 4) = p_buf;
              _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 16, "Group %s has neither indoor nor regional locations", (const char *)&v86);
              v26 = v25;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 0, "virtual void CLIndoorLogic::onPrefetchRequested(std::chrono::system_clock::time_point, const std::vector<CLIndoorPrefetchLocationOfInterest> &)", "%s\n", v26);
              if (v26 != (char *)__p)
                free(v26);
            }
          }
          v19 = (char *)v19 + 1;
        }
        while (v17 != v19);
        v27 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v80, v98, 16);
        v17 = v27;
      }
      while (v27);
    }
    v28 = (id *)(*(_QWORD *)&v74 + 16);
    v29 = objc_msgSend(*(id *)(*(_QWORD *)&v74 + 16), "indoorTilePrefetchRadius");
    v31 = v30;
    v32 = (id *)(*(_QWORD *)&v74 + 8);
    objc_msgSend(*(id *)(*(_QWORD *)&v74 + 8), "indoorPrefetchRadiusMeters");
    if (v29)
      v34 = v31;
    else
      v34 = v33;
    v35 = objc_msgSend(*v28, "indoorTilePrefetchMaxCount");
    v37 = v36;
    v38 = objc_msgSend(*v32, "indoorPrefetchMaxFloorsPerPrefetch");
    if (!v35)
      v37 = v38;
    v39 = objc_msgSend(*v28, "indoorPrefetchClusterMergeRadius");
    v41 = v40;
    objc_msgSend(*v32, "indoorPrefetchClusterMergeRadius");
    if (v39)
      v43 = v41;
    else
      v43 = v42;
    v44 = objc_msgSend(*v28, "regionalTilePrefetchMaxCount");
    v46 = v45;
    v47 = objc_msgSend(*v32, "regionalPrefetchMaxFloorsPerPrefetch");
    if (!v44)
      v46 = (unint64_t)v47;
    v48 = objc_msgSend(*v28, "tilePrefetchRelevancyWindow");
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v49 = (uint64_t)v48 - 64800;
    v50 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p[0]) = 134219520;
      *(void **)((char *)__p + 4) = v34;
      WORD2(__p[1]) = 2048;
      *(void **)((char *)&__p[1] + 6) = v37;
      HIWORD(__p[2]) = 2048;
      __p[3] = v43;
      v100 = 2048;
      v101 = 0x4085180000000000;
      v102 = 2048;
      v103 = v46;
      v104 = 2048;
      v105 = 0x4049000000000000;
      v106 = 2048;
      v107 = (double)v49 / 86400.0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "Prefetch parameters: indoor={radius=%lf,max-floors=%zu,cluster-merge-radius=%lf},regional={radius=%lf,max-floors=%zu,cluster-merge-radius=%lf},loi-max-age=%Lf", (uint8_t *)__p, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134219520;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v37;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      v89 = v43;
      v90 = 2048;
      v91 = 0x4085180000000000;
      v92 = 2048;
      v93 = v46;
      v94 = 2048;
      v95 = 0x4049000000000000;
      v96 = 2048;
      v97 = (double)v49 / 86400.0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "Prefetch parameters: indoor={radius=%lf,max-floors=%zu,cluster-merge-radius=%lf},regional={radius=%lf,max-floors=%zu,cluster-merge-radius=%lf},loi-max-age=%Lf", COERCE_DOUBLE(&buf), 72, v71, *(double *)&v72, v73, v74, *(long double *)&v75);
      v65 = (void **)v64;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onPrefetchRequested(std::chrono::system_clock::time_point, const std::vector<CLIndoorPrefetchLocationOfInterest> &)", "%s\n", v64);
      if (v65 != __p)
        free(v65);
    }
    sub_100253950(v72, v15, (unint64_t)v37, v49, (unsigned __int8 *)objc_msgSend(*(id *)(*(_QWORD *)&v74 + 8), "latestPosition"), v73, &buf, *(double *)&v34, *(double *)&v43);
    v86 = 0uLL;
    v87 = 0;
    if (sub_1000C4240())
    {
      sub_1002564E0(v72, v16, v46, v49, (unsigned __int8 *)objc_msgSend(*(id *)(*(_QWORD *)&v74 + 8), "latestPosition"), v73, (__int128 *)__p, 675.0, 50.0);
      sub_10025CB44((uint64_t *)&v86);
      v86 = *(_OWORD *)__p;
      v87 = __p[2];
      memset(__p, 0, 24);
      v77 = __p;
      sub_10025B5A8(&v77);
      v51 = v74;
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v56 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "SelectWifi2, unsupported device", (uint8_t *)__p, 2u);
      }
      v51 = v74;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        LOWORD(v77) = 0;
        LODWORD(v70) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "SelectWifi2, unsupported device", &v77, v70);
        v67 = (void **)v66;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onPrefetchRequested(std::chrono::system_clock::time_point, const std::vector<CLIndoorPrefetchLocationOfInterest> &)", "%s\n", v66);
        if (v67 != __p)
          free(v67);
      }
    }
    v77 = 0;
    v78 = 0;
    v79 = 0;
    size = buf.__r_.__value_.__l.__size_;
    v58 = (__int128 *)buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__r.__words[0] == buf.__r_.__value_.__l.__size_)
    {
      v59 = 0;
    }
    else
    {
      v59 = 0;
      do
      {
        if ((unint64_t)v59 >= v79)
        {
          v59 = (char *)sub_10025CB7C((uint64_t *)&v77, v58);
        }
        else
        {
          sub_10025CC98(v59, v58);
          v59 += 56;
        }
        v78 = v59;
        v58 = (__int128 *)((char *)v58 + 56);
      }
      while (v58 != (__int128 *)size);
    }
    v60 = (__int128 *)*((_QWORD *)&v86 + 1);
    for (i = (__int128 *)v86; i != v60; i = (__int128 *)((char *)i + 56))
    {
      if ((unint64_t)v59 >= v79)
      {
        v59 = (char *)sub_10025CB7C((uint64_t *)&v77, i);
      }
      else
      {
        sub_10025CC98(v59, i);
        v59 += 56;
      }
      v78 = v59;
    }
    if (v77 == (void **)v59)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v63 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "IndoorPreFetch, skipall, No venues around clusters, #Warning", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v76[0] = 0;
        LODWORD(v70) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "IndoorPreFetch, skipall, No venues around clusters, #Warning", v76, v70);
        v69 = (void **)v68;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onPrefetchRequested(std::chrono::system_clock::time_point, const std::vector<CLIndoorPrefetchLocationOfInterest> &)", "%s\n", v68);
        if (v69 != __p)
          free(v69);
      }
    }
    else
    {
      v62 = *(void **)(*(_QWORD *)&v51 + 8);
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v84[0] = 1;
      objc_msgSend(v62, "setLastPrefetchTimestamp:", v84);
      if (v84[0])
        v84[0] = 0;
      (*(void (**)(_QWORD, void ***))(**(_QWORD **)(*(_QWORD *)&v51 + 24) + 176))(*(_QWORD *)(*(_QWORD *)&v51 + 24), &v77);
    }
    __p[0] = &v77;
    sub_10025B5A8((void ***)__p);
    __p[0] = &v86;
    sub_10025B5A8((void ***)__p);
    __p[0] = &buf;
    sub_10025B5A8((void ***)__p);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v52 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = (void *)-[NSString UTF8String](-[NSURL path](v6, "path"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "#warning, no location groups returned from %s during prefetch, possibly due to missing tile", (uint8_t *)__p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v53 = qword_1022A0048;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)-[NSString UTF8String](-[NSURL path](v6, "path"), "UTF8String");
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v53, 1, "#warning, no location groups returned from %s during prefetch, possibly due to missing tile", (const char *)&buf);
      v55 = (void **)v54;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onPrefetchRequested(std::chrono::system_clock::time_point, const std::vector<CLIndoorPrefetchLocationOfInterest> &)", "%s\n", v54);
      if (v55 != __p)
        free(v55);
    }
  }
}

void sub_1002593F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  a63 = (void **)&a19;
  sub_10025B5A8(&a63);
  a63 = (void **)&a33;
  sub_10025B5A8(&a63);
  a63 = (void **)&a37;
  sub_10025B5A8(&a63);
  _Unwind_Resume(a1);
}

void sub_10025947C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1002594A8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1002594D4()
{
  sub_1002594E8("basic_string");
}

void sub_1002594E8(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100259538(exception, a1);
}

void sub_100259524(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100259538(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_10025955C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t sub_100259584(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_1002594D4();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_100259608(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100259648((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100259648(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_100259694()
{
  sub_1002594E8("vector");
}

void *sub_1002596A8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_10025955C();
  return operator new(24 * a2);
}

uint64_t sub_1002596EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_100259788((uint64_t)v12);
  return a6;
}

uint64_t sub_100259788(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002597BC(a1);
  return a1;
}

void sub_1002597BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void sub_100259800(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_100259854(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string *p_p;
  uint64_t v12;
  std::string __p;

  v6 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = this;
      goto LABEL_6;
    }
    return (uint64_t)v6 + v7;
  }
  v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  size = this->__r_.__value_.__l.__size_;
LABEL_6:
  if (v9 > (std::string *)a3 || (char *)&v9->__r_.__value_.__l.__data_ + size + 1 <= a3)
    return sub_100259970(this, __n_add, v7, a3, a4);
  sub_100259A88(&__p, a3, a4);
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __p.__r_.__value_.__l.__size_;
  v12 = sub_100259970(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_100259954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100259970(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;

  v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = 22;
    v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      v13 = size - __n_copy;
      if (size == __n_copy)
        size = __n_copy;
      else
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    v15 = (char *)v12 + __n_copy;
    do
    {
      v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  return (uint64_t)v9 + __n_copy;
}

void sub_100259A88(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  std::string::value_type *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_100259ADC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_100259AF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100259B0C(uint64_t a1)
{
  void *v2;

  sub_100259B44(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100259B44(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      if (*((_BYTE *)v2 + 40))
        *((_BYTE *)v2 + 40) = 0;
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

char *sub_100259B94(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_100259C18(result, a4);
    result = sub_100259C68((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_100259BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100259608(&a9);
  _Unwind_Resume(a1);
}

char *sub_100259C18(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_100259694();
  result = (char *)sub_1002596A8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *sub_100259C68(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100115CE4(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_100259D24((uint64_t)v9);
  return v4;
}

void sub_100259D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100259D24((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100259D24(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100259D58(a1);
  return a1;
}

void sub_100259D58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void *sub_100259D9C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_10012E444(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_10025A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_10025A570(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_10025A024(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_10025A060((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_10025A060(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_10025A40C(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_10025A360(a2, a3);
  }
  else
  {
    return sub_10025A268(a2, a3);
  }
}

unint64_t sub_10025A268(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_10025A360(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_10025A40C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_10025A4CC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_10025A570(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((_BYTE *)__p + 40))
      *((_BYTE *)__p + 40) = 0;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_10025A5C8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

uint64_t sub_10025A964(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  double *v4;
  _QWORD *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;

  if ((_QWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 24);
    if ((_QWORD *)(result + 24) != a2)
    {
      v3 = 0;
      v4 = (double *)result;
      do
      {
        v5 = v2;
        v6 = v4[4];
        if (v6 < v4[1])
        {
          v7 = *v2;
          v8 = *((_QWORD *)v4 + 5);
          v9 = v3;
          while (1)
          {
            v10 = (double *)(result + v9);
            v10[3] = *(double *)(result + v9);
            v10[4] = *(double *)(result + v9 + 8);
            v10[5] = *(double *)(result + v9 + 16);
            if (!v9)
              break;
            v9 -= 24;
            if (v6 >= *(v10 - 2))
            {
              v11 = result + v9 + 24;
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *(_QWORD *)v11 = v7;
          *(double *)(v11 + 8) = v6;
          *(_QWORD *)(v11 + 16) = v8;
        }
        v2 = v5 + 3;
        v3 += 24;
        v4 = (double *)v5;
      }
      while (v5 + 3 != a2);
    }
  }
  return result;
}

_QWORD *sub_10025AA04(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  double *v3;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double *v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 3;
    if (result + 3 != a2)
    {
      v3 = (double *)(result + 5);
      do
      {
        v4 = v2;
        v5 = *((double *)result + 4);
        if (v5 < *((double *)result + 1))
        {
          v6 = *v2;
          v7 = result[5];
          v8 = v3;
          do
          {
            v9 = v8;
            *(v8 - 2) = *(v8 - 5);
            *(v8 - 1) = *(v8 - 4);
            v10 = *((_QWORD *)v8 - 3);
            v8 -= 3;
            *(_QWORD *)v9 = v10;
          }
          while (v5 < *(v9 - 7));
          *((_QWORD *)v8 - 2) = v6;
          *(v8 - 1) = v5;
          *(_QWORD *)v8 = v7;
        }
        v2 = v4 + 3;
        v3 += 3;
        result = v4;
      }
      while (v4 + 3 != a2);
    }
  }
  return result;
}

uint64_t sub_10025AA88(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  double v3;
  double v4;
  uint64_t *v5;
  double v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((double *)a2 + 1);
  v4 = *((double *)a3 + 1);
  if (v3 >= *((double *)a1 + 1))
  {
    if (v4 >= v3)
      return 0;
    v10 = *(double *)a2;
    *a2 = *a3;
    *(double *)a3 = v10;
    v8 = a2 + 2;
    v11 = a2[2];
    v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    a2[2] = a3[2];
    a3[2] = v11;
    if (*((double *)a2 + 1) < *((double *)a1 + 1))
    {
      v13 = *(double *)a1;
      *a1 = *a2;
      *(double *)a2 = v13;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v5 = a1 + 2;
LABEL_9:
      result = 2;
      goto LABEL_10;
    }
  }
  else
  {
    v5 = a1 + 2;
    v6 = *(double *)a1;
    if (v4 < v3)
    {
      *a1 = *a3;
      *(double *)a3 = v6;
      v7 = a1[1];
      a1[1] = a3[1];
      a3[1] = v7;
      v8 = a3 + 2;
      result = 1;
LABEL_10:
      v20 = *v5;
      *v5 = *v8;
      *v8 = v20;
      return result;
    }
    *a1 = *a2;
    *(double *)a2 = v6;
    v15 = *((double *)a1 + 1);
    a1[1] = a2[1];
    v5 = a2 + 2;
    v16 = a2[2];
    *((double *)a2 + 1) = v15;
    v17 = a1[2];
    a1[2] = v16;
    a2[2] = v17;
    if (*((double *)a3 + 1) < v15)
    {
      v18 = *(double *)a2;
      *a2 = *a3;
      *(double *)a3 = v18;
      v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      v8 = a3 + 2;
      goto LABEL_9;
    }
  }
  return 1;
}

unint64_t sub_10025ABD0(double *a1, double *a2)
{
  double v2;
  double *v3;
  unint64_t v4;
  double v5;
  unint64_t v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;

  v2 = a1[1];
  if (v2 >= *(a2 - 2))
  {
    v6 = (unint64_t)(a1 + 3);
    do
    {
      v4 = v6;
      if (v6 >= (unint64_t)a2)
        break;
      v7 = *(double *)(v6 + 8);
      v6 += 24;
    }
    while (v2 >= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = (unint64_t)(v3 + 3);
      v5 = v3[4];
      v3 += 3;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 3;
      v9 = *(a2 - 2);
      a2 -= 3;
    }
    while (v2 < v9);
  }
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 2);
  while (v4 < (unint64_t)v8)
  {
    v12 = *(_QWORD *)v4;
    *(double *)v4 = *v8;
    *(_QWORD *)v8 = v12;
    v13 = *(_QWORD *)(v4 + 8);
    *(double *)(v4 + 8) = v8[1];
    *((_QWORD *)v8 + 1) = v13;
    v14 = *(_QWORD *)(v4 + 16);
    *(double *)(v4 + 16) = v8[2];
    *((_QWORD *)v8 + 2) = v14;
    do
    {
      v15 = *(double *)(v4 + 32);
      v4 += 24;
    }
    while (v2 >= v15);
    do
    {
      v16 = *(v8 - 2);
      v8 -= 3;
    }
    while (v2 < v16);
  }
  if ((double *)(v4 - 24) != a1)
  {
    *a1 = *(double *)(v4 - 24);
    a1[1] = *(double *)(v4 - 16);
    a1[2] = *(double *)(v4 - 8);
  }
  *(double *)(v4 - 24) = v10;
  *(double *)(v4 - 16) = v2;
  *(_QWORD *)(v4 - 8) = v11;
  return v4;
}

unint64_t sub_10025ACDC(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  double *v8;
  double v9;
  double v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = *((_QWORD *)a1 + 2);
  do
  {
    v6 = a1[v2 + 4];
    v2 += 3;
  }
  while (v6 < v4);
  v7 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    while (v7 < (unint64_t)a2)
    {
      v8 = a2 - 3;
      v10 = *(a2 - 2);
      a2 -= 3;
      if (v10 < v4)
        goto LABEL_9;
    }
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 3;
      v9 = *(a2 - 2);
      a2 -= 3;
    }
    while (v9 >= v4);
  }
LABEL_9:
  v11 = (unint64_t)&a1[v2];
  if (v7 < (unint64_t)v8)
  {
    v12 = v8;
    do
    {
      v13 = *(_QWORD *)v11;
      *(double *)v11 = *v12;
      *(_QWORD *)v12 = v13;
      v14 = *(_QWORD *)(v11 + 8);
      *(double *)(v11 + 8) = v12[1];
      *((_QWORD *)v12 + 1) = v14;
      v15 = *(_QWORD *)(v11 + 16);
      *(double *)(v11 + 16) = v12[2];
      *((_QWORD *)v12 + 2) = v15;
      do
      {
        v16 = *(double *)(v11 + 32);
        v11 += 24;
      }
      while (v16 < v4);
      do
      {
        v17 = *(v12 - 2);
        v12 -= 3;
      }
      while (v17 >= v4);
    }
    while (v11 < (unint64_t)v12);
  }
  if ((double *)(v11 - 24) != a1)
  {
    *a1 = *(double *)(v11 - 24);
    a1[1] = *(double *)(v11 - 16);
    a1[2] = *(double *)(v11 - 8);
  }
  *(double *)(v11 - 24) = v3;
  *(double *)(v11 - 16) = v4;
  *(_QWORD *)(v11 - 8) = v5;
  return v11 - 24;
}

BOOL sub_10025ADEC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v6;
        v7 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v7;
        v8 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      sub_10025AA88((_QWORD *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_10025AFB4(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      sub_10025B0AC(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (double *)(a1 + 72), (double *)(a2 - 24));
      return 1;
    default:
      v9 = a1 + 48;
      sub_10025AA88((_QWORD *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = *(_QWORD *)(v10 + 16);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_QWORD *)(v17 + 72) = *(_QWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 80) = *(_QWORD *)(a1 + v16 + 56);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v13 >= *(double *)(v17 + 32))
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_QWORD *)(v18 + 16) = v15;
      if (++v12 == 8)
        return v10 + 24 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

double sub_10025AFB4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_10025AA88((_QWORD *)a1, a2, a3);
  result = *(double *)(a4 + 8);
  if (result < *((double *)a3 + 1))
  {
    v9 = *a3;
    *a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    v10 = a3[1];
    a3[1] = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    v11 = a3[2];
    a3[2] = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v11;
    result = *((double *)a3 + 1);
    if (result < *((double *)a2 + 1))
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      result = *((double *)a2 + 1);
      if (result < *(double *)(a1 + 8))
      {
        v15 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *a2;
        *a2 = v15;
        result = *(double *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = a2[1];
        *((double *)a2 + 1) = result;
        v16 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = a2[2];
        a2[2] = v16;
      }
    }
  }
  return result;
}

double sub_10025B0AC(uint64_t a1, uint64_t *a2, uint64_t *a3, double *a4, double *a5)
{
  double result;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_10025AFB4(a1, a2, a3, (uint64_t)a4);
  result = a5[1];
  if (result < a4[1])
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = *((_QWORD *)a4 + 1);
    a4[1] = a5[1];
    *((_QWORD *)a5 + 1) = v12;
    v13 = *((_QWORD *)a4 + 2);
    a4[2] = a5[2];
    *((_QWORD *)a5 + 2) = v13;
    result = a4[1];
    if (result < *((double *)a3 + 1))
    {
      v14 = *a3;
      *a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      v15 = a3[1];
      a3[1] = *((_QWORD *)a4 + 1);
      *((_QWORD *)a4 + 1) = v15;
      v16 = a3[2];
      a3[2] = *((_QWORD *)a4 + 2);
      *((_QWORD *)a4 + 2) = v16;
      result = *((double *)a3 + 1);
      if (result < *((double *)a2 + 1))
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        result = *((double *)a2 + 1);
        if (result < *(double *)(a1 + 8))
        {
          v20 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *a2;
          *a2 = v20;
          result = *(double *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = a2[1];
          *((double *)a2 + 1) = result;
          v21 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = a2[2];
          a2[2] = v21;
        }
      }
    }
  }
  return result;
}

double *sub_10025B1F0(uint64_t a1, double *a2, double *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  double *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;

  if ((double *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (double *)(a1 + 24 * v10);
      do
      {
        sub_10025B3B8(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (v14[1] < *(double *)(a1 + 8))
        {
          v15 = *v14;
          *v14 = *(double *)a1;
          *(double *)a1 = v15;
          v16 = *((_QWORD *)v14 + 1);
          v14[1] = *(double *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v16;
          v17 = *((_QWORD *)v14 + 2);
          v14[2] = *(double *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          sub_10025B3B8(a1, a4, v9, (double *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = a2 - 3;
      do
      {
        v20 = *(double *)a1;
        v21 = *(_QWORD *)(a1 + 8);
        v22 = *(_QWORD *)(a1 + 16);
        sub_10025B4B0(a1, a4, v18);
        if (v19 == v23)
        {
          *v23 = v20;
          *((_QWORD *)v23 + 1) = v21;
          *((_QWORD *)v23 + 2) = v22;
        }
        else
        {
          *v23 = *v19;
          v23[1] = v19[1];
          v23[2] = v19[2];
          *v19 = v20;
          *((_QWORD *)v19 + 1) = v21;
          *((_QWORD *)v19 + 2) = v22;
          sub_10025B52C(a1, (uint64_t)(v23 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - a1 + 24) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_10025B3B8(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  int64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      v6 = (double *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3 && v6[1] < v6[4])
      {
        v6 += 3;
        v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
      }
      v7 = a4[1];
      if (v6[1] >= v7)
      {
        v8 = *a4;
        v9 = *((_QWORD *)a4 + 2);
        do
        {
          v10 = a4;
          a4 = v6;
          *v10 = *v6;
          v10[1] = v6[1];
          v10[2] = v6[2];
          if (v4 < v5)
            break;
          v11 = 2 * v5;
          v5 = (2 * v5) | 1;
          v6 = (double *)(result + 24 * v5);
          v12 = v11 + 2;
          if (v12 < a3 && v6[1] < v6[4])
          {
            v6 += 3;
            v5 = v12;
          }
        }
        while (v6[1] >= v7);
        *a4 = v8;
        a4[1] = v7;
        *((_QWORD *)a4 + 2) = v9;
      }
    }
  }
  return result;
}

double sub_10025B4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    a1 += 24 * v3 + 24;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3 && *(double *)(a1 + 8) < *(double *)(a1 + 32))
    {
      a1 += 24;
      v3 = v8;
    }
    *(_QWORD *)v6 = *(_QWORD *)a1;
    result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a1 + 16);
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_10025B52C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  double *v5;
  double v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (double *)(result + 24 * v4);
    v6 = *(double *)(a2 - 16);
    if (v5[1] < v6)
    {
      v9 = *(_QWORD *)(a2 - 24);
      v7 = (double *)(a2 - 24);
      v8 = v9;
      v10 = *((_QWORD *)v7 + 2);
      do
      {
        v11 = v7;
        v7 = v5;
        *v11 = *v5;
        v11[1] = v5[1];
        v11[2] = v5[2];
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (double *)(result + 24 * v4);
      }
      while (v5[1] < v6);
      *(_QWORD *)v7 = v8;
      v7[1] = v6;
      *((_QWORD *)v7 + 2) = v10;
    }
  }
  return result;
}

void sub_10025B5A8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10025B5E8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_10025B5E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  a1[1] = v2;
}

uint64_t sub_10025B634(uint64_t *a1, char **a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t *v26;

  v7 = *a1;
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x492492492492492)
    sub_100259694();
  v15 = (uint64_t)(a1 + 2);
  v16 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v7) >> 3);
  if (2 * v16 > v9)
    v9 = 2 * v16;
  if (v16 >= 0x249249249249249)
    v17 = 0x492492492492492;
  else
    v17 = v9;
  v26 = a1 + 2;
  if (v17)
    v18 = (char *)sub_10025B800(v15, v17);
  else
    v18 = 0;
  v22 = v18;
  v23 = &v18[56 * v8];
  v24 = v23;
  v25 = &v18[56 * v17];
  v19 = sub_1015A2E04(v23, *a2);
  v19[3] = a3;
  v19[4] = *a4;
  v19[5] = *a5;
  *((_DWORD *)v19 + 12) = *a6;
  v24 += 56;
  sub_10025B78C(a1, &v22);
  v20 = a1[1];
  sub_10025B978((uint64_t)&v22);
  return v20;
}

void sub_10025B778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025B978((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025B78C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10025B848((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10025B800(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    sub_10025955C();
  return operator new(56 * a2);
}

uint64_t sub_10025B848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_10025B900((uint64_t)v11);
  return v9;
}

uint64_t sub_10025B900(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025B934(a1);
  return a1;
}

void sub_10025B934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 56;
  }
}

uint64_t sub_10025B978(uint64_t a1)
{
  sub_10025B9AC(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10025B9AC(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 7;
      *(_QWORD *)(a1 + 16) = v2 - 7;
      if (*((char *)v2 - 33) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_10025BA00(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_10025955C();
  return operator new(32 * a2);
}

void sub_10025BA34(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

uint64_t sub_10025BDD0(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  double *v4;
  _QWORD *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 32);
    if ((_QWORD *)(result + 32) != a2)
    {
      v3 = 0;
      v4 = (double *)result;
      do
      {
        v5 = v2;
        v6 = v4[5];
        if (v6 < v4[1])
        {
          v7 = *v2;
          v8 = *((_QWORD *)v4 + 6);
          v9 = v3;
          v10 = *((_DWORD *)v4 + 14);
          while (1)
          {
            v11 = result + v9;
            *(_QWORD *)(v11 + 32) = *(_QWORD *)(result + v9);
            *(_QWORD *)(v11 + 40) = *(_QWORD *)(result + v9 + 8);
            *(_QWORD *)(v11 + 48) = *(_QWORD *)(result + v9 + 16);
            *(_DWORD *)(v11 + 56) = *(_DWORD *)(result + v9 + 24);
            if (!v9)
              break;
            v9 -= 32;
            if (v6 >= *(double *)(v11 - 24))
            {
              v12 = result + v9 + 32;
              goto LABEL_10;
            }
          }
          v12 = result;
LABEL_10:
          *(_QWORD *)v12 = v7;
          *(double *)(v12 + 8) = v6;
          *(_QWORD *)(v12 + 16) = v8;
          *(_DWORD *)(v12 + 24) = v10;
        }
        v2 = v5 + 4;
        v3 += 32;
        v4 = (double *)v5;
      }
      while (v5 + 4 != a2);
    }
  }
  return result;
}

_QWORD *sub_10025BE80(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  double *v3;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  int v9;
  double *v10;
  int v11;

  if (result != a2)
  {
    v2 = result + 4;
    if (result + 4 != a2)
    {
      v3 = (double *)(result + 7);
      do
      {
        v4 = v2;
        v5 = *((double *)result + 5);
        if (v5 < *((double *)result + 1))
        {
          v6 = *v2;
          v7 = result[6];
          v8 = v3;
          v9 = *((_DWORD *)result + 14);
          do
          {
            v10 = v8;
            *(v8 - 3) = *(v8 - 7);
            *(v8 - 2) = *(v8 - 6);
            *(v8 - 1) = *(v8 - 5);
            v11 = *((_DWORD *)v8 - 8);
            v8 -= 4;
            *(_DWORD *)v10 = v11;
          }
          while (v5 < *(v10 - 10));
          *((_QWORD *)v8 - 3) = v6;
          *(v8 - 2) = v5;
          *((_QWORD *)v8 - 1) = v7;
          *(_DWORD *)v8 = v9;
        }
        v2 = v4 + 4;
        v3 += 4;
        result = v4;
      }
      while (v4 + 4 != a2);
    }
  }
  return result;
}

uint64_t sub_10025BF14(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  double v3;
  double v4;
  int *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t result;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v3 = *((double *)a2 + 1);
  v4 = *((double *)a3 + 1);
  if (v3 >= *((double *)a1 + 1))
  {
    if (v4 >= v3)
      return 0;
    v11 = *(double *)a2;
    *a2 = *a3;
    *(double *)a3 = v11;
    v9 = (int *)(a2 + 3);
    LODWORD(v11) = *((_DWORD *)a2 + 6);
    v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    v13 = a2[2];
    a2[2] = a3[2];
    a3[2] = v13;
    *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = LODWORD(v11);
    if (*((double *)a2 + 1) < *((double *)a1 + 1))
    {
      v14 = *(double *)a1;
      *a1 = *a2;
      *(double *)a2 = v14;
      v15 = a1[1];
      a1[1] = a2[1];
      a2[1] = v15;
      v16 = a1[2];
      a1[2] = a2[2];
      a2[2] = v16;
      v5 = (int *)(a1 + 3);
LABEL_9:
      result = 2;
      goto LABEL_10;
    }
  }
  else
  {
    v5 = (int *)(a1 + 3);
    v6 = *(double *)a1;
    if (v4 < v3)
    {
      *a1 = *a3;
      *(double *)a3 = v6;
      v7 = a1[1];
      a1[1] = a3[1];
      a3[1] = v7;
      v8 = a1[2];
      a1[2] = a3[2];
      a3[2] = v8;
      v9 = (int *)(a3 + 3);
      result = 1;
LABEL_10:
      v23 = *v5;
      *v5 = *v9;
      *v9 = v23;
      return result;
    }
    *a1 = *a2;
    *(double *)a2 = v6;
    v17 = *((double *)a1 + 1);
    a1[1] = a2[1];
    *((double *)a2 + 1) = v17;
    v18 = a1[2];
    a1[2] = a2[2];
    v5 = (int *)(a2 + 3);
    v19 = *((_DWORD *)a2 + 6);
    a2[2] = v18;
    LODWORD(v18) = *((_DWORD *)a1 + 6);
    *((_DWORD *)a1 + 6) = v19;
    *((_DWORD *)a2 + 6) = v18;
    if (*((double *)a3 + 1) < v17)
    {
      v20 = *(double *)a2;
      *a2 = *a3;
      *(double *)a3 = v20;
      v21 = a2[1];
      a2[1] = a3[1];
      a3[1] = v21;
      v22 = a2[2];
      a2[2] = a3[2];
      a3[2] = v22;
      v9 = (int *)(a3 + 3);
      goto LABEL_9;
    }
  }
  return 1;
}

double *sub_10025C0AC(uint64_t *a1, unint64_t a2)
{
  double v2;
  double *v3;
  double *v4;
  double v5;
  double *v6;
  double v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;

  v2 = *((double *)a1 + 1);
  if (v2 >= *(double *)(a2 - 24))
  {
    v6 = (double *)(a1 + 4);
    do
    {
      v4 = v6;
      if ((unint64_t)v6 >= a2)
        break;
      v7 = v6[1];
      v6 += 4;
    }
    while (v2 >= v7);
  }
  else
  {
    v3 = (double *)a1;
    do
    {
      v4 = v3 + 4;
      v5 = v3[5];
      v3 += 4;
    }
    while (v2 >= v5);
  }
  if ((unint64_t)v4 >= a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 32;
      v9 = *(double *)(a2 - 24);
      a2 -= 32;
    }
    while (v2 < v9);
  }
  v10 = *(double *)a1;
  v11 = a1[2];
  v12 = *((_DWORD *)a1 + 6);
  while ((unint64_t)v4 < v8)
  {
    v13 = *(_QWORD *)v4;
    *v4 = *(double *)v8;
    *(_QWORD *)v8 = v13;
    v14 = *((_QWORD *)v4 + 1);
    v4[1] = *(double *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v14;
    v15 = *((_QWORD *)v4 + 2);
    v4[2] = *(double *)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v15;
    LODWORD(v15) = *((_DWORD *)v4 + 6);
    *((_DWORD *)v4 + 6) = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v15;
    do
    {
      v16 = v4[5];
      v4 += 4;
    }
    while (v2 >= v16);
    do
    {
      v17 = *(double *)(v8 - 24);
      v8 -= 32;
    }
    while (v2 < v17);
  }
  if (v4 - 4 != (double *)a1)
  {
    *a1 = *((_QWORD *)v4 - 4);
    a1[1] = *((_QWORD *)v4 - 3);
    a1[2] = *((_QWORD *)v4 - 2);
    *((_DWORD *)a1 + 6) = *((_DWORD *)v4 - 2);
  }
  *(v4 - 4) = v10;
  *(v4 - 3) = v2;
  *((_QWORD *)v4 - 2) = v11;
  *((_DWORD *)v4 - 2) = v12;
  return v4;
}

uint64_t *sub_10025C1D8(double *a1, unint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  int v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_DWORD *)a1 + 6);
  do
  {
    v7 = a1[v2 + 5];
    v2 += 4;
  }
  while (v7 < v4);
  v8 = (unint64_t)&a1[v2];
  if (v2 == 4)
  {
    while (v8 < a2)
    {
      v9 = a2 - 32;
      v11 = *(double *)(a2 - 24);
      a2 -= 32;
      if (v11 < v4)
        goto LABEL_9;
    }
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 32;
      v10 = *(double *)(a2 - 24);
      a2 -= 32;
    }
    while (v10 >= v4);
  }
LABEL_9:
  v12 = (uint64_t *)&a1[v2];
  if (v8 < v9)
  {
    v13 = v9;
    do
    {
      v14 = *v12;
      *v12 = *(_QWORD *)v13;
      *(_QWORD *)v13 = v14;
      v15 = v12[1];
      v12[1] = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v15;
      v16 = v12[2];
      v12[2] = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 16) = v16;
      LODWORD(v16) = *((_DWORD *)v12 + 6);
      *((_DWORD *)v12 + 6) = *(_DWORD *)(v13 + 24);
      *(_DWORD *)(v13 + 24) = v16;
      do
      {
        v17 = *((double *)v12 + 5);
        v12 += 4;
      }
      while (v17 < v4);
      do
      {
        v18 = *(double *)(v13 - 24);
        v13 -= 32;
      }
      while (v18 >= v4);
    }
    while ((unint64_t)v12 < v13);
  }
  if (v12 - 4 != (uint64_t *)a1)
  {
    *(_QWORD *)a1 = *(v12 - 4);
    *((_QWORD *)a1 + 1) = *(v12 - 3);
    *((_QWORD *)a1 + 2) = *(v12 - 2);
    *((_DWORD *)a1 + 6) = *((_DWORD *)v12 - 2);
  }
  *((double *)v12 - 4) = v3;
  *((double *)v12 - 3) = v4;
  *(v12 - 2) = v5;
  *((_DWORD *)v12 - 2) = v6;
  return v12 - 4;
}

BOOL sub_10025C308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 24) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 32);
        *(_QWORD *)(a2 - 32) = v6;
        v7 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v7;
        v8 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      sub_10025BF14((uint64_t *)a1, (uint64_t *)(a1 + 32), (uint64_t *)(a2 - 32));
      return 1;
    case 4:
      sub_10025C4E4(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_10025C60C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v9 = a1 + 64;
      sub_10025BF14((uint64_t *)a1, (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 64));
      v10 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = *(_QWORD *)(v10 + 16);
      v16 = v11;
      v17 = *(_DWORD *)(v10 + 24);
      while (1)
      {
        v18 = a1 + v16;
        *(_QWORD *)(v18 + 96) = *(_QWORD *)(a1 + v16 + 64);
        *(_QWORD *)(v18 + 104) = *(_QWORD *)(a1 + v16 + 72);
        *(_QWORD *)(v18 + 112) = *(_QWORD *)(a1 + v16 + 80);
        *(_DWORD *)(v18 + 120) = *(_DWORD *)(a1 + v16 + 88);
        if (v16 == -64)
          break;
        v16 -= 32;
        if (v13 >= *(double *)(v18 + 40))
        {
          v19 = a1 + v16 + 96;
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *(_QWORD *)v19 = v14;
      *(double *)(v19 + 8) = v13;
      *(_QWORD *)(v19 + 16) = v15;
      *(_DWORD *)(v19 + 24) = v17;
      if (++v12 == 8)
        return v10 + 32 == a2;
    }
    v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2)
      return 1;
  }
}

double sub_10025C4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_10025BF14((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  result = *(double *)(a4 + 8);
  if (result < *(double *)(a3 + 8))
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v11;
    result = *(double *)(a3 + 8);
    if (result < *(double *)(a2 + 8))
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      v13 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v13;
      v14 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v14;
      LODWORD(v14) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v14;
      result = *(double *)(a2 + 8);
      if (result < *(double *)(a1 + 8))
      {
        v15 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v15;
        result = *(double *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(double *)(a2 + 8) = result;
        v16 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v16;
        LODWORD(v16) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v16;
      }
    }
  }
  return result;
}

double sub_10025C60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_10025C4E4(a1, a2, a3, a4);
  result = *(double *)(a5 + 8);
  if (result < *(double *)(a4 + 8))
  {
    v11 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v11;
    v12 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v12;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v13;
    LODWORD(v13) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a5 + 24) = v13;
    result = *(double *)(a4 + 8);
    if (result < *(double *)(a3 + 8))
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      v15 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v15;
      v16 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v16;
      LODWORD(v16) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 24) = v16;
      result = *(double *)(a3 + 8);
      if (result < *(double *)(a2 + 8))
      {
        v17 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v17;
        v18 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v18;
        v19 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v19;
        LODWORD(v19) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 24) = v19;
        result = *(double *)(a2 + 8);
        if (result < *(double *)(a1 + 8))
        {
          v20 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v20;
          result = *(double *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(double *)(a2 + 8) = result;
          v21 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v21;
          LODWORD(v21) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a2 + 24) = v21;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_10025C790(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (double *)(a1 + 32 * v10);
      do
      {
        sub_10025C954(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*((double *)v14 + 1) < *(double *)(a1 + 8))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          v16 = v14[1];
          v14[1] = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v16;
          v17 = v14[2];
          v14[2] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          LODWORD(v17) = *((_DWORD *)v14 + 6);
          *((_DWORD *)v14 + 6) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = v17;
          sub_10025C954(a1, a4, v9, (double *)a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v18 = (unint64_t)v8 >> 5;
      v19 = a2 - 4;
      do
      {
        v20 = *(double *)a1;
        v21 = *(_QWORD *)(a1 + 8);
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(_DWORD *)(a1 + 24);
        sub_10025CA40(a1, a4, v18);
        if (v19 == (uint64_t *)v24)
        {
          *(double *)v24 = v20;
          *(_QWORD *)(v24 + 8) = v21;
          *(_QWORD *)(v24 + 16) = v22;
          *(_DWORD *)(v24 + 24) = v23;
        }
        else
        {
          *(_QWORD *)v24 = *v19;
          *(_QWORD *)(v24 + 8) = v19[1];
          *(_QWORD *)(v24 + 16) = v19[2];
          *(_DWORD *)(v24 + 24) = *((_DWORD *)v19 + 6);
          *(double *)v19 = v20;
          v19[1] = v21;
          v19[2] = v22;
          *((_DWORD *)v19 + 6) = v23;
          sub_10025CAC0(a1, v24 + 32, a4, (v24 + 32 - a1) >> 5);
        }
        v19 -= 4;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_10025C954(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      v6 = v4 >> 4;
      v7 = (v4 >> 4) + 1;
      v8 = (double *)(result + 32 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && v8[1] < v8[5])
      {
        v8 += 4;
        v7 = v9;
      }
      v10 = a4[1];
      if (v8[1] >= v10)
      {
        v11 = *a4;
        v12 = *((_QWORD *)a4 + 2);
        v13 = *((_DWORD *)a4 + 6);
        do
        {
          v14 = a4;
          a4 = v8;
          *v14 = *v8;
          v14[1] = v8[1];
          v14[2] = v8[2];
          *((_DWORD *)v14 + 6) = *((_DWORD *)v8 + 6);
          if (v5 < v7)
            break;
          v15 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (double *)(result + 32 * v7);
          v16 = v15 + 2;
          if (v16 < a3 && v8[1] < v8[5])
          {
            v8 += 4;
            v7 = v16;
          }
        }
        while (v8[1] >= v10);
        *a4 = v11;
        a4[1] = v10;
        *((_QWORD *)a4 + 2) = v12;
        *((_DWORD *)a4 + 6) = v13;
      }
    }
  }
  return result;
}

double sub_10025CA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    a1 += 32 * v3 + 32;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3 && *(double *)(a1 + 8) < *(double *)(a1 + 40))
    {
      a1 += 32;
      v3 = v8;
    }
    *(_QWORD *)v6 = *(_QWORD *)a1;
    result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v6 + 24) = *(_DWORD *)(a1 + 24);
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_10025CAC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = result + 32 * v4;
    v6 = *(double *)(a2 - 24);
    if (*(double *)(v5 + 8) < v6)
    {
      v9 = *(_QWORD *)(a2 - 32);
      v7 = a2 - 32;
      v8 = v9;
      v10 = *(_QWORD *)(v7 + 16);
      v11 = *(_DWORD *)(v7 + 24);
      do
      {
        v12 = v7;
        v7 = v5;
        *(_QWORD *)v12 = *(_QWORD *)v5;
        *(_QWORD *)(v12 + 8) = *(_QWORD *)(v5 + 8);
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(v5 + 16);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(v5 + 24);
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = result + 32 * v4;
      }
      while (*(double *)(v5 + 8) < v6);
      *(_QWORD *)v7 = v8;
      *(double *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 16) = v10;
      *(_DWORD *)(v7 + 24) = v11;
    }
  }
  return result;
}

void sub_10025CB44(uint64_t *a1)
{
  if (*a1)
  {
    sub_10025B5E8(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_10025CB7C(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10025B800(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  sub_10025CC98(v14, a2);
  v15 = v14 + 56;
  sub_10025B78C(a1, &v13);
  v11 = a1[1];
  sub_10025B978((uint64_t)&v13);
  return v11;
}

void sub_10025CC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025B978((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10025CC98(char *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *(_OWORD *)(__dst + 24) = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
  *((_DWORD *)__dst + 12) = *((_DWORD *)a2 + 12);
  return __dst;
}

void sub_10025CD28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  NSObject *v7;

  _os_signpost_emit_with_name_impl(a1, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x26u);
}

BOOL sub_10025CD70()
{
  return os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT);
}

void sub_10025CD84(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  NSObject *v5;

  _os_log_impl(a1, v5, OS_LOG_TYPE_FAULT, a4, a5, 0x26u);
}

void sub_10025CD94(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  NSObject *v5;

  _os_log_impl(a1, v5, OS_LOG_TYPE_INFO, a4, a5, 0x26u);
}

BOOL sub_10025CDA4()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 72), OS_LOG_TYPE_INFO);
}

void sub_10025CDB4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1222, a4);
}

BOOL sub_10025CDBC()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 72));
}

void sub_10025CDE0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1221, a4);
}

void sub_10025CDE8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1212, a4);
}

void sub_10025CDF0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10025CE8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10025CEA4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10025CF30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_10025CF48(CLMotionActivity *a1)
{
  if ((CLMotionActivity::isRunning(a1) & 1) != 0)
    return 0;
  if ((CLMotionActivity::isCycling(a1) & 1) != 0)
    return 1;
  if (a1->type == 3)
    return 2;
  return 3;
}

uint64_t sub_10025CF98(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  *(_DWORD *)a1 = 4;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102129F00);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134349824;
    v25 = v5;
    v26 = 2050;
    v27 = v6;
    v28 = 2050;
    v29 = v7;
    v30 = 2050;
    v31 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#indoor-fitness-classifier, debounce params initialized (secs), cyclingToNonFitness, %{public}lld, runningToNonFitness, %{public}lld, nonFitnessToCycling, %{public}lld, notFitnessToRunning, %{public}lld", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102129F00);
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v16 = 134349824;
    v17 = v10;
    v18 = 2050;
    v19 = v11;
    v20 = 2050;
    v21 = v12;
    v22 = 2050;
    v23 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#indoor-fitness-classifier, debounce params initialized (secs), cyclingToNonFitness, %{public}lld, runningToNonFitness, %{public}lld, nonFitnessToCycling, %{public}lld, notFitnessToRunning, %{public}lld", &v16, 42);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "CLIndoorFitnessModeStateMachine::CLIndoorFitnessModeStateMachine(const CLIndoorFitnessModeStateMachine::DebounceParameters &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  return a1;
}

void sub_10025D1A8(uint64_t a1, CLMotionActivity *a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  const char *v24;

  v6 = sub_10025CF48(a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102129F00);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v8 = CLMotionActivity::activityTypeToString(a2->type);
    v9 = v6 - 1;
    if (v9 > 2)
      v10 = "running";
    else
      v10 = (&off_102129F20)[v9];
    *(_DWORD *)buf = 136380931;
    v22 = v8;
    v23 = 2081;
    v24 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#indoor-fitness-classifier, motion activity, %{private}s, internal activity, %{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102129F00);
    v11 = qword_1022A0028;
    v12 = CLMotionActivity::activityTypeToString(a2->type);
    v13 = v6 - 1;
    if (v13 > 2)
      v14 = "running";
    else
      v14 = (&off_102129F20)[v13];
    v17 = 136380931;
    v18 = v12;
    v19 = 2081;
    v20 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "#indoor-fitness-classifier, motion activity, %{private}s, internal activity, %{private}s", &v17, 22);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorFitnessModeStateMachine::updateWithMotionActivity(const CLMotionActivity &, std::chrono::steady_clock::time_point)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_10025D3FC(a1, v6, a3);
}

void sub_10025D3FC(uint64_t a1, int a2, uint64_t a3)
{
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  NSObject *v11;
  const char *v12;
  unsigned int v13;
  const char *v14;
  const char *v15;
  const char *v16;
  unsigned int v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;

  switch(*(_DWORD *)a1)
  {
    case 0:
      v6 = 1;
      if (a2 == 3)
        v7 = 2;
      else
        v7 = a2 == 1;
      goto LABEL_48;
    case 1:
      v6 = 1;
      if (a2 == 3)
        v7 = 3;
      else
        v7 = a2 != 0;
      goto LABEL_48;
    case 2:
      switch(a2)
      {
        case 0:
        case 2:
          v7 = 0;
          goto LABEL_47;
        case 1:
          v6 = 1;
          v7 = 1;
          break;
        case 3:
          if (1000000000 * *(_QWORD *)(a1 + 24) >= a3 - *(_QWORD *)(a1 + 8))
            v7 = 2;
          else
            v7 = 4;
          goto LABEL_47;
        default:
          v7 = 2;
          goto LABEL_47;
      }
      goto LABEL_48;
    case 3:
      if (a2 != 3)
      {
        v6 = 1;
        if (a2)
          v7 = 3;
        else
          v7 = 0;
        goto LABEL_48;
      }
      if (1000000000 * *(_QWORD *)(a1 + 16) >= a3 - *(_QWORD *)(a1 + 8))
        v7 = 3;
      else
        v7 = 4;
      goto LABEL_47;
    case 4:
      v8 = 5;
      if (a2)
        v9 = 4;
      else
        v9 = 6;
      v10 = a2 == 1;
      goto LABEL_21;
    case 5:
      v9 = 5;
      if ((a2 - 1) < 2)
      {
        if (1000000000 * *(_QWORD *)(a1 + 32) < a3 - *(_QWORD *)(a1 + 8))
          v7 = 1;
        else
          v7 = 5;
LABEL_47:
        v6 = 1;
      }
      else if (a2)
      {
        v10 = a2 == 3;
        v8 = 4;
LABEL_21:
        v6 = 1;
        if (v10)
          v7 = v8;
        else
          v7 = v9;
      }
      else
      {
        v6 = 1000000000 * *(_QWORD *)(a1 + 40) < a3 - *(_QWORD *)(a1 + 8);
        if (1000000000 * *(_QWORD *)(a1 + 40) >= a3 - *(_QWORD *)(a1 + 8))
          v7 = 6;
        else
          v7 = 0;
      }
LABEL_48:
      if (v7 != *(_DWORD *)a1)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102129F00);
        v11 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          if ((a2 - 1) > 2)
            v12 = "running";
          else
            v12 = (&off_102129F20)[a2 - 1];
          v13 = *(_DWORD *)a1 - 1;
          if (v13 > 5)
            v14 = "running";
          else
            v14 = (&off_102129F38)[v13];
          if ((v7 - 1) > 5)
            v15 = "running";
          else
            v15 = (&off_102129F38)[v7 - 1];
          *(_DWORD *)buf = 136381187;
          v29 = v12;
          v30 = 2081;
          v31 = v14;
          v32 = 2081;
          v33 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#indoor-fitness-classifier state change, activity, %{private}s, current, %{private}s, updated, %{private}s", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102129F00);
          if ((a2 - 1) > 2)
            v16 = "running";
          else
            v16 = (&off_102129F20)[a2 - 1];
          v17 = *(_DWORD *)a1 - 1;
          if (v17 > 5)
            v18 = "running";
          else
            v18 = (&off_102129F38)[v17];
          if ((v7 - 1) > 5)
            v19 = "running";
          else
            v19 = (&off_102129F38)[v7 - 1];
          v22 = 136381187;
          v23 = v16;
          v24 = 2081;
          v25 = v18;
          v26 = 2081;
          v27 = v19;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#indoor-fitness-classifier state change, activity, %{private}s, current, %{private}s, updated, %{private}s", &v22, 32);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLIndoorFitnessModeStateMachine::updateWithMotionActivity(CLIndoorFitnessModeStateMachine::Activity, std::chrono::steady_clock::time_point)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        *(_DWORD *)a1 = v7;
        if (v6)
          *(_QWORD *)(a1 + 8) = a3;
      }
      return;
    case 6:
      switch(a2)
      {
        case 0:
        case 2:
          if (1000000000 * *(_QWORD *)(a1 + 40) >= a3 - *(_QWORD *)(a1 + 8))
            v7 = 6;
          else
            v7 = 0;
          goto LABEL_47;
        case 1:
          v6 = 1000000000 * *(_QWORD *)(a1 + 32) < a3 - *(_QWORD *)(a1 + 8);
          if (1000000000 * *(_QWORD *)(a1 + 32) < a3 - *(_QWORD *)(a1 + 8))
            v7 = 1;
          else
            v7 = 5;
          break;
        case 3:
          v7 = 4;
          goto LABEL_47;
        default:
          v7 = 6;
          goto LABEL_47;
      }
      goto LABEL_48;
    default:
      return;
  }
}

void sub_10025D97C(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10025DA70()
{
  operator delete();
}

uint64_t sub_10025DB98(uint64_t result, uint64_t a2)
{
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(result + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(result + 32) = 1;
  }
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(result + 48) = 1;
  }
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(result + 68) = *(_BYTE *)(a2 + 68);
  return result;
}

uint64_t sub_10025DBF4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    if (*(_BYTE *)(result + 48))
      *(_BYTE *)(result + 48) = 0;
    if (*(_BYTE *)(result + 32))
      *(_BYTE *)(result + 32) = 0;
    operator delete();
  }
  return result;
}

uint64_t sub_10025DC34(uint64_t a1)
{
  return (uint64_t)(*(double *)(a1 + 76) * 1000000.0 + 9.783072e14);
}

uint64_t *sub_10025DC58(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  v5 = *a2;
  *a2 = 0;
  v6 = *a1;
  *a1 = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *a3;
  *a3 = 0;
  v8 = a1[1];
  a1[1] = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

unint64_t sub_10025DCC4(_QWORD *a1, double ***a2, _DWORD *a3, __n128 **a4)
{
  double **v6;
  uint64_t v7;
  double *v9;
  unint64_t v10;
  int v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  __n128 *v22;
  char **v23;
  double **v24;
  double **v25;
  double v26;
  double *v27;
  double *v28;
  unint64_t v29;
  double *v30;
  double v31;
  double *v32;
  double *v33;
  char *v34;
  unint64_t v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  void **v42;
  uint64_t v43;
  double *v44;
  double *v45;
  unint64_t v46;
  double v47;
  void **v48;
  double *i;
  double v50;
  double v51;
  uint64_t v52;
  __n128 *v53;
  __n128 *v54;
  double v55;
  __n128 *v56;
  __n128 *v57;
  __n128 *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  __n128 *v62;
  unint64_t v63;
  _DWORD *v65;
  unsigned int v67;
  int v68;
  void *__p;
  _BYTE *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void **v77;
  void **v78;
  unint64_t v79;
  __n128 *v80;
  __n128 *v81;
  uint64_t v82;

  v6 = *a2;
  v7 = (uint64_t)a2[1];
  if ((double **)v7 == v6)
    return 0;
  v9 = v6[1];
  v10 = (char *)v9 - (char *)*v6;
  if (v9 != *v6)
  {
    v65 = a3;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    if (&v80 != (__n128 **)a2)
      sub_10025E284((uint64_t)&v80, (uint64_t)v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v6) >> 3));
    v12 = 0;
    v13 = 0;
    v14 = v10 >> 3;
    v15 = (v10 >> 3);
    v16 = (double)(v10 >> 3);
    while (!v13)
    {
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v17 = ((char *)v81 - (char *)v80) >> 3;
      v18 = -1431655765 * v17;
      v19 = 0.0;
      if (-1431655765 * (_DWORD)v17)
      {
        v68 = v12;
        v20 = 0;
        v67 = -1431655765 * v17;
        v21 = (-1431655765 * v17);
        do
        {
          v22 = v80;
          v71 = 0;
          sub_10025E5E0(&v74, v15, &v71);
          __p = 0;
          sub_10025E5E0(&v71, v15, &__p);
          v23 = (char **)v22 + 3 * v20;
          v25 = *a2;
          v24 = a2[1];
          while (v25 != v24)
          {
            (*(void (**)(_QWORD, uint64_t, double **))(*(_QWORD *)a1[1] + 16))(a1[1], (uint64_t)v22 + 24 * v20, v25);
            if ((_DWORD)v14)
            {
              v27 = *v25;
              v28 = (double *)v74;
              v29 = v15;
              v30 = (double *)v71;
              do
              {
                v31 = *v27++;
                *v28 = *v28 - v31 * v26;
                ++v28;
                *v30 = *v30 - v26;
                ++v30;
                --v29;
              }
              while (v29);
            }
            v25 += 3;
          }
          sub_1000ECE2C(&__p, v15);
          if ((_DWORD)v14)
          {
            v32 = (double *)v74;
            v33 = (double *)v71;
            v34 = *v23;
            v35 = v15;
            v36 = (double *)__p;
            do
            {
              v37 = *v32++;
              v38 = v37;
              v39 = *v33++;
              v40 = v38 / v39;
              v41 = *(double *)v34;
              v34 += 8;
              *v36++ = v40 - v41;
              --v35;
            }
            while (v35);
          }
          v42 = v78;
          if ((unint64_t)v78 >= v79)
          {
            v43 = sub_10025E6D4((uint64_t *)&v77, (uint64_t)&__p);
          }
          else
          {
            *v78 = 0;
            v42[1] = 0;
            v42[2] = 0;
            sub_10025EA00(v42, __p, (uint64_t)v70, (v70 - (_BYTE *)__p) >> 3);
            v43 = (uint64_t)(v42 + 3);
          }
          v78 = (void **)v43;
          if ((_DWORD)v14)
          {
            v44 = (double *)__p;
            v45 = (double *)*v23;
            v46 = v15;
            do
            {
              v47 = *v44++;
              *v45 = v47 + *v45;
              ++v45;
              --v46;
            }
            while (v46);
          }
          if (v80 != v22)
            sub_10034F2B0((char *)v80 + 24 * v20, *v23, v22->n128_i64[3 * v20 + 1], (uint64_t)(v22->n128_u64[3 * v20 + 1] - (_QWORD)*v23) >> 3);
          if (__p)
          {
            v70 = __p;
            operator delete(__p);
          }
          if (v71)
          {
            v72 = v71;
            operator delete(v71);
          }
          if (v74)
          {
            v75 = v74;
            operator delete(v74);
          }
          ++v20;
        }
        while (v20 != v21);
        v48 = v77;
        v12 = v68;
        v18 = v67;
        if (v77 != v78)
        {
          v19 = 0.0;
          do
          {
            for (i = (double *)*v48; i != v48[1]; ++i)
            {
              v50 = *i;
              v19 = v19 + v50 * v50;
            }
            v48 += 3;
          }
          while (v48 != v78);
        }
      }
      v51 = sqrt(v19) / v16 / (double)v18;
      v13 = v51 < 0.00000001;
      v52 = (uint64_t)v80;
      if (v80 != v81)
      {
        do
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          sub_10025EA00(&v74, *(const void **)v52, *(_QWORD *)(v52 + 8), (uint64_t)(*(_QWORD *)(v52 + 8) - *(_QWORD *)v52) >> 3);
          v53 = (__n128 *)(v52 + 24);
          v54 = (__n128 *)(v52 + 24);
          if ((__n128 *)(v52 + 24) != v81)
          {
            while (1)
            {
              v71 = 0;
              v72 = 0;
              v73 = 0;
              sub_10025EA00(&v71, (const void *)v54->n128_u64[0], v54->n128_i64[1], (uint64_t)(v54->n128_u64[1] - v54->n128_u64[0]) >> 3);
              v55 = (*(double (**)(_QWORD, void **, void **))(*(_QWORD *)*a1 + 16))(*a1, &v74, &v71);
              if (v71)
              {
                v72 = v71;
                operator delete(v71);
              }
              if (v55 < 0.01)
                break;
              v54 = (__n128 *)((char *)v54 + 24);
              if (v54 == v81)
                goto LABEL_52;
            }
            sub_10025EA78((__n128 *)(v52 + 24), v81, v52);
            v54 = v56;
            v57 = v81;
            if (v81 != v56)
            {
              v58 = v81;
              do
              {
                v60 = (void *)v58[-2].n128_u64[1];
                v58 = (__n128 *)((char *)v58 - 24);
                v59 = v60;
                if (v60)
                {
                  v57[-1].n128_u64[0] = (unint64_t)v59;
                  operator delete(v59);
                }
                v57 = v58;
              }
              while (v58 != v54);
            }
            v81 = v54;
          }
LABEL_52:
          if (v74)
          {
            v75 = v74;
            operator delete(v74);
            v54 = v81;
          }
          v52 += 24;
        }
        while (v53 != v54);
      }
      ++v12;
      v74 = &v77;
      sub_10025E1F0((void ***)&v74);
      if (v12 == 51)
      {
        if (v51 >= 0.00000001)
        {
          v10 = 0;
          goto LABEL_62;
        }
        break;
      }
    }
    v61 = (uint64_t)v80;
    v62 = v81;
    v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v80) >> 3);
    *v65 = v63;
    if (&v80 != a4)
      sub_10025E284((uint64_t)a4, v61, (uint64_t)v62, v63);
    v10 = 1;
LABEL_62:
    v77 = (void **)&v80;
    sub_10025E1F0(&v77);
  }
  return v10;
}

void sub_10025E150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,char a25)
{
  a22 = &a25;
  sub_10025E1F0((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_10025E1F0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10025E230((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_10025E230(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_10025E284(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_10025E40C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_100259C18((_QWORD *)a1, v11);
    v12 = sub_10025E444(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    sub_10025E574((int)&v20, a2, v13, v9);
    v12 = sub_10025E444(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_10025E574((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_10025E3FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10025E404(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10025E40C(uint64_t *a1)
{
  if (*a1)
  {
    sub_10025E230(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_10025E444(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_10025EA00(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_10025E4F4((uint64_t)v8);
  return v4;
}

void sub_10025E4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10025E4F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10025E4F4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025E528(a1);
  return a1;
}

void sub_10025E528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t sub_10025E574(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        sub_10034F2B0(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_10025E5E0(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10025E660(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_10025E644(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10025E660(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_100259694();
  result = (char *)sub_10025E6A0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_10025E6A0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_10025955C();
  return operator new(8 * a2);
}

uint64_t sub_10025E6D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_10025EA00(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  sub_10025E7E8(a1, v14);
  v12 = a1[1];
  sub_10025E974((uint64_t)v14);
  return v12;
}

void sub_10025E7D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025E974((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025E7E8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10025E85C((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10025E85C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_10025E8FC((uint64_t)v11);
  return v9;
}

uint64_t sub_10025E8FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025E930(a1);
  return a1;
}

void sub_10025E930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_10025E974(uint64_t a1)
{
  sub_10025E9A8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10025E9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *sub_10025EA00(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10025E660(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10025EA5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 *sub_10025EA78(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100006898(a3, v4);
      v4 = (__n128 *)((char *)v4 + 24);
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

float sub_10025EAD4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (a2 <= a6)
    v6 = a6;
  else
    v6 = a2;
  if (a2 >= a6)
    v7 = a6;
  else
    v7 = a2;
  v8 = v7 + ((v6 + v6 * v6) >> 1);
  v9 = *(_QWORD *)(a1 + 8);
  result = *(float *)(v9 + 4 * v8);
  if (a4 <= a6)
    v11 = a6;
  else
    v11 = a4;
  if (a4 >= a6)
    v12 = a6;
  else
    v12 = a4;
  v13 = v12 + ((v11 + v11 * v11) >> 1);
  if (*(float *)(v9 + 4 * v13) < result)
    return *(float *)(v9 + 4 * v13);
  return result;
}

float sub_10025EB14(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  float result;

  if (a2 <= a6)
    v6 = a6;
  else
    v6 = a2;
  if (a2 >= a6)
    v7 = a6;
  else
    v7 = a2;
  v8 = v7 + ((v6 + v6 * v6) >> 1);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(float *)(v9 + 4 * v8);
  if (a4 <= a6)
    v11 = a6;
  else
    v11 = a4;
  if (a4 >= a6)
    v12 = a6;
  else
    v12 = a4;
  result = *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  if (v10 >= 3.4028e38)
  {
    if (result >= 3.4028e38)
      return 3.4028e38;
  }
  else if (result >= 3.4028e38)
  {
    return v10;
  }
  else
  {
    return (float)((float)(result * (float)a5) + (float)((float)a3 * v10)) / (float)(a5 + a3);
  }
  return result;
}

float sub_10025EBA4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float result;
  unint64_t v11;
  unint64_t v12;
  float v13;

  if (a2 <= a6)
    v6 = a6;
  else
    v6 = a2;
  if (a2 >= a6)
    v7 = a6;
  else
    v7 = a2;
  v8 = v7 + ((v6 + v6 * v6) >> 1);
  v9 = *(_QWORD *)(a1 + 8);
  result = *(float *)(v9 + 4 * v8);
  if (a4 <= a6)
    v11 = a6;
  else
    v11 = a4;
  if (a4 >= a6)
    v12 = a6;
  else
    v12 = a4;
  v13 = *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  if (result >= 3.4028e38)
  {
    result = 3.4028e38;
    if (v13 < 3.4028e38)
      return *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  }
  else if (v13 < 3.4028e38 && result < v13)
  {
    return *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  }
  return result;
}

char **sub_10025EC14(char **a1, unint64_t *a2, uint64_t a3)
{
  char **v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  float v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  NSObject *v45;
  uint64_t *v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v53;
  char **v54;
  uint64_t *v55;
  _QWORD *v56;
  unint64_t v57;
  uint8_t buf[8];
  _BYTE v59[10];
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  double v65;
  __int16 v66;
  uint64_t v67;

  v5 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_10025F174((void **)a1, *a2 - 1);
  v56 = 0;
  v57 = 0;
  v55 = (uint64_t *)&v56;
  if (*a2)
  {
    v54 = v5;
    v6 = 0;
    do
    {
      *(_QWORD *)buf = v6;
      *(_QWORD *)v59 = 1;
      sub_10025F77C(&v55, &v56, (unint64_t *)buf, buf);
      ++v6;
    }
    while (v6 < *a2);
    if (v57 >= 2)
    {
      v53 = a3;
      do
      {
        v7 = v55;
        if (v55 == (uint64_t *)&v56)
        {
          v9 = 0;
          v8 = 0;
          v11 = INFINITY;
        }
        else
        {
          v8 = 0;
          v9 = 0;
          v11 = INFINITY;
          do
          {
            v12 = (uint64_t *)v7[1];
            v13 = v12;
            v14 = v7;
            if (v12)
            {
              do
              {
                v15 = v13;
                v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                v15 = (uint64_t *)v14[2];
                v16 = *v15 == (_QWORD)v14;
                v14 = v15;
              }
              while (!v16);
            }
            if (v15 != (uint64_t *)&v56)
            {
              v17 = v7[4];
              do
              {
                v18 = v15[4];
                if (v17 <= v18)
                  v19 = v15[4];
                else
                  v19 = v7[4];
                if (v17 < v18)
                  v18 = v7[4];
                v10 = a2[1];
                if (*(float *)(v10 + 4 * (v18 + ((unint64_t)(v19 + v19 * v19) >> 1))) < v11)
                {
                  v11 = *(float *)(v10 + 4 * (v18 + ((unint64_t)(v19 + v19 * v19) >> 1)));
                  v9 = v15;
                  v8 = v7;
                }
                v20 = (uint64_t *)v15[1];
                if (v20)
                {
                  do
                  {
                    v21 = v20;
                    v20 = (uint64_t *)*v20;
                  }
                  while (v20);
                }
                else
                {
                  do
                  {
                    v21 = (uint64_t *)v15[2];
                    v16 = *v21 == (_QWORD)v15;
                    v15 = v21;
                  }
                  while (!v16);
                }
                v15 = v21;
              }
              while (v21 != (uint64_t *)&v56);
            }
            if (v12)
            {
              do
              {
                v22 = v12;
                v12 = (uint64_t *)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                v22 = (uint64_t *)v7[2];
                v16 = *v22 == (_QWORD)v7;
                v7 = v22;
              }
              while (!v16);
            }
            v7 = v22;
          }
          while (v22 != (uint64_t *)&v56);
        }
        if (fabsf(v11) == INFINITY)
        {
          sub_1018ED2F8();
          abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MachineLearning/CLHierarchicalClustering.mm", 100, "CLHierarchicalClustering");
          __break(1u);
        }
        v23 = (uint64_t *)v9[1];
        v24 = v9;
        if (v23)
        {
          do
          {
            v25 = v23;
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v25 = (uint64_t *)v24[2];
            v16 = *v25 == (_QWORD)v24;
            v24 = v25;
          }
          while (!v16);
        }
        v26 = v8[4];
        v27 = v8[5];
        v29 = v9[4];
        v28 = v9[5];
        v30 = (unint64_t)v5[1];
        v31 = (unint64_t)v5[2];
        if (v30 >= v31)
        {
          v33 = *v5;
          v34 = (uint64_t)(v30 - (_QWORD)*v5) >> 5;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 59)
            sub_100259694();
          v36 = v31 - (_QWORD)v33;
          if (v36 >> 4 > v35)
            v35 = v36 >> 4;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0)
            v37 = 0x7FFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          v38 = (char *)sub_10025BA00((uint64_t)(v54 + 2), v37);
          v40 = &v38[32 * v34];
          *(_QWORD *)v40 = v26;
          *((_QWORD *)v40 + 1) = v29;
          *((float *)v40 + 4) = v11;
          *((_QWORD *)v40 + 3) = v28 + v27;
          v42 = *v54;
          v41 = v54[1];
          v43 = v40;
          if (v41 != *v54)
          {
            do
            {
              v44 = *((_OWORD *)v41 - 1);
              *((_OWORD *)v43 - 2) = *((_OWORD *)v41 - 2);
              *((_OWORD *)v43 - 1) = v44;
              v43 -= 32;
              v41 -= 32;
            }
            while (v41 != v42);
            v41 = *v54;
          }
          v32 = v40 + 32;
          *v54 = v43;
          v54[1] = v40 + 32;
          v54[2] = &v38[32 * v39];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *(_QWORD *)v30 = v26;
          *(_QWORD *)(v30 + 8) = v29;
          *(float *)(v30 + 16) = v11;
          v32 = (char *)(v30 + 32);
          *(_QWORD *)(v30 + 24) = v28 + v27;
        }
        v54[1] = v32;
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102129F88);
        v45 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68290050;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v59 = 2082;
          *(_QWORD *)&v59[2] = "";
          v60 = 2050;
          v61 = v26;
          v62 = 2050;
          v63 = v29;
          v64 = 2050;
          v65 = v11;
          v66 = 2050;
          v67 = v28 + v27;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"dendrogram\", \"left\":%{public}lu, \"right\":%{public}lu, \"dist\":\"%{public}f\", \"size\":%{public}lu}", buf, 0x3Au);
        }
        *(_QWORD *)buf = v29;
        *(_QWORD *)v59 = v28 + v27;
        sub_10008A9F0(&v55, v8);
        operator delete(v8);
        sub_10008A9F0(&v55, v9);
        operator delete(v9);
        v46 = v55;
        if (v55 != (uint64_t *)&v56)
        {
          do
          {
            sub_10025F210(v53, (uint64_t)a2, v26, v27, v29, v28, v46[4], v46[5]);
            v48 = v46[4];
            if (v48 <= *(_QWORD *)buf)
              v49 = *(_QWORD *)buf;
            else
              v49 = v46[4];
            if (v48 >= *(_QWORD *)buf)
              v48 = *(_QWORD *)buf;
            *(_DWORD *)(a2[1] + 4 * (v48 + ((unint64_t)(v49 + v49 * v49) >> 1))) = v47;
            v50 = (uint64_t *)v46[1];
            if (v50)
            {
              do
              {
                v51 = v50;
                v50 = (uint64_t *)*v50;
              }
              while (v50);
            }
            else
            {
              do
              {
                v51 = (uint64_t *)v46[2];
                v16 = *v51 == (_QWORD)v46;
                v46 = v51;
              }
              while (!v16);
            }
            v46 = v51;
          }
          while (v51 != (uint64_t *)&v56);
        }
        sub_10025F77C(&v55, v25, (unint64_t *)buf, buf);
        v5 = v54;
      }
      while (v57 > 1);
    }
  }
  sub_100008848((uint64_t)&v55, v56);
  return v5;
}

void sub_10025F120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_10025F174(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10025BA00(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_10025F210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  v10[0] = a7;
  v10[1] = a8;
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, a2, v12, v11, v10);
}

uint64_t sub_10025F25C(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, double a6)
{
  NSObject *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t buf[8];
  __int16 v46;
  const char *v47;
  __int16 v48;
  unint64_t v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;

  if (*a3 == a3[1])
    sub_1018ED468();
  if (*(double *)&a5 == 0.0)
    sub_1018ED5E8();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102129F88);
  v12 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v46 = 2082;
    v47 = "";
    v48 = 2050;
    v49 = a4;
    v50 = 2050;
    v51 = a6;
    v52 = 2050;
    v53 = *(double *)&a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getClusterLabels\", \"smallNodeSize\":%{public}lu, \"distanceThresholdForSmallNode\":\"%{public}f\", \"minNumClusters\":%{public}lu}", buf, 0x30u);
  }
  a2[1] = *a2;
  v13 = ((a1[1] - *a1) >> 5) + 1;
  *(_QWORD *)buf = 0;
  sub_10025F650((uint64_t)a2, v13, buf);
  v14 = a1[1];
  v15 = *a1;
  if (v14 == *a1)
    return 1;
  v16 = a3[1];
  v17 = *(float *)(v14 - 16);
  if (v16 == *a3)
    v18 = -1;
  else
    v18 = 0;
  v19 = a5 > 1;
  if (*(double *)(*a3 + 8 * v18) < v17 || a5 >= 2)
  {
    v21 = (v16 - *a3) >> 3;
    v40 = 1;
    while (1)
    {
      v22 = *a2;
      v23 = v17 > a6 || *(_QWORD *)(v14 - 8) > a4;
      if (v23 || v19)
      {
        *(_QWORD *)(v22 + 8 * *(_QWORD *)(v14 - 32)) = v40;
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102129F88);
        ++v40;
        v31 = qword_1022A00F8;
        if (!os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
          goto LABEL_31;
        v32 = *(_QWORD *)(v14 - 32);
        v33 = *(double *)(v14 - 24);
        v34 = *(float *)(v14 - 16);
        v35 = *(_QWORD *)(v14 - 8);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        v46 = 2082;
        v47 = "";
        v48 = 2050;
        v49 = v32;
        v50 = 2050;
        v51 = v33;
        v52 = 2050;
        v53 = v34;
        v54 = 2050;
        v55 = v35;
        v29 = v31;
        v30 = "{\"msg%{public}.0s\":\"getClusterLabels - split\", \"left\":%{public}lu, \"right\":%{public}lu, \"dist\":\""
              "%{public}f\", \"size\":%{public}lu}";
      }
      else
      {
        *(_QWORD *)(v22 + 8 * *(_QWORD *)(v14 - 32)) = *(_QWORD *)(v22 + 8 * *(_QWORD *)(v14 - 24));
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102129F88);
        v24 = qword_1022A00F8;
        if (!os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
          goto LABEL_31;
        v25 = *(_QWORD *)(v14 - 32);
        v26 = *(double *)(v14 - 24);
        v27 = *(float *)(v14 - 16);
        v28 = *(_QWORD *)(v14 - 8);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        v46 = 2082;
        v47 = "";
        v48 = 2050;
        v49 = v25;
        v50 = 2050;
        v51 = v26;
        v52 = 2050;
        v53 = v27;
        v54 = 2050;
        v55 = v28;
        v29 = v24;
        v30 = "{\"msg%{public}.0s\":\"getClusterLabels - don't split\", \"left\":%{public}lu, \"right\":%{public}lu, \"di"
              "st\":\"%{public}f\", \"size\":%{public}lu}";
      }
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, v30, buf, 0x3Au);
LABEL_31:
      v36 = v14 - 32;
      v15 = *a1;
      if (v14 - 32 == *a1)
        return v40;
      v17 = *(float *)(v14 - 48);
      if (v21 >= v40)
        v37 = v40;
      else
        v37 = v21;
      v38 = *(double *)(*a3 + 8 * v37 - 8);
      v19 = v40 < a5;
      v39 = v38 >= v17 && v40 >= a5;
      v14 -= 32;
      if (v39)
      {
        v14 = v36;
        goto LABEL_42;
      }
    }
  }
  v40 = 1;
LABEL_42:
  if (v14 != v15)
  {
    v41 = *a2;
    do
    {
      v42 = *(_QWORD *)(v14 - 32);
      v43 = *(_QWORD *)(v14 - 24);
      v14 -= 32;
      *(_QWORD *)(v41 + 8 * v42) = *(_QWORD *)(v41 + 8 * v43);
    }
    while (v14 != v15);
  }
  return v40;
}

void sub_10025F650(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_10025FD78((void **)a1, a2 - v3, a3);
  }
}

uint64_t sub_10025F680(uint64_t *a1, _QWORD *a2, unint64_t a3, double a4, double a5)
{
  uint64_t v9;
  void *__p[3];
  double v12;

  v12 = a4;
  sub_10025E5E0(__p, 1uLL, &v12);
  v9 = sub_10025F25C(a1, a2, __p, a3, 1uLL, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_10025F708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10025F724(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_10025F750(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t *sub_10025F77C(uint64_t **a1, _QWORD *a2, unint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)sub_1002105DC(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1000145B0(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10025F800(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_10025F998(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_10025FD1C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_102129FD0;
}

void sub_10025FD54(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_10025FD78(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      sub_100259694();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_10025E6A0(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

BOOL sub_10025FE88()
{
  return os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT);
}

BOOL sub_10025FE9C()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 680), OS_LOG_TYPE_INFO);
}

BOOL sub_10025FEAC()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 680));
}

BOOL sub_10025FEB8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5)
{
  _BOOL8 v5;
  void *__p;
  void *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  v5 = sub_10025FF1C(a1, a2, a3, a4, a5, (uint64_t)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_10025FF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10025FF1C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v11;
  _QWORD *v12;
  _BOOL8 v13;
  uint64_t v15;
  void *__p[3];

  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v15 = 0x3FF0000000000000;
  v12 = sub_10025E5E0(__p, v11, &v15);
  v13 = sub_10025FFDC((uint64_t)v12, a2, (uint64_t **)a3, __p, a4, a5, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v13;
}

void sub_10025FFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10025FFDC(uint64_t a1, uint64_t a2, uint64_t **a3, _QWORD *a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  double v25;
  double v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  void *v41;
  double *v42;
  uint64_t v43;
  double *v44;
  double v45;
  char **v46;
  double *v47;
  uint64_t v48;
  char *v49;
  _BYTE *v50;
  _QWORD *v51;
  int v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  _BOOL8 v57;
  unsigned int v58;
  unsigned int v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v67;
  void *__p;
  void *v69;
  uint64_t v70;
  void *__src;
  _BYTE *v72;
  void **v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;

  v8 = *(_QWORD **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if ((_QWORD *)v9 == v8)
    return 0;
  if (v8[1] == *v8)
    return 0;
  if (a3[1] == *a3)
    return 0;
  v11 = **a3;
  v12 = (*a3)[1];
  v13 = v12 - v11;
  if (v12 == v11)
    return 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  sub_1002605B0(&v76, (uint64_t)v8, v9, 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v8) >> 3));
  v63 = a3;
  v15 = -1431655765 * ((unint64_t)((char *)a3[1] - (char *)*a3) >> 3);
  v67 = (_QWORD *)(a7 + 16);
  v16 = v13 & 0x7FFFFFFF8;
  v17 = 0;
  do
  {
    v62 = v17;
    v18 = *(_DWORD **)a7;
    *(_QWORD *)(a7 + 8) = *(_QWORD *)a7;
    v19 = v63;
    v21 = *v63;
    v20 = v63[1];
    v64 = v20;
    while (v21 != v20)
    {
      if (a5)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 1.0e10;
        do
        {
          __src = off_10212A008;
          v26 = sqrt(sub_100260538((uint64_t)&__src, v21, &v76[v23]));
          if (v26 < v25)
          {
            v24 = v22;
            v25 = v26;
          }
          v23 += 3;
          ++v22;
        }
        while (3 * a5 != v23);
        v18 = *(_DWORD **)(a7 + 8);
        v19 = v63;
      }
      else
      {
        v24 = 0;
      }
      if ((unint64_t)v18 >= *v67)
      {
        v28 = *(_DWORD **)a7;
        v29 = ((uint64_t)v18 - *(_QWORD *)a7) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          sub_100259694();
        v31 = *v67 - (_QWORD)v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)sub_100260634((uint64_t)v67, v32);
          v28 = *(_DWORD **)a7;
          v18 = *(_DWORD **)(a7 + 8);
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        *(_DWORD *)v34 = v24;
        v27 = v34 + 4;
        while (v18 != v28)
        {
          v35 = *--v18;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        *(_QWORD *)a7 = v34;
        *(_QWORD *)(a7 + 8) = v27;
        *(_QWORD *)(a7 + 16) = &v33[4 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v18 = v24;
        v27 = v18 + 1;
      }
      *(_QWORD *)(a7 + 8) = v27;
      v21 += 3;
      v18 = v27;
      v20 = v64;
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    sub_1002605B0(&v73, (uint64_t)v76, (uint64_t)v77, 0xAAAAAAAAAAAAAAABLL * (v77 - v76));
    if (!a5)
      goto LABEL_55;
    v36 = 0;
    do
    {
      __p = 0;
      sub_10025E5E0(&__src, (v13 >> 3), &__p);
      if (!v15)
      {
LABEL_45:
        v46 = (char **)&v76[3 * v36];
        if (&__src != (void **)v46)
          sub_10034F2B0((char *)&__src, *v46, v76[3 * v36 + 1], (uint64_t)(v76[3 * v36 + 1] - (_QWORD)*v46) >> 3);
        goto LABEL_50;
      }
      v37 = 0;
      v38 = 0.0;
      do
      {
        if (v36 != *(_DWORD *)(*(_QWORD *)a7 + 4 * v37))
          goto LABEL_43;
        v39 = (uint64_t)&(*v19)[3 * v37];
        v69 = 0;
        v70 = 0;
        __p = 0;
        sub_10025EA00(&__p, *(const void **)v39, *(_QWORD *)(v39 + 8), (uint64_t)(*(_QWORD *)(v39 + 8) - *(_QWORD *)v39) >> 3);
        v40 = *(double *)(*a4 + 8 * v37);
        v41 = __p;
        if (v16)
        {
          v38 = v38 + v40;
          v42 = (double *)__src;
          v43 = (v13 >> 3);
          v44 = (double *)__p;
          do
          {
            v45 = *v44++;
            *v42 = *v42 + v40 * v45;
            ++v42;
            --v43;
          }
          while (v43);
        }
        else
        {
          v38 = v38 + v40;
          if (!__p)
            goto LABEL_43;
        }
        v69 = v41;
        operator delete(v41);
LABEL_43:
        ++v37;
      }
      while (v37 != v15);
      if (v38 == 0.0)
        goto LABEL_45;
      if (v16)
      {
        v47 = (double *)__src;
        v48 = (v13 >> 3);
        do
        {
          *v47 = *v47 / v38;
          ++v47;
          --v48;
        }
        while (v48);
      }
LABEL_50:
      v49 = (char *)&v76[3 * v36];
      v50 = __src;
      if (v49 != (char *)&__src)
      {
        sub_10034F2B0(v49, (char *)__src, (uint64_t)v72, (v72 - (_BYTE *)__src) >> 3);
        v50 = __src;
      }
      if (v50)
      {
        v72 = v50;
        operator delete(v50);
      }
      ++v36;
    }
    while (v36 != a5);
LABEL_55:
    v51 = v76;
    v65 = (uint64_t)v77;
    if (v76 == v77)
    {
      v52 = 0;
      v55 = (uint64_t)v76;
    }
    else
    {
      v52 = 0;
      do
      {
        v54 = (uint64_t *)v73;
        v53 = v74;
        while (v54 != v53)
        {
          __p = off_10212A008;
          if (sqrt(sub_100260538((uint64_t)&__p, v54, v51)) < 0.05)
            ++v52;
          v54 += 3;
        }
        v51 += 3;
      }
      while (v51 != (_QWORD *)v65);
      v51 = v76;
      v55 = (uint64_t)v77;
    }
    v56 = 0xAAAAAAAAAAAAAAABLL * ((v55 - (uint64_t)v51) >> 3);
    __src = &v73;
    sub_10025E1F0((void ***)&__src);
    v57 = v56 == v52;
    if (v56 == v52)
      v58 = v62;
    else
      v58 = v62 + 1;
    if (v56 == v52)
      break;
    v17 = v58;
  }
  while (v62 <= 0x31);
  if (&v76 != (_QWORD **)a6 && v56 == v52)
    sub_10025E284((uint64_t)a6, (uint64_t)v76, (uint64_t)v77, 0xAAAAAAAAAAAAAAABLL * (v77 - v76));
  v73 = (void **)&v76;
  sub_10025E1F0(&v73);
  return v57;
}

void sub_1002604D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27)
{
  a24 = &a27;
  sub_10025E1F0((void ***)&a24);
  _Unwind_Resume(a1);
}

double sub_100260538(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  double v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = (v4 - *a2) >> 3;
  if (v5 != (uint64_t)(a3[1] - *a3) >> 3)
    sub_1018ED768();
  if (v4 == v3)
    return 0.0;
  v6 = 0;
  result = 0.0;
  do
  {
    v8 = *(double *)(v3 + 8 * v6) - *(double *)(*a3 + 8 * v6);
    result = result + v8 * v8;
    ++v6;
  }
  while (v5 > v6);
  return result;
}

void sub_10026059C()
{
  operator delete();
}

_QWORD *sub_1002605B0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100259C18(result, a4);
    result = sub_10025E444((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100260614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_10025E1F0(&a9);
  _Unwind_Resume(a1);
}

void *sub_100260634(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_10025955C();
  return operator new(4 * a2);
}

void sub_100260668(uint64_t a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X5>, uint64_t a4@<X8>)
{
  double v4;
  __n128 *v7;
  NSObject *v9;
  signed __int32 v10;
  uint64_t v11;
  NSObject *v12;
  unsigned __int32 *v13;
  CFStringRef v14;
  int v15;
  int v16;
  float v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  NSObject *v34;
  unint64_t v35;
  unint64_t i;
  int v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  _OWORD *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  NSObject *v49;
  _OWORD *v50;
  void *p_p;
  NSObject *v52;
  _OWORD *v53;
  void **v54;
  NSObject *v55;
  int v56;
  int v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  int isa;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  Class v77;
  NSObject v78;
  char *v79;
  __int128 v80;
  int *v81;
  NSObject *v82;
  NSObject *v83;
  int v84;
  int v85;
  NSObject *v86;
  NSObject *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  Class v93;
  NSObject *v94;
  NSObject *v95;
  __n128 *v96;
  NSObject *v97;
  __n128 *v98;
  uint64_t v99;
  int v100;
  __n128 *v101;
  const char *v102;
  uint8_t *v103;
  NSObject *v104;
  uint64_t v105;
  int *v106;
  int v107;
  NSObject *v108;
  uint64_t v109;
  int *v110;
  int v111;
  uint64_t v112;
  int *v113;
  int v114;
  uint64_t v115;
  void **v116;
  NSObject *v117;
  uint64_t v118;
  char v119;
  int v120;
  int v121;
  char v122;
  void *__p;
  __int128 v124;
  char v125;
  __n128 v126;
  char v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  char v132;
  char v133[8];
  _QWORD *v134;
  uint64_t v135[3];
  _QWORD v136[3];
  uint8_t buf[8];
  _BYTE v138[10];
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  _BYTE v142[24];

  v7 = (__n128 *)a1;
  if (!sub_1002EFEB8(a1))
    sub_1018ED790();
  if (v7->n128_u32[1] == 2)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_BYTE *)(a4 + 80) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 56) = 0;
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 + 160);
    sub_100262014(a4 + 32, 0, *(char **)(a2 + 168), *(char **)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
    if (v7[12].n128_u8[0] && v7[6].n128_u64[1] != v7[6].n128_u64[0])
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A088);
      v9 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        if (v7[9].n128_u8[0])
        {
          v10 = v7[8].n128_i32[1];
          if (v7[8].n128_u8[1])
            LODWORD(v11) = v7[8].n128_u32[2];
          else
            LODWORD(v11) = v7[8].n128_u32[1];
          v11 = (int)v11;
          if (!v7[8].n128_u8[1])
            v10 = v7[8].n128_i32[2];
        }
        else
        {
          v11 = 0;
          v10 = 0;
        }
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(_QWORD *)&v138[2] = "";
        v139 = 2050;
        v140 = v11;
        v141 = 2050;
        *(_QWORD *)v142 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, running localization\", \"LSL Length\":%{public}lu, \"LSL Num Clusters\":%{public}lu}", buf, 0x26u);
      }
      if (v7[8].n128_u8[1])
        v13 = &v7[8].n128_u32[1];
      else
        v13 = &v7[8].n128_u32[2];
      sub_1002EBBE0((uint64_t)v136, 1, *v13 + 1);
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A088);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(_QWORD *)&v138[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model with empty LSL, publishing empty results\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A088);
    v94 = &qword_1022A0000;
    v95 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      a3 = &v126;
      sub_10035A840(v7->n128_i32[1], &v126);
      if (v127 >= 0)
        v96 = &v126;
      else
        v96 = (__n128 *)v126.n128_u64[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(_QWORD *)&v138[2] = "";
      v139 = 2082;
      v140 = (uint64_t)v96;
      v141 = 2082;
      *(_QWORD *)v142 = "assert";
      *(_WORD *)&v142[8] = 2081;
      *(_QWORD *)&v142[10] = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v127 < 0)
        operator delete((void *)v126.n128_u64[0]);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A088);
    }
    v97 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      a3 = &v126;
      sub_10035A840(v7->n128_i32[1], &v126);
      if (v127 >= 0)
        v98 = &v126;
      else
        v98 = (__n128 *)v126.n128_u64[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(_QWORD *)&v138[2] = "";
      v139 = 2082;
      v140 = (uint64_t)v98;
      v141 = 2082;
      *(_QWORD *)v142 = "assert";
      *(_WORD *)&v142[8] = 2081;
      *(_QWORD *)&v142[10] = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v97, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, model type is not similarity list!", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v127 < 0)
        operator delete((void *)v126.n128_u64[0]);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A088);
    }
    v99 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      v100 = v7->n128_i32[1];
      v7 = &v126;
      sub_10035A840(v100, &v126);
      v101 = v127 >= 0 ? &v126 : (__n128 *)v126.n128_u64[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(_QWORD *)&v138[2] = "";
      v139 = 2082;
      v140 = (uint64_t)v101;
      v141 = 2082;
      *(_QWORD *)v142 = "assert";
      *(_WORD *)&v142[8] = 2081;
      *(_QWORD *)&v142[10] = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v99, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v127 < 0)
        operator delete((void *)v126.n128_u64[0]);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationCosineSimilarityLocalize.mm", 24, "localize");
    while (1)
    {
      __break(1u);
      dispatch_once(&qword_1022A00F0, &stru_10212A088);
      LOWORD(__p) = 0;
      LODWORD(v115) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "CosineSimilarityLocalization, did not find null space probability", &__p, v115);
      v103 = (uint8_t *)v102;
      sub_100512490("Generic", 1, 0, 0, "virtual CLMicroLocationAlgorithms::LocalizerResults CLMicroLocationCosineSimilarityLocalizationAlgorithm::localize(const CLMicroLocationModel &, const CLMicroLocationFingerprint &, const std::optional<CLMicroLocationFingerprintDistanceFunction::Signature> &, const CLMicroLocationLocalizationSettings &, std::optional<boost::uuids::uuid> *) const", "%s\n", v102);
      if (v103 != buf)
        free(v103);
      sub_1001E4804(buf);
      v117 = v94;
      LODWORD(__p) = 0;
      v14 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullClusterThresholdForLowConfidence", 0x8000100u, kCFAllocatorNull);
      sub_10052688C(*(uint64_t *)buf, (uint64_t)v14, (float *)&__p);
      v16 = v15;
      CFRelease(v14);
      v17 = *(float *)&__p;
      v18 = *(std::__shared_weak_count **)v138;
      if (*(_QWORD *)v138)
      {
        v19 = (unint64_t *)(*(_QWORD *)v138 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = v17;
      if (!v16)
        v21 = 0.300000012;
      if (v4 > v21)
      {
        v22 = *(_QWORD *)(v99 + 48);
        *(_DWORD *)(v99 + 24) = 0;
        v23 = *(char **)(v99 + 40);
        if ((unint64_t)v23 >= v22)
        {
          v25 = (char *)*v116;
          v26 = (v23 - (_BYTE *)*v116) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            sub_100259694();
          v28 = v22 - (_QWORD)v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)sub_100260634(v99 + 48, v29);
            v25 = *(char **)(v99 + 32);
            v23 = *(char **)(v99 + 40);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          v32 = &v30[4 * v29];
          *(_DWORD *)v31 = 7;
          v24 = v31 + 4;
          while (v23 != v25)
          {
            v33 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *((_DWORD *)v31 - 1) = v33;
            v31 -= 4;
          }
          *(_QWORD *)(v99 + 32) = v31;
          *(_QWORD *)(v99 + 40) = v24;
          *(_QWORD *)(v99 + 48) = v32;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)v23 = 7;
          v24 = v23 + 4;
        }
        *(_QWORD *)(v99 + 40) = v24;
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A088);
        v34 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v138 = 2082;
          *(_QWORD *)&v138[2] = "";
          v139 = 2049;
          v140 = *(_QWORD *)&v4;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, setting invalid confidence due to high null cluster probability\", \"nullClusterProbability\":\"%{private}.6f\"}", buf, 0x1Cu);
        }
      }
      if (a3)
      {
        v35 = v126.n128_u64[0];
        if (v126.n128_u64[0] != v126.n128_u64[1])
        {
          for (i = v126.n128_u64[0] + 32; i != v126.n128_u64[1]; i += 32)
          {
            if (*(double *)(v35 + 16) < *(double *)(i + 16) || *(_OWORD *)v35 == 0)
              v35 = i;
          }
        }
        if (*(_OWORD *)v35 != 0)
        {
          v37 = a3[1].n128_u8[0];
          *a3 = *(__n128 *)v35;
          if (!v37)
            a3[1].n128_u8[0] = 1;
        }
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A088);
      v38 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(_QWORD *)&v138[2] = "";
        v139 = 2050;
        v140 = (uint64_t)(v126.n128_u64[1] - v126.n128_u64[0]) >> 5;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, internalLocalizer results\", \"numInternalResults\":%{public}lu}", buf, 0x1Cu);
      }
      a3 = (__n128 *)v126.n128_u64[1];
      v39 = v126.n128_u64[0];
      if (v126.n128_u64[1] == v126.n128_u64[0])
        goto LABEL_164;
      do
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A088);
        v40 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
        {
          v41 = operator new(0x28uLL);
          __p = v41;
          v124 = xmmword_101B97FF0;
          *v41 = 0u;
          v41[1] = 0u;
          *(_QWORD *)((char *)v41 + 29) = 0;
          sub_100261F9C(v39, v41);
          v42 = v124 >= 0 ? &__p : (void **)__p;
          v43 = *(_QWORD *)(v39 + 16);
          v44 = *(unsigned int *)(v39 + 24);
          *(_DWORD *)buf = 68289795;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v138 = 2082;
          *(_QWORD *)&v138[2] = "";
          v139 = 2081;
          v140 = (uint64_t)v42;
          v141 = 2049;
          *(_QWORD *)v142 = v43;
          *(_WORD *)&v142[8] = 2049;
          *(_QWORD *)&v142[10] = v44;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, internalLocalizer result\", \"MicrolocationId\":%{private, location:escape_only}s, \"Probability\":\"%{private}.6f\", \"ConfidenceLevel\":%{private}lu}", buf, 0x30u);
          if (SHIBYTE(v124) < 0)
            operator delete(__p);
        }
        if (*(_OWORD *)v39 == 0)
        {
          sub_1002EBAE4((uint64_t)v136, 0, 0, *(double *)(v39 + 16));
        }
        else
        {
          v45 = (char *)v7[4].n128_u64[1];
          v46 = (char *)v7[5].n128_u64[0];
          v47 = v45;
          if (v45 != v46)
          {
            while (*(_QWORD *)v47 != *(_QWORD *)v39 || *((_QWORD *)v47 + 1) != *(_QWORD *)(v39 + 8))
            {
              v47 += 16;
              if (v47 == v46)
              {
                v47 = (char *)v7[5].n128_u64[0];
                break;
              }
            }
          }
          if (v47 == v46)
          {
            if (qword_1022A00F0 != -1)
              dispatch_once(&qword_1022A00F0, &stru_10212A088);
            v49 = qword_1022A00F8;
            if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
            {
              v50 = operator new(0x28uLL);
              __p = v50;
              v124 = xmmword_101B97FF0;
              *v50 = 0u;
              v50[1] = 0u;
              *(_QWORD *)((char *)v50 + 29) = 0;
              sub_100261F9C(v39, v50);
              if (v124 >= 0)
                p_p = &__p;
              else
                p_p = __p;
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v138 = 2082;
              *(_QWORD *)&v138[2] = "";
              v139 = 2082;
              v140 = (uint64_t)p_p;
              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, unexpected identifier\", \"cluster ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (SHIBYTE(v124) < 0)
                operator delete(__p);
              if (qword_1022A00F0 != -1)
                dispatch_once(&qword_1022A00F0, &stru_10212A088);
            }
            v52 = qword_1022A00F8;
            if (os_signpost_enabled((os_log_t)qword_1022A00F8))
            {
              v53 = operator new(0x28uLL);
              __p = v53;
              v124 = xmmword_101B97FF0;
              *v53 = 0u;
              v53[1] = 0u;
              *(_QWORD *)((char *)v53 + 29) = 0;
              sub_100261F9C(v39, v53);
              v54 = v124 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v138 = 2082;
              *(_QWORD *)&v138[2] = "";
              v139 = 2082;
              v140 = (uint64_t)v54;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v52, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, unexpected identifier", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, unexpected identifier\", \"cluster ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (SHIBYTE(v124) < 0)
                operator delete(__p);
            }
          }
          else
          {
            sub_1002EBAE4((uint64_t)v136, 0, ((unint64_t)(v47 - v45) >> 4) + 1, *(double *)(v39 + 16));
          }
        }
        v39 += 32;
      }
      while ((__n128 *)v39 != a3);
      if ((sub_1002EBFD8((uint64_t)v136) & 1) == 0)
        break;
      sub_1002EBE60((uint64_t)v136, 1u, &__p);
      BYTE1(v124) = 1;
      sub_1002EC234((uint64_t)&v7[7].n128_i64[1], (uint64_t)&__p, &v118);
      if (!v122)
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A088);
        v86 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v138 = 2082;
          *(_QWORD *)&v138[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, multByVec failed!\"}", buf, 0x12u);
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_10212A088);
        }
        v87 = qword_1022A00F8;
        if (os_signpost_enabled((os_log_t)qword_1022A00F8))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v138 = 2082;
          *(_QWORD *)&v138[2] = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v87, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, multByVec failed!", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, multByVec failed!\"}", buf, 0x12u);
        }
        goto LABEL_158;
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A088);
      v55 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        v56 = v120;
        if (v119)
          v57 = v121;
        else
          v57 = v120;
        if (!v119)
          v56 = v121;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(_QWORD *)&v138[2] = "";
        v139 = 2050;
        v140 = v57;
        v141 = 2050;
        *(_QWORD *)v142 = v56;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"cosine similarity results shape\", \"Rows\":%{public}lu, \"Cols\":%{public}lu}", buf, 0x26u);
      }
      if (v119)
        v58 = &v121;
      else
        v58 = &v120;
      v59 = *v58;
      if (v59 == (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2)
      {
        if ((int)v59 >= 1)
        {
          v60 = 0;
          do
          {
            if (SLODWORD(v117[20].isa) >= *(_DWORD *)(v7[9].n128_u64[1] + 4 * v60))
              isa = *(_DWORD *)(v7[9].n128_u64[1] + 4 * v60);
            else
              isa = (int)v117[20].isa;
            *(_QWORD *)buf = 0;
            sub_1002EBF90((uint64_t)&v118, v60, 0, buf);
            v62 = (uint64_t *)(v7[6].n128_u64[0] + 16 * v60);
            v64 = *v62;
            v63 = v62[1];
            v65 = *(_QWORD *)(v99 + 8);
            v66 = *(_QWORD *)(v99 + 16);
            if (v65 >= v66)
            {
              v69 = (uint64_t)(v65 - *(_QWORD *)v99) >> 5;
              v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 59)
                sub_100259694();
              v71 = v66 - *(_QWORD *)v99;
              if (v71 >> 4 > v70)
                v70 = v71 >> 4;
              if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFE0)
                v72 = 0x7FFFFFFFFFFFFFFLL;
              else
                v72 = v70;
              v73 = (char *)sub_10025BA00(v99 + 16, v72);
              v75 = &v73[32 * v69];
              v76 = *(_QWORD *)buf;
              *(_QWORD *)v75 = v64;
              *((_QWORD *)v75 + 1) = v63;
              *((_QWORD *)v75 + 2) = v76;
              *((_DWORD *)v75 + 6) = isa;
              v78.isa = *(Class *)v99;
              v77 = *(Class *)(v99 + 8);
              v79 = v75;
              if (v77 != *(Class *)v99)
              {
                do
                {
                  v80 = *((_OWORD *)v77 - 2);
                  *(_OWORD *)(v79 - 20) = *(_OWORD *)((char *)v77 - 20);
                  *((_OWORD *)v79 - 2) = v80;
                  v79 -= 32;
                  v77 = (Class)((char *)v77 - 32);
                }
                while (v77 != v78.isa);
                v77 = *(Class *)v99;
              }
              v68 = v75 + 32;
              *(_QWORD *)v99 = v79;
              *(_QWORD *)(v99 + 8) = v75 + 32;
              *(_QWORD *)(v99 + 16) = &v73[32 * v74];
              if (v77)
                operator delete(v77);
            }
            else
            {
              v67 = *(_QWORD *)buf;
              *(_QWORD *)v65 = v64;
              *(_QWORD *)(v65 + 8) = v63;
              *(_QWORD *)(v65 + 16) = v67;
              *(_DWORD *)(v65 + 24) = isa;
              v68 = (char *)(v65 + 32);
            }
            *(_QWORD *)(v99 + 8) = v68;
            ++v60;
            if (v119)
              v81 = &v121;
            else
              v81 = &v120;
          }
          while (v60 < *v81);
        }
LABEL_158:
        if (v122)
        {
          v88 = v118;
          v118 = 0;
          if (v88)
            operator delete[]();
        }
        if (v125)
        {
          v89 = __p;
          __p = 0;
          if (v89)
            operator delete[]();
        }
LABEL_164:
        sub_100261E30(v99 + 56, &v126);
        v85 = 0;
        v84 = 1;
        goto LABEL_165;
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A088);
      v104 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
      {
        v105 = (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2;
        v106 = v119 ? &v121 : &v120;
        v107 = *v106;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(_QWORD *)&v138[2] = "";
        v139 = 2050;
        v140 = v105;
        v141 = 1026;
        *(_DWORD *)v142 = v107;
        *(_WORD *)&v142[4] = 2082;
        *(_QWORD *)&v142[6] = "assert";
        *(_WORD *)&v142[14] = 2081;
        *(_QWORD *)&v142[16] = "lslEventConfidences.size() == static_cast<size_t>(cosineSimilarityOpt->getNumRows())";
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, confidence vector size not equal to prob matrix row number!\", \"confidence vector size\":%{public}lu, \"number of prob matrix rows\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A088);
      }
      v108 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        v109 = (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2;
        v110 = v119 ? &v121 : &v120;
        v111 = *v110;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(_QWORD *)&v138[2] = "";
        v139 = 2050;
        v140 = v109;
        v141 = 1026;
        *(_DWORD *)v142 = v111;
        *(_WORD *)&v142[4] = 2082;
        *(_QWORD *)&v142[6] = "assert";
        *(_WORD *)&v142[14] = 2081;
        *(_QWORD *)&v142[16] = "lslEventConfidences.size() == static_cast<size_t>(cosineSimilarityOpt->getNumRows())";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v108, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, confidence vector size not equal to prob matrix row number!", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, confidence vector size not equal to prob matrix row number!\", \"confidence vector size\":%{public}lu, \"number of prob matrix rows\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A088);
      }
      v94 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
      {
        v112 = (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2;
        if (v119)
          v113 = &v121;
        else
          v113 = &v120;
        v114 = *v113;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v138 = 2082;
        *(_QWORD *)&v138[2] = "";
        v139 = 2050;
        v140 = v112;
        v141 = 1026;
        *(_DWORD *)v142 = v114;
        *(_WORD *)&v142[4] = 2082;
        *(_QWORD *)&v142[6] = "assert";
        *(_WORD *)&v142[14] = 2081;
        *(_QWORD *)&v142[16] = "lslEventConfidences.size() == static_cast<size_t>(cosineSimilarityOpt->getNumRows())";
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, confidence vector size not equal to prob matrix row number!\", \"confidence vector size\":%{public}lu, \"number of prob matrix rows\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationCosineSimilarityLocalize.mm", 125, "localize");
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A088);
    v82 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(_QWORD *)&v138[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, error normalizing currentLocalizationVec!\"}", buf, 0x12u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A088);
    }
    v83 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v138 = 2082;
      *(_QWORD *)&v138[2] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v83, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, error normalizing currentLocalizationVec!", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, error normalizing currentLocalizationVec!\"}", buf, 0x12u);
    }
    v84 = 0;
    v85 = 1;
LABEL_165:
    if (v132 && v130)
    {
      v131 = v130;
      operator delete(v130);
    }
    if (v128)
    {
      v129 = v128;
      operator delete(v128);
    }
    if (v126.n128_u64[0])
    {
      v126.n128_u64[1] = v126.n128_u64[0];
      operator delete((void *)v126.n128_u64[0]);
    }
    sub_10011A56C(v135);
    sub_100008848((uint64_t)v133, v134);
    v90 = v136[0];
    v136[0] = 0;
    if (v90)
      operator delete[]();
    if (((v85 | v84) & 1) == 0)
    {
      if (*(_BYTE *)(v99 + 80))
      {
        v91 = *(void **)(v99 + 56);
        if (v91)
        {
          *(_QWORD *)(v99 + 64) = v91;
          operator delete(v91);
        }
      }
      v92 = *v116;
      if (*v116)
      {
        *(_QWORD *)(v99 + 40) = v92;
        operator delete(v92);
      }
      v93 = *(Class *)v99;
      if (*(_QWORD *)v99)
      {
        *(_QWORD *)(v99 + 8) = v93;
        operator delete(v93);
      }
    }
  }
}

void sub_100261D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;

  sub_100261E8C((uint64_t)&a30);
  sub_100261EE4((uint64_t)&a41);
  v50 = a48;
  a48 = 0;
  if (v50)
    operator delete[]();
  sub_100261E8C(v48);
  _Unwind_Resume(a1);
}

uint64_t sub_100261E30(uint64_t a1, __n128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    sub_100006898(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_100261E8C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100261EE4(uint64_t a1)
{
  sub_10011A56C((_QWORD *)(a1 + 24));
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_100261F18(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100261F44(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_BYTE *sub_100261F9C(uint64_t a1, _BYTE *a2)
{
  unint64_t i;
  _BYTE *v3;
  char v4;
  unsigned int v5;
  char v6;

  for (i = 0; i != 16; ++i)
  {
    v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u)
      v4 = 87;
    else
      v4 = 48;
    *a2 = v4 + (*(_BYTE *)(a1 + i) >> 4);
    a2 += 2;
    v5 = *(_BYTE *)(a1 + i) & 0xF;
    if (v5 >= 0xA)
      v6 = 87;
    else
      v6 = 48;
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      v3[2] = 45;
    }
  }
  return a2;
}

char *sub_100262014(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      sub_100259694();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_100260634(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = sub_100262220((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1002621E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100262220(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t sub_1002622E4(uint64_t a1, unsigned __int8 *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  CFStringRef v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t **v25;
  double v26;
  CFStringRef v27;
  int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t **v33;
  double v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  CFStringRef v44;
  int v45;
  int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  CFStringRef v51;
  int v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t **v57;
  double v58;
  CFStringRef v59;
  int v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t **v65;
  double v66;
  CFStringRef v67;
  _BOOL4 v68;
  uint64_t *v69;
  uint64_t *v70;
  int v71;
  NSObject *v72;
  NSObject *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  CFStringRef v77;
  int v78;
  int v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  _BOOL4 v85;
  CFStringRef v86;
  _BOOL4 v87;
  CFStringRef v88;
  int v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t **v94;
  BOOL v95;
  double v96;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  CFStringRef v101;
  int v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD v106[2];
  _QWORD **v107;
  _QWORD *v108[2];
  _QWORD v109[2];
  uint64_t v110;
  std::__shared_weak_count *v111;
  _BYTE buf[18];
  __int16 v113;
  uint64_t v114;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v8 = a1 + 24;
  sub_1002632E4((_QWORD *)(a1 + 24));
  v108[1] = 0;
  v9 = &xmmword_102310488;
  v107 = v108;
  v108[0] = 0;
  v10 = byte_10231049F;
  if (byte_10231049F >= 0)
    v11 = byte_10231049F;
  else
    v11 = *((_QWORD *)&xmmword_102310488 + 1);
  v12 = (char)a2[23];
  if (v12 >= 0)
    v13 = a2[23];
  else
    v13 = *((_QWORD *)a2 + 1);
  if (v11 != v13)
    goto LABEL_17;
  if (v12 >= 0)
    v14 = a2;
  else
    v14 = *(unsigned __int8 **)a2;
  if (byte_10231049F < 0)
  {
    if (memcmp((const void *)xmmword_102310488, v14, *((size_t *)&xmmword_102310488 + 1)))
      goto LABEL_17;
LABEL_29:
    if (a3 == 3)
      goto LABEL_104;
    if (a3 != 4)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A0A8);
      v72 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v113 = 2050;
        v114 = a3;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!\", \"Generation Algorithm\":%{public}lu}", buf, 0x1Cu);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A0A8);
      }
      v73 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v113 = 2050;
        v114 = a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v73, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!", "{\"msg%{public}.0s\":\"Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!\", \"Generation Algorithm\":%{public}lu}", buf, 0x1Cu);
      }
      goto LABEL_151;
    }
    *(_DWORD *)(a1 + 40) = 2;
    sub_1001E4804(buf);
    v110 = 0;
    v19 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBinaryModelRoiReductionPercentile", 0x8000100u, kCFAllocatorNull);
    v20 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v19, &v110);
    CFRelease(v19);
    v21 = v110;
    v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    LODWORD(v110) = 2;
    *(_QWORD *)buf = &v110;
    v25 = sub_100041CE0((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v26 = 0.15;
    if (v20)
      v26 = *(double *)&v21;
    *((double *)v25 + 5) = v26;
    sub_1001E4804(buf);
    v110 = 0;
    v27 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBinaryModelNotRoiReductionPercentile", 0x8000100u, kCFAllocatorNull);
    v28 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v27, &v110);
    CFRelease(v27);
    v29 = v110;
    v30 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v31 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    LODWORD(v110) = 3;
    *(_QWORD *)buf = &v110;
    v33 = sub_100041CE0((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v34 = 0.06;
    if (v28)
      v34 = *(double *)&v29;
    *((double *)v33 + 5) = v34;
    sub_1002637D4(a4, "", buf);
    if (SBYTE3(v114) < 0)
    {
      if (*(_QWORD *)&buf[8] != 14)
      {
        operator delete(*(void **)buf);
LABEL_141:
        sub_1002632E4(buf);
        sub_10052502C(v8, (uint64_t)buf);
        sub_10011A56C(buf);
        sub_1001E4804(buf);
        v110 = 0;
        v88 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBinaryModelDetectionThreshold", 0x8000100u, kCFAllocatorNull);
        v89 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v88, &v110);
        CFRelease(v88);
        v90 = v110;
        v91 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v92 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        LODWORD(v110) = 4;
        *(_QWORD *)buf = &v110;
        v94 = sub_100041CE0((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v95 = v89 == 0;
        v96 = 0.5;
LABEL_147:
        if (!v95)
          v96 = *(double *)&v90;
        *((double *)v94 + 5) = v96;
        v71 = sub_1002636F8();
        goto LABEL_150;
      }
      v85 = **(_QWORD **)buf != 0x6F2D726F6F646E69 || *(_QWORD *)(*(_QWORD *)buf + 6) != 0x726F6F6474756F2DLL;
      operator delete(*(void **)buf);
      if (v85)
        goto LABEL_141;
    }
    else
    {
      if (SBYTE3(v114) != 14)
        goto LABEL_141;
      if (*(_QWORD *)buf != 0x6F2D726F6F646E69 || *(_QWORD *)&buf[6] != 0x726F6F6474756F2DLL)
        goto LABEL_141;
    }
    sub_1001E4804(&v110);
    sub_100119F3C(v109);
    v86 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceKernelFunction_IndoorOutdoor", 0x8000100u, kCFAllocatorNull);
    v87 = sub_100219D08(v110, (uint64_t)v86, v109);
    CFRelease(v86);
    if (v87)
    {
      sub_100525028(buf);
      sub_100524E68(v106, (uint64_t)buf);
      v106[0] = &off_102131AB0;
      sub_10011A5A8(buf);
    }
    else
    {
      sub_1015A2E04(buf, "{\"type\" : 2, \"sigma\" : 0.375, \"power\" : 3.0}");
      sub_10038628C(v106, buf);
      if (SBYTE3(v114) < 0)
        operator delete(*(void **)buf);
    }
    sub_10011A5A8(v109);
    v98 = v111;
    if (v111)
    {
      p_shared_owners = (unint64_t *)&v111->__shared_owners_;
      do
        v100 = __ldaxr(p_shared_owners);
      while (__stlxr(v100 - 1, p_shared_owners));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    sub_10052502C(v8, (uint64_t)v106);
    sub_10011A56C(v106);
    sub_1001E4804(buf);
    v110 = 0;
    v101 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBinaryModelDetectionThreshold_IndoorOutdoor", 0x8000100u, kCFAllocatorNull);
    v102 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v101, &v110);
    CFRelease(v101);
    v90 = v110;
    v103 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v104 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    LODWORD(v110) = 4;
    *(_QWORD *)buf = &v110;
    v94 = sub_100041CE0((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v95 = v102 == 0;
    v96 = 0.35;
    goto LABEL_147;
  }
  if (!byte_10231049F)
    goto LABEL_29;
  while (*(unsigned __int8 *)v9 == *v14)
  {
    v9 = (__int128 *)((char *)v9 + 1);
    ++v14;
    if (!--v10)
      goto LABEL_29;
  }
LABEL_17:
  v15 = &xmmword_102310470;
  v16 = byte_102310487;
  if (byte_102310487 >= 0)
    v17 = byte_102310487;
  else
    v17 = *((_QWORD *)&xmmword_102310470 + 1);
  if (v17 != v13)
    goto LABEL_54;
  if (v12 >= 0)
    v18 = a2;
  else
    v18 = *(unsigned __int8 **)a2;
  if (byte_102310487 < 0)
  {
    if (memcmp((const void *)xmmword_102310470, v18, *((size_t *)&xmmword_102310470 + 1)))
      goto LABEL_54;
    goto LABEL_104;
  }
  if (!byte_102310487)
  {
LABEL_104:
    *(_DWORD *)(a1 + 40) = sub_100263460();
    sub_100263538();
    LODWORD(v110) = 0;
    *(_QWORD *)buf = &v110;
    sub_100041CE0((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v69;
    sub_100263618();
    LODWORD(v110) = 1;
    *(_QWORD *)buf = &v110;
    sub_100041CE0((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v70;
    sub_1002632E4(buf);
    sub_10052502C(v8, (uint64_t)buf);
    sub_10011A56C(buf);
    v71 = sub_1002636F8();
LABEL_150:
    *(_DWORD *)(a1 + 44) = v71;
    goto LABEL_151;
  }
  while (*(unsigned __int8 *)v15 == *v18)
  {
    v15 = (__int128 *)((char *)v15 + 1);
    ++v18;
    if (!--v16)
      goto LABEL_104;
  }
LABEL_54:
  v36 = &qword_1023104A0;
  v37 = byte_1023104B7;
  if (byte_1023104B7 >= 0)
    v38 = byte_1023104B7;
  else
    v38 = qword_1023104A8;
  if (v38 != v13)
    goto LABEL_68;
  if (v12 >= 0)
    v39 = a2;
  else
    v39 = *(unsigned __int8 **)a2;
  if (byte_1023104B7 < 0)
  {
    if (memcmp((const void *)qword_1023104A0, v39, qword_1023104A8))
      goto LABEL_68;
LABEL_80:
    sub_1001E4804(buf);
    LODWORD(v110) = 0;
    v44 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizerAlgorithm_HomeLOI", 0x8000100u, kCFAllocatorNull);
    v45 = sub_1000B1180(*(uint64_t *)buf, (uint64_t)v44, &v110);
    CFRelease(v44);
    v46 = v110;
    v47 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v48 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v45)
      v50 = v46;
    else
      v50 = 3;
    *(_DWORD *)(a1 + 40) = v50;
    sub_1001E4804(buf);
    v110 = 0;
    v51 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceDistanceReductionFunctionMinPercentile_HomeLOI", 0x8000100u, kCFAllocatorNull);
    v52 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v51, &v110);
    CFRelease(v51);
    v53 = v110;
    v54 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    LODWORD(v110) = 0;
    *(_QWORD *)buf = &v110;
    v57 = sub_100041CE0((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v58 = 0.1;
    if (v52)
      v58 = *(double *)&v53;
    *((double *)v57 + 5) = v58;
    sub_1001E4804(buf);
    v110 = 0;
    v59 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceDistanceReductionFunctionMaxPercentile_HomeLOI", 0x8000100u, kCFAllocatorNull);
    v60 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v59, &v110);
    CFRelease(v59);
    v61 = v110;
    v62 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v63 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    LODWORD(v110) = 1;
    *(_QWORD *)buf = &v110;
    v65 = sub_100041CE0((uint64_t **)a1, (int *)&v110, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v66 = 0.2;
    if (v60)
      v66 = *(double *)&v61;
    *((double *)v65 + 5) = v66;
    sub_1001E4804(&v110);
    sub_100119F3C(v109);
    v67 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceKernelFunction_HomeLOI", 0x8000100u, kCFAllocatorNull);
    v68 = sub_100219D08(v110, (uint64_t)v67, v109);
    CFRelease(v67);
    if (v68)
    {
      sub_100525028(buf);
      sub_100524E68(v106, (uint64_t)buf);
      v106[0] = &off_102131AB0;
      sub_10011A5A8(buf);
    }
    else
    {
      sub_1015A2E04(buf, "{\"type\" : 2, \"sigma\" : 0.6, \"power\" : 3.5}");
      sub_10038628C(v106, buf);
      if (SBYTE3(v114) < 0)
        operator delete(*(void **)buf);
    }
    sub_10011A5A8(v109);
    v74 = v111;
    if (v111)
    {
      v75 = (unint64_t *)&v111->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    sub_10052502C(v8, (uint64_t)v106);
    sub_10011A56C(v106);
    sub_1001E4804(buf);
    LODWORD(v110) = 0;
    v77 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsHomeLoiLocalizerFingerprintDistanceFunctionType", 0x8000100u, kCFAllocatorNull);
    v78 = sub_1000B1180(*(uint64_t *)buf, (uint64_t)v77, &v110);
    CFRelease(v77);
    v79 = v110;
    v80 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v81 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    if (v78)
      v83 = v79;
    else
      v83 = 5;
    *(_DWORD *)(a1 + 44) = v83;
    goto LABEL_151;
  }
  if (!byte_1023104B7)
    goto LABEL_80;
  while (*(unsigned __int8 *)v36 == *v39)
  {
    v36 = (uint64_t *)((char *)v36 + 1);
    ++v39;
    if (!--v37)
      goto LABEL_80;
  }
LABEL_68:
  v40 = &xmmword_1023104B8;
  v41 = byte_1023104CF;
  if (byte_1023104CF >= 0)
    v42 = byte_1023104CF;
  else
    v42 = *((_QWORD *)&xmmword_1023104B8 + 1);
  if (v42 != v13)
    goto LABEL_151;
  if (v12 >= 0)
    v43 = a2;
  else
    v43 = *(unsigned __int8 **)a2;
  if (byte_1023104CF < 0)
  {
    if (memcmp((const void *)xmmword_1023104B8, v43, *((size_t *)&xmmword_1023104B8 + 1)))
      goto LABEL_151;
LABEL_129:
    *(_DWORD *)(a1 + 40) = 4;
    goto LABEL_151;
  }
  if (!byte_1023104CF)
    goto LABEL_129;
  while (*(unsigned __int8 *)v40 == *v43)
  {
    v40 = (__int128 *)((char *)v40 + 1);
    ++v43;
    if (!--v41)
      goto LABEL_129;
  }
LABEL_151:
  sub_100008848((uint64_t)&v107, v108[0]);
  return a1;
}

void sub_1002630AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _QWORD *v25;

  if (a24 < 0)
    operator delete(__p);
  sub_10011A5A8(&a15);
  sub_100261F44((uint64_t)&a17);
  sub_100008848((uint64_t)&a12, a13);
  sub_10011A56C(v25);
  sub_100008848(v24, *(_QWORD **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1002631F8(uint64_t a1, unsigned __int8 *a2)
{
  void *__p;
  char v5;
  char v6;

  LOBYTE(__p) = 0;
  v6 = 0;
  sub_1002622E4(a1, a2, 0, &__p);
  if (v6 && v5 < 0)
    operator delete(__p);
  return a1;
}

void sub_10026324C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100263270(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  void *__p;
  char v6;
  char v7;

  LOBYTE(__p) = 0;
  v7 = 0;
  sub_1002622E4(a1, a2, a3, &__p);
  if (v7 && v6 < 0)
    operator delete(__p);
  return a1;
}

void sub_1002632C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002632E4(_QWORD *a1@<X8>)
{
  CFStringRef v2;
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v8;
  _BYTE v9[16];
  _QWORD v10[2];
  uint64_t v11;
  std::__shared_weak_count *v12;

  sub_1001E4804(&v11);
  sub_100119F3C(v10);
  v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceKernelFunction", 0x8000100u, kCFAllocatorNull);
  v3 = sub_100219D08(v11, (uint64_t)v2, v10);
  CFRelease(v2);
  if (v3)
  {
    sub_100525028(v9);
    sub_100524E68(a1, (uint64_t)v9);
    *a1 = &off_102131AB0;
    sub_10011A5A8(v9);
  }
  else
  {
    sub_1015A2E04(__p, "{\"type\" : 2, \"sigma\" : 0.625, \"power\" : 3.0}");
    sub_10038628C(a1, __p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  sub_10011A5A8(v10);
  v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_10026340C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  sub_10011A5A8(&a18);
  sub_100261F44(v18 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_100263460()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizerAlgorithm", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 1;
}

void sub_100263520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100263538()
{
  CFStringRef v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  sub_1001E4804(&v5);
  v4 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceDistanceReductionFunctionMinPercentile", 0x8000100u, kCFAllocatorNull);
  sub_1001FD9FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_100263600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100263618()
{
  CFStringRef v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  sub_1001E4804(&v5);
  v4 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceDistanceReductionFunctionMaxPercentile", 0x8000100u, kCFAllocatorNull);
  sub_1001FD9FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1002636E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002636F8()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDistanceFunctionType", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 4;
}

void sub_1002637BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002637D4@<X0>(_QWORD *result@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  if (!*((_BYTE *)result + 24))
    return sub_1015A2E04(a3, a2);
  if (*((char *)result + 23) < 0)
    return sub_100115CE4(a3, (void *)*result, result[1]);
  *(_OWORD *)a3 = *(_OWORD *)result;
  a3[2] = result[2];
  return result;
}

uint64_t sub_10026380C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

double sub_100263814(uint64_t a1)
{
  int v2;

  v2 = 0;
  return *(double *)sub_1000B5C9C(a1, &v2);
}

double sub_10026383C(uint64_t a1)
{
  int v2;

  v2 = 1;
  return *(double *)sub_1000B5C9C(a1, &v2);
}

_QWORD *sub_100263868@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_100524E68(a2, a1 + 24);
  *a2 = &off_102131AB0;
  return result;
}

uint64_t sub_1002638A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1002638A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  int v7;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = a1 + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < 4;
    if (v3 >= 4)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == a1 + 8 || *(int *)(v2 + 32) > 4)
    return 0;
  v7 = 4;
  return *sub_1000B5C9C(a1, &v7);
}

void sub_100263924(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100263950(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1002639A0(exception, a1);
}

void sub_10026398C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1002639A0(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

BOOL sub_1002639C4(uint64_t a1, uint64_t *a2, uint64_t a3, const char *a4)
{
  _BOOL8 result;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;
  char v13;

  result = sub_100635B3C(a1, a4);
  if (result)
  {
    if (a3)
    {
      v9 = *a2;
      v10 = 5;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      sub_10063A8D4(a1, a4, v9, (uint64_t)&v9);
    }
  }
  return result;
}

void sub_100263DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  if (a23 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a25);
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  sub_1018B38B4((uint64_t)&a63);
  _Unwind_Resume(a1);
}

uint64_t sub_100263E50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1 + 16;
  v3 = a1 + 24;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(v2 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_100263F54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::iostream::~basic_iostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100263F7C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  std::ostream::sentry::sentry(v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_1002640E0(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_100264084(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry(&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x100264064);
}

void sub_1002640CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1002640E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_10026421C(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_100264200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10026421C(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1002594D4();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_1002642C4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A0430);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A0430))
  {
    sub_100269A68((std::string *)&xmmword_1022A0418);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A0418, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A0430);
  }
  if (byte_1022A042F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A0418, *((unint64_t *)&xmmword_1022A0418 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A0418;
    *(_QWORD *)(a1 + 16) = unk_1022A0428;
  }
}

void sub_100264374(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0430);
  _Unwind_Resume(a1);
}

void sub_10026438C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A0450);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A0450))
  {
    sub_100269F44((std::string *)&xmmword_1022A0438);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A0438, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A0450);
  }
  if (byte_1022A044F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A0438, *((unint64_t *)&xmmword_1022A0438 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A0438;
    *(_QWORD *)(a1 + 16) = unk_1022A0448;
  }
}

void sub_10026443C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0450);
  _Unwind_Resume(a1);
}

void sub_100264454(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  NSObject *v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;

  v2 = sub_1000CC4F4(*(_QWORD *)a1);
  *(_BYTE *)(a1 + 8) = v2;
  if (!v2)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Database is not connected so we can't intialize our table", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    LOWORD(v14) = 0;
    v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Database is not connected so we can't intialize our table", &v14, 2);
    v8 = v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationRecordingLabelsTable::initTable()", "%s\n", v6);
LABEL_30:
    if (v8 != buf)
      free(v8);
    return;
  }
  sub_100634364(*(_QWORD *)a1, "MicroLocationLabels", (const char **)&off_10212A100, 0, 0);
  v3 = sub_100635B3C(*(_QWORD *)a1, "MicroLocationLabels");
  *(_BYTE *)(a1 + 8) = v3;
  if (v3)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    v4 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136380675;
      v17 = "MicroLocationLabels";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
      v14 = 136380675;
      v15 = "MicroLocationLabels";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Sucessfully created table if necessary: %{private}s", &v14, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationRecordingLabelsTable::initTable()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_1002649D0((uint64_t *)a1);
    return;
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  v9 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v17 = "MicroLocationLabels";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    v14 = 136446210;
    v15 = "MicroLocationLabels";
    v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Failed to create table: %{public}s", &v14, 12);
    v8 = v13;
    sub_100512490("Generic", 1, 0, 0, "void CLMicroLocationRecordingLabelsTable::initTable()", "%s\n", v12);
    goto LABEL_30;
  }
}

uint64_t sub_1002648A8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_100264454(a1);
  return a1;
}

uint64_t sub_1002648D4(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, double a7)
{
  __int128 v7;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  v7 = *a4;
  *(_QWORD *)(result + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(result + 16) = v7;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a6;
  *(double *)(result + 56) = a7;
  return result;
}

uint64_t sub_1002648FC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, double a6)
{
  __int128 v7;
  int32x2_t v8;
  int64x2_t v9;
  int8x16_t v11;
  char v12;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v7 = *a4;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v7;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(double *)(a1 + 56) = a6;
  sub_100357708(a5, (uint64_t)&v11);
  v8 = vdup_n_s32(v12 == 0);
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  *(int8x16_t *)(a1 + 40) = vandq_s8(v11, (int8x16_t)vcgezq_s64(vshlq_n_s64(v9, 0x3FuLL)));
  return a1;
}

void sub_1002649B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002649D0(uint64_t *a1)
{
  CFStringRef v2;
  int v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  NSObject *v39;
  void **v40;
  char *v41;
  NSObject *v42;
  const char *v44;
  char *v45;
  std::string v46;
  void *__p[2];
  unsigned __int8 v48;
  void *v49[2];
  unsigned __int8 v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  void *v62[2];
  int64_t v63;
  _BYTE v64[1624];

  if (sub_100635B3C(*a1, "MicroLocationRecordingLabels"))
  {
    sub_1001E4804(v64);
    LODWORD(v62[0]) = 0;
    v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLabelsTableMaxRowsToMigrate", 0x8000100u, kCFAllocatorNull);
    v3 = sub_1000B1180(*(uint64_t *)v64, (uint64_t)v2, v62);
    CFRelease(v2);
    v4 = v62[0];
    v5 = *(std::__shared_weak_count **)&v64[8];
    if (*(_QWORD *)&v64[8])
    {
      v6 = (unint64_t *)(*(_QWORD *)&v64[8] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v3)
      v8 = v4;
    else
      v8 = 250;
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = xmmword_101B980A0;
    strcpy(v51.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
    v9 = std::string::append(&v51, "MicroLocationLabels");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v52, " (");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_1002642C4((uint64_t)v49);
    if ((v50 & 0x80u) == 0)
      v13 = v49;
    else
      v13 = (void **)v49[0];
    if ((v50 & 0x80u) == 0)
      v14 = v50;
    else
      v14 = (std::string::size_type)v49[1];
    v15 = std::string::append(&v53, (const std::string::value_type *)v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v54, ") ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v55, "SELECT ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_1002642C4((uint64_t)__p);
    if ((v48 & 0x80u) == 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if ((v48 & 0x80u) == 0)
      v22 = v48;
    else
      v22 = (std::string::size_type)__p[1];
    v23 = std::string::append(&v56, (const std::string::value_type *)v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v57, " FROM ");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v58, "MicroLocationRecordingLabels");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v59, " ORDER BY ");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v60, "ReceivedTimestamp");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v61, " DESC LIMIT ");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    *(_QWORD *)&v64[16] = *((_QWORD *)&v33->__r_.__value_.__l + 2);
    *(_OWORD *)v64 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v46, v8);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v46;
    else
      v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      size = v46.__r_.__value_.__l.__size_;
    v37 = std::string::append((std::string *)v64, (const std::string::value_type *)v35, size);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v63 = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)v62 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if ((v64[23] & 0x80000000) != 0)
      operator delete(*(void **)v64);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if ((char)v48 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if ((char)v50 < 0)
      operator delete(v49[0]);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    v39 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      v40 = v62;
      if (v63 < 0)
        v40 = (void **)v62[0];
      *(_QWORD *)v64 = 68289282;
      *(_WORD *)&v64[8] = 2082;
      *(_QWORD *)&v64[10] = "";
      *(_WORD *)&v64[18] = 2082;
      *(_QWORD *)&v64[20] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Executing migration query\", \"Query: \":%{public, location:escape_only}s}", v64, 0x1Cu);
    }
    if (v63 >= 0)
      v41 = (char *)v62;
    else
      v41 = (char *)v62[0];
    sub_1000CDA68(*a1, v41);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  v42 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Previous recording labels table does not exist, no need to migrate", v64, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v64, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    LOWORD(v62[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, v64, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Previous recording labels table does not exist, no need to migrate", v62, 2);
    v45 = (char *)v44;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationRecordingLabelsTable::migratePreviousTableIfNecessary()", "%s\n", v44);
    if (v45 != v64)
      free(v45);
  }
  return 0;
}

void sub_100265408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  uint64_t v68;

  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  if (a68 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002655D0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string v41;
  void *__p[2];
  unsigned __int8 v43;
  std::string::value_type __s[8];
  char v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string __dst;
  std::string v54;
  std::string v55;
  std::string v56;

  *((_BYTE *)&v46.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v46, "SELECT * FROM (");
  v45 = 7;
  strcpy(__s, "SELECT ");
  v10 = std::string::append(&v46, __s, 7uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_1002642C4((uint64_t)__p);
  if ((v43 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v43 & 0x80u) == 0)
    v13 = v43;
  else
    v13 = (std::string::size_type)__p[1];
  v14 = std::string::append(&v47, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v48, " FROM ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a2 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a2;
  else
    v19 = *(const std::string::value_type **)a2;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  v21 = std::string::append(&v49, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v50, " ORDER BY ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v55, "ReceivedTimestamp");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v56, " DESC LIMIT ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v41, a3);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v41;
  else
    v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    size = v41.__r_.__value_.__l.__size_;
  v31 = std::string::append(&v51, (const std::string::value_type *)v29, size);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&__dst, ") ORDER BY ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = *(char *)(a4 + 23);
  if (v35 >= 0)
    v36 = (const std::string::value_type *)a4;
  else
    v36 = *(const std::string::value_type **)a4;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a4 + 23);
  else
    v37 = *(_QWORD *)(a4 + 8);
  v38 = std::string::append(&v54, v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if ((char)v43 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (v45 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v46.__r_.__value_.__l.__data_);
    if (!a5)
      goto LABEL_54;
  }
  else if (!a5)
  {
LABEL_54:
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v52;
    else
      v40 = (std::string *)v52.__r_.__value_.__r.__words[0];
    sub_1000CDA68(a1, (char *)v40);
  }
  std::string::append(&v52, " DESC");
  goto LABEL_54;
}

void sub_100265AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100265E48()
{
  __cxa_end_catch();
  JUMPOUT(0x100265C58);
}

void sub_100265E5C(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x100265C8CLL);
}

uint64_t sub_100265E6C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  void *v7;
  uint8_t buf[8];

  if (*(_BYTE *)(a1 + 8))
  {
    v1 = *(_QWORD *)a1;
    if (byte_102300EF7 >= 0)
      v2 = (char *)&xmmword_102300EE0;
    else
      v2 = (char *)xmmword_102300EE0;
    sub_1000CDA68(v1, v2);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    LOWORD(v7) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't insert or replace", &v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationRecordingLabelsTable::insertOrReplace(const std::vector<Entry> &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 0;
}

void sub_1002664D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::bad_cast a33)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 8))(a30);
  _Unwind_Resume(exception_object);
}

void sub_100266560(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  char *p_p;
  NSObject *v25;
  const char *v26;
  std::string *v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  __int128 __p;
  int64_t v36;
  _QWORD v37[4];
  std::string v38;
  std::string v39;

  if (*(_BYTE *)(a1 + 8))
  {
    memset(v37, 0, 24);
    *((_BYTE *)&v29.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&v29, "SELECT DISTINCT ");
    v6 = std::string::append(&v29, "ClientID");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v30, " FROM ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v31, "MicroLocationLabels");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v32, " WHERE ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v33, "ClientID");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v34, " != ''");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v38, " LIMIT ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a2);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v28;
    else
      v20 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      size = v28.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v39, (const std::string::value_type *)v20, size);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v36 = v22->__r_.__value_.__r.__words[2];
    __p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (v36 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(*(_QWORD *)a1, p_p);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  v25 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v39.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all client IDs", (uint8_t *)&v39, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v39, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    LOWORD(v37[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &v39, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't select all client IDs", v37, 2);
    v27 = (std::string *)v26;
    sub_100512490("Generic", 1, 0, 2, "std::vector<std::string> CLMicroLocationRecordingLabelsTable::selectAllClientIds(uint32_t)", "%s\n", v26);
    if (v27 != &v39)
      free(v27);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_100266A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100266D54(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  void **v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  void *__p[205];

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v27.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v27, "(SELECT * FROM ");
    v8 = std::string::append(&v27, "MicroLocationLabels");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v28, " WHERE ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v29, "ClientID");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v30, " LIKE '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)a2;
    else
      v17 = *(const std::string::value_type **)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    v19 = std::string::append(&v31, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v32, "')");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    __p[2] = (void *)v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v23 = *(_QWORD *)a1;
    sub_1015A2E04(&v32, "ReceivedTimestamp");
    sub_1002655D0(v23, (uint64_t)__p, a3, (uint64_t)&v32, 0);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  v24 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    LOWORD(v32.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't select all", &v32, 2);
    v26 = (void **)v25;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLMicroLocationRecordingLabelsTable::Entry> CLMicroLocationRecordingLabelsTable::selectRecordingLabelsForClient(const std::string &, uint32_t)", "%s\n", v25);
    if (v26 != __p)
      free(v26);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void sub_1002670DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  _Unwind_Resume(exception_object);
}

void sub_1002671A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  void **v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type size;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  uint64_t v56;
  NSObject *v57;
  const char *v58;
  std::string *v59;
  void *v60[2];
  char v61;
  void *__p[2];
  unsigned __int8 v63;
  void *v64[2];
  char v65;
  std::string::value_type __s[8];
  char v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  void *v87[4];
  std::string v88;
  _QWORD v89[2];

  v89[0] = a3;
  v89[1] = a4;
  if (*(_BYTE *)(a1 + 8))
  {
    std::to_string(&v88, a7);
    *((_BYTE *)&v68.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v68, "(SELECT * FROM ");
    v11 = std::string::append(&v68, "MicroLocationLabels");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v69, " WHERE ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v70, "ClientID");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v71, " LIKE '");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = *(char *)(a2 + 23);
    if (v19 >= 0)
      v20 = (const std::string::value_type *)a2;
    else
      v20 = *(const std::string::value_type **)a2;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 23);
    else
      v21 = *(_QWORD *)(a2 + 8);
    v22 = std::string::append(&v72, v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v73, "' AND ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v74, "TriggerUUID");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v67 = 4;
    strcpy(__s, " IN ");
    v28 = std::string::append(&v75, __s, 4uLL);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v65 = 9;
    strcpy((char *)v64, "( SELECT ");
    v30 = std::string::append(&v76, (const std::string::value_type *)v64, 9uLL);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v77, "TriggerUUID");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v78, " FROM ");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v79, "MicroLocationRecordingEvents");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v80, " WHERE ");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    sub_1015A2E04(v60, "RtLoiGroupId");
    sub_1002AAC84((const void **)v60, v89, (uint64_t)__p);
    if ((v63 & 0x80u) == 0)
      v40 = __p;
    else
      v40 = (void **)__p[0];
    if ((v63 & 0x80u) == 0)
      v41 = v63;
    else
      v41 = (std::string::size_type)__p[1];
    v42 = std::string::append(&v81, (const std::string::value_type *)v40, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v82, ") AND ");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v83, "ReceivedTimestamp");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = std::string::append(&v84, " > ");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v88;
    else
      v50 = (std::string *)v88.__r_.__value_.__r.__words[0];
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    else
      size = v88.__r_.__value_.__l.__size_;
    v52 = std::string::append(&v85, (const std::string::value_type *)v50, size);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&v86, ")");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v87[2] = (void *)v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)v87 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if ((char)v63 < 0)
      operator delete(__p[0]);
    if (v61 < 0)
      operator delete(v60[0]);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (v65 < 0)
      operator delete(v64[0]);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (v67 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    v56 = *(_QWORD *)a1;
    sub_1015A2E04(&v86, "ReceivedTimestamp");
    sub_1002655D0(v56, (uint64_t)v87, a5, (uint64_t)&v86, 1);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  v57 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v88.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all", (uint8_t *)&v88, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v88, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    LOWORD(v87[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &v88, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't select all", v87, 2);
    v59 = (std::string *)v58;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLMicroLocationRecordingLabelsTable::Entry> CLMicroLocationRecordingLabelsTable::selectRecordingLabelsForClientAtLoi(const std::string &, boost::uuids::uuid, uint32_t, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v58);
    if (v59 != &v88)
      free(v59);
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
}

void sub_1002678E4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_100267AD4()
{
  JUMPOUT(0x1002679CCLL);
}

void sub_100267ADC()
{
  JUMPOUT(0x1002679DCLL);
}

void sub_100267AE4()
{
  JUMPOUT(0x1002679ECLL);
}

void sub_100267AEC()
{
  JUMPOUT(0x1002679FCLL);
}

void sub_100267AF4()
{
  JUMPOUT(0x100267A0CLL);
}

void sub_100267AFC()
{
  JUMPOUT(0x100267A2CLL);
}

void sub_100267B04()
{
  JUMPOUT(0x100267A4CLL);
}

void sub_100267B0C()
{
  JUMPOUT(0x100267A5CLL);
}

void sub_100267B14()
{
  JUMPOUT(0x100267A6CLL);
}

void sub_100267B1C()
{
  JUMPOUT(0x100267A7CLL);
}

void sub_100267B24()
{
  JUMPOUT(0x100267A8CLL);
}

void sub_100267B2C()
{
  JUMPOUT(0x100267A9CLL);
}

void sub_100267B34()
{
  JUMPOUT(0x100267AACLL);
}

void sub_100267B3C()
{
  JUMPOUT(0x100267ACCLL);
}

uint64_t sub_100267B44(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  char *v32;
  NSObject *v33;
  const char *v35;
  std::string *v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  void *__p[2];
  int64_t v51;
  std::string v52;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v38.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v38, "DELETE FROM ");
    v4 = std::string::append(&v38, "MicroLocationLabels");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v39, " WHERE ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v40, "ReceivedTimestamp");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v41, " IN (");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v42, "SELECT ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v43, "ReceivedTimestamp");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v44, " FROM ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v45, "MicroLocationLabels");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v46, " ORDER BY ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v47, "ReceivedTimestamp");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v48, " LIMIT ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, a2);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v37;
    else
      v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v49, (const std::string::value_type *)v26, size);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v52, ")");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v51 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (v51 >= 0)
      v32 = (char *)__p;
    else
      v32 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)a1, v32);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  v33 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v52.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't deleteOldestRows", (uint8_t *)&v52, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v52, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &v52, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't deleteOldestRows", __p, 2);
    v36 = (std::string *)v35;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationRecordingLabelsTable::deleteOldestRows(uint64_t)", "%s\n", v35);
    if (v36 != &v52)
      free(v36);
  }
  return 0;
}

void sub_1002681BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  if (a66 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10026834C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t i;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  NSObject *v42;
  const char *v44;
  std::string *v45;
  std::string::value_type v46[8];
  char v47;
  std::string::value_type v48[8];
  char v49;
  std::string::value_type __s[8];
  char v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *a2;
    if (*a2 != a2[1])
    {
      *((_BYTE *)&v59.__r_.__value_.__s + 23) = 1;
      LOWORD(v59.__r_.__value_.__l.__data_) = 34;
      v5 = *(char *)(v3 + 23);
      if (v5 >= 0)
        v6 = (const std::string::value_type *)v3;
      else
        v6 = *(const std::string::value_type **)v3;
      if (v5 >= 0)
        v7 = *(unsigned __int8 *)(v3 + 23);
      else
        v7 = *(_QWORD *)(v3 + 8);
      v8 = std::string::append(&v59, v6, v7);
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v60, "\"");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      v12 = a2[1];
      for (i = *a2 + 24; i != v12; i += 24)
      {
        *((_BYTE *)&v57.__r_.__value_.__s + 23) = 1;
        LOWORD(v57.__r_.__value_.__l.__data_) = 44;
        v14 = std::string::append(&v57, "\"");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        v16 = *(char *)(i + 23);
        if (v16 >= 0)
          v17 = (const std::string::value_type *)i;
        else
          v17 = *(const std::string::value_type **)i;
        if (v16 >= 0)
          v18 = *(unsigned __int8 *)(i + 23);
        else
          v18 = *(_QWORD *)(i + 8);
        v19 = std::string::append(&v58, v17, v18);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        v21 = std::string::append(&v59, "\"");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v60;
        else
          v23 = (std::string *)v60.__r_.__value_.__r.__words[0];
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        else
          size = v60.__r_.__value_.__l.__size_;
        std::string::append(&v56, (const std::string::value_type *)v23, size);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v60.__r_.__value_.__l.__data_);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
      }
      *((_BYTE *)&v52.__r_.__value_.__s + 23) = 12;
      strcpy((char *)&v52, "DELETE FROM ");
      v25 = std::string::append(&v52, "MicroLocationLabels");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&v53, " WHERE ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v54, "ClientID");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      v51 = 4;
      strcpy(__s, " IN ");
      v31 = std::string::append(&v55, __s, 4uLL);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v49 = 1;
      strcpy(v48, "(");
      v33 = std::string::append(&v57, v48, 1uLL);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v56;
      else
        v35 = (std::string *)v56.__r_.__value_.__r.__words[0];
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      else
        v36 = v56.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v58, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      v47 = 1;
      strcpy(v46, ")");
      v39 = std::string::append(&v60, v46, 1uLL);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if (v47 < 0)
        operator delete(*(void **)v46);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (v49 < 0)
        operator delete(*(void **)v48);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (v51 < 0)
        operator delete(*(void **)__s);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v59;
      else
        v41 = (std::string *)v59.__r_.__value_.__r.__words[0];
      sub_1000CDA68(*(_QWORD *)a1, (char *)v41);
    }
    sub_1018ED968();
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  v42 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v60.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't delete recording labels", (uint8_t *)&v60, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v60, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    LOWORD(v59.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't delete recording labels", &v59, 2);
    v45 = (std::string *)v44;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationRecordingLabelsTable::deleteRecordingLabelsForClients(const std::vector<std::string> &)", "%s\n", v44);
    if (v45 != &v60)
      free(v45);
  }
  return 0;
}

void sub_100268A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  if (a55 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(a1);
}

void sub_100268C44(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100268C70(sqlite3_stmt *a1, int a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  char v6;
  void *__p[2];
  unsigned __int8 v8;

  sub_100268CFC(a1, a2, __p);
  v2 = v8;
  if ((v8 & 0x80u) == 0)
    v3 = (unsigned __int8 *)__p;
  else
    v3 = (unsigned __int8 *)__p[0];
  if ((v8 & 0x80u) != 0)
    v2 = (unint64_t)__p[1];
  v4 = sub_100268D2C((uint64_t)&v6, v3, &v3[v2]);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_100268CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100268CFC@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;

  v4 = (char *)sqlite3_column_text(a1, a2);
  if (!v4)
    sub_1018EDADC();
  return sub_1015A2E04(a3, v4);
}

uint64_t sub_100268D2C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  signed __int8 *v5;
  int v6;
  signed __int8 v7;
  uint64_t v8;
  int v9;
  signed __int8 v10;
  BOOL v11;
  signed __int8 v12;
  char v13;
  int v14;
  int v15;
  uint64_t v17;

  if (a2 == a3)
    goto LABEL_32;
  v5 = (signed __int8 *)(a2 + 1);
  v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v5 = (signed __int8 *)(a2 + 2);
    v7 = a2[1];
  }
  else
  {
    v7 = *a2;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    do
    {
      if ((_DWORD)v8 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3)
            goto LABEL_32;
          v9 = 1;
LABEL_22:
          v12 = *v5++;
          v7 = v12;
          goto LABEL_24;
        }
        v9 = 0;
      }
      else
      {
        v11 = (v8 & 0x7FFFFFFD) == 8 || (_DWORD)v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3)
            goto LABEL_32;
          goto LABEL_22;
        }
      }
LABEL_24:
      v13 = sub_100268F2C(a1, v7);
      *((_BYTE *)&v17 + v8) = v13;
      if (v5 == (signed __int8 *)a3)
        goto LABEL_32;
      v14 = *v5++;
      v7 = v14;
      *((_BYTE *)&v17 + v8++) = sub_100268F2C(a1, v14) | (16 * v13);
    }
    while (!v8);
    if (v8 == 16)
      break;
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v10 = *v5++;
    v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_100268EC8();
  }
  return v17;
}

void sub_100268EC8()
{
  int8x16_t v0;
  uint64_t v1;
  std::runtime_error v2;

  std::runtime_error::runtime_error(&v2, "invalid uuid string");
  v0.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Con"
                       "tents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/in"
                       "clude/boost/uuid/string_generator.hpp";
  v0.i64[1] = (uint64_t)"void boost::uuids::string_generator::throw_invalid() const";
  v1 = 192;
  sub_100269004(&v2, &v0);
}

void sub_100268F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  std::runtime_error::~runtime_error(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100268F2C(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  int v8;
  int v9;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A0410);
  if ((v2 & 1) == 0)
  {
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_1022A0410);
    a2 = v9;
    if (v8)
    {
      qword_1022A0408 = (uint64_t)&a0123456789abcd[(_QWORD)off_1022A0400];
      __cxa_guard_release(&qword_1022A0410);
      a2 = v9;
    }
  }
  v3 = qword_1022A0408;
  v4 = memchr("0123456789abcdefABCDEF", a2, qword_1022A0408 - (_QWORD)"0123456789abcdefABCDEF");
  if (v4)
    v5 = v4;
  else
    v5 = (_BYTE *)v3;
  v6 = v5 - "0123456789abcdefABCDEF";
  if (v6 >= (unint64_t)off_1022A0400)
    sub_100268EC8();
  return byte_101B980E9[v6];
}

void sub_100269004(const std::runtime_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_100269060((uint64_t)exception, a1, a2);
}

void sub_10026904C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100269060(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(_QWORD *)a1 = &off_10212A310;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_10212A298;
  *(_QWORD *)(a1 + 8) = off_10212A2C8;
  *(_QWORD *)(a1 + 24) = off_10212A2F0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t sub_1002690CC(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void sub_10026910C()
{
  operator new();
}

void sub_1002691D4()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_100269218(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_100269410((uint64_t)exception, a1);
}

void sub_100269254(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100269268(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete();
}

void sub_1002692B8(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_1002692F0(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  operator delete();
}

void sub_100269344(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_10026937C(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  operator delete();
}

uint64_t *sub_1002693D0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t sub_100269410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_10212A310;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_10212A298;
  *(_QWORD *)(a1 + 8) = off_10212A2C8;
  *(_QWORD *)(a1 + 24) = off_10212A2F0;
  return a1;
}

void sub_1002694AC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002694C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_10026958C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002695E0(uint64_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, double *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v6 = (a1[1] - *a1) >> 6;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58)
    sub_100259694();
  v12 = a1[2] - *a1;
  if (v12 >> 5 > v7)
    v7 = v12 >> 5;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
    v13 = 0x3FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)sub_1002697F0((uint64_t)(a1 + 2), v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[64 * v6];
  v20 = &v14[64 * v13];
  sub_1002696F4((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  v19 = v18 + 64;
  sub_10026977C(a1, &v17);
  v15 = a1[1];
  sub_100269954((uint64_t)&v17);
  return v15;
}

void sub_1002696E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100269954((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1002696F4(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, double *a6)
{
  __int128 v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 __dst;
  uint64_t v15;

  v9 = *a3;
  if (*((char *)a4 + 23) < 0)
  {
    v13 = *a3;
    sub_100115CE4(&__dst, *(void **)a4, *((_QWORD *)a4 + 1));
    v9 = v13;
  }
  else
  {
    __dst = *a4;
    v15 = *((_QWORD *)a4 + 2);
  }
  result = *a6;
  v11 = *a5;
  v12 = __dst;
  *(_OWORD *)a2 = v9;
  *(_OWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 40) = v11;
  *(double *)(a2 + 56) = result;
  return result;
}

uint64_t sub_10026977C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100269824((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1002697F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_10025955C();
  return operator new(a2 << 6);
}

uint64_t sub_100269824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      v8 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v9 = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 64;
      *((_QWORD *)&v15 + 1) -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_1002698DC((uint64_t)v12);
  return v10;
}

uint64_t sub_1002698DC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100269910(a1);
  return a1;
}

void sub_100269910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    v1 += 64;
  }
}

uint64_t sub_100269954(uint64_t a1)
{
  sub_100269988(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100269988(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 64;
      *(_QWORD *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_1002699DC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100269A1C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100269A1C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

double sub_100269A68@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  sub_100269AC8(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100269AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100269AC8(std::string *a1)
{
  sub_100269B04(a1);
  sub_100269BD4(a1);
  sub_100269CB0(a1);
  sub_100269D8C(a1);
  return sub_100269E68(a1);
}

uint64_t sub_100269B04(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "TriggerUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_100269BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100269BD4(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ClientID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_100269C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100269CB0(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LabelUUID");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_100269D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100269D8C(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ReceivedTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_100269E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100269E68(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_100269F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double sub_100269F44@<D0>(std::string *a1@<X8>)
{
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  void **v5;
  std::string::size_type v6;
  double result;
  std::string v8;
  void *__p[2];
  int64_t v10;
  std::string v11;

  sub_1015A2E04(&v11, "VALUES (");
  v2 = 5;
  do
  {
    if (v2 == 5)
    {
      *((_BYTE *)&v8.__r_.__value_.__s + 23) = 0;
      v8.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      *((_BYTE *)&v8.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v8, ", ");
    }
    v3 = std::string::append(&v8, "?");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v10 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if (v10 >= 0)
      v6 = HIBYTE(v10);
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append(&v11, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    --v2;
  }
  while (v2);
  std::string::append(&v11, ")");
  result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_10026A04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026A098(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v7[4];
  void *__p;
  char v9;
  uint64_t v10;
  std::string::value_type *v11;
  std::string::value_type *v12;

  sub_10026A170((uint64_t)v7);
  sub_10026A3C8(v7, a1);
  v5 = v4;
  if ((v4 & 1) != 0)
    sub_10026A8FC(a2, v11, v12, v12 - v11);
  std::ostream::~ostream(&v10);
  if (v9 < 0)
    operator delete(__p);
  std::streambuf::~streambuf(v7);
  return v5;
}

void sub_10026A12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (__cdecl **a9)(std::stringbuf *__hidden this), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::ostream::~ostream(&a25);
  if (a22 < 0)
    operator delete(__p);
  std::streambuf::~streambuf(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026A170(uint64_t a1)
{
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::streambuf::basic_streambuf(a1);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 24;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10212A360;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)a1);
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  *(_QWORD *)(a1 + 272) = a1 + 264;
  *(_QWORD *)(a1 + 280) = a1 + 266;
  return a1;
}

void sub_10026A210(void *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  sub_10024F88C(a1);
}

uint64_t sub_10026A22C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf(a1);
}

void sub_10026A26C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::streambuf::~streambuf(a1);
  operator delete();
}

_QWORD *sub_10026A2C0(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

double sub_10026A2D0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  if ((a4 & 0x10) != 0)
  {
    v7 = -1;
    goto LABEL_19;
  }
  v5 = a1[2];
  v6 = a1[4] - v5;
  if (!a3)
  {
    v7 = -1;
    if (a2 < 0 || v6 < a2)
      goto LABEL_19;
    v9 = v5 + a2;
LABEL_15:
    v8 = a1[4];
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    v7 = -1;
    v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6)
      goto LABEL_19;
    v9 = a1[3] + a2;
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    v9 = a1[3];
    goto LABEL_18;
  }
  v7 = -1;
  if ((a2 & 0x8000000000000000) == 0 && v6 >= a2)
  {
    v8 = a1[4];
    v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    v7 = v9 - v5;
  }
LABEL_19:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v7;
  return result;
}

double sub_10026A380@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if ((a3 & 0x10) == 0)
  {
    v4 = a1[2];
    v5 = *(_QWORD *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      v6 = v4 + v5;
      v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = -1;
  return result;
}

__n128 sub_10026A3C8(__n128 *a1, uint64_t a2)
{
  uint64_t *v4;
  std::ios_base *v5;
  __n128 result;

  v4 = &a1[6].n128_i64[1];
  v5 = (std::ios_base *)&a1[6].n128_i8[*(_QWORD *)(a1[6].n128_u64[1] - 24) + 8];
  v5->__exceptions_ = 1;
  std::ios_base::clear(v5, v5->__rdstate_);
  sub_10026A46C(v4, a2);
  result = *(__n128 *)(*(uint64_t *)((char *)v4 + *(_QWORD *)(a1[6].n128_u64[1] - 24) + 40) + 40);
  a1[17] = result;
  return result;
}

uint64_t *sub_10026A46C(uint64_t *a1, uint64_t a2)
{
  std::ios_base *v4;
  std::ios_base::fmtflags fmtflags;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const std::ios_base *v9;
  std::ios_base::fmtflags v10;
  std::ios_base::fmtflags v11;
  const std::locale::facet *v12;
  uint64_t v13;
  uint64_t v14;
  const std::ios_base *v15;
  const std::locale::facet *v16;
  std::ios_base::fmtflags v17;
  const std::locale::facet *v18;
  std::ios_base::fmtflags v19;
  unint64_t v20;
  const std::locale::facet *v21;
  char v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  std::ios_base::fmtflags v27;
  std::ios_base *v28;
  _BYTE v29[16];
  _BYTE v30[16];
  std::locale v31;

  v4 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  fmtflags = v4->__fmtflags_;
  sub_10026A7D4((uint64_t)v30, v4);
  std::ostream::sentry::sentry(v29, a1);
  if (v29[0])
  {
    v27 = fmtflags;
    v28 = v4;
    v6 = *a1;
    v7 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v8 = *((_QWORD *)v7 + 3);
    *((_QWORD *)v7 + 3) = 0;
    v9 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v6 - 24));
    v10 = v9->__fmtflags_;
    v11 = v9[1].__fmtflags_;
    if (v11 == -1)
    {
      std::ios_base::getloc(v9);
      v12 = std::locale::use_facet(&v31, &std::ctype<char>::id);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
      std::locale::~locale(&v31);
      v9[1].__fmtflags_ = v11;
    }
    if ((v10 & 0x90) != 0 && v8 >= 37)
    {
      v13 = v8 - 36;
      do
      {
        LOBYTE(v31.__locale_) = v11;
        sub_100263F7C(a1, (uint64_t)&v31, 1);
        --v13;
      }
      while (v13);
    }
    v14 = *a1;
    *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)a1 + *(_QWORD *)(v14 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(v14 - 24) + 8) & 0xFFFFFF4F | 0x80;
    v15 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v14 - 24));
    std::ios_base::getloc(v15);
    v25 = v10;
    v26 = v8;
    v16 = std::locale::use_facet(&v31, &std::ctype<char>::id);
    v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 48);
    std::locale::~locale(&v31);
    if (v15[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v15);
      v18 = std::locale::use_facet(&v31, &std::ctype<char>::id);
      v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
      std::locale::~locale(&v31);
      v15[1].__fmtflags_ = v19;
    }
    v20 = 0;
    v15[1].__fmtflags_ = v17;
    do
    {
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 2;
      std::ostream::operator<<(a1, *(unsigned __int8 *)(a2 + v20));
      if (v20 <= 9 && ((1 << v20) & 0x2A8) != 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        v21 = std::locale::use_facet(&v31, &std::ctype<char>::id);
        v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 45);
        std::locale::~locale(&v31);
        LOBYTE(v31.__locale_) = v22;
        sub_100263F7C(a1, (uint64_t)&v31, 1);
      }
      ++v20;
    }
    while (v20 != 16);
    if ((v25 & 0x20) != 0 && v26 >= 37)
    {
      v23 = v26 - 36;
      do
      {
        LOBYTE(v31.__locale_) = v11;
        sub_100263F7C(a1, (uint64_t)&v31, 1);
        --v23;
      }
      while (v23);
    }
    *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
    v4 = v28;
    fmtflags = v27;
  }
  std::ostream::sentry::~sentry(v29);
  sub_10026A86C((uint64_t)v30);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_10026A75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, std::locale a19)
{
  std::locale::~locale(&a19);
  std::ostream::sentry::~sentry(&a15);
  sub_10026A86C((uint64_t)&a17);
  *(_DWORD *)(a14 + 8) = a13;
  _Unwind_Resume(a1);
}

uint64_t sub_10026A7D4(uint64_t a1, std::ios_base *this)
{
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v5;
  std::locale v7;

  *(_QWORD *)a1 = this;
  fmtflags = this[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(this);
    v5 = std::locale::use_facet(&v7, &std::ctype<char>::id);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v7);
    this[1].__fmtflags_ = fmtflags;
  }
  *(_BYTE *)(a1 + 8) = fmtflags;
  return a1;
}

void sub_10026A858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_10026A86C(uint64_t a1)
{
  const std::ios_base *v1;
  std::ios_base::fmtflags v2;
  const std::locale::facet *v3;
  std::ios_base::fmtflags v4;
  std::locale v5;

  v1 = *(const std::ios_base **)a1;
  v2 = *(char *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)a1 + 144) == -1)
  {
    std::ios_base::getloc(*(const std::ios_base **)a1);
    v3 = std::locale::use_facet(&v5, &std::ctype<char>::id);
    v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32);
    std::locale::~locale(&v5);
    v1[1].__fmtflags_ = v4;
  }
  v1[1].__fmtflags_ = v2;
}

void sub_10026A8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_10026A8FC(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

void sub_10026A9C8(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_10026AA1C(exception, a1);
}

void sub_10026AA04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_10026AA1C(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&off_10212A310;
  a1->n128_u64[1] = (unint64_t)&off_10212A508;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&off_10212A490;
  a1->n128_u64[1] = (unint64_t)off_10212A4C0;
  a1[2].n128_u64[0] = (unint64_t)off_10212A4E8;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t sub_10026AA6C(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 40));
  std::bad_cast::~bad_cast((std::bad_cast *)(a1 + 8));
  return a1;
}

void sub_10026AAAC()
{
  operator new();
}

void sub_10026AB80()
{
  std::bad_cast *v0;

  std::bad_cast::~bad_cast(v0);
  operator delete();
}

void sub_10026ABC4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_10026ADAC((uint64_t)exception, a1);
}

void sub_10026AC00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10026AC14(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 40));
  std::bad_cast::~bad_cast((std::bad_cast *)(a1 + 8));
  operator delete();
}

void sub_10026AC64(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 32));
  std::bad_cast::~bad_cast((std::bad_cast *)a1);
}

void sub_10026AC9C(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 32));
  std::bad_cast::~bad_cast((std::bad_cast *)a1);
  operator delete();
}

const char *sub_10026ACF0()
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void sub_10026ACFC(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::bad_cast::~bad_cast((std::bad_cast *)a1 - 3);
}

void sub_10026AD34(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::bad_cast::~bad_cast((std::bad_cast *)a1 - 3);
  operator delete();
}

void sub_10026AD88(std::bad_cast *a1)
{
  std::bad_cast::~bad_cast(a1);
  operator delete();
}

uint64_t sub_10026ADAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_10212A310;
  *(_QWORD *)(a1 + 8) = &off_10212A508;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &off_10212A340;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_10212A490;
  *(_QWORD *)(a1 + 8) = off_10212A4C0;
  *(_QWORD *)(a1 + 32) = off_10212A4E8;
  return a1;
}

void sub_10026AE54(_Unwind_Exception *a1)
{
  std::bad_cast *v1;

  std::bad_cast::~bad_cast(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10026AE68(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_100074D44(a1, v15);
  v13 = a1[1];
  sub_100074DB8((uint64_t)v15);
  return v13;
}

void sub_10026AF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100074DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10026AF88(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x26u);
}

void sub_10026AFA8(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x26u);
}

void sub_10026AFBC(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x26u);
}

BOOL sub_10026AFD0()
{
  return os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT);
}

BOOL sub_10026AFE4()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 248), OS_LOG_TYPE_INFO);
}

BOOL sub_10026AFF4()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 248));
}

uint64_t sub_10026B000()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101B980A0;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  v0 = std::string::append(&v19, "MicroLocationLabels");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v20, " (");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_1002642C4((uint64_t)v17);
  if ((v18 & 0x80u) == 0)
    v4 = v17;
  else
    v4 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v5 = v18;
  else
    v5 = (std::string::size_type)v17[1];
  v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v22, ") ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_10026438C((uint64_t)__p);
  if ((v16 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v11 = v16;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_102300EF0 = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  xmmword_102300EE0 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300EE0, (void *)&_mh_execute_header);
}

void sub_10026B1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 25) < 0)
    operator delete(*(void **)(v40 - 48));
  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_10026B298(uint64_t a1@<X3>, _QWORD *a2@<X5>, _QWORD *a3@<X6>, _BYTE *a4@<X8>, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CFStringRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFStringRef v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CFStringRef v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v30;
  uint8_t buf[8];
  _BYTE v32[10];
  __int16 v33;
  uint64_t *v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  unint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  _BYTE v41[24];
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t v46[16];

  v44 = a7;
  v45 = a8;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A520);
  v10 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a5 + 23) >= 0)
      v11 = a5;
    else
      v11 = (uint64_t *)*a5;
    v12 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - *a2) >> 4);
    v13 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a3[1] - *a3) >> 4);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v32 = 2082;
    *(_QWORD *)&v32[2] = "";
    v33 = 2082;
    v34 = v11;
    v35 = 2050;
    v36 = v12;
    v37 = 2050;
    v38 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model with SelfTraining generation algorithm\", \"Client\":%{public, location:escape_only}s, \"Number of labeled recording triggers\":%{public}lu, \"Number of unlabeled recording triggers\":%{public}lu}", buf, 0x30u);
  }
  j__CFAbsoluteTimeGetCurrent();
  sub_1001E4804(buf);
  *(_DWORD *)v46 = 0;
  v14 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSemiSupervisedMaxNumIterations", 0x8000100u, kCFAllocatorNull);
  sub_1001C1194(*(uint64_t *)buf, (uint64_t)v14, v46);
  CFRelease(v14);
  v15 = *(std::__shared_weak_count **)v32;
  if (*(_QWORD *)v32)
  {
    v16 = (unint64_t *)(*(_QWORD *)v32 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_1001E4804(buf);
  *(_QWORD *)v46 = 0;
  v18 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSemiSupervisedStopProbabilityThreshold", 0x8000100u, kCFAllocatorNull);
  sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v18, v46);
  CFRelease(v18);
  v19 = *(std::__shared_weak_count **)v32;
  if (*(_QWORD *)v32)
  {
    v20 = (unint64_t *)(*(_QWORD *)v32 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_1001E4804(buf);
  *(_DWORD *)v46 = 0;
  v22 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSemiSupervisedNumSelfLearningSamplesPerIteration", 0x8000100u, kCFAllocatorNull);
  sub_1001C1194(*(uint64_t *)buf, (uint64_t)v22, v46);
  CFRelease(v22);
  v23 = *(std::__shared_weak_count **)v32;
  if (*(_QWORD *)v32)
  {
    v24 = (unint64_t *)(*(_QWORD *)v32 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  sub_1000B0C3C(&v30);
  *a4 = 0;
  a4[280] = 0;
  v42[0] = off_10212A660;
  v42[1] = sub_10038E2F0;
  v43 = v42;
  v26 = sub_10026D388();
  sub_100270E34((uint64_t)v41, a1);
  v27 = (uint64_t)v43;
  if (v43)
  {
    if (v43 == v42)
    {
      v40 = v39;
      (*(void (**)(uint64_t, _QWORD *))(v42[0] + 24))((uint64_t)v42, v39);
LABEL_28:
      sub_100338E28(v26);
    }
    v27 = (*(uint64_t (**)(void))(*v43 + 16))();
  }
  v40 = (_QWORD *)v27;
  goto LABEL_28;
}

void sub_10026CFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,unsigned int a59)
{
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;

  sub_1002C8104(&STACK[0x3F0]);
  sub_100067AC4((uint64_t)&a51);
  sub_10026E1B8((uint64_t)&STACK[0x220]);
  v60 = a57;
  a57 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (unint64_t *)STACK[0x3D8];
  if ((unint64_t *)STACK[0x3D8] == &STACK[0x3C0])
  {
    v62 = 4;
    v61 = &STACK[0x3C0];
  }
  else
  {
    if (!v61)
      goto LABEL_8;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_8:
  sub_1002708A4(a34);
  sub_1000B0D18(&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_10026D388()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDataSource", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 1;
}

void sub_10026D448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10026D460(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    sub_1002711D4((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 240;
        sub_100270CF0(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

_QWORD *sub_10026D4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char v6;
  CFStringRef v7;
  int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  CFStringRef v14;
  int v15;
  double v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  _OWORD *v43;
  void *v44;
  uint64_t j;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v55;
  __int128 v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  _BYTE *v60;
  uint64_t v61;
  void *v62[3];
  _OWORD *v63[2];
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _OWORD v68[2];
  int v69;
  __int128 v70;
  char v71;
  _QWORD v72[2];
  uint8_t buf[8];
  _BYTE __p[20];
  __int16 v75;
  unint64_t v76;
  _BYTE v77[24];
  _BYTE *v78;
  _BYTE v79[24];
  _BYTE *v80;
  _QWORD v81[3];
  _QWORD *v82;
  _QWORD v83[3];
  _QWORD *v84;

  v5 = sub_10026FA64();
  sub_100320440(v5, v72);
  if (sub_10026FB40())
  {
    sub_1002708EC((uint64_t)v68, a2 + 16);
    v70 = *(_OWORD *)(a2 + 56);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    LOBYTE(v68[0]) = 0;
  }
  v71 = v6;
  sub_1002984A8(v5);
  if (v71)
    sub_100067AC4((uint64_t)v68);
  sub_1001E4804(v68);
  LODWORD(v63[0]) = 0;
  v7 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLinkageFunction", 0x8000100u, kCFAllocatorNull);
  v8 = sub_1000B1180(*(uint64_t *)&v68[0], (uint64_t)v7, v63);
  CFRelease(v7);
  v9 = v63[0];
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v68[0] + 1);
  if (*((_QWORD *)&v68[0] + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v68[0] + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
    v13 = v9;
  else
    v13 = 1;
  sub_100298520(v13, v81);
  sub_1001E4804(v68);
  v63[0] = 0;
  v14 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPruneDistanceThresholdSemiSupervised", 0x8000100u, kCFAllocatorNull);
  v15 = sub_1001FD9FC(*(uint64_t *)&v68[0], (uint64_t)v14, v63);
  CFRelease(v14);
  v16 = *(double *)v63;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v68[0] + 1);
  if (*((_QWORD *)&v68[0] + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v68[0] + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (!v15)
    v16 = 0.075;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  memset(v68, 0, sizeof(v68));
  v69 = 1065353216;
  v20 = *(_QWORD *)(a2 + 232);
  for (i = *(_QWORD *)(a2 + 240); v20 != i; v20 += 32)
  {
    v63[0] = (_OWORD *)(v20 + 16);
    v22 = sub_1002741B8((uint64_t)v68, (_QWORD *)(v20 + 16), (uint64_t)&unk_101B9EB60, v63);
    v23 = v22[5];
    if (v23 >= v22[6])
    {
      v24 = sub_100274488(v22 + 4, *(_QWORD *)v20);
    }
    else
    {
      sub_100274594((uint64_t)(v22 + 6), v23, *(_QWORD *)v20);
      v24 = v23 + 192;
      v22[5] = v23 + 192;
    }
    v22[5] = v24;
  }
  sub_1002EF90C((_QWORD *)a2, (uint64_t)v63);
  v25 = v64;
  if (v64)
  {
    while (1)
    {
      *(_QWORD *)buf = v25 + 2;
      v26 = sub_1002741B8((uint64_t)v68, v25 + 2, (uint64_t)&unk_101B9EB60, (_OWORD **)buf);
      v27 = (uint64_t)v84;
      if (!v84)
        goto LABEL_30;
      if (v84 != v83)
        break;
      v80 = v79;
      (*(void (**)(_QWORD *, _BYTE *))(v83[0] + 24))(v83, v79);
LABEL_32:
      v28 = v26 + 4;
      sub_100274940((unint64_t *)buf, v26 + 4, (uint64_t)v79);
      v29 = (uint64_t)v82;
      if (!v82)
        goto LABEL_35;
      if (v82 != v81)
      {
        v29 = (*(uint64_t (**)(_QWORD *))(*v82 + 16))(v82);
LABEL_35:
        v78 = (_BYTE *)v29;
        goto LABEL_37;
      }
      v78 = v77;
      (*(void (**)(_QWORD *, _BYTE *))(v81[0] + 24))(v81, v77);
LABEL_37:
      sub_10025F258((char **)v62, (unint64_t *)buf, (uint64_t)v77);
      v30 = v78;
      if (v78 == v77)
      {
        v30 = v77;
        v31 = 4;
      }
      else
      {
        if (!v78)
          goto LABEL_42;
        v31 = 5;
      }
      (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_42:
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v32 = v80;
      if (v80 == v79)
      {
        v32 = v79;
        v33 = 4;
        goto LABEL_48;
      }
      if (v80)
      {
        v33 = 5;
LABEL_48:
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v34 = sub_10025F680((uint64_t *)v62, &v59, 0, v16, 0.0);
      *(_QWORD *)buf = 0;
      sub_100274CE0(&v57, v34, buf);
      v35 = v59;
      v36 = v57;
      if (v60 != v59)
      {
        v37 = 0;
        v38 = (v60 - (_BYTE *)v59) >> 3;
        if (v38 <= 1)
          v38 = 1;
        do
        {
          v36[v35[v37]] = v37;
          ++v37;
        }
        while (v38 != v37);
      }
      v39 = v58;
      if (v36 != v58)
      {
        v40 = v66;
        do
        {
          v41 = *v28 + 192 * *v36;
          if (v40 >= v67)
          {
            v40 = sub_100274D60(&v65, v41, (_OWORD *)v25 + 1);
          }
          else
          {
            sub_100274E84(v40, v41, (_OWORD *)v25 + 1);
            v40 += 208;
          }
          v66 = v40;
          ++v36;
        }
        while (v36 != v39);
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A520);
      v42 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        v43 = operator new(0x28uLL);
        v55 = v43;
        v56 = xmmword_101B97FF0;
        *v43 = 0u;
        v43[1] = 0u;
        *(_QWORD *)((char *)v43 + 29) = 0;
        sub_100261F9C((uint64_t)(v25 + 2), v43);
        v44 = &v55;
        if (v56 < 0)
          v44 = v55;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)__p = 2082;
        *(_QWORD *)&__p[2] = "";
        *(_WORD *)&__p[10] = 2082;
        *(_QWORD *)&__p[12] = v44;
        v75 = 2050;
        v76 = v34;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Post-Pruning Model\", \"ClusterId\":%{public, location:escape_only}s, \"numFPs\":%{public}lu}", buf, 0x26u);
        if (SHIBYTE(v56) < 0)
          operator delete(v55);
      }
      if (v57)
      {
        v58 = v57;
        operator delete(v57);
      }
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      if (v62[0])
      {
        v62[1] = v62[0];
        operator delete(v62[0]);
      }
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_73;
    }
    v27 = (*(uint64_t (**)(_QWORD *))(*v84 + 16))(v84);
LABEL_30:
    v80 = (_BYTE *)v27;
    goto LABEL_32;
  }
LABEL_73:
  sub_100067AC4((uint64_t)v63);
  v46 = *(_QWORD *)(a2 + 232);
  for (j = *(_QWORD *)(a2 + 240); j != v46; j = sub_100261F44(j - 32))
    ;
  *(_QWORD *)(a2 + 240) = v46;
  v47 = v65;
  v48 = v66;
  while (v47 != v48)
  {
    v49 = v47 + 192;
    sub_1002EEA94(a2, v47, (__int128 *)(v47 + 192), a3);
    v47 = v49 + 16;
  }
  sub_1002740B0((uint64_t)v68);
  *(_QWORD *)&v68[0] = &v65;
  sub_10027402C((void ***)v68);
  v50 = v82;
  if (v82 == v81)
  {
    v51 = 4;
    v50 = v81;
  }
  else
  {
    if (!v82)
      goto LABEL_84;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_84:
  v52 = v84;
  if (v84 == v83)
  {
    v53 = 4;
    v52 = v83;
    goto LABEL_88;
  }
  if (v84)
  {
    v53 = 5;
LABEL_88:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  return sub_10011A56C(v72);
}

void sub_10026DBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,int a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  sub_10011A56C(&a42);
  _Unwind_Resume(a1);
}

void sub_10026DDD4(uint64_t **a1@<X1>, unsigned int *a2@<X2>, uint64_t a3@<X8>)
{
  NSObject *v5;
  void *v6;
  int v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t *v15;
  NSObject *v16;
  uint64_t v17;
  _OWORD *v18;
  void *v19;
  _OWORD *v20;
  uint64_t *p_p;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  double v25;
  double v26;
  int v27;
  void *__p;
  __int128 v29;
  void *v30;
  __int128 v31;
  unsigned int v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  uint64_t *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  _BYTE v44[10];
  _DWORD v45[5];

  sub_1002ECF30((uint64_t)a2, a3);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A520);
  v5 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)*a2;
    v7 = *((char *)a1 + 23);
    v8 = (uint64_t **)*a1;
    v10 = *((_QWORD *)a2 + 29);
    v9 = *((_QWORD *)a2 + 30);
    v11 = sub_1002ED634((uint64_t)a2);
    v12 = a2[1];
    v13 = (uint64_t *)(v7 >= 0 ? a1 : v8);
    *(_DWORD *)buf = 68290307;
    v34 = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2050;
    v38 = v6;
    v39 = 2081;
    v40 = v13;
    v41 = 2049;
    v42 = (v9 - v10) >> 5;
    v43 = 2049;
    *(_QWORD *)v44 = v11;
    *(_WORD *)&v44[8] = 1025;
    v45[0] = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Semi-supervised model\", \"GenerationAlgorithm\":%{public}lu, \"Client\":%{private, location:escape_only}s, \"size\":%{private}lu, \"numClusters\":%{private}lu, \"type\":%{private}d}", buf, 0x40u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A520);
  }
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v15 = (uint64_t *)*((_QWORD *)a2 + 29);
    for (i = (uint64_t *)*((_QWORD *)a2 + 30); v15 != i; v15 += 4)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A520);
      v16 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        v17 = *v15;
        v18 = operator new(0x28uLL);
        v30 = v18;
        v31 = xmmword_101B97FF0;
        *v18 = 0u;
        v18[1] = 0u;
        *(_QWORD *)((char *)v18 + 29) = 0;
        sub_100261F9C(v17 + 40, v18);
        if (v31 >= 0)
          v19 = &v30;
        else
          v19 = v30;
        v20 = operator new(0x28uLL);
        __p = v20;
        v29 = xmmword_101B97FF0;
        *v20 = 0u;
        v20[1] = 0u;
        *(_QWORD *)((char *)v20 + 29) = 0;
        sub_100261F9C((uint64_t)(v15 + 2), v20);
        if (v29 >= 0)
          p_p = (uint64_t *)&__p;
        else
          p_p = (uint64_t *)__p;
        v22 = *v15;
        v23 = *(_QWORD *)(*v15 + 24);
        v32 = 1;
        v24 = sub_100270BB8((_QWORD *)(v22 + 104), &v32);
        if (v24)
          v25 = *((double *)v24 + 4) - *((double *)v24 + 3);
        else
          v25 = 0.0;
        v26 = *(double *)(*v15 + 152);
        v27 = (int)*(double *)(*v15 + 144);
        *(_DWORD *)buf = 68290563;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        v38 = v19;
        v39 = 2081;
        v40 = p_p;
        v41 = 2049;
        v42 = v23;
        v43 = 1025;
        *(_DWORD *)v44 = (int)v25;
        *(_WORD *)&v44[4] = 1025;
        *(_DWORD *)&v44[6] = v27;
        LOWORD(v45[0]) = 1025;
        *(_DWORD *)((char *)v45 + 2) = (int)v26;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"modelFingerprint\", \"recordingUUID\":%{private, location:escape_only}s, \"clusterUUID\":%{private, location:escape_only}s, \"size\":%{private}lu, \"duration\":%{private}d, \"start\":%{private}d, \"end\":%{private}d}", buf, 0x42u);
        if (SHIBYTE(v29) < 0)
          operator delete(__p);
        if (SHIBYTE(v31) < 0)
          operator delete(v30);
      }
    }
  }
}

void sub_10026E158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_1002C8104(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10026E1B8(uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  v2 = *(void **)(a1 + 304);
  if (v2)
  {
    *(_QWORD *)(a1 + 312) = v2;
    operator delete(v2);
  }
  sub_100270738(a1 + 256);
  v4 = (void **)(a1 + 232);
  sub_1002707B4(&v4);
  sub_100270824(a1 + 72);
  sub_100067AC4(a1 + 16);
  return a1;
}

void sub_10026E228(uint64_t a1@<X3>, _QWORD *a2@<X4>, uint64_t *a3@<X5>, __int128 **a4@<X6>, _BYTE *a5@<X8>, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD v27[3];
  _OWORD v28[2];
  int v29;
  _OWORD v30[2];
  int v31;
  _OWORD v32[2];
  int v33;
  _OWORD v34[2];
  int v35;
  uint8_t v36[8];
  uint8_t buf[8];
  __int16 v38;
  const char *v39;
  __int16 v40;
  uint64_t *v41;
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  _BYTE v46[24];
  _BYTE *v47;
  char v48[24];
  _QWORD v49[3];
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a8;
  v52 = a9;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A520);
  v13 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a6 + 23) >= 0)
      v14 = a6;
    else
      v14 = (uint64_t *)*a6;
    v15 = 0xEEEEEEEEEEEEEEEFLL * ((a3[1] - *a3) >> 4);
    v16 = 0xEEEEEEEEEEEEEEEFLL * (a4[1] - *a4);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v38 = 2082;
    v39 = "";
    v40 = 2082;
    v41 = v14;
    v42 = 2050;
    v43 = v15;
    v44 = 2050;
    v45 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model with BinaryRoi generation algorithm\", \"Client\":%{public, location:escape_only}s, \"Number of labeled recording triggers\":%{public}lu, \"Number of unlabeled recording triggers\":%{public}lu}", buf, 0x30u);
  }
  j__CFAbsoluteTimeGetCurrent();
  *a5 = 0;
  a5[280] = 0;
  v49[0] = off_10212A660;
  v49[1] = sub_10038E2F0;
  v50 = v49;
  memset(v34, 0, sizeof(v34));
  v35 = 1065353216;
  memset(v32, 0, sizeof(v32));
  v33 = 1065353216;
  v17 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v17)
  {
    v18 = (_QWORD *)(*a2 + 40);
    do
    {
      sub_100270E98((uint64_t)v34, v18, v18);
      *(_QWORD *)buf = v18 - 5;
      *((_OWORD *)sub_100273930((uint64_t)v32, v18 - 5, (uint64_t)&unk_101B9EB60, (_OWORD **)buf) + 2) = *(_OWORD *)v18;
      v19 = v18 + 3;
      v18 += 8;
    }
    while (v19 != v17);
  }
  memset(v30, 0, sizeof(v30));
  v31 = 1065353216;
  memset(v28, 0, sizeof(v28));
  v29 = 1065353216;
  v20 = *a3;
  v21 = a3[1];
  if (*a3 != v21)
  {
    do
    {
      sub_100270E98((uint64_t)v30, (_QWORD *)v20, (_OWORD *)v20);
      if (*(_BYTE *)(v20 + 232))
      {
        *(_QWORD *)buf = v20;
        *((_OWORD *)sub_100273930((uint64_t)v28, (_QWORD *)v20, (uint64_t)&unk_101B9EB60, (_OWORD **)buf) + 2) = *(_OWORD *)(v20 + 216);
      }
      v20 += 240;
    }
    while (v20 != v21);
  }
  memset(v27, 0, sizeof(v27));
  v22 = *a4;
  v23 = a4[1];
  *(_QWORD *)v36 = v27;
  while (v22 != v23)
  {
    if (!sub_1002710E8(v30, v22))
      sub_100273B88((uint64_t **)v36, v22);
    v22 += 15;
  }
  v24 = sub_10026D388();
  sub_100270E34((uint64_t)v48, a1);
  v25 = (uint64_t)v50;
  if (v50)
  {
    if (v50 == v49)
    {
      v47 = v46;
      (*(void (**)(_QWORD *, _BYTE *))(v49[0] + 24))(v49, v46);
LABEL_25:
      sub_100338E28(v24);
    }
    v25 = (*(uint64_t (**)(void))(*v50 + 16))();
  }
  v47 = (_BYTE *)v25;
  goto LABEL_25;
}

void sub_10026F6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;

  sub_1000B0D18((unsigned int *)&STACK[0x300]);
  sub_1002C8104(&a63);
  v65 = (unint64_t *)STACK[0x298];
  if ((unint64_t *)STACK[0x298] == &STACK[0x280])
  {
    v66 = 4;
    v65 = &STACK[0x280];
  }
  else
  {
    if (!v65)
      goto LABEL_6;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_6:
  sub_10011A56C(&a32);
  if (a31)
    (*(void (**)(uint64_t))(*(_QWORD *)a31 + 8))(a31);
  sub_10026E1B8((uint64_t)&STACK[0x310]);
  v67 = a35;
  a35 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  STACK[0x310] = (unint64_t)&a36;
  sub_100270C6C((void ***)&STACK[0x310]);
  sub_100067AC4((uint64_t)&a39);
  sub_100067AC4((uint64_t)&a45);
  sub_100067AC4((uint64_t)&a51);
  sub_100067AC4((uint64_t)&a57);
  v68 = *(_QWORD **)(v63 - 144);
  if (v68 == (_QWORD *)(v63 - 168))
  {
    v69 = 4;
    v68 = (_QWORD *)(v63 - 168);
  }
  else
  {
    if (!v68)
      goto LABEL_15;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_15:
  sub_1002708A4(a12);
  _Unwind_Resume(a1);
}

void sub_10026FA4C()
{
  JUMPOUT(0x10026F9ECLL);
}

void sub_10026FA58()
{
  JUMPOUT(0x10026F9FCLL);
}

uint64_t sub_10026FA64()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDistanceFunctionType", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 4;
}

void sub_10026FB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10026FB40()
{
  CFStringRef v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAdaptiveAnchorsEnable", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return 1;
  else
    return v1 ^ 1u;
}

void sub_10026FC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10026FC1C(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10026FC48(const std::runtime_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_10026FCA8((uint64_t)exception, a1, a2);
}

void sub_10026FC90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10026FCA8(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  std::runtime_error_vtbl *v6;

  *(_QWORD *)a1 = &off_10212A310;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)a1 = &off_10212A5B0;
  *(_QWORD *)(a1 + 8) = off_10212A5E0;
  v6 = a2[1].__vftable;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = off_10212A610;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 48) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t sub_10026FD28(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void sub_10026FD68()
{
  operator new();
}

void sub_10026FE48()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_10026FE8C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_100270068((uint64_t)exception, a1);
}

void sub_10026FEC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10026FEDC(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete();
}

void sub_10026FF2C(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_10026FF64(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  operator delete();
}

void sub_10026FFB8(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

void sub_10026FFF0(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  operator delete();
}

void sub_100270044(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

uint64_t sub_100270068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_10212A310;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_10212A630;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = &off_10212A340;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_10212A5B0;
  *(_QWORD *)(a1 + 8) = off_10212A5E0;
  *(_QWORD *)(a1 + 32) = off_10212A610;
  return a1;
}

void sub_10027011C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_100270130(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      v9 = *((_OWORD *)a2 + 2);
      *((_DWORD *)v8 + 12) = *((_DWORD *)a2 + 12);
      *((_OWORD *)v8 + 2) = v9;
      v10 = (uint64_t *)*v8;
      sub_100270234(a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v11 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_100270654(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_100270200(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_100270220(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_100270234(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t i;
  _QWORD *v6;

  v4 = 0;
  for (i = 16; i != 32; ++i)
    v4 ^= (v4 << 6) + (v4 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  a2[1] = v4;
  v6 = sub_1002702AC((uint64_t)a1, v4, a2 + 2);
  sub_10012923C(a1, a2, v6);
  return a2;
}

_QWORD *sub_1002702AC(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_100270404(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    if (v19 == a2)
    {
      v21 = v16[2] == *a3 && v16[3] == a3[1];
      v22 = v21;
    }
    else
    {
      v22 = 0;
    }
    v23 = v17 & !v22;
    v17 |= v22;
  }
  while (v23 != 1);
  return result;
}

void sub_100270404(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1002704E0(a1, prime);
  }
}

void sub_1002704E0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      sub_10025955C();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
              if (!v13)
                break;
            }
            while (i[2] == v13[2] && i[3] == v13[3]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_100270654(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  sub_1002706A8((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_100270234(a1, v4);
}

void sub_10027068C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1002706A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;

  v5 = a1 + 16;
  result = operator new(0x38uLL);
  v7 = 0;
  v8 = 0;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)result = 0;
  v9 = *(_OWORD *)(a2 + 16);
  result[1] = *(_OWORD *)a2;
  result[2] = v9;
  *((_QWORD *)result + 6) = *(_QWORD *)(a2 + 32);
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)result + v7++ + 16);
  while (v7 != 16);
  *((_QWORD *)result + 1) = v8;
  return result;
}

uint64_t sub_100270738(uint64_t a1)
{
  void *v2;

  sub_100270770(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100270770(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1002707B4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100261F44(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100270824(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(a1 + 72))
    {
      v3 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (v3)
        operator delete[]();
    }
    v4 = *(void **)(a1 + 24);
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v5;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t sub_1002708A4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 280))
  {
    if (*(_BYTE *)(a1 + 256) && *(char *)(a1 + 255) < 0)
      operator delete(*(void **)(a1 + 232));
    sub_1002C8104(a1 + 32);
  }
  return a1;
}

uint64_t sub_1002708EC(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_100270960(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_100270948(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100270960(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0;
  v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x38uLL);
  *v11 = 0;
  v11[1] = v7;
  v14 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v11 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v11 + 2) = v14;
  v11[6] = *(_QWORD *)(a3 + 32);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v11 = *v22;
LABEL_44:
    *v22 = v11;
    goto LABEL_45;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    v23 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_100270BA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100270BB8(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void sub_100270C6C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 240;
        sub_100270CF0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100270CF0(uint64_t a1, uint64_t a2)
{
  sub_1002DF2E0(a2 + 80);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
}

void sub_100270D2C()
{
  operator delete();
}

_QWORD *sub_100270D40(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10212A660;
  result[1] = v3;
  return result;
}

uint64_t sub_100270D78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10212A660;
  a2[1] = v2;
  return result;
}

uint64_t sub_100270D98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_100270DA0(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10212A6E0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100270DDC()
{
  return &off_10212A6E0;
}

BOOL sub_100270DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t sub_100270E34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *sub_100270E98(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0;
  v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_44:
    *v21 = i;
    goto LABEL_45;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1002710D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002710E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = 0;
  v3 = 0;
  do
    v3 ^= (v3 << 6) + (v3 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v2++);
  while (v2 != 16);
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3;
    if (v3 >= *(_QWORD *)&v4)
      v6 = v3 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & v3;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v9 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1])
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v4)
            v9 %= *(_QWORD *)&v4;
        }
        else
        {
          v9 &= *(_QWORD *)&v4 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

__int128 *sub_1002711D4(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  void **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      v8 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0)
        operator delete(*v8);
      v9 = *(__int128 *)((char *)v5 + 24);
      *(_QWORD *)(a4 + 40) = *((_QWORD *)v5 + 5);
      *(_OWORD *)v8 = v9;
      *((_BYTE *)v5 + 47) = 0;
      *((_BYTE *)v5 + 24) = 0;
      v10 = v5[3];
      *(_OWORD *)(a4 + 60) = *(__int128 *)((char *)v5 + 60);
      *(_OWORD *)(a4 + 48) = v10;
      sub_1002E0BA0(a4 + 80, (uint64_t)(v5 + 5));
      v11 = *(__int128 *)((char *)v5 + 216);
      *(_BYTE *)(a4 + 232) = *((_BYTE *)v5 + 232);
      *(_OWORD *)(a4 + 216) = v11;
      a4 += 240;
      v5 += 15;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_10027128C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 224;
        sub_100271310((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100271310(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 168);
  if (v3)
  {
    *(_QWORD *)(a2 + 176) = v3;
    operator delete(v3);
  }
  sub_100067AC4(a2 + 104);
  sub_100067AC4(a2 + 64);
  return sub_100271390(a2);
}

uint64_t sub_100271350(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  sub_100067AC4(a1 + 104);
  sub_100067AC4(a1 + 64);
  return sub_100271390(a1);
}

uint64_t sub_100271390(uint64_t a1)
{
  void *v2;

  sub_1002713C8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1002713C8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100271404((uint64_t)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100271404(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_10212A700[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_100271464(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_100271478(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x124924924924924)
    sub_100259694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v4) >> 5);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x92492492492492)
    v11 = 0x124924924924924;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_100272188(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[224 * v5];
  v18 = &v12[224 * v11];
  sub_10027159C((uint64_t)v16, a2, a3);
  v17 = v16 + 224;
  sub_100272114(a1, &v15);
  v13 = a1[1];
  sub_100272380(&v15);
  return v13;
}

void sub_100271588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100272380((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027159C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;

  v6 = sub_100271670(a1, a2);
  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  sub_100271B34(v6 + 64, a2 + 64);
  sub_100271DC4(a1 + 104, a2 + 104);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  sub_10027205C((_QWORD *)(a1 + 168), *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  v10 = a3[1];
  *(_OWORD *)(a1 + 192) = *a3;
  *(_OWORD *)(a1 + 208) = v10;
  return a1;
}

void sub_10027163C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100067AC4(v3);
  sub_100067AC4(v2);
  sub_100271390(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100271670(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    sub_1002716E4(a1, (uint64_t)(i + 2), (_OWORD *)i + 1);
  return a1;
}

void sub_1002716CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100271390(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002716E4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10038F5D0(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if ((sub_10038F62C(a1 + 32, (uint64_t)(v14 + 2), a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_100271964(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v14 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100271AF0((uint64_t)v25, 0);
  return v14;
}

void sub_10027194C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100271AF0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100271964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_OWORD *)v8 + 1) = *a3;
  result = sub_1002719DC((uint64_t)(v8 + 4), (uint64_t)(a3 + 1));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1002719C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100271AF0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1002719DC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_100271A20(a1, a2);
  return a1;
}

void sub_100271A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100271404(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100271A20(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_10212A700[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10212A718[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void sub_100271AAC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_100271AB8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void *sub_100271AC4(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_100271AF0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100271404((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_100271B34(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_100271BA8(a1, i + 4, i + 4);
  return a1;
}

void sub_100271B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100271BA8(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10012E444(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_100271DB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100271DC4(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_100271E38(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_100271E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100271E38(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(_QWORD *)(a3 + 16);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10012E444(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_100272048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10027205C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1002720D4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002720B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002720D4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_100259694();
  result = (char *)sub_100260634((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_100272114(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002721D0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100272188(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925)
    sub_10025955C();
  return operator new(224 * a2);
}

uint64_t sub_1002721D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 224;
      sub_100272274(v7 - 224, v9);
      v7 = *((_QWORD *)&v15 + 1) - 224;
      *((_QWORD *)&v15 + 1) -= 224;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_1002722FC((uint64_t)v12);
  return v10;
}

uint64_t sub_100272274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = sub_10012D080(a1, (uint64_t *)a2);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_10012D080(v4 + 64, (uint64_t *)(a2 + 64));
  sub_10012D080(a1 + 104, (uint64_t *)(a2 + 104));
  v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  v7 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v7;
  return a1;
}

uint64_t sub_1002722FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100272330((uint64_t *)a1);
  return a1;
}

uint64_t *sub_100272330(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_100271310(v3, v1);
      v1 += 224;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_100272380(void **a1)
{
  sub_1002723B0((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_1002723B0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 224;
      result = sub_100271310(v4, v1 - 224);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1002723F4(uint64_t result, char *a2, uint64_t a3, char a4)
{
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  double v18;
  char *v19;
  char *v20;
  unint64_t v21;
  double v22;
  char *v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v30;
  double v31;
  uint64_t v32;
  BOOL v33;
  double *v34;
  double v35;
  double *v36;
  double v37;
  unint64_t v38;
  char *v39;
  double v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  double v44;
  double v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _BYTE v93[64];
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  _BYTE v98[64];
  _BYTE v99[40];
  _BYTE v100[64];
  void *__p;
  void *v102;
  double v103;

  v7 = (_OWORD *)result;
LABEL_2:
  v8 = (uint64_t)(a2 - 224);
  v90 = (uint64_t)(a2 - 672);
  v91 = (uint64_t)(a2 - 448);
  v9 = (unint64_t)v7;
  v92 = a2;
  while (2)
  {
    v7 = (_OWORD *)v9;
    v10 = (uint64_t)&a2[-v9];
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a2[-v9] >> 5);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((double *)a2 - 2) > *((double *)v7 + 26))
        {
          result = sub_1002733A4((uint64_t)v7, v8);
          v46 = v7[13];
          *(_OWORD *)v98 = v7[12];
          v47 = *(_OWORD *)v98;
          *(_OWORD *)&v98[16] = v46;
          v48 = *(_OWORD *)(a2 - 20);
          v7[12] = *((_OWORD *)a2 - 2);
          *(_OWORD *)((char *)v7 + 204) = v48;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v98[12];
          *((_OWORD *)a2 - 2) = v47;
        }
        return result;
      case 3uLL:
        return sub_100272EB4((uint64_t)v7, (uint64_t)(v7 + 14), v8);
      case 4uLL:
        return sub_100273660(v7, v7 + 14, v7 + 28, v8);
      case 5uLL:
        result = sub_100273660(v7, v7 + 14, v7 + 28, (uint64_t)(v7 + 42));
        if (*((double *)a2 - 2) > *((double *)v7 + 110))
        {
          result = sub_1002733A4((uint64_t)(v7 + 42), v8);
          v49 = v7[55];
          *(_OWORD *)v98 = v7[54];
          v50 = *(_OWORD *)v98;
          *(_OWORD *)&v98[16] = v49;
          v51 = *(_OWORD *)(a2 - 20);
          v7[54] = *((_OWORD *)a2 - 2);
          *(_OWORD *)((char *)v7 + 876) = v51;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v98[12];
          *((_OWORD *)a2 - 2) = v50;
          if (*((double *)v7 + 110) > *((double *)v7 + 82))
          {
            result = sub_1002733A4((uint64_t)(v7 + 28), (uint64_t)(v7 + 42));
            v52 = v7[41];
            *(_OWORD *)v98 = v7[40];
            v53 = *(_OWORD *)v98;
            *(_OWORD *)&v98[16] = v52;
            v7[40] = v7[54];
            *(_OWORD *)((char *)v7 + 652) = *(_OWORD *)((char *)v7 + 876);
            v7[54] = v53;
            *(_OWORD *)((char *)v7 + 876) = *(_OWORD *)&v98[12];
            if (*((double *)v7 + 82) > *((double *)v7 + 54))
            {
              result = sub_1002733A4((uint64_t)(v7 + 14), (uint64_t)(v7 + 28));
              v54 = v7[27];
              *(_OWORD *)v98 = v7[26];
              v55 = *(_OWORD *)v98;
              *(_OWORD *)&v98[16] = v54;
              v7[26] = v7[40];
              *(_OWORD *)((char *)v7 + 428) = *(_OWORD *)((char *)v7 + 652);
              v7[40] = v55;
              *(_OWORD *)((char *)v7 + 652) = *(_OWORD *)&v98[12];
              if (*((double *)v7 + 54) > *((double *)v7 + 26))
              {
                result = sub_1002733A4((uint64_t)v7, (uint64_t)(v7 + 14));
                v56 = v7[13];
                *(_OWORD *)v98 = v7[12];
                v57 = *(_OWORD *)v98;
                *(_OWORD *)&v98[16] = v56;
                v7[12] = v7[26];
                *(_OWORD *)((char *)v7 + 204) = *(_OWORD *)((char *)v7 + 428);
                v7[26] = v57;
                *(_OWORD *)((char *)v7 + 428) = *(_OWORD *)&v98[12];
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 5375)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != (_OWORD *)a2)
            {
              v58 = (uint64_t)(v7 + 14);
              if (v7 + 14 != (_OWORD *)a2)
              {
                v59 = 0;
                v60 = (double *)v7;
                do
                {
                  v61 = v60[54];
                  v62 = v60[26];
                  v60 = (double *)v58;
                  if (v61 > v62)
                  {
                    sub_100272274((uint64_t)v98, v58);
                    v63 = v59;
                    while (1)
                    {
                      sub_100273790((uint64_t)v7 + v63 + 224, (uint64_t)v7 + v63);
                      if (!v63)
                        break;
                      v64 = *(double *)((char *)v7 + v63 - 16);
                      v63 -= 224;
                      if (v103 <= v64)
                      {
                        v65 = (uint64_t)v7 + v63 + 224;
                        goto LABEL_79;
                      }
                    }
                    v65 = (uint64_t)v7;
LABEL_79:
                    sub_100273790(v65, (uint64_t)v98);
                    if (__p)
                    {
                      v102 = __p;
                      operator delete(__p);
                    }
                    sub_100067AC4((uint64_t)v100);
                    sub_100067AC4((uint64_t)v99);
                    result = sub_100271390((uint64_t)v98);
                  }
                  v58 = (uint64_t)(v60 + 28);
                  v59 += 224;
                }
                while (v60 + 28 != (double *)a2);
              }
            }
          }
          else if (v7 != (_OWORD *)a2)
          {
            v86 = (uint64_t)(v7 + 14);
            if (v7 + 14 != (_OWORD *)a2)
            {
              do
              {
                v87 = v86;
                if (*((double *)v7 + 54) > *((double *)v7 + 26))
                {
                  sub_100272274((uint64_t)v98, v86);
                  do
                  {
                    sub_100273790((uint64_t)(v7 + 14), (uint64_t)v7);
                    v88 = v7 - 14;
                    v89 = *((double *)v7 - 2);
                    v7 -= 14;
                  }
                  while (v103 > v89);
                  sub_100273790((uint64_t)(v88 + 14), (uint64_t)v98);
                  if (__p)
                  {
                    v102 = __p;
                    operator delete(__p);
                  }
                  sub_100067AC4((uint64_t)v100);
                  sub_100067AC4((uint64_t)v99);
                  result = sub_100271390((uint64_t)v98);
                }
                v86 = v87 + 224;
                v7 = (_OWORD *)v87;
              }
              while ((char *)(v87 + 224) != a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != (_OWORD *)a2)
          {
            v66 = (v11 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = (uint64_t)&v7[14 * v69];
                if (2 * v67 + 2 < (uint64_t)v11 && *(double *)&v7[14 * v69 + 13] > *(double *)(v70 + 432))
                {
                  v70 += 224;
                  v69 = 2 * v67 + 2;
                }
                if (*(double *)(v70 + 208) <= *(double *)&v7[14 * v67 + 13])
                {
                  v71 = (uint64_t)&v7[14 * v67];
                  sub_100272274((uint64_t)v98, v71);
                  do
                  {
                    v72 = v70;
                    sub_100273790(v71, v70);
                    if (v66 < v69)
                      break;
                    v73 = (2 * v69) | 1;
                    v70 = (uint64_t)&v7[14 * v73];
                    if (2 * v69 + 2 < (uint64_t)v11 && *(double *)&v7[14 * v73 + 13] > *(double *)(v70 + 432))
                    {
                      v70 += 224;
                      v73 = 2 * v69 + 2;
                    }
                    v71 = v72;
                    v69 = v73;
                  }
                  while (*(double *)(v70 + 208) <= v103);
                  sub_100273790(v72, (uint64_t)v98);
                  if (__p)
                  {
                    v102 = __p;
                    operator delete(__p);
                  }
                  sub_100067AC4((uint64_t)v100);
                  sub_100067AC4((uint64_t)v99);
                  sub_100271390((uint64_t)v98);
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v74 = (((unint64_t)v10 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
            v75 = (uint64_t)v92;
            do
            {
              sub_100272274((uint64_t)v93, (uint64_t)v7);
              v76 = 0;
              v77 = (uint64_t)v7;
              do
              {
                v78 = v77;
                v79 = v76 + 1;
                v77 += 224 * (v76 + 1);
                v80 = 2 * v76;
                v76 = (2 * v76) | 1;
                v81 = v80 + 2;
                if (v81 < v74 && *(double *)(v78 + 224 * v79 + 208) > *(double *)(v77 + 432))
                {
                  v77 += 224;
                  v76 = v81;
                }
                sub_100273790(v78, v77);
              }
              while (v76 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
              v75 -= 224;
              if (v77 == v75)
              {
                sub_100273790(v77, (uint64_t)v93);
              }
              else
              {
                sub_100273790(v77, v75);
                sub_100273790(v75, (uint64_t)v93);
                v82 = v77 - (_QWORD)v7 + 224;
                if (v82 >= 225)
                {
                  v83 = (unint64_t)(((((unint64_t)v82 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                         - 2) >> 1;
                  if (*(double *)&v7[14 * v83 + 13] > *(double *)(v77 + 208))
                  {
                    sub_100272274((uint64_t)v98, v77);
                    do
                    {
                      v84 = v77;
                      v77 = (uint64_t)&v7[14 * v83];
                      sub_100273790(v84, v77);
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                    }
                    while (*(double *)&v7[14 * v83 + 13] > v103);
                    sub_100273790(v77, (uint64_t)v98);
                    if (__p)
                    {
                      v102 = __p;
                      operator delete(__p);
                    }
                    sub_100067AC4((uint64_t)v100);
                    sub_100067AC4((uint64_t)v99);
                    sub_100271390((uint64_t)v98);
                  }
                }
              }
              if (v96)
              {
                v97 = v96;
                operator delete(v96);
              }
              sub_100067AC4((uint64_t)&v95);
              sub_100067AC4((uint64_t)&v94);
              result = sub_100271390((uint64_t)v93);
            }
            while (v74-- > 2);
          }
          return result;
        }
        if ((unint64_t)v10 <= 0x7000)
        {
          sub_100272EB4((uint64_t)&v7[14 * (v11 >> 1)], (uint64_t)v7, v8);
        }
        else
        {
          sub_100272EB4((uint64_t)v7, (uint64_t)&v7[14 * (v11 >> 1)], v8);
          v12 = 14 * (v11 >> 1);
          v13 = &v7[v12];
          sub_100272EB4((uint64_t)(v7 + 14), (uint64_t)&v7[v12 - 14], v91);
          sub_100272EB4((uint64_t)(v7 + 28), (uint64_t)&v7[v12 + 14], v90);
          sub_100272EB4((uint64_t)&v7[v12 - 14], (uint64_t)&v7[v12], (uint64_t)&v7[v12 + 14]);
          sub_1002733A4((uint64_t)v7, (uint64_t)&v7[v12]);
          v14 = v7[13];
          *(_OWORD *)v98 = v7[12];
          v15 = *(_OWORD *)v98;
          *(_OWORD *)&v98[16] = v14;
          v16 = v7[v12 + 12];
          *(_OWORD *)((char *)v7 + 204) = *(_OWORD *)((char *)&v7[v12 + 12] + 12);
          v7[12] = v16;
          *(_OWORD *)((char *)v13 + 204) = *(_OWORD *)&v98[12];
          v13[12] = v15;
          a2 = v92;
        }
        --a3;
        if ((a4 & 1) == 0 && *((double *)v7 - 2) <= *((double *)v7 + 26))
        {
          sub_100272274((uint64_t)v98, (uint64_t)v7);
          if (v103 <= *((double *)a2 - 2))
          {
            v36 = (double *)(v7 + 14);
            do
            {
              v9 = (unint64_t)v36;
              if (v36 >= (double *)a2)
                break;
              v37 = v36[26];
              v36 += 28;
            }
            while (v103 <= v37);
          }
          else
          {
            v34 = (double *)v7;
            do
            {
              v9 = (unint64_t)(v34 + 28);
              v35 = v34[54];
              v34 += 28;
            }
            while (v103 <= v35);
          }
          v38 = (unint64_t)a2;
          if (v9 < (unint64_t)a2)
          {
            v39 = a2;
            do
            {
              v38 = (unint64_t)(v39 - 224);
              v40 = *((double *)v39 - 2);
              v39 -= 224;
            }
            while (v103 > v40);
          }
          while (v9 < v38)
          {
            sub_1002733A4(v9, v38);
            v41 = *(_OWORD *)(v9 + 208);
            *(_OWORD *)v93 = *(_OWORD *)(v9 + 192);
            v42 = *(_OWORD *)v93;
            *(_OWORD *)&v93[16] = v41;
            v43 = *(_OWORD *)(v38 + 204);
            *(_OWORD *)(v9 + 192) = *(_OWORD *)(v38 + 192);
            *(_OWORD *)(v9 + 204) = v43;
            *(_OWORD *)(v38 + 192) = v42;
            *(_OWORD *)(v38 + 204) = *(_OWORD *)&v93[12];
            do
            {
              v44 = *(double *)(v9 + 432);
              v9 += 224;
            }
            while (v103 <= v44);
            do
            {
              v45 = *(double *)(v38 - 16);
              v38 -= 224;
            }
            while (v103 > v45);
          }
          if ((_OWORD *)(v9 - 224) != v7)
            sub_100273790((uint64_t)v7, v9 - 224);
          sub_100273790(v9 - 224, (uint64_t)v98);
          if (__p)
          {
            v102 = __p;
            operator delete(__p);
          }
          sub_100067AC4((uint64_t)v100);
          sub_100067AC4((uint64_t)v99);
          result = sub_100271390((uint64_t)v98);
          a4 = 0;
          continue;
        }
        sub_100272274((uint64_t)v98, (uint64_t)v7);
        v17 = 0;
        do
        {
          v18 = *(double *)&v7[v17 + 27];
          v17 += 14;
        }
        while (v18 > v103);
        v19 = (char *)&v7[v17];
        v20 = a2;
        if (v17 == 14)
        {
          v23 = a2;
          while (v19 < v23)
          {
            v21 = (unint64_t)(v23 - 224);
            v24 = *((double *)v23 - 2);
            v23 -= 224;
            if (v24 > v103)
              goto LABEL_21;
          }
          v21 = (unint64_t)v23;
        }
        else
        {
          do
          {
            v21 = (unint64_t)(v20 - 224);
            v22 = *((double *)v20 - 2);
            v20 -= 224;
          }
          while (v22 <= v103);
        }
LABEL_21:
        if ((unint64_t)v19 >= v21)
        {
          v32 = (uint64_t)(v19 - 224);
        }
        else
        {
          v25 = (unint64_t)v19;
          v26 = v21;
          do
          {
            sub_1002733A4(v25, v26);
            v27 = *(_OWORD *)(v25 + 208);
            *(_OWORD *)v93 = *(_OWORD *)(v25 + 192);
            v28 = *(_OWORD *)v93;
            *(_OWORD *)&v93[16] = v27;
            v29 = *(_OWORD *)(v26 + 204);
            *(_OWORD *)(v25 + 192) = *(_OWORD *)(v26 + 192);
            *(_OWORD *)(v25 + 204) = v29;
            *(_OWORD *)(v26 + 192) = v28;
            *(_OWORD *)(v26 + 204) = *(_OWORD *)&v93[12];
            do
            {
              v30 = *(double *)(v25 + 432);
              v25 += 224;
            }
            while (v30 > v103);
            do
            {
              v31 = *(double *)(v26 - 16);
              v26 -= 224;
            }
            while (v31 <= v103);
          }
          while (v25 < v26);
          v32 = v25 - 224;
        }
        if ((_OWORD *)v32 != v7)
          sub_100273790((uint64_t)v7, v32);
        sub_100273790(v32, (uint64_t)v98);
        if (__p)
        {
          v102 = __p;
          operator delete(__p);
        }
        sub_100067AC4((uint64_t)v100);
        sub_100067AC4((uint64_t)v99);
        sub_100271390((uint64_t)v98);
        if ((unint64_t)v19 < v21)
        {
LABEL_36:
          result = sub_1002723F4(v7, v32, a3, a4 & 1);
          a4 = 0;
          v9 = v32 + 224;
          continue;
        }
        v33 = sub_10027304C(v7, (char *)v32);
        v9 = v32 + 224;
        result = sub_10027304C((_OWORD *)(v32 + 224), a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_36;
        }
        a2 = (char *)v32;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_100272EB4(uint64_t result, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  double v6;
  double v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[32];
  _BYTE v19[32];

  v5 = (_OWORD *)result;
  v6 = *(double *)(a2 + 208);
  v7 = *(double *)(a3 + 208);
  if (v6 <= *(double *)(result + 208))
  {
    if (v7 > v6)
    {
      result = sub_1002733A4(a2, a3);
      *(_OWORD *)v17 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 208);
      v11 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v11;
      *(_OWORD *)(a3 + 192) = *(_OWORD *)v17;
      *(_OWORD *)(a3 + 204) = *(_OWORD *)&v17[12];
      if (*(double *)(a2 + 208) > *((double *)v5 + 26))
      {
        result = sub_1002733A4((uint64_t)v5, a2);
        *(_OWORD *)v18 = v5[12];
        *(_OWORD *)&v18[16] = v5[13];
        v12 = *(_OWORD *)(a2 + 204);
        v5[12] = *(_OWORD *)(a2 + 192);
        *(_OWORD *)((char *)v5 + 204) = v12;
        *(_OWORD *)(a2 + 192) = *(_OWORD *)v18;
        *(_OWORD *)(a2 + 204) = *(_OWORD *)&v18[12];
      }
    }
  }
  else
  {
    v8 = (_OWORD *)(result + 192);
    if (v7 <= v6)
    {
      result = sub_1002733A4(result, a2);
      *(_OWORD *)v19 = *v8;
      v13 = *v8;
      *(_OWORD *)&v19[16] = v5[13];
      v14 = *(_OWORD *)(a2 + 204);
      *v8 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)((char *)v5 + 204) = v14;
      *(_OWORD *)(a2 + 192) = v13;
      *(_OWORD *)(a2 + 204) = *(_OWORD *)&v19[12];
      if (*(double *)(a3 + 208) <= *(double *)(a2 + 208))
        return result;
      result = sub_1002733A4(a2, a3);
      v9 = *(_OWORD *)(a2 + 192);
      *(_DWORD *)&v16[12] = HIDWORD(v9);
      *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 208);
      v15 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v15;
    }
    else
    {
      result = sub_1002733A4(result, a3);
      v9 = *v8;
      *(_OWORD *)v16 = *v8;
      *(_OWORD *)&v16[16] = v5[13];
      v10 = *(_OWORD *)(a3 + 204);
      *v8 = *(_OWORD *)(a3 + 192);
      *(_OWORD *)((char *)v5 + 204) = v10;
    }
    *(_OWORD *)(a3 + 192) = v9;
    *(_OWORD *)(a3 + 204) = *(_OWORD *)&v16[12];
  }
  return result;
}

BOOL sub_10027304C(_OWORD *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[64];
  uint64_t v26;
  uint64_t v27;
  void *__p;
  void *v29;
  double v30;

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - (char *)a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((double *)a2 - 2) > *((double *)a1 + 26))
      {
        sub_1002733A4((uint64_t)a1, (uint64_t)(a2 - 224));
        v6 = a1[13];
        *(_OWORD *)v25 = a1[12];
        v7 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v6;
        v8 = *(_OWORD *)(a2 - 20);
        a1[12] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 204) = v8;
        *((_OWORD *)a2 - 2) = v7;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        return 1;
      }
      return result;
    case 3:
      sub_100272EB4((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a2 - 224));
      return 1;
    case 4:
      sub_100273660(a1, a1 + 14, a1 + 28, (uint64_t)(a2 - 224));
      return 1;
    case 5:
      sub_100273660(a1, a1 + 14, a1 + 28, (uint64_t)(a1 + 42));
      if (*((double *)a2 - 2) > *((double *)a1 + 110))
      {
        sub_1002733A4((uint64_t)(a1 + 42), (uint64_t)(a2 - 224));
        v16 = a1[55];
        *(_OWORD *)v25 = a1[54];
        v17 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v16;
        v18 = *(_OWORD *)(a2 - 20);
        a1[54] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 876) = v18;
        *((_OWORD *)a2 - 2) = v17;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        if (*((double *)a1 + 110) > *((double *)a1 + 82))
        {
          sub_1002733A4((uint64_t)(a1 + 28), (uint64_t)(a1 + 42));
          v19 = a1[41];
          *(_OWORD *)v25 = a1[40];
          v20 = *(_OWORD *)v25;
          *(_OWORD *)&v25[16] = v19;
          a1[40] = a1[54];
          *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)((char *)a1 + 876);
          a1[54] = v20;
          *(_OWORD *)((char *)a1 + 876) = *(_OWORD *)&v25[12];
          if (*((double *)a1 + 82) > *((double *)a1 + 54))
          {
            sub_1002733A4((uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
            v21 = a1[27];
            *(_OWORD *)v25 = a1[26];
            v22 = *(_OWORD *)v25;
            *(_OWORD *)&v25[16] = v21;
            a1[26] = a1[40];
            *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)((char *)a1 + 652);
            a1[40] = v22;
            *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)&v25[12];
            if (*((double *)a1 + 54) > *((double *)a1 + 26))
            {
              sub_1002733A4((uint64_t)a1, (uint64_t)(a1 + 14));
              v23 = a1[13];
              *(_OWORD *)v25 = a1[12];
              v24 = *(_OWORD *)v25;
              *(_OWORD *)&v25[16] = v23;
              a1[12] = a1[26];
              *(_OWORD *)((char *)a1 + 204) = *(_OWORD *)((char *)a1 + 428);
              a1[26] = v24;
              *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)&v25[12];
            }
          }
        }
      }
      return 1;
    default:
      v9 = (double *)(a1 + 28);
      sub_100272EB4((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
      v10 = (uint64_t)(a1 + 42);
      if (a1 + 42 == (_OWORD *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (*(double *)(v10 + 208) > v9[26])
    {
      sub_100272274((uint64_t)v25, v10);
      v13 = v11;
      while (1)
      {
        sub_100273790((uint64_t)a1 + v13 + 672, (uint64_t)a1 + v13 + 448);
        if (v13 == -448)
          break;
        v14 = *(double *)((char *)a1 + v13 + 432);
        v13 -= 224;
        if (v30 <= v14)
        {
          v15 = (uint64_t)a1 + v13 + 672;
          goto LABEL_12;
        }
      }
      v15 = (uint64_t)a1;
LABEL_12:
      sub_100273790(v15, (uint64_t)v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      ++v12;
      sub_100067AC4((uint64_t)&v27);
      sub_100067AC4((uint64_t)&v26);
      sub_100271390((uint64_t)v25);
      if (v12 == 8)
        return v10 + 224 == (_QWORD)a2;
    }
    v9 = (double *)v10;
    v11 += 224;
    v10 += 224;
    if ((char *)v10 == a2)
      return 1;
  }
}

uint64_t sub_1002733A4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  uint64_t v8[5];
  __int128 v9;
  uint64_t v10;
  uint64_t v11[5];
  uint64_t v12[5];
  __int128 v13;
  int v14;
  __int128 v15;
  uint64_t v16;

  sub_10012D080((uint64_t)v8, (uint64_t *)a1);
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  sub_10012D080((uint64_t)v11, (uint64_t *)(a1 + 64));
  sub_10012D080((uint64_t)v12, (uint64_t *)(a1 + 104));
  v13 = *(_OWORD *)(a1 + 144);
  v14 = *(_DWORD *)(a1 + 160);
  v15 = *(_OWORD *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  sub_10027356C(a1, (uint64_t *)a2);
  v4 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  sub_1000A6464(a1 + 64, (uint64_t *)(a2 + 64));
  sub_1000A6464(a1 + 104, (uint64_t *)(a2 + 104));
  v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  sub_100006898(a1 + 168, (__n128 *)(a2 + 168));
  sub_10027356C(a2, v8);
  *(_OWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 56) = v10;
  sub_1000A6464(a2 + 64, v11);
  sub_1000A6464(a2 + 104, v12);
  *(_OWORD *)(a2 + 144) = v13;
  *(_DWORD *)(a2 + 160) = v14;
  v6 = *(void **)(a2 + 168);
  if (v6)
  {
    *(_QWORD *)(a2 + 176) = v6;
    operator delete(v6);
  }
  *(_OWORD *)(a2 + 168) = v15;
  *(_QWORD *)(a2 + 184) = v16;
  v16 = 0;
  v15 = 0uLL;
  sub_100067AC4((uint64_t)v12);
  sub_100067AC4((uint64_t)v11);
  return sub_100271390((uint64_t)v8);
}

void sub_10027356C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_10027360C(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_10027360C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1002713C8(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t sub_100273660(_OWORD *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];
  _BYTE v13[32];
  _BYTE v14[32];

  result = sub_100272EB4((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  if (*(double *)(a4 + 208) > *((double *)a3 + 26))
  {
    result = sub_1002733A4((uint64_t)a3, a4);
    *(_OWORD *)v12 = a3[12];
    *(_OWORD *)&v12[16] = a3[13];
    v9 = *(_OWORD *)(a4 + 204);
    a3[12] = *(_OWORD *)(a4 + 192);
    *(_OWORD *)((char *)a3 + 204) = v9;
    *(_OWORD *)(a4 + 192) = *(_OWORD *)v12;
    *(_OWORD *)(a4 + 204) = *(_OWORD *)&v12[12];
    if (*((double *)a3 + 26) > *((double *)a2 + 26))
    {
      result = sub_1002733A4((uint64_t)a2, (uint64_t)a3);
      *(_OWORD *)v13 = a2[12];
      *(_OWORD *)&v13[16] = a2[13];
      v10 = *(_OWORD *)((char *)a3 + 204);
      a2[12] = a3[12];
      *(_OWORD *)((char *)a2 + 204) = v10;
      a3[12] = *(_OWORD *)v13;
      *(_OWORD *)((char *)a3 + 204) = *(_OWORD *)&v13[12];
      if (*((double *)a2 + 26) > *((double *)a1 + 26))
      {
        result = sub_1002733A4((uint64_t)a1, (uint64_t)a2);
        *(_OWORD *)v14 = a1[12];
        *(_OWORD *)&v14[16] = a1[13];
        v11 = *(_OWORD *)((char *)a2 + 204);
        a1[12] = a2[12];
        *(_OWORD *)((char *)a1 + 204) = v11;
        a2[12] = *(_OWORD *)v14;
        *(_OWORD *)((char *)a2 + 204) = *(_OWORD *)&v14[12];
      }
    }
  }
  return result;
}

uint64_t sub_100273790(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  sub_10027356C(a1, (uint64_t *)a2);
  v4 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  sub_1000A6464(a1 + 64, (uint64_t *)(a2 + 64));
  sub_1000A6464(a1 + 104, (uint64_t *)(a2 + 104));
  v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  sub_100006898(a1 + 168, (__n128 *)(a2 + 168));
  v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 204) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 192) = v6;
  return a1;
}

uint64_t sub_10027380C(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 280))
  {
    v1 = result;
    if (*(_BYTE *)(result + 256))
    {
      if (*(char *)(result + 255) < 0)
        operator delete(*(void **)(result + 232));
    }
    result = sub_1002C8104(v1 + 32);
    *(_BYTE *)(v1 + 280) = 0;
  }
  return result;
}

uint64_t sub_100273854(uint64_t a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  void *__p[2];
  uint64_t v14;
  char v15;

  v9 = *a2;
  v10 = a2[1];
  v11 = *a3;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v14 = *(_QWORD *)(a5 + 16);
  }
  v15 = 1;
  sub_1003A828C(a1, v9, v10, a4, (uint64_t)__p, *a6, a6[1], v11);
  if (v15 && SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_10027390C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100273930(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_44:
    *v22 = i;
    goto LABEL_45;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_100273B74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_100273B88(uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (*a1)[1];
  v5 = *a1;
  v7 = v5[2];
  v6 = (uint64_t)(v5 + 2);
  if (v4 >= v7)
  {
    v8 = sub_100273BF8(v3, a2);
  }
  else
  {
    sub_100273D04(v6, v4, a2);
    v8 = v4 + 240;
    v3[1] = v4 + 240;
  }
  v3[1] = v8;
  return a1;
}

void sub_100273BF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100273BF8(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x111111111111111)
    sub_100259694();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888)
    v6 = 0x111111111111111;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100273E28((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[240 * v3];
  v13 = &v7[240 * v6];
  sub_100273D04((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 240;
  sub_100273DB4(a1, &v10);
  v8 = a1[1];
  sub_100273FB8(&v10);
  return v8;
}

void sub_100273CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100273FB8((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_100273D04(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  v5 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v5;
  v6 = (_BYTE *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_100115CE4(v6, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
    *(_OWORD *)v6 = v7;
  }
  v8 = a3[3];
  *(_OWORD *)(a2 + 60) = *(__int128 *)((char *)a3 + 60);
  *(_OWORD *)(a2 + 48) = v8;
  sub_1002DF194(a2 + 80);
  result = *(__n128 *)((char *)a3 + 216);
  *(_BYTE *)(a2 + 232) = *((_BYTE *)a3 + 232);
  *(__n128 *)(a2 + 216) = result;
  return result;
}

void sub_100273D98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100273DB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100273E6C((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100273E28(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112)
    sub_10025955C();
  return operator new(240 * a2);
}

uint64_t sub_100273E6C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 15;
      sub_100273D04(a1, v7 - 240, v9);
      v7 = *((_QWORD *)&v16 + 1) - 240;
      *((_QWORD *)&v16 + 1) -= 240;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_100273F34((uint64_t)v13);
  return v11;
}

void sub_100273F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100273F34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100273F34(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100273F68((uint64_t *)a1);
  return a1;
}

void sub_100273F68(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_100270CF0(v3, v1);
      v1 += 240;
    }
    while (v1 != v2);
  }
}

void **sub_100273FB8(void **a1)
{
  sub_100273FE8(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100273FE8(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 240;
    sub_100270CF0(v4, i - 240);
  }
}

void sub_10027402C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 208;
        sub_100271310((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1002740B0(uint64_t a1)
{
  void *v2;

  sub_1002740E8(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1002740E8(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 32);
      sub_100274134(&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100274134(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        sub_100271310((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1002741B8(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_44:
    *v23 = i;
    goto LABEL_45;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_100274424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_100274440(v11, v10);
  _Unwind_Resume(a1);
}

void sub_100274440(uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 4;
    sub_100274134(&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_100274488(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555)
    sub_100259694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL)
    v6 = 0x155555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1002746CC((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[192 * v3];
  v13 = &v7[192 * v6];
  sub_100274594((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 192;
  sub_100274658(a1, &v10);
  v8 = a1[1];
  sub_1002748CC(&v10);
  return v8;
}

void sub_100274580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002748CC((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100274594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  int v7;

  sub_100271670(a2, a3);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  sub_100271B34(a2 + 64, a3 + 64);
  sub_100271DC4(a2 + 104, a3 + 104);
  v6 = *(_OWORD *)(a3 + 144);
  v7 = *(_DWORD *)(a3 + 160);
  *(_QWORD *)(a2 + 168) = 0;
  *(_DWORD *)(a2 + 160) = v7;
  *(_OWORD *)(a2 + 144) = v6;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  return sub_10027205C((_QWORD *)(a2 + 168), *(const void **)(a3 + 168), *(_QWORD *)(a3 + 176), (uint64_t)(*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
}

void sub_100274624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100067AC4(v3);
  sub_100067AC4(v2);
  sub_100271390(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100274658(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100274710((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1002746CC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556)
    sub_10025955C();
  return operator new(192 * a2);
}

uint64_t sub_100274710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 192;
      sub_1002747C4(a1, v7 - 192, v9);
      v7 = *((_QWORD *)&v16 + 1) - 192;
      *((_QWORD *)&v16 + 1) -= 192;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_100274848((uint64_t)v13);
  return v11;
}

__n128 sub_1002747C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __n128 result;

  sub_10012D080(a2, (uint64_t *)a3);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  sub_10012D080(a2 + 64, (uint64_t *)(a3 + 64));
  sub_10012D080(a2 + 104, (uint64_t *)(a3 + 104));
  v6 = *(_OWORD *)(a3 + 144);
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 144) = v6;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  result = *(__n128 *)(a3 + 168);
  *(__n128 *)(a2 + 168) = result;
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
  *(_QWORD *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  return result;
}

uint64_t sub_100274848(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10027487C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_10027487C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_100271310(v3, v1);
      v1 += 192;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_1002748CC(void **a1)
{
  sub_1002748FC((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_1002748FC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 192;
      result = sub_100271310(v4, v1 - 192);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

unint64_t *sub_100274940(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  _DWORD v22[10];
  __int128 v23;
  uint64_t v24;
  _BYTE v25[40];
  _BYTE v26[56];
  int v27;
  void *__p;
  void *v29;
  uint64_t v30;

  a1[1] = 0;
  v6 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6);
  *a1 = v7;
  v22[0] = 0;
  sub_100274BA0((uint64_t)(a1 + 1), (v7 + v7 * v7) >> 1, v22);
  if (*a1)
  {
    v8 = 0;
    do
    {
      v9 = *a2;
      sub_100271670((uint64_t)v22, *a2 + 192 * v8);
      v10 = v9 + 192 * v8;
      v11 = *(_OWORD *)(v10 + 40);
      v24 = *(_QWORD *)(v10 + 56);
      v23 = v11;
      sub_100271B34((uint64_t)v25, v10 + 64);
      sub_100271DC4((uint64_t)v26, v9 + 192 * v8 + 104);
      v12 = v9 + 192 * v8;
      v13 = *(_OWORD *)(v12 + 144);
      v27 = *(_DWORD *)(v12 + 160);
      *(_OWORD *)&v26[40] = v13;
      v29 = 0;
      v30 = 0;
      __p = 0;
      sub_10027205C(&__p, *(const void **)(v12 + 168), *(_QWORD *)(v12 + 176), (uint64_t)(*(_QWORD *)(v12 + 176) - *(_QWORD *)(v12 + 168)) >> 2);
      if (v8)
      {
        v14 = 0;
        for (i = 0; i != v8; ++i)
        {
          v16 = *(_QWORD *)(a3 + 24);
          if (!v16)
            sub_10025FD1C();
          (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v16 + 48))(v16, v22, *a2 + v14);
          if (v8 <= i)
            v18 = i;
          else
            v18 = v8;
          if (v8 >= i)
            v19 = i;
          else
            v19 = v8;
          v20 = v17;
          *(float *)(*v6 + 4 * (v19 + ((v18 + v18 * v18) >> 1))) = v20;
          v14 += 192;
        }
      }
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      sub_100067AC4((uint64_t)v26);
      sub_100067AC4((uint64_t)v25);
      sub_100271390((uint64_t)v22);
      ++v8;
    }
    while (v8 < *a1);
  }
  return a1;
}

void sub_100274B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void **v13;
  uint64_t v14;
  void *v16;

  v16 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v14 + 16) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100274BA0(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_100274BD0((void **)a1, a2 - v3, a3);
  }
}

void sub_100274BD0(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      sub_100259694();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_100260634(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *sub_100274CE0(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10025E660(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100274D44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100274D60(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL)
    sub_100259694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x9D89D89D89D89DLL)
    v11 = 0x13B13B13B13B13BLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_100274FCC(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[208 * v5];
  v18 = &v12[208 * v11];
  sub_100274E84((uint64_t)v16, a2, a3);
  v17 = v16 + 208;
  sub_100274F58(a1, &v15);
  v13 = a1[1];
  sub_1002751C4(&v15);
  return v13;
}

void sub_100274E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002751C4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100274E84(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v6 = sub_100271670(a1, a2);
  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  sub_100271B34(v6 + 64, a2 + 64);
  sub_100271DC4(a1 + 104, a2 + 104);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  sub_10027205C((_QWORD *)(a1 + 168), *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  *(_OWORD *)(a1 + 192) = *a3;
  return a1;
}

void sub_100274F24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100067AC4(v3);
  sub_100067AC4(v2);
  sub_100271390(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100274F58(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100275014((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100274FCC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL)
    sub_10025955C();
  return operator new(208 * a2);
}

uint64_t sub_100275014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 208;
      sub_1002750B8(v7 - 208, v9);
      v7 = *((_QWORD *)&v15 + 1) - 208;
      *((_QWORD *)&v15 + 1) -= 208;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_100275140((uint64_t)v12);
  return v10;
}

uint64_t sub_1002750B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = sub_10012D080(a1, (uint64_t *)a2);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_10012D080(v4 + 64, (uint64_t *)(a2 + 64));
  sub_10012D080(a1 + 104, (uint64_t *)(a2 + 104));
  v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  return a1;
}

uint64_t sub_100275140(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100275174((uint64_t *)a1);
  return a1;
}

uint64_t *sub_100275174(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_100271310(v3, v1);
      v1 += 208;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_1002751C4(void **a1)
{
  sub_1002751F4((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_1002751F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 208;
      result = sub_100271310(v4, v1 - 208);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_100275238()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizing80211ScanType", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 2;
}

void sub_1002752FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100275344()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizing80211Modes", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001C1194(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 14;
}

void sub_100275408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100275450@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  __n128 *v4;
  __n128 result;
  __n128 v6;

  v6 = *a1;
  v3 = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = (__n128 *)operator new(0x28uLL);
  v4->n128_u64[0] = (unint64_t)off_10212A7B8;
  v4->n128_u64[1] = 0;
  result = v6;
  v4[1] = v6;
  v4[2].n128_u64[0] = v3;
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

void sub_1002754B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002754CC()
{
  CFStringRef v0;
  unsigned int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizingScanLowPriority", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return v1;
  else
    return 0;
}

void sub_10027558C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1002755D4()
{
  CFStringRef v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  sub_1001E4804(&v5);
  v4 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizingWifiDutyCyclePercentage", 0x8000100u, kCFAllocatorNull);
  sub_10052688C(v5, (uint64_t)v0, (float *)&v4);
  CFRelease(v0);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_10027569C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002756E4()
{
  CFStringRef v0;
  int v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizingWifiMaxAgeFirstScan", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 0;
}

void sub_1002757A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

double sub_1002757EC()
{
  return 0.0;
}

uint64_t sub_1002757F4()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecording80211ScanType", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 2;
}

void sub_1002758B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100275900()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecording80211Modes", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001C1194(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 14;
}

void sub_1002759C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100275A0C@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  char *v4;
  __n128 result;
  __n128 v6;

  v6 = *a1;
  v3 = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = off_10212A848;
  result = v6;
  *(__n128 *)(v4 + 8) = v6;
  *((_QWORD *)v4 + 3) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

void sub_100275A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100275A88()
{
  CFStringRef v0;
  unsigned int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingScanLowPriority", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return v1;
  else
    return 0;
}

void sub_100275B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100275B90()
{
  CFStringRef v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  sub_1001E4804(&v5);
  v4 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingWifiDutyCyclePercentage", 0x8000100u, kCFAllocatorNull);
  sub_10052688C(v5, (uint64_t)v0, (float *)&v4);
  CFRelease(v0);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_100275C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100275CA0()
{
  CFStringRef v0;
  int v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingWifiMaxAgeFirstScan", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 0;
}

void sub_100275D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100275DA8()
{
  CFStringRef v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  sub_1001E4804(&v5);
  v4 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingInitialDelay", 0x8000100u, kCFAllocatorNull);
  sub_10052688C(v5, (uint64_t)v0, (float *)&v4);
  CFRelease(v0);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_100275E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

double sub_100275EBC(uint64_t a1, double a2, double a3)
{
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;

  v4 = a2 + a3;
  v5 = *(double *)(a1 + 168);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A788);
  v6 = v4 + v5;
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 168);
    v9 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)buf = 134349568;
    v22 = v8;
    v23 = 2050;
    v24 = v6;
    v25 = 2050;
    v26 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Next scan expected to take %{public}.3Lfs (ending at %{public}0.3fs). Expected time that the scan timer will end: %{public}.03fs", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A788);
    v11 = *(_QWORD *)(a1 + 168);
    v12 = *(_QWORD *)(a1 + 208);
    v15 = 134349568;
    v16 = v11;
    v17 = 2050;
    v18 = v6;
    v19 = 2050;
    v20 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Next scan expected to take %{public}.3Lfs (ending at %{public}0.3fs). Expected time that the scan timer will end: %{public}.03fs", &v15, 32);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "cl::chrono::CFAbsoluteTimeClock::time_point CLMicroLocationWifiScanStrategy::getExpectedNextScanEndTime(cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::CFAbsoluteTimeClock::duration) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return v6;
}

double sub_1002760B4(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;

  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_DWORD *)a2 == 5)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
      v8 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
      {
        v9 = a1[19];
        *(_DWORD *)buf = 134349056;
        v28 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Got a scan busy error so returning a scan delay of %{public}0.3Lfs", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A788);
        v19 = a1[19];
        v25 = 134349056;
        v26 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Got a scan busy error so returning a scan delay of %{public}0.3Lfs", &v25, 12);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v5 = a1 + 19;
    }
    else if (*(_DWORD *)a2 == 4)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
      v3 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
      {
        v4 = a1[20];
        *(_DWORD *)buf = 134349056;
        v28 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Got a scan error so returning a scan delay of %{public}0.3Lfs", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A788);
        v16 = a1[20];
        v25 = 134349056;
        v26 = v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Got a scan error so returning a scan delay of %{public}0.3Lfs", &v25, 12);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v5 = a1 + 20;
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
      v10 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
      {
        v11 = a1[18];
        *(_DWORD *)buf = 134349056;
        v28 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Returning scan delay: %{public}0.3Lfs", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A788);
        v22 = a1[18];
        v25 = 134349056;
        v26 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Returning scan delay: %{public}0.3Lfs", &v25, 12);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      v5 = a1 + 18;
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A788);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      v7 = a1[22];
      *(_DWORD *)buf = 134349056;
      v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "No wifi results so issue a scan with initial delay of %{public}0.3Lfs", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
      v13 = a1[22];
      v25 = 134349056;
      v26 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "No wifi results so issue a scan with initial delay of %{public}0.3Lfs", &v25, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v5 = a1 + 22;
  }
  return *(double *)v5;
}

void sub_100276688(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  CFStringRef v11;
  int v12;
  uint64_t data_low;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int *i;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  NSObject *v32;
  std::string *v33;
  const char *v34;
  std::string *v35;
  std::string *v36;
  const char *v37;
  std::string *v38;
  uint64_t v39;
  std::string v40;
  __int128 v41;
  uint64_t v42;
  double v43;
  void *__p;
  void *v45;
  uint64_t v46;
  void *v47;
  _BYTE *v48;
  std::string buf[68];
  std::string v50;

  v6 = *(_QWORD *)(a1 + 272);
  if (!v6)
    sub_10025FD1C();
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 48))(&v47);
  v9 = *(_QWORD **)(a1 + 16);
  v45 = 0;
  v46 = 0;
  __p = 0;
  sub_10027205C(&__p, v47, (uint64_t)v48, (v48 - (_BYTE *)v47) >> 2);
  sub_100EF0D48(v9, (uint64_t)&__p);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  sub_100276D3C(a1);
  v10 = *(_QWORD *)(a1 + 16);
  sub_1001E4804(buf);
  LODWORD(v50.__r_.__value_.__l.__data_) = 0;
  v11 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsWifiMaxAgeNextScan", 0x8000100u, kCFAllocatorNull);
  v12 = sub_1000B1180((uint64_t)buf[0].__r_.__value_.__l.__data_, (uint64_t)v11, &v50);
  CFRelease(v11);
  data_low = LODWORD(v50.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v12)
    v17 = data_low;
  else
    v17 = 0;
  sub_100EF0EC4(v10, v17);
  v41 = *a2;
  v42 = *((_QWORD *)a2 + 2);
  v43 = sub_1002760B4((_QWORD *)a1, (uint64_t)&v41);
  v18 = sub_100275EBC(a1, a4, v43);
  v19 = *(double *)(a1 + 208);
  if (v19 < v18)
  {
    v20 = sub_100276F6C(a1);
    v19 = *(double *)(a1 + 208);
  }
  else
  {
    v20 = 0;
  }
  if (v19 < v18)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A788);
    v21 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Not enough time for another scan", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
      LOWORD(v50.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Not enough time for another scan", &v50, 2);
      v35 = (std::string *)v34;
      sub_100512490("Generic", 1, 0, 2, "virtual std::shared_ptr<CLWifiScanner::WifiScanSettings> CLMicroLocationWifiScanStrategy::getNextScanSettings(cl::chrono::CFAbsoluteTimeClock::time_point, std::optional<WifiNotificationResults>)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
    v43 = 1.79769313e308;
    if (!v20)
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A788);
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v22 = sub_10033E05C(*(_QWORD *)(a1 + 16));
    v23 = (uint64_t *)v22;
    memset(&v40, 0, sizeof(v40));
    if (*(_QWORD *)v22 != *(_QWORD *)(v22 + 8))
    {
      std::to_string(buf, **(_DWORD **)v22);
      v25 = *v23;
      v24 = v23[1];
      v40 = buf[0];
      v26 = (int *)(v25 + 4);
      for (i = (int *)(v24 - 4); v26 != i; ++v26)
      {
        std::to_string(&v50, *v26);
        v28 = std::string::insert(&v50, 0, ",");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        buf[0].__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = buf;
        else
          v30 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
        if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
        else
          v31 = buf[0].__r_.__value_.__l.__size_;
        std::string::append(&v40, (const std::string::value_type *)v30, v31);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
      }
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A788);
    v32 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      v33 = &v40;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = (std::string *)v40.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Setting channels to scan: %{private}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
      v36 = &v40;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
      LODWORD(v50.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
      LODWORD(v39) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Setting channels to scan: %{private}s", &v50, v39);
      v38 = (std::string *)v37;
      sub_100512490("Generic", 1, 0, 2, "virtual std::shared_ptr<CLWifiScanner::WifiScanSettings> CLMicroLocationWifiScanStrategy::getNextScanSettings(cl::chrono::CFAbsoluteTimeClock::time_point, std::optional<WifiNotificationResults>)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  sub_100277FF0(*(uint64_t **)(a1 + 16), a1 + 24, &v43, a3);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_100276C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_100276D3C(uint64_t a1)
{
  CFStringRef v2;
  int v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  double v8;
  CFStringRef v9;
  int v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  *(double *)(a1 + 144) = sub_100EF1298(*(_QWORD **)(a1 + 16), *(float *)(a1 + 184));
  sub_1001E4804(&v17);
  v16 = 0;
  v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsWifiBusyRetryDelay", 0x8000100u, kCFAllocatorNull);
  v3 = sub_1000B1180(v17, (uint64_t)v2, &v16);
  CFRelease(v2);
  v4 = v16;
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (double)v4 / 1000.0;
  if (!v3)
    v8 = 1.0;
  *(double *)(a1 + 152) = v8;
  sub_1001E4804(&v17);
  v16 = 0;
  v9 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsWifiErrorRetryDelay", 0x8000100u, kCFAllocatorNull);
  v10 = sub_1000B1180(v17, (uint64_t)v9, &v16);
  CFRelease(v9);
  v11 = v16;
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (double)v11 / 1000.0;
  if (!v10)
    v15 = 1.0;
  *(double *)(a1 + 160) = v15;
  *(double *)(a1 + 168) = sub_100EF1310(*(_QWORD **)(a1 + 16));
}

void sub_100276EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100276F6C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  double v4;
  double v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A788);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Scan strategy extends scan\", \"by duration (ms)\":%{public}lld}", (uint8_t *)v7, 0x1Cu);
  }
  v4 = *(double *)(a1 + 200);
  v5 = (double)v2 / 1000.0 + *(double *)(a1 + 192);
  *(double *)(a1 + 192) = v5;
  *(double *)(a1 + 208) = v5 + v4;
  return v2;
}

void sub_100277094(uint64_t a1, double a2)
{
  double v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *__p;
  void *v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;

  v3 = a2 + *(double *)(a1 + 192);
  *(double *)(a1 + 200) = a2;
  *(double *)(a1 + 208) = v3;
  v8 = 0;
  v9 = 0;
  __p = 0;
  sub_10025EA00(&__p, *(const void **)(a1 + 280), *(_QWORD *)(a1 + 288), (uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3);
  v4 = *(_QWORD *)(a1 + 240);
  if (!v4)
    sub_10025FD1C();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 48))(v10, v4, &__p);
  sub_10027839C((_QWORD *)(a1 + 248), (uint64_t)v10);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_7;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_10027717C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002771B0(uint64_t a1)
{
  return sub_100276F6C(a1);
}

uint64_t sub_1002771C8(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_10212A740;
  v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(_QWORD *)(a1 + 288) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 272);
  if (v3 == (_QWORD *)(a1 + 248))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 248);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(_QWORD **)(a1 + 240);
  if (v5 == (_QWORD *)(a1 + 216))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 216);
    goto LABEL_12;
  }
  if (v5)
  {
    v6 = 5;
LABEL_12:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
    sub_1002773B4(a1 + 16, v8);
  return a1;
}

void sub_1002772A0(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_10212A740;
  v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(_QWORD *)(a1 + 288) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 272);
  if (v3 == (_QWORD *)(a1 + 248))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 248);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(_QWORD **)(a1 + 240);
  if (v5 == (_QWORD *)(a1 + 216))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 216);
  }
  else
  {
    if (!v5)
    {
LABEL_13:
      if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 79) < 0)
        operator delete(*(void **)(a1 + 56));
      v7 = *(void **)(a1 + 24);
      if (v7)
      {
        *(_QWORD *)(a1 + 32) = v7;
        operator delete(v7);
      }
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v8)
        sub_1002773B4(a1 + 16, v8);
      operator delete();
    }
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
  goto LABEL_13;
}

void sub_100277388(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1002773B4(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    if (*(char *)(a2 + 87) < 0)
      operator delete(*(void **)(a2 + 64));
    v3 = *(void **)(a2 + 16);
    if (v3)
    {
      *(_QWORD *)(a2 + 24) = v3;
      operator delete(v3);
    }
    operator delete();
  }
}

uint64_t sub_10027740C(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_10027744C(_QWORD *a1)
{
  void *v2;

  *a1 = off_10212A7B8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100277488(_QWORD *a1)
{
  void *v2;

  *a1 = off_10212A7B8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

_QWORD *sub_1002774D4(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  v4 = a1[1];
  v3 = (const void *)a1[2];
  *v2 = off_10212A7B8;
  v2[1] = v4;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  sub_10025EA00(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (_QWORD)v3) >> 3);
  return v2;
}

void sub_100277528(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10027753C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = off_10212A7B8;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  return sub_10025EA00(a2 + 2, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
}

void sub_10027756C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_100277584(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_1002775B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const __CFString *v4;
  _BOOL4 v5;
  __n128 v6;
  _OWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  int *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  void *__p;
  char *v32;
  _OWORD *v33;
  const __CFArray *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  sub_1001E4804(&v35);
  v34 = 0;
  v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizingTopChannels", 0x8000100u, kCFAllocatorNull);
  v5 = sub_100527258(v35, v4, (CFTypeRef *)&v34);
  CFRelease(v4);
  if (v5)
  {
    v6.n128_f64[0] = sub_10027795C(v34, (uint64_t)&__p);
  }
  else
  {
    v7 = operator new(0x40uLL);
    v33 = v7 + 4;
    *v7 = xmmword_101B9C7F0;
    v7[1] = unk_101B9C800;
    v6 = (__n128)xmmword_101B9C810;
    v7[2] = xmmword_101B9C810;
    v7[3] = unk_101B9C820;
    __p = v7;
    v32 = (char *)(v7 + 4);
  }
  v8 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v6);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v11 + 1;
  v12 = v11 % ((v32 - (_BYTE *)__p) >> 6);
  sub_1002778C8((void **)a2, *((_QWORD *)__p + 8 * v12));
  v13 = (char *)__p;
  v14 = (char *)__p + 64 * v12;
  v17 = *v14;
  v16 = (int *)(v14 + 1);
  v15 = v17;
  if (!v17)
    goto LABEL_29;
  v18 = (_QWORD *)(a2 + 16);
  v19 = *(_DWORD **)(a2 + 8);
  v20 = &v16[v15];
  do
  {
    v21 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * *v16);
    if ((unint64_t)v19 >= *v18)
    {
      v23 = *(_DWORD **)a2;
      v24 = ((uint64_t)v19 - *(_QWORD *)a2) >> 2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        sub_100259694();
      v26 = *v18 - (_QWORD)v23;
      if (v26 >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)sub_100260634(a2 + 16, v27);
        v23 = *(_DWORD **)a2;
        v19 = *(_DWORD **)(a2 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[4 * v24];
      *(_DWORD *)v29 = *v21;
      v22 = v29 + 4;
      while (v19 != v23)
      {
        v30 = *--v19;
        *((_DWORD *)v29 - 1) = v30;
        v29 -= 4;
      }
      *(_QWORD *)a2 = v29;
      *(_QWORD *)(a2 + 8) = v22;
      *(_QWORD *)(a2 + 16) = &v28[4 * v27];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v19 = *v21;
      v22 = v19 + 1;
    }
    *(_QWORD *)(a2 + 8) = v22;
    ++v16;
    v19 = v22;
  }
  while (v16 != v20);
  v13 = (char *)__p;
  if (__p)
  {
LABEL_29:
    v32 = v13;
    operator delete(v13);
  }
}

void sub_100277804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100277880(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1002778BC()
{
}

void sub_1002778C8(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_100260634(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

double sub_10027795C@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  uint64_t v6;
  CFRange v7;

  v5 = 0uLL;
  v6 = 0;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_1002779D8, &v5);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

void sub_1002779BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002779D8(const void *a1, void **a2)
{
  unint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  sub_100277AE0(a1, &v24);
  v3 = (unint64_t)a2[2];
  v4 = a2[1];
  if ((unint64_t)v4 >= v3)
  {
    v9 = ((char *)v4 - (_BYTE *)*a2) >> 6;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 58)
      sub_100259694();
    v11 = v3 - (_QWORD)*a2;
    if (v11 >> 5 > v10)
      v10 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)sub_1002697F0((uint64_t)(a2 + 2), v12);
    else
      v13 = 0;
    v14 = &v13[64 * v9];
    v15 = &v13[64 * v12];
    v16 = v24;
    v17 = v25;
    v18 = v27;
    *((_OWORD *)v14 + 2) = v26;
    *((_OWORD *)v14 + 3) = v18;
    *(_OWORD *)v14 = v16;
    *((_OWORD *)v14 + 1) = v17;
    v8 = v14 + 64;
    v20 = (char *)*a2;
    v19 = (char *)a2[1];
    if (v19 != *a2)
    {
      do
      {
        v21 = *((_OWORD *)v19 - 4);
        v22 = *((_OWORD *)v19 - 3);
        v23 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v19 - 2);
        *((_OWORD *)v14 - 1) = v23;
        *((_OWORD *)v14 - 4) = v21;
        *((_OWORD *)v14 - 3) = v22;
        v14 -= 64;
        v19 -= 64;
      }
      while (v19 != v20);
      v19 = (char *)*a2;
    }
    *a2 = v14;
    a2[1] = v8;
    a2[2] = v15;
    if (v19)
      operator delete(v19);
  }
  else
  {
    v5 = v24;
    v6 = v25;
    v7 = v27;
    v4[2] = v26;
    v4[3] = v7;
    *v4 = v5;
    v4[1] = v6;
    v8 = v4 + 4;
  }
  a2[1] = v8;
}

void sub_100277AE0(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeID v4;
  CFIndex Count;
  int *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int v10;
  int *context;
  int *v12;
  uint64_t v13;
  CFRange v14;

  v4 = CFGetTypeID(a1);
  if (v4 != CFArrayGetTypeID())
    sub_1018EDE14();
  context = 0;
  v12 = 0;
  v13 = 0;
  Count = CFArrayGetCount((CFArrayRef)a1);
  v14.length = Count & ~(Count >> 63);
  v14.location = 0;
  CFArrayApplyFunction((CFArrayRef)a1, v14, (CFArrayApplierFunction)sub_100277BB8, &context);
  v6 = context;
  v7 = v12;
  *a2 = 0;
  if (v6 != v7)
  {
    v8 = 2;
    v9 = v6;
    do
    {
      if (v8 == 16)
        break;
      v10 = *v9++;
      *a2 = v8 - 1;
      *((_DWORD *)a2 + v8++) = v10;
    }
    while (v9 != v7);
  }
  if (v6)
  {
    v12 = v6;
    operator delete(v6);
  }
}

void sub_100277BB8(const void *a1, uint64_t a2)
{
  int v3;
  int v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v3 = sub_100277C98(a1);
  v4 = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a2;
    v9 = ((uint64_t)v6 - *(_QWORD *)a2) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_100259694();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_100260634(a2 + 16, v12);
      v8 = *(_DWORD **)a2;
      v6 = *(_DWORD **)(a2 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = v4;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = v3;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
}

uint64_t sub_100277C98(const void *a1)
{
  CFTypeID v2;
  unsigned int valuePtr;

  v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID())
    sub_1018EE0F4();
  valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr))
    sub_1018EDF88();
  return valuePtr;
}

_QWORD *sub_100277CF4(_QWORD *a1)
{
  void *v2;

  *a1 = off_10212A848;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100277D30(_QWORD *a1)
{
  void *v2;

  *a1 = off_10212A848;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  operator delete();
}

_QWORD *sub_100277D7C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = off_10212A848;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_10025EA00(v2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  return v2;
}

void sub_100277DCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100277DE0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10212A848;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return sub_10025EA00(a2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
}

void sub_100277E0C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void sub_100277E24(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_100277E54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_1002778C8((void **)a2, (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v4 = *(_DWORD **)(a1 + 8);
  v5 = *(_DWORD **)(a1 + 16);
  if (v4 != v5)
  {
    v6 = (_QWORD *)(a2 + 16);
    v7 = *(_DWORD **)(a2 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        v9 = *(_DWORD **)a2;
        v10 = ((uint64_t)v7 - *(_QWORD *)a2) >> 2;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          sub_100259694();
        v12 = *v6 - (_QWORD)v9;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)sub_100260634(a2 + 16, v13);
          v9 = *(_DWORD **)a2;
          v7 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[4 * v10];
        *(_DWORD *)v15 = *v4;
        v8 = v15 + 4;
        while (v7 != v9)
        {
          v16 = *--v7;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        *(_QWORD *)a2 = v15;
        *(_QWORD *)(a2 + 8) = v8;
        *(_QWORD *)(a2 + 16) = &v14[4 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v7 = *v4;
        v8 = v7 + 1;
      }
      *(_QWORD *)(a2 + 8) = v8;
      v4 += 2;
      v7 = v8;
    }
    while (v4 != v5);
  }
}

void sub_100277F84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100277FA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100277FE4()
{
}

_QWORD *sub_100277FF0@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, double *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x98uLL);
  result = sub_100278060(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_10027804C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100278060(_QWORD *a1, uint64_t *a2, uint64_t a3, double *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = off_10212A8C8;
  a1[1] = 0;
  sub_100278138((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1002780B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002780C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10212A8C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002780DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10212A8C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100278110(uint64_t a1)
{
  char v1;

  sub_100278348((uint64_t)&v1, a1 + 24);
}

void sub_100278138(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, double *a5)
{
  __n128 __p;
  uint64_t v9;
  uint64_t v10[2];
  void *v11;
  void *v12;
  void *v13;
  char v14;

  sub_100278210((uint64_t)v10, a3);
  __p = 0uLL;
  v9 = 0;
  sub_1002782D0(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
  sub_100FE7798(a2, v10, &__p, *a5);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14 < 0)
    operator delete(v13);
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
}

void sub_1002781E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_10027740C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100278210(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_10027205C((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 2);
  v5 = *(_OWORD *)(a2 + 5);
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = (_BYTE *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_100115CE4(v6, (void *)a2[8], a2[9]);
  }
  else
  {
    v7 = *((_OWORD *)a2 + 4);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_OWORD *)v6 = v7;
  }
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  return a1;
}

void sub_1002782B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002782D0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100259C18(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10027832C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100278348(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(_QWORD *)(a2 + 104) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  v4 = *(void **)(a2 + 16);
  if (v4)
  {
    *(_QWORD *)(a2 + 24) = v4;
    operator delete(v4);
  }
}

_QWORD *sub_10027839C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_10027842C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X2>, double *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t *v13;
  const std::string::value_type *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  NSObject *v38;
  int v39;
  uint64_t *v40;
  std::string *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  unsigned __int8 *v55;
  std::string::size_type v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  _QWORD *v60;
  _QWORD *v61;
  BOOL v62;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  _QWORD v72[5];
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t (*v77)(uint64_t);
  void *v78;
  _BYTE v79[72];
  _BYTE buf[24];
  __int16 v81;
  uint64_t *v82;
  __int16 v83;
  std::string *v84;

  v73 = 0;
  v74 = &v73;
  v75 = 0x7812000000;
  v76 = sub_100206C08;
  v77 = sub_100207A68;
  v78 = &unk_102080316;
  sub_1002BBCA0((uint64_t)v79);
  v9 = v74;
  *((_DWORD *)v74 + 29) |= 0x20u;
  v10 = v9[13];
  if (!v10)
    operator new();
  sub_1002CA200(v10, a3);
  v11 = v74;
  v12 = objc_msgSend(objc_msgSend(a2, "status"), "intValue");
  *((_DWORD *)v11 + 29) |= 4u;
  *((_DWORD *)v11 + 17) = v12;
  v13 = v74;
  v14 = (const std::string::value_type *)objc_msgSend(objc_msgSend(a2, "track"), "UTF8String");
  *((_DWORD *)v13 + 29) |= 8u;
  v15 = (std::string *)v13[9];
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::assign(v15, v14);
  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472;
  v72[2] = sub_100278C4C;
  v72[3] = &unk_10212A960;
  v72[4] = &v73;
  objc_msgSend(objc_msgSend(a2, "outputDeviceIDs"), "enumerateKeysAndObjectsUsingBlock:", v72);
  memset(&v71, 0, sizeof(v71));
  v16 = *((int *)v74 + 22);
  if ((_DWORD)v16)
  {
    v17 = (uint64_t *)v74[10];
    v18 = 8 * v16;
    do
    {
      v19 = *v17;
      std::to_string(&v67, *(_DWORD *)(*v17 + 8));
      v20 = std::string::append(&v67, ",");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v66, *(_DWORD *)(v19 + 12));
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v66;
      else
        v22 = (std::string *)v66.__r_.__value_.__r.__words[0];
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      else
        size = v66.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v68, (const std::string::value_type *)v22, size);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = std::string::append(&v69, ",");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = *(_QWORD *)(v19 + 16);
      v29 = *(char *)(v28 + 23);
      if (v29 >= 0)
        v30 = *(const std::string::value_type **)(v19 + 16);
      else
        v30 = *(const std::string::value_type **)v28;
      if (v29 >= 0)
        v31 = *(unsigned __int8 *)(v28 + 23);
      else
        v31 = *(_QWORD *)(v28 + 8);
      v32 = std::string::append(&v70, v30, v31);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = std::string::append(&v65, ";");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (buf[23] >= 0)
        v36 = buf;
      else
        v36 = *(const std::string::value_type **)buf;
      if (buf[23] >= 0)
        v37 = buf[23];
      else
        v37 = *(_QWORD *)&buf[8];
      std::string::append(&v71, v36, v37);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A980);
  v38 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v39 = *((_DWORD *)v74 + 17);
    v40 = (uint64_t *)v74[9];
    if (*((char *)v40 + 23) < 0)
      v40 = (uint64_t *)*v40;
    v41 = &v71;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = (std::string *)v71.__r_.__value_.__r.__words[0];
    *(_QWORD *)buf = 68289795;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v39;
    v81 = 2081;
    v82 = v40;
    v83 = 2081;
    v84 = v41;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Now Playing\", \"status\":%{public}d, \"track\":%{private, location:escape_only}s, \"outputDeviceIDs\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }
  v42 = v74;
  v43 = v74[13];
  if (!v43)
    v43 = *(_QWORD *)(qword_102310360 + 56);
  v44 = *(unsigned __int8 *)(v43 + 8);
  if (*(_BYTE *)(a1 + 72))
  {
    v45 = *(_DWORD *)(a1 + 20) != 1 && *((_DWORD *)v74 + 17) == 1;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    v48 = *(int *)(a1 + 40);
    if ((_DWORD)v48)
    {
      v49 = *(_QWORD *)(a1 + 32);
      v50 = 8 * v48;
      do
      {
        sub_10019C3A8((uint64_t **)buf, *(const void ***)(*(_QWORD *)v49 + 16), *(_QWORD *)(*(_QWORD *)v49 + 16));
        v49 += 8;
        v50 -= 8;
      }
      while (v50);
      v42 = v74;
    }
    *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65.__r_.__value_.__l.__size_;
    v51 = *((int *)v42 + 22);
    if ((_DWORD)v51)
    {
      v52 = v42[10];
      v53 = 8 * v51;
      do
      {
        sub_10019C3A8((uint64_t **)&v65, *(const void ***)(*(_QWORD *)v52 + 16), *(_QWORD *)(*(_QWORD *)v52 + 16));
        v52 += 8;
        v53 -= 8;
      }
      while (v53);
      v54 = v65.__r_.__value_.__r.__words[2];
    }
    else
    {
      v54 = 0;
    }
    if (*(_QWORD *)&buf[16] == v54)
    {
      v55 = *(unsigned __int8 **)buf;
      if (*(_BYTE **)buf == &buf[8])
      {
        LOBYTE(v57) = 1;
      }
      else
      {
        v56 = v65.__r_.__value_.__r.__words[0];
        do
        {
          v57 = sub_10025A4CC((uint64_t)&v70, v55 + 32, (unsigned __int8 *)(v56 + 32));
          if (!v57)
            break;
          v58 = (unsigned __int8 *)*((_QWORD *)v55 + 1);
          v59 = v55;
          if (v58)
          {
            do
            {
              v55 = v58;
              v58 = *(unsigned __int8 **)v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              v55 = (unsigned __int8 *)*((_QWORD *)v59 + 2);
              v46 = *(_QWORD *)v55 == (_QWORD)v59;
              v59 = v55;
            }
            while (!v46);
          }
          v60 = *(_QWORD **)(v56 + 8);
          if (v60)
          {
            do
            {
              v61 = v60;
              v60 = (_QWORD *)*v60;
            }
            while (v60);
          }
          else
          {
            do
            {
              v61 = *(_QWORD **)(v56 + 16);
              v46 = *v61 == v56;
              v56 = (std::string::size_type)v61;
            }
            while (!v46);
          }
          v56 = (std::string::size_type)v61;
        }
        while (v55 != &buf[8]);
      }
    }
    else
    {
      LOBYTE(v57) = 0;
    }
    sub_100090AE4((uint64_t)&v65, (char *)v65.__r_.__value_.__l.__size_);
    sub_100090AE4((uint64_t)buf, *(char **)&buf[8]);
    if (v44)
      v62 = v45;
    else
      v62 = 0;
    v47 = v62 | v57 ^ 1;
    v42 = v74;
  }
  else
  {
    if (*(_BYTE *)(v43 + 8))
      v46 = *((_DWORD *)v74 + 17) == 1;
    else
      v46 = 0;
    v47 = v46;
  }
  sub_100278E20(a1, (uint64_t)(v42 + 6));
  sub_100278E64((uint64_t)(v74 + 6), 0, 0, 3u, (uint64_t)&v65, *a4);
  buf[0] = v47;
  sub_1002DF194(&buf[8]);
  *a5 = buf[0];
  sub_1002DF194(a5 + 8);
  sub_1002DF2E0(&buf[8]);
  sub_1002DF2E0(&v65);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v73, 8);
  return sub_1002D1518(v79);
}

void sub_100278AF4()
{
  operator delete();
}

id sub_100278C4C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD v5[6];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100278CA8;
  v5[3] = &unk_10212A938;
  v3 = *(_QWORD *)(a1 + 32);
  v5[4] = a2;
  v5[5] = v3;
  return objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v5);
}

id sub_100278CA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[7];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100278D08;
  v6[3] = &unk_10212A910;
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v6[5] = a2;
  v6[6] = v3;
  v6[4] = v4;
  return objc_msgSend(a3, "enumerateObjectsUsingBlock:", v6);
}

std::string *sub_100278D08(uint64_t a1, void *a2)
{
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  const std::string::value_type *v11;
  std::string *v12;

  v4 = *(int **)(*(_QWORD *)(a1 + 48) + 8);
  v5 = v4[23];
  v6 = v4[22];
  if ((int)v6 >= v5)
  {
    if (v5 == v4[24])
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v4 + 20), v5 + 1);
      v5 = v4[23];
    }
    v4[23] = v5 + 1;
    sub_100278F7C();
  }
  v7 = *((_QWORD *)v4 + 10);
  v4[22] = v6 + 1;
  v8 = *(_QWORD *)(v7 + 8 * v6);
  v9 = objc_msgSend(*(id *)(a1 + 32), "intValue");
  *(_DWORD *)(v8 + 28) |= 1u;
  *(_DWORD *)(v8 + 8) = v9;
  v10 = objc_msgSend(*(id *)(a1 + 40), "intValue");
  *(_DWORD *)(v8 + 28) |= 2u;
  *(_DWORD *)(v8 + 12) = v10;
  v11 = (const std::string::value_type *)objc_msgSend(a2, "UTF8String");
  *(_DWORD *)(v8 + 28) |= 4u;
  v12 = *(std::string **)(v8 + 16);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  return std::string::assign(v12, v11);
}

uint64_t sub_100278E20(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 72))
  {
    sub_1002D1F68(a1, a2);
  }
  else
  {
    sub_1002D1408(a1, a2);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_100278E64(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unsigned int v12;
  int v13;
  const char *v14;
  int v15;
  const char *v16;

  sub_1002BBFAC(a5);
  v12 = *(_DWORD *)(a1 + 16);
  if (!sub_1002BC6A4(v12))
  {
    v14 = "::CLMicroLocationProto::EventType_IsValid(value)";
    v15 = 19803;
    v16 = "set_eventtype";
    goto LABEL_6;
  }
  v13 = *(_DWORD *)(a5 + 128);
  *(_DWORD *)(a5 + 72) = v12;
  *(double *)(a5 + 8) = a6;
  *(_BYTE *)(a5 + 77) = a2;
  *(_DWORD *)(a5 + 128) = v13 | 0x2803;
  *(_BYTE *)(a5 + 76) = a3;
  if ((sub_1002BC674(a4) & 1) == 0)
  {
    v14 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    v15 = 20312;
    v16 = "set_confidencelevel";
LABEL_6:
    __assert_rtn(v16, "microlocation.pb.h", v15, v14);
  }
  *(_DWORD *)(a5 + 128) |= 0x4000u;
  *(_DWORD *)(a5 + 120) = a4;
  sub_100358648(a5, a1);
}

void sub_100278F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002DF2E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100278F5C(uint64_t result)
{
  if (*(_BYTE *)(result + 72))
  {
    result = sub_1002D1518(result);
    *(_BYTE *)(result + 72) = 0;
  }
  return result;
}

void sub_100278F7C()
{
  operator new();
}

void sub_100278FB8()
{
  operator delete();
}

void sub_100278FDC(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

BOOL sub_100279008(uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void sub_100279070(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_1002790BC@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_100279168(a2, 0x2E8BA2E8BA2E8BA3 * (a1[1] - *a1));
  v5 = *a1;
  v6 = a1[1];
  v7 = a2;
  while (v5 != v6)
  {
    result = sub_100279224(v5);
    if ((_DWORD)result)
      result = (uint64_t)sub_100279D14(&v7, (uint64_t)v5);
    v5 += 11;
  }
  return result;
}

void sub_10027914C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100279168(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      sub_100259694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100279B30(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 88 * v6;
    sub_1000591E8(a1, v7);
    return sub_10005925C((uint64_t)v7);
  }
  return result;
}

void sub_100279210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10005925C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100279224(uint64_t *a1)
{
  unsigned int v2;
  NSObject *v3;
  std::string *v4;
  int v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v10;
  std::string __p;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  std::string *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v2 = *((_DWORD *)a1 + 17);
  if ((v2 & 0x9000) != 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9A0);
    v3 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      v10 = *a1;
      sub_1000C2254(&v10, &__p);
      v4 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      v5 = *((_DWORD *)a1 + 8);
      v6 = *((_DWORD *)a1 + 10);
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = (v2 >> 12) & 1;
      v18 = 1026;
      v19 = (v2 >> 15) & 1;
      v20 = 2081;
      v21 = v4;
      v22 = 1026;
      v23 = v5;
      v24 = 1026;
      v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"received low confidence rssi AP\", \"is invalid?\":%{public}hhd, \"is off channel?\":%{public}hhd, \"mac address\":%{private, location:escape_only}s, \"RSSI\":%{public}d, \"channel\":%{public}d}", buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v7 = sub_1000AFA5C(*((_DWORD *)a1 + 10));
  v8 = *((int *)a1 + 8) < 0 && v7;
  if (*((int *)a1 + 10) <= 0)
    v8 = 0;
  return !*((_BYTE *)a1 + 64) && v8;
}

uint64_t sub_1002793C0(double *a1, uint64_t a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  double v9;
  double v10;
  float v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  _BOOL4 v15;
  NSObject *v16;
  _BOOL4 v17;
  double v18;
  _BOOL4 v19;
  unsigned int v20;
  const char *v22;
  char *v23;
  _BYTE v24[20];
  float v25;
  int v26;
  int v27;
  double v28;
  __int16 v29;
  int v30;
  _BYTE buf[1632];

  v4 = 0;
  switch(*(_DWORD *)(a2 + 64))
  {
    case 1:
      v5 = *(_QWORD *)(a2 + 16);
      if (!v5)
        v5 = *(_QWORD *)(qword_102310298 + 16);
      goto LABEL_8;
    case 3:
      v5 = *(_QWORD *)(a2 + 32);
      if (!v5)
        v5 = *(_QWORD *)(qword_102310298 + 32);
      goto LABEL_8;
    case 4:
      v5 = *(_QWORD *)(a2 + 40);
      if (!v5)
        v5 = *(_QWORD *)(qword_102310298 + 40);
LABEL_8:
      v4 = *a3 >= *a1 - *(double *)(v5 + 8) && (int)*(float *)(v5 + 20) < 0;
      break;
    case 5:
      v8 = *(_QWORD *)(a2 + 48);
      if (!v8)
        v8 = *(_QWORD *)(qword_102310298 + 48);
      v9 = *a1;
      v10 = *a3;
      v11 = *(float *)(v8 + 20);
      v12 = *(__int128 **)(v8 + 40);
      if (*((char *)v12 + 23) < 0)
      {
        sub_100115CE4(buf, *(void **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v13 = *v12;
        *(_QWORD *)&buf[16] = *((_QWORD *)v12 + 2);
        *(_OWORD *)buf = v13;
      }
      v17 = sub_1002798F8((uint64_t)buf, a4);
      v18 = *(double *)(v8 + 8);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v19 = v11 >= -100.0;
      if (v11 > -10.0)
        v19 = 0;
      v20 = v17 && v19;
      if (v10 >= v9 - v18)
        v4 = v20;
      else
        v4 = 0;
      break;
    case 6:
      v14 = *(_QWORD *)(a2 + 56);
      if (!v14)
        v14 = *(_QWORD *)(qword_102310298 + 56);
      sub_1002BE2EC(v24, v14);
      v15 = v25 > 0.0;
      if (v25 == NINearbyObjectDistanceNotAvailable)
        v15 = 0;
      v4 = v26 == 2 && v15;
      if ((v4 & 1) == 0)
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212A9A0);
        v16 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(double *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v26;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Bad uwb range, range %{public}.2f, type %{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_10212A9A0);
          v27 = 134349312;
          v28 = v25;
          v29 = 1026;
          v30 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Bad uwb range, range %{public}.2f, type %{public}d", &v27, 18);
          v23 = (char *)v22;
          sub_100512490("Generic", 1, 0, 2, "BOOL (anonymous namespace)::isGoodUwbRange(CLMicroLocationProto::UwbRange)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
      }
      sub_1002BE378((wireless_diagnostics::google::protobuf::MessageLite *)v24);
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_10027974C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_1002BE378((wireless_diagnostics::google::protobuf::MessageLite *)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100279798(double *a1, uint64_t *a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
    goto LABEL_13;
  v10 = a2[1];
  while (sub_1002793C0(a1, v5, a3, a4))
  {
    v5 += 80;
    if (v5 == v6)
      return sub_100279870((uint64_t)a2, v10, a2[1]);
  }
  if (v5 != v6)
  {
    v11 = v5 + 80;
    if (v5 + 80 != v6)
    {
      v10 = v5;
      do
      {
        if (sub_1002793C0(a1, v11, a3, a4))
        {
          sub_1002C18E4(v10, v11);
          v10 += 80;
        }
        v11 += 80;
      }
      while (v11 != v6);
      return sub_100279870((uint64_t)a2, v10, a2[1]);
    }
LABEL_13:
    v10 = v5;
  }
  return sub_100279870((uint64_t)a2, v10, a2[1]);
}

uint64_t sub_100279870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  if (a2 != a3)
  {
    sub_100279F54(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(void (****)(_QWORD))(a1 + 8);
    if (v7 != v5)
    {
      v8 = v7 - 10;
      v9 = v7 - 10;
      do
      {
        v10 = *v9;
        v9 -= 10;
        (*v10)(v8);
        v11 = v8 == v6;
        v8 = v9;
      }
      while (!v11);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

BOOL sub_1002798F8(uint64_t a1, std::locale::__imp **a2)
{
  std::locale::__imp *v2;
  std::locale::__imp *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  std::locale v9;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  do
  {
    std::locale::locale(&v9);
    v5 = sub_100279994(a1, v2, &v9);
    v7 = v6;
    std::locale::~locale(&v9);
    result = v5 != v7;
    if (v5 != v7)
      break;
    v2 = (std::locale::__imp *)((char *)v2 + 24);
  }
  while (v2 != v3);
  return result;
}

void sub_100279980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100279994(uint64_t a1, std::locale::__imp *a2, std::locale *a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  std::locale::__imp *v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::locale v15;
  std::locale v16[2];
  std::locale v17;
  std::locale v18;

  std::locale::locale(&v15, a3);
  LODWORD(v5) = *((char *)a2 + 23);
  v6 = (int)v5 < 0;
  v7 = *((_QWORD *)a2 + 1);
  if ((int)v5 < 0)
    a2 = *(std::locale::__imp **)a2;
  v5 = v5;
  if (v6)
    v5 = v7;
  v8 = (std::locale::__imp *)((char *)a2 + v5);
  std::locale::locale(&v18, &v15);
  v16[0].__locale_ = a2;
  v16[1].__locale_ = v8;
  std::locale::locale(&v17, &v18);
  std::locale::~locale(&v18);
  v9 = *(char *)(a1 + 23);
  v10 = v9 < 0;
  if (v9 >= 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  v12 = *(unsigned __int8 *)(a1 + 23);
  if (v10)
    v12 = *(_QWORD *)(a1 + 8);
  v13 = sub_100279FB0(v16, v11, v11 + v12);
  std::locale::~locale(&v17);
  std::locale::~locale(&v15);
  return v13;
}

void sub_100279A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_100279A78(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100279AA4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100279AE4((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100279AE4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 88)
  {
    if (*(char *)(i - 57) < 0)
      operator delete(*(void **)(i - 80));
  }
  a1[1] = v2;
}

void *sub_100279B30(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_10025955C();
  return operator new(88 * a2);
}

uint64_t sub_100279B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 88) = *(_QWORD *)(a3 + v7 - 88);
      v10 = *(_OWORD *)(a3 + v7 - 80);
      *(_QWORD *)(v8 - 64) = *(_QWORD *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 80) = v10;
      *(_QWORD *)(v9 - 72) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 80) = 0;
      v11 = *(_OWORD *)(a3 + v7 - 56);
      v12 = *(_OWORD *)(a3 + v7 - 40);
      v13 = *(_OWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v13;
      *(_OWORD *)(v8 - 40) = v12;
      *(_OWORD *)(v8 - 56) = v11;
      v7 -= 88;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v19 + 1) = a7 + v7;
    v14 = v19;
  }
  v17 = 1;
  sub_100279C48((uint64_t)v16);
  return v14;
}

uint64_t sub_100279C48(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100279C7C(a1);
  return a1;
}

void sub_100279C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 88;
  }
}

void sub_100279CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 88;
      *(_QWORD *)(a1 + 16) = v2 - 88;
      if (*(char *)(v2 - 57) < 0)
      {
        operator delete(*(void **)(v2 - 80));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t **sub_100279D14(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = sub_100279DEC(v6, a2);
  }
  else
  {
    sub_100279D64((uint64_t)v6, a2);
    v7 = v5 + 88;
  }
  v3[1] = v7;
  return a1;
}

__n128 sub_100279D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  v5 = (_BYTE *)(v4 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(v5, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v5 = v6;
  }
  result = *(__n128 *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 48) = v8;
  *(_OWORD *)(v4 + 64) = v9;
  *(__n128 *)(v4 + 32) = result;
  *(_QWORD *)(a1 + 8) = v4 + 88;
  return result;
}

void sub_100279DE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100279DEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  __int128 v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  char *v21;
  char *v22;
  uint64_t *v23;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v23 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100279B30(v7, v9);
  else
    v10 = 0;
  v11 = &v10[88 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v21 = v11;
  v22 = &v10[88 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = v11 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(v12, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v11 = v21;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v12 = v13;
  }
  v14 = &v10[88 * v4];
  v16 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v14 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v14 + 3) = v16;
  *((_QWORD *)v14 + 10) = v17;
  *((_OWORD *)v14 + 4) = v15;
  v21 = v11 + 88;
  sub_1000591E8(a1, v20);
  v18 = a1[1];
  sub_10005925C((uint64_t)v20);
  return v18;
}

void sub_100279F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10005925C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100279F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1002C18E4(a3, v4);
      v4 += 80;
      a3 += 80;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_100279FB0(const std::locale *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const std::locale *v6;
  std::locale::__imp *locale;
  std::locale::__imp *v8;
  uint64_t v9;
  std::locale::__imp *v10;
  uint64_t v11;

  v3 = a2;
  if (a2 != a3)
  {
    v6 = a1 + 2;
    locale = a1[1].__locale_;
    do
    {
      v8 = a1->__locale_;
      if (a1->__locale_ == locale)
        break;
      v9 = 0;
      v10 = a1->__locale_;
      v11 = v3;
      while ((char *)v8 + v9 != (char *)a1[1].__locale_)
      {
        if (!sub_10027A090(v6, (char *)(v3 + v9), (char *)v8 + v9))
          goto LABEL_10;
        ++v11;
        v10 = (std::locale::__imp *)((char *)v10 + 1);
        ++v9;
        if (v3 + v9 == a3)
        {
          v10 = (std::locale::__imp *)((char *)v8 + v9);
          goto LABEL_10;
        }
      }
      v10 = (std::locale::__imp *)((char *)v8 + v9);
LABEL_10:
      locale = a1[1].__locale_;
      if (v10 == locale)
        return v3;
      ++v3;
    }
    while (v3 != a3);
    return a3;
  }
  return v3;
}

BOOL sub_10027A090(const std::locale *a1, char *a2, char *a3)
{
  uint64_t v5;
  const std::locale::facet *v6;
  uint64_t v7;
  const std::locale::facet *v8;

  v5 = *a2;
  v6 = std::locale::use_facet(a1, &std::ctype<char>::id);
  LODWORD(v5) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[1].~facet)(v6, v5);
  v7 = *a3;
  v8 = std::locale::use_facet(a1, &std::ctype<char>::id);
  return (_DWORD)v5 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v8->__vftable[1].~facet)(v8, v7);
}

void sub_10027A108(char **a1@<X8>)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  __int128 v16;

  sub_1015A2E04(&v4, "MicroLocationMeasurements");
  sub_1015A2E04(v5, "MicroLocationRecordingEvents");
  sub_1015A2E04(v6, "MicroLocationModels");
  sub_1015A2E04(v7, "MicroLocationConfiguration");
  sub_1015A2E04(v8, "MicroLocationRapport");
  sub_1015A2E04(v9, "MicroLocationLabels");
  sub_1015A2E04(v10, "MicroLocationLoggedEvents");
  sub_1015A2E04(v11, "MiLoServices");
  sub_1015A2E04(v12, "MicroLocationAssociatedState");
  sub_1015A2E04(v13, "MiLoLoiTable");
  sub_1015A2E04(v14, "MicroLocationBluetoothIdentityTable");
  sub_1015A2E04(v15, "MiLoCustomLoiTable");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (char *)operator new(0x120uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 288;
  a1[1] = sub_10028E070((uint64_t)(a1 + 2), &v4, &v16, v2);
  v3 = 36;
  do
  {
    if (*((char *)&v5[v3 - 1] - 1) < 0)
      operator delete((void *)v5[v3 - 4]);
    v3 -= 3;
  }
  while (v3 * 8);
}

void sub_10027A2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)(v12 + 8) = v13;
  sub_100259608(&a10);
  v15 = 288;
  while (1)
  {
    if (*(&a12 + v15 - 1) < 0)
      operator delete(*(void **)(&a12 + v15 - 24));
    v15 -= 24;
    if (!v15)
      _Unwind_Resume(a1);
  }
}

uint64_t sub_10027A33C(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t *v3;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  uint8_t buf[1640];

  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 1;
  v7 = a1 + 24;
  *(_WORD *)(a1 + 32) = 256;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 40), *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)a1;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 64) = 0;
  sub_100631F84(a1 + 72, v7);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  if (*(char *)(a1 + 23) < 0)
    v8 = *(_QWORD *)(a1 + 8);
  else
    v8 = *(unsigned __int8 *)(a1 + 23);
  if (a3 != 2 && !v8)
  {
    sub_1018EE260();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabase.mm", 156, "CLMicroLocationDatabase");
    __break(1u);
LABEL_16:
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    goto LABEL_11;
  }
  sub_10027A798(a1);
  if (sub_1000CC4F4(a1 + 72))
    return a1;
  v3 = &qword_1022A0000;
  if (qword_1022A00F0 != -1)
    goto LABEL_16;
LABEL_11:
  v9 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Failed to connect to database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[30] != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14[0] = 0;
    LODWORD(v13) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Failed to connect to database", v14, v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "CLMicroLocationDatabase::CLMicroLocationDatabase(std::string, CLSqliteDatabase::SqlitePropertyProtection)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return a1;
}

void sub_10027A5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v16 = *(_QWORD *)(v12 + 296);
  *(_QWORD *)(v12 + 296) = 0;
  if (v16)
    operator delete();
  v17 = *(_QWORD *)(v12 + 288);
  *(_QWORD *)(v12 + 288) = 0;
  if (v17)
    operator delete();
  v18 = *(_QWORD *)(v12 + 280);
  *(_QWORD *)(v12 + 280) = 0;
  if (v18)
    operator delete();
  v19 = *(_QWORD *)(v12 + 272);
  *(_QWORD *)(v12 + 272) = 0;
  if (v19)
    operator delete();
  v20 = *(_QWORD *)(v12 + 264);
  *(_QWORD *)(v12 + 264) = 0;
  if (v20)
    operator delete();
  v21 = *(_QWORD *)(v12 + 256);
  *(_QWORD *)(v12 + 256) = 0;
  if (v21)
    operator delete();
  v22 = *(_QWORD *)(v12 + 248);
  *(_QWORD *)(v12 + 248) = 0;
  if (v22)
    operator delete();
  v23 = *(_QWORD *)(v12 + 240);
  *(_QWORD *)(v12 + 240) = 0;
  if (v23)
    operator delete();
  v24 = *(_QWORD *)(v12 + 232);
  *(_QWORD *)(v12 + 232) = 0;
  if (v24)
    operator delete();
  v25 = *(_QWORD *)(v12 + 224);
  *(_QWORD *)(v12 + 224) = 0;
  if (v25)
    operator delete();
  v26 = *(_QWORD *)(v12 + 216);
  *(_QWORD *)(v12 + 216) = 0;
  if (v26)
    operator delete();
  v27 = *v15;
  *v15 = 0;
  if (v27)
    operator delete();
  sub_1006322C0(v14);
  if (*(char *)(v12 + 63) < 0)
    operator delete(*v13);
  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(a1);
}

BOOL sub_10027A798(uint64_t a1)
{
  _BOOL8 result;

  result = sub_1000CC4F4(a1 + 72);
  if (result)
    operator new();
  return result;
}

void sub_10027AB08()
{
  operator delete();
}

uint64_t sub_10027AB5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v2)
    operator delete();
  v3 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v3)
    operator delete();
  v4 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v4)
    operator delete();
  v5 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v5)
    operator delete();
  v6 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v6)
    operator delete();
  v7 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v7)
    operator delete();
  v8 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v8)
    operator delete();
  v9 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v9)
    operator delete();
  v10 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v10)
    operator delete();
  v11 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v11)
    operator delete();
  v12 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v12)
    operator delete();
  v13 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v13)
    operator delete();
  sub_1006322C0(a1 + 72);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10027AD28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  NSObject *v5;
  std::runtime_error *exception;
  const char *v7;
  std::string *v8;
  int v9;
  const char *v10;
  std::string buf[68];

  v3 = a1 + 72;
  if (!sub_1000CC4F4(a1 + 72))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"openTransaction";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to call %s without a backing database", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v9 = 136315138;
      v10 = "openTransaction";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to call %s without a backing database", (const char *)&v9);
      v8 = (std::string *)v7;
      sub_100512490("Generic", 1, 0, 2, "CLSqliteTransaction CLMicroLocationDatabase::openTransaction()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1015A2E04(buf, "No valid connection to microlocation database.");
    std::runtime_error::runtime_error(exception, buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10212AA20;
  }
  return sub_1000C8074(v3, a2);
}

void sub_10027AF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  int v19;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_10027AF8C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  char *v8;
  char *v9;
  _QWORD v10[3];
  char v11;
  uint8_t buf[8];
  __int16 v13;
  const char *v14;
  _QWORD v15[3];
  __int128 v16[99];

  v2 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v3 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"dropping MiLo database tables\"}", buf, 0x12u);
    }
    sub_10063E3BC(v2, "MicroLocationMeasurements");
    sub_10063E3BC(v2, "MicroLocationRecordingEvents");
    sub_10063E3BC(v2, "MicroLocationModels");
    sub_10063E3BC(v2, "MicroLocationConfiguration");
    sub_10063E3BC(v2, "MicroLocationRapport");
    sub_10063E3BC(v2, "MicroLocationLabels");
    sub_10063E3BC(v2, "MicroLocationLoggedEvents");
    sub_1015A2E04(buf, "milo-internal-legacy-client-name-unsupervised");
    sub_1015A2E04(v15, "focus-mode");
    v8 = 0;
    v9 = 0;
    v10[0] = 0;
    v10[2] = &v8;
    v11 = 0;
    v8 = (char *)operator new(0x30uLL);
    v9 = v8;
    v10[0] = v8 + 48;
    v4 = 0;
    v9 = sub_10028E070((uint64_t)v10, (__int128 *)buf, v16, v8);
    do
    {
      if (SHIBYTE(v15[v4 + 2]) < 0)
        operator delete((void *)v15[v4]);
      v4 -= 3;
    }
    while (v4 != -6);
    sub_100285490(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_1003520C4, 0, (uint64_t)&v8);
    sub_10063E3BC(v2, "MicroLocationAssociatedState");
    sub_10063E3BC(v2, "MicroLocationBluetoothIdentityTable");
    sub_10027A798(a1);
    *(_QWORD *)buf = &v8;
    sub_100259608((void ***)buf);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to drop tables without a backing database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      LOWORD(v8) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to drop tables without a backing database", &v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationDatabase::dropTables()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_10027B300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v29;

  sub_100259608(&a15);
  v29 = 0;
  while (1)
  {
    if (*(&a28 + v29) < 0)
      operator delete(*(void **)((char *)&a23 + v29));
    v29 -= 24;
    if (v29 == -48)
      _Unwind_Resume(a1);
  }
}

uint64_t sub_10027B380(uint64_t a1, const std::string::value_type *a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  void *__p[2];
  int64_t v10;
  std::string v11;

  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&v11, "SELECT COUNT(*) FROM ");
  v4 = std::string::append(&v11, a2);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v10 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v6 = a1 + 72;
  if (sub_100635B3C(v6, a2))
  {
    if (v10 >= 0)
      v7 = (char *)__p;
    else
      v7 = (char *)__p[0];
    sub_1000CDA68(v6, v7);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_10027B60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027B660(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  char *v18;
  NSObject *v19;
  const char *v21;
  std::string *v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  int64_t v29;
  std::string v30;
  std::string v31;

  v3 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    if (sub_100635B3C(v3, a2))
    {
      *((_BYTE *)&v24.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v24, "SELECT ");
      v4 = std::string::append(&v24, "Count");
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      v6 = std::string::append(&v25, " FROM ");
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      v8 = std::string::append(&v26, a2);
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v27, "Counts");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::string::append(&v30, " WHERE rowid=");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v23, 1);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v23;
      else
        v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        size = v23.__r_.__value_.__l.__size_;
      v16 = std::string::append(&v31, (const std::string::value_type *)v14, size);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v29 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (v29 >= 0)
        v18 = (char *)__p;
      else
        v18 = (char *)__p[0];
      sub_1000CDA68(v3, v18);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v19 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v31.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to call numEntriesFromTriggerTable without a backing database", (uint8_t *)&v31, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v31, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      LOWORD(v30.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, &v31, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to call numEntriesFromTriggerTable without a backing database", &v30, 2);
      v22 = (std::string *)v21;
      sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable(const char *const)", "%s\n", v21);
      if (v22 != &v31)
        free(v22);
    }
  }
  return 0;
}

void sub_10027BD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  if (a49 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027BE18(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  const char *v28;
  uint8_t *v29;
  uint64_t v30[4];
  uint8_t buf[1640];

  v4 = (uint64_t)(a1 + 9);
  if (sub_1000CC4F4((uint64_t)(a1 + 9)))
  {
    v30[0] = a2;
    v30[1] = (uint64_t)a1;
    sub_10027AD28((uint64_t)a1, (uint64_t)buf);
    if (a1[27])
      sub_10027C564(v30, (char *)&xmmword_102300F10);
    if (a1[29])
      sub_10027C564(v30, (char *)&xmmword_102300F28);
    v7 = a1[28];
    v8 = v7 == 0;
    if (v7)
      sub_10027C564(v30, (char *)&xmmword_102300F40);
    v9 = a1[26];
    if (v9)
      v10 = 0;
    else
      v10 = v8;
    if (v9 && v8)
      sub_10027C564(v30, (char *)&xmmword_102300F58);
    v11 = a1[32];
    if (v11)
      v12 = 0;
    else
      v12 = v10;
    if (v11 && v10)
      sub_10027C564(v30, (char *)&xmmword_102300F70);
    v13 = a1[30];
    if (v13)
      v14 = 0;
    else
      v14 = v12;
    if (v13 && v12)
      sub_10027C564(v30, (char *)&xmmword_102300F88);
    v15 = a1[31];
    if (v15)
      v16 = 0;
    else
      v16 = v14;
    if (v15 && v14)
      sub_10027C564(v30, (char *)&xmmword_102300FA0);
    v17 = a1[33];
    if (v17)
      v18 = 0;
    else
      v18 = v16;
    if (v17 && v16)
      sub_10027C564(v30, (char *)&xmmword_102300FB8);
    v19 = a1[34];
    if (v19)
      v20 = 0;
    else
      v20 = v18;
    if (v19 && v18)
      sub_10027C564(v30, (char *)&xmmword_102300FD0);
    v21 = a1[35];
    if (v21)
      v22 = 0;
    else
      v22 = v20;
    if (v21 && v20)
      sub_10027C564(v30, (char *)&xmmword_102300FE8);
    v23 = a1[36];
    if (v23)
      v24 = 0;
    else
      v24 = v22;
    if (v23 && v22)
      sub_10027C564(v30, (char *)&xmmword_102301000);
    v25 = a1[37];
    if (v25)
      v6 = 0;
    else
      v6 = v24;
    if (v25 && v24)
      sub_10027C564(v30, (char *)&xmmword_102301018);
    if ((uint64_t)a1[20] <= 0)
      v26 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v26 = a1[20];
    sub_100053048(v4, v26);
    sub_1000C7B24(buf);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to deleteDataOlderThan without a backing database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      LOWORD(v30[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to deleteDataOlderThan without a backing database", v30, 2);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes, std::optional<std::chrono::minutes>)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    return 0;
  }
  return v6;
}

#error "10027C4E0: call analysis failed (funcsize=179)"

void sub_10027C564(uint64_t *a1, char *a2)
{
  uint64_t v4;
  NSObject *v5;
  double v6;
  char *v7;
  double v8;
  const char *v9;
  char *v10;
  int v11;
  double v12;
  uint8_t buf[1640];

  v4 = a1[1];
  j__CFAbsoluteTimeGetCurrent();
  j__CFAbsoluteTimeGetCurrent();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v5 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (double)*a1 / 1440.0;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Deleting microlocation data older than %.3Lf days", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v8 = (double)*a1 / 1440.0;
    v11 = 134217984;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Deleting microlocation data older than %.3Lf days", COERCE_LONG_DOUBLE(&v11));
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes, std::optional<std::chrono::minutes>)::(anonymous class)::operator()(const std::string &) const", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
  if (a2[23] >= 0)
    v7 = a2;
  else
    v7 = *(char **)a2;
  sub_1000CDA68(v4 + 72, v7);
}

void sub_10027CA94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027CAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  const char *v9;
  int *v10;
  const char *v11;
  int *v12;
  int v13;
  double v14;
  int buf;
  double buf_4;

  v3 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    j__CFAbsoluteTimeGetCurrent();
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v4 = (double)a2;
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      buf = 134217984;
      buf_4 = v4 / 1440.0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Deleting similarity list labels older than %.3Lf days", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v13 = 134217984;
      v14 = v4 / 1440.0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Deleting similarity list labels older than %.3Lf days", COERCE_LONG_DOUBLE(&v13));
      v10 = (int *)v9;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::purgeSimilarityListLabels(std::chrono::minutes)", "%s\n", v9);
      if (v10 != &buf)
        free(v10);
    }
    if (byte_10230108F >= 0)
      v6 = (char *)&xmmword_102301078;
    else
      v6 = (char *)xmmword_102301078;
    sub_1000CDA68(v3, v6);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to purgeSimilarityListLabels without a backing database", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    LOWORD(v13) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to purgeSimilarityListLabels without a backing database", &v13, 2);
    v12 = (int *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::purgeSimilarityListLabels(std::chrono::minutes)", "%s\n", v11);
    if (v12 != &buf)
      free(v12);
  }
  return 0;
}

void sub_10027D10C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027D13C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  v6 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 224);
    if (!v7)
      operator new();
    v8 = sub_1003AB88C(v7, a2, a3);
    if (*(uint64_t *)(a1 + 160) <= 0)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = *(_QWORD *)(a1 + 160);
    sub_100053048(v6, v9);
    return v8;
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to deleteUnneededModels without a backing database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to deleteUnneededModels without a backing database", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::deleteUnneededModels(uint32_t, uint32_t)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
}

void sub_10027D384()
{
  operator delete();
}

void sub_10027D3B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v10;

  v10 = sub_10027D424();
  sub_10027D500(a1, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))sub_100322248, 0, a2, a3, a4, &v10, a5);
}

uint64_t sub_10027D424()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsDatabaseSelectionLimit", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 5000;
}

void sub_10027D4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10027D500(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD);
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  int v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;

  if (sub_1000CC4F4(a1 + 72))
  {
    v15 = *(_QWORD *)(a1 + 216);
    if (!v15)
      operator new();
    v16 = (_QWORD *)(v15 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v17 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*v16 + a2);
    else
      v17 = a2;
    v17(v16, a4, a5, a6, *a7);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v18 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const boost::uu"
            "ids::uuid &, const std::string &, const std::string &, unsigned int), Args = <const boost::uuids::uuid &, co"
            "nst std::string &, const std::string &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v22 = 136446210;
      v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const boost::uu"
            "ids::uuid &, const std::string &, const std::string &, unsigned int), Args = <const boost::uuids::uuid &, co"
            "nst std::string &, const std::string &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v22, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberFn = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const boost::uuids::uuid &, const std::string &, const std::string &, unsigned int), Args = <const boost::uuids::uuid &, const std::string &, const std::string &, unsigned int &>]", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_10027D7B0()
{
  operator delete();
}

void sub_10027D7DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  unsigned int v9;
  double v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v10 = a6;
  v9 = sub_10027D424();
  sub_10027D904(a1, (void (*)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, double))sub_1002671A4, 0, a2, v11, &v9, &v10, a5);
}

void sub_10027D890(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  unsigned int v7;
  double v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v8 = a7;
  v7 = a5;
  sub_10027D904(a1, (void (*)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, double))sub_1002671A4, 0, a2, v9, &v7, &v8, a6);
}

void sub_10027D904(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, double)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, unsigned int *a6@<X5>, double *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, double);
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  int v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;

  if (sub_1000CC4F4(a1 + 72))
  {
    v15 = *(_QWORD *)(a1 + 240);
    if (!v15)
      operator new();
    v16 = (_QWORD *)(v15 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v17 = *(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, double))(*v16 + a2);
    else
      v17 = a2;
    v17(v16, a4, *a5, a5[1], *a6, *a7);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v18 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, boost::uuids::uuid, unsigned int, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,"
            " std::chrono::duration<long double>>), Args = <const std::string &, boost::uuids::uuid &, unsigned int &, st"
            "d::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v22 = 136446210;
      v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, boost::uuids::uuid, unsigned int, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,"
            " std::chrono::duration<long double>>), Args = <const std::string &, boost::uuids::uuid &, unsigned int &, st"
            "d::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v22, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(const std::string &, boost::uuids::uuid, unsigned int, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>>), Args = <const std::string &, boost::uuids::uuid &, unsigned int &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_10027DBB4()
{
  operator delete();
}

void sub_10027DBE0(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 240);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, a4, *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, unsigned int), Args = <const std::string &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, unsigned int), Args = <const std::string &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(const std::string &, unsigned int), Args = <const std::string &, unsigned int &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_10027DE74()
{
  operator delete();
}

uint64_t sub_10027DEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void **v10;
  void **v11;
  uint64_t v12;
  void **v14[3];
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[3];
  void **v22;
  char v23;
  _BYTE buf[18];
  __int16 v25;
  void *v26;
  __int128 __dst;
  uint64_t v28;
  __int128 v29;
  char *v30;
  uint64_t v31;

  v4 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    *(_DWORD *)buf = sub_10027D424();
    sub_10027DBE0(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_100266D54, 0, a2, (unsigned int *)buf, v21);
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    v5 = (_OWORD *)v21[0];
    v6 = (_OWORD *)v21[1];
    v14[0] = &v18;
    while (v5 != v6)
    {
      *(_OWORD *)buf = *v5;
      sub_10028E12C(v14, buf);
      v5 += 4;
    }
    *(_DWORD *)buf = sub_10027D424();
    sub_100280D6C(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_10039A6D8, 0, (uint64_t)&v18, (unsigned int *)buf, v14);
    v10 = v14[0];
    v11 = v14[1];
    *(_QWORD *)&__dst = &__p;
    while (v10 != v11)
    {
      *(_OWORD *)buf = *(_OWORD *)v10;
      sub_10028E12C((void ***)&__dst, buf);
      v10 += 30;
    }
    sub_10027AD28(a1, (uint64_t)buf);
    if (sub_10027E724(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_100323C70, 0, (uint64_t)&__p)
      && sub_10027E9A0(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_10039BAE8, 0, (uint64_t)&__p))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_100115CE4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        __dst = *(_OWORD *)a2;
        v28 = *(_QWORD *)(a2 + 16);
      }
      *((_QWORD *)&v29 + 1) = 0;
      v30 = 0;
      v31 = 0;
      v22 = (void **)&v29 + 1;
      v23 = 0;
      *((_QWORD *)&v29 + 1) = operator new(0x18uLL);
      v30 = (char *)*((_QWORD *)&v29 + 1);
      v31 = *((_QWORD *)&v29 + 1) + 24;
      v30 = sub_10028E070((uint64_t)&v31, &__dst, &v29, *((char **)&v29 + 1));
      v8 = sub_10027EC1C(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_10026834C, 0, (uint64_t)&v29 + 8);
      v22 = (void **)&v29 + 1;
      sub_100259608(&v22);
      if (SHIBYTE(v28) < 0)
        operator delete((void *)__dst);
      if ((_DWORD)v8)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          sub_100115CE4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          __dst = *(_OWORD *)a2;
          v28 = *(_QWORD *)(a2 + 16);
        }
        *((_QWORD *)&v29 + 1) = 0;
        v30 = 0;
        v31 = 0;
        v22 = (void **)&v29 + 1;
        v23 = 0;
        *((_QWORD *)&v29 + 1) = operator new(0x18uLL);
        v30 = (char *)*((_QWORD *)&v29 + 1);
        v31 = *((_QWORD *)&v29 + 1) + 24;
        v30 = sub_10028E070((uint64_t)&v31, &__dst, &v29, *((char **)&v29 + 1));
        v8 = sub_10027EE98(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_1003AE2FC, 0, (uint64_t)&v29 + 8);
        v22 = (void **)&v29 + 1;
        sub_100259608(&v22);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)__dst);
      }
    }
    else
    {
      v8 = 0;
    }
    if (*(uint64_t *)(a1 + 160) <= 0)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = *(_QWORD *)(a1 + 160);
    sub_100053048(v4, v12);
    sub_1000C7B24(buf);
    *(_QWORD *)buf = v14;
    sub_100270C6C((void ***)buf);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
    *(_QWORD *)buf = v21;
    sub_1002699DC((void ***)buf);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v7 = qword_1022A00F8;
    v8 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v9 = (void *)a2;
      else
        v9 = *(void **)a2;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v25 = 2081;
      v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Attempt to purge data for client without a backing database\", \"clientId\":%{private, location:escape_only}s}", buf, 0x1Cu);
      return 0;
    }
  }
  return v8;
}

#error "10027E5F4: call analysis failed (funcsize=200)"

void sub_10027E6C8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v6;

  v6 = sub_10027D424();
  sub_100280D6C(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_10039A6D8, 0, a2, &v6, a3);
}

uint64_t sub_10027E724(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD *, uint64_t);
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  _WORD v15[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 216);
    if (!v7)
      operator new();
    v8 = (_QWORD *)(v7 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a2);
    else
      v9 = a2;
    return v9(v8, a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to delete entries without a backing database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to delete entries without a backing database", v15, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberFn = BOOL (CLMicroLocationMeasurementTable::*)(const std::vector<boost::uuids::uuid> &), Args = <std::vector<boost::uuids::uuid> &>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
}

void sub_10027E974()
{
  operator delete();
}

uint64_t sub_10027E9A0(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD *, uint64_t);
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  _WORD v15[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 232);
    if (!v7)
      operator new();
    v8 = (_QWORD *)(v7 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a2);
    else
      v9 = a2;
    return v9(v8, a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to delete entries without a backing database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to delete entries without a backing database", v15, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = BOOL (CLMicroLocationRecordingEventsTable::*)(const std::vector<boost::uuids::uuid> &), Args = <std::vector<boost::uuids::uuid> &>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
}

void sub_10027EBF0()
{
  operator delete();
}

uint64_t sub_10027EC1C(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD *, uint64_t);
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  _WORD v15[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 240);
    if (!v7)
      operator new();
    v8 = (_QWORD *)(v7 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a2);
    else
      v9 = a2;
    return v9(v8, a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to delete entries without a backing database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to delete entries without a backing database", v15, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberFn = BOOL (CLMicroLocationRecordingLabelsTable::*)(const std::vector<std::string> &), Args = <std::vector<std::string>>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
}

void sub_10027EE6C()
{
  operator delete();
}

uint64_t sub_10027EE98(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD *, uint64_t);
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  _WORD v15[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 224);
    if (!v7)
      operator new();
    v8 = (_QWORD *)(v7 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a2);
    else
      v9 = a2;
    return v9(v8, a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to delete entries without a backing database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to delete entries without a backing database", v15, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = BOOL (CLMicroLocationModelTable::*)(const std::vector<std::string> &), Args = <std::vector<std::string>>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
}

void sub_10027F0E8()
{
  operator delete();
}

void sub_10027F114(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;

  v4 = sub_10027D424();
  sub_10027F160(a1, (void (*)(_QWORD *, _QWORD))sub_100266560, 0, &v4, a2);
}

void sub_10027F160(uint64_t a1@<X0>, void (*a2)(_QWORD *, _QWORD)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD);
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  int v16;
  const char *v17;
  uint8_t buf[4];
  const char *v19;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 240);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(void (**)(_QWORD *, _QWORD))(*v10 + a2);
    else
      v11 = a2;
    v11(v10, *a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<std::string> (CLMicroLocationRecordingLabelsTable::*), Args = <unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v16 = 136446210;
      v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<std::string> (CLMicroLocationRecordingLabelsTable::*), Args = <unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v16, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberFn = std::vector<std::string> (CLMicroLocationRecordingLabelsTable::*), Args = <unsigned int &>]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_10027F3EC()
{
  operator delete();
}

void sub_10027F418(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v5;
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  v5 = a2;
  sub_10027F47C(a1, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD))sub_1003AA188, 0, &v5, v6, a5);
}

void sub_10027F47C(uint64_t a1@<X0>, void (*a2)(_QWORD *, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, _QWORD, _QWORD, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 224);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, *a4, *a5, a5[1]);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, boost::uuids::uuid), Args = <CLMicroLocationProto::Model_ModelType &, boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, boost::uuids::uuid), Args = <CLMicroLocationProto::Model_ModelType &, boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_ModelType, boost::uuids::uuid), Args = <CLMicroLocationProto::Model_ModelType &, boost::uuids::uuid &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[280] = 0;
  }
}

void sub_10027F710()
{
  operator delete();
}

void sub_10027F73C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  _QWORD v5[2];

  v5[0] = a3;
  v5[1] = a4;
  sub_10027F7A0(a1, (void (*)(_QWORD *, uint64_t, _QWORD, _QWORD))sub_1003AA33C, 0, a2, v5, a5);
}

void sub_10027F7A0(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, _QWORD, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 224);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, a4, *a5, a5[1]);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(const std::string &, boost::uui"
            "ds::uuid), Args = <const std::string &, boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(const std::string &, boost::uui"
            "ds::uuid), Args = <const std::string &, boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(const std::string &, boost::uuids::uuid), Args = <const std::string &, boost::uuids::uuid &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[280] = 0;
  }
}

void sub_10027FA34()
{
  operator delete();
}

void sub_10027FA60(uint64_t a1@<X0>, unsigned int a2@<W1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v5;

  v5 = a2;
  sub_10027FA98(a1, (void (*)(uint64_t, uint64_t, void **, __int128 *))sub_1003A9A7C, 0, &v5, a3, a4, a5);
}

void sub_10027FA98(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, void **, __int128 *)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  void *__p[2];
  char v20;
  char v21;
  __int128 v22;
  char v23;
  int v24;
  const char *v25;
  uint8_t buf[4];
  const char *v27;

  if (sub_1000CC4F4(a1 + 72))
  {
    v14 = *(_QWORD *)(a1 + 224);
    if (!v14)
      operator new();
    if ((a3 & 1) != 0)
      a2 = *(void (**)(uint64_t, uint64_t, void **, __int128 *))(*(_QWORD *)(v14 + (a3 >> 1)) + a2);
    v15 = *a4;
    sub_10028DF70((uint64_t)__p, a5);
    v22 = *a6;
    v23 = *((_BYTE *)a6 + 16);
    a2(v14 + (a3 >> 1), v15, __p, &v22);
    if (v21)
    {
      if (v20 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v16 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, std::optional<const std::string>, std::optional<boost::uuids::uuid>), Args = <CLMicroLocationProto::"
            "Model_ModelType &, std::optional<const std::string> &, std::optional<boost::uuids::uuid> &>]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v24 = 136446210;
      v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, std::optional<const std::string>, std::optional<boost::uuids::uuid>), Args = <CLMicroLocationProto::"
            "Model_ModelType &, std::optional<const std::string> &, std::optional<boost::uuids::uuid> &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v24, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_ModelType, std::optional<const std::string>, std::optional<boost::uuids::uuid>), Args = <CLMicroLocationProto::Model_ModelType &, std::optional<const std::string> &, std::optional<boost::uuids::uuid> &>]", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    *a7 = 0;
    a7[280] = 0;
  }
}

void sub_10027FD40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  operator delete();
}

void sub_10027FD8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  _QWORD v5[2];

  v5[0] = a3;
  v5[1] = a4;
  sub_10027F7A0(a1, (void (*)(_QWORD *, uint64_t, _QWORD, _QWORD))sub_1003AA488, 0, a2, v5, a5);
}

void sub_10027FDF0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  void **v13;
  uint8_t buf[40];
  void *__p;
  char v16;
  char v17;

  v4 = sub_10027D424();
  v12 = v4;
  if (v4)
  {
    v5 = v4;
    sub_1002800E4(a1, (void (*)(_QWORD *))sub_10039F3A0, 0, buf);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (v17)
    {
      v11 = v5 - 1;
      sub_100280388(a1, (void (*)(_QWORD *, _QWORD))sub_1002ABD0C, 0, &v11, &v9);
      sub_10028E2E4(a2);
      *(_OWORD *)a2 = v9;
      a2[2] = v10;
      v10 = 0;
      v9 = 0uLL;
      v13 = (void **)&v9;
      sub_10028E258(&v13);
      if (!v17)
        sub_10028DF3C();
      sub_100280640(a2, *a2, (unint64_t)buf);
    }
    else
    {
      sub_100280798(a1, (void (*)(_QWORD *, _QWORD))sub_1002ABD0C, 0, &v12, &v9);
      sub_10028E2E4(a2);
      *(_OWORD *)a2 = v9;
      a2[2] = v10;
      v10 = 0;
      v9 = 0uLL;
      v13 = (void **)&v9;
      sub_10028E258(&v13);
    }
    if (v17)
    {
      if (v16 < 0)
        operator delete(__p);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Database selection limit is not positive. Not selecting LOI Groups", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      LOWORD(v9) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Database selection limit is not positive. Not selecting LOI Groups", &v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "std::vector<CLMiLoLoiTable::Entry> CLMicroLocationDatabase::selectAllLoiGroups()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1002800A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_10028E258((void ***)&a11);
  if (a28)
  {
    if (a27 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002800E4(uint64_t a1@<X0>, void (*a2)(_QWORD *)@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  int v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;

  if (sub_1000CC4F4(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 232);
    if (!v7)
      operator new();
    v8 = (_QWORD *)(v7 + (a3 >> 1));
    if ((a3 & 1) != 0)
      (*(void (**)(_QWORD *))(*v8 + a2))(v8);
    else
      a2(v8);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v9 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMiLoLoiTable::Entry> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v13 = 136446210;
      v14 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMiLoLoiTable::Entry> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v13, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::optional<CLMiLoLoiTable::Entry> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    *a4 = 0;
    a4[64] = 0;
  }
}

void sub_10028035C()
{
  operator delete();
}

void sub_100280388(uint64_t a1@<X0>, void (*a2)(_QWORD *, _QWORD)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD);
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  int v16;
  const char *v17;
  uint8_t buf[4];
  const char *v19;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 280);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(void (**)(_QWORD *, _QWORD))(*v10 + a2);
    else
      v11 = a2;
    v11(v10, *a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <const unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v16 = 136446210;
      v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <const unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v16, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<CLMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <const unsigned int &>]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_100280614()
{
  operator delete();
}

unint64_t sub_100280640(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = (a2 - *a1) >> 6;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v14 = ((uint64_t)(v6 - v7) >> 6) + 1;
    if (v14 >> 58)
      sub_100259694();
    v15 = v10 - v7;
    if (v15 >> 5 > v14)
      v14 = v15 >> 5;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0)
      v16 = 0x3FFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v23 = v9;
    if (v16)
      v17 = (char *)sub_1002697F0(v9, v16);
    else
      v17 = 0;
    v19 = v17;
    v20 = &v17[64 * v8];
    v21 = v20;
    v22 = &v17[64 * v16];
    sub_10028E410(&v19, (__int128 *)a3);
    v4 = sub_10028E580((uint64_t)a1, &v19, (__int128 *)v4);
    sub_10028E98C((uint64_t)&v19);
  }
  else if (a2 == v6)
  {
    sub_10028E31C((uint64_t)a1, (__int128 *)a3);
  }
  else
  {
    sub_10028E38C((uint64_t)a1, a2, v6, a2 + 64);
    if (v4 <= a3)
      a3 += (unint64_t)(a1[1] > a3) << 6;
    v12 = *(_OWORD *)a3;
    v13 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)v4 = v12;
    *(_OWORD *)(v4 + 16) = v13;
    std::string::operator=((std::string *)(v7 + (v8 << 6) + 40), (const std::string *)(a3 + 40));
  }
  return v4;
}

void sub_100280784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10028E98C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100280798(uint64_t a1@<X0>, void (*a2)(_QWORD *, _QWORD)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD);
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  int v16;
  const char *v17;
  uint8_t buf[4];
  const char *v19;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 280);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(void (**)(_QWORD *, _QWORD))(*v10 + a2);
    else
      v11 = a2;
    v11(v10, *a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v16 = 136446210;
      v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v16, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<CLMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <unsigned int &>]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_100280A24()
{
  operator delete();
}

void sub_100280A50(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v6;

  v6 = sub_10027D424();
  sub_100280AAC(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_100322D2C, 0, a2, &v6, a3);
}

void sub_100280AAC(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 216);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, a4, *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const std::vect"
            "or<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const std::vect"
            "or<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberFn = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_100280D40()
{
  operator delete();
}

void sub_100280D6C(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 232);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, a4, *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_100281000()
{
  operator delete();
}

void sub_10028102C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v6;

  v6 = sub_10027D424();
  sub_100280D6C(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_10039B0E0, 0, a2, &v6, a3);
}

void sub_100281088(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  CFStringRef v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  char v21;

  sub_1001E4804(&v18);
  v17 = 0;
  v10 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLearningRecordingLimit", 0x8000100u, kCFAllocatorNull);
  v11 = sub_1000B1180(v18, (uint64_t)v10, &v17);
  CFRelease(v10);
  v12 = v17;
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v11)
    v16 = v12;
  else
    v16 = 500;
  v20 = *(_OWORD *)a4;
  v21 = *(_BYTE *)(a4 + 16);
  LODWORD(v18) = v16;
  sub_100281228(a1, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, __int128 *))sub_10039C60C, 0, a2, (unsigned int *)&v18, a3, &v20, a5);
}

void sub_1002811D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100281228(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, __int128 *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  __int128 v22;
  char v23;
  int v24;
  const char *v25;
  uint8_t buf[4];
  const char *v27;

  if (sub_1000CC4F4(a1 + 72))
  {
    v16 = *(_QWORD *)(a1 + 232);
    if (!v16)
      operator new();
    v17 = (_QWORD *)(v16 + (a3 >> 1));
    if ((a3 & 1) != 0)
      a2 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, __int128 *))(*v17 + a2);
    v18 = *a5;
    v22 = *a7;
    v23 = *((_BYTE *)a7 + 16);
    a2(v17, a4, v18, a6, &v22);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v19 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, unsigned int, const std::string &, std::optional<boost::u"
            "uids::uuid>), Args = <const std::vector<CLMicroLocationProto::EventType> &, unsigned int &, const std::strin"
            "g &, std::optional<boost::uuids::uuid> &>]";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v24 = 136446210;
      v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, unsigned int, const std::string &, std::optional<boost::u"
            "uids::uuid>), Args = <const std::vector<CLMicroLocationProto::EventType> &, unsigned int &, const std::strin"
            "g &, std::optional<boost::uuids::uuid> &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v24, 12);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std::vector<CLMicroLocationProto::EventType> &, unsigned int, const std::string &, std::optional<boost::uuids::uuid>), Args = <const std::vector<CLMicroLocationProto::EventType> &, unsigned int &, const std::string &, std::optional<boost::uuids::uuid> &>]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_1002814AC()
{
  operator delete();
}

void sub_1002814D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v10;

  v10 = sub_10027D424();
  sub_10028154C(a1, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))sub_10039EA00, 0, a2, a3, a4, &v10, a5);
}

void sub_10028154C(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD);
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  int v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;

  if (sub_1000CC4F4(a1 + 72))
  {
    v15 = *(_QWORD *)(a1 + 232);
    if (!v15)
      operator new();
    v16 = (_QWORD *)(v15 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v17 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*v16 + a2);
    else
      v17 = a2;
    v17(v16, a4, a5, a6, *a7);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v18 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::string &, const std::string &, const boost::uuids::uuid &, unsigned int), Args = <const std::string "
            "&, const std::string &, const boost::uuids::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v22 = 136446210;
      v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::string &, const std::string &, const boost::uuids::uuid &, unsigned int), Args = <const std::string "
            "&, const std::string &, const boost::uuids::uuid &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v22, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std::string &, const std::string &, const boost::uuids::uuid &, unsigned int), Args = <const std::string &, const std::string &, const boost::uuids::uuid &, unsigned int &>]", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_1002817FC()
{
  operator delete();
}

void sub_100281828(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  sub_100281844(a1, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))sub_10039D794, 0, a2, a3, a4, a5);
}

void sub_100281844(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  int v19;
  const char *v20;
  uint8_t buf[4];
  const char *v22;

  if (sub_1000CC4F4(a1 + 72))
  {
    v13 = *(_QWORD *)(a1 + 232);
    if (!v13)
      operator new();
    v14 = (_QWORD *)(v13 + (a3 >> 1));
    if ((a3 & 1) != 0)
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v14 + a2))(v14, a4, a5, a6);
    else
      a2(v14, a4, a5, a6);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v15 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &), Args = <const "
            "std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &>]";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v19 = 136446210;
      v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &), Args = <const "
            "std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v19, 12);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &), Args = <const std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &>]", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
}

void sub_100281AEC()
{
  operator delete();
}

double sub_100281B18(uint64_t a1)
{
  return sub_100281B28(a1, (double (*)(_QWORD *))sub_10039F01C, 0);
}

double sub_100281B28(uint64_t a1, double (*a2)(_QWORD *), uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  double v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  int v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;

  if (sub_1000CC4F4(a1 + 72))
  {
    v6 = *(_QWORD *)(a1 + 232);
    if (!v6)
      operator new();
    v7 = (_QWORD *)(v6 + (a3 >> 1));
    if ((a3 & 1) != 0)
      a2 = *(double (**)(_QWORD *))(*v7 + a2);
    return a2(v7);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v9 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> (CLMicr"
            "oLocationRecordingEventsTable::*)(), Args = <>]";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    v8 = 0.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v13 = 136446210;
      v14 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> (CLMicr"
            "oLocationRecordingEventsTable::*)(), Args = <>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v13, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return v8;
}

void sub_100281D70()
{
  operator delete();
}

void sub_100281D9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v10;

  v10 = sub_10027D424();
  sub_100281E10(a1, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))sub_10038D00C, 0, a2, a3, a4, &v10, a5);
}

void sub_100281E10(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD);
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  int v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;

  if (sub_1000CC4F4(a1 + 72))
  {
    v15 = *(_QWORD *)(a1 + 248);
    if (!v15)
      operator new();
    v16 = (_QWORD *)(v15 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v17 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*v16 + a2);
    else
      v17 = a2;
    v17(v16, a4, a5, a6, *a7);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v18 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::vector<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::s"
            "tring &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int), Args = <c"
            "onst std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v22 = 136446210;
      v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::vector<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::s"
            "tring &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int), Args = <c"
            "onst std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v22, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, MemberFn = std::vector<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int), Args = <const std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int &>]", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_1002820C0()
{
  operator delete();
}

void sub_1002820EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  sub_100282104(a1, (void (*)(_QWORD *, uint64_t, uint64_t))sub_10038D144, 0, a2, a3, a4);
}

void sub_100282104(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 248);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v12 + a2))(v12, a4, a5);
    else
      a2(v12, a4, a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v13 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::optional<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std:"
            ":string &, const std::vector<CLMicroLocationProto::EventType> &), Args = <const std::string &, const std::ve"
            "ctor<CLMicroLocationProto::EventType> &>]";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v17 = 136446210;
      v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::optional<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std:"
            ":string &, const std::vector<CLMicroLocationProto::EventType> &), Args = <const std::string &, const std::ve"
            "ctor<CLMicroLocationProto::EventType> &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v17, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, MemberFn = std::optional<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::string &, const std::vector<CLMicroLocationProto::EventType> &), Args = <const std::string &, const std::vector<CLMicroLocationProto::EventType> &>]", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    *a6 = 0;
    a6[336] = 0;
  }
}

void sub_100282398()
{
  operator delete();
}

void sub_1002823C4(uint64_t a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  int v3;

  v3 = 1;
  sub_100282404(a1, (void (*)(_QWORD *, uint64_t, _BYTE *, __int128 *))sub_1002A5D88, 0, (uint64_t)&v3, a2, a3);
}

void sub_100282404(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _BYTE *, __int128 *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X5>, _BYTE *a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  __int128 v17;
  char v18;
  _BYTE __p[12];
  char v20;
  char v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v12 = *(_QWORD *)(a1 + 208);
    if (!v12)
      operator new();
    v13 = (_QWORD *)(v12 + (a3 >> 1));
    if ((a3 & 1) != 0)
      a2 = *(void (**)(_QWORD *, uint64_t, _BYTE *, __int128 *))(*v13 + a2);
    __p[0] = 0;
    v21 = 0;
    v17 = *a5;
    v18 = 1;
    a2(v13, a4, __p, &v17);
    if (v21)
    {
      if (v20 < 0)
        operator delete(*(void **)__p);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurat"
                           "ionTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocation"
                           "ConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<c"
                           "onst std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocatio"
                           "nProto::ConfigurationType, const std::nullopt_t &, const boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      LODWORD(v17) = 136446210;
      *(_QWORD *)((char *)&v17 + 4) = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocatio"
                                      "nConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::E"
                                      "ntry> (CLMicroLocationConfigurationTable::*)(const CLMicroLocationProto::Configura"
                                      "tionType &, const std::optional<const std::string> &, const std::optional<const bo"
                                      "ost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::"
                                      "nullopt_t &, const boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v17, 12);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::nullopt_t &, const boost::uuids::uuid &>]", "%s\n", v15);
      if (v16 != __p)
        free(v16);
    }
    *a6 = 0;
    a6[112] = 0;
  }
}

void sub_10028269C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  operator delete();
}

void sub_1002826E8(uint64_t a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  int v3;

  v3 = 0;
  sub_100282404(a1, (void (*)(_QWORD *, uint64_t, _BYTE *, __int128 *))sub_1002A5D88, 0, (uint64_t)&v3, a2, a3);
}

void sub_100282724(uint64_t a1@<X0>, __int128 *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  sub_100282748(a1, (void (*)(_QWORD *, _BYTE *, __int128 *, _QWORD, uint64_t))sub_1002A5624, 0, a2, a3, a4, a5);
}

void sub_100282748(uint64_t a1@<X0>, void (*a2)(_QWORD *, _BYTE *, __int128 *, _QWORD, uint64_t)@<X1>, uint64_t a3@<X2>, __int128 *a4@<X4>, unsigned int *a5@<X5>, uint64_t a6@<X6>, _BYTE *a7@<X8>)
{
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  __int128 v19;
  char v20;
  _BYTE __p[12];
  char v22;
  char v23;

  if (sub_1000CC4F4(a1 + 72))
  {
    v14 = *(_QWORD *)(a1 + 208);
    if (!v14)
      operator new();
    v15 = (_QWORD *)(v14 + (a3 >> 1));
    if ((a3 & 1) != 0)
      a2 = *(void (**)(_QWORD *, _BYTE *, __int128 *, _QWORD, uint64_t))(*v15 + a2);
    __p[0] = 0;
    v23 = 0;
    v19 = *a4;
    v20 = 1;
    a2(v15, __p, &v19, *a5, a6);
    if (v23)
    {
      if (v22 < 0)
        operator delete(*(void **)__p);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v16 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurat"
                           "ionTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocation"
                           "ConfigurationTable::*)(const std::optional<const std::string> &, const std::optional<const bo"
                           "ost::uuids::uuid> &, CLMicroLocationProto::ConfigurationType, const std::string &), Args = <c"
                           "onst std::nullopt_t &, const boost::uuids::uuid &, const CLMicroLocationProto::ConfigurationT"
                           "ype &, const std::string &>]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      LODWORD(v19) = 136446210;
      *(_QWORD *)((char *)&v19 + 4) = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocatio"
                                      "nConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::E"
                                      "ntry> (CLMicroLocationConfigurationTable::*)(const std::optional<const std::string"
                                      "> &, const std::optional<const boost::uuids::uuid> &, CLMicroLocationProto::Config"
                                      "urationType, const std::string &), Args = <const std::nullopt_t &, const boost::uu"
                                      "ids::uuid &, const CLMicroLocationProto::ConfigurationType &, const std::string &>]";
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v19, 12);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &, CLMicroLocationProto::ConfigurationType, const std::string &), Args = <const std::nullopt_t &, const boost::uuids::uuid &, const CLMicroLocationProto::ConfigurationType &, const std::string &>]", "%s\n", v17);
      if (v18 != __p)
        free(v18);
    }
    *a7 = 0;
    a7[112] = 0;
  }
}

void sub_1002829E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  operator delete();
}

void sub_100282A34(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v3;

  v3 = 2;
  sub_100282A74(a1, (void (*)(uint64_t, uint64_t, uint8_t *, int *))sub_1002A5D88, 0, (uint64_t)&v3, a2, a3);
}

void sub_100282A74(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint8_t *, int *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  const char *v17;
  char v18;
  uint8_t buf[16];
  uint64_t v20;
  char v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v12 = *(_QWORD *)(a1 + 208);
    if (!v12)
      operator new();
    if ((a3 & 1) != 0)
      a2 = *(void (**)(uint64_t, uint64_t, uint8_t *, int *))(*(_QWORD *)(v12 + (a3 >> 1)) + a2);
    if (*(char *)(a5 + 23) < 0)
    {
      sub_100115CE4(buf, *(void **)a5, *(_QWORD *)(a5 + 8));
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)a5;
      v20 = *(_QWORD *)(a5 + 16);
    }
    v21 = 1;
    LOBYTE(v16) = 0;
    v18 = 0;
    a2(v12 + (a3 >> 1), a4, buf, &v16);
    if (v21)
    {
      if (SHIBYTE(v20) < 0)
        operator delete(*(void **)buf);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v13 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurat"
                           "ionTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocation"
                           "ConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<c"
                           "onst std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocatio"
                           "nProto::ConfigurationType, const std::string &, const std::nullopt_t &>]";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v16 = 136446210;
      v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, Membe"
            "rFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const C"
            "LMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<cons"
            "t boost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::string &, const std::nullopt_t &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v16, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::string &, const std::nullopt_t &>]", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    *a6 = 0;
    a6[112] = 0;
  }
}

void sub_100282D30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  operator delete();
}

void sub_100282D7C(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  sub_100282D90(a1, (void (*)(_QWORD *, _QWORD, _QWORD))sub_1002A6440, 0, a2, a3);
}

void sub_100282D90(uint64_t a1@<X0>, void (*a2)(_QWORD *, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD, _QWORD);
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  int v16;
  const char *v17;
  uint8_t buf[4];
  const char *v19;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 208);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*v10 + a2);
    else
      v11 = a2;
    v11(v10, *a4, a4[1]);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, Membe"
            "rFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(boost::"
            "uuids::uuid), Args = <const boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v16 = 136446210;
      v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, Membe"
            "rFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(boost::"
            "uuids::uuid), Args = <const boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v16, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(boost::uuids::uuid), Args = <const boost::uuids::uuid &>]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *a5 = 0;
    a5[112] = 0;
  }
}

void sub_10028301C()
{
  operator delete();
}

void sub_100283048(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v10;

  v10 = sub_10027D424();
  sub_1002830C4(a1, (void (*)(_QWORD *, uint64_t, uint64_t, _BYTE *, __int128 *, _QWORD))sub_100293FA8, 0, a2, a3, a4, &v10, a5);
}

void sub_1002830C4(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t, _BYTE *, __int128 *, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X6>, unsigned int *a7@<X7>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  _QWORD *v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  __int128 v21;
  char v22;
  _BYTE __p[12];
  char v24;
  char v25;

  if (sub_1000CC4F4(a1 + 72))
  {
    v16 = *(_QWORD *)(a1 + 256);
    if (!v16)
      operator new();
    v17 = (_QWORD *)(v16 + (a3 >> 1));
    if ((a3 & 1) != 0)
      a2 = *(void (**)(_QWORD *, uint64_t, uint64_t, _BYTE *, __int128 *, _QWORD))(*v17 + a2);
    __p[0] = 0;
    v25 = 0;
    v21 = *a6;
    v22 = 1;
    a2(v17, a4, a5, __p, &v21, *a7);
    if (v25)
    {
      if (v24 < 0)
        operator delete(*(void **)__p);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v18 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRapportTab"
                           "le, MemberFn = std::vector<CLMicroLocationRapportTable::Entry> (CLMicroLocationRapportTable::"
                           "*)(const std::string &, const std::string &, const std::optional<const std::string> &, const "
                           "std::optional<const boost::uuids::uuid> &, unsigned int), Args = <const std::string &, const "
                           "std::string &, const std::nullopt_t &, const boost::uuids::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      LODWORD(v21) = 136446210;
      *(_QWORD *)((char *)&v21 + 4) = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocatio"
                                      "nRapportTable, MemberFn = std::vector<CLMicroLocationRapportTable::Entry> (CLMicro"
                                      "LocationRapportTable::*)(const std::string &, const std::string &, const std::opti"
                                      "onal<const std::string> &, const std::optional<const boost::uuids::uuid> &, unsign"
                                      "ed int), Args = <const std::string &, const std::string &, const std::nullopt_t &,"
                                      " const boost::uuids::uuid &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v21, 12);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRapportTable, MemberFn = std::vector<CLMicroLocationRapportTable::Entry> (CLMicroLocationRapportTable::*)(const std::string &, const std::string &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &, unsigned int), Args = <const std::string &, const std::string &, const std::nullopt_t &, const boost::uuids::uuid &, unsigned int &>]", "%s\n", v19);
      if (v20 != __p)
        free(v20);
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_10028336C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  operator delete();
}

uint64_t sub_1002833B8(uint64_t a1)
{
  return sub_1002833C8(a1, (uint64_t (*)(_QWORD *))sub_1002AB850, 0);
}

uint64_t sub_1002833C8(uint64_t a1, uint64_t (*a2)(_QWORD *), uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD *);
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;

  if (sub_1000CC4F4(a1 + 72))
  {
    v5 = *(_QWORD *)(a1 + 280);
    if (!v5)
      operator new();
    v6 = (_QWORD *)(v5 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v7 = *(uint64_t (**)(_QWORD *))(*v6 + a2);
    else
      v7 = a2;
    return v7(v6);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v8 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = unsigned int "
            "(CLMiLoLoiTable::*)(), Args = <>]";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v13 = 136446210;
      v14 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = unsigned int "
            "(CLMiLoLoiTable::*)(), Args = <>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v13, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = unsigned int (CLMiLoLoiTable::*)(), Args = <>]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return 0;
  }
}

void sub_100283634()
{
  operator delete();
}

void sub_100283660(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v6;

  v6 = sub_10027D424();
  sub_1002836BC(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_1002AB568, 0, a2, &v6, a3);
}

void sub_1002836BC(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 280);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, a4, *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uu"
            "ids::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uu"
            "ids::uuid &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<CLMiLoLoiTable::Entry> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uuids::uuid &, unsigned int &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_100283950()
{
  operator delete();
}

void sub_10028397C(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  sub_100283990(a1, (void (*)(_QWORD *, uint64_t))sub_10039F748, 0, a2, a3);
}

void sub_100283990(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  int v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 232);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      (*(void (**)(_QWORD *, uint64_t))(*v10 + a2))(v10, a4);
    else
      a2(v10, a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(c"
            "onst boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v15 = 136446210;
      v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(c"
            "onst boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v15, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::optional<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *a5 = 0;
    a5[240] = 0;
  }
}

void sub_100283C1C()
{
  operator delete();
}

void sub_100283C48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v8;

  v8 = sub_10027D424();
  sub_100283CAC(a1, (void (*)(_QWORD *, uint64_t, uint64_t, _QWORD))sub_10029C30C, 0, a2, a3, &v8, a4);
}

void sub_100283CAC(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  _QWORD *v14;
  void (*v15)(_QWORD *, uint64_t, uint64_t, _QWORD);
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  int v20;
  const char *v21;
  uint8_t buf[4];
  const char *v23;

  if (sub_1000CC4F4(a1 + 72))
  {
    v13 = *(_QWORD *)(a1 + 296);
    if (!v13)
      operator new();
    v14 = (_QWORD *)(v13 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v15 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v14 + a2);
    else
      v15 = a2;
    v15(v14, a4, a5, *a6);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v16 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationBluetoothIdentityTable, M"
            "emberFn = std::vector<CLMicroLocationBluetoothIdentityTable::Entry> (CLMicroLocationBluetoothIdentityTable::"
            "*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &"
            ", unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v20 = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationBluetoothIdentityTable, M"
            "emberFn = std::vector<CLMicroLocationBluetoothIdentityTable::Entry> (CLMicroLocationBluetoothIdentityTable::"
            "*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &"
            ", unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v20, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationBluetoothIdentityTable, MemberFn = std::vector<CLMicroLocationBluetoothIdentityTable::Entry> (CLMicroLocationBluetoothIdentityTable::*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &, unsigned int &>]", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
}

void sub_100283F54()
{
  operator delete();
}

uint64_t sub_100283F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100283F98(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_100387C1C, 0, a2, a3);
}

uint64_t sub_100283F98(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 288);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v10 + a2);
    else
      v11 = a2;
    return v11(v10, a4, a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = BOOL (C"
            "LMiLoCustomLoiTable::*)(const std::string &, const boost::uuids::uuid &), Args = <const std::string &, const"
            " boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v17 = 136446210;
      v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = BOOL (C"
            "LMiLoCustomLoiTable::*)(const std::string &, const boost::uuids::uuid &), Args = <const std::string &, const"
            " boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v17, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = BOOL (CLMiLoCustomLoiTable::*)(const std::string &, const boost::uuids::uuid &), Args = <const std::string &, const boost::uuids::uuid &>]", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
}

void sub_100284220()
{
  operator delete();
}

uint64_t sub_10028424C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100283F98(a1, sub_100387EE0, 0, a2, a3);
}

void sub_100284264(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_100284278(a1, (void (*)(_QWORD *, uint64_t))sub_100388894, 0, a2, a3);
}

void sub_100284278(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  int v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 288);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      (*(void (**)(_QWORD *, uint64_t))(*v10 + a2))(v10, a4);
    else
      a2(v10, a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v15 = 136446210;
      v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v15, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::vector<std::string> (CLMiLoCustomLoiTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_100284504()
{
  operator delete();
}

void sub_100284530(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;

  v4 = sub_10027D424();
  sub_10028457C(a1, (void (*)(_QWORD *, _QWORD))sub_10038907C, 0, &v4, a2);
}

void sub_10028457C(uint64_t a1@<X0>, void (*a2)(_QWORD *, _QWORD)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD);
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  int v16;
  const char *v17;
  uint8_t buf[4];
  const char *v19;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 288);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(void (**)(_QWORD *, _QWORD))(*v10 + a2);
    else
      v11 = a2;
    v11(v10, *a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<boost::uuids::uuid> (CLMiLoCustomLoiTable::*), Args = <unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v16 = 136446210;
      v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<boost::uuids::uuid> (CLMiLoCustomLoiTable::*), Args = <unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v16, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::vector<boost::uuids::uuid> (CLMiLoCustomLoiTable::*), Args = <unsigned int &>]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_100284808()
{
  operator delete();
}

void sub_100284834(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v8;

  v8 = sub_10027D424();
  sub_100284898(a1, (void (*)(_QWORD *, uint64_t, uint64_t, _QWORD))sub_100350AE0, 0, a2, a3, &v8, a4);
}

void sub_100284898(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  _QWORD *v14;
  void (*v15)(_QWORD *, uint64_t, uint64_t, _QWORD);
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  int v20;
  const char *v21;
  uint8_t buf[4];
  const char *v23;

  if (sub_1000CC4F4(a1 + 72))
  {
    v13 = *(_QWORD *)(a1 + 264);
    if (!v13)
      operator new();
    v14 = (_QWORD *)(v13 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v15 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v14 + a2);
    else
      v15 = a2;
    v15(v14, a4, a5, *a6);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v16 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(const std::string &, const std::string &, unsigned int"
            "), Args = <const std::string &, const std::string &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v20 = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(const std::string &, const std::string &, unsigned int"
            "), Args = <const std::string &, const std::string &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v20, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vector<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &, unsigned int &>]", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
}

void sub_100284B40()
{
  operator delete();
}

void sub_100284B6C(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned int v5;
  unsigned int v6;

  v6 = a2;
  v5 = sub_10027D424();
  sub_100284BC0(a1, (void (*)(_QWORD *, _QWORD, _QWORD))sub_100351130, 0, &v6, &v5, a3);
}

void sub_100284BC0(uint64_t a1@<X0>, void (*a2)(_QWORD *, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, _QWORD, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 264);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, *a4, *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(unsigned int, unsigned int), Args = <unsigned int &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(unsigned int, unsigned int), Args = <unsigned int &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vector<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(unsigned int, unsigned int), Args = <unsigned int &, unsigned int &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_100284E54()
{
  operator delete();
}

void sub_100284E80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  sub_100284EDC(a1, (void (*)(_QWORD *, _QWORD, _QWORD))sub_100351534, 0, v4, a4);
}

void sub_100284EDC(uint64_t a1@<X0>, void (*a2)(_QWORD *, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD, _QWORD);
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  int v16;
  const char *v17;
  uint8_t buf[4];
  const char *v19;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 264);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*v10 + a2);
    else
      v11 = a2;
    v11(v10, *a4, a4[1]);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::opti"
            "onal<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v16 = 136446210;
      v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::opti"
            "onal<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v16, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::optional<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *a5 = 0;
    a5[88] = 0;
  }
}

void sub_100285168()
{
  operator delete();
}

uint64_t sub_100285194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_1002851F0(a1, (uint64_t (*)(_QWORD *, _QWORD, _QWORD))sub_1003519AC, 0, v4);
}

uint64_t sub_1002851F0(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD *, _QWORD, _QWORD);
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  int v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;

  if (sub_1000CC4F4(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 264);
    if (!v7)
      operator new();
    v8 = (_QWORD *)(v7 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v8 + a2);
    else
      v9 = a2;
    return v9(v8, *a4, a4[1]);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v15 = 136446210;
      v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v15, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
}

void sub_100285464()
{
  operator delete();
}

uint64_t sub_100285490(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD *, uint64_t);
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  int v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;

  if (sub_1000CC4F4(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 264);
    if (!v7)
      operator new();
    v8 = (_QWORD *)(v7 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a2);
    else
      v9 = a2;
    return v9(v8, a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(const std::vector<std::string> &), Args = <const std::vector<std::string> &>]";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v15 = 136446210;
      v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(const std::vector<std::string> &), Args = <const std::vector<std::string> &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v15, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(const std::vector<std::string> &), Args = <const std::vector<std::string> &>]", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
}

void sub_100285704()
{
  operator delete();
}

uint64_t sub_100285730(uint64_t a1, uint64_t (*a2)(_QWORD *), uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD *);
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;

  if (sub_1000CC4F4(a1 + 72))
  {
    v5 = *(_QWORD *)(a1 + 264);
    if (!v5)
      operator new();
    v6 = (_QWORD *)(v5 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v7 = *(uint64_t (**)(_QWORD *))(*v6 + a2);
    else
      v7 = a2;
    return v7(v6);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v8 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(), Args = <>]";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v13 = 136446210;
      v14 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(), Args = <>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v13, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(), Args = <>]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return 0;
  }
}

void sub_10028599C()
{
  operator delete();
}

uint64_t sub_1002859C8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v5 = a4;
  return sub_100285A2C(a1, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, double))sub_100355328, 0, v6, &v5);
}

uint64_t sub_100285A2C(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD, double), uint64_t a3, _QWORD *a4, double *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *, _QWORD, _QWORD, double);
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 264);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(*v10 + a2);
    else
      v11 = a2;
    return v11(v10, *a4, a4[1], *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono"
            "::duration<long double>>), Args = <boost::uuids::uuid &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeC"
            "lock, std::chrono::duration<long double>> &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v17 = 136446210;
      v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono"
            "::duration<long double>>), Args = <boost::uuids::uuid &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeC"
            "lock, std::chrono::duration<long double>> &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v17, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(boost::uuids::uuid, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>>), Args = <boost::uuids::uuid &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
}

void sub_100285CB4()
{
  operator delete();
}

uint64_t sub_100285CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v5 = a4;
  return sub_100285D44(a1, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD))sub_100355B38, 0, v6, &v5);
}

uint64_t sub_100285D44(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD, _QWORD), uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *, _QWORD, _QWORD, _QWORD);
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 264);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v10 + a2);
    else
      v11 = a2;
    return v11(v10, *a4, a4[1], *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, unsigned long long), Args = <boost::uuids::uuid &, unsigned long long &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v17 = 136446210;
      v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, unsigned long long), Args = <boost::uuids::uuid &, unsigned long long &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v17, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(boost::uuids::uuid, unsigned long long), Args = <boost::uuids::uuid &, unsigned long long &>]", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
}

void sub_100285FCC()
{
  operator delete();
}

void sub_100285FF8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;

  v4 = sub_10027D424();
  sub_100286044(a1, (void (*)(_QWORD *, _QWORD))sub_100397100, 0, &v4, a2);
}

void sub_100286044(uint64_t a1@<X0>, void (*a2)(_QWORD *, _QWORD)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD);
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  int v16;
  const char *v17;
  uint8_t buf[4];
  const char *v19;

  if (sub_1000CC4F4(a1 + 72))
  {
    v9 = *(_QWORD *)(a1 + 272);
    if (!v9)
      operator new();
    v10 = (_QWORD *)(v9 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v11 = *(void (**)(_QWORD *, _QWORD))(*v10 + a2);
    else
      v11 = a2;
    v11(v10, *a4);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<boost::uuids::uuid> (CLMicroLocationAssociatedStateTable::*), Args = <unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v16 = 136446210;
      v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<boost::uuids::uuid> (CLMicroLocationAssociatedStateTable::*), Args = <unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v16, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, MemberFn = std::vector<boost::uuids::uuid> (CLMicroLocationAssociatedStateTable::*), Args = <unsigned int &>]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_1002862D0()
{
  operator delete();
}

void sub_1002862FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unsigned int v10;
  _QWORD v11[2];

  v11[0] = a4;
  v11[1] = a5;
  v10 = sub_10027D424();
  sub_100286394(a1, (void (*)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))sub_100396468, 0, a2, a3, v11, &v10, a6);
}

void sub_100286394(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, unsigned int *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  int v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;

  if (sub_1000CC4F4(a1 + 72))
  {
    v15 = *(_QWORD *)(a1 + 272);
    if (!v15)
      operator new();
    v16 = (_QWORD *)(v15 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v17 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*v16 + a2);
    else
      v17 = a2;
    v17(v16, a4, a5, *a6, a6[1], *a7);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v18 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<CLMicroLocationAssociatedStateTable::Entry> (CLMicroLocationAssociatedStateTable::*)(con"
            "st std::string &, const std::string &, boost::uuids::uuid, unsigned int), Args = <const std::string &, const"
            " std::string &, boost::uuids::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v22 = 136446210;
      v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<CLMicroLocationAssociatedStateTable::Entry> (CLMicroLocationAssociatedStateTable::*)(con"
            "st std::string &, const std::string &, boost::uuids::uuid, unsigned int), Args = <const std::string &, const"
            " std::string &, boost::uuids::uuid &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v22, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, MemberFn = std::vector<CLMicroLocationAssociatedStateTable::Entry> (CLMicroLocationAssociatedStateTable::*)(const std::string &, const std::string &, boost::uuids::uuid, unsigned int), Args = <const std::string &, const std::string &, boost::uuids::uuid &, unsigned int &>]", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_100286644()
{
  operator delete();
}

void sub_100286670(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned int v6;

  v6 = sub_10027D424();
  sub_1002866CC(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_1002A961C, 0, a2, &v6, a3);
}

void sub_1002866CC(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 280);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, a4, *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::optional"
            "<boost::uuids::uuid> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uui"
            "ds::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::optional"
            "<boost::uuids::uuid> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uui"
            "ds::uuid &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::optional<boost::uuids::uuid> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uuids::uuid &, unsigned int &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[16] = 0;
  }
}

void sub_100286960()
{
  operator delete();
}

void sub_10028698C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v6;

  v6 = sub_10027D424();
  sub_1002869E8(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_1002A9AA8, 0, a2, &v6, a3);
}

void sub_1002869E8(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 280);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, a4, *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<b"
            "oost::uuids::uuid> (CLMiLoLoiTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const"
            " std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<b"
            "oost::uuids::uuid> (CLMiLoLoiTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const"
            " std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<boost::uuids::uuid> (CLMiLoLoiTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_100286C7C()
{
  operator delete();
}

uint64_t sub_100286CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100286CC4(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))sub_1002AA694, 0, a2, a3, a4);
}

uint64_t sub_100286CC4(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t, uint64_t);
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  int v19;
  const char *v20;
  uint8_t buf[4];
  const char *v22;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 280);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v12 + a2);
    else
      v13 = a2;
    return v13(v12, a4, a5, a6);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = BOOL (CLMiLoL"
            "oiTable::*)(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &), Args "
            "= <const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v19 = 136446210;
      v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = BOOL (CLMiLoL"
            "oiTable::*)(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &), Args "
            "= <const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v19, 12);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = BOOL (CLMiLoLoiTable::*)(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &), Args = <const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &>]", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    return 0;
  }
}

void sub_100286F54()
{
  operator delete();
}

void sub_100286F80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  __int128 *v7;
  unsigned int v8;
  std::string **v9;

  v8 = sub_10027D424();
  sub_100287060(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_1003AEBF4, 0, a2, &v8, (_QWORD *)a3);
  sub_100287320(a1, (void (*)(_QWORD *, uint64_t, _QWORD))sub_1003898BC, 0, a2, &v8, &v6);
  sub_10028EA14((uint64_t *)a3, *(std::string **)(a3 + 8), v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  v9 = &v6;
  sub_100259608((void ***)&v9);
}

void sub_100287030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void ***a14)
{
  a14 = &a10;
  sub_100259608((void ***)&a14);
  sub_100259608(&a10);
  _Unwind_Resume(a1);
}

void sub_100287060(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 224);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, a4, *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::vector<std::string> (CLMicroLocationModelTable::*)(const std::string &, unsigned int), Args = <const std:"
            ":string &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::vector<std::string> (CLMicroLocationModelTable::*)(const std::string &, unsigned int), Args = <const std:"
            ":string &, unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::vector<std::string> (CLMicroLocationModelTable::*)(const std::string &, unsigned int), Args = <const std::string &, unsigned int &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_1002872F4()
{
  operator delete();
}

void sub_100287320(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, _QWORD);
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (sub_1000CC4F4(a1 + 72))
  {
    v11 = *(_QWORD *)(a1 + 288);
    if (!v11)
      operator new();
    v12 = (_QWORD *)(v11 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, _QWORD))(*v12 + a2);
    else
      v13 = a2;
    v13(v12, a4, *a5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const std::string &, unsigned int), Args = <const std::string &,"
            " unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v18 = 136446210;
      v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const std::string &, unsigned int), Args = <const std::string &,"
            " unsigned int &>]";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to query %{public}s without a backing database", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::vector<std::string> (CLMiLoCustomLoiTable::*)(const std::string &, unsigned int), Args = <const std::string &, unsigned int &>]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_1002875B4()
{
  operator delete();
}

uint64_t sub_1002875E0(uint64_t a1)
{
  uint64_t v2;
  CFStringRef v3;
  int v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v9;
  CFStringRef v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  const char *v21;
  uint8_t *v22;
  _DWORD v23[4];
  uint8_t buf[8];
  std::__shared_weak_count *v25;

  v2 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    if (!sub_1002879A0(a1) || !sub_100287B64(a1))
      goto LABEL_34;
    sub_1001E4804(buf);
    v23[0] = 0;
    v3 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNumModelsToKeepForNonLSL", 0x8000100u, kCFAllocatorNull);
    v4 = sub_1000B1180(*(uint64_t *)buf, (uint64_t)v3, v23);
    CFRelease(v3);
    v5 = v23[0];
    v6 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v4)
      v9 = v5;
    else
      v9 = 12;
    sub_1001E4804(buf);
    v23[0] = 0;
    v10 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNumLSLModelsToKeep", 0x8000100u, kCFAllocatorNull);
    v11 = sub_1000B1180(*(uint64_t *)buf, (uint64_t)v10, v23);
    CFRelease(v10);
    v12 = v23[0];
    v13 = v25;
    if (v25)
    {
      v14 = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v11 ? v12 : 50;
    if (sub_10027D13C(a1, v9, v16)
      && sub_100287D28(a1)
      && sub_100287EEC(a1)
      && sub_1002880B0(a1)
      && sub_100288274(a1)
      && sub_100288438(a1)
      && sub_1002885FC(a1))
    {
      v17 = sub_100285730(a1, (uint64_t (*)(_QWORD *))sub_1003527EC, 0);
    }
    else
    {
LABEL_34:
      v17 = 0;
    }
    sub_1002887C0(a1);
    if (*(uint64_t *)(a1 + 160) <= 0)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = *(_QWORD *)(a1 + 160);
    sub_100053048(v2, v19);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v18 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to freeDatabaseSpace() without a backing database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to freeDatabaseSpace() without a backing database", v23, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::freeDatabaseSpace()", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    return 0;
  }
  return v17;
}

void sub_100287978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002879A0(uint64_t a1)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  const char *v15;

  v2 = sub_10028EF20(a1);
  if (sub_10028D864() > v2)
    return 1;
  v4 = sub_10028EF20(a1);
  v5 = v4 - (unint64_t)sub_10028D864();
  v6 = v5 + sub_10028EEDC();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v6;
    v14 = 2082;
    v15 = "MicroLocationMeasurements";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  v8 = *(_QWORD *)(a1 + 216);
  if (!v8)
    operator new();
  return sub_100323468(v8, v6);
}

void sub_100287B38()
{
  operator delete();
}

uint64_t sub_100287B64(uint64_t a1)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  const char *v15;

  v2 = sub_10028F214(a1);
  if (sub_10028D574() > v2)
    return 1;
  v4 = sub_10028F214(a1);
  v5 = v4 - (unint64_t)sub_10028D574();
  v6 = v5 + sub_10028F1D0();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v6;
    v14 = 2082;
    v15 = "MicroLocationRecordingEvents";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  v8 = *(_QWORD *)(a1 + 232);
  if (!v8)
    operator new();
  return sub_10039E1F8(v8, v6);
}

void sub_100287CFC()
{
  operator delete();
}

uint64_t sub_100287D28(uint64_t a1)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  const char *v15;

  v2 = sub_10028F428(a1);
  if (sub_10028DD90() > v2)
    return 1;
  v4 = sub_10028F428(a1);
  v5 = v4 - (unint64_t)sub_10028DD90();
  v6 = v5 + sub_10028F3E4();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v6;
    v14 = 2082;
    v15 = "MicroLocationModels";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  v8 = *(_QWORD *)(a1 + 224);
  if (!v8)
    operator new();
  return sub_1003ADAF4(v8, v6);
}

void sub_100287EC0()
{
  operator delete();
}

uint64_t sub_100287EEC(uint64_t a1)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  const char *v15;

  v2 = sub_10028F63C(a1);
  if (sub_10028F80C() > v2)
    return 1;
  v4 = sub_10028F63C(a1);
  v5 = v4 - (unint64_t)sub_10028F80C();
  v6 = v5 + sub_10028F5F8();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v6;
    v14 = 2082;
    v15 = "MicroLocationConfiguration";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  v8 = *(_QWORD *)(a1 + 208);
  if (!v8)
    operator new();
  return sub_1002A69F8(v8, v6);
}

void sub_100288084()
{
  operator delete();
}

uint64_t sub_1002880B0(uint64_t a1)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  const char *v15;

  v2 = sub_10028F92C(a1);
  if (sub_10028DAFC() > v2)
    return 1;
  v4 = sub_10028F92C(a1);
  v5 = v4 - (unint64_t)sub_10028DAFC();
  v6 = v5 + sub_10028F8E8();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v6;
    v14 = 2082;
    v15 = "MicroLocationRapport";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  v8 = *(_QWORD *)(a1 + 256);
  if (!v8)
    operator new();
  return sub_100294744(v8, v6);
}

void sub_100288248()
{
  operator delete();
}

uint64_t sub_100288274(uint64_t a1)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  const char *v15;

  v2 = sub_10028FB40(a1);
  if (sub_10028D944() > v2)
    return 1;
  v4 = sub_10028FB40(a1);
  v5 = v4 - (unint64_t)sub_10028D944();
  v6 = v5 + sub_10028FAFC();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v6;
    v14 = 2082;
    v15 = "MicroLocationLabels";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  v8 = *(_QWORD *)(a1 + 240);
  if (!v8)
    operator new();
  return sub_100267B44(v8, v6);
}

void sub_10028840C()
{
  operator delete();
}

uint64_t sub_100288438(uint64_t a1)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  const char *v15;

  v2 = sub_10028FD54(a1);
  if (sub_10028FF24() > v2)
    return 1;
  v4 = sub_10028FD54(a1);
  v5 = v4 - (unint64_t)sub_10028FF24();
  v6 = v5 + sub_10028FD10();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v6;
    v14 = 2082;
    v15 = "MicroLocationLoggedEvents";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  v8 = *(_QWORD *)(a1 + 248);
  if (!v8)
    operator new();
  return sub_10038D2A8(v8, v6);
}

void sub_1002885D0()
{
  operator delete();
}

uint64_t sub_1002885FC(uint64_t a1)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  const char *v15;

  v2 = sub_100290044(a1);
  if (sub_10028DBD8() > v2)
    return 1;
  v4 = sub_100290044(a1);
  v5 = v4 - (unint64_t)sub_10028DBD8();
  v6 = v5 + sub_100290000();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v6;
    v14 = 2082;
    v15 = "MicroLocationAssociatedState";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  v8 = *(_QWORD *)(a1 + 272);
  if (!v8)
    operator new();
  return sub_10039793C(v8, v6);
}

void sub_100288794()
{
  operator delete();
}

uint64_t sub_1002887C0(uint64_t a1)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  const char *v15;

  v2 = sub_100290258(a1);
  if (sub_10028DCB4() > v2)
    return 1;
  v4 = sub_100290258(a1);
  v5 = v4 - (unint64_t)sub_10028DCB4();
  v6 = v5 + sub_100290214();
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v6;
    v14 = 2082;
    v15 = "MicroLocationBluetoothIdentityTable";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  v8 = *(_QWORD *)(a1 + 296);
  if (!v8)
    operator new();
  return sub_10029C778(v8, v6);
}

void sub_100288958()
{
  operator delete();
}

BOOL sub_100288984(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  void **v6[3];
  char *v7[3];
  void ***v8;

  sub_10027A108(v7);
  memset(v6, 0, sizeof(v6));
  v4 = sub_100634B78(a1 + 72, a2 + 72, (uint64_t *)v7, v6, 0, 0.0);
  v8 = v6;
  sub_100259608((void ***)&v8);
  v6[0] = (void **)v7;
  sub_100259608(v6);
  return v4;
}

void sub_100288A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v3 - 40) = v2;
  sub_100259608((void ***)(v3 - 40));
  sub_100259608((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100288A2C(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  char *v8;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  char *v14;

  v3 = a1 + 72;
  if (sub_1000CC4F4(a1 + 72))
  {
    if (a2[23] >= 0)
      v4 = a2;
    else
      v4 = *(char **)a2;
    sub_1000CDA68(v3, v4);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v5 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
  {
    v6 = a2[23] >= 0 ? a2 : *(char **)a2;
    v10 = 68289282;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"executeStatement Failed. database object is invalid\", \"sqlStatement\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  }
  v7 = qword_1022A00F8;
  if (os_signpost_enabled((os_log_t)qword_1022A00F8))
  {
    if (a2[23] >= 0)
      v8 = a2;
    else
      v8 = *(char **)a2;
    v10 = 68289282;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "executeStatement Failed. database object is invalid", "{\"msg%{public}.0s\":\"executeStatement Failed. database object is invalid\", \"sqlStatement\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
  }
  return 0;
}

void sub_100288D88(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100288DB0(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t v3;

  *a3 = -1;
  v3 = a1 + 72;
  if (a2[23] < 0)
    a2 = *(char **)a2;
  sub_1000CDA68(v3, a2);
}

void sub_100288F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_100288FB0(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x100288FE0);
}

void sub_100288FC0()
{
  JUMPOUT(0x100288FE0);
}

void sub_100288FE8(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t v3;

  *a3 = 0;
  v3 = a1 + 72;
  if (a2[23] < 0)
    a2 = *(char **)a2;
  sub_1000CDA68(v3, a2);
}

void sub_1002891D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1002891E4(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x100289214);
}

void sub_1002891F4()
{
  JUMPOUT(0x100289214);
}

uint64_t sub_10028921C(uint64_t a1, uint64_t a2, const std::string::value_type *a3, const std::string::value_type *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v16;
  const std::string::value_type *v17;
  int v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  __int128 v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type size;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  char *v60;
  NSObject *v61;
  const char *v62;
  NSObject *v63;
  NSObject *v65;
  const char *v66;
  const char *v67;
  char *v68;
  uint64_t v69;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  void *__p[2];
  std::string::size_type v78;
  std::string v79;
  unint64_t __val;
  uint64_t v81;
  _BYTE buf[1624];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v16 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    if (a3[23] >= 0)
      v17 = a3;
    else
      v17 = *(const std::string::value_type **)a3;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Exporting table using paging\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a5)
  {
    v18 = a4[23];
    if (v18 < 0)
    {
      if (*((_QWORD *)a4 + 1) != 5)
        goto LABEL_18;
      v19 = *(int **)a4;
    }
    else
    {
      v19 = (int *)a4;
      if (v18 != 5)
        goto LABEL_18;
    }
    v20 = *v19;
    v21 = *((unsigned __int8 *)v19 + 4);
    if (v20 == 1232564050 && v21 == 100)
      sub_1018EE4A0();
  }
LABEL_18:
  if (!sub_1000CC4F4(a1 + 72))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v58 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Export using paging. database object is invalid", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    LOWORD(v79.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Export using paging. database object is invalid", &v79, 2);
    v60 = (char *)v59;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, const std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)", "%s\n", v59);
    goto LABEL_116;
  }
  if (a8 <= 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v61 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "Export using paging. invalid pageSize should be greater than 0", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    LOWORD(v79.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Export using paging. invalid pageSize should be greater than 0", &v79, 2);
    v60 = (char *)v62;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, const std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)", "%s\n", v62);
    goto LABEL_116;
  }
  v23 = *(unsigned __int8 *)(a6 + 23);
  if ((v23 & 0x80u) != 0)
    v23 = *(_QWORD *)(a6 + 8);
  if (!v23)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v63 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "Export using paging. page select query is empty", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    LOWORD(v79.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Export using paging. page select query is empty", &v79, 2);
    v60 = (char *)v66;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, const std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)", "%s\n", v66);
LABEL_116:
    if (v60 != buf)
      free(v60);
    return 0;
  }
  if (a8 >= a7)
    v24 = a7;
  else
    v24 = a8;
  v81 = -1;
  __val = 0xBFF0000000000000;
  std::to_string(&v79, -1);
  std::operator+<char>(&v72, "INSERT OR REPLACE INTO ", a3);
  v25 = std::string::append(&v72, " SELECT * FROM (");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = *(char *)(a6 + 23);
  if (v27 >= 0)
    v28 = (const std::string::value_type *)a6;
  else
    v28 = *(const std::string::value_type **)a6;
  if (v27 >= 0)
    v29 = *(unsigned __int8 *)(a6 + 23);
  else
    v29 = *(_QWORD *)(a6 + 8);
  v30 = std::string::append(&v73, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v74, ") ORDER BY ");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = a4[23];
  if (v34 >= 0)
    v35 = a4;
  else
    v35 = *(const std::string::value_type **)a4;
  if (v34 >= 0)
    v36 = *((unsigned __int8 *)a4 + 23);
  else
    v36 = *((_QWORD *)a4 + 1);
  v37 = std::string::append(&v75, v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v76, " DESC LIMIT ");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v39->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v71, v24);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v71;
  else
    v41 = (std::string *)v71.__r_.__value_.__r.__words[0];
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    size = v71.__r_.__value_.__l.__size_;
  v43 = std::string::append((std::string *)buf, (const std::string::value_type *)v41, size);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v78 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  std::operator+<char>(&v75, "SELECT MIN(", a4);
  v45 = std::string::append(&v75, ") FROM ");
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v45->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v47 = a3[23];
  if (v47 >= 0)
    v48 = a3;
  else
    v48 = *(const std::string::value_type **)a3;
  if (v47 >= 0)
    v49 = *((unsigned __int8 *)a3 + 23);
  else
    v49 = *((_QWORD *)a3 + 1);
  v50 = std::string::append((std::string *)buf, v48, v49);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v52 = a7 / a8;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v53 = a7 % a8;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  v75.__r_.__value_.__s.__data_[0] = 0;
  v75.__r_.__value_.__l.__size_ = a1 + 72;
  v75.__r_.__value_.__r.__words[2] = a2 + 72;
  v54 = sub_1006344B8(a1 + 72, a2 + 72);
  v75.__r_.__value_.__s.__data_[0] = v54;
  if (v54 && sub_100288A2C(a1, (char *)__p))
  {
    v69 = sub_10063EA18(a1 + 72);
    v55 = v52 - (v53 < 1);
    v56 = 1;
    if (v55 < 1 || v69 < 1)
      goto LABEL_106;
    v57 = *(_QWORD *)(a9 + 24);
    if (!v57)
      sub_10025FD1C();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 48))(v57))
    {
      if (a5)
        sub_100288FE8(a1, (char *)&v76, &__val);
      sub_100288DB0(a1, (char *)&v76, &v81);
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v65 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "Export using paging, operation cancelled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      LOWORD(v74.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Export using paging, operation cancelled", &v74, 2, 23, 0x8000000000000019);
      v68 = (char *)v67;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, const std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)", "%s\n", v67);
      if (v68 != buf)
        free(v68);
    }
  }
  v56 = 0;
LABEL_106:
  sub_10028E010((uint64_t)&v75);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  return v56;
}

void sub_100289FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *__p;
  char a72;
  void *a73;

  sub_10028E010((uint64_t)&a63);
  if (a72 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  _Unwind_Resume(a1);
}

uint64_t sub_10028A274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  const std::string::value_type *v5;
  CFStringRef v6;
  int v7;
  uint64_t data_low;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  CFStringRef v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  char *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  CFStringRef v51;
  int v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  const std::string::value_type *v106;
  std::string::size_type v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  __int128 v113;
  int v114;
  const std::string::value_type *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  CFStringRef v121;
  int v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  CFStringRef v128;
  int v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  __int128 v138;
  int v139;
  const std::string::value_type *v140;
  std::string::size_type v141;
  std::string *v142;
  __int128 v143;
  std::string *v144;
  __int128 v145;
  CFStringRef v146;
  int v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  __int128 v156;
  void **v157;
  std::string::size_type v158;
  std::string *v159;
  __int128 v160;
  CFStringRef v161;
  int v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  std::string *v168;
  __int128 v169;
  std::string *v170;
  __int128 v171;
  void **v172;
  std::string::size_type v173;
  std::string *v174;
  __int128 v175;
  CFStringRef v176;
  int v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  void **v187;
  std::string::size_type v188;
  std::string *v189;
  __int128 v190;
  CFStringRef v191;
  int v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  std::string *v198;
  std::string::size_type v199;
  CFStringRef v200;
  int v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  CFStringRef v207;
  int v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  std::string *v214;
  __int128 v215;
  std::string *v216;
  __int128 v217;
  void **v218;
  std::string::size_type v219;
  std::string *v220;
  __int128 v221;
  CFStringRef v222;
  int v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  std::string *v229;
  __int128 v230;
  std::string *v231;
  __int128 v232;
  void **v233;
  std::string::size_type v234;
  std::string *v235;
  __int128 v236;
  CFStringRef v237;
  int v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  std::string *v244;
  __int128 v245;
  std::string *v246;
  __int128 v247;
  char *v248;
  std::string *v249;
  __int128 v250;
  std::string *v251;
  __int128 v252;
  std::string *v253;
  __int128 v254;
  int v255;
  const std::string::value_type *v256;
  std::string::size_type v257;
  std::string *v258;
  __int128 v259;
  std::string *v260;
  __int128 v261;
  uint64_t v262;
  void **v263;
  char *v264;
  const char *v265;
  _BOOL4 v266;
  const char *v267;
  _BOOL4 v268;
  int v269;
  __int128 v270;
  int v271;
  const std::string::value_type *v272;
  std::string::size_type v273;
  std::string *v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  char v281;
  NSObject *v282;
  char *v283;
  NSObject *v284;
  char *v286;
  std::string v289;
  std::string v290;
  std::string v291;
  std::string v292;
  std::string v293;
  std::string v294;
  std::string v295;
  void *__p[2];
  unsigned __int8 v297;
  std::string v298;
  std::string v299;
  std::string v300;
  void *v301[2];
  unsigned __int8 v302;
  std::string v303;
  std::string v304;
  std::string v305;
  std::string v306;
  void *v307[2];
  unsigned __int8 v308;
  std::string v309;
  std::string v310;
  std::string v311;
  void *v312[2];
  unsigned __int8 v313;
  std::string v314;
  std::string v315;
  std::string v316;
  void *v317[2];
  unsigned __int8 v318;
  std::string v319;
  std::string v320;
  std::string v321;
  std::string v322;
  std::string v323;
  std::string v324;
  std::string v325;
  void *v326[2];
  char v327;
  std::string::value_type v328[8];
  char v329;
  std::string::value_type v330[8];
  char v331;
  std::string::value_type v332[8];
  char v333;
  std::string::value_type v334[8];
  char v335;
  std::string::value_type __s[8];
  char v337;
  std::string v338;
  std::string v339;
  std::string v340;
  std::string v341;
  std::string v342;
  std::string v343;
  std::string v344;
  std::string v345;
  std::string v346;
  std::string v347;
  std::string v348;
  std::string v349;
  std::string v350;
  std::string v351;
  std::string v352;
  std::string v353;
  std::string v354;
  std::string v355;
  std::string v356;
  std::string v357;
  std::string v358;
  std::string v359;
  std::string v360;
  std::string v361;
  std::string v362;
  std::string v363;
  std::string v364;
  std::string v365;
  std::string v366;
  void *v367[2];
  unsigned __int8 v368;
  std::string v369;
  std::string v370;
  std::string v371;
  std::string v372;
  std::string v373;
  std::string v374;
  std::string v375;
  std::string v376;
  std::string v377;
  std::string v378;
  void *v379[2];
  unsigned __int8 v380;
  std::string v381;
  std::string v382;
  std::string __dst;
  char *v384;
  char *v385;
  char *v386;
  uint64_t *v387;
  _BYTE v388[24];
  char **v389;
  char v390;
  _QWORD v391[3];
  _QWORD *v392;
  _BYTE buf[28];
  __int16 v394;
  _BOOL4 v395;
  __int16 v396;
  _BOOL4 v397;
  char v398;
  uint64_t v399;
  uint64_t v400;
  __int128 v401;
  std::string::size_type v402;
  _QWORD v403[3];
  _QWORD v404[3];
  char v405;
  uint64_t v406;
  uint64_t v407;
  __int128 v408;
  std::string::size_type v409;
  _QWORD v410[3];
  _QWORD v411[3];
  char v412;
  uint64_t v413;
  uint64_t v414;
  __int128 v415;
  std::string::size_type v416;
  _QWORD v417[3];
  _QWORD v418[3];
  char v419;
  uint64_t v420;
  uint64_t v421;
  __int128 v422;
  std::string::size_type v423;
  _QWORD v424[3];
  _QWORD v425[3];
  char v426;
  uint64_t v427;
  uint64_t v428;
  __int128 v429;
  std::string::size_type v430;
  _QWORD v431[3];
  _QWORD v432[3];
  char v433;
  uint64_t v434;
  uint64_t v435;
  __int128 v436;
  std::string::size_type v437;
  _QWORD v438[3];
  _QWORD v439[3];
  char v440;
  uint64_t v441;
  uint64_t v442;
  __int128 v443;
  std::string::size_type v444;
  _QWORD v445[3];
  _QWORD v446[3];
  char v447;
  uint64_t v448;
  uint64_t v449;
  __int128 v450;
  std::string::size_type v451;
  _QWORD v452[3];
  _QWORD v453[3];
  char v454;
  uint64_t v455;
  uint64_t v456;
  __int128 v457;
  std::string::size_type v458;
  _QWORD v459[3];
  _QWORD v460[3];
  char v461;
  uint64_t v462;
  uint64_t v463;
  __int128 v464;
  std::string::size_type v465;
  _QWORD v466[3];
  _QWORD v467[3];
  char v468;
  uint64_t v469;
  uint64_t v470;
  __int128 v471;
  std::string::size_type v472;
  __int128 v473;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v5 = (const std::string::value_type *)a2;
    else
      v5 = *(const std::string::value_type **)a2;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"exporting db filterred for user\", \"UserID:\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_100286F80(a3, a2, (uint64_t)v388);
  v387 = (uint64_t *)v388;
  sub_1015A2E04(buf, "MicroLocationRecordingEvents");
  sub_1015A2E04(&buf[24], "RowId");
  v398 = 0;
  v399 = sub_10028D574();
  sub_1001E4804(&__dst);
  LODWORD(v382.__r_.__value_.__l.__data_) = 0;
  v6 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingEventTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v7 = sub_1000B1180((uint64_t)__dst.__r_.__value_.__l.__data_, (uint64_t)v6, &v382);
  CFRelease(v6);
  data_low = LODWORD(v382.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  if (__dst.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = 1000;
  if (v7)
    v12 = data_low;
  v400 = v12;
  *((_BYTE *)&v381.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v381, "SELECT * FROM OTHER.");
  v13 = std::string::append(&v381, "MicroLocationRecordingEvents");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v382.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v382, " WHERE RtLoiGroupId IN ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  sub_10028D650(&v387, v379);
  if ((v380 & 0x80u) == 0)
    v17 = v379;
  else
    v17 = (void **)v379[0];
  if ((v380 & 0x80u) == 0)
    v18 = v380;
  else
    v18 = (std::string::size_type)v379[1];
  v19 = std::string::append(&__dst, (const std::string::value_type *)v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v402 = v19->__r_.__value_.__r.__words[2];
  v401 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v403, "MicroLocationMeasurements");
  sub_1015A2E04(v404, "RowId");
  v405 = 0;
  v406 = sub_10028D864();
  sub_1001E4804(&v378);
  LODWORD(v377.__r_.__value_.__l.__data_) = 0;
  v21 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v22 = sub_1000B1180((uint64_t)v378.__r_.__value_.__l.__data_, (uint64_t)v21, &v377);
  CFRelease(v21);
  v23 = LODWORD(v377.__r_.__value_.__l.__data_);
  v24 = (std::__shared_weak_count *)v378.__r_.__value_.__l.__size_;
  if (v378.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v378.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = 1000;
  if (v22)
    v27 = v23;
  v407 = v27;
  *((_BYTE *)&v369.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v369, "   FROM OTHER.");
  v28 = std::string::insert(&v369, 0, "SELECT * ");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v370.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v370.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v370, "MicroLocationMeasurements");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v371.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v371.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v371, "   WHERE ");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v372.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v372, "RecordingUUID");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v373.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v373, " IN ");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v374.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v374.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = (char *)operator new(0x28uLL);
  strcpy(v38, " \t\t(SELECT RecordingUUID FROM OTHER.");
  v286 = v38;
  v39 = std::string::append(&v374, v38, 0x24uLL);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v375.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v375, "MicroLocationRecordingEvents");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v376.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v376.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = std::string::append(&v376, " WHERE RtLoiGroupId IN ");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v377.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v377.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_10028D650(&v387, v367);
  if ((v368 & 0x80u) == 0)
    v45 = v367;
  else
    v45 = (void **)v367[0];
  if ((v368 & 0x80u) == 0)
    v46 = v368;
  else
    v46 = (std::string::size_type)v367[1];
  v47 = std::string::append(&v377, (const std::string::value_type *)v45, v46);
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v378.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v378.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  v49 = std::string::append(&v378, ")");
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v409 = v49->__r_.__value_.__r.__words[2];
  v408 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v410, "MicroLocationLabels");
  sub_1015A2E04(v411, "RowId");
  v412 = 0;
  v413 = sub_10028D944();
  sub_1001E4804(&v366);
  LODWORD(v365.__r_.__value_.__l.__data_) = 0;
  v51 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLabelTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v52 = sub_1000B1180((uint64_t)v366.__r_.__value_.__l.__data_, (uint64_t)v51, &v365);
  CFRelease(v51);
  v53 = LODWORD(v365.__r_.__value_.__l.__data_);
  v54 = (std::__shared_weak_count *)v366.__r_.__value_.__l.__size_;
  if (v366.__r_.__value_.__l.__size_)
  {
    v55 = (unint64_t *)(v366.__r_.__value_.__l.__size_ + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = 1000;
  if (v52)
    v57 = v53;
  v414 = v57;
  *((_BYTE *)&v338.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v338, "SELECT ");
  v337 = 6;
  strcpy(__s, "OTHER.");
  v58 = std::string::append(&v338, __s, 6uLL);
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v339.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v339.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append(&v339, "MicroLocationLabels");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v340.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v62 = std::string::append(&v340, ".TriggerUUID, ");
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v341.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v341.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v335 = 6;
  strcpy(v334, "OTHER.");
  v64 = std::string::append(&v341, v334, 6uLL);
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v342.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v342.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v342, "MicroLocationLabels");
  v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v343.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v343.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  v68 = std::string::append(&v343, ".ClientID, ");
  v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v344.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  v333 = 6;
  strcpy(v332, "OTHER.");
  v70 = std::string::append(&v344, v332, 6uLL);
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v345.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v345.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  v72 = std::string::append(&v345, "MicroLocationLabels");
  v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v346.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  v74 = std::string::append(&v346, ".LabelUUID, ");
  v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v347.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v347.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  v331 = 6;
  strcpy(v330, "OTHER.");
  v76 = std::string::append(&v347, v330, 6uLL);
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v348.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v348.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  v78 = std::string::append(&v348, "MicroLocationLabels");
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v349.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v349.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  v80 = std::string::append(&v349, ".ReceivedTimestamp, ");
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v350.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v350.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  v329 = 6;
  strcpy(v328, "OTHER.");
  v82 = std::string::append(&v350, v328, 6uLL);
  v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v351.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v351.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  v84 = std::string::append(&v351, "MicroLocationLabels");
  v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v352.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v352.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  v86 = std::string::append(&v352, ".RowId ");
  v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v353.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v353.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  v327 = 11;
  strcpy((char *)v326, "FROM OTHER.");
  v88 = std::string::append(&v353, (const std::string::value_type *)v326, 0xBuLL);
  v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v354.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v354.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  v90 = std::string::append(&v354, "MicroLocationLabels");
  v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v355.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v355.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  v92 = std::string::append(&v355, " INNER JOIN OTHER.");
  v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  v356.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v356.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0;
  v92->__r_.__value_.__r.__words[2] = 0;
  v92->__r_.__value_.__r.__words[0] = 0;
  v94 = std::string::append(&v356, "MiLoServices");
  v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v357.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0;
  v94->__r_.__value_.__r.__words[2] = 0;
  v94->__r_.__value_.__r.__words[0] = 0;
  v96 = std::string::append(&v357, "    ON ");
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v358.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  v98 = std::string::append(&v358, "MicroLocationLabels");
  v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
  v359.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v359.__r_.__value_.__l.__data_ = v99;
  v98->__r_.__value_.__l.__size_ = 0;
  v98->__r_.__value_.__r.__words[2] = 0;
  v98->__r_.__value_.__r.__words[0] = 0;
  v100 = std::string::append(&v359, ".");
  v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
  v360.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v101;
  v100->__r_.__value_.__l.__size_ = 0;
  v100->__r_.__value_.__r.__words[2] = 0;
  v100->__r_.__value_.__r.__words[0] = 0;
  v102 = std::string::append(&v360, "ClientID");
  v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v361.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v361.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  v104 = std::string::append(&v361, " LIKE '%' || ");
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v362.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v362.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  if (byte_10230105F >= 0)
    v106 = (const std::string::value_type *)&xmmword_102301048;
  else
    v106 = (const std::string::value_type *)xmmword_102301048;
  if (byte_10230105F >= 0)
    v107 = byte_10230105F;
  else
    v107 = *((_QWORD *)&xmmword_102301048 + 1);
  v108 = std::string::append(&v362, v106, v107);
  v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  v363.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v363.__r_.__value_.__l.__data_ = v109;
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  v110 = std::string::append(&v363, " || '%' ");
  v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
  v364.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v364.__r_.__value_.__l.__data_ = v111;
  v110->__r_.__value_.__l.__size_ = 0;
  v110->__r_.__value_.__r.__words[2] = 0;
  v110->__r_.__value_.__r.__words[0] = 0;
  v112 = std::string::append(&v364, "WHERE UserId==\"");
  v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
  v365.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v365.__r_.__value_.__l.__data_ = v113;
  v112->__r_.__value_.__l.__size_ = 0;
  v112->__r_.__value_.__r.__words[2] = 0;
  v112->__r_.__value_.__r.__words[0] = 0;
  v114 = *(char *)(a2 + 23);
  if (v114 >= 0)
    v115 = (const std::string::value_type *)a2;
  else
    v115 = *(const std::string::value_type **)a2;
  if (v114 >= 0)
    v116 = *(unsigned __int8 *)(a2 + 23);
  else
    v116 = *(_QWORD *)(a2 + 8);
  v117 = std::string::append(&v365, v115, v116);
  v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v366.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v366.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  v119 = std::string::append(&v366, "\"");
  v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  v416 = v119->__r_.__value_.__r.__words[2];
  v415 = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v417, "MiLoServices");
  sub_1015A2E04(v418, "LastActiveTimestamp");
  v419 = 1;
  sub_1001E4804(&v325);
  LODWORD(v324.__r_.__value_.__l.__data_) = 0;
  v121 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsServicesTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v122 = sub_1000B1180((uint64_t)v325.__r_.__value_.__l.__data_, (uint64_t)v121, &v324);
  CFRelease(v121);
  v123 = LODWORD(v324.__r_.__value_.__l.__data_);
  v124 = (std::__shared_weak_count *)v325.__r_.__value_.__l.__size_;
  if (v325.__r_.__value_.__l.__size_)
  {
    v125 = (unint64_t *)(v325.__r_.__value_.__l.__size_ + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = 256;
  if (v122)
    v127 = v123;
  v420 = v127;
  sub_1001E4804(&v325);
  LODWORD(v324.__r_.__value_.__l.__data_) = 0;
  v128 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsServiceTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v129 = sub_1000B1180((uint64_t)v325.__r_.__value_.__l.__data_, (uint64_t)v128, &v324);
  CFRelease(v128);
  v130 = LODWORD(v324.__r_.__value_.__l.__data_);
  v131 = (std::__shared_weak_count *)v325.__r_.__value_.__l.__size_;
  if (v325.__r_.__value_.__l.__size_)
  {
    v132 = (unint64_t *)(v325.__r_.__value_.__l.__size_ + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = 1000;
  if (v129)
    v134 = v130;
  v421 = v134;
  *((_BYTE *)&v322.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v322, "SELECT * FROM OTHER.");
  v135 = std::string::append(&v322, "MiLoServices");
  v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  v323.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v136;
  v135->__r_.__value_.__l.__size_ = 0;
  v135->__r_.__value_.__r.__words[2] = 0;
  v135->__r_.__value_.__r.__words[0] = 0;
  v137 = std::string::append(&v323, " WHERE UserId==\"");
  v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  v324.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  v139 = *(char *)(a2 + 23);
  if (v139 >= 0)
    v140 = (const std::string::value_type *)a2;
  else
    v140 = *(const std::string::value_type **)a2;
  if (v139 >= 0)
    v141 = *(unsigned __int8 *)(a2 + 23);
  else
    v141 = *(_QWORD *)(a2 + 8);
  v142 = std::string::append(&v324, v140, v141);
  v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  v325.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v325.__r_.__value_.__l.__data_ = v143;
  v142->__r_.__value_.__l.__size_ = 0;
  v142->__r_.__value_.__r.__words[2] = 0;
  v142->__r_.__value_.__r.__words[0] = 0;
  v144 = std::string::append(&v325, "\"");
  v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
  v423 = v144->__r_.__value_.__r.__words[2];
  v422 = v145;
  v144->__r_.__value_.__l.__size_ = 0;
  v144->__r_.__value_.__r.__words[2] = 0;
  v144->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v424, "MiLoLoiTable");
  sub_1015A2E04(v425, "LastSeenTimeStamp");
  v426 = 1;
  v427 = sub_10028DA20();
  sub_1001E4804(&v321);
  LODWORD(v320.__r_.__value_.__l.__data_) = 0;
  v146 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLoiTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v147 = sub_1000B1180((uint64_t)v321.__r_.__value_.__l.__data_, (uint64_t)v146, &v320);
  CFRelease(v146);
  v148 = LODWORD(v320.__r_.__value_.__l.__data_);
  v149 = (std::__shared_weak_count *)v321.__r_.__value_.__l.__size_;
  if (v321.__r_.__value_.__l.__size_)
  {
    v150 = (unint64_t *)(v321.__r_.__value_.__l.__size_ + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = 1000;
  if (v147)
    v152 = v148;
  v428 = v152;
  *((_BYTE *)&v319.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v319, "SELECT * FROM OTHER.");
  v153 = std::string::append(&v319, "MiLoLoiTable");
  v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
  v320.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v154;
  v153->__r_.__value_.__l.__size_ = 0;
  v153->__r_.__value_.__r.__words[2] = 0;
  v153->__r_.__value_.__r.__words[0] = 0;
  v155 = std::string::append(&v320, " WHERE LoiId IN ");
  v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  v321.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  sub_10028D650(&v387, v317);
  if ((v318 & 0x80u) == 0)
    v157 = v317;
  else
    v157 = (void **)v317[0];
  if ((v318 & 0x80u) == 0)
    v158 = v318;
  else
    v158 = (std::string::size_type)v317[1];
  v159 = std::string::append(&v321, (const std::string::value_type *)v157, v158);
  v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
  v430 = v159->__r_.__value_.__r.__words[2];
  v429 = v160;
  v159->__r_.__value_.__l.__size_ = 0;
  v159->__r_.__value_.__r.__words[2] = 0;
  v159->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v431, "MicroLocationRapport");
  sub_1015A2E04(v432, "RowId");
  v433 = 0;
  v434 = sub_10028DAFC();
  sub_1001E4804(&v316);
  LODWORD(v315.__r_.__value_.__l.__data_) = 0;
  v161 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRapportTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v162 = sub_1000B1180((uint64_t)v316.__r_.__value_.__l.__data_, (uint64_t)v161, &v315);
  CFRelease(v161);
  v163 = LODWORD(v315.__r_.__value_.__l.__data_);
  v164 = (std::__shared_weak_count *)v316.__r_.__value_.__l.__size_;
  if (v316.__r_.__value_.__l.__size_)
  {
    v165 = (unint64_t *)(v316.__r_.__value_.__l.__size_ + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = 1000;
  if (v162)
    v167 = v163;
  v435 = v167;
  *((_BYTE *)&v314.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v314, "SELECT * FROM OTHER.");
  v168 = std::string::append(&v314, "MicroLocationRapport");
  v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
  v315.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v169;
  v168->__r_.__value_.__l.__size_ = 0;
  v168->__r_.__value_.__r.__words[2] = 0;
  v168->__r_.__value_.__r.__words[0] = 0;
  v170 = std::string::append(&v315, " WHERE RtLoiGroupId IN ");
  v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
  v316.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v171;
  v170->__r_.__value_.__l.__size_ = 0;
  v170->__r_.__value_.__r.__words[2] = 0;
  v170->__r_.__value_.__r.__words[0] = 0;
  sub_10028D650(&v387, v312);
  if ((v313 & 0x80u) == 0)
    v172 = v312;
  else
    v172 = (void **)v312[0];
  if ((v313 & 0x80u) == 0)
    v173 = v313;
  else
    v173 = (std::string::size_type)v312[1];
  v174 = std::string::append(&v316, (const std::string::value_type *)v172, v173);
  v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
  v437 = v174->__r_.__value_.__r.__words[2];
  v436 = v175;
  v174->__r_.__value_.__l.__size_ = 0;
  v174->__r_.__value_.__r.__words[2] = 0;
  v174->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v438, "MicroLocationAssociatedState");
  sub_1015A2E04(v439, "RowId");
  v440 = 0;
  v441 = sub_10028DBD8();
  sub_1001E4804(&v311);
  LODWORD(v310.__r_.__value_.__l.__data_) = 0;
  v176 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAssociatedStateTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v177 = sub_1000B1180((uint64_t)v311.__r_.__value_.__l.__data_, (uint64_t)v176, &v310);
  CFRelease(v176);
  v178 = LODWORD(v310.__r_.__value_.__l.__data_);
  v179 = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
  if (v311.__r_.__value_.__l.__size_)
  {
    v180 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = 1000;
  if (v177)
    v182 = v178;
  v442 = v182;
  *((_BYTE *)&v309.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v309, "SELECT * FROM OTHER.");
  v183 = std::string::append(&v309, "MicroLocationAssociatedState");
  v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
  v310.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v310.__r_.__value_.__l.__data_ = v184;
  v183->__r_.__value_.__l.__size_ = 0;
  v183->__r_.__value_.__r.__words[2] = 0;
  v183->__r_.__value_.__r.__words[0] = 0;
  v185 = std::string::append(&v310, " WHERE LoiGroupId IN ");
  v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
  v311.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v186;
  v185->__r_.__value_.__l.__size_ = 0;
  v185->__r_.__value_.__r.__words[2] = 0;
  v185->__r_.__value_.__r.__words[0] = 0;
  sub_10028D650(&v387, v307);
  if ((v308 & 0x80u) == 0)
    v187 = v307;
  else
    v187 = (void **)v307[0];
  if ((v308 & 0x80u) == 0)
    v188 = v308;
  else
    v188 = (std::string::size_type)v307[1];
  v189 = std::string::append(&v311, (const std::string::value_type *)v187, v188);
  v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
  v444 = v189->__r_.__value_.__r.__words[2];
  v443 = v190;
  v189->__r_.__value_.__l.__size_ = 0;
  v189->__r_.__value_.__r.__words[2] = 0;
  v189->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v445, "MicroLocationBluetoothIdentityTable");
  sub_1015A2E04(v446, "LastSeenTimeStamp");
  v447 = 1;
  v448 = sub_10028DCB4();
  sub_1001E4804(&v306);
  LODWORD(v305.__r_.__value_.__l.__data_) = 0;
  v191 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBluetoothIdentityTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v192 = sub_1000B1180((uint64_t)v306.__r_.__value_.__l.__data_, (uint64_t)v191, &v305);
  CFRelease(v191);
  v193 = LODWORD(v305.__r_.__value_.__l.__data_);
  v194 = (std::__shared_weak_count *)v306.__r_.__value_.__l.__size_;
  if (v306.__r_.__value_.__l.__size_)
  {
    v195 = (unint64_t *)(v306.__r_.__value_.__l.__size_ + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = 1000;
  if (v192)
    v197 = v193;
  v449 = v197;
  *((_BYTE *)&v306.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v306, "SELECT * FROM OTHER.");
  v198 = std::string::append(&v306, "MicroLocationBluetoothIdentityTable");
  v199 = v198->__r_.__value_.__r.__words[2];
  v450 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
  v451 = v199;
  v198->__r_.__value_.__l.__size_ = 0;
  v198->__r_.__value_.__r.__words[2] = 0;
  v198->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v452, "MicroLocationConfiguration");
  sub_1015A2E04(v453, "GenerationTimestamp");
  v454 = 1;
  sub_1001E4804(&v305);
  LODWORD(v304.__r_.__value_.__l.__data_) = 0;
  v200 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsConfigurationTableMigrationLimit", 0x8000100u, kCFAllocatorNull);
  v201 = sub_1000B1180((uint64_t)v305.__r_.__value_.__l.__data_, (uint64_t)v200, &v304);
  CFRelease(v200);
  v202 = LODWORD(v304.__r_.__value_.__l.__data_);
  v203 = (std::__shared_weak_count *)v305.__r_.__value_.__l.__size_;
  if (v305.__r_.__value_.__l.__size_)
  {
    v204 = (unint64_t *)(v305.__r_.__value_.__l.__size_ + 8);
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = 100;
  if (v201)
    v206 = v202;
  v455 = v206;
  sub_1001E4804(&v305);
  LODWORD(v304.__r_.__value_.__l.__data_) = 0;
  v207 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsConfigurationTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v208 = sub_1000B1180((uint64_t)v305.__r_.__value_.__l.__data_, (uint64_t)v207, &v304);
  CFRelease(v207);
  v209 = LODWORD(v304.__r_.__value_.__l.__data_);
  v210 = (std::__shared_weak_count *)v305.__r_.__value_.__l.__size_;
  if (v305.__r_.__value_.__l.__size_)
  {
    v211 = (unint64_t *)(v305.__r_.__value_.__l.__size_ + 8);
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = 1000;
  if (v208)
    v213 = v209;
  v456 = v213;
  *((_BYTE *)&v303.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v303, "SELECT * FROM OTHER.");
  v214 = std::string::append(&v303, "MicroLocationConfiguration");
  v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
  v304.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v215;
  v214->__r_.__value_.__l.__size_ = 0;
  v214->__r_.__value_.__r.__words[2] = 0;
  v214->__r_.__value_.__r.__words[0] = 0;
  v216 = std::string::append(&v304, " WHERE RtLoiGroupId IN ");
  v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
  v305.__r_.__value_.__r.__words[2] = v216->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v305.__r_.__value_.__l.__data_ = v217;
  v216->__r_.__value_.__l.__size_ = 0;
  v216->__r_.__value_.__r.__words[2] = 0;
  v216->__r_.__value_.__r.__words[0] = 0;
  sub_10028D650(&v387, v301);
  if ((v302 & 0x80u) == 0)
    v218 = v301;
  else
    v218 = (void **)v301[0];
  if ((v302 & 0x80u) == 0)
    v219 = v302;
  else
    v219 = (std::string::size_type)v301[1];
  v220 = std::string::append(&v305, (const std::string::value_type *)v218, v219);
  v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
  v458 = v220->__r_.__value_.__r.__words[2];
  v457 = v221;
  v220->__r_.__value_.__l.__size_ = 0;
  v220->__r_.__value_.__r.__words[2] = 0;
  v220->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v459, "MicroLocationModels");
  sub_1015A2E04(v460, "RowId");
  v461 = 0;
  v462 = sub_10028DD90();
  sub_1001E4804(&v300);
  LODWORD(v299.__r_.__value_.__l.__data_) = 0;
  v222 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsModelTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v223 = sub_1000B1180((uint64_t)v300.__r_.__value_.__l.__data_, (uint64_t)v222, &v299);
  CFRelease(v222);
  v224 = LODWORD(v299.__r_.__value_.__l.__data_);
  v225 = (std::__shared_weak_count *)v300.__r_.__value_.__l.__size_;
  if (v300.__r_.__value_.__l.__size_)
  {
    v226 = (unint64_t *)(v300.__r_.__value_.__l.__size_ + 8);
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = 2;
  if (v223)
    v228 = v224;
  v463 = v228;
  *((_BYTE *)&v298.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v298, "SELECT * FROM OTHER.");
  v229 = std::string::append(&v298, "MicroLocationModels");
  v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
  v299.__r_.__value_.__r.__words[2] = v229->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v230;
  v229->__r_.__value_.__l.__size_ = 0;
  v229->__r_.__value_.__r.__words[2] = 0;
  v229->__r_.__value_.__r.__words[0] = 0;
  v231 = std::string::append(&v299, " WHERE LoiGroupId IN ");
  v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
  v300.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v232;
  v231->__r_.__value_.__l.__size_ = 0;
  v231->__r_.__value_.__r.__words[2] = 0;
  v231->__r_.__value_.__r.__words[0] = 0;
  sub_10028D650(&v387, __p);
  if ((v297 & 0x80u) == 0)
    v233 = __p;
  else
    v233 = (void **)__p[0];
  if ((v297 & 0x80u) == 0)
    v234 = v297;
  else
    v234 = (std::string::size_type)__p[1];
  v235 = std::string::append(&v300, (const std::string::value_type *)v233, v234);
  v236 = *(_OWORD *)&v235->__r_.__value_.__l.__data_;
  v465 = v235->__r_.__value_.__r.__words[2];
  v464 = v236;
  v235->__r_.__value_.__l.__size_ = 0;
  v235->__r_.__value_.__r.__words[2] = 0;
  v235->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(v466, "MiLoCustomLoiTable");
  sub_1015A2E04(v467, "LastSeenTimeStamp");
  v468 = 1;
  v469 = sub_10028DA20();
  sub_1001E4804(&v295);
  LODWORD(v294.__r_.__value_.__l.__data_) = 0;
  v237 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsCustomLoiTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  v238 = sub_1000B1180((uint64_t)v295.__r_.__value_.__l.__data_, (uint64_t)v237, &v294);
  CFRelease(v237);
  v239 = LODWORD(v294.__r_.__value_.__l.__data_);
  v240 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (v295.__r_.__value_.__l.__size_)
  {
    v241 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = 1000;
  if (v238)
    v243 = v239;
  v470 = v243;
  *((_BYTE *)&v289.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v289, "   FROM OTHER.");
  v244 = std::string::insert(&v289, 0, "SELECT * ");
  v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
  v290.__r_.__value_.__r.__words[2] = v244->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v245;
  v244->__r_.__value_.__l.__size_ = 0;
  v244->__r_.__value_.__r.__words[2] = 0;
  v244->__r_.__value_.__r.__words[0] = 0;
  v246 = std::string::append(&v290, "MiLoCustomLoiTable");
  v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
  v291.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v247;
  v246->__r_.__value_.__l.__size_ = 0;
  v246->__r_.__value_.__r.__words[2] = 0;
  v246->__r_.__value_.__r.__words[0] = 0;
  v248 = (char *)operator new(0x50uLL);
  strcpy(v248, "   WHERE OTHER.MiLoCustomLoiTable.ServiceId IN (SELECT ServiceUUID FROM OTHER.");
  v249 = std::string::append(&v291, v248, 0x4EuLL);
  v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
  v292.__r_.__value_.__r.__words[2] = v249->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v250;
  v249->__r_.__value_.__l.__size_ = 0;
  v249->__r_.__value_.__r.__words[2] = 0;
  v249->__r_.__value_.__r.__words[0] = 0;
  v251 = std::string::append(&v292, "MiLoServices");
  v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
  v293.__r_.__value_.__r.__words[2] = v251->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v252;
  v251->__r_.__value_.__l.__size_ = 0;
  v251->__r_.__value_.__r.__words[2] = 0;
  v251->__r_.__value_.__r.__words[0] = 0;
  v253 = std::string::append(&v293, " WHERE UserId==\"");
  v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
  v294.__r_.__value_.__r.__words[2] = v253->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v294.__r_.__value_.__l.__data_ = v254;
  v253->__r_.__value_.__l.__size_ = 0;
  v253->__r_.__value_.__r.__words[2] = 0;
  v253->__r_.__value_.__r.__words[0] = 0;
  v255 = *(char *)(a2 + 23);
  if (v255 >= 0)
    v256 = (const std::string::value_type *)a2;
  else
    v256 = *(const std::string::value_type **)a2;
  if (v255 >= 0)
    v257 = *(unsigned __int8 *)(a2 + 23);
  else
    v257 = *(_QWORD *)(a2 + 8);
  v258 = std::string::append(&v294, v256, v257);
  v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
  v295.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = v259;
  v258->__r_.__value_.__l.__size_ = 0;
  v258->__r_.__value_.__r.__words[2] = 0;
  v258->__r_.__value_.__r.__words[0] = 0;
  v260 = std::string::append(&v295, "\")");
  v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
  v472 = v260->__r_.__value_.__r.__words[2];
  v471 = v261;
  v260->__r_.__value_.__l.__size_ = 0;
  v260->__r_.__value_.__r.__words[2] = 0;
  v260->__r_.__value_.__r.__words[0] = 0;
  v385 = 0;
  v384 = 0;
  v386 = 0;
  v389 = &v384;
  v390 = 0;
  v384 = (char *)operator new(0x420uLL);
  v385 = v384;
  v386 = v384 + 1056;
  v385 = sub_100290428((uint64_t)&v386, (__int128 *)buf, &v473, v384);
  v262 = 1056;
  do
  {
    v263 = (void **)&buf[v262];
    if ((char)buf[v262 - 1] < 0)
      operator delete(*(v263 - 3));
    if (*((char *)v263 - 49) < 0)
      operator delete(*(void **)&v388[v262]);
    if ((char)v388[v262 - 1] < 0)
      operator delete(*(v263 - 12));
    v262 -= 96;
  }
  while (v262);
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v295.__r_.__value_.__l.__data_);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  operator delete(v248);
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v291.__r_.__value_.__l.__data_);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v289.__r_.__value_.__l.__data_);
  if ((char)v297 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v298.__r_.__value_.__l.__data_);
  if ((char)v302 < 0)
    operator delete(v301[0]);
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v305.__r_.__value_.__l.__data_);
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v304.__r_.__value_.__l.__data_);
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v303.__r_.__value_.__l.__data_);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  if ((char)v308 < 0)
    operator delete(v307[0]);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  if ((char)v313 < 0)
    operator delete(v312[0]);
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v316.__r_.__value_.__l.__data_);
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v314.__r_.__value_.__l.__data_);
  if ((char)v318 < 0)
    operator delete(v317[0]);
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v321.__r_.__value_.__l.__data_);
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v320.__r_.__value_.__l.__data_);
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v319.__r_.__value_.__l.__data_);
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v323.__r_.__value_.__l.__data_);
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v322.__r_.__value_.__l.__data_);
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365.__r_.__value_.__l.__data_);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v363.__r_.__value_.__l.__data_);
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v362.__r_.__value_.__l.__data_);
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v361.__r_.__value_.__l.__data_);
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v360.__r_.__value_.__l.__data_);
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v358.__r_.__value_.__l.__data_);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v356.__r_.__value_.__l.__data_);
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v355.__r_.__value_.__l.__data_);
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v354.__r_.__value_.__l.__data_);
  if (v327 < 0)
    operator delete(v326[0]);
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v353.__r_.__value_.__l.__data_);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  if (v329 < 0)
    operator delete(*(void **)v328);
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v350.__r_.__value_.__l.__data_);
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  if (v331 < 0)
    operator delete(*(void **)v330);
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v346.__r_.__value_.__l.__data_);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  if (v333 < 0)
    operator delete(*(void **)v332);
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v342.__r_.__value_.__l.__data_);
  if (v335 < 0)
    operator delete(*(void **)v334);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v340.__r_.__value_.__l.__data_);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  if (v337 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v378.__r_.__value_.__l.__data_);
  if ((char)v368 < 0)
    operator delete(v367[0]);
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v377.__r_.__value_.__l.__data_);
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v375.__r_.__value_.__l.__data_);
  operator delete(v286);
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v374.__r_.__value_.__l.__data_);
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v373.__r_.__value_.__l.__data_);
  if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v372.__r_.__value_.__l.__data_);
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v371.__r_.__value_.__l.__data_);
  if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v370.__r_.__value_.__l.__data_);
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v369.__r_.__value_.__l.__data_);
  if ((char)v380 < 0)
    operator delete(v379[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v382.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v382.__r_.__value_.__l.__data_);
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v381.__r_.__value_.__l.__data_);
  v264 = v384;
  if (v384 == v385)
  {
    v278 = 1;
    goto LABEL_384;
  }
  while (1)
  {
    v265 = v264[23] >= 0 ? v264 : *(const char **)v264;
    v266 = sub_100635B3C(a1 + 72, v265);
    v267 = v264[23] >= 0 ? v264 : *(const char **)v264;
    v268 = sub_100635B3C(a3 + 72, v267);
    if (!v266 || !v268)
      break;
    v269 = v264[48];
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(_QWORD *)(a2 + 8))
      {
LABEL_347:
        if (v264[95] < 0)
        {
          sub_100115CE4(&__dst, *((void **)v264 + 9), *((_QWORD *)v264 + 10));
        }
        else
        {
          v270 = *(_OWORD *)(v264 + 72);
          __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v264 + 11);
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v270;
        }
        goto LABEL_359;
      }
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      goto LABEL_347;
    }
    buf[23] = 20;
    strcpy(buf, "SELECT * FROM OTHER.");
    v271 = v264[23];
    if (v271 >= 0)
      v272 = v264;
    else
      v272 = *(const std::string::value_type **)v264;
    if (v271 >= 0)
      v273 = v264[23];
    else
      v273 = *((_QWORD *)v264 + 1);
    v274 = std::string::append((std::string *)buf, v272, v273);
    v275 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v274->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v275;
    v274->__r_.__value_.__l.__size_ = 0;
    v274->__r_.__value_.__r.__words[2] = 0;
    v274->__r_.__value_.__r.__words[0] = 0;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
LABEL_359:
    v276 = *((_QWORD *)v264 + 7);
    v277 = *((_QWORD *)v264 + 8);
    v391[0] = off_10212AA88;
    v392 = v391;
    v278 = sub_10028921C(a1, a3, v264, v264 + 24, v269 != 0, (uint64_t)&__dst, v276, v277, (uint64_t)v391);
    v279 = v392;
    if (v392 == v391)
    {
      v279 = v391;
      v280 = 4;
      goto LABEL_363;
    }
    if (v392)
    {
      v280 = 5;
LABEL_363:
      (*(void (**)(void))(*v279 + 8 * v280))();
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v264 += 96;
    if (v264 == v385)
      v281 = 0;
    else
      v281 = v278;
    if ((v281 & 1) == 0)
      goto LABEL_384;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10212AA58);
  v282 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
  {
    v283 = v264;
    if (v264[23] < 0)
      v283 = *(char **)v264;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v283;
    v394 = 1026;
    v395 = v266;
    v396 = 1026;
    v397 = v268;
    _os_log_impl((void *)&_mh_execute_header, v282, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"export using paging, table is missing\", \"TableName\":%{public, location:escape_only}s, \"ExistsInTargetDB\":%{public}hhd, \"ExistsInSourceDB\":%{public}hhd}", buf, 0x28u);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10212AA58);
  }
  v284 = off_1022A0288;
  if (os_signpost_enabled((os_log_t)off_1022A0288))
  {
    if (v264[23] < 0)
      v264 = *(char **)v264;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v264;
    v394 = 1026;
    v395 = v266;
    v396 = 1026;
    v397 = v268;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v284, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "export using paging, table is missing", "{\"msg%{public}.0s\":\"export using paging, table is missing\", \"TableName\":%{public, location:escape_only}s, \"ExistsInTargetDB\":%{public}hhd, \"ExistsInSourceDB\":%{public}hhd}", buf, 0x28u);
  }
  v278 = 0;
LABEL_384:
  *(_QWORD *)buf = &v384;
  sub_100290698((void ***)buf);
  *(_QWORD *)buf = v388;
  sub_100259608((void ***)buf);
  return v278;
}

void sub_10028C644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  void *v85;
  unint64_t v86;
  uint64_t i;

  STACK[0x9C0] = v86;
  sub_100290698((void ***)&STACK[0x9F0]);
  for (i = 960; i != -96; i -= 96)
    sub_10028DE6C((uint64_t)&STACK[0xA20] + i);
  if (a62 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  if (a48 < 0)
    operator delete(a43);
  if (a41 < 0)
    operator delete(a36);
  operator delete(v85);
  if (a34 < 0)
    operator delete(a29);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  if (a68 < 0)
    operator delete(a63);
  if (a76 < 0)
    operator delete(a75);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a69);
  if (a78 < 0)
    operator delete(a77);
  if (a84 < 0)
    operator delete(a83);
  if (a82 < 0)
    operator delete(a81);
  if (a80 < 0)
    operator delete(a79);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a85);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  if (SLOBYTE(STACK[0x7D7]) < 0)
    operator delete((void *)STACK[0x7C0]);
  if (SLOBYTE(STACK[0x7B7]) < 0)
    operator delete((void *)STACK[0x7A0]);
  if (SLOBYTE(STACK[0x797]) < 0)
    operator delete((void *)STACK[0x780]);
  if (SLOBYTE(STACK[0x777]) < 0)
    operator delete((void *)STACK[0x760]);
  if (SLOBYTE(STACK[0x757]) < 0)
    operator delete((void *)STACK[0x740]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  if (SLOBYTE(STACK[0x717]) < 0)
    operator delete((void *)STACK[0x700]);
  if (SLOBYTE(STACK[0x6F7]) < 0)
    operator delete((void *)STACK[0x6E0]);
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  if (SLOBYTE(STACK[0x6B7]) < 0)
    operator delete((void *)STACK[0x6A0]);
  if (SLOBYTE(STACK[0x697]) < 0)
    operator delete((void *)STACK[0x680]);
  if (SLOBYTE(STACK[0x677]) < 0)
    operator delete((void *)STACK[0x660]);
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  if (SLOBYTE(STACK[0x657]) < 0)
    operator delete((void *)STACK[0x640]);
  if (SLOBYTE(STACK[0x637]) < 0)
    operator delete((void *)STACK[0x620]);
  if (SLOBYTE(STACK[0x617]) < 0)
    operator delete((void *)STACK[0x600]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x5F7]) < 0)
    operator delete((void *)STACK[0x5E0]);
  if (SLOBYTE(STACK[0x5D7]) < 0)
    operator delete((void *)STACK[0x5C0]);
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  if (SLOBYTE(STACK[0x597]) < 0)
    operator delete((void *)STACK[0x580]);
  if (SLOBYTE(STACK[0x577]) < 0)
    operator delete((void *)STACK[0x560]);
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete((void *)STACK[0x4E0]);
  if (SLOBYTE(STACK[0x44F]) < 0)
    operator delete((void *)STACK[0x438]);
  if (SLOBYTE(STACK[0x4D7]) < 0)
    operator delete((void *)STACK[0x4C0]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete((void *)STACK[0x468]);
  if (SLOBYTE(STACK[0x947]) < 0)
    operator delete((void *)STACK[0x930]);
  if (SLOBYTE(STACK[0x817]) < 0)
    operator delete((void *)STACK[0x800]);
  if (SLOBYTE(STACK[0x927]) < 0)
    operator delete((void *)STACK[0x910]);
  if (SLOBYTE(STACK[0x907]) < 0)
    operator delete((void *)STACK[0x8F0]);
  if (SLOBYTE(STACK[0x8E7]) < 0)
    operator delete((void *)STACK[0x8D0]);
  operator delete(a11);
  if (SLOBYTE(STACK[0x8C7]) < 0)
    operator delete((void *)STACK[0x8B0]);
  if (SLOBYTE(STACK[0x8A7]) < 0)
    operator delete((void *)STACK[0x890]);
  if (SLOBYTE(STACK[0x887]) < 0)
    operator delete((void *)STACK[0x870]);
  if (SLOBYTE(STACK[0x867]) < 0)
    operator delete((void *)STACK[0x850]);
  if (SLOBYTE(STACK[0x847]) < 0)
    operator delete((void *)STACK[0x830]);
  if (SLOBYTE(STACK[0x82F]) < 0)
    operator delete((void *)STACK[0x818]);
  if (SLOBYTE(STACK[0x95F]) < 0)
    operator delete((void *)STACK[0x948]);
  if (SLOBYTE(STACK[0x9B7]) < 0)
    operator delete((void *)STACK[0x9A0]);
  if (SLOBYTE(STACK[0x997]) < 0)
    operator delete((void *)STACK[0x980]);
  if (SLOBYTE(STACK[0x977]) < 0)
    operator delete((void *)STACK[0x960]);
  STACK[0xA20] = (unint64_t)&STACK[0x9D8];
  sub_100259608((void ***)&STACK[0xA20]);
  _Unwind_Resume(a1);
}

uint64_t sub_10028D574()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 15150;
}

void sub_10028D638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D650(uint64_t **a1@<X0>, void **a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type size;
  std::string *v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  int64_t v17;

  sub_1015A2E04(&v14, "(SELECT DISTINCT LoiId from OTHER.MiLoLoiTable WHERE LoiGroupId IN (");
  v4 = *a1;
  v5 = **a1;
  for (i = v4[1]; v5 != i; v5 += 24)
  {
    std::operator+<char>(&v15, "\"", v5);
    v7 = std::string::append(&v15, "\"");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (v17 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if (v17 >= 0)
      v10 = HIBYTE(v17);
    else
      v10 = (std::string::size_type)__p[1];
    std::string::append(&v14, (const std::string::value_type *)v9, v10);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (v5 == v4[1] - 24)
    {
      v11 = 0;
      LOBYTE(__p[0]) = 0;
    }
    else
    {
      strcpy((char *)__p, ", ");
      v11 = 2;
    }
    HIBYTE(v17) = v11;
    std::string::append(&v14, (const std::string::value_type *)__p, v11);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  sub_100259584((uint64_t)a2, size + 2);
  if (*((char *)a2 + 23) < 0)
    a2 = (void **)*a2;
  if (size)
  {
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v14;
    else
      v13 = (std::string *)v14.__r_.__value_.__r.__words[0];
    memmove(a2, v13, size);
  }
  strcpy((char *)a2 + size, "))");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_10028D800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028D864()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 321100;
}

void sub_10028D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028D944()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingLabelsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 2500;
}

void sub_10028DA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028DA20()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMiLoLoiTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 1000;
}

void sub_10028DAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028DAFC()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRapportTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 1000;
}

void sub_10028DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028DBD8()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAssociatedStateTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 1000;
}

void sub_10028DC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028DCB4()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBluetoothIdentityTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 96;
}

void sub_10028DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028DD90()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsModelTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 100;
}

void sub_10028DE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028DE6C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10028DEC0(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10028DEEC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

void sub_10028DF10(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10028DF3C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t sub_10028DF70(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_10028DFB8((_OWORD *)a1, a2);
  return a1;
}

void sub_10028DF9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_1018EE63C(v1);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_10028DFB8(_OWORD *__dst, __int128 *a2)
{
  _BYTE *v2;
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      __dst = sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *__dst = v3;
    }
    v2[24] = 1;
  }
  return __dst;
}

uint64_t sub_10028E010(uint64_t a1)
{
  if (*(_BYTE *)a1)
    sub_10063488C(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_10028E044(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

char *sub_10028E070(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100115CE4(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_100259D24((uint64_t)v9);
  return v4;
}

void sub_10028E118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100259D24((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ***sub_10028E12C(void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      sub_100259694();
    v13 = v8 - (_QWORD)*v4;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)sub_10028E224(v7, v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_OWORD *)v16 = *a2;
    v10 = v16 + 16;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void *sub_10028E224(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_10025955C();
  return operator new(16 * a2);
}

void sub_10028E258(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10028E298((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_10028E298(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_10028E2E4(uint64_t *a1)
{
  if (*a1)
  {
    sub_10028E298(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_BYTE *sub_10028E31C(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(v3 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  result = (_BYTE *)(v3 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    result = sub_100115CE4(result, *((void **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 40);
    *(_QWORD *)(v3 + 56) = *((_QWORD *)a2 + 7);
    *(_OWORD *)result = v7;
  }
  *(_QWORD *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_10028E384(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10028E38C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_OWORD *)v9;
      v11 = *(_OWORD *)(v9 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      *(_OWORD *)v8 = v10;
      *(_OWORD *)(v8 + 16) = v11;
      v12 = *(_OWORD *)(v9 + 40);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
      *(_OWORD *)(v8 + 40) = v12;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v8 += 64;
      v9 += 64;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_10028E630((uint64_t)&v14, a2, v7, v6);
}

_BYTE *sub_10028E410(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE *result;
  __int128 v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = (__int128 *)a1[1];
    v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1)
        v13 = 1;
      else
        v13 = (v4 - *a1) >> 5;
      v14 = a1[4];
      v34 = a1[4];
      v15 = (char *)sub_1002697F0(v14, v13);
      v17 = &v15[64 * (v13 >> 2)];
      v18 = a1[1];
      v19 = a1[2] - v18;
      if (v19)
      {
        v20 = &v17[v19];
        v21 = &v15[64 * (v13 >> 2)];
        do
        {
          v22 = *(_OWORD *)v18;
          v23 = *(_OWORD *)(v18 + 16);
          *((_QWORD *)v21 + 4) = *(_QWORD *)(v18 + 32);
          *(_OWORD *)v21 = v22;
          *((_OWORD *)v21 + 1) = v23;
          v24 = *(_OWORD *)(v18 + 40);
          *((_QWORD *)v21 + 7) = *(_QWORD *)(v18 + 56);
          *(_OWORD *)(v21 + 40) = v24;
          *(_QWORD *)(v18 + 48) = 0;
          *(_QWORD *)(v18 + 56) = 0;
          *(_QWORD *)(v18 + 40) = 0;
          v21 += 64;
          v18 += 64;
        }
        while (v21 != v20);
        v25 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v25 = vdupq_n_s64(v18);
        v20 = &v15[64 * (v13 >> 2)];
      }
      v31 = *a1;
      *a1 = v15;
      a1[1] = v17;
      v32 = v25;
      v26 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[64 * v16];
      v33 = v26;
      sub_10028E98C((uint64_t)&v31);
      v4 = a1[2];
    }
    else
    {
      v7 = v6 >> 6;
      v8 = v6 >> 6 < -1;
      v9 = (v6 >> 6) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = v10 >> 1;
      sub_10028E6D0((uint64_t)&v31, v5, (__int128 *)v4, (uint64_t)&v5[-4 * (v10 >> 1)]);
      v4 = v12;
      a1[1] -= v11 << 6;
      a1[2] = v12;
    }
  }
  v27 = *a2;
  v28 = a2[1];
  *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v4 = v27;
  *(_OWORD *)(v4 + 16) = v28;
  result = (_BYTE *)(v4 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    result = sub_100115CE4(result, *((void **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v30 = *(__int128 *)((char *)a2 + 40);
    *(_QWORD *)(v4 + 56) = *((_QWORD *)a2 + 7);
    *(_OWORD *)result = v30;
  }
  a1[2] += 64;
  return result;
}

uint64_t sub_10028E580(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  sub_10028E75C(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10028E808(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10028E630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 64);
      v11 = *(_OWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      v12 = (void **)(a4 + v7 - 24);
      if (*(char *)(a4 + v7 - 1) < 0)
        operator delete(*v12);
      v13 = *(_OWORD *)(v8 - 24);
      *(_QWORD *)(a4 + v7 - 8) = *(_QWORD *)(v8 - 8);
      *(_OWORD *)v12 = v13;
      *(_BYTE *)(v8 - 1) = 0;
      *(_BYTE *)(v8 - 24) = 0;
      v7 -= 64;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

__int128 *sub_10028E6D0(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  __int128 v8;
  void **v9;
  __int128 v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      v8 = v5[1];
      *(_QWORD *)(a4 + 32) = *((_QWORD *)v5 + 4);
      *(_OWORD *)a4 = v7;
      *(_OWORD *)(a4 + 16) = v8;
      v9 = (void **)(a4 + 40);
      if (*(char *)(a4 + 63) < 0)
        operator delete(*v9);
      v10 = *(__int128 *)((char *)v5 + 40);
      *(_QWORD *)(a4 + 56) = *((_QWORD *)v5 + 7);
      *(_OWORD *)v9 = v10;
      *((_BYTE *)v5 + 63) = 0;
      *((_BYTE *)v5 + 40) = 0;
      a4 += 64;
      v5 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_10028E75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 64);
      v11 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      v12 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 64;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  sub_10028E89C((uint64_t)v14);
  return a6;
}

uint64_t sub_10028E808(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v12 = a4;
  v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      v6 = a2[1];
      *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 4);
      *(_OWORD *)v4 = v5;
      *(_OWORD *)(v4 + 16) = v6;
      v7 = *(__int128 *)((char *)a2 + 40);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)a2 + 7);
      *(_OWORD *)(v4 + 40) = v7;
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 5) = 0;
      v4 += 64;
      a2 += 4;
    }
    while (a2 != a3);
    v12 = v4;
  }
  v10 = 1;
  sub_10028E914((uint64_t)v9);
  return v4;
}

uint64_t sub_10028E89C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10028E8D0(a1);
  return a1;
}

void sub_10028E8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 63) < 0)
      operator delete(*(void **)(v1 + 40));
    v1 += 64;
  }
}

uint64_t sub_10028E914(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10028E948(a1);
  return a1;
}

void sub_10028E948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 64;
  }
}

uint64_t sub_10028E98C(uint64_t a1)
{
  sub_10028E9C0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10028E9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 64;
      *(_QWORD *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *sub_10028EA14(uint64_t *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (_QWORD)a2) >> 3));
        a1[1] = (uint64_t)sub_100259C68(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_10028EBD4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_10028EE04(a3, (std::string *)v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)sub_1002596A8(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      sub_10028EC40(&v23, (__int128 *)a3, a5);
      v5 = (std::string *)sub_10028ECD0((uint64_t)a1, &v23, (__int128 *)v5);
      sub_100074DB8((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_10028EBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028EBD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v8 = v10;
      v8 += 24;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_10028ED80((uint64_t)&v12, a2, v7, v6);
}

_QWORD *sub_10028EC40(_QWORD *result, __int128 *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = v4 + 24 * a3;
    v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        result = sub_100115CE4((_BYTE *)v4, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v4 = v8;
      }
      v4 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_10028ECC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10028ECD0(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  sub_1002596EC(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10028EE60(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10028ED80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

std::string *sub_10028EE04(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t sub_10028EE60(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  sub_100259D24((uint64_t)v7);
  return v4;
}

uint64_t sub_10028EEDC()
{
  unsigned int v0;
  float v1;
  uint64_t v4;

  v0 = sub_10028D864();
  sub_10028F0F0();
  if (v1 >= 0.0 && v1 <= 1.0)
    return (float)(v1 * (float)v0);
  v4 = sub_1018EE650();
  return sub_10028EF20(v4);
}

uint64_t sub_10028EF20(uint64_t a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
    return sub_10027B660(a1, "MicroLocationMeasurements");
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to get numEntries without a backing database", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationMeasurementTable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

void sub_10028F0F0()
{
  CFStringRef v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  sub_1001E4804(&v5);
  v4 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsDatabaseFreeSpacePercentage", 0x8000100u, kCFAllocatorNull);
  sub_10052688C(v5, (uint64_t)v0, (float *)&v4);
  CFRelease(v0);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_10028F1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028F1D0()
{
  unsigned int v0;
  float v1;
  uint64_t v4;

  v0 = sub_10028D574();
  sub_10028F0F0();
  if (v1 >= 0.0 && v1 <= 1.0)
    return (float)(v1 * (float)v0);
  v4 = sub_1018EE650();
  return sub_10028F214(v4);
}

uint64_t sub_10028F214(uint64_t a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
    return sub_10027B660(a1, "MicroLocationRecordingEvents");
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to get numEntries without a backing database", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationRecordingEventsTable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

uint64_t sub_10028F3E4()
{
  unsigned int v0;
  float v1;
  uint64_t v4;

  v0 = sub_10028DD90();
  sub_10028F0F0();
  if (v1 >= 0.0 && v1 <= 1.0)
    return (float)(v1 * (float)v0);
  v4 = sub_1018EE650();
  return sub_10028F428(v4);
}

uint64_t sub_10028F428(uint64_t a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
    return sub_10027B660(a1, "MicroLocationModels");
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to get numEntries without a backing database", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationModelTable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

uint64_t sub_10028F5F8()
{
  unsigned int v0;
  float v1;
  uint64_t v4;

  v0 = sub_10028F80C();
  sub_10028F0F0();
  if (v1 >= 0.0 && v1 <= 1.0)
    return (float)(v1 * (float)v0);
  v4 = sub_1018EE650();
  return sub_10028F63C(v4);
}

uint64_t sub_10028F63C(uint64_t a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
    return sub_10027B660(a1, "MicroLocationConfiguration");
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to get numEntries without a backing database", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationConfigurationTable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

uint64_t sub_10028F80C()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsConfigurationTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 6666;
}

void sub_10028F8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028F8E8()
{
  unsigned int v0;
  float v1;
  uint64_t v4;

  v0 = sub_10028DAFC();
  sub_10028F0F0();
  if (v1 >= 0.0 && v1 <= 1.0)
    return (float)(v1 * (float)v0);
  v4 = sub_1018EE650();
  return sub_10028F92C(v4);
}

uint64_t sub_10028F92C(uint64_t a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
    return sub_10027B660(a1, "MicroLocationRapport");
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to get numEntries without a backing database", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationRapportTable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

uint64_t sub_10028FAFC()
{
  unsigned int v0;
  float v1;
  uint64_t v4;

  v0 = sub_10028D944();
  sub_10028F0F0();
  if (v1 >= 0.0 && v1 <= 1.0)
    return (float)(v1 * (float)v0);
  v4 = sub_1018EE650();
  return sub_10028FB40(v4);
}

uint64_t sub_10028FB40(uint64_t a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
    return sub_10027B660(a1, "MicroLocationLabels");
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to get numEntries without a backing database", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationRecordingLabelsTable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

uint64_t sub_10028FD10()
{
  unsigned int v0;
  float v1;
  uint64_t v4;

  v0 = sub_10028FF24();
  sub_10028F0F0();
  if (v1 >= 0.0 && v1 <= 1.0)
    return (float)(v1 * (float)v0);
  v4 = sub_1018EE650();
  return sub_10028FD54(v4);
}

uint64_t sub_10028FD54(uint64_t a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
    return sub_10027B660(a1, "MicroLocationLoggedEvents");
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to get numEntries without a backing database", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationLoggedEventsTable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

uint64_t sub_10028FF24()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLoggedEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 25000;
}

void sub_10028FFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100290000()
{
  unsigned int v0;
  float v1;
  uint64_t v4;

  v0 = sub_10028DBD8();
  sub_10028F0F0();
  if (v1 >= 0.0 && v1 <= 1.0)
    return (float)(v1 * (float)v0);
  v4 = sub_1018EE650();
  return sub_100290044(v4);
}

uint64_t sub_100290044(uint64_t a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
    return sub_10027B660(a1, "MicroLocationAssociatedState");
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to get numEntries without a backing database", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationAssociatedStateTable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

uint64_t sub_100290214()
{
  unsigned int v0;
  float v1;
  uint64_t v4;

  v0 = sub_10028DCB4();
  sub_10028F0F0();
  if (v1 >= 0.0 && v1 <= 1.0)
    return (float)(v1 * (float)v0);
  v4 = sub_1018EE650();
  return sub_100290258(v4);
}

uint64_t sub_100290258(uint64_t a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
    return sub_10027B660(a1, "MicroLocationBluetoothIdentityTable");
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Attempt to get numEntries without a backing database", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationBluetoothIdentityTable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

char *sub_100290428(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_1002904D0(v7, v4, v6);
      v6 += 6;
      v4 = v12 + 96;
      v12 += 96;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_1002905C0((uint64_t)v9);
  return v4;
}

void sub_1002904BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002905C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_1002904D0(int a1, char *__dst, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *result;
  __int128 v9;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 5);
    *(_OWORD *)(__dst + 24) = v6;
  }
  v7 = a3[3];
  *((_QWORD *)__dst + 8) = *((_QWORD *)a3 + 8);
  *((_OWORD *)__dst + 3) = v7;
  result = __dst + 72;
  if (*((char *)a3 + 95) < 0)
    return sub_100115CE4(result, *((void **)a3 + 9), *((_QWORD *)a3 + 10));
  v9 = *(__int128 *)((char *)a3 + 72);
  *((_QWORD *)__dst + 11) = *((_QWORD *)a3 + 11);
  *(_OWORD *)result = v9;
  return result;
}

void sub_10029058C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002905C0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002905F4((uint64_t *)a1);
  return a1;
}

void sub_1002905F4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 96;
      sub_100290644(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_100290644(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_100290698(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_100290644((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100290720()
{
  operator delete();
}

_QWORD *sub_100290734()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10212AA88;
  return result;
}

void sub_100290758(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10212AA88;
}

uint64_t sub_100290770()
{
  return 0;
}

uint64_t sub_100290778(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002907B4()
{
}

void sub_1002907F8(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x2Cu);
}

void sub_100290818(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x2Cu);
}

void sub_10029082C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x2Cu);
}

BOOL sub_100290840()
{
  return os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100290854()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 248), OS_LOG_TYPE_INFO);
}

BOOL sub_100290880()
{
  NSObject *v0;

  return os_log_type_enabled(v0, OS_LOG_TYPE_FAULT);
}

BOOL sub_10029088C()
{
  NSObject *v0;

  return os_log_type_enabled(v0, OS_LOG_TYPE_INFO);
}

BOOL sub_100290898()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 248));
}

void sub_1002908B8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1002908CC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x26u);
}

uint64_t sub_1002908D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

BOOL sub_1002908E4()
{
  NSObject *v0;

  return os_log_type_enabled(v0, OS_LOG_TYPE_ERROR);
}

uint64_t sub_1002908FC()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  __int128 v135;
  std::string *v136;
  __int128 v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  __int128 v141;
  std::string *v142;
  __int128 v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  std::string *v152;
  __int128 v153;
  std::string *v154;
  __int128 v155;
  std::string *v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  __int128 v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  __int128 v164;
  std::string *v165;
  __int128 v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  __int128 v170;
  std::string *v171;
  __int128 v172;
  const std::string::value_type *v173;
  std::string::size_type v174;
  std::string *v175;
  __int128 v176;
  std::string *v177;
  __int128 v178;
  const std::string::value_type *v179;
  std::string::size_type v180;
  std::string *v181;
  __int128 v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  std::string *v187;
  __int128 v188;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  const std::string::value_type *v193;
  std::string::size_type v194;
  std::string *v195;
  __int128 v196;
  std::string *v197;
  __int128 v198;
  const std::string::value_type *v199;
  std::string::size_type v200;
  std::string *v201;
  __int128 v202;
  std::string *v203;
  __int128 v204;
  const std::string::value_type *v205;
  std::string::size_type v206;
  std::string *v207;
  __int128 v208;
  std::string *v209;
  __int128 v210;
  std::string *p_p;
  std::string::size_type size;
  std::string *v213;
  __int128 v214;
  std::string *v215;
  __int128 v216;
  std::string __p;
  std::string v219;
  std::string v220;
  std::string v221;
  std::string v222;
  std::string v223;
  std::string v224;
  std::string v225;
  std::string v226;
  std::string v227;
  std::string v228;
  std::string v229;
  std::string v230;
  std::string v231;
  std::string v232;
  std::string v233;
  std::string v234;
  std::string v235;
  std::string v236;
  std::string v237;
  std::string v238;
  std::string v239;
  std::string v240;

  *((_BYTE *)&v237.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v237, " WHERE ");
  v0 = std::string::append(&v237, "RecordingTimestamp");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v238, " < ? OR ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v239, "RecordingTimestamp");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v240, " > ?");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_102300F08 = v6->__r_.__value_.__r.__words[2];
  xmmword_102300EF8 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300EF8, (void *)&_mh_execute_header);
  *((_BYTE *)&v236.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v236, "DELETE FROM ");
  v8 = std::string::append(&v236, "MicroLocationMeasurements");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v237, " WHERE RecordingUUID in(SELECT RecordingUUID FROM ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v238, "MicroLocationRecordingEvents");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (qword_102300F08 >= 0)
    v14 = (const std::string::value_type *)&xmmword_102300EF8;
  else
    v14 = (const std::string::value_type *)xmmword_102300EF8;
  if (qword_102300F08 >= 0)
    v15 = HIBYTE(qword_102300F08);
  else
    v15 = *((_QWORD *)&xmmword_102300EF8 + 1);
  v16 = std::string::append(&v239, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v240, ")");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_102300F20 = v18->__r_.__value_.__r.__words[2];
  xmmword_102300F10 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300F10, (void *)&_mh_execute_header);
  *((_BYTE *)&v239.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v239, "DELETE FROM ");
  v20 = std::string::append(&v239, "MicroLocationRecordingEvents");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (qword_102300F08 >= 0)
    v22 = (const std::string::value_type *)&xmmword_102300EF8;
  else
    v22 = (const std::string::value_type *)xmmword_102300EF8;
  if (qword_102300F08 >= 0)
    v23 = HIBYTE(qword_102300F08);
  else
    v23 = *((_QWORD *)&xmmword_102300EF8 + 1);
  v24 = std::string::append(&v240, v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  qword_102300F38 = v24->__r_.__value_.__r.__words[2];
  xmmword_102300F28 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300F28, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v26 = std::string::append(&v235, "MicroLocationModels");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v236, " WHERE ");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v237, "GenerationTimestamp");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v238, " < ? OR ");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v239, "GenerationTimestamp");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v240, " > ?");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  qword_102300F50 = v36->__r_.__value_.__r.__words[2];
  xmmword_102300F40 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300F40, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v38 = std::string::append(&v235, "MicroLocationConfiguration");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v236, " WHERE ");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v237, "GenerationTimestamp");
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v44 = std::string::append(&v238, " < ? OR ");
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  v46 = std::string::append(&v239, "GenerationTimestamp");
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = std::string::append(&v240, " > ?");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  qword_102300F68 = v48->__r_.__value_.__r.__words[2];
  xmmword_102300F58 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300F58, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v50 = std::string::append(&v235, "MicroLocationRapport");
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v52 = std::string::append(&v236, " WHERE ");
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v54 = std::string::append(&v237, "GenerationTimestamp");
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v56 = std::string::append(&v238, " < ? OR ");
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  v58 = std::string::append(&v239, "GenerationTimestamp");
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append(&v240, " > ?");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  qword_102300F80 = v60->__r_.__value_.__r.__words[2];
  xmmword_102300F70 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300F70, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v62 = std::string::append(&v235, "MicroLocationLabels");
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v64 = std::string::append(&v236, " WHERE ");
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v237, "ReceivedTimestamp");
  v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  v68 = std::string::append(&v238, " < ? OR ");
  v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  v70 = std::string::append(&v239, "ReceivedTimestamp");
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  v72 = std::string::append(&v240, " > ?");
  v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  qword_102300F98 = v72->__r_.__value_.__r.__words[2];
  xmmword_102300F88 = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300F88, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v74 = std::string::append(&v235, "MicroLocationLoggedEvents");
  v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  v76 = std::string::append(&v236, " WHERE ");
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  v78 = std::string::append(&v237, "ReceivedTimestamp");
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  v80 = std::string::append(&v238, " < ? OR ");
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  v82 = std::string::append(&v239, "ReceivedTimestamp");
  v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  v84 = std::string::append(&v240, " > ?");
  v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  qword_102300FB0 = v84->__r_.__value_.__r.__words[2];
  xmmword_102300FA0 = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300FA0, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v86 = std::string::append(&v235, "MiLoServices");
  v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  v88 = std::string::append(&v236, " WHERE ");
  v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  v90 = std::string::append(&v237, "LastActiveTimestamp");
  v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  v92 = std::string::append(&v238, " < ? OR ");
  v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0;
  v92->__r_.__value_.__r.__words[2] = 0;
  v92->__r_.__value_.__r.__words[0] = 0;
  v94 = std::string::append(&v239, "LastActiveTimestamp");
  v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0;
  v94->__r_.__value_.__r.__words[2] = 0;
  v94->__r_.__value_.__r.__words[0] = 0;
  v96 = std::string::append(&v240, " > ?");
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  qword_102300FC8 = v96->__r_.__value_.__r.__words[2];
  xmmword_102300FB8 = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300FB8, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v98 = std::string::append(&v235, "MicroLocationAssociatedState");
  v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v99;
  v98->__r_.__value_.__l.__size_ = 0;
  v98->__r_.__value_.__r.__words[2] = 0;
  v98->__r_.__value_.__r.__words[0] = 0;
  v100 = std::string::append(&v236, " WHERE ");
  v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v101;
  v100->__r_.__value_.__l.__size_ = 0;
  v100->__r_.__value_.__r.__words[2] = 0;
  v100->__r_.__value_.__r.__words[0] = 0;
  v102 = std::string::append(&v237, "Timestamp");
  v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  v104 = std::string::append(&v238, " < ? OR ");
  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  v106 = std::string::append(&v239, "Timestamp");
  v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  v108 = std::string::append(&v240, " > ?");
  v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  qword_102300FE0 = v108->__r_.__value_.__r.__words[2];
  xmmword_102300FD0 = v109;
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300FD0, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v110 = std::string::append(&v235, "MiLoLoiTable");
  v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v111;
  v110->__r_.__value_.__l.__size_ = 0;
  v110->__r_.__value_.__r.__words[2] = 0;
  v110->__r_.__value_.__r.__words[0] = 0;
  v112 = std::string::append(&v236, " WHERE ");
  v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v113;
  v112->__r_.__value_.__l.__size_ = 0;
  v112->__r_.__value_.__r.__words[2] = 0;
  v112->__r_.__value_.__r.__words[0] = 0;
  v114 = std::string::append(&v237, "LastSeenTimeStamp");
  v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v115;
  v114->__r_.__value_.__l.__size_ = 0;
  v114->__r_.__value_.__r.__words[2] = 0;
  v114->__r_.__value_.__r.__words[0] = 0;
  v116 = std::string::append(&v238, " < ? OR ");
  v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  v118 = std::string::append(&v239, "LastSeenTimeStamp");
  v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v119;
  v118->__r_.__value_.__l.__size_ = 0;
  v118->__r_.__value_.__r.__words[2] = 0;
  v118->__r_.__value_.__r.__words[0] = 0;
  v120 = std::string::append(&v240, " > ?");
  v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
  qword_102300FF8 = v120->__r_.__value_.__r.__words[2];
  xmmword_102300FE8 = v121;
  v120->__r_.__value_.__l.__size_ = 0;
  v120->__r_.__value_.__r.__words[2] = 0;
  v120->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102300FE8, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v122 = std::string::append(&v235, "MiLoCustomLoiTable");
  v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v123;
  v122->__r_.__value_.__l.__size_ = 0;
  v122->__r_.__value_.__r.__words[2] = 0;
  v122->__r_.__value_.__r.__words[0] = 0;
  v124 = std::string::append(&v236, " WHERE ");
  v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v125;
  v124->__r_.__value_.__l.__size_ = 0;
  v124->__r_.__value_.__r.__words[2] = 0;
  v124->__r_.__value_.__r.__words[0] = 0;
  v126 = std::string::append(&v237, "LastSeenTimeStamp");
  v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v127;
  v126->__r_.__value_.__l.__size_ = 0;
  v126->__r_.__value_.__r.__words[2] = 0;
  v126->__r_.__value_.__r.__words[0] = 0;
  v128 = std::string::append(&v238, " < ? OR ");
  v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  v130 = std::string::append(&v239, "LastSeenTimeStamp");
  v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  v132 = std::string::append(&v240, " > ?");
  v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  qword_102301010 = v132->__r_.__value_.__r.__words[2];
  xmmword_102301000 = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102301000, (void *)&_mh_execute_header);
  *((_BYTE *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  v134 = std::string::append(&v235, "MicroLocationBluetoothIdentityTable");
  v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v135;
  v134->__r_.__value_.__l.__size_ = 0;
  v134->__r_.__value_.__r.__words[2] = 0;
  v134->__r_.__value_.__r.__words[0] = 0;
  v136 = std::string::append(&v236, " WHERE ");
  v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v137;
  v136->__r_.__value_.__l.__size_ = 0;
  v136->__r_.__value_.__r.__words[2] = 0;
  v136->__r_.__value_.__r.__words[0] = 0;
  v138 = std::string::append(&v237, "LastSeenTimeStamp");
  v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  v140 = std::string::append(&v238, " < ? OR ");
  v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v141;
  v140->__r_.__value_.__l.__size_ = 0;
  v140->__r_.__value_.__r.__words[2] = 0;
  v140->__r_.__value_.__r.__words[0] = 0;
  v142 = std::string::append(&v239, "LastSeenTimeStamp");
  v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v143;
  v142->__r_.__value_.__l.__size_ = 0;
  v142->__r_.__value_.__r.__words[2] = 0;
  v142->__r_.__value_.__r.__words[0] = 0;
  v144 = std::string::append(&v240, " > ?");
  v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
  qword_102301028 = v144->__r_.__value_.__r.__words[2];
  xmmword_102301018 = v145;
  v144->__r_.__value_.__l.__size_ = 0;
  v144->__r_.__value_.__r.__words[2] = 0;
  v144->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102301018, (void *)&_mh_execute_header);
  v146 = (std::string *)sub_1015A2E04(&v239, "MicroLocationLabels");
  v147 = std::string::append(v146, ".");
  v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v148;
  v147->__r_.__value_.__l.__size_ = 0;
  v147->__r_.__value_.__r.__words[2] = 0;
  v147->__r_.__value_.__r.__words[0] = 0;
  v149 = std::string::append(&v240, "ClientID");
  v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
  qword_102301040 = v149->__r_.__value_.__r.__words[2];
  xmmword_102301030 = v150;
  v149->__r_.__value_.__l.__size_ = 0;
  v149->__r_.__value_.__r.__words[2] = 0;
  v149->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102301030, (void *)&_mh_execute_header);
  v151 = (std::string *)sub_1015A2E04(&v239, "MiLoServices");
  v152 = std::string::append(v151, ".");
  v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  v154 = std::string::append(&v240, "ServiceUUID");
  v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  unk_102301058 = *((_QWORD *)&v154->__r_.__value_.__l + 2);
  xmmword_102301048 = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102301048, (void *)&_mh_execute_header);
  v156 = (std::string *)sub_1015A2E04(&v239, "MiLoServices");
  v157 = std::string::append(v156, ".");
  v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v158;
  v157->__r_.__value_.__l.__size_ = 0;
  v157->__r_.__value_.__r.__words[2] = 0;
  v157->__r_.__value_.__r.__words[0] = 0;
  v159 = std::string::append(&v240, "ServiceType");
  v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
  qword_102301070 = v159->__r_.__value_.__r.__words[2];
  xmmword_102301060 = v160;
  v159->__r_.__value_.__l.__size_ = 0;
  v159->__r_.__value_.__r.__words[2] = 0;
  v159->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102301060, (void *)&_mh_execute_header);
  *((_BYTE *)&v219.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v219, "DELETE FROM ");
  v161 = std::string::append(&v219, "MicroLocationLabels");
  v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  v163 = std::string::append(&v220, " WHERE (");
  v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
  v221.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v164;
  v163->__r_.__value_.__l.__size_ = 0;
  v163->__r_.__value_.__r.__words[2] = 0;
  v163->__r_.__value_.__r.__words[0] = 0;
  v165 = std::string::append(&v221, "ReceivedTimestamp");
  v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
  v222.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v166;
  v165->__r_.__value_.__l.__size_ = 0;
  v165->__r_.__value_.__r.__words[2] = 0;
  v165->__r_.__value_.__r.__words[0] = 0;
  v167 = std::string::append(&v222, " < ? OR ");
  v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v168;
  v167->__r_.__value_.__l.__size_ = 0;
  v167->__r_.__value_.__r.__words[2] = 0;
  v167->__r_.__value_.__r.__words[0] = 0;
  v169 = std::string::append(&v223, "ReceivedTimestamp");
  v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v170;
  v169->__r_.__value_.__l.__size_ = 0;
  v169->__r_.__value_.__r.__words[2] = 0;
  v169->__r_.__value_.__r.__words[0] = 0;
  v171 = std::string::append(&v224, " > ?) AND ");
  v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
  v225.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v172;
  v171->__r_.__value_.__l.__size_ = 0;
  v171->__r_.__value_.__r.__words[2] = 0;
  v171->__r_.__value_.__r.__words[0] = 0;
  if (qword_102301040 >= 0)
    v173 = (const std::string::value_type *)&xmmword_102301030;
  else
    v173 = (const std::string::value_type *)xmmword_102301030;
  if (qword_102301040 >= 0)
    v174 = HIBYTE(qword_102301040);
  else
    v174 = *((_QWORD *)&xmmword_102301030 + 1);
  v175 = std::string::append(&v225, v173, v174);
  v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
  v226.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v176;
  v175->__r_.__value_.__l.__size_ = 0;
  v175->__r_.__value_.__r.__words[2] = 0;
  v175->__r_.__value_.__r.__words[0] = 0;
  v177 = std::string::append(&v226, " IN (SELECT ");
  v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  v227.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  if (qword_102301040 >= 0)
    v179 = (const std::string::value_type *)&xmmword_102301030;
  else
    v179 = (const std::string::value_type *)xmmword_102301030;
  if (qword_102301040 >= 0)
    v180 = HIBYTE(qword_102301040);
  else
    v180 = *((_QWORD *)&xmmword_102301030 + 1);
  v181 = std::string::append(&v227, v179, v180);
  v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v182;
  v181->__r_.__value_.__l.__size_ = 0;
  v181->__r_.__value_.__r.__words[2] = 0;
  v181->__r_.__value_.__r.__words[0] = 0;
  v183 = std::string::append(&v228, " FROM ");
  v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
  v229.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v184;
  v183->__r_.__value_.__l.__size_ = 0;
  v183->__r_.__value_.__r.__words[2] = 0;
  v183->__r_.__value_.__r.__words[0] = 0;
  v185 = std::string::append(&v229, "MicroLocationLabels");
  v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
  v230.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v186;
  v185->__r_.__value_.__l.__size_ = 0;
  v185->__r_.__value_.__r.__words[2] = 0;
  v185->__r_.__value_.__r.__words[0] = 0;
  v187 = std::string::append(&v230, " INNER JOIN ");
  v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v188;
  v187->__r_.__value_.__l.__size_ = 0;
  v187->__r_.__value_.__r.__words[2] = 0;
  v187->__r_.__value_.__r.__words[0] = 0;
  v189 = std::string::append(&v231, "MiLoServices");
  v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v190;
  v189->__r_.__value_.__l.__size_ = 0;
  v189->__r_.__value_.__r.__words[2] = 0;
  v189->__r_.__value_.__r.__words[0] = 0;
  v191 = std::string::append(&v232, " ON ");
  v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
  v233.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v192;
  v191->__r_.__value_.__l.__size_ = 0;
  v191->__r_.__value_.__r.__words[2] = 0;
  v191->__r_.__value_.__r.__words[0] = 0;
  if (qword_102301040 >= 0)
    v193 = (const std::string::value_type *)&xmmword_102301030;
  else
    v193 = (const std::string::value_type *)xmmword_102301030;
  if (qword_102301040 >= 0)
    v194 = HIBYTE(qword_102301040);
  else
    v194 = *((_QWORD *)&xmmword_102301030 + 1);
  v195 = std::string::append(&v233, v193, v194);
  v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
  v234.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v196;
  v195->__r_.__value_.__l.__size_ = 0;
  v195->__r_.__value_.__r.__words[2] = 0;
  v195->__r_.__value_.__r.__words[0] = 0;
  v197 = std::string::append(&v234, " LIKE '%--' || ");
  v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
  v235.__r_.__value_.__r.__words[2] = v197->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v198;
  v197->__r_.__value_.__l.__size_ = 0;
  v197->__r_.__value_.__r.__words[2] = 0;
  v197->__r_.__value_.__r.__words[0] = 0;
  if (byte_10230105F >= 0)
    v199 = (const std::string::value_type *)&xmmword_102301048;
  else
    v199 = (const std::string::value_type *)xmmword_102301048;
  if (byte_10230105F >= 0)
    v200 = byte_10230105F;
  else
    v200 = *((_QWORD *)&xmmword_102301048 + 1);
  v201 = std::string::append(&v235, v199, v200);
  v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v202;
  v201->__r_.__value_.__l.__size_ = 0;
  v201->__r_.__value_.__r.__words[2] = 0;
  v201->__r_.__value_.__r.__words[0] = 0;
  v203 = std::string::append(&v236, " WHERE ");
  v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v204;
  v203->__r_.__value_.__l.__size_ = 0;
  v203->__r_.__value_.__r.__words[2] = 0;
  v203->__r_.__value_.__r.__words[0] = 0;
  if (qword_102301070 >= 0)
    v205 = (const std::string::value_type *)&xmmword_102301060;
  else
    v205 = (const std::string::value_type *)xmmword_102301060;
  if (qword_102301070 >= 0)
    v206 = HIBYTE(qword_102301070);
  else
    v206 = *((_QWORD *)&xmmword_102301060 + 1);
  v207 = std::string::append(&v237, v205, v206);
  v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v208;
  v207->__r_.__value_.__l.__size_ = 0;
  v207->__r_.__value_.__r.__words[2] = 0;
  v207->__r_.__value_.__r.__words[0] = 0;
  v209 = std::string::append(&v238, " = ");
  v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v210;
  v209->__r_.__value_.__l.__size_ = 0;
  v209->__r_.__value_.__r.__words[2] = 0;
  v209->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, 4uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v213 = std::string::append(&v239, (const std::string::value_type *)p_p, size);
  v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v214;
  v213->__r_.__value_.__l.__size_ = 0;
  v213->__r_.__value_.__r.__words[2] = 0;
  v213->__r_.__value_.__r.__words[0] = 0;
  v215 = std::string::append(&v240, ")");
  v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
  unk_102301088 = *((_QWORD *)&v215->__r_.__value_.__l + 2);
  xmmword_102301078 = v216;
  v215->__r_.__value_.__l.__size_ = 0;
  v215->__r_.__value_.__r.__words[2] = 0;
  v215->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v230.__r_.__value_.__l.__data_);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v228.__r_.__value_.__l.__data_);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v227.__r_.__value_.__l.__data_);
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v224.__r_.__value_.__l.__data_);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v221.__r_.__value_.__l.__data_);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102301078, (void *)&_mh_execute_header);
}

void sub_1002923A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  void *a70;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  uint64_t v85;

  if (*(char *)(v85 - 57) < 0)
    operator delete(*(void **)(v85 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v85 - 89) < 0)
    operator delete(*(void **)(v85 - 112));
  if (*(char *)(v85 - 121) < 0)
    operator delete(*(void **)(v85 - 144));
  if (*(char *)(v85 - 153) < 0)
    operator delete(*(void **)(v85 - 176));
  if (*(char *)(v85 - 185) < 0)
    operator delete(*(void **)(v85 - 208));
  if (*(char *)(v85 - 217) < 0)
    operator delete(*(void **)(v85 - 240));
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a85);
  if (a84 < 0)
    operator delete(a83);
  if (a82 < 0)
    operator delete(a81);
  if (a80 < 0)
    operator delete(a79);
  if (a78 < 0)
    operator delete(a77);
  if (a76 < 0)
    operator delete(a75);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a70);
  if (a68 < 0)
    operator delete(a63);
  if (a61 < 0)
    operator delete(a56);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_10029277C()
{
  uint64_t v0;

  if (*(char *)(v0 - 57) < 0)
    operator delete(*(void **)(v0 - 80));
  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 185) < 0)
    JUMPOUT(0x100292744);
  JUMPOUT(0x100292748);
}

void sub_1002927F0()
{
  uint64_t v0;

  if (*(char *)(v0 - 57) < 0)
    operator delete(*(void **)(v0 - 80));
  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  if (*(char *)(v0 - 153) < 0)
    JUMPOUT(0x100292744);
  JUMPOUT(0x100292748);
}

void sub_10029284C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A0470);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A0470))
  {
    sub_100295628((std::string *)&xmmword_1022A0458);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A0458, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A0470);
  }
  if (byte_1022A046F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A0458, *((unint64_t *)&xmmword_1022A0458 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A0458;
    *(_QWORD *)(a1 + 16) = unk_1022A0468;
  }
}

void sub_1002928FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0470);
  _Unwind_Resume(a1);
}

void sub_100292914(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A0490);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A0490))
  {
    sub_100269F44((std::string *)&xmmword_1022A0478);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A0478, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A0490);
  }
  if (byte_1022A048F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A0478, *((unint64_t *)&xmmword_1022A0478 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A0478;
    *(_QWORD *)(a1 + 16) = unk_1022A0488;
  }
}

void sub_1002929C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0490);
  _Unwind_Resume(a1);
}

uint64_t sub_1002929DC(uint64_t a1, __int128 *a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  __int128 v7;

  *(_QWORD *)a1 = *a5;
  v7 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v7;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  sub_1002E5B44(a1 + 32, a3);
  *(_OWORD *)(a1 + 64) = *a4;
  return a1;
}

void sub_100292A40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100292A60(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  NSObject *v4;
  uint8_t *v5;
  double v6;
  NSObject *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;

  v2 = sub_1000CC4F4(*(_QWORD *)a1);
  *(_BYTE *)(a1 + 8) = v2;
  if (v2)
  {
    sub_100292E80((uint64_t *)a1);
    sub_100634364(*(_QWORD *)a1, "MicroLocationRapport", (const char **)&off_10212AB28, 0, 0);
    v3 = sub_100635B3C(*(_QWORD *)a1, "MicroLocationRapport");
    *(_BYTE *)(a1 + 8) = v3;
    if (v3)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212AB08);
      v4 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        v15 = "MicroLocationRapport";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212AB08);
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Sucessfully created table if necessary: %s", &v12);
LABEL_19:
        v8 = v5;
        sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationRapportTable::initTable()", "%s\n", v6);
LABEL_29:
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212AB08);
      v9 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "MicroLocationRapport";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212AB08);
        v12 = 136446210;
        v13 = "MicroLocationRapport";
        v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Failed to create table: %{public}s", &v12, 12);
        v8 = v11;
        sub_100512490("Generic", 1, 0, 0, "void CLMicroLocationRapportTable::initTable()", "%s\n", v10);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AB08);
    v7 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Database is not connected so we can't intialize our CLMicroLocationRapportTable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212AB08);
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Database is not connected so we can't intialize our CLMicroLocationRapportTable");
      goto LABEL_19;
    }
  }
}

uint64_t sub_100292E54(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_100292A60(a1);
  return a1;
}

BOOL sub_100292E80(uint64_t *a1)
{
  _BOOL8 result;

  result = sub_100635B3C(*a1, "MicroLocationRapport");
  if (result)
    return sub_1002639C4(*a1, (uint64_t *)&off_10212AB28, 5, "MicroLocationRapport");
  return result;
}

uint64_t sub_100292ED4(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  void *v7;
  uint8_t buf[8];

  if (*(_BYTE *)(a1 + 8))
  {
    v1 = *(_QWORD *)a1;
    if (byte_1023010A7 >= 0)
      v2 = (char *)&xmmword_102301090;
    else
      v2 = (char *)xmmword_102301090;
    sub_1000CDA68(v1, v2);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212AB08);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AB08);
    LOWORD(v7) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't insert or replace", &v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationRapportTable::insertOrReplace(const std::vector<CLMicroLocationRapportTable::Entry> &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 0;
}

void sub_100293560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::bad_cast a33)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 8))(a30);
  _Unwind_Resume(exception_object);
}

void sub_1002935E4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  char *v39;
  std::string v40;
  void *__p[2];
  unsigned __int8 v42;
  std::string::value_type __s[8];
  char v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *v54[2];
  int64_t v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;

  *((_BYTE *)&v45.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v45, "SELECT * FROM (");
  v44 = 7;
  strcpy(__s, "SELECT ");
  v6 = std::string::append(&v45, __s, 7uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_10029284C((uint64_t)__p);
  if ((v42 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v42 & 0x80u) == 0)
    v9 = v42;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v46, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v47, " FROM ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v48, "MicroLocationRapport");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v49, " ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a2 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a2;
  else
    v19 = *(const std::string::value_type **)a2;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  v21 = std::string::append(&v50, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v51, " ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v57, " ORDER BY ");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v58, "GenerationTimestamp");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v52, " DESC LIMIT ");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v40, a3);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v40;
  else
    v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  v33 = std::string::append(&v59, (const std::string::value_type *)v31, size);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v53, ") ORDER BY ");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v56, "GenerationTimestamp");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v55 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)v54 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (v44 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v55 >= 0)
    v39 = (char *)v54;
  else
    v39 = (char *)v54[0];
  sub_1000CDA68(a1, v39);
}

void sub_100293BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void **buf)
{
  uint64_t v62;

  buf = &a51;
  sub_1002955A4(&buf);
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (a60 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100293FA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, unsigned int a6@<W5>, _QWORD *a7@<X8>)
{
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  NSObject *v53;
  const char *v54;
  std::string *v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v56.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v56, "WHERE ");
    v14 = std::string::append(&v56, "GenerationTimestamp");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v57, " > ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = *(char *)(a2 + 23);
    if (v18 >= 0)
      v19 = (const std::string::value_type *)a2;
    else
      v19 = *(const std::string::value_type **)a2;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a2 + 23);
    else
      v20 = *(_QWORD *)(a2 + 8);
    v21 = std::string::append(&v58, v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v59, " AND ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v60, "GenerationTimestamp");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v61, "<= ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = *(char *)(a3 + 23);
    if (v29 >= 0)
      v30 = (const std::string::value_type *)a3;
    else
      v30 = *(const std::string::value_type **)a3;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a3 + 23);
    else
      v31 = *(_QWORD *)(a3 + 8);
    v32 = std::string::append(&v62, v30, v31);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a4 + 24))
    {
      *((_BYTE *)&v58.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v58, " AND ");
      v34 = std::string::append(&v58, "RTLOIType");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = std::string::append(&v59, "=\"");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (!*(_BYTE *)(a4 + 24))
        sub_10028DF3C();
      v38 = *(char *)(a4 + 23);
      if (v38 >= 0)
        v39 = (const std::string::value_type *)a4;
      else
        v39 = *(const std::string::value_type **)a4;
      if (v38 >= 0)
        v40 = *(unsigned __int8 *)(a4 + 23);
      else
        v40 = *(_QWORD *)(a4 + 8);
      v41 = std::string::append(&v60, v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = std::string::append(&v61, "\"");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v62;
      else
        v45 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        size = v62.__r_.__value_.__l.__size_;
      std::string::append(&v63, (const std::string::value_type *)v45, size);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (a5[16])
    {
      *((_BYTE *)&v61.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v61, " AND ");
      sub_1015A2E04(&v59, "RtLoiGroupId");
      if (!a5[16])
        sub_10028DF3C();
      sub_1002AAC84((const void **)&v59.__r_.__value_.__l.__data_, a5, (uint64_t)&v60);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v60;
      else
        v47 = (std::string *)v60.__r_.__value_.__r.__words[0];
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        v48 = v60.__r_.__value_.__l.__size_;
      v49 = std::string::append(&v61, (const std::string::value_type *)v47, v48);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v62;
      else
        v51 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v52 = v62.__r_.__value_.__l.__size_;
      std::string::append(&v63, (const std::string::value_type *)v51, v52);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
    }
    sub_1002935E4(*(_QWORD *)a1, (uint64_t)&v63, a6);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212AB08);
  v53 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v63.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select entries between times at loi", (uint8_t *)&v63, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v63, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AB08);
    LOWORD(v62.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, &v63, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't select entries between times at loi", &v62, 2);
    v55 = (std::string *)v54;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLMicroLocationRapportTable::Entry> CLMicroLocationRapportTable::selectBetweenTimesAtLoi(const std::string &, const std::string &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &, uint32_t)", "%s\n", v54);
    if (v55 != &v63)
      free(v55);
  }
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
}

void sub_1002945A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100294744(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  char *v32;
  NSObject *v33;
  const char *v35;
  std::string *v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  void *__p[2];
  int64_t v51;
  std::string v52;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v38.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v38, "DELETE FROM ");
    v4 = std::string::append(&v38, "MicroLocationRapport");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v39, " WHERE ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v40, "GenerationTimestamp");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v41, " IN (");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v42, "SELECT ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v43, "GenerationTimestamp");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v44, " FROM ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v45, "MicroLocationRapport");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v46, " ORDER BY ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v47, "GenerationTimestamp");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v48, " LIMIT ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, a2);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v37;
    else
      v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v49, (const std::string::value_type *)v26, size);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v52, ")");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v51 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (v51 >= 0)
      v32 = (char *)__p;
    else
      v32 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)a1, v32);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212AB08);
  v33 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v52.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't deleteOldestRows", (uint8_t *)&v52, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v52, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AB08);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &v52, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't deleteOldestRows", __p, 2);
    v36 = (std::string *)v35;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationRapportTable::deleteOldestRows(uint64_t)", "%s\n", v35);
    if (v36 != &v52)
      free(v36);
  }
  return 0;
}

void sub_100294DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  if (a66 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100294F4C(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100294F78@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::MessageLite *v9;
  uint64_t result;
  std::runtime_error *exception;
  std::string v12;

  v6 = sqlite3_column_blob(a1, a2);
  v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
    sub_1018EE7B8();
  v8 = v7;
  v9 = (wireless_diagnostics::google::protobuf::MessageLite *)sub_1002BC12C(a3);
  result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v9, v6, v8);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1015A2E04(&v12, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10212AC58;
  }
  return result;
}

void sub_100295040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  wireless_diagnostics::google::protobuf::MessageLite *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_1002E5B48(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_100295088(uint64_t *a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    sub_100259694();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v12 = 0x333333333333333;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)sub_1002952D4((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[80 * v6];
  v19 = &v13[80 * v12];
  sub_1002951BC((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 80;
  sub_100295260(a1, &v16);
  v14 = a1[1];
  sub_100295530(&v16);
  return v14;
}

void sub_1002951A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100295530((void **)va);
  _Unwind_Resume(a1);
}

void sub_1002951BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, _QWORD *a6)
{
  void *__p[2];
  uint64_t v11;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a3 + 16);
  }
  sub_1002929DC(a2, (__int128 *)__p, a4, a5, a6);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_100295244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295260(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100295318((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1002952D4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    sub_10025955C();
  return operator new(80 * a2);
}

uint64_t sub_100295318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 80;
      sub_1002953E0(a1, (__n128 *)(v7 - 80), v9);
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_100295470((uint64_t)v13);
  return v11;
}

void sub_1002953CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100295470((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_1002953E0(uint64_t a1, __n128 *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  __int128 v6;
  __n128 result;

  a2->n128_u64[0] = *(_QWORD *)a3;
  v5 = &a2->n128_u8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    a2[1].n128_u64[1] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  sub_1002E5B44(&a2[2], a3 + 32);
  result = *(__n128 *)(a3 + 64);
  a2[4] = result;
  return result;
}

void sub_100295454(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295470(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002954A4((uint64_t *)a1);
  return a1;
}

void sub_1002954A4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1002954F4(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void sub_1002954F4(uint64_t a1, uint64_t a2)
{
  sub_1002E5B48((wireless_diagnostics::google::protobuf::MessageLite *)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void **sub_100295530(void **a1)
{
  sub_100295560(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100295560(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    sub_1002954F4(v4, i - 80);
  }
}

void sub_1002955A4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_1002954F4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double sub_100295628@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  sub_100295688(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_10029566C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295688(std::string *a1)
{
  sub_1002956C4(a1);
  sub_100295794(a1);
  sub_100295870(a1);
  sub_100269E68(a1);
  return sub_10029594C(a1);
}

uint64_t sub_1002956C4(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "GenerationTimestamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_100295760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295794(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RTLOIType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_10029583C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295870(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Device");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_100295918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029594C(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "RtLoiGroupId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1002959F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295A28()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101B980A0;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  v0 = std::string::append(&v19, "MicroLocationRapport");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v20, " (");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_10029284C((uint64_t)v17);
  if ((v18 & 0x80u) == 0)
    v4 = v17;
  else
    v4 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v5 = v18;
  else
    v5 = (std::string::size_type)v17[1];
  v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v22, ") ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_100292914((uint64_t)__p);
  if ((v16 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v11 = v16;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_1023010A0 = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  xmmword_102301090 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102301090, (void *)&_mh_execute_header);
}

void sub_100295C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 25) < 0)
    operator delete(*(void **)(v40 - 48));
  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char **v6;
  uint64_t v7;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v28[3];
  __int128 v29;
  char v30;
  _OWORD v31[8];
  char v32;
  void *__p;
  void *v34;
  _OWORD *v35;
  char v36;

  *(_QWORD *)a1 = off_10212AC80;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
    sub_10025FD1C();
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  sub_100270E34(a1 + 88, a2);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a5;
  *(_BYTE *)(a1 + 320) = 0;
  v11 = *(_OWORD **)a4;
  v12 = *(_OWORD **)(a4 + 8);
  if (*(_OWORD **)a4 != v12)
  {
    do
    {
      v13 = *(_QWORD *)(a1 + 120);
      v31[0] = *v11;
      v14 = operator new(0x10uLL);
      v34 = v14 + 1;
      v35 = v14 + 1;
      *v14 = v31[0];
      __p = v14;
      sub_100280A50(v13, (uint64_t)&__p, v28);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      sub_1002DF194(v31);
      v32 = 1;
      v29 = *v11;
      v30 = 1;
      sub_100391278(v28, (uint64_t)v31, (uint64_t)&v29, (unint64_t *)(a1 + 32), &__p);
      if (v32)
        sub_1002DF2E0(v31);
      if (v36)
      {
        v16 = *(_OWORD **)(a1 + 16);
        v15 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v16 >= v15)
        {
          v18 = ((char *)v16 - *v6) >> 4;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60)
            sub_100259694();
          v20 = v15 - (_QWORD)*v6;
          if (v20 >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)sub_10028E224(a1 + 24, v21);
          else
            v22 = 0;
          v23 = &v22[16 * v18];
          *(_OWORD *)v23 = *v11;
          v25 = *(char **)(a1 + 8);
          v24 = *(char **)(a1 + 16);
          v26 = v23;
          if (v24 != v25)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            v24 = *v6;
          }
          v17 = v23 + 16;
          *(_QWORD *)(a1 + 8) = v26;
          *(_QWORD *)(a1 + 16) = v23 + 16;
          *(_QWORD *)(a1 + 24) = &v22[16 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v16 = *v11;
          v17 = v16 + 1;
        }
        *(_QWORD *)(a1 + 16) = v17;
      }
      sub_1002967B0((uint64_t)&__p);
      __p = v28;
      sub_100296984((void ***)&__p);
      v11 += 15;
    }
    while (v11 != v12);
  }
  return a1;
}

void sub_100295F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39)
{
  uint64_t v39;
  void **v40;
  void *v42;

  sub_100067AC4(v39 + 48);
  v42 = *v40;
  if (*v40)
  {
    *(_QWORD *)(v39 + 16) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10029600C(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4;
}

uint64_t sub_10029601C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  unint64_t v11;
  std::runtime_error *exception;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::runtime_error *v17;
  std::string v18;
  std::string v19;
  char v20;
  uint64_t v21[3];
  uint64_t v22[3];
  std::string v23;
  __int128 v24;
  char v25;
  std::string __p[8];
  __int128 v27;

  v3 = *(_QWORD *)(a1 + 112);
  if (!v3)
    sub_10025FD1C();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
  {
    v11 = a2;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_101B986F0;
    strcpy(__p[0].__r_.__value_.__l.__data_, "Data Source Cancelled at index ");
    std::to_string(&v19, v11);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v19;
    else
      v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      size = v19.__r_.__value_.__l.__size_;
    v15 = std::string::append(__p, (const std::string::value_type *)v13, size);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    sub_100338E04(exception, &v23);
  }
  v27 = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 16 * a2);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = operator new(0x10uLL);
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v6 + 1);
  __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v6 + 1);
  *v6 = v27;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  sub_100280A50(v5, (uint64_t)__p, v22);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v7 = *(_QWORD *)(a1 + 120);
  v8 = operator new(0x10uLL);
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v8 + 1);
  __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v8 + 1);
  *v8 = v27;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  sub_10028102C(v7, (uint64_t)__p, v21);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v9 = (__int128 *)v21[0];
  sub_100296414(v22, v21[0]);
  sub_1002DF194(&v19);
  v20 = 1;
  v24 = *v9;
  v25 = 1;
  sub_100391278(v22, (uint64_t)&v19, (uint64_t)&v24, (unint64_t *)(a1 + 32), __p);
  sub_100296800(a1 + 128, (uint64_t)__p);
  sub_1002967B0((uint64_t)__p);
  if (v20)
    sub_1002DF2E0(&v19);
  if (!*(_BYTE *)(a1 + 320))
  {
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1015A2E04(&v18, "fFingerprintCache optional is empty, database likely changed since data source construction");
    sub_100338E04(v17, &v18);
  }
  usleep(0x12Cu);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  sub_100270C6C((void ***)__p);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  sub_100296984((void ***)__p);
  return a1 + 128;
}

void sub_1002962D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  int v62;

  if (a51 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a61 < 0)
  {
    operator delete(a56);
    if ((v62 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v62)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v61);
  goto LABEL_10;
}

void sub_100296414(uint64_t *a1, uint64_t a2)
{
  CFStringRef v4;
  int v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  uint8_t buf[8];
  _BYTE v20[10];
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  char *v26;

  sub_1001E4804(buf);
  v18 = 0.0;
  v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMaximumAgeForValidity", 0x8000100u, kCFAllocatorNull);
  v5 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v4, &v18);
  CFRelease(v4);
  v6 = v18;
  v7 = *(std::__shared_weak_count **)v20;
  if (*(_QWORD *)v20)
  {
    v8 = (unint64_t *)(*(_QWORD *)v20 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = 1.0;
  if (v5)
    v10 = v6;
  v11 = a1[1];
  v12 = *a1;
  v13 = sub_100296A6C(*a1, v11, *(double *)(a2 + 16) - v10);
  sub_1002969F8((uint64_t)a1, v13, a1[1]);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212ACE0);
  v14 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v16 = *a1;
    v15 = a1[1];
    v17 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v17 + 29) = 0;
    *(_OWORD *)v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    sub_100261F9C(a2, v17);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&v20[2] = "";
    *(_WORD *)v20 = 2082;
    v21 = 2050;
    v22 = 0xEEEEEEEEEEEEEEEFLL * ((v11 - v12) >> 3);
    v23 = 2050;
    v24 = 0xEEEEEEEEEEEEEEEFLL * ((v15 - v16) >> 3);
    v25 = 2082;
    v26 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"filterStaleWiFiMeasurementsForFingerprint\", \"num measurements before\":%{public}lu, \"num measurements after filter\":%{public}lu, \"Recording UUID\":%{public, location:escape_only}s}", buf, 0x30u);
    operator delete(v17);
  }
}

void sub_100296650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002966B0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  *a1 = off_10212AC80;
  sub_1002967B0((uint64_t)(a1 + 16));
  v2 = (_QWORD *)a1[14];
  if (v2 == a1 + 11)
  {
    v3 = 4;
    v2 = a1 + 11;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_100067AC4((uint64_t)(a1 + 6));
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_100296728(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  *a1 = off_10212AC80;
  sub_1002967B0((uint64_t)(a1 + 16));
  v2 = (_QWORD *)a1[14];
  if (v2 == a1 + 11)
  {
    v3 = 4;
    v2 = a1 + 11;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_100067AC4((uint64_t)(a1 + 6));
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  operator delete();
}

uint64_t sub_1002967B0(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 192))
  {
    v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(_QWORD *)(a1 + 176) = v2;
      operator delete(v2);
    }
    sub_100067AC4(a1 + 104);
    sub_100067AC4(a1 + 64);
    sub_100271390(a1);
  }
  return a1;
}

void sub_100296800(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(unsigned __int8 *)(a1 + 192) == *(unsigned __int8 *)(a2 + 192))
  {
    if (*(_BYTE *)(a1 + 192))
    {
      sub_10027356C(a1, (uint64_t *)a2);
      v4 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v4;
      sub_1000A6464(a1 + 64, (uint64_t *)(a2 + 64));
      sub_1000A6464(a1 + 104, (uint64_t *)(a2 + 104));
      v5 = *(_OWORD *)(a2 + 144);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = v5;
      sub_100006898(a1 + 168, (__n128 *)(a2 + 168));
    }
  }
  else if (*(_BYTE *)(a1 + 192))
  {
    sub_1002968B4(a1);
  }
  else
  {
    sub_100296904(a1, a2);
    *(_BYTE *)(a1 + 192) = 1;
  }
}

uint64_t sub_1002968B4(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (*(_BYTE *)(result + 192))
  {
    v1 = result;
    v2 = *(void **)(result + 168);
    if (v2)
    {
      *(_QWORD *)(v1 + 176) = v2;
      operator delete(v2);
    }
    sub_100067AC4(v1 + 104);
    sub_100067AC4(v1 + 64);
    result = sub_100271390(v1);
    *(_BYTE *)(v1 + 192) = 0;
  }
  return result;
}

uint64_t sub_100296904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = sub_10012D080(a1, (uint64_t *)a2);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_10012D080(v4 + 64, (uint64_t *)(a2 + 64));
  sub_10012D080(a1 + 104, (uint64_t *)(a2 + 104));
  v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  return a1;
}

void sub_100296984(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 120;
        sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)(v4 - 88));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1002969F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    sub_100296B2C(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = v7 - 120;
        sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)(v7 - 88));
        v7 = v8;
      }
      while (v8 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_100296A6C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t i;
  uint64_t v7;
  __int128 v9;

  if (a1 == a2)
    return a2;
  for (i = a1 + 120; *(_DWORD *)(i - 24) != 1 || *(double *)(i - 80) >= a3; i += 120)
  {
    if (i == a2)
      return a2;
  }
  v7 = i - 120;
  if (i - 120 != a2)
  {
    while (i != a2)
    {
      if (*(_DWORD *)(i + 96) != 1 || *(double *)(i + 40) >= a3)
      {
        v9 = *(_OWORD *)(i + 16);
        *(_OWORD *)v7 = *(_OWORD *)i;
        *(_OWORD *)(v7 + 16) = v9;
        sub_1002C18E4(v7 + 32, i + 32);
        *(_DWORD *)(v7 + 112) = *(_DWORD *)(i + 112);
        v7 += 120;
      }
      i += 120;
    }
  }
  return v7;
}

uint64_t sub_100296B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v4;
    *(_OWORD *)(a3 + 16) = v6;
    sub_1002C18E4(a3 + 32, v4 + 32);
    *(_DWORD *)(a3 + 112) = *(_DWORD *)(v4 + 112);
    a3 += 120;
    v4 += 120;
  }
  while (v4 != v5);
  return v5;
}

void sub_100296B9C(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100296BC8@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v6;
  NSObject *v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t *v11;
  NSObject *v12;
  const char *v13;
  _QWORD v14[2];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;

  sub_100119F3C(v14);
  if (a1[23] >= 0)
    v6 = a1;
  else
    v6 = *(const char **)a1;
  if (!sub_100006BB4(a2, v6, v14))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
    v8 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      v9 = a1[23] >= 0 ? (uint64_t *)a1 : *(uint64_t **)a1;
      *(_DWORD *)buf = 68289795;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = v9;
      v21 = 2082;
      v22 = "assert";
      v23 = 2081;
      v24 = "perSourceParams.get(key.c_str(), weightsDict)";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212AD00);
    }
    v10 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v11 = a1[23] >= 0 ? (uint64_t *)a1 : *(uint64_t **)a1;
      *(_DWORD *)buf = 68289795;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = v11;
      v21 = 2082;
      v22 = "assert";
      v23 = 2081;
      v24 = "perSourceParams.get(key.c_str(), weightsDict)";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't find key: ", "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212AD00);
    }
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      if (a1[23] >= 0)
        v13 = a1;
      else
        v13 = *(const char **)a1;
      *(_DWORD *)buf = 68289795;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = (uint64_t *)v13;
      v21 = 2082;
      v22 = "assert";
      v23 = 2081;
      v24 = "perSourceParams.get(key.c_str(), weightsDict)";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationAlgorithms.mm", 47, "createPerSourceWeights");
    __break(1u);
  }
  sub_100296ED4((uint64_t)v14, a3);
  return sub_10011A5A8(v14);
}

void sub_100296EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100296ED4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v10 = 0;
  if ((sub_1001FD98C(a1, "wifi", &v12) & 1) == 0)
  {
    v4 = sub_1018EEBEC();
    goto LABEL_6;
  }
  v4 = sub_1001FD98C(a1, "ble", &v11);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    result = sub_1018EEA8C(v4);
    goto LABEL_7;
  }
  result = sub_1001FD98C(a1, "uwb", &v10);
  if ((result & 1) != 0)
  {
    v7 = v11;
    v6 = v12;
    v8 = v10;
    *a2 = off_10212AD30;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
    return result;
  }
LABEL_7:
  v9 = sub_1018EE92C(result);
  return sub_100296F80(v9);
}

#error "100297000: call analysis failed (funcsize=40)"

void sub_100297030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100297044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  __int16 v11;

  v11 = 0;
  v10 = 0;
  if ((sub_1001E4874(a1, "wifi", (BOOL *)&v11 + 1) & 1) == 0)
  {
    v4 = sub_1018EEBEC();
    goto LABEL_6;
  }
  v4 = sub_1001E4874(a1, "ble", (BOOL *)&v11);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    result = sub_1018EEA8C(v4);
    goto LABEL_7;
  }
  result = sub_1001E4874(a1, "uwb", &v10);
  if ((result & 1) != 0)
  {
    v6 = HIBYTE(v11);
    v7 = v11;
    v8 = v10;
    *(_QWORD *)a2 = off_10212AD80;
    *(_BYTE *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 9) = v7;
    *(_BYTE *)(a2 + 10) = v8;
    return result;
  }
LABEL_7:
  v9 = sub_1018EE92C(result);
  return sub_1002970F8(v9);
}

void sub_1002970F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *(**v36)(_QWORD *);
  uint64_t v37;
  _QWORD *(**v38)(_QWORD *);
  uint64_t v39;
  void *__p;
  uint64_t v41;
  uint64_t v42;
  _QWORD *(**v43)(_QWORD *);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  void *v49[2];
  char v50;
  _QWORD v51[2];
  void *v52[2];
  char v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int16 v67;
  char v68;
  __int128 v69;
  _BYTE v70[64];
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;

  v72 = 0;
  v73 = 0;
  sub_100119F3C(v71);
  if ((sub_1001FD98C(a1, "jaccard_scale_factor", &v73) & 1) == 0)
  {
    sub_1018EF194((uint64_t)v52, v8, v9, v10, v11, v12, v13, v14, v32, v33, v34, v35, (uint64_t)v36, v37, (uint64_t)v38, v39, (uint64_t)__p, v41, v42,
      (uint64_t)v43,
      v44,
      (uint64_t)v45,
      v46,
      v47);
LABEL_18:
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationAlgorithms.mm", LODWORD(v52[0]), "createWeightedEuclideanJaccardDistanceFunction");
    __break(1u);
    return;
  }
  if ((sub_1001FD98C(a1, "e2j_kernel_thr", &v72) & 1) == 0)
  {
    sub_1018EF024((uint64_t)v52, v15, v16, v17, v18, v19, v20, v21, v32, v33, v34, v35, (uint64_t)v36, v37, (uint64_t)v38, v39, (uint64_t)__p, v41, v42,
      (uint64_t)v43,
      v44,
      (uint64_t)v45,
      v46,
      v47);
    goto LABEL_18;
  }
  if (!sub_100006BB4(a1, "per_source_params", v71))
  {
    sub_1018EEEB4((uint64_t)v52, v22, v23, v24, v25, v26, v27, v28, v32, v33, v34, v35, (uint64_t)v36, v37, (uint64_t)v38, v39, (uint64_t)__p, v41, v42,
      (uint64_t)v43,
      v44,
      (uint64_t)v45,
      v46,
      v47);
    goto LABEL_18;
  }
  *(_QWORD *)&v54 = v73;
  *((_QWORD *)&v54 + 1) = v72;
  sub_1015A2E04(v52, "value_scale_factor");
  sub_100524E68(v51, (uint64_t)v71);
  v51[0] = &off_102131AB0;
  sub_100296BC8((const char *)v52, (uint64_t)v51, &v55);
  sub_1015A2E04(v49, "euclidean_weight");
  sub_100524E68(v48, (uint64_t)v71);
  v48[0] = &off_102131AB0;
  sub_100296BC8((const char *)v49, (uint64_t)v48, &v58);
  sub_1015A2E04(&v45, "jaccard_pos_weight");
  sub_100524E68(&v43, (uint64_t)v71);
  v43 = &off_102131AB0;
  sub_100296BC8((const char *)&v45, (uint64_t)&v43, &v61);
  sub_1015A2E04(&__p, "jaccard_neg_weight");
  sub_100524E68(&v38, (uint64_t)v71);
  v38 = &off_102131AB0;
  sub_100296BC8((const char *)&__p, (uint64_t)&v38, &v64);
  sub_100524E68(&v36, (uint64_t)v71);
  v36 = &off_102131AB0;
  sub_100296F80(&v36);
  *(_QWORD *)&v69 = *(_QWORD *)a2;
  BYTE8(v69) = *(_BYTE *)(a2 + 8);
  sub_100298BF8((uint64_t)v70, a3);
  *(_QWORD *)(a4 + 24) = 0;
  v29 = (char *)operator new(0xF8uLL);
  *(_QWORD *)v29 = off_10212ADD0;
  *(_OWORD *)(v29 + 8) = v54;
  *((_QWORD *)v29 + 3) = off_10212AD30;
  *((_OWORD *)v29 + 2) = v56;
  v30 = v60;
  *((_QWORD *)v29 + 6) = v57;
  *((_QWORD *)v29 + 7) = off_10212AD30;
  *((_OWORD *)v29 + 4) = v59;
  *((_QWORD *)v29 + 10) = v30;
  *((_QWORD *)v29 + 11) = off_10212AD30;
  *((_OWORD *)v29 + 6) = v62;
  v31 = v66;
  *((_QWORD *)v29 + 14) = v63;
  *((_QWORD *)v29 + 15) = off_10212AD30;
  *((_OWORD *)v29 + 8) = v65;
  *((_QWORD *)v29 + 18) = v31;
  *((_QWORD *)v29 + 19) = off_10212AD80;
  v29[162] = v68;
  *((_WORD *)v29 + 80) = v67;
  *(_OWORD *)(v29 + 168) = v69;
  sub_100298BF8((uint64_t)(v29 + 184), (uint64_t)v70);
  *(_QWORD *)(a4 + 24) = v29;
  if (v70[56])
    sub_100067AC4((uint64_t)v70);
  sub_10011A56C(&v36);
  sub_10011A56C(&v38);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  sub_10011A56C(&v43);
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  sub_10011A56C(v48);
  if (v50 < 0)
    operator delete(v49[0]);
  sub_10011A56C(v51);
  if (v53 < 0)
    operator delete(v52[0]);
  sub_10011A5A8(v71);
}

void sub_100297458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  void *v72;
  uint64_t v73;
  uint64_t v74;

  operator delete(v72);
  if (a72)
    sub_100067AC4(v73);
  sub_10011A56C(&a13);
  sub_10011A56C(&a15);
  if (a22 < 0)
    operator delete(__p);
  sub_10011A56C(&a23);
  if (a30 < 0)
    operator delete(a25);
  sub_10011A56C(&a31);
  if (a38 < 0)
    operator delete(a33);
  sub_10011A56C(&a39);
  if (a46 < 0)
    operator delete(a41);
  sub_10011A5A8(v74 - 96);
  _Unwind_Resume(a1);
}

void sub_10029755C(int a1)
{
  __asm { BR              X10 }
}

void sub_1002975A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1002970F8(v3, v2, v1, v0);
}

void sub_1002977C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;

  operator delete(v33);
  if (a33)
    sub_100067AC4(v34);
  _Unwind_Resume(a1);
}

void sub_1002977E0()
{
  void *v0;
  uint64_t v1;

  operator delete(v0);
  if (*(_BYTE *)(v1 - 64))
    JUMPOUT(0x1002977FCLL);
  JUMPOUT(0x100297804);
}

void sub_10029780C(int a1)
{
  int v2;
  int v3;
  int v4;
  CFStringRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  if (sub_100297994())
    v2 = sub_10097905C();
  else
    v2 = 0;
  v3 = sub_100297A70();
  v4 = sub_100297B4C();
  sub_1002EBABC(v3, v4, v2);
  sub_1001E4804(&v10);
  v9 = 0;
  v5 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAdaptiveSensorsEnable", 0x8000100u, kCFAllocatorNull);
  sub_1001E48E4(v10, (uint64_t)v5, &v9);
  CFRelease(v5);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_10029755C(a1);
}

void sub_10029794C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100297994()
{
  CFStringRef v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementProcessingUwbRangeEnable", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return 1;
  else
    return v1 ^ 1u;
}

void sub_100297A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100297A70()
{
  CFStringRef v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementProcessingWifiRssiEnable", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return 1;
  else
    return v1 ^ 1u;
}

void sub_100297B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100297B4C()
{
  CFStringRef v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementProcessingBleLeechEnable", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return 1;
  else
    return v1 ^ 1u;
}

void sub_100297C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100297C28(uint64_t a1)
{
  int v1;
  uint64_t v2;

  if (a1 < 2)
    operator new();
  v1 = sub_1018EF8E4(a1);
  sub_100297C98(v1, v2);
}

void sub_100297C98(int a1@<W0>, uint64_t a2@<X8>)
{
  CFStringRef v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  int v11;
  double v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  double v16;
  CFStringRef v17;
  int v18;
  double v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  if (a1 == 2)
  {
    sub_100297F08((_QWORD *)a2);
    sub_1001E4804(&v25);
    LODWORD(v24) = 0;
    v3 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListSmallClusterSize", 0x8000100u, kCFAllocatorNull);
    v4 = sub_1000B1180(v25, (uint64_t)v3, &v24);
    CFRelease(v3);
    v5 = LODWORD(v24);
    v6 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = 20;
    if (v4)
      v9 = v5;
    *(_QWORD *)(a2 + 24) = v9;
    sub_1001E4804(&v25);
    v24 = 0.0;
    v10 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListSmallClusterRelativeSize", 0x8000100u, kCFAllocatorNull);
    v11 = sub_1001FD9FC(v25, (uint64_t)v10, &v24);
    CFRelease(v10);
    v12 = v24;
    v13 = v26;
    if (v26)
    {
      v14 = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = 0.2;
    if (v11)
      v16 = v12;
    *(double *)(a2 + 32) = v16;
    sub_1001E4804(&v25);
    v24 = 0.0;
    v17 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListSmallClusterDistanceThreshold", 0x8000100u, kCFAllocatorNull);
    v18 = sub_1001FD9FC(v25, (uint64_t)v17, &v24);
    CFRelease(v17);
    v19 = v24;
    v20 = v26;
    if (v26)
    {
      v21 = (unint64_t *)&v26->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = 0.375;
    if (v18)
      v23 = v19;
    *(double *)(a2 + 40) = v23;
  }
  else
  {
    sub_100298014((_QWORD *)a2);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
}

void sub_100297EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_100297F08(_QWORD *a1@<X8>)
{
  const __CFString *v2;
  _BOOL4 v3;
  __n128 v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const __CFArray *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_1001E4804(&v10);
  v9 = 0;
  v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListClusterDistanceThresholdVector", 0x8000100u, kCFAllocatorNull);
  v3 = sub_100527258(v10, v2, (CFTypeRef *)&v9);
  CFRelease(v2);
  if (v3)
  {
    v4.n128_f64[0] = sub_100298C60(v9, (uint64_t)a1);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v5 = operator new(8uLL);
    *a1 = v5;
    *v5++ = 0x3FD199999999999ALL;
    a1[1] = v5;
    a1[2] = v5;
  }
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v4);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100297FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100298014(_QWORD *a1@<X8>)
{
  const __CFString *v2;
  _BOOL4 v3;
  __n128 v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const __CFArray *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_1001E4804(&v10);
  v9 = 0;
  v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMagicalMomentsClusterDistanceThresholdVector", 0x8000100u, kCFAllocatorNull);
  v3 = sub_100527258(v10, v2, (CFTypeRef *)&v9);
  CFRelease(v2);
  if (v3)
  {
    v4.n128_f64[0] = sub_100298E18(v9, (uint64_t)a1);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v5 = operator new(0x18uLL);
    a1[2] = v5 + 3;
    v4 = (__n128)xmmword_101B9C830;
    *(_OWORD *)v5 = xmmword_101B9C830;
    v5[2] = 0x3FD8000000000000;
    *a1 = v5;
    a1[1] = v5 + 3;
  }
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v4);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100298110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029812C(int a1)
{
  uint64_t v1;

  switch(a1)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    default:
      v1 = sub_1018EFA5C();
      return sub_10029822C(v1);
  }
}

void sub_10029822C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v9 = 0;
  if ((sub_100526244(a1, "type", &v9) & 1) != 0)
  {
    v7 = 0;
    v8 = 0;
    switch(v9)
    {
      case 0:
        v2 = sub_1001FD98C(a1, "sigma", &v8);
        if ((v2 & 1) != 0)
          operator new();
        goto LABEL_16;
      case 1:
        v6 = sub_1001FD98C(a1, "sigma", &v8);
        if ((v6 & 1) != 0)
          operator new();
        goto LABEL_17;
      case 2:
        v3 = sub_1001FD98C(a1, "sigma", &v8);
        if ((v3 & 1) == 0)
          goto LABEL_14;
        v4 = sub_1001FD98C(a1, "power", &v7);
        if ((v4 & 1) != 0)
          operator new();
        return;
      case 3:
        v5 = sub_1001FD98C(a1, "sigma", &v8);
        if ((v5 & 1) != 0)
          operator new();
        goto LABEL_15;
      default:
        goto LABEL_13;
    }
  }
  else
  {
    sub_1018F0460();
LABEL_13:
    v3 = sub_1018EFBD4(&v9);
LABEL_14:
    v5 = sub_1018F0190(v3);
LABEL_15:
    v2 = sub_1018F02F8(v5);
LABEL_16:
    v6 = sub_1018EFD58(v2);
LABEL_17:
    v4 = sub_1018EFEC0(v6);
  }
  sub_1018F0028(v4);
  __assert_rtn("CLUniformKernelFunction", "CLKernelFunction.h", 97, "sigma > 0.0");
}

void sub_100298468()
{
  operator delete();
}

void sub_1002984A8(int a1)
{
  sub_10029780C(a1);
}

void sub_1002984B4(int a1)
{
  sub_10029755C(a1);
}

void sub_1002984C0(int a1)
{
  sub_10029755C(a1);
}

uint64_t sub_1002984CC()
{
  uint64_t v0;

  if (sub_100297A70())
    v0 = 2;
  else
    v0 = 0;
  if (sub_100297B4C())
    v0 |= 0x20uLL;
  if (sub_100297994() && sub_10097905C())
    return v0 | 0x40;
  return v0;
}

void sub_100298520(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;

  if (a1 >= 3)
  {
    v3 = (uint64_t *)sub_1018F05C8();
    sub_10029855C(v3, v4);
  }
  else
  {
    v2 = (uint64_t)*(&off_10212B270 + (int)a1);
    *a2 = off_10212B1D0;
    a2[1] = v2;
    a2[3] = a2;
  }
}

void sub_10029855C(uint64_t *a1, unsigned int a2)
{
  CFStringRef v4;
  int v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  double v22;
  double v23;
  NSObject *v24;
  NSObject *v25;
  __int128 *v26;
  double v27;
  __int128 v28;
  double v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  _BYTE v33[12];
  _BYTE buf[18];
  __int16 v35;
  uint64_t v36;

  if (a2 < 2)
    goto LABEL_4;
  if (a2 == 2)
    return;
  if (a2 == 3)
  {
LABEL_4:
    sub_1001E4804(buf);
    *(_QWORD *)v33 = 0;
    v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMinimumMicroLocationProbabilityForLocalization", 0x8000100u, kCFAllocatorNull);
    v5 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v4, v33);
    CFRelease(v4);
    v6 = *(double *)v33;
    v7 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (!v5)
      v6 = 0.005;
    v10 = (__int128 *)*a1;
    v11 = (__int128 *)a1[1];
    if ((__int128 *)*a1 == v11)
    {
      v12 = 0.0;
    }
    else
    {
      v12 = 0.0;
      do
      {
        if (*((double *)v10 + 2) < 0.0)
        {
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_10212AD00);
          v13 = qword_1022A00F8;
          if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
          {
            v14 = *((_QWORD *)v10 + 2);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning microlocation probability should be non-negative %{public}f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00F0 != -1)
              dispatch_once(&qword_1022A00F0, &stru_10212AD00);
            v15 = *((_QWORD *)v10 + 2);
            *(_DWORD *)v33 = 134349056;
            *(_QWORD *)&v33[4] = v15;
            LODWORD(v32) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning microlocation probability should be non-negative %{public}f", v33, v32);
            v17 = (char *)v16;
            sub_100512490("Generic", 1, 0, 2, "auto CLMicroLocationAlgorithms::removeImprobableLocations(std::vector<CLMicroLocationResultInternal> &, LocalizerType)::(anonymous class)::operator()(auto, const auto &) const [currentSum:auto = double, result:auto = CLMicroLocationResultInternal]", "%s\n", v16);
            if (v17 != buf)
              free(v17);
          }
        }
        v12 = v12 + *((double *)v10 + 2);
        v10 += 2;
      }
      while (v10 != v11);
    }
    if (fabs(v12 + -1.0) > nextafter(1.0, INFINITY) + -1.0)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212AD00);
      v18 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning microlocation probability vector should sum to 1.0 %{public}f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212AD00);
        *(_DWORD *)v33 = 134349056;
        *(double *)&v33[4] = v12;
        LODWORD(v32) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning microlocation probability vector should sum to 1.0 %{public}f", v33, v32);
        v31 = (char *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationAlgorithms::removeImprobableLocations(std::vector<CLMicroLocationResultInternal> &, LocalizerType)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
    }
    v20 = *a1;
    v19 = (__int128 *)a1[1];
    if ((__int128 *)*a1 == v19)
    {
      v23 = 0.0;
      v21 = (__int128 *)*a1;
    }
    else
    {
      v21 = (__int128 *)*a1;
      while (1)
      {
        v22 = *((double *)v21 + 2);
        if (v22 < v6)
          break;
        v21 += 2;
        if (v21 == v19)
        {
          v23 = 0.0;
          goto LABEL_55;
        }
      }
      v23 = v22 + 0.0;
    }
    if (v21 != v19)
    {
      v26 = v21 + 2;
      if (v21 + 2 != v19)
      {
        do
        {
          v27 = *((double *)v26 + 2);
          if (v27 >= v6)
          {
            v28 = *v26;
            *(__int128 *)((char *)v21 + 12) = *(__int128 *)((char *)v26 + 12);
            *v21 = v28;
            v21 += 2;
          }
          else
          {
            v23 = v27 + v23;
          }
          v26 += 2;
        }
        while (v26 != v19);
        v20 = *a1;
        v19 = (__int128 *)a1[1];
      }
    }
    if (v21 != v19)
    {
      v19 = v21;
      a1[1] = (uint64_t)v21;
    }
LABEL_55:
    if ((__int128 *)v20 != v19)
    {
      v29 = v23 / (double)(unint64_t)(((uint64_t)v19 - v20) >> 5);
      do
      {
        *(double *)(v20 + 16) = v29 + *(double *)(v20 + 16);
        v20 += 32;
      }
      while ((__int128 *)v20 != v19);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
    v24 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v35 = 2050;
      v36 = a2;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"invalid\", \"localizer type\":%{public}lu}", buf, 0x1Cu);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212AD00);
    }
    v25 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v35 = 2050;
      v36 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "invalid", "{\"msg%{public}.0s\":\"invalid\", \"localizer type\":%{public}lu}", buf, 0x1Cu);
    }
  }
}

void sub_100298BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100298BCC(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100298BF8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    sub_1002708EC(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_100298C44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 56))
    sub_100067AC4(v1);
  _Unwind_Resume(exception_object);
}

double sub_100298C60@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  uint64_t v6;
  CFRange v7;

  v5 = 0uLL;
  v6 = 0;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100298CDC, &v5);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

void sub_100298CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100298CDC(const void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  sub_100298DBC(a1);
  v4 = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a2;
    v9 = ((uint64_t)v6 - *(_QWORD *)a2) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0(a2 + 16, v12);
      v8 = *(_QWORD **)a2;
      v6 = *(_QWORD **)(a2 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = v3;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
}

uint64_t sub_100298DBC(const void *a1)
{
  CFTypeID v2;
  uint64_t result;
  uint64_t v4;
  uint64_t valuePtr;

  v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID())
  {
    result = sub_1018F08A0();
    goto LABEL_5;
  }
  valuePtr = 0;
  result = CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
  if (!(_DWORD)result)
  {
LABEL_5:
    v4 = sub_1018F0740(result);
    return sub_100298E18(v4);
  }
  return result;
}

double sub_100298E18@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  uint64_t v6;
  CFRange v7;

  v5 = 0uLL;
  v6 = 0;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100298E94, &v5);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

void sub_100298E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100298E94(const void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  sub_100298DBC(a1);
  v4 = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a2;
    v9 = ((uint64_t)v6 - *(_QWORD *)a2) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0(a2 + 16, v12);
      v8 = *(_QWORD **)a2;
      v6 = *(_QWORD **)(a2 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = v3;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
}

void sub_100298F74()
{
  operator delete();
}

double sub_100298F88(double *a1, uint64_t a2)
{
  int v2;
  double result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *(_DWORD *)(a2 + 8);
  switch(v2)
  {
    case 6:
      return a1[3];
    case 5:
      return a1[2];
    case 1:
      return a1[1];
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Datatype not supported", buf, 2u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0.0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Datatype not supported", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "virtual T CLMicroLocationUtils::PerSourceWeights<double>::operator[](const CLMicroLocationFingerprint::Measurement &) const [T = double]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0.0;
  }
  return result;
}

void sub_100299148()
{
  operator delete();
}

BOOL sub_10029915C(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 result;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v2 = *(_DWORD *)(a2 + 8);
  switch(v2)
  {
    case 6:
      v3 = a1[10];
      return v3 != 0;
    case 5:
      v3 = a1[9];
      return v3 != 0;
    case 1:
      v3 = a1[8];
      return v3 != 0;
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  v5 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Datatype not supported", buf, 2u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Datatype not supported", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "virtual T CLMicroLocationUtils::PerSourceWeights<BOOL>::operator[](const CLMicroLocationFingerprint::Measurement &) const [T = BOOL]", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_100299328(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212ADD0;
  if (*(_BYTE *)(a1 + 240))
    sub_100067AC4(a1 + 184);
  return a1;
}

void sub_100299364(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212ADD0;
  if (*(_BYTE *)(a1 + 240))
    sub_100067AC4(a1 + 184);
  operator delete();
}

char *sub_1002993B0(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0xF8uLL);
  *(_QWORD *)v2 = off_10212ADD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = off_10212AD30;
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 7) = off_10212AD30;
  *((_OWORD *)v2 + 4) = *(_OWORD *)(a1 + 64);
  *((_QWORD *)v2 + 10) = *(_QWORD *)(a1 + 80);
  *((_QWORD *)v2 + 11) = off_10212AD30;
  *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 96);
  *((_QWORD *)v2 + 14) = *(_QWORD *)(a1 + 112);
  *((_QWORD *)v2 + 15) = off_10212AD30;
  v3 = *(_QWORD *)(a1 + 144);
  *((_OWORD *)v2 + 8) = *(_OWORD *)(a1 + 128);
  *((_QWORD *)v2 + 18) = v3;
  *((_QWORD *)v2 + 19) = off_10212AD80;
  v2[162] = *(_BYTE *)(a1 + 162);
  *((_WORD *)v2 + 80) = *(_WORD *)(a1 + 160);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  sub_100298BF8((uint64_t)(v2 + 184), a1 + 184);
  return v2;
}

void sub_100299470(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100299484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = off_10212ADD0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = off_10212AD30;
  v2 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = v2;
  *(_QWORD *)(a2 + 56) = off_10212AD30;
  v3 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = v3;
  *(_QWORD *)(a2 + 88) = off_10212AD30;
  v4 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 112) = v4;
  *(_QWORD *)(a2 + 120) = off_10212AD30;
  v5 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 144) = v5;
  *(_QWORD *)(a2 + 152) = off_10212AD80;
  LOWORD(v5) = *(_WORD *)(a1 + 160);
  *(_BYTE *)(a2 + 162) = *(_BYTE *)(a1 + 162);
  *(_WORD *)(a2 + 160) = v5;
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 168);
  return sub_100298BF8(a2 + 184, a1 + 184);
}

uint64_t sub_10029951C(uint64_t result)
{
  if (*(_BYTE *)(result + 240))
    return sub_100067AC4(result + 184);
  return result;
}

void sub_100299530(_BYTE *__p)
{
  if (__p[240])
    sub_100067AC4((uint64_t)(__p + 184));
  operator delete(__p);
}

double sub_100299560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100345594(a2, a3, a1 + 24, a1 + 56, a1 + 88, a1 + 120, a1 + 152, (uint64_t *)(a1 + 168), *(double *)(a1 + 8), *(double *)(a1 + 16), a1 + 184);
}

uint64_t sub_1002995AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002995E8()
{
}

uint64_t sub_1002995F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212AE60;
  if (*(_BYTE *)(a1 + 80))
    sub_100067AC4(a1 + 24);
  return a1;
}

void sub_100299630(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212AE60;
  if (*(_BYTE *)(a1 + 80))
    sub_100067AC4(a1 + 24);
  operator delete();
}

char *sub_10029967C(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_10212AE60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_100298BF8((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_1002996C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002996DC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_10212AE60;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_100298BF8(a2 + 24, a1 + 24);
}

uint64_t sub_100299700(uint64_t result)
{
  if (*(_BYTE *)(result + 80))
    return sub_100067AC4(result + 24);
  return result;
}

void sub_100299714(_BYTE *__p)
{
  if (__p[80])
    sub_100067AC4((uint64_t)(__p + 24));
  operator delete(__p);
}

double sub_100299744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003453D8(a2, a3, (uint64_t *)(a1 + 8), a1 + 24);
}

uint64_t sub_10029975C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100299798()
{
}

uint64_t sub_1002997A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212AEE0;
  if (*(_BYTE *)(a1 + 80))
    sub_100067AC4(a1 + 24);
  return a1;
}

void sub_1002997E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212AEE0;
  if (*(_BYTE *)(a1 + 80))
    sub_100067AC4(a1 + 24);
  operator delete();
}

char *sub_10029982C(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_10212AEE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_100298BF8((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_100299878(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10029988C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_10212AEE0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_100298BF8(a2 + 24, a1 + 24);
}

uint64_t sub_1002998B0(uint64_t result)
{
  if (*(_BYTE *)(result + 80))
    return sub_100067AC4(result + 24);
  return result;
}

void sub_1002998C4(_BYTE *__p)
{
  if (__p[80])
    sub_100067AC4((uint64_t)(__p + 24));
  operator delete(__p);
}

double sub_1002998F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100345430(a2, a3, (uint64_t *)(a1 + 8), a1 + 24);
}

uint64_t sub_10029990C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100299948()
{
}

uint64_t sub_100299954(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212AF60;
  if (*(_BYTE *)(a1 + 96))
    sub_100067AC4(a1 + 40);
  return a1;
}

void sub_100299990(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212AF60;
  if (*(_BYTE *)(a1 + 96))
    sub_100067AC4(a1 + 40);
  operator delete();
}

char *sub_1002999DC(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = off_10212AF60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  sub_100298BF8((uint64_t)(v2 + 40), a1 + 40);
  return v2;
}

void sub_100299A30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100299A44(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = off_10212AF60;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return sub_100298BF8(a2 + 40, a1 + 40);
}

uint64_t sub_100299A70(uint64_t result)
{
  if (*(_BYTE *)(result + 96))
    return sub_100067AC4(result + 40);
  return result;
}

void sub_100299A84(_BYTE *__p)
{
  if (__p[96])
    sub_100067AC4((uint64_t)(__p + 40));
  operator delete(__p);
}

uint64_t sub_100299AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003454A8(a2, a3, (uint64_t *)(a1 + 8), a1 + 40);
}

uint64_t sub_100299AD0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100299B0C()
{
}

void sub_100299B1C()
{
  operator delete();
}

_QWORD *sub_100299B30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10212AFE0;
  result[1] = v3;
  return result;
}

uint64_t sub_100299B64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10212AFE0;
  a2[1] = v2;
  return result;
}

void sub_100299B80(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  sub_100345824(a2, a3, *(long double *)(a1 + 8));
}

uint64_t sub_100299B90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100299BCC()
{
}

void sub_100299BD8()
{
  operator delete();
}

uint64_t sub_100299BEC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  double v4;
  uint64_t (**v6)();

  v6 = off_10212A008;
  v4 = sub_100260538((uint64_t)&v6, a2, a3);
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, sqrt(v4));
}

double sub_100299C3C(uint64_t a1, double a2)
{
  return exp(-(*(double *)(a1 + 8) * a2));
}

double sub_100299C48(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t (**v4)();

  v4 = off_10212A008;
  return sqrt(sub_100260538((uint64_t)&v4, a2, a3));
}

double sub_100299C7C(double *a1, double a2)
{
  double result;

  *(_QWORD *)a1 = off_10212B0F8;
  a1[1] = 0.5;
  if (a2 <= 0.0)
    sub_1018F0A00();
  result = 1.0 / ((a2 + a2) * a2);
  a1[1] = result;
  return result;
}

double sub_100299CC0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  double v3;
  long double v4;
  uint64_t (**v6)();

  v3 = *(double *)(a1 + 8);
  v6 = off_10212A008;
  v4 = -(v3 * sub_100260538((uint64_t)&v6, a2, a3));
  return exp(v4);
}

double sub_100299D00(uint64_t a1, double a2)
{
  return exp(-(*(double *)(a1 + 8) * a2) * a2);
}

uint64_t sub_100299D10(uint64_t a1, long double a2, long double a3)
{
  *(_QWORD *)a1 = off_10212B140;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q2;
  if (a3 <= 0.0)
    sub_1018F0A28();
  if (a2 <= 0.0)
    sub_1018F0A50();
  *(long double *)(a1 + 8) = a3;
  *(long double *)(a1 + 16) = 1.0 / pow(a2, a3);
  return a1;
}

void sub_100299D74()
{
  operator delete();
}

double sub_100299D88(uint64_t a1, long double a2)
{
  double v2;
  long double v3;

  v2 = *(double *)(a1 + 16);
  v3 = -(v2 * pow(a2, *(long double *)(a1 + 8)));
  return exp(v3);
}

double sub_100299DAC(uint64_t a1, double a2)
{
  BOOL v2;
  double result;

  v2 = *(double *)(a1 + 8) <= a2;
  result = 0.0;
  if (!v2)
    return 1.0;
  return result;
}

_QWORD *sub_100299DC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10212B1D0;
  result[1] = v3;
  return result;
}

uint64_t sub_100299DFC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10212B1D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100299E1C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(a2, *a3, a3[1], *a4, a4[1], *a5, a5[1]);
}

uint64_t sub_100299E40(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10212B250))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100299E7C()
{
  return &off_10212B250;
}

void sub_100299E88(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x26u);
}

void sub_100299F3C(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x2Cu);
}

BOOL sub_100299F5C()
{
  return os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100299F70(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

void sub_100299FB4(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x2Cu);
}

void sub_100299FC8(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x2Cu);
}

BOOL sub_10029A008()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 248));
}

_QWORD *sub_10029A058(_QWORD *result, uint64_t a2)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = a2;
  return result;
}

uint64_t sub_10029A064(uint64_t *a1)
{
  NSObject *v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (*a1 == a1[1])
    return 1;
  if (sub_10029A3C0(a1[3]))
  {
    sub_10029A61C(a1);
    return 1;
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B288);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "EventLogger, failed to flush to disk", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B288);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "EventLogger, failed to flush to disk", v11, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMicroLocationEventLogger::flushToDisk()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  if (v4 >= sub_1000B10A4())
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B288);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "EventLogger, Max buffer reached after failing to flush to disk. Clearing event logger buffer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B288);
      v11[0] = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "EventLogger, Max buffer reached after failing to flush to disk. Clearing event logger buffer", v11, v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMicroLocationEventLogger::flushToDisk()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_10029A61C(a1);
  }
  return 0;
}

uint64_t *sub_10029A380(uint64_t *a1)
{
  void **v3;

  sub_10029A064(a1);
  v3 = (void **)a1;
  sub_10029A77C(&v3);
  return a1;
}

uint64_t sub_10029A3C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 248);
    if (!v2)
      operator new();
    v3 = sub_10038B648(v2);
    sub_10029AA10(a1);
    return v3;
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B288);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Can't insert because the database is invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B288);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Can't insert because the database is invalid", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::insertOrReplace(const std::vector<TableEntry> &) [TableEntry = CLMicroLocationLoggedEventsTable::Entry]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    return 0;
  }
}

void sub_10029A5F0()
{
  operator delete();
}

uint64_t sub_10029A61C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v4 = v2 - 336;
      sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)(v2 - 304));
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
  return sub_10029A66C((uint64_t)a1);
}

uint64_t sub_10029A66C(uint64_t result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = *(_QWORD *)result;
  v2 = *(int64x2_t *)(result + 8);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)result)), 4uLL);
  v4 = 0xCF3CF3CF3CF3CF3DLL * v3.i64[0];
  v5 = v4;
  if (0xCF3CF3CF3CF3CF3DLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = result + 16;
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)sub_10029A91C(v7, v4);
    }
    v10 = v8;
    v11 = &v8[336 * v5];
    v12 = v11;
    v13 = &v8[336 * v9];
    sub_10021042C(v6, &v10);
    return sub_1000B26F8((uint64_t)&v10);
  }
  return result;
}

void sub_10029A728(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x10029A718);
}

void sub_10029A750(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10029A77C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 336;
        sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)(v4 - 304));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10029A7F0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xC30C30C30C30C3)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x61861861861861)
    v9 = 0xC30C30C30C30C3;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10029A91C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[336 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[336 * v9];
  v12 = *a2;
  *(_OWORD *)(v11 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)v11 = v12;
  sub_1000B26F4(v11 + 32, a2 + 2);
  v16 += 336;
  sub_10021042C(a1, v15);
  v13 = a1[1];
  sub_1000B26F8((uint64_t)v15);
  return v13;
}

void sub_10029A908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000B26F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10029A91C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC30C30C30C30C4)
    sub_10025955C();
  return operator new(336 * a2);
}

uint64_t sub_10029A964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;

  for (i = 368; ; i -= 336)
  {
    v12 = a3 + i;
    if (a3 + i - 368 == a5)
      break;
    v13 = (_OWORD *)(a7 + i - 704);
    v14 = *(_OWORD *)(v12 - 704);
    *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)(v12 - 692);
    *v13 = v14;
    v15 = a7 + i - 672;
    sub_1000B26F4(v15, v12 - 672);
  }
  return a6;
}

uint64_t sub_10029AA10(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;

  v2 = sub_10028FD54(a1);
  if (sub_10029AC04() > v2)
    return 1;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B288);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v11 = "MicroLocationLoggedEvents";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B288);
    v8 = 136446210;
    v9 = "MicroLocationLoggedEvents";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::freeSpaceIfFull() [Table = CLMicroLocationLoggedEventsTable]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  result = sub_100288438(a1);
  if ((_DWORD)result)
  {
    if (*(uint64_t *)(a1 + 160) <= 0)
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v5 = *(_QWORD *)(a1 + 160);
    sub_100053048(a1 + 72, v5);
    return 1;
  }
  return result;
}

uint64_t sub_10029AC04()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLoggedEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 25000;
}

void sub_10029ACC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10029ACE0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A04B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A04B0))
  {
    sub_10029D53C((std::string *)&xmmword_1022A0498);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A0498, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A04B0);
  }
  if (byte_1022A04AF < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A0498, *((unint64_t *)&xmmword_1022A0498 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A0498;
    *(_QWORD *)(a1 + 16) = unk_1022A04A8;
  }
}

void sub_10029AD90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A04B0);
  _Unwind_Resume(a1);
}

void sub_10029ADA8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A04D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A04D0))
  {
    sub_100269F44((std::string *)&xmmword_1022A04B8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A04B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A04D0);
  }
  if (byte_1022A04CF < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A04B8, *((unint64_t *)&xmmword_1022A04B8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A04B8;
    *(_QWORD *)(a1 + 16) = unk_1022A04C8;
  }
}

void sub_10029AE58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A04D0);
  _Unwind_Resume(a1);
}

void sub_10029AE70(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  NSObject *v4;
  uint8_t *v5;
  double v6;
  NSObject *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  __int128 v12;
  uint8_t buf[4];
  const char *v14;

  v2 = sub_1000CC4F4(*(_QWORD *)a1);
  *(_BYTE *)(a1 + 8) = v2;
  if (v2)
  {
    sub_100634364(*(_QWORD *)a1, "MicroLocationBluetoothIdentityTable", (const char **)&off_10212B2C8, 0, 0);
    v3 = sub_100635B3C(*(_QWORD *)a1, "MicroLocationBluetoothIdentityTable");
    *(_BYTE *)(a1 + 8) = v3;
    if (v3)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
      v4 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        v14 = "MicroLocationBluetoothIdentityTable";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Sucessfully created table if necessary: %s", &v12);
LABEL_19:
        v8 = v5;
        sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationBluetoothIdentityTable::initTable()", "%s\n", v6);
LABEL_29:
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
      v9 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "MicroLocationBluetoothIdentityTable";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
        LODWORD(v12) = 136446210;
        *(_QWORD *)((char *)&v12 + 4) = "MicroLocationBluetoothIdentityTable";
        v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Failed to create table: %{public}s", &v12, 12);
        v8 = v11;
        sub_100512490("Generic", 1, 0, 0, "void CLMicroLocationBluetoothIdentityTable::initTable()", "%s\n", v10);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
    v7 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v14 = "MicroLocationBluetoothIdentityTable";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Database is not connected so we can't intialize our %{public}s table", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
      LODWORD(v12) = 136446210;
      *(_QWORD *)((char *)&v12 + 4) = "MicroLocationBluetoothIdentityTable";
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Database is not connected so we can't intialize our %{public}s table", &v12, 12, v12);
      goto LABEL_19;
    }
  }
}

uint64_t sub_10029B284(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_10029AE70(a1);
  return a1;
}

uint64_t sub_10029B2B0(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, double a6)
{
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = (_BYTE *)(a1 + 40);
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4(v10, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v11 = *a5;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a5 + 2);
    *(_OWORD *)v10 = v11;
  }
  *(double *)(a1 + 64) = a6;
  return a1;
}

void sub_10029B344(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029B364(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  void *__p;
  uint8_t buf[8];

  if (*(_BYTE *)(a1 + 8))
  {
    v1 = *(_QWORD *)a1;
    if (byte_1023010BF >= 0)
      v2 = (char *)&xmmword_1023010A8;
    else
      v2 = (char *)xmmword_1023010A8;
    sub_1000CDA68(v1, v2);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't insert or replace", &__p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationBluetoothIdentityTable::insertOrReplace(const std::vector<CLMicroLocationBluetoothIdentityTable::Entry> &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 0;
}

void sub_10029B968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::bad_cast a26)
{
  if (a22 < 0)
    operator delete(__p);
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  _Unwind_Resume(exception_object);
}

void sub_10029B9CC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  char *v37;
  std::string v38;
  void *__p[2];
  unsigned __int8 v40;
  std::string::value_type __s[8];
  char v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  void *v52[2];
  int64_t v53;
  std::string v54;
  std::string v55;
  std::string v56;

  *((_BYTE *)&v43.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v43, "SELECT * FROM (");
  v42 = 7;
  strcpy(__s, "SELECT ");
  v6 = std::string::append(&v43, __s, 7uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_10029ACE0((uint64_t)__p);
  if ((v40 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v40 & 0x80u) == 0)
    v9 = v40;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v44, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v45, " FROM ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v46, "MicroLocationBluetoothIdentityTable");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v47, " ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a2 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a2;
  else
    v19 = *(const std::string::value_type **)a2;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  v21 = std::string::append(&v48, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v49, " ORDER BY ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v55, "LastSeenTimeStamp");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v50, " DESC LIMIT ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v38, a3);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v38;
  else
    v29 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    size = v38.__r_.__value_.__l.__size_;
  v31 = std::string::append(&v56, (const std::string::value_type *)v29, size);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v51, ") ORDER BY ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v54, "LastSeenTimeStamp");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v53 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)v52 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v53 >= 0)
    v37 = (char *)v52;
  else
    v37 = (char *)v52[0];
  sub_1000CDA68(a1, v37);
}

void sub_10029BF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void **buf)
{
  uint64_t v62;

  buf = &a51;
  sub_10029D4B8(&buf);
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (a60 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10029C2E8()
{
  __cxa_end_catch();
  JUMPOUT(0x10029C0D8);
}

void sub_10029C2FC(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x10029C10CLL);
}

void sub_10029C30C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  NSObject *v30;
  const char *v31;
  void **v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  void *__p[205];

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v33.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v33, "WHERE ");
    v10 = std::string::append(&v33, "LastSeenTimeStamp");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v34, " > ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)a2;
    else
      v15 = *(const std::string::value_type **)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    v17 = std::string::append(&v35, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v36, " AND ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v37, "LastSeenTimeStamp");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v38, "<= ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = *(char *)(a3 + 23);
    if (v25 >= 0)
      v26 = (const std::string::value_type *)a3;
    else
      v26 = *(const std::string::value_type **)a3;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(a3 + 23);
    else
      v27 = *(_QWORD *)(a3 + 8);
    v28 = std::string::append(&v39, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    __p[2] = (void *)v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    sub_10029B9CC(*(_QWORD *)a1, (uint64_t)__p, a4);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
  v30 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
    LOWORD(v39.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't select all", &v39, 2);
    v32 = (void **)v31;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLMicroLocationBluetoothIdentityTable::Entry> CLMicroLocationBluetoothIdentityTable::selectBetweenTimes(const std::string &, const std::string &, uint32_t)", "%s\n", v31);
    if (v32 != __p)
      free(v32);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
}

void sub_10029C6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10029C778(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  char *v32;
  NSObject *v33;
  const char *v35;
  std::string *v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  void *__p[2];
  int64_t v51;
  std::string v52;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v38.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v38, "DELETE FROM ");
    v4 = std::string::append(&v38, "MicroLocationBluetoothIdentityTable");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v39, " WHERE ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v40, "LastSeenTimeStamp");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v41, " IN (");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v42, "SELECT ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v43, "LastSeenTimeStamp");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v44, " FROM ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v45, "MicroLocationBluetoothIdentityTable");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v46, " ORDER BY ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v47, "LastSeenTimeStamp");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v48, " LIMIT ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, a2);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v37;
    else
      v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v49, (const std::string::value_type *)v26, size);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v52, ")");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v51 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (v51 >= 0)
      v32 = (char *)__p;
    else
      v32 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)a1, v32);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
  v33 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v52.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't deleteOldestRows", (uint8_t *)&v52, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v52, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B2A8);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &v52, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't deleteOldestRows", __p, 2);
    v36 = (std::string *)v35;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationBluetoothIdentityTable::deleteOldestRows(uint64_t)", "%s\n", v35);
    if (v36 != &v52)
      free(v36);
  }
  return 0;
}

void sub_10029CDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  if (a66 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10029CF80(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10029CFAC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, double *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x38E38E38E38E38ELL)
    sub_100259694();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v7)
    v7 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v12 = 0x38E38E38E38E38ELL;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)sub_10029D26C((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[72 * v6];
  v19 = &v13[72 * v12];
  sub_10029D0F8((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 72;
  sub_10029D1F8(a1, &v16);
  v14 = a1[1];
  sub_10029D444(&v16);
  return v14;
}

void sub_10029D0E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10029D444((void **)va);
  _Unwind_Resume(a1);
}

void sub_10029D0F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, double *a6)
{
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  void *__dst[2];
  uint64_t v14;

  v9 = *a3;
  v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a4;
    v14 = *(_QWORD *)(a4 + 16);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v12 = *(_QWORD *)(a5 + 16);
  }
  sub_10029B2B0(a2, v9, v10, (__int128 *)__dst, (__int128 *)__p, *a6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_10029D1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D1F8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10029D2B4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10029D26C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_10025955C();
  return operator new(72 * a2);
}

uint64_t sub_10029D2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      v8 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_10029D37C((uint64_t)v12);
  return v10;
}

uint64_t sub_10029D37C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10029D3B0((uint64_t *)a1);
  return a1;
}

void sub_10029D3B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_10029D400(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void sub_10029D400(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void **sub_10029D444(void **a1)
{
  sub_10029D474(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_10029D474(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    sub_10029D400(v4, i - 72);
  }
}

void sub_10029D4B8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_10029D400((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double sub_10029D53C@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  sub_10029D59C(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_10029D580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D59C(std::string *a1)
{
  sub_10029D5D8(a1);
  sub_10029D6A8(a1);
  sub_10029D784(a1);
  sub_10029D860(a1);
  return sub_10029D93C(a1);
}

uint64_t sub_10029D5D8(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  v2 = std::string::append(&v7, "RowId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_10029D674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D6A8(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LastSeenTimeStamp");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_10029D750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D784(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "BluetoothId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_10029D82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D860(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "DeviceName");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_10029D908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D93C(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "StableIdentifier");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_10029D9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029DA18()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101B980A0;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  v0 = std::string::append(&v19, "MicroLocationBluetoothIdentityTable");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v20, " (");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_10029ACE0((uint64_t)v17);
  if ((v18 & 0x80u) == 0)
    v4 = v17;
  else
    v4 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v5 = v18;
  else
    v5 = (std::string::size_type)v17[1];
  v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v22, ") ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_10029ADA8((uint64_t)__p);
  if ((v16 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v11 = v16;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_1023010B8 = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  xmmword_1023010A8 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023010A8, (void *)&_mh_execute_header);
}

void sub_10029DC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 25) < 0)
    operator delete(*(void **)(v40 - 48));
  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_10029DCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_1002DF194(a1);
  *(_OWORD *)(v6 + 152) = 0u;
  *(_QWORD *)(v6 + 136) = a3;
  *(_QWORD *)(v6 + 144) = a4;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_QWORD *)(v6 + 184) = 0;
  *(CFAbsoluteTime *)(v6 + 152) = j__CFAbsoluteTimeGetCurrent();
  operator new();
}

void sub_10029DD64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void **sub_10029DDD0(void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1002A2410(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10029DE0C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  sub_10029DDD0((void ***)(a1 + 160), 0);
  return sub_1002DF2E0(a1);
}

void sub_10029DE4C(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  char **v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *p_p;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  char *v29;
  void **v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40[2];
  char v41;
  void *__p;
  _BYTE v43[10];
  __int16 v44;
  char *v45;
  __int16 v46;
  const char *v47;
  uint8_t buf[8];
  __int16 v49;
  _BYTE v50[56];
  void *v51;
  char v52;
  uint64_t v53;

  if (a2[1] - *a2 == a3[1] - *a3)
  {
    sub_100263E50((uint64_t)buf);
    v38 = *a2;
    v39 = a2[1];
    if (v39 != *a2)
    {
      v6 = 0;
      v7 = (char **)(a1 + 21);
      v8 = 1;
      do
      {
        if ((v8 & 1) == 0)
          sub_100263F7C(&v50[6], (uint64_t)",", 1);
        v9 = sub_100263F7C(&v50[6], (uint64_t)"ConfidenceLevel:", 16);
        v10 = (_QWORD *)std::ostream::operator<<(v9, *(unsigned int *)(*a2 + 4 * v6));
        v11 = sub_100263F7C(v10, (uint64_t)"ConfidenceReason:", 17);
        sub_1002EC830(*(_DWORD *)(*a3 + 4 * v6), &__p);
        if (SBYTE3(v45) >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (SBYTE3(v45) >= 0)
          v13 = BYTE3(v45);
        else
          v13 = *(_QWORD *)v43;
        sub_100263F7C(v11, (uint64_t)p_p, v13);
        if (SBYTE3(v45) < 0)
          operator delete(__p);
        v14 = *(unsigned int *)(*a2 + 4 * v6);
        v15 = *(unsigned int *)(*a3 + 4 * v6);
        v17 = (uint64_t *)a1[22];
        v16 = a1[23];
        if ((unint64_t)v17 >= v16)
        {
          v19 = ((char *)v17 - *v7) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            sub_100259694();
          v20 = v16 - (_QWORD)*v7;
          v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1))
            v21 = v19 + 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)sub_10025E6A0((uint64_t)(a1 + 23), v22);
          else
            v23 = 0;
          v24 = &v23[8 * v19];
          *(_QWORD *)v24 = v14 | (v15 << 32);
          v18 = v24 + 8;
          v26 = (char *)a1[21];
          v25 = (char *)a1[22];
          if (v25 != v26)
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v24 - 1) = v27;
              v24 -= 8;
            }
            while (v25 != v26);
            v25 = *v7;
          }
          a1[21] = v24;
          a1[22] = v18;
          a1[23] = &v23[8 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v17 = v14 | (v15 << 32);
          v18 = v17 + 1;
        }
        v8 = 0;
        a1[22] = v18;
        ++v6;
      }
      while (v6 < (a2[1] - *a2) >> 2);
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v28 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v29 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v29 + 29) = 0;
      *(_OWORD *)v29 = 0u;
      *((_OWORD *)v29 + 1) = 0u;
      sub_100261F9C((uint64_t)(a1 + 17), v29);
      if (v39 == v38)
      {
        __p = (void *)68289538;
        *(_WORD *)v43 = 2082;
        *(_QWORD *)&v43[2] = "";
        v44 = 2082;
        v45 = v29;
        v46 = 2082;
        v47 = "";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons\", \"RequestID\":%{public, location:escape_only}s, \"Confidence Levels and Reasons\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
      }
      else
      {
        std::stringbuf::str(v40, &v50[14]);
        if (v41 >= 0)
          v30 = v40;
        else
          v30 = (void **)v40[0];
        __p = (void *)68289538;
        *(_WORD *)v43 = 2082;
        *(_QWORD *)&v43[2] = "";
        v44 = 2082;
        v45 = v29;
        v46 = 2082;
        v47 = (const char *)v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons\", \"RequestID\":%{public, location:escape_only}s, \"Confidence Levels and Reasons\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
        if (v41 < 0)
          operator delete(v40[0]);
      }
      operator delete(v29);
    }
    *(_QWORD *)&v50[6] = v37;
    if (v52 < 0)
      operator delete(v51);
    std::streambuf::~streambuf(&v50[14]);
    std::ios::~ios(&v53);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v31 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v32 = (a2[1] - *a2) >> 2;
      v33 = (uint64_t)(a3[1] - *a3) >> 2;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v49 = 2082;
      *(_QWORD *)v50 = "";
      *(_WORD *)&v50[8] = 2050;
      *(_QWORD *)&v50[10] = v32;
      *(_WORD *)&v50[18] = 2050;
      *(_QWORD *)&v50[20] = v33;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons, invalid arguments\", \"confidenceLevelsSize\":%{public}lu, \"confidenceReasonsSize\":%{public}lu}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
    }
    v34 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v35 = (a2[1] - *a2) >> 2;
      v36 = (uint64_t)(a3[1] - *a3) >> 2;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v49 = 2082;
      *(_QWORD *)v50 = "";
      *(_WORD *)&v50[8] = 2050;
      *(_QWORD *)&v50[10] = v35;
      *(_WORD *)&v50[18] = 2050;
      *(_QWORD *)&v50[20] = v36;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocalizationRequest::setConfidenceAndReasons, invalid arguments", "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons, invalid arguments\", \"confidenceLevelsSize\":%{public}lu, \"confidenceReasonsSize\":%{public}lu}", buf, 0x26u);
    }
  }
}

void sub_10029E3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  operator delete(v24);
  sub_1018B38B4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_10029E40C(uint64_t result, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *i;
  _QWORD *v6;

  v3 = *(_QWORD **)(result + 168);
  v2 = *(_QWORD **)(result + 176);
  if (v3 != v2)
  {
    for (i = v3 + 1; *((_DWORD *)i - 1) != a2; ++i)
    {
      if (i == v2)
        return result;
    }
    v6 = i - 1;
    if (i - 1 != v2 && i != v2)
    {
      do
      {
        if (*((_DWORD *)i + 1) != a2)
          *v6++ = *i;
        ++i;
      }
      while (i != v2);
      v2 = *(_QWORD **)(result + 176);
    }
    if (v6 != v2)
      *(_QWORD *)(result + 176) = v6;
  }
  return result;
}

void sub_10029E4C4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  signed int v5;
  unsigned int *v6;
  signed int v7;
  signed int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;

  v2 = *(unsigned int **)(a1 + 168);
  v3 = *(unsigned int **)(a1 + 176);
  if (v2 == v3)
  {
    v9 = 3;
  }
  else
  {
    v4 = v2 + 2;
    if (v2 + 2 != v3)
    {
      v5 = *v2;
      v6 = v2 + 2;
      do
      {
        v8 = *v6;
        v6 += 2;
        v7 = v8;
        if (v8 > v5)
        {
          v5 = v7;
          v2 = v4;
        }
        v4 = v6;
      }
      while (v6 != v3);
    }
    v9 = *v2;
  }
  if ((sub_1002BC674(v9) & 1) == 0)
    sub_1018F0A78();
  *(_DWORD *)(a1 + 128) |= 0x4000u;
  *(_DWORD *)(a1 + 120) = v9;
  sub_10029E620(a1, &v15);
  *(_DWORD *)(a1 + 112) = 0;
  v10 = v15;
  v11 = v16;
  if (v15 != v16)
  {
    do
    {
      v12 = *v10;
      if (!sub_1002BC68C(*v10))
        __assert_rtn("add_confidencereasons", "microlocation.pb.h", 20332, "::CLMicroLocationProto::ConfidenceReason_IsValid(value)");
      v13 = *(_DWORD *)(a1 + 112);
      if (v13 == *(_DWORD *)(a1 + 116))
      {
        sub_1002A19E0(a1 + 104, v13 + 1);
        v13 = *(_DWORD *)(a1 + 112);
      }
      v14 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(a1 + 112) = v13 + 1;
      *(_DWORD *)(v14 + 4 * v13) = v12;
      ++v10;
    }
    while (v10 != v11);
    v10 = v15;
  }
  if (v10)
  {
    v16 = v10;
    operator delete(v10);
  }
}

void sub_10029E600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10029E620(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = (uint64_t *)v7;
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 176);
  v5 = (uint64_t *)v7;
  if (v3 != v4)
  {
    do
    {
      sub_1000C6190(&v6, (int *)(v3 + 4), (_DWORD *)(v3 + 4));
      v3 += 8;
    }
    while (v3 != v4);
    v5 = v6;
  }
  sub_1002A1898(a2, v5, v7);
  sub_100008848((uint64_t)&v6, v7[0]);
}

void sub_10029E6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_100008848((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_10029E6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v4[192];
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a4;
  sub_10029DCB0((uint64_t)v4, a2, a3, a4);
}

void sub_10029E830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;

  operator delete(v14);
  sub_10029DE0C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t *sub_10029E860(uint64_t *result, uint64_t *a2)
{
  if (result[4] != result[5])
    return (uint64_t *)sub_1002A2898(result + 1, result[2], *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  return result;
}

uint64_t sub_10029E8A4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[8];
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  int v22;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B410);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a2 + 77);
    v6 = *(unsigned __int8 *)(a2 + 76);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1026;
    v19 = v5;
    v20 = 1026;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LocalizationController: ignored sensors\", \"isBleIgnore\":%{public}d, \"isNiIgnore\":%{public}d}", buf, 0x1Eu);
  }
  v7 = sub_1002984CC();
  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_1002A2EE8(&v12, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v8 = v12;
  v9 = v13;
  while (1)
  {
    if (v8 == v9)
    {
      v10 = 0;
      goto LABEL_20;
    }
    sub_1002C0A54(buf, v8);
    if (v22 != 6)
      break;
    sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)buf);
    if ((v7 & 0x40) != 0)
      goto LABEL_19;
LABEL_16:
    v8 += 88;
  }
  if (v22 == 5)
  {
    if ((v7 & 0x20) != 0)
      goto LABEL_18;
    goto LABEL_15;
  }
  if (v22 != 1 || (v7 & 2) == 0)
  {
LABEL_15:
    sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)buf);
    goto LABEL_16;
  }
LABEL_18:
  sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)buf);
LABEL_19:
  v10 = 1;
LABEL_20:
  *(_QWORD *)buf = &v12;
  sub_1002A1A78((void ***)buf);
  return v10;
}

void sub_10029EA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(exception_object);
}

void sub_10029EA88(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  NSObject *v13;
  uint64_t v14;
  _OWORD *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  void **v20;
  uint64_t v21;
  _OWORD *v22;
  void *p_p;
  int v24;
  NSObject *v25;
  uint64_t *v26;
  std::string *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  NSObject *v32;
  void **v33;
  char v34;
  int v35;
  void **v36;
  uint64_t v37;
  uint64_t *v38;
  double v39;
  double v40;
  int v41;
  _QWORD *v42;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57[2];
  char v58;
  char v59;
  void **v60;
  void *v61[2];
  int v62;
  void *v63[2];
  uint64_t v64;
  void *v65[3];
  char v66;
  void *__p;
  __int128 v68;
  std::string v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[10];
  __int16 v74;
  void **v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  std::string *v79;
  __int16 v80;
  _BYTE v81[18];
  __int16 v82;
  double v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  char v88;
  void *v89;
  void *v90;
  void *v91;
  char v92;
  char v93;

  v8 = a2;
  v70 = a5;
  v71 = a6;
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 + 16);
  if (a4 + 32 != a2 + 24)
    sub_1002A3054((char *)(a4 + 32), *(char **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  v9 = *a3;
  v44 = a3[1];
  if (*a3 != v44)
  {
    v42 = (_QWORD *)(v8 + 152);
    v45 = v8;
    do
    {
      if (*(_DWORD *)(*v9 + 4) == 1 && !*(_BYTE *)(*v9 + 392))
        sub_1018F0AA0();
      sub_1015A2E04(&v69, "");
      v10 = *v9;
      if (*(_DWORD *)(*v9 + 4) == 2 && *(_BYTE *)(v10 + 192))
      {
        std::to_string((std::string *)&v72, (uint64_t)(*(_QWORD *)(v10 + 104) - *(_QWORD *)(v10 + 96)) >> 4);
        v11 = SBYTE3(v75) >= 0 ? (const std::string::value_type *)&v72 : (const std::string::value_type *)v72;
        v12 = SBYTE3(v75) >= 0 ? BYTE3(v75) : *(_QWORD *)v73;
        std::string::append(&v69, v11, v12);
        if (SBYTE3(v75) < 0)
          operator delete((void *)v72);
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
      v13 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *v9;
        v15 = operator new(0x28uLL);
        v60 = (void **)v15;
        *(_OWORD *)v61 = xmmword_101B97FF0;
        *v15 = 0u;
        v15[1] = 0u;
        *(_QWORD *)((char *)v15 + 29) = 0;
        sub_100261F9C(v14 + 352, v15);
        if (SHIBYTE(v61[1]) >= 0)
          v16 = (void **)&v60;
        else
          v16 = v60;
        v17 = *v9;
        v18 = *(unsigned int *)(*v9 + 4);
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v69;
        else
          v19 = (std::string *)v69.__r_.__value_.__r.__words[0];
        v93 = 0;
        LOBYTE(v91) = 0;
        sub_10029F7B8((char *)(v17 + 368), (uint64_t)&v91, (uint64_t)v57);
        if (v58 >= 0)
          v20 = v57;
        else
          v20 = (void **)v57[0];
        v21 = *v9;
        v22 = operator new(0x28uLL);
        __p = v22;
        v68 = xmmword_101B97FF0;
        *v22 = 0u;
        v22[1] = 0u;
        *(_QWORD *)((char *)v22 + 29) = 0;
        sub_100261F9C(v21 + 400, v22);
        p_p = &__p;
        if (v68 < 0)
          p_p = __p;
        v24 = *(unsigned __int8 *)(*v9 + 536);
        v72 = 68290563;
        *(_WORD *)v73 = 2082;
        *(_QWORD *)&v73[2] = "";
        v74 = 2082;
        v75 = v16;
        v76 = 2050;
        v77 = v18;
        v78 = 2081;
        v79 = v19;
        v80 = 2081;
        *(_QWORD *)v81 = v20;
        *(_WORD *)&v81[8] = 2082;
        *(_QWORD *)&v81[10] = p_p;
        v82 = 1026;
        LODWORD(v83) = v24;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"localizationRequestResultsPerModel\", \"ModelUUID\":%{public, location:escape_only}s, \"ModelType\":%{public}lu, \"SimilarityListLengthIfApplicable\":%{private, location:escape_only}s, \"ClientID\":%{private, location:escape_only}s, \"LoiGroupId\":%{public, location:escape_only}s, \"hasAnchorStatistics\":%{public}hhd}", (uint8_t *)&v72, 0x4Au);
        if (SHIBYTE(v68) < 0)
          operator delete(__p);
        v8 = v45;
        if (v58 < 0)
          operator delete(v57[0]);
        if (v93 < 0)
          operator delete(v91);
        if (SHIBYTE(v61[1]) < 0)
          operator delete(v60);
      }
      v60 = 0;
      *(_OWORD *)v61 = 0uLL;
      v62 = 3;
      v66 = 0;
      v63[1] = 0;
      v64 = 0;
      v63[0] = 0;
      LOBYTE(v65[0]) = 0;
      if (*(_BYTE *)(v8 + 240))
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B410);
        v25 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *(uint64_t **)(v8 + 64);
          if (v26)
          {
            v27 = 0;
            v28 = *(uint64_t **)(v8 + 64);
            do
            {
              if (*((_DWORD *)v28 + 6) == 1)
                v27 = (std::string *)((char *)v27 + 1);
              v28 = (uint64_t *)*v28;
            }
            while (v28);
            v29 = 0;
            v30 = *(uint64_t **)(v8 + 64);
            do
            {
              if (*((_DWORD *)v30 + 6) == 5)
                ++v29;
              v30 = (uint64_t *)*v30;
            }
            while (v30);
            v31 = 0;
            do
            {
              if (*((_DWORD *)v26 + 6) == 6)
                ++v31;
              v26 = (uint64_t *)*v26;
            }
            while (v26);
          }
          else
          {
            v29 = 0;
            v27 = 0;
            v31 = 0;
          }
          v36 = (void **)*(unsigned int *)(*v9 + 4);
          v37 = *(_QWORD *)(v8 + 72);
          LODWORD(v57[0]) = 1;
          v38 = sub_100270BB8(v42, (unsigned int *)v57);
          if (v38)
            v39 = *((double *)v38 + 4) - *((double *)v38 + 3);
          else
            v39 = 0.0;
          v40 = *(double *)(v45 + 200);
          v41 = (int)*(double *)(v45 + 192);
          v72 = 68291075;
          *(_WORD *)v73 = 2082;
          *(_QWORD *)&v73[2] = "";
          v74 = 2049;
          v75 = v36;
          v76 = 2049;
          v77 = v37;
          v78 = 2049;
          v79 = v27;
          v80 = 2049;
          *(_QWORD *)v81 = v29;
          *(_WORD *)&v81[8] = 2049;
          *(_QWORD *)&v81[10] = v31;
          v82 = 2049;
          v83 = v39;
          v84 = 1025;
          v85 = v41;
          v86 = 1025;
          v87 = (int)v40;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"testFingerprint\", \"ModelType\":%{private}lu, \"size\":%{private}lu, \"NumWiFiMeasurements\":%{private}lu, \"NumBLEMeasurements\":%{private}lu, \"NumUWBMeasurements\":%{private}lu, \"WiFi RSSI duration_s\":\"%{private}.09f\", \"start\":%{private}d, \"end\":%{private}d}", (uint8_t *)&v72, 0x5Au);
        }
        LOBYTE(v91) = 0;
        v92 = 0;
        sub_10032522C(a1, *v9);
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
      v32 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        v33 = (void **)*(unsigned int *)(*v9 + 4);
        v72 = 68289282;
        *(_WORD *)v73 = 2082;
        *(_QWORD *)&v73[2] = "";
        v74 = 2050;
        v75 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController test fingerprint was not created\", \"ModelType\":%{public}lu}", (uint8_t *)&v72, 0x1Cu);
      }
      v55 = 0;
      v56 = 0;
      v54 = 0;
      sub_1002A2358(&v54, v60, (uint64_t)v61[0], ((char *)v61[0] - (char *)v60) >> 5);
      v52 = 0uLL;
      v53 = 0;
      v34 = sub_1002ED63C(*v9);
      sub_1002A2230((uint64_t)v49, (__int128 *)(*v9 + 368));
      LOBYTE(v57[0]) = 0;
      v59 = 0;
      v35 = *(_DWORD *)(a4 + 24);
      v47 = 0;
      v48 = 0;
      v46 = 0;
      sub_10027205C(&v46, *(const void **)(a4 + 32), *(_QWORD *)(a4 + 40), (uint64_t)(*(_QWORD *)(a4 + 40) - *(_QWORD *)(a4 + 32)) >> 2);
      sub_1002A2278((uint64_t)&v72, (uint64_t)&v54, &v52, v34, (__int128 *)v49, (uint64_t)v57, v35, (uint64_t)&v46);
      sub_10029F858((uint64_t *)a4, (uint64_t)&v72, (__int128 *)(*v9 + 352), (uint64_t)v65);
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v88)
        sub_1002A1C94((uint64_t)&v87 + 2);
      if ((_BYTE)v85 && SHIBYTE(v84) < 0)
        operator delete(*(void **)&v81[6]);
      if (v72)
      {
        *(_QWORD *)v73 = v72;
        operator delete((void *)v72);
      }
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      if (v59)
        sub_1002A1C94((uint64_t)v57);
      if (v51 && v50 < 0)
        operator delete(v49[0]);
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
      if (v66 && v65[0])
      {
        v65[1] = v65[0];
        operator delete(v65[0]);
      }
      if (v63[0])
      {
        v63[1] = v63[0];
        operator delete(v63[0]);
      }
      if (v60)
      {
        v61[0] = v60;
        operator delete(v60);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      v9 += 2;
    }
    while (v9 != v44);
  }
}

void sub_10029F60C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  _Unwind_Resume(a1);
}

char *sub_10029F7B8@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result[24])
  {
    if (result[23] < 0)
    {
      return (char *)sub_100115CE4((_BYTE *)a3, *(void **)result, *((_QWORD *)result + 1));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)result;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)result + 2);
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
  return result;
}

_QWORD *sub_10029F804@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *result;

  *a3 = 0;
  a3[40] = 0;
  result = sub_1002A1BA8(a1, a2);
  if (result)
    return (_QWORD *)sub_1002A1B6C((uint64_t)a3, (uint64_t)(result + 4));
  return result;
}

void sub_10029F83C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 40))
    sub_1002A1C94(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029F858(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= v10)
  {
    v13 = 0x84BDA12F684BDA13 * ((uint64_t)(v11 - *a1) >> 3);
    if (v13 + 1 > 0x12F684BDA12F684)
      sub_100259694();
    v14 = 0x84BDA12F684BDA13 * ((uint64_t)(v9 - *a1) >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= v13 + 1)
      v15 = v13 + 1;
    if (v14 >= 0x97B425ED097B42)
      v16 = 0x12F684BDA12F684;
    else
      v16 = v15;
    v23 = v8;
    if (v16)
      v17 = (char *)sub_1002A32F8(v8, v16);
    else
      v17 = 0;
    v19 = v17;
    v20 = &v17[216 * v13];
    v22 = &v17[216 * v16];
    sub_1002A315C((uint64_t)v20, a2, a3, a4);
    v21 = v20 + 216;
    sub_1002A3284(a1, &v19);
    v12 = a1[1];
    sub_1002A3610(&v19);
  }
  else
  {
    sub_1002A315C(*(_QWORD *)(v8 - 8), a2, a3, a4);
    v12 = v11 + 216;
    a1[1] = v11 + 216;
  }
  a1[1] = v12;
  return v12 - 216;
}

void sub_10029F9A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A3610((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029F9B4(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 128))
    sub_1002A1C94(a1 + 88);
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10029FA1C(uint64_t a1, _DWORD *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFStringRef v13;
  char v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  const __CFString *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  CFAbsoluteTime Current;
  NSNumber *v35;
  unsigned __int8 v36[16];
  _QWORD v37[16];
  uint8_t buf[8];
  uint64_t v39;

  sub_1001E4804(buf);
  v36[0] = 0;
  v13 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAnalyticsSendEventEnabled", 0x8000100u, kCFAllocatorNull);
  v14 = sub_1001E48E4(*(uint64_t *)buf, (uint64_t)v13, (BOOL *)v36);
  CFRelease(v13);
  v15 = v36[0];
  v16 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v17 = (unint64_t *)(v39 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
    v19 = 0;
  else
    v19 = v14;
  if ((v19 & 1) != 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v20 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLMicroLocationLocalizationController, sendLocalizationCoreAnalyticsEvent, not sending event because sending to CoreAnalytics is disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
      *(_WORD *)v36 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "CLMicroLocationLocalizationController, sendLocalizationCoreAnalyticsEvent, not sending event because sending to CoreAnalytics is disabled", v36, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationLocalizationController::sendLocalizationCoreAnalyticsEvent(const CLMiLoService::ModelAndConf &, const std::vector<CLMicroLocationResultInternal> &, const std::optional<std::vector<CLMicroLocationResultInternal>> &, const CLMicroLocationFingerprint &, const CLMicroLocationProto::RecordingEvent &, const std::optional<cl::chrono::CFAbsoluteTimeClock::time_point> &) const", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    return;
  }
  v23 = sub_10035A9C8(a6);
  v24 = *(uint64_t **)(a5 + 16);
  if (v24)
  {
    v25 = 0;
    v26 = v24;
    do
    {
      if (*((_DWORD *)v26 + 6) == 1)
        ++v25;
      v26 = (uint64_t *)*v26;
    }
    while (v26);
    v27 = 0;
    v28 = v24;
    do
    {
      if (*((_DWORD *)v28 + 6) == 5)
        ++v27;
      v28 = (uint64_t *)*v28;
    }
    while (v28);
    v29 = 0;
    do
    {
      if (*((_DWORD *)v24 + 6) == 6)
        ++v29;
      v24 = (uint64_t *)*v24;
    }
    while (v24);
  }
  else
  {
    v27 = 0;
    v25 = 0;
    v29 = 0;
  }
  sub_1002A1504(a4, a3, buf);
  v30 = *(_QWORD *)buf;
  if (*(_QWORD *)buf != v39)
  {
    v31 = 0.0;
    v32 = 0;
    while (1)
    {
      v33 = *(double *)(v30 + 16);
      if (*(_OWORD *)v30 == 0)
      {
        v32 = *(_QWORD *)(v30 + 16);
      }
      else if (v33 > v31)
      {
        goto LABEL_41;
      }
      v33 = v31;
LABEL_41:
      v30 += 32;
      v31 = v33;
      if (v30 == v39)
        goto LABEL_44;
    }
  }
  v32 = 0;
  v33 = 0.0;
LABEL_44:
  Current = j__CFAbsoluteTimeGetCurrent();
  if (*a2 == 4)
    v35 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v33);
  else
    v35 = 0;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1002A1540;
  v37[3] = &unk_10212B3F0;
  v37[6] = v27;
  v37[7] = v29;
  *(double *)&v37[8] = v33;
  v37[9] = a2 + 116;
  v37[10] = v32;
  v37[11] = v25;
  v37[12] = a7;
  *(CFAbsoluteTime *)&v37[13] = Current;
  v37[4] = v23;
  v37[5] = v35;
  v37[14] = a2 + 92;
  v37[15] = a6;
  AnalyticsSendEventLazy(CFSTR("com.apple.MicroLocation.Localization"), v37);
  if (*(_QWORD *)buf)
  {
    v39 = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_10029FDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10029FE30(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  void **v20;
  char v21;
  _QWORD v22[2];

  v4 = *(unsigned __int8 *)(a1 + 440);
  if (*(_BYTE *)(a1 + 440))
  {
    v7 = a1 + 56;
    v8 = *(unsigned __int8 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 56);
    if (!v8)
      *(_BYTE *)(a3 + 16) = 1;
    v10 = *a2;
    v9 = a2[1];
    v22[0] = *a2;
    v22[1] = v9;
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = (void **)&v17;
    v21 = 0;
    v13 = (uint64_t *)operator new(0x10uLL);
    v17 = v13;
    v19 = v13 + 2;
    *v13 = v10;
    v13[1] = v9;
    if (v9)
    {
      v14 = (unint64_t *)(v9 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v18 = v13 + 2;
    sub_100261F44((uint64_t)v22);
    if (!*(_BYTE *)(a1 + 440))
      sub_10028DF3C();
    sub_10029EA88(a1, v7, &v17, a4, 0, 0);
    v20 = (void **)&v17;
    sub_1002A3684(&v20);
  }
  return v4 != 0;
}

void sub_10029FF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  sub_1002A3684((void ***)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10029FFA0(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  char *v12;
  void *v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  void *v23;
  _QWORD *v24;
  const char *v26;
  uint8_t *v27;
  void *__p[2];
  char *v29;
  uint64_t v30[2];
  uint64_t v31;
  _BYTE v32[17];
  _WORD v33[80];
  int v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint8_t buf[16];
  void *v39[2];
  __int128 v40;
  _OWORD v41[5];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[87];

  v8 = sub_10029E8A4(a1, a2);
  if ((v8 & 1) == 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v9 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LocalizationController doesn't have any valid measurements to use, reporting empty results.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
      v33[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "LocalizationController doesn't have any valid measurements to use, reporting empty results.", v33, 2);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationLocalizationController::localizationRequestResultsPerModel(const CLMicroLocationLocalizationController::LocalizationRequest &, const std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>> &, CLMiLoServiceManager::LocalizationResults &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
  sub_10038F03C(v30);
  sub_10029E620(a2, __p);
  sub_1002DF194(buf);
  BYTE8(v42) = 1;
  v32[0] = 0;
  v32[16] = 0;
  sub_100391364((uint64_t *)(a1 + 8), (uint64_t)buf, (uint64_t)v32, (unint64_t *)v30, v33);
  if (BYTE8(v42))
    sub_1002DF2E0(buf);
  if (v37)
    v10 = v8;
  else
    v10 = 0;
  if (v10 == 1)
  {
    v11 = v34;
    sub_1002A3054((char *)__p, v35, v36, (v36 - (uint64_t)v35) >> 2);
  }
  else
  {
    v12 = (char *)__p[1];
    if (__p[1] >= v29)
    {
      v14 = (char *)__p[0];
      v15 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        sub_100259694();
      v17 = v29 - (char *)__p[0];
      if ((v29 - (char *)__p[0]) >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)sub_100260634((uint64_t)&v29, v18);
        v14 = (char *)__p[0];
        v12 = (char *)__p[1];
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[4 * v15];
      v21 = &v19[4 * v18];
      *(_DWORD *)v20 = 3;
      v13 = v20 + 4;
      while (v12 != v14)
      {
        v22 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v22;
        v20 -= 4;
      }
      __p[0] = v20;
      __p[1] = v13;
      v29 = v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_DWORD *)__p[1] = 3;
      v13 = v12 + 4;
    }
    v11 = 0;
    __p[1] = v13;
  }
  sub_1002A049C(a1 + 56);
  v48 = 0u;
  memset(v49, 0, 144);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  memset(v41, 0, sizeof(v41));
  *(_OWORD *)buf = 0u;
  *(_OWORD *)v39 = 0u;
  sub_1002BBFAC((uint64_t)v49 + 8);
  sub_1002A04E4(a1 + 56, (uint64_t)buf);
  sub_1002DF2E0((char *)v49 + 8);
  sub_1002967B0((uint64_t)v41);
  if (v39[1])
  {
    *(void **)&v40 = v39[1];
    operator delete(v39[1]);
  }
  v24 = (_QWORD *)(a1 + 80);
  v23 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 72) = v11;
  if (v23)
  {
    *(_QWORD *)(a1 + 88) = v23;
    operator delete(v23);
    *v24 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v29;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  sub_100296800(a1 + 104, (uint64_t)v33);
  sub_1002E0BA0(a1 + 304, a2);
  if (!*(_BYTE *)(a1 + 440))
    sub_10028DF3C();
  sub_10029EA88(a1, a1 + 56, a3, a4, *(_QWORD *)(a2 + 152), 1);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a4 + 24);
  if (v24 != (_QWORD *)(a4 + 32))
    sub_1002A3054((char *)(a1 + 80), *(char **)(a4 + 32), *(_QWORD *)(a4 + 40), (uint64_t)(*(_QWORD *)(a4 + 40) - *(_QWORD *)(a4 + 32)) >> 2);
  sub_1002967B0((uint64_t)v33);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return sub_100067AC4((uint64_t)&v31);
}

void sub_1002A03F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_1002967B0((uint64_t)va1);
  if (__p)
    operator delete(__p);
  sub_100067AC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A049C(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 384))
  {
    sub_1002DF2E0(a1 + 248);
    sub_1002967B0(a1 + 48);
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    *(_BYTE *)(a1 + 384) = 0;
  }
}

uint64_t sub_1002A04E4(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_BYTE *)(a1 + 384))
  {
    v4 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = v4;
    sub_100006898(a1 + 24, (__n128 *)(a2 + 24));
    sub_100296800(a1 + 48, a2 + 48);
    sub_1002E0BA0(a1 + 248, a2 + 248);
  }
  else
  {
    sub_1002A36F4(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 384) = 1;
  }
  return a1;
}

uint64_t sub_1002A0560(uint64_t a1)
{
  void *v2;

  sub_1002DF2E0(a1 + 248);
  sub_1002967B0(a1 + 48);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A05A0(_QWORD *a1, _QWORD *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  _BYTE v21[18];
  __int16 v22;
  char *v23;

  v9 = a1[4];
  v8 = a1[5];
  if (v9 != v8)
  {
    while (1)
    {
      *(_OWORD *)v21 = *(_OWORD *)(v9 + 136);
      if (*(_QWORD *)v21 == *a2 && *(_QWORD *)&v21[8] == a2[1])
        break;
      v9 += 192;
      if (v9 == v8)
        goto LABEL_16;
    }
  }
  if (v9 == v8)
  {
LABEL_16:
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v15 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = (char *)operator new(0x28uLL);
      *(_OWORD *)v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
      *(_QWORD *)(v16 + 29) = 0;
      sub_100261F9C((uint64_t)a2, v16);
      *(_QWORD *)v21 = 68289282;
      *(_WORD *)&v21[8] = 2082;
      *(_QWORD *)&v21[10] = "";
      v22 = 2082;
      v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController, Requested stop for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v21, 0x1Cu);
      operator delete(v16);
    }
  }
  else
  {
    sub_10029DDD0((void ***)(v9 + 160), 0);
    sub_10029E4C4(v9);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (char *)operator new(0x28uLL);
      *(_OWORD *)v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *(_QWORD *)(v12 + 29) = 0;
      sub_100261F9C((uint64_t)a2, v12);
      *(_QWORD *)v21 = 68289282;
      *(_WORD *)&v21[8] = 2082;
      *(_QWORD *)&v21[10] = "";
      v22 = 2082;
      v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController, Requested stop for localization request\", \"Request ID\":%{public, location:escape_only}s}", v21, 0x1Cu);
      operator delete(v12);
    }
    sub_10029FFA0((uint64_t)a1, v9, a3, a4);
    v14 = a1[1];
    for (i = a1[2]; i != v14; sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)(i - 88)))
      ;
    v17 = a1[5];
    a1[2] = v14;
    sub_1002A37AC(v9 + 192, v17, v9);
    v19 = v18;
    for (j = a1[5]; j != v19; j = sub_10029DE0C(j - 192))
      ;
    a1[5] = v19;
  }
}

void sub_1002A0848(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002A0868(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  char *v7;
  _BYTE v8[18];
  __int16 v9;
  char *v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)v8 = *(_OWORD *)(v3 + 136);
      if (*(_QWORD *)v8 == *a2 && *(_QWORD *)&v8[8] == a2[1])
        break;
      v3 += 192;
      if (v3 == v4)
        goto LABEL_10;
    }
  }
  if (v3 == v4)
  {
LABEL_10:
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (char *)operator new(0x28uLL);
      *(_OWORD *)v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *(_QWORD *)(v7 + 29) = 0;
      sub_100261F9C((uint64_t)a2, v7);
      *(_QWORD *)v8 = 68289282;
      *(_WORD *)&v8[8] = 2082;
      *(_QWORD *)&v8[10] = "";
      v9 = 2082;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Requested set Ignore Ble Rssi Measurements for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v8, 0x1Cu);
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 128) |= 0x2000u;
    *(_BYTE *)(v3 + 77) = 1;
  }
}

void sub_1002A09D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002A09E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  char *v7;
  _BYTE v8[18];
  __int16 v9;
  char *v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)v8 = *(_OWORD *)(v3 + 136);
      if (*(_QWORD *)v8 == *a2 && *(_QWORD *)&v8[8] == a2[1])
        break;
      v3 += 192;
      if (v3 == v4)
        goto LABEL_10;
    }
  }
  if (v3 == v4)
  {
LABEL_10:
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (char *)operator new(0x28uLL);
      *(_OWORD *)v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *(_QWORD *)(v7 + 29) = 0;
      sub_100261F9C((uint64_t)a2, v7);
      *(_QWORD *)v8 = 68289282;
      *(_WORD *)&v8[8] = 2082;
      *(_QWORD *)&v8[10] = "";
      v9 = 2082;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Requested set Ignore Uwb Range Measurements for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v8, 0x1Cu);
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 128) |= 0x800u;
    *(_BYTE *)(v3 + 76) = 1;
  }
}

void sub_1002A0B54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002A0B68(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  _BYTE v14[18];
  __int16 v15;
  char *v16;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (v6 != v7)
  {
    while (1)
    {
      *(_OWORD *)v14 = *(_OWORD *)(v6 + 136);
      if (*(_QWORD *)v14 == *a2 && *(_QWORD *)&v14[8] == a2[1])
        break;
      v6 += 192;
      if (v6 == v7)
        goto LABEL_13;
    }
  }
  if (v6 == v7)
  {
LABEL_13:
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v12 = (char *)operator new(0x28uLL);
      *(_OWORD *)v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *(_QWORD *)(v12 + 29) = 0;
      sub_100261F9C((uint64_t)a2, v12);
      *(_QWORD *)v14 = 68289282;
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = "";
      v15 = 2082;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"try to set confidence for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v14, 0x1Cu);
      operator delete(v12);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
    }
    v13 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v10 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v10 + 29) = 0;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      sub_100261F9C((uint64_t)a2, v10);
      *(_QWORD *)v14 = 68289282;
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = "";
      v15 = 2082;
      v16 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "try to set confidence for non-existent localization request", "{\"msg%{public}.0s\":\"try to set confidence for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v14, 0x1Cu);
      goto LABEL_20;
    }
  }
  else
  {
    sub_10029DE4C((_QWORD *)v6, a3, a4);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v9 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (char *)operator new(0x28uLL);
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *(_QWORD *)(v10 + 29) = 0;
      sub_100261F9C((uint64_t)a2, v10);
      *(_QWORD *)v14 = 68289282;
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = "";
      v15 = 2082;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting confidence in current Localization\", \"Request ID\":%{public, location:escape_only}s}", v14, 0x1Cu);
LABEL_20:
      operator delete(v10);
    }
  }
}

void sub_1002A0E54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002A0E78(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = a1 + 56;
  sub_1002A049C(a1 + 56);
  sub_1002A049C(v1);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B410);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationLocalizationController, invalidateCache\"}", (uint8_t *)v3, 0x12u);
  }
}

void sub_1002A0F60(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  char *v9;
  _BYTE v10[18];
  __int16 v11;
  char *v12;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)v10 = *(_OWORD *)(v3 + 136);
      if (*(_QWORD *)v10 == *a2 && *(_QWORD *)&v10[8] == a2[1])
        break;
      v3 += 192;
      if (v3 == v4)
        goto LABEL_10;
    }
  }
  if (v3 == v4)
  {
LABEL_10:
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v7 = (char *)operator new(0x28uLL);
      *(_OWORD *)v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *(_QWORD *)(v7 + 29) = 0;
      sub_100261F9C((uint64_t)a2, v7);
      *(_QWORD *)v10 = 68289282;
      *(_WORD *)&v10[8] = 2082;
      *(_QWORD *)&v10[10] = "";
      v11 = 2082;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Requested to remove confidence reason for motion for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v10, 0x1Cu);
      operator delete(v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
    }
    v8 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v9 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v9 + 29) = 0;
      *(_OWORD *)v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      sub_100261F9C((uint64_t)a2, v9);
      *(_QWORD *)v10 = 68289282;
      *(_WORD *)&v10[8] = 2082;
      *(_QWORD *)&v10[10] = "";
      v11 = 2082;
      v12 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested to remove confidence reason for motion for non-existent localization request", "{\"msg%{public}.0s\":\"Requested to remove confidence reason for motion for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v10, 0x1Cu);
      operator delete(v9);
    }
  }
  else
  {
    sub_1002A11D8(a1, a2, 1u);
  }
}

void sub_1002A11B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002A11D8(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v9;
  char *v10;
  void *v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  char *v15;
  _BYTE v16[18];
  __int16 v17;
  char *v18;
  __int16 v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (v6 != v7)
  {
    while (1)
    {
      *(_OWORD *)v16 = *(_OWORD *)(v6 + 136);
      if (*(_QWORD *)v16 == *a2 && *(_QWORD *)&v16[8] == a2[1])
        break;
      v6 += 192;
      if (v6 == v7)
        goto LABEL_13;
    }
  }
  if (v6 == v7)
  {
LABEL_13:
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v13 = (char *)operator new(0x28uLL);
      *(_OWORD *)v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      *(_QWORD *)(v13 + 29) = 0;
      sub_100261F9C((uint64_t)a2, v13);
      *(_QWORD *)v16 = 68289282;
      *(_WORD *)&v16[8] = 2082;
      *(_QWORD *)&v16[10] = "";
      v17 = 2082;
      v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Requested remove confidence reason for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v16, 0x1Cu);
      operator delete(v13);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
    }
    v14 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v15 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v15 + 29) = 0;
      *(_OWORD *)v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      sub_100261F9C((uint64_t)a2, v15);
      *(_QWORD *)v16 = 68289282;
      *(_WORD *)&v16[8] = 2082;
      *(_QWORD *)&v16[10] = "";
      v17 = 2082;
      v18 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested remove confidence reason for non-existent localization request", "{\"msg%{public}.0s\":\"Requested remove confidence reason for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v16, 0x1Cu);
      v11 = v15;
      goto LABEL_20;
    }
  }
  else
  {
    sub_10029E40C(v6, a3);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B410);
    v9 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (char *)operator new(0x28uLL);
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *(_QWORD *)(v10 + 29) = 0;
      sub_100261F9C((uint64_t)a2, v10);
      *(_QWORD *)v16 = 68289538;
      *(_WORD *)&v16[8] = 2082;
      *(_QWORD *)&v16[10] = "";
      v17 = 2082;
      v18 = v10;
      v19 = 2050;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"removing confidence reason\", \"Request ID\":%{public, location:escape_only}s, \"confidence reason\":%{public}lu}", v16, 0x26u);
      v11 = v10;
LABEL_20:
      operator delete(v11);
    }
  }
}

void sub_1002A14D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002A1504@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  const void *v6;
  uint64_t v7;
  unint64_t v8;

  v5 = *(unsigned __int8 *)(a1 + 24);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5)
  {
    v6 = *(const void **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (v7 - *(_QWORD *)a1) >> 5;
  }
  else
  {
    v7 = (uint64_t)a2[1];
    v8 = (v7 - (uint64_t)*a2) >> 5;
    v6 = *a2;
  }
  return sub_1002A2358(a3, v6, v7, v8);
}

id sub_1002A1540(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  const std::string *v8;
  std::string *v9;
  uint64_t v10;
  std::string __p;

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 48)), CFSTR("bleFingerprintSize"));
  if (*(_QWORD *)(a1 + 48) >= 0x19uLL)
    v3 = 25;
  else
    v3 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v3), CFSTR("bleFingerprintSizeBounded"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 56)), CFSTR("uwbFingerprintSize"));
  if (*(_QWORD *)(a1 + 56) >= 0x19uLL)
    v4 = 25;
  else
    v4 = *(_QWORD *)(a1 + 56);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v4), CFSTR("uwbFingerprintSizeBounded"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64)), CFSTR("maxClusterProbability"));
  v5 = *(uint64_t **)(a1 + 72);
  if (*((char *)v5 + 23) < 0)
    v5 = (uint64_t *)*v5;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5), CFSTR("modelType"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 80)), CFSTR("nullspaceClusterProbability"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 88)), CFSTR("wifiFingerprintSize"));
  if (*(_QWORD *)(a1 + 88) >= 0x64uLL)
    v6 = 100;
  else
    v6 = *(_QWORD *)(a1 + 88);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v6), CFSTR("wifiFingerprintSizeBounded"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("localizationTriggerEvent"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", &off_10221AFD0, CFSTR("localizationTriggerEventCount"));
  v7 = *(_QWORD *)(a1 + 96);
  if (*(_BYTE *)(v7 + 8))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 104) - *(double *)v7), CFSTR("localizationRunTime"));
  v8 = *(const std::string **)(a1 + 112);
  if (v8[1].__r_.__value_.__s.__data_[0])
  {
    sub_1002B88C8(v8, &__p);
    v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9), CFSTR("clientId"));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("roiProbability"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + 77)), CFSTR("bleRssiSamplesIgnore"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + 76)), CFSTR("uwbRangeSamplesIgnore"));
  return v2;
}

void sub_1002A17F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A1810(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(double *)(a1 + 24) = sub_1001FCBB4();
  return a1;
}

void sub_1002A1850(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1002A186C(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

_QWORD *sub_1002A1898(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_1002A191C(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_1002A191C(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    sub_1002720D4(result, a4);
    return (_QWORD *)sub_1002A1988(v6, a2, a3);
  }
  return result;
}

void sub_1002A196C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A1988(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_DWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = *((_DWORD *)a2 + 7);
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_1002A19E0(uint64_t result, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    v3 = 2 * v2;
    if (v3 <= a2)
      v3 = a2;
    if (v3 <= 4)
      v3 = 4;
    *(_DWORD *)(result + 12) = v3;
    operator new[]();
  }
  return result;
}

void sub_1002A1A78(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)(v4 - 88));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 sub_1002A1AE8(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void *v4;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
      result.n128_u64[0] = sub_100006898(a1, a2).n128_u64[0];
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t sub_1002A1B6C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 40))
  {
    a1 = sub_1002A1C94(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  result = sub_1002A1D10(a1, a2);
  *(_BYTE *)(result + 40) = 1;
  return result;
}

_QWORD *sub_1002A1BA8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = 0;
  v3 = 0;
  do
    v3 ^= (v3 << 6) + (v3 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v2++);
  while (v2 != 16);
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3;
    if (v3 >= *(_QWORD *)&v4)
      v6 = v3 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & v3;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v3 == v9)
      {
        if (result[2] == *a2 && result[3] == a2[1])
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v4)
            v9 %= *(_QWORD *)&v4;
        }
        else
        {
          v9 &= *(_QWORD *)&v4 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1002A1C94(uint64_t a1)
{
  void *v2;

  sub_1002A1CCC(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1002A1CCC(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1002A1D10(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    sub_1002A1D84(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1002A1D6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A1C94(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1002A1D84(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_1002A2000(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1002A1FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_1002A20A8((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

__n128 sub_1002A2000@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(v9, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1002A208C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A20A8(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1002A20A8(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1002A20F4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
      sub_1002A213C(a1, (uint64_t *)a2);
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(sub_1002A1C94(a1) + 40) = 0;
  }
  else
  {
    *(_BYTE *)(sub_10012D080(a1, (uint64_t *)a2) + 40) = 1;
  }
}

void sub_1002A213C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_1002A21DC(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_1002A21DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1002A1CCC(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t sub_1002A2230(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_10028DFB8((_OWORD *)a1, a2);
  return a1;
}

void sub_1002A225C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_1018EE63C(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A2278(uint64_t a1, uint64_t a2, __int128 *a3, char a4, __int128 *a5, uint64_t a6, int a7, uint64_t a8)
{
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = *a3;
  v12 = *((_QWORD *)a3 + 2);
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a5 + 24))
  {
    v13 = *a5;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v13;
    *((_QWORD *)a5 + 1) = 0;
    *((_QWORD *)a5 + 2) = 0;
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 88) = 0;
  v14 = a1 + 88;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a6 + 40))
  {
    sub_10012D080(v14, (uint64_t *)a6);
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_DWORD *)(a1 + 136) = a7;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a8;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  return a1;
}

_QWORD *sub_1002A2358(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1002A23D0(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002A23B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002A23D0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_100259694();
  result = (char *)sub_10025BA00((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void **sub_1002A2410(void **a1)
{
  double v2;
  double v3;
  NSObject *v4;
  void *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  double v13;

  v2 = sub_1001FCBB4();
  v3 = *((double *)a1 + 3);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B410);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1;
    if (*((char *)a1 + 23) < 0)
      v5 = *a1;
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = v5;
    v12 = 2050;
    v13 = v2 - v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"TimeProfile\", \"action\":%{public, location:escape_only}s, \"durationSecs\":\"%{public}f\"}", (uint8_t *)v7, 0x26u);
  }
  if (*((char *)a1 + 23) < 0)
    operator delete(*a1);
  return a1;
}

void sub_1002A2538(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_1002A2544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  sub_1002DF194(v4);
  v5 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(v4 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 136) = v5;
  v6 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(v4 + 160) = v6;
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  result = *(__n128 *)(a2 + 168);
  *(__n128 *)(v4 + 168) = result;
  *(_QWORD *)(v4 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 8) = v4 + 192;
  return result;
}

void sub_1002A25B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1002A25C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAALL)
    v9 = 0x155555555555555;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002746CC(v7, v9);
  else
    v10 = 0;
  v16 = v10;
  v17 = &v10[192 * v4];
  v18 = v17;
  v19 = &v10[192 * v9];
  sub_1002DF194(v17);
  v11 = v17;
  v12 = *(_OWORD *)(a2 + 136);
  *((_QWORD *)v17 + 19) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(v11 + 136) = v12;
  v13 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *((_QWORD *)v11 + 20) = v13;
  *((_QWORD *)v11 + 21) = 0;
  *((_QWORD *)v11 + 22) = 0;
  *((_QWORD *)v11 + 23) = 0;
  *(_OWORD *)(v11 + 168) = *(_OWORD *)(a2 + 168);
  *((_QWORD *)v11 + 23) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  v18 += 192;
  sub_1002A2704(a1, &v16);
  v14 = a1[1];
  sub_1002A284C((uint64_t)&v16);
  return v14;
}

void sub_1002A26F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A284C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A2704(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002A2778((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002A2778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      v13 = a3 + v11;
      sub_1002DF194(a7 + v11 - 192);
      v14 = *(_OWORD *)(a3 + v11 - 56);
      *(_QWORD *)(v12 - 40) = *(_QWORD *)(a3 + v11 - 40);
      *(_OWORD *)(v12 - 56) = v14;
      v15 = *(_QWORD *)(a3 + v11 - 32);
      *(_QWORD *)(v13 - 32) = 0;
      *(_QWORD *)(v12 - 32) = v15;
      *(_QWORD *)(v12 - 24) = 0;
      *(_QWORD *)(v12 - 16) = 0;
      *(_QWORD *)(v12 - 8) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(a3 + v11 - 24);
      *(_QWORD *)(v12 - 8) = *(_QWORD *)(a3 + v11 - 8);
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v13 - 8) = 0;
      v11 -= 192;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1002A282C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 192)
    sub_10029DE0C(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A284C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 192;
    sub_10029DE0C(i - 192);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1002A2898(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD v26[2];
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - a2;
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        v21 = a3 + 88 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = sub_1002A2BEC(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_1002A2AA4((uint64_t)a1, v5, v12, v5 + 88 * a5);
      sub_1002A2CFC(v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x2E8BA2E8BA2E8BALL)
        sub_100259694();
      v15 = 0x2E8BA2E8BA2E8BA3 * ((a2 - v13) >> 3);
      v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x1745D1745D1745DLL)
        v18 = 0x2E8BA2E8BA2E8BALL;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)sub_100279B30(v9, v18);
      else
        v19 = 0;
      v22 = &v19[88 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[88 * v18];
      v23 = 88 * a5;
      v24 = &v22[88 * a5];
      do
      {
        sub_1002C0A54(v22, v7);
        *((_DWORD *)v22 + 20) = *(_DWORD *)(v7 + 80);
        v22 += 88;
        v7 += 88;
        v23 -= 88;
      }
      while (v23);
      v27 = v24;
      v5 = sub_1002A2B3C(a1, v26, v5);
      sub_1002A2E9C((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1002A2A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A2AA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      sub_1002C0A54(v8, v10);
      *(_DWORD *)(v8 + 80) = *(_DWORD *)(v10 + 80);
      v10 += 88;
      v8 += 88;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_1002A2C80(a2, v7, v6);
}

void sub_1002A2B34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1002A2B3C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_1002A2D64((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1002A2E08(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1002A2BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(sub_1002C0A54(a4 + v7, a2 + v7) + 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1002A2C5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)(v4 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A2C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      sub_1002C18E4(a3 - 88, v6 - 88);
      *(_DWORD *)(a3 - 8) = *(_DWORD *)(v6 - 8);
      a3 -= 88;
      v6 -= 88;
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sub_1002A2CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    sub_1002C18E4(a3, v4);
    *(_DWORD *)(a3 + 80) = *(_DWORD *)(v4 + 80);
    a3 += 88;
    v4 += 88;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_1002A2D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      sub_1002C0A54(a7 + v11 - 88, a3 + v11 - 88);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 88;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1002A2DE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 88)
    sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A2E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(sub_1002C0A54(a4 + v7, a2 + v7) + 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1002A2E78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)(v4 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A2E9C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)(i - 88));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1002A2EE8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1002A2F6C(result, a4);
    result = (_QWORD *)sub_1002A2FC0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1002A2F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1002A1A78(&a9);
  _Unwind_Resume(a1);
}

char *sub_1002A2F6C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_100259694();
  result = (char *)sub_100279B30((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t sub_1002A2FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(sub_1002C0A54(a4 + v7, a2 + v7) + 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1002A3030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      sub_1002C0B04((wireless_diagnostics::google::protobuf::MessageLite *)(v4 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002A3054(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_100259694();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002720D4(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_1002A315C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v8 = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 33);
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 33) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 88) = 0;
  v11 = a1 + 88;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    sub_10012D080(v11, (uint64_t *)(a2 + 88));
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v12 = *a3;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = v12;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_BYTE *)(a1 + 208) = 1;
  }
  return a1;
}

uint64_t sub_1002A3284(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002A3340((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1002A32F8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685)
    sub_10025955C();
  return operator new(216 * a2);
}

uint64_t sub_1002A3340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 216;
      sub_1002A33F4(a1, v7 - 216, v9);
      v7 = *((_QWORD *)&v16 + 1) - 216;
      *((_QWORD *)&v16 + 1) -= 216;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1002A3508((uint64_t)v13);
  return v11;
}

__n128 sub_1002A33F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *(_OWORD *)(a3 + 24);
  v6 = *(_OWORD *)(a3 + 33);
  *(_BYTE *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 33) = v6;
  *(_OWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 80) = 0;
  if (*(_BYTE *)(a3 + 80))
  {
    v7 = *(_OWORD *)(a3 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
    *(_OWORD *)(a2 + 56) = v7;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a2 + 80) = 1;
  }
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  if (*(_BYTE *)(a3 + 128))
  {
    sub_10012D080(a2 + 88, (uint64_t *)(a3 + 88));
    *(_BYTE *)(a2 + 128) = 1;
  }
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(a3 + 136);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  result = *(__n128 *)(a3 + 168);
  *(_BYTE *)(a2 + 184) = 0;
  *(__n128 *)(a2 + 168) = result;
  *(_BYTE *)(a2 + 208) = 0;
  if (*(_BYTE *)(a3 + 208))
  {
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    result = *(__n128 *)(a3 + 184);
    *(__n128 *)(a2 + 184) = result;
    *(_QWORD *)(a2 + 200) = *(_QWORD *)(a3 + 200);
    *(_QWORD *)(a3 + 184) = 0;
    *(_QWORD *)(a3 + 192) = 0;
    *(_QWORD *)(a3 + 200) = 0;
    *(_BYTE *)(a2 + 208) = 1;
  }
  return result;
}

uint64_t sub_1002A3508(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002A353C((uint64_t *)a1);
  return a1;
}

void sub_1002A353C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1002A358C(v3, v1);
      v1 += 216;
    }
    while (v1 != v2);
  }
}

void sub_1002A358C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a2 + 208))
  {
    v3 = *(void **)(a2 + 184);
    if (v3)
    {
      *(_QWORD *)(a2 + 192) = v3;
      operator delete(v3);
    }
  }
  v4 = *(void **)(a2 + 144);
  if (v4)
  {
    *(_QWORD *)(a2 + 152) = v4;
    operator delete(v4);
  }
  if (*(_BYTE *)(a2 + 128))
    sub_1002A1C94(a2 + 88);
  if (*(_BYTE *)(a2 + 80) && *(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

void **sub_1002A3610(void **a1)
{
  sub_1002A3640(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1002A3640(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 216;
    sub_1002A358C(v4, i - 216);
  }
}

void sub_1002A3684(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100261F44(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1002A36F4(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  if (*((_BYTE *)a2 + 240))
  {
    sub_100296904(a1 + 48, (uint64_t)(a2 + 3));
    *(_BYTE *)(a1 + 240) = 1;
  }
  sub_1002DF194(a1 + 248);
  return a1;
}

void sub_1002A3788(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  sub_1002967B0(v2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002A37AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1002A3808(a3, v4);
      v4 += 192;
      a3 += 192;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_1002A3808(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void **v5;

  sub_1002E0BA0(a1, a2);
  v4 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  v5 = *(void ***)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  sub_10029DDD0((void ***)(a1 + 160), v5);
  sub_100006898(a1 + 168, (__n128 *)(a2 + 168));
  return a1;
}

_QWORD *sub_1002A385C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_10212B440;
  a1[1] = 0;
  a1[2] = a2;
  a1[3] = a3;
  a1[1] = -[CLHomeNearbyRangeBridge initWithDelegate:withUniverse:]([CLHomeNearbyRangeBridge alloc], "initWithDelegate:withUniverse:", a1, a2);
  return a1;
}

uint64_t sub_1002A38AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212B440;
  objc_msgSend(*(id *)(a1 + 8), "stopRanging");

  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void sub_1002A38F4(uint64_t a1)
{
  sub_1002A38AC(a1);
  operator delete();
}

id sub_1002A3918(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "startRanging");
}

id sub_1002A3920(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "stopRanging");
}

void sub_1002A3928(uint64_t a1, uint64_t a2)
{
  CLHomeNearbyRangeBridgeRateConfiguration *v3;

  v3 = -[CLHomeNearbyRangeBridgeRateConfiguration initWithUpdateRate:withDuration:]([CLHomeNearbyRangeBridgeRateConfiguration alloc], "initWithUpdateRate:withDuration:", *(_QWORD *)a2, *(double *)(a2 + 8));
  objc_msgSend(*(id *)(a1 + 8), "setRangingRateWithConfiguration:", v3);

}

id sub_1002A397C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 8), "resetRangingRate");
}

uint64_t sub_1002A3984(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1002A3994(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1002A39A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1002A39B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1002A39C4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
}

void sub_1002A39D4(uint64_t a1, uint64_t **a2)
{
  CFAbsoluteTime Current;
  _BYTE v5[24];
  void **v6;

  objc_msgSend(*(id *)(a1 + 16), "silo");
  sub_1002A3A5C(a2, (uint64_t)v5);
  Current = j__CFAbsoluteTimeGetCurrent();
  (*(void (**)(_QWORD, _BYTE *, CFAbsoluteTime))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v5, Current);
  v6 = (void **)v5;
  sub_1002A3DAC(&v6);
}

void sub_1002A3A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1002A3DAC((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1002A3A5C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7[8];
  char v8;
  __int128 v9;
  uint64_t v10;

  v10 = 0;
  v3 = 0uLL;
  v9 = 0u;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v6 = 0;
  }
  else
  {
    do
    {
      sub_100357BEC(v4, v7);
      if (v8)
      {
        sub_1002A3B40((uint64_t *)&v9, (uint64_t)v7);
        if (v8)
          sub_1002BE378((wireless_diagnostics::google::protobuf::MessageLite *)v7);
      }
      v4 += 10;
    }
    while (v4 != v5);
    v3 = v9;
    v6 = v10;
  }
  *(_OWORD *)a2 = v3;
  *(_QWORD *)(a2 + 16) = v6;
  v10 = 0;
  v9 = 0uLL;
  v7[0] = (void **)&v9;
  sub_1002A3DAC(v7);
}

void sub_1002A3B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a18)
    sub_1002BE378((wireless_diagnostics::google::protobuf::MessageLite *)&a10);
  a10 = (void **)(v18 - 64);
  sub_1002A3DAC(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A3B40(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v10 + 1) >> 58)
      sub_100259694();
    v11 = v5 - *a1;
    v12 = v11 >> 5;
    if (v11 >> 5 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v13 = 0x3FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_1002697F0(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[64 * v10];
    v18 = &v14[64 * v13];
    sub_1002BE2EC(v16, a2);
    v17 = v16 + 64;
    sub_1002A3C50(a1, &v15);
    v9 = a1[1];
    result = sub_1002A3D5C((uint64_t)&v15);
  }
  else
  {
    result = sub_1002BE2EC(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v9;
  return result;
}

void sub_1002A3C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A3C50(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002A3CC4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002A3CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 64;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 64;
    sub_1002BE2EC(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_1002A3D5C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 64);
    *(_QWORD *)(a1 + 16) = i - 64;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1002A3DAC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 64;
      v7 = v4 - 64;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 64;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1002A3E38(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A04F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A04F0))
  {
    sub_1002A7908((std::string *)&xmmword_1022A04D8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A04D8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A04F0);
  }
  if (byte_1022A04EF < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A04D8, *((unint64_t *)&xmmword_1022A04D8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A04D8;
    *(_QWORD *)(a1 + 16) = unk_1022A04E8;
  }
}

void sub_1002A3EE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A04F0);
  _Unwind_Resume(a1);
}

void sub_1002A3F00(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A0510);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A0510))
  {
    sub_1002A7B64((std::string *)&xmmword_1022A04F8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A04F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A0510);
  }
  if (byte_1022A050F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A04F8, *((unint64_t *)&xmmword_1022A04F8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A04F8;
    *(_QWORD *)(a1 + 16) = unk_1022A0508;
  }
}

void sub_1002A3FB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0510);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A3FC8(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 40);
  sub_1002E5034(a1 + 56, a3);
  return a1;
}

void sub_1002A402C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1002A404C(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  NSObject *v4;
  uint8_t *v5;
  double v6;
  NSObject *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;

  v2 = sub_1000CC4F4(*(_QWORD *)a1);
  *(_BYTE *)(a1 + 8) = v2;
  if (v2)
  {
    sub_1002A446C((uint64_t *)a1);
    sub_100634364(*(_QWORD *)a1, "MicroLocationConfiguration", (const char **)&off_10212B4B8, 0, 0);
    v3 = sub_100635B3C(*(_QWORD *)a1, "MicroLocationConfiguration");
    *(_BYTE *)(a1 + 8) = v3;
    if (v3)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B498);
      v4 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        v15 = "MicroLocationConfiguration";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B498);
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Sucessfully created table if necessary: %s", &v12);
LABEL_19:
        v8 = v5;
        sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationConfigurationTable::initTable()", "%s\n", v6);
LABEL_29:
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B498);
      v9 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "MicroLocationConfiguration";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B498);
        v12 = 136446210;
        v13 = "MicroLocationConfiguration";
        v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Failed to create table: %{public}s", &v12, 12);
        v8 = v11;
        sub_100512490("Generic", 1, 0, 0, "void CLMicroLocationConfigurationTable::initTable()", "%s\n", v10);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B498);
    v7 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Database is not connected so we can't intialize our table", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B498);
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Database is not connected so we can't intialize our table");
      goto LABEL_19;
    }
  }
}

uint64_t sub_1002A4440(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_1002A404C(a1);
  return a1;
}

BOOL sub_1002A446C(uint64_t *a1)
{
  _BOOL8 result;

  result = sub_100635B3C(*a1, "MicroLocationConfiguration");
  if (result)
    return sub_1002639C4(*a1, (uint64_t *)&off_10212B4B8, 6, "MicroLocationConfiguration");
  return result;
}

uint64_t sub_1002A44C0(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  void *v7;
  uint8_t buf[8];

  if (*(_BYTE *)(a1 + 8))
  {
    v1 = *(_QWORD *)a1;
    if (byte_1023010D7 >= 0)
      v2 = (char *)&xmmword_1023010C0;
    else
      v2 = (char *)xmmword_1023010C0;
    sub_1000CDA68(v1, v2);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B498);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B498);
    LOWORD(v7) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't insert or replace", &v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationConfigurationTable::insertOrReplace(const std::vector<CLMicroLocationConfigurationTable::Entry> &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 0;
}

void sub_1002A4B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::bad_cast a33)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 8))(a30);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A4BE0@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t result;
  std::bad_cast v3;
  _UNKNOWN **v4;
  _UNKNOWN **v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  result = sub_10026A098(a1, a2);
  if ((result & 1) == 0)
  {
    std::bad_cast::bad_cast(&v3);
    v3.__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    sub_10026A9C8((uint64_t)&v3);
  }
  return result;
}

void sub_1002A4C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
  uint64_t v10;

  std::bad_cast::~bad_cast(&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void sub_1002A4C7C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  char *v39;
  std::string v40;
  void *__p[2];
  unsigned __int8 v42;
  std::string::value_type __s[8];
  char v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *v54[2];
  int64_t v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;

  *((_BYTE *)&v45.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v45, "SELECT * FROM (");
  v44 = 7;
  strcpy(__s, "SELECT ");
  v6 = std::string::append(&v45, __s, 7uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1002A3E38((uint64_t)__p);
  if ((v42 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v42 & 0x80u) == 0)
    v9 = v42;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v46, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v47, " FROM ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v48, "MicroLocationConfiguration");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v49, " ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a2 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a2;
  else
    v19 = *(const std::string::value_type **)a2;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  v21 = std::string::append(&v50, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v51, " ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v57, " ORDER BY ");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v58, "GenerationTimestamp");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v52, " DESC LIMIT ");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v40, a3);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v40;
  else
    v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  v33 = std::string::append(&v59, (const std::string::value_type *)v31, size);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v53, ") ORDER BY ");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v56, "GenerationTimestamp");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v55 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)v54 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (v44 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v55 >= 0)
    v39 = (char *)v54;
  else
    v39 = (char *)v54[0];
  sub_1000CDA68(a1, v39);
}

void sub_1002A5228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void **buf)
{
  uint64_t v62;

  buf = &a51;
  sub_1002A7CB8(&buf);
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (a60 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002A5624(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  NSObject *v50;
  std::string __p;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v52.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v52, "WHERE ");
    v12 = std::string::append(&v52, "ConfigurationType");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v53, "=");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v54, (const std::string::value_type *)p_p, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v55, " AND ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v56, "GenerationTimestamp");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v57, "<= ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = *(char *)(a5 + 23);
    if (v26 >= 0)
      v27 = (const std::string::value_type *)a5;
    else
      v27 = *(const std::string::value_type **)a5;
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(a5 + 23);
    else
      v28 = *(_QWORD *)(a5 + 8);
    v29 = std::string::append(&v58, v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a2 + 24))
    {
      *((_BYTE *)&v54.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v54, " AND ");
      v31 = std::string::append(&v54, "RTLOIType");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v33 = std::string::append(&v55, "=\"");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (!*(_BYTE *)(a2 + 24))
        sub_10028DF3C();
      v35 = *(char *)(a2 + 23);
      if (v35 >= 0)
        v36 = (const std::string::value_type *)a2;
      else
        v36 = *(const std::string::value_type **)a2;
      if (v35 >= 0)
        v37 = *(unsigned __int8 *)(a2 + 23);
      else
        v37 = *(_QWORD *)(a2 + 8);
      v38 = std::string::append(&v56, v36, v37);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      v40 = std::string::append(&v57, "\"");
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v58;
      else
        v42 = (std::string *)v58.__r_.__value_.__r.__words[0];
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      else
        v43 = v58.__r_.__value_.__l.__size_;
      std::string::append(&v59, (const std::string::value_type *)v42, v43);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (a3[16])
    {
      *((_BYTE *)&v57.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v57, " AND ");
      sub_1015A2E04(&v55, "RtLoiGroupId");
      if (!a3[16])
        sub_10028DF3C();
      sub_1002AAC84((const void **)&v55.__r_.__value_.__l.__data_, a3, (uint64_t)&v56);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v56;
      else
        v44 = (std::string *)v56.__r_.__value_.__r.__words[0];
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      else
        v45 = v56.__r_.__value_.__l.__size_;
      v46 = std::string::append(&v57, (const std::string::value_type *)v44, v45);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v58;
      else
        v48 = (std::string *)v58.__r_.__value_.__r.__words[0];
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      else
        v49 = v58.__r_.__value_.__l.__size_;
      std::string::append(&v59, (const std::string::value_type *)v48, v49);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
    }
    sub_1002A4C7C(*(_QWORD *)a1, (uint64_t)&v59, 1u);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B498);
  v50 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v59.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(v59.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, table is not valid so we can't get the most recent configuration before time\"}", (uint8_t *)&v59, 0x12u);
  }
  *a6 = 0;
  a6[112] = 0;
}

void sub_1002A5BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  *(_QWORD *)(v47 - 160) = v47 - 128;
  sub_1002A7CB8((void ***)(v47 - 160));
  if (*(char *)(v47 - 73) < 0)
    operator delete(*(void **)(v47 - 96));
  _Unwind_Resume(a1);
}

void sub_1002A5D88(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X8>)
{
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  NSObject *v37;
  const char *v38;
  std::string *v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v42.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v42, "WHERE ");
    v10 = std::string::append(&v42, "ConfigurationType");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v43, "=");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v41, *a2);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v41;
    else
      v14 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    else
      size = v41.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v44, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a3 + 24))
    {
      *((_BYTE *)&v40.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v40, " AND ");
      v18 = std::string::append(&v40, "RTLOIType");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&v41, "=\"");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (!*(_BYTE *)(a3 + 24))
        sub_10028DF3C();
      v22 = *(char *)(a3 + 23);
      if (v22 >= 0)
        v23 = (const std::string::value_type *)a3;
      else
        v23 = *(const std::string::value_type **)a3;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(a3 + 23);
      else
        v24 = *(_QWORD *)(a3 + 8);
      v25 = std::string::append(&v42, v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&v43, "\"");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v44;
      else
        v29 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v30 = v44.__r_.__value_.__l.__size_;
      std::string::append(&v45, (const std::string::value_type *)v29, v30);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (a4[16])
    {
      *((_BYTE *)&v43.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v43, " AND ");
      sub_1015A2E04(&v41, "RtLoiGroupId");
      if (!a4[16])
        sub_10028DF3C();
      sub_1002AAC84((const void **)&v41.__r_.__value_.__l.__data_, a4, (uint64_t)&v42);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v42;
      else
        v31 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      else
        v32 = v42.__r_.__value_.__l.__size_;
      v33 = std::string::append(&v43, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v44;
      else
        v35 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v36 = v44.__r_.__value_.__l.__size_;
      std::string::append(&v45, (const std::string::value_type *)v35, v36);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
    }
    sub_1002A4C7C(*(_QWORD *)a1, (uint64_t)&v45, 1u);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B498);
  v37 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v45.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't get the most recent wifi channel histogram", (uint8_t *)&v45, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v45, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B498);
    LOWORD(v44.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, &v45, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't get the most recent wifi channel histogram", &v44, 2);
    v39 = (std::string *)v38;
    sub_100512490("Generic", 1, 0, 2, "std::optional<CLMicroLocationConfigurationTable::Entry> CLMicroLocationConfigurationTable::getMostRecentConfigurationAtLoi(const CLMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &)", "%s\n", v38);
    if (v39 != &v45)
      free(v39);
  }
  *a5 = 0;
  a5[112] = 0;
}

void sub_1002A62D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  _Unwind_Resume(exception_object);
}

void sub_1002A6440(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  char *v6;
  std::string::size_type size;
  std::string *v8;
  unsigned __int8 *v9;
  char *v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  NSObject *v32;
  std::string __p;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  __int128 v42;
  std::string::size_type v43;
  std::string v44;
  _QWORD v45[2];

  v45[0] = a2;
  v45[1] = a3;
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = (char *)operator new(0x28uLL);
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = xmmword_101B97FF0;
    *(_OWORD *)v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *(_QWORD *)(v6 + 29) = 0;
    sub_100261F9C((uint64_t)v45, v6);
    size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v44;
    else
      v8 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v44.__r_.__value_.__l.__size_;
    LOBYTE(v42) = 45;
    v9 = sub_1002A6994(v8, (unsigned __int8 *)v8 + size, (unsigned __int8 *)&v42);
    v10 = (char *)&v44 + HIBYTE(v44.__r_.__value_.__r.__words[2]);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v11 = &v44;
    }
    else
    {
      v10 = (char *)(v44.__r_.__value_.__r.__words[0] + v44.__r_.__value_.__l.__size_);
      v11 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&v44, v9 - (unsigned __int8 *)v11, v10 - (char *)v9);
    *((_BYTE *)&v34.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v34, "WHERE ");
    v12 = std::string::append(&v34, "ConfigurationType");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v35, "=");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, 2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v17 = __p.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v36, (const std::string::value_type *)p_p, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v37, " AND HEX(");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v38, "Configuration");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v39, ") LIKE '%");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v44;
    else
      v26 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      v27 = v44.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v40, (const std::string::value_type *)v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v41, "%'");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v43 = v30->__r_.__value_.__r.__words[2];
    v42 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    sub_1002A4C7C(*(_QWORD *)a1, (uint64_t)&v42, 1u);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B498);
  v32 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v44.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(v44.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, table is not valid so we can't get cluster anchor value statistics maps from it\"}", (uint8_t *)&v44, 0x12u);
  }
  *a4 = 0;
  a4[112] = 0;
}

void sub_1002A6864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  *(_QWORD *)(v54 - 192) = v54 - 160;
  sub_1002A7CB8((void ***)(v54 - 192));
  if (*(char *)(v54 - 105) < 0)
    operator delete(*(void **)(v54 - 128));
  if (*(char *)(v54 - 73) < 0)
    operator delete(*(void **)(v54 - 96));
  _Unwind_Resume(a1);
}

void sub_1002A6988()
{
  JUMPOUT(0x1002A697CLL);
}

unsigned __int8 *sub_1002A6994(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v6;
  int v8;

  result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      v8 = *v6;
      if (v8 != *a3)
        *result++ = v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t sub_1002A69F8(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  char *v32;
  NSObject *v33;
  const char *v35;
  std::string *v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  void *__p[2];
  int64_t v51;
  std::string v52;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v38.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v38, "DELETE FROM ");
    v4 = std::string::append(&v38, "MicroLocationConfiguration");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v39, " WHERE ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v40, "GenerationTimestamp");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v41, " IN (");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v42, "SELECT ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v43, "GenerationTimestamp");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v44, " FROM ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v45, "MicroLocationConfiguration");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v46, " ORDER BY ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v47, "GenerationTimestamp");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v48, " LIMIT ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, a2);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v37;
    else
      v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v49, (const std::string::value_type *)v26, size);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v52, ")");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v51 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (v51 >= 0)
      v32 = (char *)__p;
    else
      v32 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)a1, v32);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B498);
  v33 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v52.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't deleteOldestRows", (uint8_t *)&v52, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v52, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B498);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &v52, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't deleteOldestRows", __p, 2);
    v36 = (std::string *)v35;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationConfigurationTable::deleteOldestRows(uint64_t)", "%s\n", v35);
    if (v36 != &v52)
      free(v36);
  }
  return 0;
}

void sub_1002A7070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  if (a66 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002A7200(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1002A722C@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const void *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::MessageLite *v9;
  uint64_t result;
  std::runtime_error *exception;
  std::string v12;

  v6 = sqlite3_column_blob(a1, a2);
  v7 = sqlite3_column_bytes(a1, a2);
  if (!v6)
    sub_1018F0C74();
  v8 = v7;
  sub_1002BC10C(a3);
  result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v9, v6, v8);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1015A2E04(&v12, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10212AC58;
  }
  return result;
}

void sub_1002A72F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  wireless_diagnostics::google::protobuf::MessageLite *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_1002E50A8(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_1002A733C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x249249249249249)
    sub_100259694();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v10 = 0x249249249249249;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)sub_1002A7588((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[112 * v5];
  v17 = &v11[112 * v10];
  sub_1002A7478((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 112;
  sub_1002A7514(a1, &v14);
  v12 = a1[1];
  sub_1002A77F0(&v14);
  return v12;
}

void sub_1002A7464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A77F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_1002A7478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  void *__p[2];
  uint64_t v9;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v9 = *(_QWORD *)(a3 + 16);
  }
  sub_1002A3FC8(a2, (__int128 *)__p, a4, *a5, a5[1]);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void sub_1002A74F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A7514(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002A75D0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1002A7588(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    sub_10025955C();
  return operator new(112 * a2);
}

uint64_t sub_1002A75D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 112;
      sub_1002A7698(a1, v7 - 112, v9);
      v7 = *((_QWORD *)&v16 + 1) - 112;
      *((_QWORD *)&v16 + 1) -= 112;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1002A7730((uint64_t)v13);
  return v11;
}

void sub_1002A7684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002A7730((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A7698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v7;
  return sub_1002E5034(a2 + 56, a3 + 56);
}

void sub_1002A7714(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A7730(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002A7764((uint64_t *)a1);
  return a1;
}

void sub_1002A7764(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1002A77B4(v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
}

void sub_1002A77B4(uint64_t a1, uint64_t a2)
{
  sub_1002E50A8((wireless_diagnostics::google::protobuf::MessageLite *)(a2 + 56));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void **sub_1002A77F0(void **a1)
{
  sub_1002A7820(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1002A7820(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 112;
    sub_1002A77B4(v4, i - 112);
  }
}

uint64_t sub_1002A7864(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  sub_1002E5034(a1 + 56, a2 + 56);
  *(_BYTE *)(a1 + 112) = 1;
  return a1;
}

void sub_1002A78EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

double sub_1002A7908@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  sub_1002A7968(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1002A794C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A7968(std::string *a1)
{
  sub_1002956C4(a1);
  sub_100295794(a1);
  sub_1002A79AC(a1);
  sub_1002A7A88(a1);
  sub_100269E68(a1);
  return sub_10029594C(a1);
}

uint64_t sub_1002A79AC(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "ConfigurationType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1002A7A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A7A88(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "Configuration");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1002A7B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double sub_1002A7B64@<D0>(std::string *a1@<X8>)
{
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  void **v5;
  std::string::size_type v6;
  double result;
  std::string v8;
  void *__p[2];
  int64_t v10;
  std::string v11;

  sub_1015A2E04(&v11, "VALUES (");
  v2 = 6;
  do
  {
    if (v2 == 6)
    {
      *((_BYTE *)&v8.__r_.__value_.__s + 23) = 0;
      v8.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      *((_BYTE *)&v8.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v8, ", ");
    }
    v3 = std::string::append(&v8, "?");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v10 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if (v10 >= 0)
      v6 = HIBYTE(v10);
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append(&v11, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    --v2;
  }
  while (v2);
  std::string::append(&v11, ")");
  result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_1002A7C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002A7CB8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        sub_1002A77B4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1002A7D3C()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101B980A0;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  v0 = std::string::append(&v19, "MicroLocationConfiguration");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v20, " (");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_1002A3E38((uint64_t)v17);
  if ((v18 & 0x80u) == 0)
    v4 = v17;
  else
    v4 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v5 = v18;
  else
    v5 = (std::string::size_type)v17[1];
  v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v22, ") ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1002A3F00((uint64_t)__p);
  if ((v16 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v11 = v16;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_1023010D0 = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  xmmword_1023010C0 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023010C0, (void *)&_mh_execute_header);
}

void sub_1002A7F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 25) < 0)
    operator delete(*(void **)(v40 - 48));
  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_1002A7FD4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A0530);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A0530))
  {
    sub_1002AC0EC((std::string *)&xmmword_1022A0518);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A0518, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A0530);
  }
  if (byte_1022A052F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A0518, *((unint64_t *)&xmmword_1022A0518 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A0518;
    *(_QWORD *)(a1 + 16) = unk_1022A0528;
  }
}

void sub_1002A8084(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0530);
  _Unwind_Resume(a1);
}

void sub_1002A809C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A0550);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A0550))
  {
    sub_100269F44((std::string *)&xmmword_1022A0538);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1022A0538, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A0550);
  }
  if (byte_1022A054F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_1022A0538, *((unint64_t *)&xmmword_1022A0538 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1022A0538;
    *(_QWORD *)(a1 + 16) = unk_1022A0548;
  }
}

void sub_1002A814C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0550);
  _Unwind_Resume(a1);
}

void sub_1002A8164(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  NSObject *v4;
  uint8_t *v5;
  double v6;
  NSObject *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;

  v2 = sub_1000CC4F4(*(_QWORD *)a1);
  *(_BYTE *)(a1 + 8) = v2;
  if (v2)
  {
    sub_100634364(*(_QWORD *)a1, "MiLoLoiTable", (const char **)&off_10212B628, 0, 0);
    v3 = sub_100635B3C(*(_QWORD *)a1, "MiLoLoiTable");
    *(_BYTE *)(a1 + 8) = v3;
    if (v3)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B608);
      v4 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        v15 = "MiLoLoiTable";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B608);
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Sucessfully created table if necessary: %s", &v12);
LABEL_19:
        v8 = v5;
        sub_100512490("Generic", 1, 0, 2, "void CLMiLoLoiTable::initTable()", "%s\n", v6);
LABEL_29:
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B608);
      v9 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "MiLoLoiTable";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B608);
        v12 = 136446210;
        v13 = "MiLoLoiTable";
        v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Failed to create table: %{public}s", &v12, 12);
        v8 = v11;
        sub_100512490("Generic", 1, 0, 0, "void CLMiLoLoiTable::initTable()", "%s\n", v10);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B608);
    v7 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Database is not connected so we can't intialize our table", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B608);
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Database is not connected so we can't intialize our table");
      goto LABEL_19;
    }
  }
}

uint64_t sub_1002A8550(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_1002A8164(a1);
  return a1;
}

uint64_t sub_1002A857C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, double a7)
{
  uint64_t v8;
  __int128 v9;

  *(double *)a1 = a7;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  v8 = a1 + 40;
  if (*((char *)a6 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)v8, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v9 = *a6;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)a6 + 2);
    *(_OWORD *)v8 = v9;
  }
  return a1;
}

void sub_1002A85D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  char *v36;
  std::string::value_type v37[8];
  char v38;
  std::string v39;
  void *__p[2];
  unsigned __int8 v41;
  std::string::value_type __s[8];
  char v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  __int128 v51;
  int64_t v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;

  *((_BYTE *)&v44.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v44, "SELECT * FROM (");
  v43 = 7;
  strcpy(__s, "SELECT ");
  v7 = std::string::append(&v44, __s, 7uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  sub_1002A7FD4((uint64_t)__p);
  if ((v41 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v41 & 0x80u) == 0)
    v10 = v41;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v45, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v46, " FROM ");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v47, "MiLoLoiTable");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v48, " ");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = *(char *)(a3 + 23);
  if (v19 >= 0)
    v20 = (const std::string::value_type *)a3;
  else
    v20 = *(const std::string::value_type **)a3;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a3 + 23);
  else
    v21 = *(_QWORD *)(a3 + 8);
  v22 = std::string::append(&v54, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v55, " ORDER BY ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v49, "LastSeenTimeStamp");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v56, " DESC LIMIT ");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v39, a4);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v39;
  else
    v30 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v32 = std::string::append(&v50, (const std::string::value_type *)v30, size);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v38 = 1;
  strcpy(v37, ")");
  v34 = std::string::append(&v53, v37, 1uLL);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v52 = v34->__r_.__value_.__r.__words[2];
  v51 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (v38 < 0)
    operator delete(*(void **)v37);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v41 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v52 >= 0)
    v36 = (char *)&v51;
  else
    v36 = (char *)v51;
  sub_1000CDA68(a2, v36);
}

void sub_1002A8B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void **buf)
{
  uint64_t v58;

  buf = &a47;
  sub_10028E258(&buf);
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  if (a56 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002A8EF8()
{
  __cxa_end_catch();
  JUMPOUT(0x1002A8CECLL);
}

void sub_1002A8F0C(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x1002A8D20);
}

uint64_t sub_1002A8F1C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  void *v7;
  uint8_t buf[8];

  if (*(_BYTE *)(a1 + 8))
  {
    v1 = *(_QWORD *)a1;
    if (byte_1023010EF >= 0)
      v2 = (char *)&xmmword_1023010D8;
    else
      v2 = (char *)xmmword_1023010D8;
    sub_1000CDA68(v1, v2);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B608);
  v3 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B608);
    LOWORD(v7) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't insert or replace", &v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMiLoLoiTable::insertOrReplace(const std::vector<CLMiLoLoiTable::Entry> &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 0;
}

void sub_1002A9590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::bad_cast a33)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 8))(a30);
  _Unwind_Resume(exception_object);
}

void sub_1002A961C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _BYTE *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  NSObject *v18;
  const char *v19;
  std::string::value_type *v20;
  std::string __p;
  std::string::value_type __s[8];
  char v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  void *v28[4];
  std::string::value_type v29[8];
  _UNKNOWN **v30;
  _UNKNOWN **v31;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v24.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v24, "WHERE ");
    v8 = std::string::append(&v24, "LoiId");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v23 = 2;
    strcpy(__s, "=\"");
    v10 = std::string::append(&v25, __s, 2uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    memset(&__p, 0, sizeof(__p));
    if ((sub_10026A098(a2, &__p) & 1) != 0)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v14 = std::string::append(&v26, (const std::string::value_type *)p_p, size);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      HIBYTE(v31) = 1;
      strcpy(v29, "\"");
      v16 = std::string::append(&v27, v29, 1uLL);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v28[2] = (void *)v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)v28 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v31) < 0)
        operator delete(*(void **)v29);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (v23 < 0)
        operator delete(*(void **)__s);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      sub_1002A85D0((uint64_t)v16, *(_QWORD *)a1, (uint64_t)v28, a3);
    }
    std::bad_cast::bad_cast((std::bad_cast *)v29);
    *(_QWORD *)v29 = &off_10212A508;
    sub_10026A9C8((uint64_t)v29);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B608);
  v18 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't get LOI Group Id for LOI", (uint8_t *)v29, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v29, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B608);
    LOWORD(v28[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, v29, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't get LOI Group Id for LOI", v28, 2);
    v20 = (std::string::value_type *)v19;
    sub_100512490("Generic", 1, 0, 2, "std::optional<boost::uuids::uuid> CLMiLoLoiTable::getLoiGroupIdForLoi(const boost::uuids::uuid &, uint32_t)", "%s\n", v19);
    if (v20 != v29)
      free(v20);
  }
  *a4 = 0;
  a4[16] = 0;
}

void sub_1002A99E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,std::bad_cast a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  _Unwind_Resume(exception_object);
}

void sub_1002A9AA8(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  NSObject *v40;
  const char *v41;
  std::string *v42;
  std::string v43;
  std::string::value_type v44[8];
  char v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string __s;
  std::string v50;
  std::string v51;
  void *__p[2];
  uint64_t v53;
  std::string v54;
  std::string v55;

  __p[0] = 0;
  __p[1] = 0;
  v53 = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    if (*a2 != a2[1])
    {
      *((_BYTE *)&v54.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v54, " WHERE ");
      v8 = std::string::append(&v54, "LoiId");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__s, " IN ");
      v10 = std::string::append(&v50, (const std::string::value_type *)&__s, 4uLL);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&v48, "(");
      v12 = std::string::append(&v55, (const std::string::value_type *)&v48, 1uLL);
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      v14 = *a2;
      v15 = a2[1];
      if (*a2 != v15)
      {
        v16 = 1;
        do
        {
          memset(&__s, 0, sizeof(__s));
          if ((sub_10026A098(v14, &__s) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v55);
            v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10212A508;
            sub_10026A9C8((uint64_t)&v55);
          }
          v17 = std::string::insert(&__s, 0, "\"");
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v54.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          v19 = std::string::append(&v54, "\"");
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v50.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v50;
          else
            v21 = (std::string *)v50.__r_.__value_.__r.__words[0];
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
          else
            size = v50.__r_.__value_.__l.__size_;
          std::string::append(&v51, (const std::string::value_type *)v21, size);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (v16 < (unint64_t)((a2[1] - *a2) >> 4))
            std::string::append(&v51, ",");
          v14 += 16;
          ++v16;
        }
        while (v14 != v15);
      }
      *((_BYTE *)&v55.__r_.__value_.__s + 23) = 1;
      LOWORD(v55.__r_.__value_.__l.__data_) = 41;
      std::string::append(&v51, (const std::string::value_type *)&v55, 1uLL);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      *((_BYTE *)&v46.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&v46, "SELECT DISTINCT ");
      v23 = std::string::append(&v46, "LoiGroupId");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v45 = 6;
      strcpy(v44, " FROM ");
      v25 = std::string::append(&v47, v44, 6uLL);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&v48, "MiLoLoiTable");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v51;
      else
        v29 = (std::string *)v51.__r_.__value_.__r.__words[0];
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      else
        v30 = v51.__r_.__value_.__l.__size_;
      v31 = std::string::append(&__s, (const std::string::value_type *)v29, v30);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v33 = std::string::append(&v54, " LIMIT ");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, a3);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v43;
      else
        v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        v36 = v43.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v55, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (v45 < 0)
        operator delete(*(void **)v44);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v50;
      else
        v39 = (std::string *)v50.__r_.__value_.__r.__words[0];
      sub_1000CDA68(*(_QWORD *)a1, (char *)v39);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B608);
    v40 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v55.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't get LOI Group Id for LOIs", (uint8_t *)&v55, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v55, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B608);
      LOWORD(v51.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, &v55, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't get LOI Group Id for LOIs", &v51, 2);
      v42 = (std::string *)v41;
      sub_100512490("Generic", 1, 0, 2, "std::vector<boost::uuids::uuid> CLMiLoLoiTable::getLoiGroupIdsForLois(const std::vector<boost::uuids::uuid> &, uint32_t)", "%s\n", v41);
      if (v42 != &v55)
        free(v42);
    }
    *(_OWORD *)a4 = *(_OWORD *)__p;
    a4[2] = v53;
  }
}

void sub_1002AA2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

#error "1002AA640: call analysis failed (funcsize=100)"

void sub_1002AA670()
{
  __cxa_end_catch();
  JUMPOUT(0x1002AA468);
}

void sub_1002AA684(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x1002AA4ACLL);
}

uint64_t sub_1002AA694(uint64_t a1, uint64_t *a2, __int128 **a3, uint64_t a4)
{
  CFAbsoluteTime Current;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  CFAbsoluteTime v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  _BYTE *v27;
  __int128 v28;
  uint64_t v29;
  NSObject *v30;
  const char *v32;
  char *v33;
  const char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int16 v38[8];
  void *__dst[2];
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _BYTE buf[40];
  __int128 v52;
  uint64_t v53;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*a3 == a3[1])
    {
      return 1;
    }
    else
    {
      v43 = 0;
      v44 = 0;
      v45 = 0;
      Current = j__CFAbsoluteTimeGetCurrent();
      v9 = *a2;
      v10 = a2[1];
      if (*(char *)(a4 + 23) < 0)
      {
        sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)a4;
        v42 = *(_QWORD *)(a4 + 16);
      }
      *(CFAbsoluteTime *)&v46 = Current;
      *((_QWORD *)&v46 + 1) = v9;
      *(_QWORD *)&v47 = v10;
      *((_QWORD *)&v47 + 1) = v9;
      v48 = v10;
      if (SHIBYTE(v42) < 0)
      {
        sub_100115CE4(&v49, __p[0], (unint64_t)__p[1]);
        if (SHIBYTE(v42) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v49 = *(_OWORD *)__p;
        v50 = v42;
      }
      v13 = v44;
      if (v44 >= v45)
      {
        v18 = sub_1002AC66C(&v43, &v46);
      }
      else
      {
        v14 = v46;
        v15 = v47;
        *(_QWORD *)(v44 + 32) = v48;
        *(_OWORD *)v13 = v14;
        *(_OWORD *)(v13 + 16) = v15;
        v16 = (_BYTE *)(v13 + 40);
        if (SHIBYTE(v50) < 0)
        {
          sub_100115CE4(v16, (void *)v49, *((unint64_t *)&v49 + 1));
        }
        else
        {
          v17 = v49;
          *(_QWORD *)(v13 + 56) = v50;
          *(_OWORD *)v16 = v17;
        }
        v18 = v13 + 64;
      }
      v44 = v18;
      v19 = *a3;
      v20 = a3[1];
      if (*a3 != v20)
      {
        do
        {
          v21 = j__CFAbsoluteTimeGetCurrent();
          v22 = *v19;
          v23 = *(_OWORD *)a2;
          if (*(char *)(a4 + 23) < 0)
          {
            v36 = *(_OWORD *)a2;
            v37 = *v19;
            sub_100115CE4(__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
            v23 = v36;
            v22 = v37;
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)a4;
            v40 = *(_QWORD *)(a4 + 16);
          }
          *(CFAbsoluteTime *)buf = v21;
          *(_OWORD *)&buf[8] = v22;
          *(_OWORD *)&buf[24] = v23;
          if (SHIBYTE(v40) < 0)
          {
            sub_100115CE4(&v52, __dst[0], (unint64_t)__dst[1]);
          }
          else
          {
            v52 = *(_OWORD *)__dst;
            v53 = v40;
          }
          v46 = *(_OWORD *)buf;
          v47 = *(_OWORD *)&buf[16];
          v48 = *(_QWORD *)&buf[32];
          if (SHIBYTE(v50) < 0)
            operator delete((void *)v49);
          v49 = v52;
          v50 = v53;
          HIBYTE(v53) = 0;
          LOBYTE(v52) = 0;
          if (SHIBYTE(v40) < 0)
            operator delete(__dst[0]);
          v24 = v44;
          if (v44 >= v45)
          {
            v29 = sub_1002AC66C(&v43, &v46);
          }
          else
          {
            v25 = v46;
            v26 = v47;
            *(_QWORD *)(v44 + 32) = v48;
            *(_OWORD *)v24 = v25;
            *(_OWORD *)(v24 + 16) = v26;
            v27 = (_BYTE *)(v24 + 40);
            if (SHIBYTE(v50) < 0)
            {
              sub_100115CE4(v27, (void *)v49, *((unint64_t *)&v49 + 1));
            }
            else
            {
              v28 = v49;
              *(_QWORD *)(v24 + 56) = v50;
              *(_OWORD *)v27 = v28;
            }
            v29 = v24 + 64;
          }
          v44 = v29;
          ++v19;
        }
        while (v19 != v20);
      }
      v12 = sub_1002A8F1C(a1);
      if ((v12 & 1) == 0)
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B608);
        v30 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#Warning Failed to update LOI Database Table with LOI Ids", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_10212B608);
          v38[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "#Warning Failed to update LOI Database Table with LOI Ids", v38, 2);
          v35 = (char *)v34;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLMiLoLoiTable::updateLoiGroupIdForLois(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &)", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
      }
      if (SHIBYTE(v50) < 0)
        operator delete((void *)v49);
      *(_QWORD *)buf = &v43;
      sub_10028E258((void ***)buf);
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B608);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we update LOIGroupId for specified LOI Ids", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B608);
      LOWORD(v46) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we update LOIGroupId for specified LOI Ids", &v46, 2);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMiLoLoiTable::updateLoiGroupIdForLois(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    return 0;
  }
  return v12;
}

void sub_1002AABF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char *a44)
{
  if (a43 < 0)
    operator delete(__p);
  a44 = &a30;
  sub_10028E258((void ***)&a44);
  _Unwind_Resume(a1);
}

double sub_1002AAC84@<D0>(const void **a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *p_p;
  std::string::size_type size;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  double result;
  std::string::size_type v55;
  int v56;
  uint64_t v57;
  size_t v59;
  char *v60;
  const void *v61;
  std::bad_cast *v62;
  std::string __p;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::bad_cast v86[2];
  _UNKNOWN **v87;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (*a2)
  {
LABEL_2:
    if (*((char *)a1 + 23) >= 0)
      v6 = *((unsigned __int8 *)a1 + 23);
    else
      v6 = (size_t)a1[1];
    v7 = &v64;
    sub_100259584((uint64_t)&v64, v6 + 12);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*((char *)a1 + 23) >= 0)
        v8 = a1;
      else
        v8 = *a1;
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, " IN (SELECT ");
    v9 = std::string::append(&v64, "MiLoLoiTable");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v65, ".");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v66, "LoiId");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v67, " FROM ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v68, "MiLoLoiTable");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v69, " WHERE ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v70, "MiLoLoiTable");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v71, ".");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v72, "LoiGroupId");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v73, "=(SELECT ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v74, "MiLoLoiTable");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v75, ".");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v76, "LoiGroupId");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v77, " FROM ");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    v37 = std::string::append(&v78, "MiLoLoiTable");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&v79, " WHERE ");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&v80, "MiLoLoiTable");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&v81, ".");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v82, "LoiId");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&v83, "=\"");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    memset(&__p, 0, sizeof(__p));
    if ((sub_10026A098((uint64_t)a2, &__p) & 1) == 0)
    {
      v62 = std::bad_cast::bad_cast(v86);
      v86[0].__vftable = (std::bad_cast_vtbl *)&off_10212A508;
      sub_10026A9C8((uint64_t)v62);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v51 = std::string::append(&v84, (const std::string::value_type *)p_p, size);
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    v53 = std::string::append(&v85, "\"))");
    v55 = v53->__r_.__value_.__l.__size_;
    *(_QWORD *)a3 = v53->__r_.__value_.__r.__words[0];
    *(_QWORD *)(a3 + 8) = v55;
    *(_QWORD *)(a3 + 15) = *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v55) = *((_BYTE *)&v53->__r_.__value_.__s + 23);
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v56 = SHIBYTE(v85.__r_.__value_.__r.__words[2]);
    *(_BYTE *)(a3 + 23) = v55;
    if (v56 < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
  }
  else
  {
    v57 = 1;
    while (v57 != 16)
    {
      if (a2[v57++])
      {
        if ((unint64_t)(v57 - 2) < 0xF)
          goto LABEL_2;
        break;
      }
    }
    if (*((char *)a1 + 23) >= 0)
      v59 = *((unsigned __int8 *)a1 + 23);
    else
      v59 = (size_t)a1[1];
    v60 = (char *)v86;
    sub_100259584((uint64_t)v86, v59 + 3);
    if (SHIBYTE(v87) < 0)
      v60 = (char *)v86[0].__vftable;
    if (v59)
    {
      if (*((char *)a1 + 23) >= 0)
        v61 = a1;
      else
        v61 = *a1;
      memmove(v60, v61, v59);
    }
    *(_DWORD *)&v60[v59] = 2236989;
    result = *(double *)&v86[0].__vftable;
    *(_OWORD *)a3 = *(_OWORD *)&v86[0].__vftable;
    *(_QWORD *)(a3 + 16) = v87;
  }
  return result;
}

void sub_1002AB330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  void *a70;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  uint64_t v85;

  if (*(char *)(v85 - 73) < 0)
    operator delete(*(void **)(v85 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v85 - 105) < 0)
    operator delete(*(void **)(v85 - 128));
  if (*(char *)(v85 - 137) < 0)
    operator delete(*(void **)(v85 - 160));
  if (*(char *)(v85 - 169) < 0)
    operator delete(*(void **)(v85 - 192));
  if (*(char *)(v85 - 201) < 0)
    operator delete(*(void **)(v85 - 224));
  if (*(char *)(v85 - 233) < 0)
    operator delete(*(void **)(v85 - 256));
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a85);
  if (a84 < 0)
    operator delete(a83);
  if (a82 < 0)
    operator delete(a81);
  if (a80 < 0)
    operator delete(a79);
  if (a78 < 0)
    operator delete(a77);
  if (a76 < 0)
    operator delete(a75);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a70);
  if (a68 < 0)
    operator delete(a63);
  if (a61 < 0)
    operator delete(a56);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_1002AB4F0()
{
  JUMPOUT(0x1002AB3F8);
}

void sub_1002AB4F8()
{
  JUMPOUT(0x1002AB408);
}

void sub_1002AB500()
{
  JUMPOUT(0x1002AB418);
}

void sub_1002AB508()
{
  JUMPOUT(0x1002AB428);
}

void sub_1002AB510()
{
  JUMPOUT(0x1002AB438);
}

void sub_1002AB518()
{
  JUMPOUT(0x1002AB448);
}

void sub_1002AB520()
{
  JUMPOUT(0x1002AB458);
}

void sub_1002AB528()
{
  JUMPOUT(0x1002AB468);
}

void sub_1002AB530()
{
  JUMPOUT(0x1002AB478);
}

void sub_1002AB538()
{
  JUMPOUT(0x1002AB488);
}

void sub_1002AB540()
{
  JUMPOUT(0x1002AB498);
}

void sub_1002AB548()
{
  JUMPOUT(0x1002AB4A8);
}

void sub_1002AB550()
{
  JUMPOUT(0x1002AB4B8);
}

void sub_1002AB558()
{
  JUMPOUT(0x1002AB4C8);
}

void sub_1002AB560()
{
  JUMPOUT(0x1002AB4D8);
}

void sub_1002AB568(uint64_t a1@<X0>, _BYTE *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  void *v15[2];
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  uint8_t buf[16];
  std::string::size_type v21;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v19.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v19, "WHERE ");
    sub_1015A2E04(v15, "LoiId");
    sub_1002AAC84((const void **)v15, a2, (uint64_t)__p);
    if ((v18 & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if ((v18 & 0x80u) == 0)
      v9 = v18;
    else
      v9 = (std::string::size_type)__p[1];
    v10 = std::string::append(&v19, (const std::string::value_type *)v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)buf = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((char)v18 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    sub_1002A85D0((uint64_t)v10, *(_QWORD *)a1, (uint64_t)buf, a3);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B608);
  v12 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid, can't select LOI IDs for specified LOI Group Id", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B608);
    LOWORD(v19.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid, can't select LOI IDs for specified LOI Group Id", &v19, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLMiLoLoiTable::Entry> CLMiLoLoiTable::selectLoiIdsInLoiGroupId(const boost::uuids::uuid &, uint32_t)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void sub_1002AB7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(exception_object);
}

void sub_1002AB850(uint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  char *v12;
  std::string::value_type v13[8];
  char v14;
  std::string::value_type __s[8];
  char v16;
  std::string v17;
  std::string v18;
  std::string v19;
  void *__p[2];
  int64_t v21;
  std::string v22;
  std::string v23;

  *((_BYTE *)&v17.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&v17, "SELECT COUNT(*) FROM ");
  v2 = std::string::append(&v17, "MiLoLoiTable");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v16 = 7;
  strcpy(__s, " WHERE ");
  v4 = std::string::append(&v18, __s, 7uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v19, "LoiId");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v14 = 1;
  strcpy(v13, "=");
  v8 = std::string::append(&v23, v13, 1uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v22, "LoiGroupId");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(*(void **)v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v16 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (v21 >= 0)
    v12 = (char *)__p;
  else
    v12 = (char *)__p[0];
  sub_1000CDA68(*a1, v12);
}

unint64_t sub_1002ABCE4(sqlite3_stmt *a1, int a2)
{
  unint64_t result;

  result = sqlite3_column_int64(a1, a2);
  if ((result & 0x8000000000000000) != 0)
    sub_1018F0EC8();
  if (HIDWORD(result))
    sub_1018F1034();
  return result;
}

void sub_1002ABD0C(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  const char *v15;
  void **v16;
  std::string::value_type __s[8];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  void *__p[2];
  std::string::size_type v24;

  if (*(_BYTE *)(a1 + 8))
  {
    *((_BYTE *)&v19.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v19, " WHERE ");
    v6 = std::string::insert(&v19, 0, "MiLoLoiTable");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v20, "LoiId");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v18 = 1;
    strcpy(__s, "=");
    v10 = std::string::append(&v21, __s, 1uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v22, "LoiGroupId");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v24 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (v18 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    sub_1002A85D0((uint64_t)v12, *(_QWORD *)a1, (uint64_t)__p, a2);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B608);
  v14 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all loi groups", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B608);
    LOWORD(v22.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Table is not valid so we can't select all loi groups", &v22, 2);
    v16 = (void **)v15;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLMiLoLoiTable::Entry> CLMiLoLoiTable::selectAllLoiGroups(uint32_t)", "%s\n", v15);
    if (v16 != __p)
      free(v16);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1002AC004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  _Unwind_Resume(exception_object);
}

void sub_1002AC094(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1002AC0C0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

double sub_1002AC0EC@<D0>(std::string *a1@<X8>)
{
  double result;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  sub_1002AC14C(&v3);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1002AC130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AC14C(std::string *a1)
{
  sub_10029D5D8(a1);
  sub_10029D6A8(a1);
  sub_1002AC188(a1);
  sub_1002AC264(a1);
  return sub_1002AC340(a1);
}

uint64_t sub_1002AC188(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LoiId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1002AC230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AC264(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LoiGroupId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1002AC30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AC340(std::string *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  v2 = std::string::append(&v7, "LoiType");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = HIBYTE(v9);
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1002AC3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AC41C(uint64_t *a1, uint64_t *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v6 = (a1[1] - *a1) >> 6;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58)
    sub_100259694();
  v12 = a1[2] - *a1;
  if (v12 >> 5 > v7)
    v7 = v12 >> 5;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
    v13 = 0x3FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)sub_1002697F0((uint64_t)(a1 + 2), v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[64 * v6];
  v20 = &v14[64 * v13];
  sub_1002AC530((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  v19 = v18 + 64;
  sub_1002AC5F8(a1, &v17);
  v15 = a1[1];
  sub_10028E98C((uint64_t)&v17);
  return v15;
}

void sub_1002AC51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10028E98C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002AC530(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  void *__p[2];
  uint64_t v14;

  v7 = *a3;
  v8 = *a4;
  v9 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    v11 = *a5;
    v12 = *a4;
    sub_100115CE4(__p, *(void **)a6, *(_QWORD *)(a6 + 8));
    v9 = v11;
    v8 = v12;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a6;
    v14 = *(_QWORD *)(a6 + 16);
  }
  *(_QWORD *)a2 = v7;
  *(_OWORD *)(a2 + 8) = v8;
  *(_OWORD *)(a2 + 24) = v9;
  v10 = (_BYTE *)(a2 + 40);
  if (SHIBYTE(v14) < 0)
  {
    sub_100115CE4(v10, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 56) = v14;
  }
}

void sub_1002AC5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AC5F8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10028E75C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002AC66C(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  char *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v21 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002697F0(v7, v9);
  else
    v10 = 0;
  v11 = &v10[64 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v19 = v11;
  v20 = &v10[64 * v9];
  v12 = *a2;
  v13 = a2[1];
  *((_QWORD *)v11 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  v14 = v11 + 40;
  if (*((char *)a2 + 63) < 0)
  {
    sub_100115CE4(v14, *((void **)a2 + 5), *((_QWORD *)a2 + 6));
    v11 = v19;
  }
  else
  {
    v15 = *(__int128 *)((char *)a2 + 40);
    *((_QWORD *)v11 + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)v14 = v15;
  }
  v19 = v11 + 64;
  sub_1002AC5F8(a1, v18);
  v16 = a1[1];
  sub_10028E98C((uint64_t)v18);
  return v16;
}

void sub_1002AC76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10028E98C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AC780()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101B980A0;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  v0 = std::string::append(&v19, "MiLoLoiTable");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v20, " (");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_1002A7FD4((uint64_t)v17);
  if ((v18 & 0x80u) == 0)
    v4 = v17;
  else
    v4 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v5 = v18;
  else
    v5 = (std::string::size_type)v17[1];
  v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v22, ") ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1002A809C((uint64_t)__p);
  if ((v16 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v11 = v16;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_1023010E8 = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  xmmword_1023010D8 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023010D8, (void *)&_mh_execute_header);
}

void sub_1002AC96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 25) < 0)
    operator delete(*(void **)(v40 - 48));
  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002ACA18(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = objc_opt_class(BMMicroLocationRestrictedLocalizationStream, a2, a3);
  if (result)
  {
    result = objc_opt_new(BMMicroLocationRestrictedLocalizationStream);
    *a1 = result;
  }
  return result;
}

void sub_1002ACA50(id *a1)
{

  *a1 = 0;
}

id *sub_1002ACA78(id *result, void *a2)
{
  id *v3;
  NSObject *v4;
  id v5;
  id *v6;
  uint64_t v7;
  id *v8;
  const char *v9;
  uint8_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int16 v15[8];
  uint8_t v16[128];
  uint8_t buf[1640];

  if (*result)
  {
    v3 = result;
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B768);
    v4 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Saving Microlocation localization results to Biome restricted stream", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B768);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Saving Microlocation localization results to Biome restricted stream", v15, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLMicrolocationBiomePublisherHelper::saveEventsToBiomeStream(NSArray<BMMicroLocationRestrictedLocalizationEvent *> *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v5 = objc_msgSend(*v3, "source");
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    result = (id *)objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
    if (result)
    {
      v6 = result;
      v7 = *(_QWORD *)v12;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(a2);
          objc_msgSend(v5, "sendEvent:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v8));
          v8 = (id *)((char *)v8 + 1);
        }
        while (v6 != v8);
        result = (id *)objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
        v6 = result;
      }
      while (result);
    }
  }
  return result;
}

id sub_1002ACCA4(uint64_t a1, void *a2)
{
  id result;
  NSObject *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint8_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int16 v15[8];
  uint8_t v16[128];
  uint8_t buf[1640];

  result = (id)objc_opt_class(BMLocationMicroLocationVisit, a2);
  if (result)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B768);
    v4 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Saving Microlocation localization results to Biome public stream", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B768);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Saving Microlocation localization results to Biome public stream", v15, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLMicrolocationBiomePublisherHelper::saveEventsToPublicBiomeStream(NSArray<BMLocationMicroLocationVisit *> *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v5 = objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Location"), "MicroLocationVisit"), "source");
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
    if (result)
    {
      v6 = result;
      v7 = *(_QWORD *)v12;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(a2);
          objc_msgSend(v5, "sendEvent:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v8));
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
        v6 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1002ACEDC(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

_QWORD *sub_1002ACF08(_QWORD *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  *a1 = a2;
  v8[0] = off_10212B7E8;
  v8[1] = a1;
  v8[3] = v8;
  v9[0] = off_10212B878;
  v9[1] = a1;
  v9[3] = v9;
  v10[0] = off_10212B8F8;
  v10[1] = a1;
  v10[3] = v10;
  v11[0] = off_10212B978;
  v11[1] = a1;
  v12 = v11;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v3 = (char *)operator new(0x80uLL);
  a1[3] = v3 + 128;
  a1[1] = v3;
  a1[2] = v3;
  v4 = 0;
  a1[2] = sub_1002AE630((uint64_t)(a1 + 3), (uint64_t)v8, (uint64_t)&v13, (uint64_t)v3);
  do
  {
    v5 = (&v12)[v4];
    if (&v11[v4] == v5)
    {
      v5 = &v11[v4];
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_7;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
    v4 -= 4;
  }
  while (v4 != -16);
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

void sub_1002AD048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v14 = v13;
  *(_QWORD *)(v12 + 16) = v14;
  sub_1002AE76C(&a10);
  v16 = 0;
  while (1)
  {
    v17 = *(char **)(&a12 + v16 + 120);
    if (&a12 + v16 + 96 == v17)
      break;
    if (v17)
    {
      v18 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
    }
    v16 -= 32;
    if (v16 == -128)
      _Unwind_Resume(a1);
  }
  v17 = &a12 + v16 + 96;
  v18 = 4;
  goto LABEL_6;
}

void sub_1002AD0B8(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 64) = j__CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 32) = sub_10028F428(*(_QWORD *)a1);
  *(_DWORD *)(a1 + 36) = sub_10028F214(*(_QWORD *)a1);
  *(_DWORD *)(a1 + 40) = sub_10028EF20(*(_QWORD *)a1);
  *(_DWORD *)(a1 + 44) = sub_10028F63C(*(_QWORD *)a1);
  *(_DWORD *)(a1 + 48) = sub_10028F92C(*(_QWORD *)a1);
  *(double *)(a1 + 56) = sub_100281B18(*(_QWORD *)a1);
}

void sub_1002AD124(uint64_t a1)
{
  CFStringRef v2;
  char v3;
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  double Current;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  CFAbsoluteTime v19;
  double v20;
  BOOL v21[8];
  _QWORD v22[7];
  void *__p;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint8_t buf[8];
  std::__shared_weak_count *v32;

  sub_1001E4804(buf);
  v21[0] = 0;
  v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAnalyticsSendEventEnabled", 0x8000100u, kCFAllocatorNull);
  v3 = sub_1001E48E4(*(uint64_t *)buf, (uint64_t)v2, v21);
  CFRelease(v2);
  v4 = v21[0];
  v5 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v4)
    v8 = 0;
  else
    v8 = v3;
  if ((v8 & 1) != 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B7B8);
    v9 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLMicroLocationMaintenance, collectMetricsPostMaintenance, not sending event because sending to CoreAnalytics is disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B7B8);
      *(_WORD *)v21 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "CLMicroLocationMaintenance, collectMetricsPostMaintenance, not sending event because sending to CoreAnalytics is disabled", v21, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationMaintenance::collectMetricsPostMaintenance()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    Current = j__CFAbsoluteTimeGetCurrent();
    v13 = *(double *)(a1 + 56);
    v14 = sub_10028F428(*(_QWORD *)a1);
    v15 = sub_10028F214(*(_QWORD *)a1);
    v16 = sub_10028EF20(*(_QWORD *)a1);
    v17 = sub_10028F63C(*(_QWORD *)a1);
    v18 = sub_10028F92C(*(_QWORD *)a1);
    sub_100284530(*(_QWORD *)a1, buf);
    v19 = j__CFAbsoluteTimeGetCurrent();
    v20 = *(double *)(a1 + 64);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3321888768;
    v22[2] = sub_1002AD4B8;
    v22[3] = &unk_10212B788;
    v22[4] = a1;
    v22[5] = (uint64_t)((Current - v13) / 60.0);
    v26 = v14;
    v27 = v15;
    v28 = v16;
    v29 = v17;
    v30 = v18;
    *(double *)&v22[6] = v19 - v20;
    v24 = 0;
    v25 = 0;
    __p = 0;
    sub_1002AE804(&__p, *(const void **)buf, (uint64_t)v32, ((uint64_t)v32 - *(_QWORD *)buf) >> 4);
    AnalyticsSendEventLazy(CFSTR("com.apple.MicroLocation.Maintenance"), v22);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      v32 = *(std::__shared_weak_count **)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_1002AD464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_1002AD4B8(uint64_t a1)
{
  _DWORD *v2;
  _QWORD v4[13];
  _QWORD v5[13];

  v2 = *(_DWORD **)(a1 + 32);
  v4[0] = CFSTR("ageOfOldestRecordingDays");
  v5[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v4[1] = CFSTR("numModels");
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80));
  v4[2] = CFSTR("numModelsDeleted");
  v5[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v2[8] - *(_DWORD *)(a1 + 80)));
  v4[3] = CFSTR("numRecordingEvents");
  v5[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 84));
  v4[4] = CFSTR("numRecordingEventsDeleted");
  v5[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v2[9] - *(_DWORD *)(a1 + 84)));
  v4[5] = CFSTR("numMeasurements");
  v5[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 88));
  v4[6] = CFSTR("numMeasurementsDeleted");
  v5[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v2[10] - *(_DWORD *)(a1 + 88)));
  v4[7] = CFSTR("numConfigurations");
  v5[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 92));
  v4[8] = CFSTR("numConfiguationsDeleted");
  v5[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v2[11] - *(_DWORD *)(a1 + 92)));
  v4[9] = CFSTR("numRapportEntries");
  v5[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 96));
  v4[10] = CFSTR("numRapportEntriesDeleted");
  v5[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v2[12] - *(_DWORD *)(a1 + 96)));
  v4[11] = CFSTR("maintenanceRunTime");
  v5[11] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v4[12] = CFSTR("numCustomLoiIds");
  v5[12] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 13);
}

_QWORD *sub_1002AD6CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return sub_1002AE804(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
}

void sub_1002AD6E8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_1002AD700(_QWORD **a1)
{
  _QWORD *v1;
  CFStringRef v2;
  int v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  CFStringRef v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint8_t *v18;
  uint8_t buf[4];
  const char *v20;
  __int128 v21;

  v1 = *a1;
  sub_1001E4804(&v21);
  *(_DWORD *)buf = 0;
  v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingPurgeAge", 0x8000100u, kCFAllocatorNull);
  v3 = sub_1000B1180(v21, (uint64_t)v2, buf);
  CFRelease(v2);
  v4 = *(_DWORD *)buf;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v3)
    v8 = 1440 * v4;
  else
    v8 = 70560;
  sub_1001E4804(&v21);
  *(_DWORD *)buf = 0;
  v9 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListLabelsPurgeAge", 0x8000100u, kCFAllocatorNull);
  sub_1000B1180(v21, (uint64_t)v9, buf);
  CFRelease(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = sub_10027BE18(v1, v8);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B7B8);
  v14 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v15 = "NOT ";
    if (v13)
      v15 = "";
    *(_DWORD *)buf = 136446210;
    v20 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Did %{public}s delete old data", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B7B8);
    v16 = "NOT ";
    if (v13)
      v16 = "";
    LODWORD(v21) = 136446210;
    *(_QWORD *)((char *)&v21 + 4) = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Did %{public}s delete old data", &v21, 12);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationMaintenance::deleteOldEntries()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
}

#error "1002ADBC0: call analysis failed (funcsize=93)"

void sub_1002ADC20(uint64_t *a1)
{
  int v1;
  NSObject *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;

  v1 = sub_1002875E0(*a1);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B7B8);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v3 = "NOT";
    if (v1)
      v3 = "";
    *(_DWORD *)buf = 136446210;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Did %{public}s free database space", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B7B8);
    v4 = "NOT";
    if (v1)
      v4 = "";
    v7 = 136446210;
    v8 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "Did %{public}s free database space", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationMaintenance::freeDatabaseSpace()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

#error "1002ADF60: call analysis failed (funcsize=91)"

void sub_1002ADFC0(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1002ADFF0()
{
  operator delete();
}

_QWORD *sub_1002AE004(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10212B7E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1002AE038(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10212B7E8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1002AE054(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;

  sub_1002AE164((uint64_t)v5, a2);
  sub_1002AD0B8(*(_QWORD *)(a1 + 8));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1002AE0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AE11C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002AE158()
{
}

uint64_t sub_1002AE164(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1002AE1CC()
{
  operator delete();
}

_QWORD *sub_1002AE1E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10212B878;
  result[1] = v3;
  return result;
}

uint64_t sub_1002AE214(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10212B878;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1002AE230(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;

  sub_1002AE164((uint64_t)v5, a2);
  sub_1002AD700(*(_QWORD ***)(a1 + 8));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1002AE2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AE2F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002AE334()
{
}

void sub_1002AE344()
{
  operator delete();
}

_QWORD *sub_1002AE358(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10212B8F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1002AE38C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10212B8F8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1002AE3A8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;

  sub_1002AE164((uint64_t)v5, a2);
  sub_1002ADC20(*(uint64_t **)(a1 + 8));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1002AE438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AE470(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002AE4AC()
{
}

void sub_1002AE4BC()
{
  operator delete();
}

_QWORD *sub_1002AE4D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10212B978;
  result[1] = v3;
  return result;
}

uint64_t sub_1002AE504(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10212B978;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1002AE520(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;

  sub_1002AE164((uint64_t)v5, a2);
  sub_1002AD124(*(_QWORD *)(a1 + 8));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1002AE5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AE5E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002AE624()
{
}

uint64_t sub_1002AE630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_100270E34(v4, v6);
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1002AE6D0((uint64_t)v8);
  return v4;
}

void sub_1002AE6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002AE6D0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AE6D0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002AE704(a1);
  return a1;
}

uint64_t sub_1002AE704(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  if (v1 != v2)
  {
    while (1)
    {
      v3 = v1 - 32;
      result = *(_QWORD *)(v1 - 8);
      if (v1 - 32 == result)
        break;
      if (result)
      {
        v4 = 5;
LABEL_6:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
      }
      v1 = v3;
      if (v3 == v2)
        return result;
    }
    result = v1 - 32;
    v4 = 4;
    goto LABEL_6;
  }
  return result;
}

void sub_1002AE76C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

_QWORD *sub_1002AE804(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1002AE87C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002AE860(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002AE87C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_100259694();
  result = (char *)sub_10028E224((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

double sub_1002AE8BC(uint64_t a1, uint64_t a2)
{
  double result;

  *(_WORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_WORD *)(a1 + 141) = 0;
  *(_WORD *)(a1 + 158) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 94) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 118) = 0;
  *(_DWORD *)(a1 + 175) = 0;
  *(_QWORD *)(a1 + 184) = a2;
  return result;
}

uint64_t sub_1002AE8FC(unsigned __int8 *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  NSObject *v10;
  int v11;
  char v12;
  unsigned int v13;
  _BOOL4 v14;
  id v15;
  NSObject *v16;
  const char *v17;
  void **v18;
  int v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  double Current;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  char v28;
  uint64_t v29;
  uint64_t *v31;
  NSObject *v32;
  double v33;
  double v34;
  CFStringRef v35;
  int v36;
  double v37;
  double v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  CFStringRef v54;
  int v55;
  double v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  double v60;
  NSObject *v61;
  const char *v62;
  void **v63;
  const char *v64;
  void **v65;
  int v66;
  _QWORD v67[11];
  double v68;
  unsigned int v69;
  void *__p[2];
  char v71;
  void *buf;
  _BYTE v73[10];
  __int16 v74;
  _BYTE v75[10];
  _QWORD v76[201];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
  v10 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    buf = (void *)68289794;
    *(_WORD *)v73 = 2082;
    *(_QWORD *)&v73[2] = "";
    v74 = 1026;
    *(_DWORD *)v75 = a3;
    *(_WORD *)&v75[4] = 1026;
    *(_DWORD *)&v75[6] = a4;
    LOWORD(v76[0]) = 2050;
    *(_QWORD *)((char *)v76 + 2) = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: requestLocalization\", \"isForce\":%{public}hhd, \"isInMotionTrigger\":%{public}hhd, \"TriggerReason\":%{public}lu}", (uint8_t *)&buf, 0x28u);
  }
  v11 = sub_1002B26D0(a1, a2);
  v12 = v11;
  if (v11)
    v13 = 5;
  else
    v13 = 0;
  v69 = v13;
  v68 = sub_100359EE0(a2);
  v14 = sub_1002AF578(a2);
  v15 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if ((v12 & 1) == 0)
  {
    if (a1[124])
    {
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 23) + 32))(*((_QWORD *)a1 + 23), a2);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      v16 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got localization trigger while waiting for rescheduled localization timer", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
        LOWORD(v67[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "CLMicroLocationTriggerManager: Got localization trigger while waiting for rescheduled localization timer", v67, 2);
        v18 = (void **)v17;
        sub_100512490("Generic", 1, 0, 2, "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestLocalization(const CLMicroLocationProto::RecordingEvent &, const BOOL, const BOOL, CLMicroLocationProto::TriggerReason)", "%s\n", v17);
        if (v18 != &buf)
          free(v18);
      }
LABEL_26:
      v21 = 1;
LABEL_27:
      v69 = v21;
      goto LABEL_28;
    }
    v19 = *a1;
    if (v19 == 1)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      v20 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got localization trigger while localizing - AcceptedOngoing", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
        LOWORD(v67[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "CLMicroLocationTriggerManager: Got localization trigger while localizing - AcceptedOngoing", v67, 2);
        v63 = (void **)v62;
        sub_100512490("Generic", 1, 0, 2, "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestLocalization(const CLMicroLocationProto::RecordingEvent &, const BOOL, const BOOL, CLMicroLocationProto::TriggerReason)", "%s\n", v62);
        if (v63 != &buf)
          free(v63);
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)a1 + 23) + 24))(*((_QWORD *)a1 + 23), a2, v14 & (a4 ^ 1u));
      goto LABEL_26;
    }
    if (*((_DWORD *)a1 + 24) == 1)
    {
      v31 = (uint64_t *)*((_QWORD *)a1 + 3);
      if (v31)
      {
        while (*((_DWORD *)v31 + 8) != 1)
        {
          v31 = (uint64_t *)*v31;
          if (!v31)
            goto LABEL_53;
        }
        if (sub_1002AF60C() && !a3)
        {
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
          v32 = qword_1022A00F8;
          if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got unforced localization trigger in low latency - ReturnCache", (uint8_t *)&buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A00F0 != -1)
              dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
            LOWORD(v67[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "CLMicroLocationTriggerManager: Got unforced localization trigger in low latency - ReturnCache", v67, 2);
            v65 = (void **)v64;
            sub_100512490("Generic", 1, 0, 2, "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestLocalization(const CLMicroLocationProto::RecordingEvent &, const BOOL, const BOOL, CLMicroLocationProto::TriggerReason)", "%s\n", v64);
            if (v65 != &buf)
              free(v65);
          }
          v21 = 4;
          goto LABEL_27;
        }
        v19 = *a1;
      }
    }
LABEL_53:
    if (v19 == 2)
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 23) + 40))(*((_QWORD *)a1 + 23), 2);
    v33 = v68;
    v34 = *((double *)a1 + 13);
    sub_1001E4804(&buf);
    v67[0] = 0;
    v35 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMinDurationBetweenTriggers", 0x8000100u, kCFAllocatorNull);
    v36 = sub_1001FD9FC((uint64_t)buf, (uint64_t)v35, v67);
    CFRelease(v35);
    v37 = v33 - v34;
    v38 = *(double *)v67;
    v39 = *(std::__shared_weak_count **)v73;
    if (*(_QWORD *)v73)
    {
      v40 = (unint64_t *)(*(_QWORD *)v73 + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = 3.0;
    if (v36)
      v42 = v38;
    if (v37 >= v42)
    {
      if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 23) + 88))(*((_QWORD *)a1 + 23)) & 1) != 0)
      {
        sub_1002AF778((uint64_t)a1, a2, 1, &v68, (uint64_t)v15, v14 & a4);
        goto LABEL_28;
      }
      v48 = *((_QWORD *)a1 + 10);
      if (v48 >= *((_QWORD *)a1 + 11))
      {
        v49 = sub_1002B2990((uint64_t *)a1 + 9);
      }
      else
      {
        sub_1002DF194(*((_QWORD *)a1 + 10));
        v49 = v48 + 136;
        *((_QWORD *)a1 + 10) = v48 + 136;
      }
      *((_QWORD *)a1 + 10) = v49;
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      v61 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        buf = (void *)68289026;
        *(_WORD *)v73 = 2082;
        *(_QWORD *)&v73[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: Wait For Display On\"}", (uint8_t *)&buf, 0x12u);
      }
      v21 = 2;
      goto LABEL_27;
    }
    v43 = qword_1022A00F0;
    if (v68 < *((double *)a1 + 13))
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      v44 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        v45 = *((_QWORD *)a1 + 13);
        buf = (void *)68289538;
        *(_WORD *)v73 = 2082;
        *(_QWORD *)&v73[2] = "";
        v74 = 2050;
        *(double *)v75 = v68;
        *(_WORD *)&v75[8] = 2050;
        v76[0] = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      }
      v46 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        v47 = *((_QWORD *)a1 + 13);
        buf = (void *)68289538;
        *(_WORD *)v73 = 2082;
        *(_QWORD *)&v73[2] = "";
        v74 = 2050;
        *(double *)v75 = v68;
        *(_WORD *)&v75[8] = 2050;
        v76[0] = v47;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fLastTrigger is in the past", "{\"msg%{public}.0s\":\"fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
        v43 = qword_1022A00F0;
      }
      else
      {
        v43 = -1;
      }
      *((double *)a1 + 13) = v68;
    }
    if (v43 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
    v50 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v51 = *((_QWORD *)a1 + 13);
      buf = (void *)68289538;
      *(_WORD *)v73 = 2082;
      *(_QWORD *)&v73[2] = "";
      v74 = 2050;
      *(double *)v75 = v68;
      *(_WORD *)&v75[8] = 2050;
      v76[0] = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: Reschedule trigger\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
    }
    v52 = *((_QWORD *)a1 + 10);
    if (v52 >= *((_QWORD *)a1 + 11))
    {
      v53 = sub_1002B2990((uint64_t *)a1 + 9);
    }
    else
    {
      sub_1002DF194(*((_QWORD *)a1 + 10));
      v53 = v52 + 136;
      *((_QWORD *)a1 + 10) = v52 + 136;
    }
    *((_QWORD *)a1 + 10) = v53;
    v69 = 3;
    sub_1001E4804(&buf);
    v67[0] = 0;
    v54 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizationRescheduleDelay", 0x8000100u, kCFAllocatorNull);
    v55 = sub_1001FD9FC((uint64_t)buf, (uint64_t)v54, v67);
    CFRelease(v54);
    v56 = *(double *)v67;
    v57 = *(std::__shared_weak_count **)v73;
    if (*(_QWORD *)v73)
    {
      v58 = (unint64_t *)(*(_QWORD *)v73 + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = 5.0;
    if (v55)
      v60 = v56;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 23) + 72))(*((_QWORD *)a1 + 23), (uint64_t)((v60 - (v68 - *((double *)a1 + 13))) * 1000.0));
    a1[124] = 1;
    if (!a1[175])
      sub_1002B13F0((uint64_t)a1, a2);
  }
LABEL_28:
  sub_1002AFB6C((uint64_t)a1, a2, 0, a5, v69, (uint64_t)v67);
  v22 = *((_QWORD *)a1 + 23);
  v66 = 0;
  sub_1000B0C3C(&v66);
  __p[0] = (void *)sub_1000B0D38((ssize_t)&v66);
  __p[1] = v23;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_1002B0044(__p, (uint64_t)v67, (uint64_t)&buf, Current);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 96))(v22, &buf);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)((char *)v76 + 2));
  sub_1000B0D18((unsigned int *)&v66);
  v66 = 0;
  sub_100357608(&v66, &buf);
  v25 = v67[4];
  sub_10035762C((int *)&v69, __p);
  v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 23) + 88))(*((_QWORD *)a1 + 23));
  if (*((_DWORD *)a1 + 24) == 1 && (v27 = (uint64_t *)*((_QWORD *)a1 + 3)) != 0)
  {
    while (*((_DWORD *)v27 + 8) != 1)
    {
      v27 = (uint64_t *)*v27;
      if (!v27)
        goto LABEL_32;
    }
    v28 = sub_1002AF60C();
  }
  else
  {
LABEL_32:
    v28 = 0;
  }
  sub_1002E9498(a2, (uint64_t)&buf, v25, (uint64_t)__p, v26, v28, (uint64_t)v15);
  if (v71 < 0)
    operator delete(__p[0]);
  if ((v75[3] & 0x80000000) != 0)
    operator delete(buf);
  v29 = v69;
  sub_1002E0DC4((wireless_diagnostics::google::protobuf::MessageLite *)v67);
  return v29;
}

void sub_1002AF4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  *(_QWORD *)(v40 + 80) = v41;
  _Unwind_Resume(exception_object);
}

BOOL sub_1002AF578(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  if ((*(_BYTE *)(a1 + 128) & 4) == 0)
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    v1 = *(_QWORD *)(qword_102310400 + 16);
  v2 = *(uint64_t **)(v1 + 16);
  v3 = *((char *)v2 + 23);
  if (v3 < 0)
  {
    if (v2[1] != 20)
      return 0;
    v2 = (uint64_t *)*v2;
  }
  else if (v3 != 20)
  {
    return 0;
  }
  v4 = (uint64_t *)*v2;
  v5 = v2[1];
  v6 = *((_DWORD *)v2 + 4);
  return v4 == (uint64_t *)0x6C616E7265746E49 && v5 == 0x6F4D746E65696C43 && v6 == 1852795252;
}

uint64_t sub_1002AF60C()
{
  CFStringRef v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPedestrianFenceEnabled", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return 1;
  else
    return v1 ^ 1u;
}

void sub_1002AF6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AF6E8(uint64_t result, uint64_t a2, int a3)
{
  uint64_t *v4;
  unint64_t v5;

  v4 = (uint64_t *)result;
  *(_BYTE *)(result + 124) = 1;
  if (*(_BYTE *)(result + 175))
  {
    if (!a3)
      return result;
  }
  else
  {
    result = sub_1002B13F0(result, a2);
    if (!a3)
      return result;
  }
  v5 = v4[10];
  if (v5 >= v4[11])
  {
    result = sub_1002B2990(v4 + 9);
  }
  else
  {
    sub_1002DF194(v4[10]);
    result = v5 + 136;
    v4[10] = v5 + 136;
  }
  v4[10] = result;
  return result;
}

void sub_1002AF770(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_1002AF778(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, int a6)
{
  NSObject *v11;
  int v12;
  const char *v13;
  _OWORD *v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  void *__p;
  void *v27;
  _DWORD *v28;
  void *v29;
  __int128 v30;
  uint8_t buf[8];
  _BYTE v32[20];
  __int16 v33;
  void *v34;
  __int16 v35;
  int v36;
  _BYTE v37[16];
  unsigned __int8 v38;

  sub_100359E44(a2, v37);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
  v11 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = v38;
    v13 = "";
    if (v38)
    {
      v14 = operator new(0x28uLL);
      v29 = v14;
      v30 = xmmword_101B97FF0;
      *v14 = 0u;
      v14[1] = 0u;
      *(_QWORD *)((char *)v14 + 29) = 0;
      sub_100261F9C((uint64_t)v37, v14);
      if (v30 >= 0)
        v13 = (const char *)&v29;
      else
        v13 = (const char *)v29;
    }
    sub_1002EC7C4(a3, &__p);
    if (SHIBYTE(v28) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v32 = 2082;
    *(_QWORD *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(_QWORD *)&v32[12] = v13;
    v33 = 2082;
    v34 = p_p;
    v35 = 1026;
    v36 = a6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::startTrigger\", \"TriggerUUID\":%{public, location:escape_only}s, \"ScanActivity\":%{public, location:escape_only}s, \"isInMotionTrigger\":%{public}hhd}", buf, 0x2Cu);
    if (SHIBYTE(v28) < 0)
      operator delete(__p);
    if (v12 && SHIBYTE(v30) < 0)
      operator delete(v29);
  }
  *(_BYTE *)a1 = a3;
  *(_QWORD *)(a1 + 104) = *a4;
  if ((_DWORD)a3 == 1)
    *(_QWORD *)(a1 + 112) = *a4;
  *(_WORD *)(a1 + 177) = a6 | 0x100;
  sub_1002B1A18(a1, a2);
  sub_100359E44(a2, buf);
  LODWORD(__p) = 0;
  sub_1000B0C3C((int *)&__p);
  v16 = sub_1000B0D38((ssize_t)&__p);
  v19 = *(void **)buf;
  v18 = *(_QWORD *)v32;
  if (!v32[8])
  {
    v18 = v17;
    v19 = (void *)v16;
  }
  v20 = *(unsigned __int8 *)(a1 + 158);
  *(_QWORD *)(a1 + 142) = v19;
  *(_QWORD *)(a1 + 150) = v18;
  if (!v20)
    *(_BYTE *)(a1 + 158) = 1;
  sub_1000B0D18((unsigned int *)&__p);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 184) + 16))(*(_QWORD *)(a1 + 184), a2, a3, a4, a5);
  if (*(_BYTE *)a1 == 1 && *(_BYTE *)(a1 + 176))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
    v21 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v32 = 2082;
      *(_QWORD *)&v32[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::startTrigger, setting medium confidence due to motion\"}", buf, 0x12u);
    }
    v22 = *(_QWORD *)(a1 + 184);
    v23 = operator new(4uLL);
    *(_QWORD *)buf = v23;
    *v23 = 2;
    *(_QWORD *)&v32[8] = v23 + 1;
    *(_QWORD *)v32 = v23 + 1;
    v24 = operator new(4uLL);
    __p = v24;
    *v24 = 1;
    v27 = v24 + 1;
    v28 = v24 + 1;
    (*(void (**)(uint64_t, uint8_t *, void **))(*(_QWORD *)v22 + 80))(v22, buf, &__p);
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)v32 = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_1002AFB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1002AFB6C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  std::string *v11;
  unsigned int v12;
  std::string *v13;
  std::string *v14;
  char v15;
  unsigned int v16;
  std::string *v17;
  char v18;
  std::string *v19;
  __int128 *v20;
  __int128 v21;
  const char *v22;
  int v23;
  const char *v24;
  std::string v25;
  std::string __str;
  unsigned int v27;
  unsigned int v28;
  std::string v29;
  _BYTE v30[17];

  v27 = a5;
  v28 = a3;
  sub_1002BBFEC(a6);
  if ((*(_BYTE *)(a2 + 128) & 4) == 0)
    goto LABEL_5;
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    v10 = *(_QWORD *)(qword_102310400 + 16);
  if ((*(_BYTE *)(v10 + 44) & 4) != 0)
  {
    v20 = *(__int128 **)(v10 + 16);
    if (*((char *)v20 + 23) < 0)
    {
      sub_100115CE4(&__str, *(void **)v20, *((_QWORD *)v20 + 1));
    }
    else
    {
      v21 = *v20;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v21;
    }
  }
  else
  {
LABEL_5:
    sub_1015A2E04(&__str, "");
  }
  *(_DWORD *)(a6 + 80) |= 0x10u;
  v11 = *(std::string **)(a6 + 32);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v11, &__str);
  v12 = v28;
  if (!sub_1002BC6D0(v28))
  {
    v22 = "::CLMicroLocationProto::TriggerRequestType_IsValid(value)";
    v23 = 20735;
    v24 = "set_requesttype";
    goto LABEL_39;
  }
  *(_DWORD *)(a6 + 80) |= 0x100u;
  *(_DWORD *)(a6 + 56) = v12;
  if (!sub_1002BC6DC(a4))
  {
    v22 = "::CLMicroLocationProto::TriggerReason_IsValid(value)";
    v23 = 20781;
    v24 = "set_reason";
LABEL_39:
    __assert_rtn(v24, "microlocation.pb.h", v23, v22);
  }
  *(_DWORD *)(a6 + 80) |= 0x400u;
  *(_DWORD *)(a6 + 72) = a4;
  sub_100357608(&v28, &v29);
  *(_DWORD *)(a6 + 80) |= 8u;
  v13 = *(std::string **)(a6 + 16);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v13, &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  sub_100359E44(a2, v30);
  if (v30[16])
  {
    memset(&v25, 0, sizeof(v25));
    if ((sub_10026A098((uint64_t)v30, &v25) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v29);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10212A508;
      sub_10026A9C8((uint64_t)&v29);
    }
    *(_DWORD *)(a6 + 80) |= 0x40u;
    v14 = *(std::string **)(a6 + 48);
    if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v14, &v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 88))(*(_QWORD *)(a1 + 184));
  *(_DWORD *)(a6 + 80) |= 4u;
  *(_BYTE *)(a6 + 28) = v15;
  v16 = v27;
  if (!sub_1002BC6DC(v27))
    __assert_rtn("set_requeststatus", "microlocation.pb.h", 20758, "::CLMicroLocationProto::TriggerRequestStatus_IsValid(value)");
  *(_DWORD *)(a6 + 80) |= 0x200u;
  *(_DWORD *)(a6 + 60) = v16;
  sub_10035762C((int *)&v27, &v29);
  *(_DWORD *)(a6 + 80) |= 0x20u;
  v17 = *(std::string **)(a6 + 40);
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v17, &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v18 = *(_BYTE *)(a1 + 124);
  *(_DWORD *)(a6 + 80) |= 0x80u;
  *(_BYTE *)(a6 + 29) = v18;
  if (*(_BYTE *)(a1 + 158))
  {
    memset(&v25, 0, sizeof(v25));
    if ((sub_10026A098(a1 + 142, &v25) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v29);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10212A508;
      sub_10026A9C8((uint64_t)&v29);
    }
    *(_DWORD *)(a6 + 80) |= 0x800u;
    v19 = *(std::string **)(a6 + 64);
    if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v19, &v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1002AFFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::bad_cast a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  wireless_diagnostics::google::protobuf::MessageLite *v29;

  std::bad_cast::~bad_cast(&a24);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_1002E0DC4(v29);
  _Unwind_Resume(a1);
}

void sub_1002B0044(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BYTE v8[304];

  sub_1000B13D8((uint64_t)v8);
  sub_1003596B0((uint64_t)v8, a2);
  sub_1000B0EC8(a3, a1, *(_DWORD *)(a2 + 24), (uint64_t)v8, a4);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_1002B00B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B00CC(unsigned __int8 *a1, uint64_t a2)
{
  NSObject *v4;
  unsigned int v5;
  id v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  char v11;
  unsigned int v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  double Current;
  uint64_t v20;
  const char *v22;
  uint8_t *v23;
  void *v24[2];
  char v25;
  int v26;
  unsigned int v27;
  void *__p[2];
  char v29;
  uint8_t buf[16];
  uint64_t v31;
  uint64_t v32;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: requestRecording", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
    LOWORD(v24[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "CLMicroLocationTriggerManager: requestRecording", v24, 2);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestRecording(const CLMicroLocationProto::RecordingEvent &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  v27 = 0;
  if (sub_1002B26D0(a1, a2))
    v5 = 5;
  else
    v5 = 0;
  v27 = v5;
  v6 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (v27 == 5)
    goto LABEL_13;
  v7 = *a1;
  if (v7 == 1)
  {
LABEL_33:
    v15 = *((_QWORD *)a1 + 7);
    if (v15 >= *((_QWORD *)a1 + 8))
    {
      v16 = sub_1002B2990((uint64_t *)a1 + 6);
    }
    else
    {
      sub_1002DF194(*((_QWORD *)a1 + 7));
      v16 = v15 + 136;
      *((_QWORD *)a1 + 7) = v15 + 136;
    }
    *((_QWORD *)a1 + 7) = v16;
    v12 = 2;
    v27 = 2;
    goto LABEL_37;
  }
  if (v7 != 2)
  {
    if (!a1[176])
    {
      *(_QWORD *)buf = sub_100359EE0(a2);
      sub_1002AF778((uint64_t)a1, a2, 2, buf, (uint64_t)v6, 0);
      if (v27 == 2)
      {
        v12 = 2;
        goto LABEL_37;
      }
      goto LABEL_13;
    }
    goto LABEL_33;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)a1 + 23) + 24))(*((_QWORD *)a1 + 23), a2, 0);
  v27 = 1;
  if ((*(_BYTE *)(a2 + 129) & 4) == 0)
    goto LABEL_17;
LABEL_13:
  v8 = *(_QWORD *)(a2 + 88);
  if (!v8)
    v8 = *(_QWORD *)(qword_102310400 + 88);
  if ((*(_BYTE *)(v8 + 44) & 4) != 0)
  {
    v13 = *(__int128 **)(v8 + 16);
    if (*((char *)v13 + 23) < 0)
    {
      sub_100115CE4(buf, *(void **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      v31 = *((_QWORD *)v13 + 2);
      *(_OWORD *)buf = v14;
    }
  }
  else
  {
LABEL_17:
    sub_1015A2E04(buf, "");
  }
  v26 = 1;
  sub_100357608(&v26, v24);
  sub_10035762C((int *)&v27, __p);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 23) + 88))(*((_QWORD *)a1 + 23));
  if (*((_DWORD *)a1 + 24) == 1 && (v10 = (uint64_t *)*((_QWORD *)a1 + 3)) != 0)
  {
    while (*((_DWORD *)v10 + 8) != 1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_22;
    }
    v11 = sub_1002AF60C();
  }
  else
  {
LABEL_22:
    v11 = 0;
  }
  sub_1002E9498(a2, (uint64_t)v24, (uint64_t)buf, (uint64_t)__p, v9, v11, (uint64_t)v6);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(*(void **)buf);
  v12 = v27;
LABEL_37:
  sub_1002AFB6C((uint64_t)a1, a2, 1u, 0, v12, (uint64_t)v24);
  v17 = *((_QWORD *)a1 + 23);
  v26 = 0;
  sub_1000B0C3C(&v26);
  __p[0] = (void *)sub_1000B0D38((ssize_t)&v26);
  __p[1] = v18;
  Current = j__CFAbsoluteTimeGetCurrent();
  sub_1002B0044(__p, (uint64_t)v24, (uint64_t)buf, Current);
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v17 + 96))(v17, buf);
  sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v32);
  sub_1000B0D18((unsigned int *)&v26);
  v20 = v27;
  sub_1002E0DC4((wireless_diagnostics::google::protobuf::MessageLite *)v24);
  return v20;
}

void sub_1002B04F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v38 + 56) = v39;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B0588(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  NSObject *v5;
  uint64_t v7;
  char v8;
  NSObject *v9;
  uint64_t *i;
  int v11;
  int v12;
  void *__p;
  __int16 v14;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  void **p_p;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  int v25;

  if (*(_DWORD *)(a1 + 96) == 1)
  {
    v4 = *(uint64_t **)(a1 + 24);
    if (v4)
    {
      while (*((_DWORD *)v4 + 8) != 1)
      {
        v4 = (uint64_t *)*v4;
        if (!v4)
          goto LABEL_5;
      }
      goto LABEL_6;
    }
  }
LABEL_5:
  if (sub_1002B082C())
  {
LABEL_6:
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 1026;
      LODWORD(p_p) = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::requestMotion - setting fence\", \"onlyIfNotRunning\":%{public}hhd}", buf, 0x18u);
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 184) + 48))(*(_QWORD *)(a1 + 184), a2);
    return 1;
  }
  if (*(_DWORD *)(a1 + 96))
  {
    v14 = 31075;
    __p = *(void **)"LowLatency";
    v7 = 10;
    v8 = 10;
  }
  else
  {
    qmemcpy(&__p, "Legacy", 6);
    v7 = 6;
    v8 = 6;
  }
  *((_BYTE *)&__p + v7) = 0;
  v15 = v8;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
  v9 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    for (i = *(uint64_t **)(a1 + 24); i; i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 8) == 1)
        break;
    }
    v11 = sub_1002B082C();
    *(_DWORD *)buf = 68289794;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    p_p = &__p;
    v22 = 1026;
    v23 = i != 0;
    v24 = 1026;
    v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::requestMotion, denied requestMotion\", \"Mode\":%{public, location:escape_only}s, \"isLowLatencyPolicyAvailable\":%{public}hhd, \"PedestrianFenceWhenSpectatingEnabled\":%{public}hhd}", buf, 0x28u);
    v12 = v15;
    *(_BYTE *)(a1 + 176) = 0;
    if (v12 < 0)
      operator delete(__p);
  }
  else
  {
    *(_BYTE *)(a1 + 176) = 0;
  }
  return 0;
}

void sub_1002B0808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B082C()
{
  CFStringRef v0;
  unsigned int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPedestrianFenceWhenSpectatingEnabled", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return v1;
  else
    return 0;
}

void sub_1002B08EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B0904(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  void *__p;
  void *v5;
  _DWORD *v6;
  void *v7;
  void *v8;
  _DWORD *v9;

  *(_BYTE *)(a1 + 176) = 1;
  if (*(_BYTE *)a1 == 1)
  {
    v1 = *(_QWORD *)(a1 + 184);
    v2 = operator new(4uLL);
    v7 = v2;
    *v2 = 2;
    v8 = v2 + 1;
    v9 = v2 + 1;
    v3 = operator new(4uLL);
    __p = v3;
    *v3 = 1;
    v5 = v3 + 1;
    v6 = v3 + 1;
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v1 + 80))(v1, &v7, &__p);
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
  }
}

void sub_1002B09A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B09D8(uint64_t result)
{
  *(_BYTE *)(result + 176) = 0;
  return result;
}

uint64_t sub_1002B09E0(uint64_t a1, int a2, unsigned int a3)
{
  NSObject *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;
  uint64_t v13;
  void **v15[3];
  void ***v16;
  _BYTE buf[24];

  if (!*(_BYTE *)a1)
    return 0;
  if (*(_BYTE *)a1 == 1
    && *(_DWORD *)(a1 + 96) == 1
    && !*(_BYTE *)(a1 + 176)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 88))(*(_QWORD *)(a1 + 184)))
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 184) + 48))(*(_QWORD *)(a1 + 184), 0);
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
  v6 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: stopTrigger\", \"Reason\":%{public}d}", buf, 0x18u);
  }
  *(_OWORD *)buf = *(_OWORD *)(a1 + 48);
  *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1002B2C34((void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  memset(v15, 0, sizeof(v15));
  v16 = v15;
  sub_1002B2904((void ***)&v16);
  *(_BYTE *)a1 = 0;
  v7 = *(void (****)(_QWORD))(a1 + 56);
  v8 = *(void (****)(_QWORD))(a1 + 48);
  if (v7 != v8)
  {
    v9 = v7 - 17;
    v10 = v7 - 17;
    do
    {
      v11 = *v10;
      v10 -= 17;
      (*v11)(v9);
      v12 = v9 == v8;
      v9 = v10;
    }
    while (!v12);
  }
  *(_QWORD *)(a1 + 56) = v8;
  if (*(_BYTE *)(a1 + 178))
    *(_BYTE *)(a1 + 178) = 0;
  if (*(_BYTE *)(a1 + 141))
    *(_BYTE *)(a1 + 141) = 0;
  if (*(_BYTE *)(a1 + 158))
    *(_BYTE *)(a1 + 158) = 0;
  if (a2)
    v13 = sub_1002B0C24(a1, (uint64_t *)buf, a3);
  else
    v13 = 0;
  v15[0] = (void **)buf;
  sub_1002B2904(v15);
  return v13;
}

void sub_1002B0C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1002B2904(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B0C24(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unsigned int *p_Current;
  uint64_t v14;
  uint64_t v15;
  double v16;
  int v17;
  _BYTE v18[88];
  CFAbsoluteTime Current;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[304];

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    if (!*(_BYTE *)(a1 + 1))
      return 0;
    if (*(_BYTE *)(a1 + 124) || *(_BYTE *)(a1 + 176))
    {
      v6 = a1 + 48;
      if ((uint64_t *)(a1 + 48) != a2)
        sub_1002B2F34(v6, *a2, v4, 0xF0F0F0F0F0F0F0F1 * ((v4 - v3) >> 3));
      return 0;
    }
    v9 = 1;
    do
    {
      if ((v9 & 1) != 0)
      {
        Current = j__CFAbsoluteTimeGetCurrent();
        sub_1002AF778(a1, v3, 2, &Current, 0, 0);
        sub_1002AFB6C(a1, v3, 1u, a3, 0, (uint64_t)v18);
        v10 = *(_QWORD *)(a1 + 184);
        v17 = 0;
        sub_1000B0C3C(&v17);
        *(_QWORD *)&v20 = sub_1000B0D38((ssize_t)&v17);
        *((_QWORD *)&v20 + 1) = v11;
        v12 = j__CFAbsoluteTimeGetCurrent();
        sub_1002B0044(&v20, (uint64_t)v18, (uint64_t)v21, v12);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 96))(v10, v21);
        sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v22);
        p_Current = (unsigned int *)&v17;
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184), v3, 0);
        sub_1002AFB6C(a1, v3, 1u, a3, 1u, (uint64_t)v18);
        v14 = *(_QWORD *)(a1 + 184);
        LODWORD(Current) = 0;
        sub_1000B0C3C((int *)&Current);
        *(_QWORD *)&v20 = sub_1000B0D38((ssize_t)&Current);
        *((_QWORD *)&v20 + 1) = v15;
        v16 = j__CFAbsoluteTimeGetCurrent();
        sub_1002B0044(&v20, (uint64_t)v18, (uint64_t)v21, v16);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 96))(v14, v21);
        sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)v22);
        p_Current = (unsigned int *)&Current;
      }
      sub_1000B0D18(p_Current);
      sub_1002E0DC4((wireless_diagnostics::google::protobuf::MessageLite *)v18);
      v9 = 0;
      v3 += 136;
    }
    while (v3 != v4);
  }
  return 1;
}

void sub_1002B0E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002E0DC4((wireless_diagnostics::google::protobuf::MessageLite *)va);
  _Unwind_Resume(a1);
}

void sub_1002B0E90(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void (**v16)(_QWORD);
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "No";
    v17[0] = 68289282;
    v17[1] = 0;
    v18 = 2082;
    v19 = "";
    if (a2)
      v5 = "Yes";
    v20 = 2082;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: setSpectatingEnabled\", \"spectatingEnabled\":%{public, location:escape_only}s}", (uint8_t *)v17, 0x1Cu);
  }
  *(_BYTE *)(a1 + 1) = a2;
  if ((a2 & 1) == 0)
  {
    *(_BYTE *)a1 = 0;
    v7 = *(void (****)(_QWORD))(a1 + 48);
    v6 = *(void (****)(_QWORD))(a1 + 56);
    if (v6 != v7)
    {
      v8 = v6 - 17;
      v9 = v6 - 17;
      do
      {
        v10 = *v9;
        v9 -= 17;
        (*v10)(v8);
        v11 = v8 == v7;
        v8 = v9;
      }
      while (!v11);
    }
    *(_QWORD *)(a1 + 56) = v7;
    if (*(_BYTE *)(a1 + 178))
      *(_BYTE *)(a1 + 178) = 0;
    *(_BYTE *)(a1 + 124) = 0;
    if (*(_BYTE *)(a1 + 175))
      *(_BYTE *)(a1 + 175) = 0;
    v13 = *(void (****)(_QWORD))(a1 + 72);
    v12 = *(void (****)(_QWORD))(a1 + 80);
    if (v12 != v13)
    {
      v14 = v12 - 17;
      v15 = v12 - 17;
      do
      {
        v16 = *v15;
        v15 -= 17;
        (*v16)(v14);
        v11 = v14 == v13;
        v14 = v15;
      }
      while (!v11);
    }
    *(_QWORD *)(a1 + 80) = v13;
  }
}

BOOL sub_1002B1024(uint64_t a1)
{
  return *(_BYTE *)(a1 + 178) && *(_BYTE *)(a1 + 177) != 0;
}

uint64_t sub_1002B1044(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

uint64_t sub_1002B104C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

BOOL sub_1002B1054(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v9;
  _OWORD *v10;

  v6 = a1 + 8;
  v7 = sub_1002710E8((_QWORD *)(a1 + 8), a2);
  if (!v7)
  {
    v10 = a2;
    *((_DWORD *)sub_1002B2CA8(v6, a2, (uint64_t)&unk_101B9EB60, &v10) + 8) = *a3;
    if (!*(_DWORD *)(a1 + 96))
    {
      v9 = *(uint64_t **)(a1 + 24);
      if (v9)
      {
        while (*((_DWORD *)v9 + 8) != 1)
        {
          v9 = (uint64_t *)*v9;
          if (!v9)
            return v7 == 0;
        }
        if (sub_1002AF60C())
        {
          *(_DWORD *)(a1 + 96) = 1;
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 56))(*(_QWORD *)(a1 + 184));
        }
      }
    }
  }
  return v7 == 0;
}

BOOL sub_1002B1120(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v4 = (_QWORD *)(a1 + 8);
  v5 = sub_1002710E8((_QWORD *)(a1 + 8), a2);
  if (v5)
  {
    sub_1002B2F00(v4, a2);
    if (*(_DWORD *)(a1 + 96) == 1)
    {
      v6 = *(uint64_t **)(a1 + 24);
      if (v6)
      {
        while (*((_DWORD *)v6 + 8) != 1)
        {
          v6 = (uint64_t *)*v6;
          if (!v6)
            goto LABEL_6;
        }
      }
      else
      {
LABEL_6:
        if ((sub_1002B082C() & 1) == 0)
        {
          *(_DWORD *)(a1 + 96) = 0;
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
          v7 = qword_1022A00F8;
          if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Stopping motion based triggers", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00F0 != -1)
              dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
            v11[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Stopping motion based triggers", v11, 2);
            v10 = (uint8_t *)v9;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationTriggerManager::removePolicy(const boost::uuids::uuid &)", "%s\n", v9);
            if (v10 != buf)
              free(v10);
          }
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 64))(*(_QWORD *)(a1 + 184));
        }
      }
    }
    if (!*(_QWORD *)(a1 + 32) && *(_BYTE *)a1)
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 40))(*(_QWORD *)(a1 + 184));
  }
  return v5 != 0;
}

BOOL sub_1002B1340(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) == 1;
}

void sub_1002B1350(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10028E224(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1002B13F0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[4];
  _QWORD v14[2];
  char v15;

  sub_100359E44(a2, v14);
  if (!v15)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
    v3 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Localization trigger does not have a valid trigger UUID", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Localization trigger does not have a valid trigger UUID", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLMicroLocationTriggerManager::setRescheduledTriggerLocalizationUUID(const CLMicroLocationProto::RecordingEvent &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  *(_DWORD *)buf = 0;
  sub_1000B0C3C((int *)buf);
  v4 = sub_1000B0D38((ssize_t)buf);
  v7 = v14[0];
  v6 = v14[1];
  if (!v15)
  {
    v6 = v5;
    v7 = v4;
  }
  v8 = *(unsigned __int8 *)(a1 + 175);
  *(_QWORD *)(a1 + 159) = v7;
  *(_QWORD *)(a1 + 167) = v6;
  if (!v8)
    *(_BYTE *)(a1 + 175) = 1;
  return sub_1000B0D18((unsigned int *)buf);
}

void sub_1002B15DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000B0D18((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B15F8(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  int v9;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  int v53;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      v2 = (_BYTE *)a1;
      v3 = *(unsigned __int8 *)(a1 + 23);
      goto LABEL_6;
    }
    return 255;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 255;
  v2 = *(_BYTE **)a1;
LABEL_6:
  if (v3 >= 0x2D)
    v3 = 45;
  v4 = &v2[v3];
  v5 = v2;
  v6 = v4;
  do
  {
    if (*v5 == 109)
    {
      v7 = &_mh_execute_header.magic + 1;
      while (v7 != 45)
      {
        if (&v5[v7] == v4)
          goto LABEL_18;
        v8 = v5[v7];
        v9 = aMiloInternalLe[v7++];
        if (v8 != v9)
          goto LABEL_10;
      }
      v6 = v5;
    }
LABEL_10:
    ++v5;
  }
  while (v5 != v4);
LABEL_18:
  if (v6 != v4 && v6 == v2)
    return 0;
  if ((v1 & 0x80u) == 0)
    v11 = (_BYTE *)a1;
  else
    v11 = *(_BYTE **)a1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  v12 = 20;
  if (v1 < 0x14)
    v12 = v1;
  if (v12)
  {
    v13 = &v11[v12];
    v14 = v11;
    v15 = v13;
    do
    {
      if (*v14 == 73)
      {
        v16 = &_mh_execute_header.magic + 1;
        while (v16 != 20)
        {
          if (&v14[v16] == v13)
            goto LABEL_40;
          v17 = v14[v16];
          v18 = aInternalclient[v16++];
          if (v17 != v18)
            goto LABEL_32;
        }
        v15 = v14;
      }
LABEL_32:
      ++v14;
    }
    while (v14 != v13);
LABEL_40:
    if (v15 != v13 && v15 == v11)
      return 1;
  }
  v19 = 17;
  if (v1 < 0x11)
    v19 = v1;
  if (v19)
  {
    v20 = &v11[v19];
    v21 = v11;
    v22 = v20;
    do
    {
      if (*v21 == 73)
      {
        v23 = &_mh_execute_header.magic + 1;
        while (v23 != 17)
        {
          if (&v21[v23] == v20)
            goto LABEL_56;
          v24 = v21[v23];
          v25 = aInternalclient_0[v23++];
          if (v24 != v25)
            goto LABEL_48;
        }
        v22 = v21;
      }
LABEL_48:
      ++v21;
    }
    while (v21 != v20);
LABEL_56:
    if (v22 != v20 && v22 == v11)
      return 2;
  }
  v26 = 19;
  if (v1 < 0x13)
    v26 = v1;
  if (v26)
  {
    v27 = &v11[v26];
    v28 = v11;
    v29 = v27;
    do
    {
      if (*v28 == 73)
      {
        v30 = &_mh_execute_header.magic + 1;
        while (v30 != 19)
        {
          if (&v28[v30] == v27)
            goto LABEL_71;
          v31 = v28[v30];
          v32 = aInternalclient_1[v30++];
          if (v31 != v32)
            goto LABEL_63;
        }
        v29 = v28;
      }
LABEL_63:
      ++v28;
    }
    while (v28 != v27);
LABEL_71:
    if (v29 != v27 && v29 == v11)
      return 3;
  }
  v33 = 30;
  if (v1 < 0x1E)
    v33 = v1;
  if (v33)
  {
    v34 = &v11[v33];
    v35 = v11;
    v36 = v34;
    do
    {
      if (*v35 == 73)
      {
        v37 = &_mh_execute_header.magic + 1;
        while (v37 != 30)
        {
          if (&v35[v37] == v34)
            goto LABEL_87;
          v38 = v35[v37];
          v39 = aInternalclient_2[v37++];
          if (v38 != v39)
            goto LABEL_79;
        }
        v36 = v35;
      }
LABEL_79:
      ++v35;
    }
    while (v35 != v34);
LABEL_87:
    if (v36 != v34 && v36 == v11)
      return 2;
  }
  v40 = 26;
  if (v1 < 0x1A)
    v40 = v1;
  if (!v40)
    goto LABEL_105;
  v41 = &v11[v40];
  v42 = v11;
  v43 = v41;
  do
  {
    if (*v42 == 73)
    {
      v44 = &_mh_execute_header.magic + 1;
      while (v44 != 26)
      {
        if (&v42[v44] == v41)
          goto LABEL_102;
        v45 = v42[v44];
        v46 = aInternalclient_3[v44++];
        if (v45 != v46)
          goto LABEL_94;
      }
      v43 = v42;
    }
LABEL_94:
    ++v42;
  }
  while (v42 != v41);
LABEL_102:
  if (v43 != v41 && v43 == v11)
    return 2;
LABEL_105:
  v47 = 10;
  if (v1 < 0xA)
    v47 = v1;
  v48 = &v11[v47];
  if (v47)
  {
    v49 = v11;
    v50 = &v11[v47];
    do
    {
      if (*v49 == 102)
      {
        v51 = &_mh_execute_header.magic + 1;
        while (v51 != 10)
        {
          if (&v49[v51] == v48)
            goto LABEL_119;
          v52 = v49[v51];
          v53 = aFocusMode[v51++];
          if (v52 != v53)
            goto LABEL_110;
        }
        v50 = v49;
      }
LABEL_110:
      ++v49;
    }
    while (v49 != v48);
  }
  else
  {
    v50 = v11;
  }
LABEL_119:
  if (v50 != v11 || v50 == v48)
    return 4;
  else
    return 0;
}

uint64_t sub_1002B1A18(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[4];
  _QWORD v14[2];
  char v15;

  sub_100359E44(a2, v14);
  if (!v15)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
    v3 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Localization trigger does not have a valid trigger UUID", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Localization trigger does not have a valid trigger UUID", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLMicroLocationTriggerManager::setCurrentLocalizationUUID(const CLMicroLocationProto::RecordingEvent &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  *(_DWORD *)buf = 0;
  sub_1000B0C3C((int *)buf);
  v4 = sub_1000B0D38((ssize_t)buf);
  v7 = v14[0];
  v6 = v14[1];
  if (!v15)
  {
    v6 = v5;
    v7 = v4;
  }
  v8 = *(unsigned __int8 *)(a1 + 141);
  *(_QWORD *)(a1 + 125) = v7;
  *(_QWORD *)(a1 + 133) = v6;
  if (!v8)
    *(_BYTE *)(a1 + 141) = 1;
  return sub_1000B0D18((unsigned int *)buf);
}

void sub_1002B1C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000B0D18((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B1C20(unsigned __int8 *a1, _QWORD *a2, int a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (**v15)(_QWORD);
  BOOL v16;
  _QWORD *v17;
  int v18;
  unsigned __int8 *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;

  if (*a2 != a2[1])
  {
    if (!a1[1])
      return 0;
    v17 = a2;
    v18 = a3;
    v19 = a1;
    v5 = *a1;
    if (*a1)
    {
      if (v5 != 2)
      {
        if (v5 == 1)
        {
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
          v6 = qword_1022A00F8;
          if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289026;
            v21 = 0;
            v22 = 2082;
            v23 = "";
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handeling rescheduled localizations while localizing, shouldn't happen\"}", buf, 0x12u);
          }
          v8 = *a2;
          v7 = a2[1];
          while (v8 != v7)
          {
            (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)a1 + 23) + 24))(*((_QWORD *)a1 + 23), v8, 0);
            v8 += 136;
          }
        }
        return 1;
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      v10 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handeling rescheduled localizations while recording, shouldn't happen\"}", buf, 0x12u);
      }
      v12 = (void (***)(_QWORD))*((_QWORD *)a1 + 6);
      v11 = (void (***)(_QWORD))*((_QWORD *)a1 + 7);
      if (v11 != v12)
      {
        v13 = v11 - 17;
        v14 = v11 - 17;
        do
        {
          v15 = *v14;
          v14 -= 17;
          (*v15)(v13);
          v16 = v13 == v12;
          v13 = v14;
        }
        while (!v16);
      }
      *((_QWORD *)a1 + 7) = v12;
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 23) + 40))(*((_QWORD *)a1 + 23), *a1);
      *a1 = 0;
    }
    sub_1002B1E54((uint64_t)&v17);
  }
  return 1;
}

void sub_1002B1E54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  double Current;
  int v9;
  _BYTE v10[88];
  __int128 v11;
  _QWORD v12[4];
  uint64_t v13;

  v1 = **(_QWORD **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 != v2)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = 1;
    do
    {
      if ((v5 & 1) != 0)
      {
        v12[0] = j__CFAbsoluteTimeGetCurrent();
        sub_1002AF778(v4, v1, 1, v12, 0, 0);
        sub_1002AFB6C(v4, v1, 0, *(_DWORD *)(a1 + 8), 0, (uint64_t)v10);
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 184) + 24))(*(_QWORD *)(v4 + 184), v1, 0);
        sub_1002AFB6C(v4, v1, 0, *(_DWORD *)(a1 + 8), 1u, (uint64_t)v10);
      }
      v6 = *(_QWORD *)(v4 + 184);
      v9 = 0;
      sub_1000B0C3C(&v9);
      *(_QWORD *)&v11 = sub_1000B0D38((ssize_t)&v9);
      *((_QWORD *)&v11 + 1) = v7;
      Current = j__CFAbsoluteTimeGetCurrent();
      sub_1002B0044(&v11, (uint64_t)v10, (uint64_t)v12, Current);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 96))(v6, v12);
      sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)&v13);
      sub_1000B0D18((unsigned int *)&v9);
      sub_1002E0DC4((wireless_diagnostics::google::protobuf::MessageLite *)v10);
      v5 = 0;
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void sub_1002B200C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, char a12)
{
  wireless_diagnostics::google::protobuf::MessageLite *v12;

  sub_1000B2748(v12);
  sub_1000B0D18(&a11);
  sub_1002E0DC4((wireless_diagnostics::google::protobuf::MessageLite *)&a12);
  _Unwind_Resume(a1);
}

void sub_1002B2054(uint64_t a1, uint64_t a2)
{
  CFStringRef v4;
  char v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  CFStringRef v11;
  int v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  double v21;
  NSObject *v22;
  double v23;
  NSObject *v24;
  double v25;
  double v26;
  uint8_t buf[8];
  _BYTE v28[10];
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;

  sub_1001E4804(buf);
  LOBYTE(v26) = 0;
  v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsEnableInternalFallbackLocalization", 0x8000100u, kCFAllocatorNull);
  v5 = sub_1001E48E4(*(uint64_t *)buf, (uint64_t)v4, (BOOL *)&v26);
  CFRelease(v4);
  v6 = LOBYTE(v26);
  v7 = *(std::__shared_weak_count **)v28;
  if (*(_QWORD *)v28)
  {
    v8 = (unint64_t *)(*(_QWORD *)v28 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v6)
    v10 = 0;
  else
    v10 = v5;
  if ((v10 & 1) == 0 && *(_DWORD *)(a1 + 96) == 1)
  {
    sub_1001E4804(buf);
    v26 = 0.0;
    v11 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMaxDurationBetweenLocalizationTriggers", 0x8000100u, kCFAllocatorNull);
    v12 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v11, &v26);
    CFRelease(v11);
    v13 = v26;
    v14 = *(std::__shared_weak_count **)v28;
    if (*(_QWORD *)v28)
    {
      v15 = (unint64_t *)(*(_QWORD *)v28 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v12)
      v17 = v13;
    else
      v17 = 3600.0;
    v18 = sub_100359EE0(a2);
    v19 = *(double *)(a1 + 112);
    if (v18 >= v19)
    {
      if (v18 - v19 < v17)
        return;
    }
    else
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      v20 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        v21 = *(double *)(a1 + 112);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v28 = 2082;
        *(_QWORD *)&v28[2] = "";
        v29 = 2050;
        v30 = v18;
        v31 = 2050;
        v32 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", buf, 0x26u);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
      }
      v22 = qword_1022A00F8;
      if (!os_signpost_enabled((os_log_t)qword_1022A00F8))
        goto LABEL_30;
      v23 = *(double *)(a1 + 112);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v28 = 2082;
      *(_QWORD *)&v28[2] = "";
      v29 = 2050;
      v30 = v18;
      v31 = 2050;
      v32 = v23;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "triggerFallbackLocalizationEvent: fLastTrigger is in the past", "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", buf, 0x26u);
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
LABEL_30:
    v24 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v25 = v18 - *(double *)(a1 + 112);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v28 = 2082;
      *(_QWORD *)&v28[2] = "";
      v29 = 2050;
      v30 = v17;
      v31 = 2050;
      v32 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: requesting localization on screen on because we haven't localized for more than \", \"Max time between localizations\":\"%{public}f\", \"Time since last_s\":\"%{public}.09f\"}", buf, 0x26u);
    }
    sub_1002AE8FC((unsigned __int8 *)a1, a2, 1, 0, 0);
  }
}

void sub_1002B2428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B2450(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 124))
      sub_1002B2490(result, 1);
    return sub_1002B0588(v2, 1);
  }
  return result;
}

void sub_1002B2490(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5[3];
  void ***v6;
  _BYTE buf[24];

  *(_BYTE *)(a1 + 124) = 0;
  if (*(_BYTE *)(a1 + 175))
    *(_BYTE *)(a1 + 175) = 0;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 88))(*(_QWORD *)(a1 + 184)) & 1) != 0)
  {
    *(_OWORD *)buf = *(_OWORD *)(a1 + 72);
    *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    sub_1002B2C34((void **)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    memset(v5, 0, sizeof(v5));
    v6 = v5;
    sub_1002B2904((void ***)&v6);
    sub_1002B1C20((unsigned __int8 *)a1, buf, a2);
    v5[0] = (void **)buf;
    sub_1002B2904(v5);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
    v4 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: get delayed trigger timeout, awaiting display on\"}", buf, 0x12u);
    }
  }
}

void sub_1002B2600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1002B2904(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_1002B2618@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 125);
  *a2 = result;
  a2[1].n128_u8[0] = *(_BYTE *)(a1 + 141);
  return result;
}

__n128 sub_1002B262C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 159);
  *a2 = result;
  a2[1].n128_u8[0] = *(_BYTE *)(a1 + 175);
  return result;
}

BOOL sub_1002B2640(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  if ((*(_BYTE *)(a1 + 129) & 4) == 0)
    return 0;
  v1 = *(_QWORD *)(a1 + 88);
  if (!v1)
    v1 = *(_QWORD *)(qword_102310400 + 88);
  v2 = *(uint64_t **)(v1 + 16);
  v3 = *((char *)v2 + 23);
  if (v3 < 0)
  {
    if (v2[1] != 17)
      return 0;
    v2 = (uint64_t *)*v2;
  }
  else if (v3 != 17)
  {
    return 0;
  }
  v4 = (uint64_t *)*v2;
  v5 = v2[1];
  v6 = *((unsigned __int8 *)v2 + 16);
  return v4 == (uint64_t *)0x6C616E7265746E49 && v5 == 0x614D746E65696C43 && v6 == 99;
}

uint64_t sub_1002B26D0(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  _BOOL4 v17;
  __int16 v18;
  int v19;

  v3 = a1[1];
  if (a1[124])
    v4 = (*(_DWORD *)(a2 + 128) >> 10) & 1;
  else
    v4 = 0;
  v5 = sub_1002B2640(a2) && a1[101] != 0;
  if (v3)
    v6 = v4 | v5;
  else
    v6 = 1;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212B9E8);
  v7 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68290050;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 1026;
    v13 = v3 ^ 1;
    v14 = 1026;
    v15 = v4;
    v16 = 1026;
    v17 = v5;
    v18 = 1026;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: shouldReject\", \"spectatingDiabled\":%{public}hhd, \"isRecordingRequestDuringWaitForRescheduledTrigger\":%{public}hhd, \"macTriggerThrottle\":%{public}hhd, \"result\":%{public}hhd}", (uint8_t *)v9, 0x2Au);
  }
  return v6;
}

std::string *sub_1002B2828@<X0>(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  std::string *result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const std::string **v8;

  result = (std::string *)sub_1015A2E04(a2, "");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) != 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (!v6)
      v6 = *(_QWORD *)(qword_102310400 + 16);
    if ((*(_BYTE *)(v6 + 44) & 4) != 0)
    {
      v8 = (const std::string **)(v6 + 16);
      return std::string::operator=(a2, *v8);
    }
  }
  if ((v5 & 0x400) != 0)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (!v7)
      v7 = *(_QWORD *)(qword_102310400 + 88);
    if ((*(_BYTE *)(v7 + 44) & 4) != 0)
    {
      v8 = (const std::string **)(v7 + 16);
      return std::string::operator=(a2, *v8);
    }
  }
  return result;
}

void sub_1002B28BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1002B28D8(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1002B2904(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 136;
      v7 = v4 - 136;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 136;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1002B2990(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = *a1;
  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    sub_100259694();
  v5 = (uint64_t)(a1 + 2);
  v6 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4)
    v4 = 2 * v6;
  if (v6 >= 0xF0F0F0F0F0F0F0)
    v7 = 0x1E1E1E1E1E1E1E1;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_1002B2B08(v5, v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[136 * v3];
  v14 = &v8[136 * v7];
  sub_1002DF194(v12);
  v13 = v12 + 136;
  sub_1002B2A94(a1, &v11);
  v9 = a1[1];
  sub_1002B2BE4((uint64_t)&v11);
  return v9;
}

void sub_1002B2A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002B2BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B2A94(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002B2B4C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1002B2B08(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2)
    sub_10025955C();
  return operator new(136 * a2);
}

uint64_t sub_1002B2B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 136;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 136;
    sub_1002DF194(v12);
  }
  return a6;
}

uint64_t sub_1002B2BE4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 136);
    *(_QWORD *)(a1 + 16) = i - 136;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1002B2C34(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 136;
      v6 = v3 - 136;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 136;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_1002B2CA8(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1])
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = **a4;
  *((_DWORD *)v12 + 8) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v12 = *v22;
LABEL_44:
    *v22 = v12;
    goto LABEL_45;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v23 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1002B2EEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002B2F00(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = sub_1002710E8(a1, a2);
  if (result)
  {
    sub_1002123D8(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_1002B2F34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t (***v14)(_QWORD);
  uint64_t (***v15)(_QWORD);
  uint64_t (***v16)(_QWORD);
  uint64_t (***v17)(_QWORD);
  uint64_t (***v18)(_QWORD);
  uint64_t (**v19)(_QWORD);
  BOOL v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_1002B2C34((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1)
      sub_100259694();
    v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v10;
    sub_1002B30B0((_QWORD *)a1, v11);
    result = sub_1002B3100(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    sub_1002B3188(a2, v13, (uint64_t)v9);
    result = sub_1002B3100(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_1002B3188(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(uint64_t (****)(_QWORD))(a1 + 8);
  if (v16 != v14)
  {
    v17 = v16 - 17;
    v18 = v16 - 17;
    do
    {
      v19 = *v18;
      v18 -= 17;
      result = (*v19)(v17);
      v20 = v17 == v15;
      v17 = v18;
    }
    while (!v20);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_1002B30A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002B30A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_1002B30B0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1E1E1E1E1E1E1E2)
    sub_100259694();
  result = (char *)sub_1002B2B08((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[136 * v4];
  return result;
}

uint64_t sub_1002B3100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_1002DF194(a4 + v7);
      v7 += 136;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1002B315C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 136;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 136;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B3188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1002E0BA0(a3, v4);
      v4 += 136;
      a3 += 136;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1002B31E4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  CFStringRef v13;
  int v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  double *v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t *v48;
  _QWORD *v49;
  _QWORD *v50;
  _OWORD *v51;

  if (!sub_1002EFEB8(a1))
    sub_1018F1334();
  if (!*(_BYTE *)(a3 + 32))
    sub_1018F11C0();
  v49 = 0;
  v50 = 0;
  v48 = (uint64_t *)&v49;
  v9 = *(_QWORD *)(a1 + 232);
  v8 = *(_QWORD *)(a1 + 240);
  if (v9 == v8)
  {
    v12 = 0;
  }
  else
  {
    do
    {
      v10 = *(_QWORD *)(a3 + 24);
      if (!v10)
        sub_10025FD1C();
      *(_QWORD *)&v45 = (*(double (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 48))(v10, *(_QWORD *)v9, a2);
      v11 = v9 + 16;
      sub_1002B35AC(&v48, (double *)&v45, (_OWORD *)(v9 + 16));
      v9 += 32;
    }
    while (v11 + 16 != v8);
    v12 = v50;
  }
  sub_1001E4804(&v45);
  LODWORD(v51) = 0;
  v13 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMaximumNearestNeighbors", 0x8000100u, kCFAllocatorNull);
  v14 = sub_1000B1180(v45, (uint64_t)v13, &v51);
  CFRelease(v13);
  v15 = v51;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v14)
    v19 = v15;
  else
    v19 = 1;
  if (v19 >= (unint64_t)v12)
    v20 = v12;
  else
    v20 = (_QWORD *)v19;
  if (v19)
    v21 = v20;
  else
    v21 = v12;
  v45 = 0u;
  v46 = 0u;
  v47 = 1065353216;
  if (v21)
  {
    v22 = 0;
    v23 = v48;
    do
    {
      v51 = v23 + 5;
      v24 = (double *)sub_1002B3644((uint64_t)&v45, v23 + 5, (uint64_t)&unk_101B9EB60, &v51);
      v24[4] = 1.0 / (double)(unint64_t)v21 + v24[4];
      v25 = (uint64_t *)v23[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (uint64_t *)v23[2];
          v27 = *v26 == (_QWORD)v23;
          v23 = v26;
        }
        while (!v27);
      }
      v22 = (_QWORD *)((char *)v22 + 1);
      v23 = v26;
    }
    while (v22 != v21);
    v21 = (_QWORD *)v46;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *((_DWORD *)a4 + 6) = 3;
  *((_BYTE *)a4 + 80) = 0;
  a4[5] = 0;
  a4[6] = 0;
  a4[4] = 0;
  *((_BYTE *)a4 + 56) = 0;
  if (v21)
  {
    v28 = 0;
    v29 = a4 + 2;
    do
    {
      v31 = v21[2];
      v30 = v21[3];
      if ((unint64_t)v28 >= *v29)
      {
        v33 = (v28 - *a4) >> 5;
        if ((unint64_t)(v33 + 1) >> 59)
          sub_100259694();
        v34 = *v29 - (_QWORD)*a4;
        v35 = v34 >> 4;
        if (v34 >> 4 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0)
          v36 = 0x7FFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v37 = (char *)sub_10025BA00((uint64_t)(a4 + 2), v36);
        v39 = &v37[32 * v33];
        v40 = v21[4];
        *(_QWORD *)v39 = v31;
        *((_QWORD *)v39 + 1) = v30;
        *((_QWORD *)v39 + 2) = v40;
        *((_DWORD *)v39 + 6) = 0;
        v42 = *a4;
        v41 = a4[1];
        v43 = v39;
        if (v41 != *a4)
        {
          do
          {
            v44 = *((_OWORD *)v41 - 2);
            *(_OWORD *)(v43 - 20) = *(_OWORD *)(v41 - 20);
            *((_OWORD *)v43 - 2) = v44;
            v43 -= 32;
            v41 -= 32;
          }
          while (v41 != v42);
          v41 = *a4;
        }
        v28 = v39 + 32;
        *a4 = v43;
        a4[1] = v39 + 32;
        a4[2] = &v37[32 * v38];
        if (v41)
          operator delete(v41);
      }
      else
      {
        v32 = v21[4];
        *(_QWORD *)v28 = v31;
        *((_QWORD *)v28 + 1) = v30;
        *((_QWORD *)v28 + 2) = v32;
        *((_DWORD *)v28 + 6) = 0;
        v28 += 32;
      }
      a4[1] = v28;
      v21 = (_QWORD *)*v21;
    }
    while (v21);
  }
  sub_100067AC4((uint64_t)&v45);
  sub_100008848((uint64_t)&v48, v49);
}

void sub_1002B3528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_100261F44((uint64_t)&a9);
  sub_100008848((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_1002B3580(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

char *sub_1002B35AC(uint64_t **a1, double *a2, _OWORD *a3)
{
  char *v6;
  double v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;

  v6 = (char *)operator new(0x38uLL);
  v7 = *a2;
  *((double *)v6 + 4) = *a2;
  *(_OWORD *)(v6 + 40) = *a3;
  v8 = a1 + 1;
  v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        v8 = (uint64_t **)v9;
        if (v7 >= *((double *)v9 + 4))
          break;
        v9 = (uint64_t *)*v9;
        v10 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      v9 = (uint64_t *)v9[1];
    }
    while (v9);
    v10 = v8 + 1;
  }
  else
  {
    v10 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v8, v10, (uint64_t *)v6);
  return v6;
}

_QWORD *sub_1002B3644(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_44:
    *v22 = i;
    goto LABEL_45;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1002B3888(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002B389C(_QWORD *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  CFStringRef v14;
  int v15;
  double v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  NSObject *v26;
  _BOOL4 v27;
  CFStringRef v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  CFStringRef v35;
  unint64_t v36;
  char v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char v42;
  char v43;
  unint64_t v44;
  CFStringRef v45;
  int v46;
  unsigned int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t *v82;
  void *v83;
  _BYTE *v84;
  uint64_t v85;
  void *v86[3];
  void *v87;
  void *__p;
  void *v89;
  void *v90[3];
  void *v91[2];
  void *v92;
  char *v93;
  unint64_t v94;
  double v95;
  double v96;
  _BYTE v97[24];
  _BYTE *v98;
  _BYTE v99[24];
  _BYTE *v100;
  uint8_t buf[8];
  _BYTE v102[10];
  __int16 v103;
  _BOOL4 v104;
  uint8_t *v105;
  __int128 v106;
  char v107;
  _QWORD v108[3];
  _QWORD *v109;

  v11 = a2;
  sub_100297C98(a2, (uint64_t)&v92);
  sub_1001E4804(buf);
  v108[0] = 0;
  v14 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPruneDistanceThreshold", 0x8000100u, kCFAllocatorNull);
  v15 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v14, v108);
  CFRelease(v14);
  v16 = *(double *)v108;
  v17 = *(std::__shared_weak_count **)v102;
  if (*(_QWORD *)v102)
  {
    v18 = (unint64_t *)(*(_QWORD *)v102 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (!v15)
    v16 = 0.075;
  v20 = (double *)v92;
  if (v92 == v93)
  {
    sub_1018F14A8(buf);
LABEL_111:
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDendrogramAlgorithm.mm", *(_DWORD *)buf, "learn");
    __break(1u);
LABEL_112:
    dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
    goto LABEL_19;
  }
  v21 = (double *)((char *)v92 + 8);
  if ((char *)v92 + 8 != v93)
  {
    v22 = *(double *)v92;
    v23 = (double *)((char *)v92 + 8);
    do
    {
      v24 = *v23++;
      v25 = v24;
      if (v24 < v22)
      {
        v22 = v25;
        v20 = v21;
      }
      v21 = v23;
    }
    while (v23 != (double *)v93);
  }
  if (v16 > *v20)
  {
    sub_1018F1748(buf);
    goto LABEL_111;
  }
  if (!sub_100345FC0(a1))
  {
    sub_1018F15F8(buf);
    goto LABEL_111;
  }
  sub_1002ECF2C(a7);
  *(_DWORD *)a7 = 1;
  *(_DWORD *)(a7 + 4) = v11;
  v11 = a7 + 16;
  if (a7 + 16 != a4)
  {
    *(_DWORD *)(a7 + 48) = *(_DWORD *)(a4 + 32);
    sub_100270130((_QWORD *)(a7 + 16), *(uint64_t **)(a4 + 16), 0);
  }
  *(_OWORD *)(a7 + 56) = *(_OWORD *)(a4 + 40);
  v79 = a3;
  if (qword_1022A00F0 != -1)
    goto LABEL_112;
LABEL_19:
  v26 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v27 = sub_1002ED63C(a7);
    *(_QWORD *)buf = 68289282;
    *(_WORD *)v102 = 2082;
    *(_QWORD *)&v102[2] = "";
    v103 = 1026;
    v104 = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"isStable, dendrogram, initialization\", \"isStableflag\":%{public}hhd}", buf, 0x18u);
  }
  sub_1001E4804(buf);
  LODWORD(v108[0]) = 0;
  v28 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDistanceFunctionType", 0x8000100u, kCFAllocatorNull);
  v29 = sub_1000B1180(*(uint64_t *)buf, (uint64_t)v28, v108);
  CFRelease(v28);
  v30 = v108[0];
  v31 = *(std::__shared_weak_count **)v102;
  if (*(_QWORD *)v102)
  {
    v32 = (unint64_t *)(*(_QWORD *)v102 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v29)
    v34 = v30;
  else
    v34 = 4;
  sub_100320440(v34, v91);
  sub_1001E4804(buf);
  LOBYTE(v108[0]) = 0;
  v35 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAdaptiveAnchorsEnable", 0x8000100u, kCFAllocatorNull);
  v36 = a6;
  v37 = sub_1001E48E4(*(uint64_t *)buf, (uint64_t)v35, (BOOL *)v108);
  CFRelease(v35);
  v38 = LOBYTE(v108[0]);
  v39 = *(std::__shared_weak_count **)v102;
  if (*(_QWORD *)v102)
  {
    v40 = (unint64_t *)(*(_QWORD *)v102 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v38)
    v42 = 0;
  else
    v42 = v37;
  if ((v42 & 1) != 0)
  {
    v43 = 0;
    buf[0] = 0;
    v44 = v36;
  }
  else
  {
    sub_1002708EC((uint64_t)buf, v11);
    v44 = v36;
    v106 = *(_OWORD *)(a7 + 56);
    v43 = 1;
  }
  v107 = v43;
  sub_1002984A8(v34);
  if (v107)
    sub_100067AC4((uint64_t)buf);
  sub_1001E4804(&v87);
  LODWORD(v90[0]) = 0;
  v45 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLinkageFunction", 0x8000100u, kCFAllocatorNull);
  v46 = sub_1000B1180((uint64_t)v87, (uint64_t)v45, v90);
  CFRelease(v45);
  v47 = v90[0];
  v48 = (std::__shared_weak_count *)__p;
  if (__p)
  {
    v49 = (unint64_t *)((char *)__p + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v46)
    v51 = v47;
  else
    v51 = 1;
  sub_100298520(v51, buf);
  v52 = (uint64_t)v109;
  if (!v109)
    goto LABEL_53;
  if (v109 != v108)
  {
    v52 = (*(uint64_t (**)(void))(*v109 + 16))();
LABEL_53:
    v100 = (_BYTE *)v52;
    goto LABEL_55;
  }
  v100 = v99;
  (*(void (**)(_QWORD *, _BYTE *))(v108[0] + 24))(v108, v99);
LABEL_55:
  sub_1002B42F4((uint64_t *)&v87, a1, (uint64_t)v99);
  v53 = (uint64_t)v105;
  if (!v105)
  {
LABEL_58:
    v98 = (_BYTE *)v53;
    goto LABEL_60;
  }
  if (v105 != buf)
  {
    v53 = (*(uint64_t (**)(void))(*(_QWORD *)v105 + 16))();
    goto LABEL_58;
  }
  v98 = v97;
  (*(void (**)(uint8_t *, _BYTE *))(*(_QWORD *)buf + 24))(buf, v97);
LABEL_60:
  sub_10025F258((char **)v90, (unint64_t *)&v87, (uint64_t)v97);
  v54 = v98;
  if (v98 == v97)
  {
    v56 = 4;
    v54 = v97;
    v55 = v79;
  }
  else
  {
    v55 = v79;
    if (!v98)
      goto LABEL_65;
    v56 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v56))();
LABEL_65:
  if (__p)
  {
    v89 = __p;
    operator delete(__p);
  }
  v57 = v100;
  if (v100 == v99)
  {
    v58 = 4;
    v57 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_72;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_72:
  v59 = vcvtmd_u64_f64(v95 * (double)v44);
  if (v94 <= v59)
    v60 = v59;
  else
    v60 = v94;
  v87 = 0;
  __p = 0;
  v89 = 0;
  v61 = sub_10025F25C((uint64_t *)v90, &v87, &v92, v60, v55, v96);
  sub_1002F006C(v61, v86);
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v62 = sub_10025F680((uint64_t *)v90, &v83, 0, v16, 0.0);
  v80 = 0;
  sub_100274CE0(&v81, v62, &v80);
  v63 = v83;
  v64 = (unint64_t *)v81;
  if (v84 != v83)
  {
    v65 = 0;
    v66 = (v84 - (_BYTE *)v83) >> 3;
    if (v66 <= 1)
      v66 = 1;
    do
    {
      v64[v63[v65]] = v65;
      ++v65;
    }
    while (v66 != v65);
  }
  v67 = v82;
  while (v64 != v67)
  {
    v68 = *((_QWORD *)v87 + *v64);
    v69 = sub_100345F70(a1, *v64);
    sub_1002EEA94(a7, v69, (__int128 *)v86[0] + v68, a5);
    ++v64;
  }
  v70 = v87;
  if (__p != v87)
  {
    v71 = 0;
    do
    {
      v72 = v70[v71];
      v73 = v86[0];
      v74 = sub_100345F70(a1, v71);
      sub_1002EEBC4(a7, &v73[v72], (_OWORD *)(v74 + 40));
      ++v71;
      v70 = v87;
    }
    while (v71 < ((_BYTE *)__p - (_BYTE *)v87) >> 3);
  }
  if (v81)
  {
    v82 = (unint64_t *)v81;
    operator delete(v81);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87)
  {
    __p = v87;
    operator delete(v87);
  }
  if (v90[0])
  {
    v90[1] = v90[0];
    operator delete(v90[0]);
  }
  v75 = v105;
  if (v105 == buf)
  {
    v76 = 4;
    v75 = buf;
  }
  else
  {
    if (!v105)
      goto LABEL_100;
    v76 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v75 + 8 * v76))();
LABEL_100:
  v77 = v109;
  if (v109 == v108)
  {
    v78 = 4;
    v77 = v108;
  }
  else
  {
    if (!v109)
      goto LABEL_105;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_105:
  sub_10011A56C(v91);
  if (v92)
  {
    v93 = (char *)v92;
    operator delete(v92);
  }
}

void sub_1002B40A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  sub_10011A56C(&a31);
  sub_10026E1B8(v42);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002B42C8(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t *sub_1002B42F4(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  _DWORD v20[10];
  __int128 v21;
  uint64_t v22;
  _BYTE v23[40];
  _BYTE v24[56];
  int v25;
  void *__p;
  void *v27;
  uint64_t v28;

  a1[1] = 0;
  a1[2] = 0;
  v6 = a1 + 1;
  a1[3] = 0;
  v7 = sub_100345FC0(a2);
  *a1 = v7;
  v20[0] = 0;
  sub_100274BA0((uint64_t)v6, (unint64_t)(v7 + v7 * v7) >> 1, v20);
  if (*a1)
  {
    v8 = 0;
    do
    {
      v9 = sub_100345F70(a2, v8);
      sub_100271670((uint64_t)v20, v9);
      v10 = *(_OWORD *)(v9 + 40);
      v22 = *(_QWORD *)(v9 + 56);
      v21 = v10;
      sub_100271B34((uint64_t)v23, v9 + 64);
      sub_100271DC4((uint64_t)v24, v9 + 104);
      v11 = *(_OWORD *)(v9 + 144);
      v25 = *(_DWORD *)(v9 + 160);
      *(_OWORD *)&v24[40] = v11;
      v27 = 0;
      v28 = 0;
      __p = 0;
      sub_10027205C(&__p, *(const void **)(v9 + 168), *(_QWORD *)(v9 + 176), (uint64_t)(*(_QWORD *)(v9 + 176) - *(_QWORD *)(v9 + 168)) >> 2);
      if (v8)
      {
        for (i = 0; i != v8; ++i)
        {
          v13 = sub_100345F70(a2, i);
          v14 = *(_QWORD *)(a3 + 24);
          if (!v14)
            sub_10025FD1C();
          (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v14 + 48))(v14, v20, v13);
          if (v8 <= i)
            v16 = i;
          else
            v16 = v8;
          if (v8 >= i)
            v17 = i;
          else
            v17 = v8;
          v18 = v15;
          *(float *)(*v6 + 4 * (v17 + ((v16 + v16 * v16) >> 1))) = v18;
        }
      }
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      sub_100067AC4((uint64_t)v24);
      sub_100067AC4((uint64_t)v23);
      sub_100271390((uint64_t)v20);
      ++v8;
    }
    while (v8 < *a1);
  }
  return a1;
}

void sub_1002B44D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B4544(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x26u);
}

void sub_1002B4564(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x26u);
}

void sub_1002B4578(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_INFO, a4, &a9, 0x26u);
}

BOOL sub_1002B4598()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 248), OS_LOG_TYPE_INFO);
}

uint64_t sub_1002B49E0()
{
  CFStringRef v0;
  unsigned int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsEnabled", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return v1;
  else
    return 0;
}

void sub_1002B4AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002B4AB8(_QWORD *result, void *a2)
{
  _QWORD *v2;

  if (a2)
  {
    v2 = result;
    *(_QWORD *)(result[4] + 80) = a2;
    return _objc_msgSend((id)v2[4], "requestBootstrapWithLastGeofenceStates");
  }
  return result;
}

id sub_1002B4AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "regionMonitor:didGenerateEvent:", a2, a3);
}

id sub_1002B4E10(uint64_t a1)
{
  NSObject *v2;
  id v3;
  unsigned int v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  id v10;
  __int16 v11;
  unsigned int v12;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212BC18);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastEvent"), "identifier"), "UTF8String");
    v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastEvent"), "state");
    v6[0] = 68289539;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2081;
    v10 = v3;
    v11 = 1025;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LOI Bridge, generating bootstrap geofence update\", \"Geofence Id\":%{private, location:escape_only}s, \"state\":%{private}d}", (uint8_t *)v6, 0x22u);
  }
  return objc_msgSend(*(id *)(a1 + 40), "generateGeofenceUpdateToClient:", objc_msgSend(*(id *)(a1 + 32), "lastEvent"));
}

uint64_t sub_1002B5758(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, id))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 64) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), 0, objc_msgSend(*(id *)(a1 + 32), "generateLocationManagerNotAvailableError"));
}

uint64_t sub_1002B5790(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  NSErrorUserInfoKey v6;
  const __CFString *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212BC18);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"fetchPlaceInferenceAtCurrentLocation, timed out waiting for fetching place inference, this shouldn't happen\"}", buf, 0x12u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212BC18);
  }
  v3 = qword_1022A00F8;
  if (os_signpost_enabled((os_log_t)qword_1022A00F8))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fetchPlaceInferenceAtCurrentLocation, timed out waiting for fetching place inference, this shouldn't happen", "{\"msg%{public}.0s\":\"fetchPlaceInferenceAtCurrentLocation, timed out waiting for fetching place inference, this shouldn't happen\"}", buf, 0x12u);
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidateFetchPlaceInferenceTimer");
  v4 = objc_alloc((Class)NSError);
  v6 = NSLocalizedDescriptionKey;
  v7 = CFSTR("Request to fetch place inference timed out");
  return (*(uint64_t (**)(_QWORD, _QWORD, id))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 64) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), 0, objc_msgSend(v4, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, 0, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1)));
}

uint64_t sub_1002B5984(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t buf;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;

  objc_msgSend(*(id *)(a1 + 32), "invalidateFetchPlaceInferenceTimer");
  v14 = a3;
  if (a3)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212BC18);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289283;
      v21 = 2082;
      v22 = "";
      v23 = 2113;
      v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"fetchPlaceInferenceAtCurrentLocation, failed to request place inference, we will start leeching and wait for next location update\", \"Error Reason\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v16;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v16 != v9)
            objc_enumerationMutation(a2);
          v11 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v10);
          if (qword_1022A00F0 != -1)
            dispatch_once(&qword_1022A00F0, &stru_10212BC18);
          v12 = qword_1022A00F8;
          if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
          {
            buf = 68289283;
            v21 = 2082;
            v22 = "";
            v23 = 2113;
            v24 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"fetchPlaceInferenceAtCurrentLocation, received Place Inference\", \"PI\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
          }
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v8);
    }
  }
  return (*(uint64_t (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 64) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), a2, v14);
}

uint64_t sub_1002B5BE8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[4] + 64) + 16))(*(_QWORD *)(a1[4] + 64), 0, a1[5], a1[6]);
}

uint64_t sub_1002B5D4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 64) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), 0, *(_QWORD *)(a1 + 40));
}

id sub_1002B5D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  _QWORD v6[7];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002B5DC0;
  v6[3] = &unk_10212BBA8;
  v6[4] = a2;
  v6[5] = v3;
  v6[6] = a3;
  return objc_msgSend(v4, "async:", v6);
}

uint64_t sub_1002B5DC0(uint64_t a1)
{
  void *v2;
  __CFString *v3;
  NSObject *v4;
  id v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  id v13;

  v2 = *(void **)(a1 + 32);
  if (v2)
    v3 = (__CFString *)objc_msgSend(v2, "componentsJoinedByString:", CFSTR(","));
  else
    v3 = &stru_1021D8FB8;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212BC18);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "count");
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v5;
    v12 = 2082;
    v13 = -[__CFString UTF8String](v3, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LOI Bridge, received LOI Ids from CLRoutineMonitor\", \"LOI ID Count\":%{public}ld, \"LOI List\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x26u);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 64) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1002B6274(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[4] + 64) + 40))(*(_QWORD *)(a1[4] + 64), a1[5], a1[6]);
}

void sub_1002B6554()
{
  CFStringRef v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  sub_1001E4804(&v5);
  v4 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsCustomLoiGeofenceRadius", 0x8000100u, kCFAllocatorNull);
  sub_1001FD9FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1002B661C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B6800(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, id))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 64) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), 0, objc_msgSend(*(id *)(a1 + 32), "generateLocationManagerNotAvailableError"));
}

uint64_t sub_1002B6AC4(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[4] + 64) + 48))(*(_QWORD *)(a1[4] + 64), a1[5], a1[7], a1[8], a1[6]);
}

uint64_t sub_1002B6B70(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[4] + 64) + 64))(*(_QWORD *)(a1[4] + 64), a1[5], a1[6]);
}

uint64_t sub_1002B6E80(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[4] + 64) + 32))(*(_QWORD *)(a1[4] + 64), a1[5], a1[6]);
}

void sub_1002B7304(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1002B7330(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  signed __int8 *v5;
  int v6;
  signed __int8 v7;
  int v8;
  uint64_t v9;
  signed __int8 v10;
  BOOL v11;
  signed __int8 v12;
  char v13;
  int v14;
  int v15;
  uint64_t v17;

  if (a2 == a3)
    goto LABEL_32;
  v5 = (signed __int8 *)(a2 + 1);
  v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v5 = (signed __int8 *)(a2 + 2);
    v7 = a2[1];
  }
  else
  {
    v7 = *a2;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    do
    {
      if ((_DWORD)v9 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3)
            goto LABEL_32;
          v8 = 1;
LABEL_22:
          v12 = *v5++;
          v7 = v12;
          goto LABEL_24;
        }
        v8 = 0;
      }
      else
      {
        v11 = (v9 & 0x7FFFFFFD) == 8 || (_DWORD)v9 == 6;
        if (v11 && ((v8 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3)
            goto LABEL_32;
          goto LABEL_22;
        }
      }
LABEL_24:
      v13 = sub_100268F2C(a1, v7);
      *((_BYTE *)&v17 + v9) = v13;
      if (v5 == (signed __int8 *)a3)
        goto LABEL_32;
      v14 = *v5++;
      v7 = v14;
      *((_BYTE *)&v17 + v9++) = sub_100268F2C(a1, v14) | (16 * v13);
    }
    while (!v9);
    if (v9 == 16)
      break;
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v10 = *v5++;
    v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_100268EC8();
  }
  return v17;
}

uint64_t sub_1002B74CC()
{
  sub_1015A2E04(&qword_1023010F0, "/System/Library/LocationBundles/MicroLocation.bundle");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023010F0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102301108, "/var/root/Library/Caches/locationd/");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102301108, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102301120, "CLMicroLocationRegionMonitor");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102301120, (void *)&_mh_execute_header);
}

void sub_1002B7570(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  *(_QWORD *)&v18 = a2;
  v6 = sub_1002B77AC(a1, a2, (uint64_t)&unk_101B9EB60, (_OWORD **)&v18);
  *a4 = 0;
  a4[1] = 0;
  v7 = (std::__shared_weak_count *)v6[5];
  if (!v7 || (v8 = std::__shared_weak_count::lock(v7), (a4[1] = (uint64_t)v8) == 0) || (v9 = v6[4], (*a4 = v9) == 0))
  {
    sub_1002B7A78(a3, &v18);
    sub_1002B7674((uint64_t)a4, &v18);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v14 = *a4;
    v13 = a4[1];
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 16);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = (std::__shared_weak_count *)v6[5];
    v6[4] = v14;
    v6[5] = v13;
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1002B7660(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B7674(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1002B76D8(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  *a3 = 0;
  a3[192] = 0;
  v4 = sub_1002A1BA8(a1, a2);
  v5 = v4;
  if (v4)
  {
    v6 = (std::__shared_weak_count *)v4[5];
    if (v6)
    {
      v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        v8 = v7;
        v9 = v5[4];
        if (v9)
        {
          sub_1002968B4((uint64_t)a3);
          sub_1002B7BA0((uint64_t)a3, v9);
          a3[192] = 1;
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1002B7788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100261F44((uint64_t)&a9);
  sub_1002967B0(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002B77AC(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0;
  v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_44:
    *v23 = i;
    goto LABEL_45;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1002B7A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_1002B7A30(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1002B7A30(uint64_t a1, _QWORD *__p)
{
  std::__shared_weak_count *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (std::__shared_weak_count *)__p[5];
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *sub_1002B7A78@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xD8uLL);
  result = sub_1002B7AD0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1002B7ABC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002B7AD0(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_10212BC48;
  a1[1] = 0;
  sub_100274594((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1002B7B1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002B7B30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10212BC48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002B7B44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10212BC48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002B7B78(uint64_t a1)
{
  char v2;

  return sub_100271310((uint64_t)&v2, a1 + 24);
}

uint64_t sub_1002B7BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  int v7;

  v4 = sub_100271670(a1, a2);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_100271B34(v4 + 64, a2 + 64);
  sub_100271DC4(a1 + 104, a2 + 104);
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  sub_10027205C((_QWORD *)(a1 + 168), *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  return a1;
}

void sub_1002B7C2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100067AC4(v3);
  sub_100067AC4(v2);
  sub_100271390(v1);
  _Unwind_Resume(a1);
}

void sub_1002B7C60(int a1@<W2>, _DWORD *a2@<X8>)
{
  sub_1002ECF2C(a2);
  *a2 = 2;
  a2[1] = a1;
  operator new();
}

void sub_1002B8330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;

  a39 = &a19;
  sub_10025E1F0((void ***)&a39);
  a39 = &a23;
  sub_10025E1F0((void ***)&a39);
  a39 = &a26;
  sub_10025E1F0((void ***)&a39);
  sub_100271390((uint64_t)&a29);
  v41 = a37;
  a37 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = a36;
  a36 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  sub_10026E1B8(v39);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B8488()
{
  CFStringRef v0;
  unsigned int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsUseKMeansClusterCenters", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return v1;
  else
    return 0;
}

void sub_1002B8548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B8560(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1002B8598(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *p_p;
  const void *v8;
  char *v9;
  std::string *v10;
  std::string __p;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  p_p = &__p;
  sub_100259584((uint64_t)&__p, v6 + 2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(p_p, v8, v6);
  }
  strcpy((char *)p_p + v6, "--");
  v9 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v9 + 29) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  sub_100261F9C(a2, v9);
  v10 = std::string::append(&__p, v9, 0x24uLL);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  operator delete(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1002B86A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002B86D0(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  char *size;
  std::string::size_type v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  char *v9;
  int v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  std::string __p;
  void *v17[2];
  unsigned __int8 v18;
  char v19;
  std::string v20;

  sub_1015A2E04(v17, "--");
  size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0)
    v5 = (std::string::size_type)a1;
  else
    v5 = a1->__r_.__value_.__r.__words[0];
  if ((v18 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (int64_t)v17[1];
  if (v7)
  {
    if ((char)size < 0)
      size = (char *)a1->__r_.__value_.__l.__size_;
    if ((uint64_t)size >= v7)
    {
      v9 = &size[v5];
      v10 = *(char *)v6;
      v11 = (void *)v5;
      do
      {
        v12 = &size[-v7];
        if (v12 == (char *)-1)
          break;
        v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
        if (!v13)
          break;
        v14 = v13;
        if (!memcmp(v13, v6, v7))
        {
          if (v14 != v9)
          {
            v8 = (int64_t)&v14[-v5];
            if (&v14[-v5] != (char *)-1)
              goto LABEL_16;
          }
          break;
        }
        v11 = v14 + 1;
        size = (char *)(v9 - (v14 + 1));
      }
      while ((uint64_t)size >= v7);
    }
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    v8 = 0;
LABEL_16:
    std::string::basic_string(&v20, a1, v8 + v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
    __p = v20;
    sub_100357708((uint64_t)&__p, (uint64_t)&v20);
    if (v20.__r_.__value_.__s.__data_[16])
    {
      *a2 = __p;
      a2[1].__r_.__value_.__s.__data_[0] = 1;
    }
    else
    {
      v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2[1].__r_.__value_.__s.__data_[0] = 0;
      if (v15 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((char)v18 < 0)
    operator delete(v17[0]);
}

void sub_1002B888C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1002B88C8(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  char *size;
  std::string::size_type v6;
  int64_t v7;
  std::string::size_type v8;
  char *v9;
  int v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  char v18;

  v4 = __p;
  sub_1015A2E04(__p, "--");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0)
    v6 = (std::string::size_type)a1;
  else
    v6 = a1->__r_.__value_.__r.__words[0];
  if ((v17 & 0x80u) == 0)
  {
    v7 = v17;
  }
  else
  {
    v4 = (void **)__p[0];
    v7 = (int64_t)__p[1];
  }
  if (v7)
  {
    if ((char)size < 0)
      size = (char *)a1->__r_.__value_.__l.__size_;
    if ((uint64_t)size >= v7)
    {
      v9 = &size[v6];
      v10 = *(char *)v4;
      v11 = (void *)v6;
      do
      {
        v12 = &size[-v7];
        if (v12 == (char *)-1)
          break;
        v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
        if (!v13)
          break;
        v14 = v13;
        if (!memcmp(v13, v4, v7))
        {
          if (v14 != v9)
          {
            v8 = (std::string::size_type)&v14[-v6];
            if (&v14[-v6] != (char *)-1)
              goto LABEL_13;
          }
          break;
        }
        v11 = v14 + 1;
        size = (char *)(v9 - (v14 + 1));
      }
      while ((uint64_t)size >= v7);
    }
    std::string::operator=(a2, a1);
  }
  else
  {
    v8 = 0;
LABEL_13:
    std::string::basic_string(&v15, a1, 0, v8, (std::allocator<char> *)&v18);
    *a2 = v15;
  }
  if ((char)v17 < 0)
    operator delete(__p[0]);
}

void sub_1002B8A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002B8A4C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  CFStringRef v10;
  int v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t *v28;
  _BYTE *v29;
  uint64_t v30;
  __int128 *v31;
  char *v32;
  const __CFAllocator *contentsDeallocator;
  void *v34;
  __int128 v35;
  __int128 *v36;
  __int128 *v37;
  void **v38;
  char v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[4];
  _QWORD v43[3];
  _QWORD *v44;
  char v45;
  _BYTE buf[40];
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  uint64_t v53;

  sub_10027E6C8(a1, (uint64_t)a2, &v36);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v30 = a3;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212BCE8);
  v5 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (uint64_t)(a2[1] - *a2) >> 4;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v6;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = 0xEEEEEEEEEEEEEEEFLL * (v37 - v36);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationClientUtils, requireFingerprintsForTriggerUuids, recording entries found for trigger uuids\", \"NumTriggerUUID\":%{public}lu, \"NumEntries\":%{public}lu}", buf, 0x26u);
  }
  v8 = v36;
  v7 = v37;
  if (v36 != v37)
  {
    v32 = (char *)&v35 + 8;
    contentsDeallocator = kCFAllocatorNull;
    v31 = (__int128 *)&v53;
    v28 = &v50;
    v29 = &buf[16];
    *((_QWORD *)&v9 + 1) = 0x8000000000000028;
    v27 = xmmword_101B97FF0;
    *(_QWORD *)&v9 = 68289282;
    v26 = v9;
    while (!*((_BYTE *)v8 + 232))
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212BCE8);
      v18 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error: recording entry does not have trigger UUID", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212BCE8);
        LOWORD(v43[0]) = 0;
        LODWORD(v25) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "Error: recording entry does not have trigger UUID", v43, v25, v26, v27, v28, v29, v30, v31, v32, contentsDeallocator);
        v20 = (char *)v19;
        sub_100512490("Generic", 1, 0, 0, "std::unordered_map<boost::uuids::uuid, CLMicroLocationFingerprint> CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(CLMicroLocationDatabase &, const std::vector<boost::uuids::uuid> &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v8 += 15;
      if (v8 == v7)
        goto LABEL_38;
    }
    v43[0] = off_10212A660;
    v43[1] = sub_10038E2F0;
    v44 = v43;
    v45 = 1;
    if (*((_DWORD *)v8 + 18) == 1)
      sub_1002B97D4(v43, (uint64_t)sub_10038F03C);
    sub_1001E4804(buf);
    LODWORD(v34) = 0;
    v10 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDataSource", 0x8000100u, contentsDeallocator);
    v11 = sub_1000B1180(*(uint64_t *)buf, (uint64_t)v10, &v34);
    CFRelease(v10);
    v12 = v34;
    v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v11)
      v16 = v12;
    else
      v16 = 1;
    v42[0] = off_10212BD18;
    v42[3] = v42;
    if (!v45)
      sub_10028DF3C();
    v17 = (uint64_t)v44;
    if (v44)
    {
      if (v44 == v43)
      {
        v41 = v40;
        (*(void (**)(uint64_t, _QWORD *))(v43[0] + 24))((uint64_t)v43, v40);
LABEL_33:
        v21 = *v8;
        *(_QWORD *)&buf[16] = *((_QWORD *)v8 + 2);
        *(_OWORD *)buf = v21;
        if (*((char *)v8 + 47) < 0)
        {
          sub_100115CE4(&buf[24], *((void **)v8 + 3), *((_QWORD *)v8 + 4));
        }
        else
        {
          v22 = *(__int128 *)((char *)v8 + 24);
          v47 = *((_QWORD *)v8 + 5);
          *(_OWORD *)&buf[24] = v22;
        }
        v23 = v8[3];
        *(_OWORD *)((char *)v48 + 12) = *(__int128 *)((char *)v8 + 60);
        v48[0] = v23;
        sub_1002DF194(&v49);
        v24 = *(__int128 *)((char *)v8 + 216);
        v52 = *((_BYTE *)v8 + 232);
        v51 = v24;
        v35 = 0uLL;
        v34 = 0;
        v38 = &v34;
        v39 = 0;
        v34 = operator new(0xF0uLL);
        *(_QWORD *)&v35 = v34;
        *((_QWORD *)&v35 + 1) = (char *)v34 + 240;
        *(_QWORD *)&v35 = sub_1002B9A90((uint64_t)v32, (__int128 *)buf, v31, (uint64_t)v34);
        sub_100338E28(v16);
      }
      v17 = (*(uint64_t (**)(void))(*v44 + 16))();
    }
    v41 = (_QWORD *)v17;
    goto LABEL_33;
  }
LABEL_38:
  *(_QWORD *)buf = &v36;
  sub_100270C6C((void ***)buf);
}

void sub_1002B91BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  sub_1002B971C(a17);
  a41 = &a28;
  sub_100270C6C((void ***)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B9370(uint64_t a1)
{
  sub_1002DF2E0(a1 + 80);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1002B93A8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  sub_100067AC4(a1 + 120);
  sub_100067AC4(a1 + 80);
  sub_100271390(a1 + 16);
  return a1;
}

void sub_1002B93F4(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  NSObject *v10;
  const char *v11;
  std::string *v12;
  _WORD v13[8];
  std::string __p[68];

  if (*(_BYTE *)(a4 + 24))
  {
    sub_1002B8598(a3, a2, __p);
    if (!*(_BYTE *)(a4 + 24))
      sub_10028DF3C();
    sub_10027D7DC(a1, (uint64_t)__p, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), a5, a6);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212BCE8);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMicroLocationClientUtils, requireServiceLabelEntries, cannot load label entries for unknown LOI", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212BCE8);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A00F8, 16, "CLMicroLocationClientUtils, requireServiceLabelEntries, cannot load label entries for unknown LOI", v13, 2);
      v12 = (std::string *)v11;
      sub_100512490("Generic", 1, 0, 0, "std::vector<CLMicroLocationRecordingLabelsTable::Entry> CLMicroLocationClientUtils::requireServiceLabelEntries(CLMicroLocationDatabase &, const CLMiLoService::ServiceUuid &, const std::string &, const std::optional<CLMiLoService::MiLoLocation> &, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v11);
      if (v12 != __p)
        free(v12);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_1002B95F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void sub_1002B9614(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1002B9640(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  int v7;

  *(_OWORD *)a1 = *a2;
  sub_100271670(a1 + 16, a3);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  sub_100271B34(a1 + 80, a3 + 64);
  sub_100271DC4(a1 + 120, a3 + 104);
  v6 = *(_OWORD *)(a3 + 144);
  v7 = *(_DWORD *)(a3 + 160);
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  sub_10027205C((_QWORD *)(a1 + 184), *(const void **)(a3 + 168), *(_QWORD *)(a3 + 176), (uint64_t)(*(_QWORD *)(a3 + 176) - *(_QWORD *)(a3 + 168)) >> 2);
  return a1;
}

void sub_1002B96E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100067AC4(v3);
  sub_100067AC4(v2);
  sub_100271390(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B971C(uint64_t a1)
{
  void *v2;

  sub_1002B9754(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1002B9754(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1002B9790((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1002B9790(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  sub_100067AC4(a1 + 120);
  sub_100067AC4(a1 + 80);
  return sub_100271390(a1 + 16);
}

_QWORD *sub_1002B97D4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  v6[0] = off_10212A660;
  v6[1] = a2;
  v7 = v6;
  sub_1002B9878(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1002B9878(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1002B99E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1002B99F0()
{
  operator delete();
}

_QWORD *sub_1002B9A04()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_10212BD18;
  return result;
}

void sub_1002B9A28(uint64_t a1, _QWORD *a2)
{
  *a2 = off_10212BD18;
}

uint64_t sub_1002B9A40()
{
  return 0;
}

uint64_t sub_1002B9A48(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002B9A84()
{
}

uint64_t sub_1002B9A90(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_100273D04(a1, v4, v6);
      v6 += 15;
      v4 = v12 + 240;
      v12 += 240;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_1002B9B38((uint64_t)v9);
  return v4;
}

void sub_1002B9B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002B9B38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B9B38(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002B9B6C((uint64_t *)a1);
  return a1;
}

void sub_1002B9B6C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 240;
      sub_100270CF0(v5, v3);
    }
    while (v3 != v4);
  }
}

_QWORD *sub_1002B9BBC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v6 = 0;
  v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0xE0uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v7;
  sub_1002B9E48((uint64_t)(v15 + 2), a3);
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v11 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1002B9ED0((uint64_t)v25, 0);
  return v11;
}

void sub_1002B9E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002B9ED0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B9E48(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10012D080(a1 + 16, (uint64_t *)(a2 + 16));
  v4 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  sub_10012D080(a1 + 80, (uint64_t *)(a2 + 80));
  sub_10012D080(a1 + 120, (uint64_t *)(a2 + 120));
  v5 = *(_OWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v5;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  return a1;
}

void sub_1002B9ED0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1002B9790((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_1002B9F14()
{
  uint64_t result;

  if (qword_102310260)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310260 + 8))(qword_102310260);
  if (qword_102310268)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310268 + 8))(qword_102310268);
  if (qword_102310270)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310270 + 8))(qword_102310270);
  if (qword_102310278)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310278 + 8))(qword_102310278);
  if (qword_102310280)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310280 + 8))(qword_102310280);
  if (qword_102310288)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310288 + 8))(qword_102310288);
  if (qword_102310290)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310290 + 8))(qword_102310290);
  if (qword_102310298)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310298 + 8))(qword_102310298);
  if (qword_1023102A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102A0 + 8))(qword_1023102A0);
  if (qword_1023102A8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102A8 + 8))(qword_1023102A8);
  if (qword_1023102B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102B0 + 8))(qword_1023102B0);
  if (qword_1023102B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102B8 + 8))(qword_1023102B8);
  if (qword_1023102C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102C0 + 8))(qword_1023102C0);
  if (qword_1023102C8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102C8 + 8))(qword_1023102C8);
  if (qword_1023102D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102D0 + 8))(qword_1023102D0);
  if (qword_1023102D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102D8 + 8))(qword_1023102D8);
  if (qword_1023102E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102E0 + 8))(qword_1023102E0);
  if (qword_1023102E8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102E8 + 8))(qword_1023102E8);
  if (qword_1023102F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102F0 + 8))(qword_1023102F0);
  if (qword_1023102F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023102F8 + 8))(qword_1023102F8);
  if (qword_102310300)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310300 + 8))(qword_102310300);
  if (qword_102310308)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310308 + 8))(qword_102310308);
  if (qword_102310310)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310310 + 8))(qword_102310310);
  if (qword_102310318)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310318 + 8))(qword_102310318);
  if (qword_102310320)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310320 + 8))(qword_102310320);
  if (qword_102310328)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310328 + 8))(qword_102310328);
  if (qword_102310330)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310330 + 8))(qword_102310330);
  if (qword_102310338)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310338 + 8))(qword_102310338);
  if (qword_102310340)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310340 + 8))(qword_102310340);
  if (qword_102310348)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310348 + 8))(qword_102310348);
  if (qword_102310350)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310350 + 8))(qword_102310350);
  if (qword_102310358)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310358 + 8))(qword_102310358);
  if (qword_102310360)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310360 + 8))(qword_102310360);
  if (qword_102310368)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310368 + 8))(qword_102310368);
  if (qword_102310370)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310370 + 8))(qword_102310370);
  if (qword_102310378)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310378 + 8))(qword_102310378);
  if (qword_102310380)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310380 + 8))(qword_102310380);
  if (qword_102310388)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310388 + 8))(qword_102310388);
  if (qword_102310390)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310390 + 8))(qword_102310390);
  if (qword_102310398)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310398 + 8))(qword_102310398);
  if (qword_1023103A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103A0 + 8))(qword_1023103A0);
  if (qword_1023103A8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103A8 + 8))(qword_1023103A8);
  if (qword_1023103B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103B0 + 8))(qword_1023103B0);
  if (qword_1023103B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103B8 + 8))(qword_1023103B8);
  if (qword_1023103C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103C0 + 8))(qword_1023103C0);
  if (qword_1023103C8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103C8 + 8))(qword_1023103C8);
  if (qword_1023103D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103D0 + 8))(qword_1023103D0);
  if (qword_1023103D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103D8 + 8))(qword_1023103D8);
  if (qword_1023103E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103E0 + 8))(qword_1023103E0);
  if (qword_1023103E8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103E8 + 8))(qword_1023103E8);
  if (qword_1023103F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103F0 + 8))(qword_1023103F0);
  if (qword_1023103F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023103F8 + 8))(qword_1023103F8);
  if (qword_102310400)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310400 + 8))(qword_102310400);
  if (qword_102310408)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310408 + 8))(qword_102310408);
  if (qword_102310410)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310410 + 8))(qword_102310410);
  if (qword_102310418)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310418 + 8))(qword_102310418);
  if (qword_102310420)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310420 + 8))(qword_102310420);
  if (qword_102310428)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310428 + 8))(qword_102310428);
  if (qword_102310430)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310430 + 8))(qword_102310430);
  if (qword_102310438)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310438 + 8))(qword_102310438);
  if (qword_102310440)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310440 + 8))(qword_102310440);
  if (qword_102310448)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310448 + 8))(qword_102310448);
  if (qword_102310450)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310450 + 8))(qword_102310450);
  if (qword_102310458)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310458 + 8))(qword_102310458);
  if (qword_102310460)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310460 + 8))(qword_102310460);
  result = qword_102310468;
  if (qword_102310468)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102310468 + 8))(qword_102310468);
  return result;
}

void sub_1002BA558(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102301138 & 1) == 0)
  {
    byte_102301138 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", a4);
    operator new();
  }
}

uint64_t sub_1002BB834(uint64_t result)
{
  *(_QWORD *)result = off_10212BD98;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 5;
  *(_QWORD *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_1002BB860(uint64_t result)
{
  *(_DWORD *)(result + 16) = 1;
  *(_QWORD *)result = off_10212BE10;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1002BB884(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10212BE88;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1002BB89C(uint64_t result)
{
  *(_QWORD *)result = off_10212BF00;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 6;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 40) = 1;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

double sub_1002BB8D0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212C0E0;
  *(_QWORD *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

_QWORD *sub_1002BB904(_QWORD *result)
{
  *result = off_10212C158;
  result[1] = 0;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = 0;
  return result;
}

_QWORD *sub_1002BB920(_QWORD *result)
{
  *result = &off_10212C1D0;
  result[1] = 0;
  result[2] = 1;
  result[3] = 0;
  result[4] = 0;
  return result;
}

uint64_t sub_1002BB93C(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10212C248;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 72) = 0;
  *(_WORD *)(result + 96) = 0;
  *(_DWORD *)(result + 100) = 0;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t sub_1002BB978(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_10212C2C0;
  *(_QWORD *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1002BB99C(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_10212C3B0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1002BB9C0(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10212C428;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

_QWORD *sub_1002BB9DC(_QWORD *result)
{
  *result = off_10212C4A0;
  result[1] = 0;
  result[2] = 0;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0;
  return result;
}

uint64_t sub_1002BB9FC(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10212C518;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1002BBA20(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10212C590;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

_QWORD *sub_1002BBA3C(_QWORD *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  *result = off_10212C608;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  return result;
}

uint64_t sub_1002BBA5C(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10212C680;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  return result;
}

double sub_1002BBA84(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10212C6F8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 176) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 192) = 0;
  return result;
}

uint64_t sub_1002BBADC(uint64_t result)
{
  *(_QWORD *)result = off_10212C770;
  *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

double sub_1002BBAF4(_QWORD *a1)
{
  double result;

  *a1 = off_10212C7E8;
  *(_QWORD *)&result = 0x100000001;
  a1[1] = 0x100000001;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[5] = 0;
  return result;
}

double sub_1002BBB1C(_QWORD *a1)
{
  double result;

  *a1 = off_10212C860;
  *(_QWORD *)&result = 0x10000000DLL;
  a1[1] = 0x10000000DLL;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[5] = 0;
  return result;
}

double sub_1002BBB48(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 2;
  *(_QWORD *)(a1 + 32) = 2;
  *(_QWORD *)a1 = off_10212C8D8;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_1002BBB74(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 4;
  *(_QWORD *)(a1 + 16) = 4;
  *(_QWORD *)a1 = off_10212C950;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_1002BBB9C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212C9C8;
  *(_QWORD *)&result = 5;
  *(_QWORD *)(a1 + 8) = 5;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_1002BBBBC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 14;
  *(_QWORD *)(a1 + 32) = 14;
  *(_QWORD *)a1 = off_10212CA40;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_1002BBBE8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212CAB8;
  *(_QWORD *)&result = 7;
  *(_QWORD *)(a1 + 8) = 7;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1002BBC08(uint64_t result)
{
  *(_DWORD *)(result + 64) = 9;
  *(_QWORD *)result = off_10212CB30;
  *(_QWORD *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 72) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 80) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_WORD *)(result + 68) = 0;
  *(_QWORD *)(result + 88) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 96) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 104) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 112) = 0;
  return result;
}

uint64_t sub_1002BBC44(uint64_t result)
{
  *(_DWORD *)(result + 48) = 10;
  *(_QWORD *)result = off_10212CBA8;
  *(_QWORD *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_WORD *)(result + 52) = 0;
  *(_QWORD *)(result + 72) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

double sub_1002BBC78(_QWORD *a1)
{
  double result;

  *a1 = off_10212CC20;
  result = 0.0;
  a1[1] = 0;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = 0;
  return result;
}

double sub_1002BBCA0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_10212CC98;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)&result = 12;
  *(_QWORD *)(a1 + 16) = 12;
  *(_QWORD *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

double sub_1002BBCD4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212CD10;
  *(_QWORD *)&result = 31;
  *(_QWORD *)(a1 + 8) = 31;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_1002BBCF4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212CD88;
  *(_QWORD *)&result = 32;
  *(_QWORD *)(a1 + 8) = 32;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_1002BBD14(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212CE00;
  *(_QWORD *)&result = 33;
  *(_QWORD *)(a1 + 8) = 33;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_1002BBD34(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212CE78;
  *(_QWORD *)&result = 34;
  *(_QWORD *)(a1 + 8) = 34;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_1002BBD54(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212CEF0;
  *(_QWORD *)&result = 35;
  *(_QWORD *)(a1 + 8) = 35;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_1002BBD74(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 36;
  *(_QWORD *)(a1 + 24) = 36;
  *(_QWORD *)a1 = off_10212CF68;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_1002BBDA0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 37;
  *(_QWORD *)(a1 + 24) = 37;
  *(_QWORD *)a1 = off_10212CFE0;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_1002BBDCC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 38;
  *(_QWORD *)(a1 + 24) = 38;
  *(_QWORD *)a1 = off_10212D058;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_1002BBDF8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 39;
  *(_QWORD *)(a1 + 24) = 39;
  *(_QWORD *)a1 = off_10212D0D0;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1002BBE24(uint64_t result)
{
  *(_DWORD *)(result + 16) = 40;
  *(_QWORD *)result = off_10212D148;
  *(_QWORD *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 20) = 0;
  return result;
}

double sub_1002BBE4C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 41;
  *(_QWORD *)(a1 + 24) = 41;
  *(_QWORD *)a1 = off_10212D1C0;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_1002BBE78(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 42;
  *(_QWORD *)(a1 + 40) = 42;
  *(_QWORD *)a1 = off_10212D238;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

double sub_1002BBEA8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 43;
  *(_QWORD *)(a1 + 32) = 43;
  *(_QWORD *)a1 = off_10212D2B0;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_1002BBED4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 44;
  *(_QWORD *)(a1 + 16) = 44;
  *(_QWORD *)a1 = off_10212D328;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_1002BBEFC(_QWORD *a1)
{
  double result;

  *a1 = off_10212D3A0;
  a1[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)&result = 45;
  a1[2] = 45;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = 0;
  a1[5] = 0;
  return result;
}

double sub_1002BBF28(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 46;
  *(_QWORD *)(a1 + 16) = 46;
  *(_QWORD *)a1 = off_10212D418;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_1002BBF50(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212D490;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)&result = 0x10000002FLL;
  *(_QWORD *)(a1 + 24) = 0x10000002FLL;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

double sub_1002BBF84(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 55;
  *(_QWORD *)(a1 + 16) = 55;
  *(_QWORD *)a1 = off_10212D508;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_1002BBFAC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212D5F8;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  *(_WORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return result;
}

double sub_1002BBFEC(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 24) = 48;
  *(_QWORD *)a1 = off_10212D670;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result = 0.0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

double sub_1002BC030(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212D6E8;
  *(_QWORD *)&result = 0x100000031;
  *(_OWORD *)(a1 + 8) = xmmword_101B99F00;
  return result;
}

uint64_t sub_1002BC04C(uint64_t result)
{
  *(_QWORD *)result = off_10212D760;
  *(_DWORD *)(result + 8) = 50;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002BC06C(uint64_t result)
{
  *(_QWORD *)result = off_10212D7D8;
  *(_QWORD *)(result + 8) = 51;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_WORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002BC088(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10212D9B8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1002BC0A0(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10212DA30;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

double sub_1002BC0C0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_QWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = &off_10212DAA8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_1002BC0E0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 2;
  *(_QWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = off_10212DB20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_1002BC10C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212DB98;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  return result;
}

_QWORD *sub_1002BC12C(_QWORD *result)
{
  *result = off_10212DC10;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = 0;
  return result;
}

uint64_t sub_1002BC148(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD *)result;
  v2 = qword_102310268;
  if (!qword_102310268)
  {
    result = sub_1002BA558();
    v2 = qword_102310268;
  }
  v1[2] = v2;
  v3 = qword_102310280;
  if (!qword_102310280)
  {
    result = sub_1002BA558();
    v3 = qword_102310280;
  }
  v1[3] = v3;
  v4 = qword_102310288;
  if (!qword_102310288)
  {
    result = sub_1002BA558();
    v4 = qword_102310288;
  }
  v1[4] = v4;
  v5 = qword_102310290;
  if (!qword_102310290)
  {
    result = sub_1002BA558();
    v5 = qword_102310290;
  }
  v1[5] = v5;
  v6 = qword_102310260;
  if (!qword_102310260)
  {
    result = sub_1002BA558();
    v6 = qword_102310260;
  }
  v1[6] = v6;
  v7 = qword_102310278;
  if (!qword_102310278)
  {
    result = sub_1002BA558();
    v7 = qword_102310278;
  }
  v1[7] = v7;
  return result;
}

uint64_t sub_1002BC1F4(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (_QWORD *)result;
  v2 = qword_102310310;
  if (!qword_102310310)
  {
    result = sub_1002BA558();
    v2 = qword_102310310;
  }
  v1[1] = v2;
  v3 = qword_102310320;
  if (!qword_102310320)
  {
    result = sub_1002BA558();
    v3 = qword_102310320;
  }
  v1[2] = v3;
  v4 = qword_102310328;
  if (!qword_102310328)
  {
    result = sub_1002BA558();
    v4 = qword_102310328;
  }
  v1[3] = v4;
  v5 = qword_102310330;
  if (!qword_102310330)
  {
    result = sub_1002BA558();
    v5 = qword_102310330;
  }
  v1[4] = v5;
  v6 = qword_102310340;
  if (!qword_102310340)
  {
    result = sub_1002BA558();
    v6 = qword_102310340;
  }
  v1[5] = v6;
  v7 = qword_102310348;
  if (!qword_102310348)
  {
    result = sub_1002BA558();
    v7 = qword_102310348;
  }
  v1[6] = v7;
  v8 = qword_102310350;
  if (!qword_102310350)
  {
    result = sub_1002BA558();
    v8 = qword_102310350;
  }
  v1[7] = v8;
  v9 = qword_102310360;
  if (!qword_102310360)
  {
    result = sub_1002BA558();
    v9 = qword_102310360;
  }
  v1[8] = v9;
  v10 = qword_102310318;
  if (!qword_102310318)
  {
    result = sub_1002BA558();
    v10 = qword_102310318;
  }
  v1[9] = v10;
  v11 = qword_102310338;
  if (!qword_102310338)
  {
    result = sub_1002BA558();
    v11 = qword_102310338;
  }
  v1[10] = v11;
  v12 = qword_102310368;
  if (!qword_102310368)
  {
    result = sub_1002BA558();
    v12 = qword_102310368;
  }
  v1[11] = v12;
  v13 = qword_102310370;
  if (!qword_102310370)
  {
    result = sub_1002BA558();
    v13 = qword_102310370;
  }
  v1[12] = v13;
  v14 = qword_102310378;
  if (!qword_102310378)
  {
    result = sub_1002BA558();
    v14 = qword_102310378;
  }
  v1[13] = v14;
  v15 = qword_102310380;
  if (!qword_102310380)
  {
    result = sub_1002BA558();
    v15 = qword_102310380;
  }
  v1[14] = v15;
  v16 = qword_102310388;
  if (!qword_102310388)
  {
    result = sub_1002BA558();
    v16 = qword_102310388;
  }
  v1[15] = v16;
  v17 = qword_102310390;
  if (!qword_102310390)
  {
    result = sub_1002BA558();
    v17 = qword_102310390;
  }
  v1[16] = v17;
  v18 = qword_102310398;
  if (!qword_102310398)
  {
    result = sub_1002BA558();
    v18 = qword_102310398;
  }
  v1[17] = v18;
  v19 = qword_1023103A0;
  if (!qword_1023103A0)
  {
    result = sub_1002BA558();
    v19 = qword_1023103A0;
  }
  v1[18] = v19;
  v20 = qword_1023103A8;
  if (!qword_1023103A8)
  {
    result = sub_1002BA558();
    v20 = qword_1023103A8;
  }
  v1[19] = v20;
  v21 = qword_1023103B0;
  if (!qword_1023103B0)
  {
    result = sub_1002BA558();
    v21 = qword_1023103B0;
  }
  v1[20] = v21;
  v22 = qword_1023103B8;
  if (!qword_1023103B8)
  {
    result = sub_1002BA558();
    v22 = qword_1023103B8;
  }
  v1[21] = v22;
  v23 = qword_1023103C0;
  if (!qword_1023103C0)
  {
    result = sub_1002BA558();
    v23 = qword_1023103C0;
  }
  v1[22] = v23;
  v24 = qword_1023103C8;
  if (!qword_1023103C8)
  {
    result = sub_1002BA558();
    v24 = qword_1023103C8;
  }
  v1[23] = v24;
  v25 = qword_1023103D0;
  if (!qword_1023103D0)
  {
    result = sub_1002BA558();
    v25 = qword_1023103D0;
  }
  v1[24] = v25;
  v26 = qword_1023103D8;
  if (!qword_1023103D8)
  {
    result = sub_1002BA558();
    v26 = qword_1023103D8;
  }
  v1[25] = v26;
  v27 = qword_1023103E0;
  if (!qword_1023103E0)
  {
    result = sub_1002BA558();
    v27 = qword_1023103E0;
  }
  v1[26] = v27;
  v28 = qword_1023103E8;
  if (!qword_1023103E8)
  {
    result = sub_1002BA558();
    v28 = qword_1023103E8;
  }
  v1[27] = v28;
  v29 = qword_102310408;
  if (!qword_102310408)
  {
    result = sub_1002BA558();
    v29 = qword_102310408;
  }
  v1[28] = v29;
  v30 = qword_102310410;
  if (!qword_102310410)
  {
    result = sub_1002BA558();
    v30 = qword_102310410;
  }
  v1[29] = v30;
  v31 = qword_102310418;
  if (!qword_102310418)
  {
    result = sub_1002BA558();
    v31 = qword_102310418;
  }
  v1[30] = v31;
  v32 = qword_102310420;
  if (!qword_102310420)
  {
    result = sub_1002BA558();
    v32 = qword_102310420;
  }
  v1[31] = v32;
  v33 = qword_102310428;
  if (!qword_102310428)
  {
    result = sub_1002BA558();
    v33 = qword_102310428;
  }
  v1[32] = v33;
  v34 = qword_102310430;
  if (!qword_102310430)
  {
    result = sub_1002BA558();
    v34 = qword_102310430;
  }
  v1[33] = v34;
  v35 = qword_102310438;
  if (!qword_102310438)
  {
    result = sub_1002BA558();
    v35 = qword_102310438;
  }
  v1[34] = v35;
  v36 = qword_1023103F0;
  if (!qword_1023103F0)
  {
    result = sub_1002BA558();
    v36 = qword_1023103F0;
  }
  v1[35] = v36;
  return result;
}

uint64_t sub_1002BC558(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (_QWORD *)result;
  v2 = qword_102310310;
  if (!qword_102310310)
  {
    result = sub_1002BA558();
    v2 = qword_102310310;
  }
  v1[2] = v2;
  v3 = qword_102310320;
  if (!qword_102310320)
  {
    result = sub_1002BA558();
    v3 = qword_102310320;
  }
  v1[3] = v3;
  v4 = qword_102310328;
  if (!qword_102310328)
  {
    result = sub_1002BA558();
    v4 = qword_102310328;
  }
  v1[4] = v4;
  v5 = qword_102310330;
  if (!qword_102310330)
  {
    result = sub_1002BA558();
    v5 = qword_102310330;
  }
  v1[5] = v5;
  v6 = qword_102310340;
  if (!qword_102310340)
  {
    result = sub_1002BA558();
    v6 = qword_102310340;
  }
  v1[6] = v6;
  v7 = qword_102310348;
  if (!qword_102310348)
  {
    result = sub_1002BA558();
    v7 = qword_102310348;
  }
  v1[7] = v7;
  v8 = qword_102310350;
  if (!qword_102310350)
  {
    result = sub_1002BA558();
    v8 = qword_102310350;
  }
  v1[8] = v8;
  v9 = qword_102310360;
  if (!qword_102310360)
  {
    result = sub_1002BA558();
    v9 = qword_102310360;
  }
  v1[10] = v9;
  v10 = qword_102310318;
  if (!qword_102310318)
  {
    result = sub_1002BA558();
    v10 = qword_102310318;
  }
  v1[11] = v10;
  v11 = qword_102310338;
  if (!qword_102310338)
  {
    result = sub_1002BA558();
    v11 = qword_102310338;
  }
  v1[12] = v11;
  return result;
}

BOOL sub_1002BC664(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_1002BC674(unsigned int a1)
{
  return (a1 < 0x10) & (0x800Fu >> a1);
}

BOOL sub_1002BC68C(unsigned int a1)
{
  return a1 < 8;
}

BOOL sub_1002BC698(unsigned int a1)
{
  return a1 < 9;
}

uint64_t sub_1002BC6A4(unsigned int a1)
{
  return (a1 < 0x38) & (0xFFFFFF800076B6uLL >> a1);
}

BOOL sub_1002BC6C0(int a1)
{
  return (a1 - 1) < 2;
}

BOOL sub_1002BC6D0(unsigned int a1)
{
  return a1 < 2;
}

BOOL sub_1002BC6DC(unsigned int a1)
{
  return a1 < 6;
}

BOOL sub_1002BC6E8(int a1)
{
  return (a1 - 1) < 0xB;
}

BOOL sub_1002BC6F8(int a1)
{
  return (a1 - 1) < 2 || a1 == 255;
}

uint64_t sub_1002BC714(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_10212BD98;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 5;
  *(_QWORD *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 64) = 0;
  sub_1002BC774(a1, a2);
  return a1;
}

void sub_1002BC760(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_1002BC774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  const std::string *v9;
  std::string *v10;
  int v11;
  uint64_t v12;
  const std::string *v13;
  std::string *v14;
  const std::string *v15;
  std::string *v16;
  char v17;
  _BYTE v18[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v18, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 835);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 64);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    if ((v6 - 1) >= 6)
      sub_1018F1E20();
    *(_DWORD *)(a1 + 64) |= 1u;
    *(_DWORD *)(a1 + 16) = v6;
    v5 = *(_DWORD *)(a2 + 64);
  }
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 64) |= 2u;
    *(_QWORD *)(a1 + 8) = v7;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_DWORD *)(a1 + 20) = v8;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_17:
  v9 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 8u;
  v10 = *(std::string **)(a1 + 24);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v10, v9);
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
LABEL_21:
    v12 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_QWORD *)(a1 + 32) = v12;
    v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0)
        return;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
LABEL_20:
  v11 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_DWORD *)(a1 + 56) = v11;
  v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x20) != 0)
    goto LABEL_21;
LABEL_12:
  if ((v5 & 0x40) == 0)
    goto LABEL_13;
LABEL_22:
  v13 = *(const std::string **)(a2 + 40);
  *(_DWORD *)(a1 + 64) |= 0x40u;
  v14 = *(std::string **)(a1 + 40);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v14, v13);
  if ((*(_DWORD *)(a2 + 64) & 0x80) != 0)
  {
LABEL_25:
    v15 = *(const std::string **)(a2 + 48);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    v16 = *(std::string **)(a1 + 48);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v16, v15);
  }
}

void sub_1002BC9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002BC9C8(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = result[3];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[5];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  v5 = result[6];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    operator delete();
  }
  return result;
}

void sub_1002BCAA8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BD98;
  sub_1002BC9C8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002BCAD8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BD98;
  sub_1002BC9C8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002BCB1C()
{
  operator new();
}

uint64_t sub_1002BCB6C(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(result + 64);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 5;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 32) = 0;
    if ((*(_BYTE *)(result + 64) & 0x40) != 0)
    {
      v3 = *(_QWORD *)(result + 40);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 64) & 0x80) != 0)
    {
      v4 = *(_QWORD *)(result + 48);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_1002BCC2C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  char *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t result;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  void *v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  void *v27;
  unsigned int v28[2];

  v5 = (unint64_t *)(a1 + 32);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v28[0] = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v28);
          if (!(_DWORD)result)
            return result;
          v10 = v28[0];
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v10 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 64) |= 1u;
          *(_DWORD *)(a1 + 16) = v10;
        }
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 17)
        {
          *((_QWORD *)this + 1) = v17 + 1;
          goto LABEL_36;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_26;
LABEL_36:
        *(_QWORD *)v28 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v28) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v28;
        *(_DWORD *)(a1 + 64) |= 2u;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 29)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
LABEL_40:
        v28[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v28) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v28[0];
          v11 = *(_DWORD *)(a1 + 64) | 4;
          *(_DWORD *)(a1 + 64) = v11;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v19 < *((_QWORD *)this + 2) && *v19 == 34)
          {
            *((_QWORD *)this + 1) = v19 + 1;
LABEL_44:
            *(_DWORD *)(a1 + 64) = v11 | 8;
            v20 = *(void **)(a1 + 24);
            if (v20 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
              operator new();
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v20);
            if (!(_DWORD)result)
              return result;
            v21 = (_BYTE *)*((_QWORD *)this + 1);
            v12 = *((_QWORD *)this + 2);
            if ((unint64_t)v21 < v12 && *v21 == 40)
            {
              v13 = v21 + 1;
              *((_QWORD *)this + 1) = v13;
LABEL_50:
              v28[0] = 0;
              if ((unint64_t)v13 >= v12 || *v13 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v28);
                if (!(_DWORD)result)
                  return result;
                v22 = v28[0];
                v23 = (_BYTE *)*((_QWORD *)this + 1);
                v12 = *((_QWORD *)this + 2);
              }
              else
              {
                v22 = *v13;
                v23 = v13 + 1;
                *((_QWORD *)this + 1) = v23;
              }
              *(_DWORD *)(a1 + 56) = v22;
              *(_DWORD *)(a1 + 64) |= 0x10u;
              if ((unint64_t)v23 < v12 && *v23 == 48)
              {
                v14 = v23 + 1;
                *((_QWORD *)this + 1) = v14;
LABEL_58:
                if ((unint64_t)v14 >= v12 || *v14 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
                  if (!(_DWORD)result)
                    return result;
                  v24 = (_BYTE *)*((_QWORD *)this + 1);
                  v12 = *((_QWORD *)this + 2);
                }
                else
                {
                  *v5 = *v14;
                  v24 = v14 + 1;
                  *((_QWORD *)this + 1) = v24;
                }
                v15 = *(_DWORD *)(a1 + 64) | 0x20;
                *(_DWORD *)(a1 + 64) = v15;
                if ((unint64_t)v24 < v12 && *v24 == 58)
                {
                  *((_QWORD *)this + 1) = v24 + 1;
LABEL_66:
                  *(_DWORD *)(a1 + 64) = v15 | 0x40;
                  v25 = *(void **)(a1 + 40);
                  if (v25 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
                    operator new();
                  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v25);
                  if (!(_DWORD)result)
                    return result;
                  v26 = (_BYTE *)*((_QWORD *)this + 1);
                  if ((unint64_t)v26 < *((_QWORD *)this + 2) && *v26 == 66)
                  {
                    *((_QWORD *)this + 1) = v26 + 1;
LABEL_72:
                    *(_DWORD *)(a1 + 64) |= 0x80u;
                    v27 = *(void **)(a1 + 48);
                    if (v27 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
                      operator new();
                    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v27);
                    if (!(_DWORD)result)
                      return result;
                    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      result = 1;
                      *((_BYTE *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_40;
        goto LABEL_26;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        v11 = *(_DWORD *)(a1 + 64);
        goto LABEL_44;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_50;
      case 6u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v14 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_58;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        v15 = *(_DWORD *)(a1 + 64);
        goto LABEL_66;
      case 8u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        goto LABEL_72;
      default:
        v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002BD0A0(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4, *(_QWORD *)(v5 + 24), a2);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 56), a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 32), a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(8, *(_QWORD *)(v5 + 48), a2);
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7, *(_QWORD *)(v5 + 40), a2);
  if ((*(_DWORD *)(v5 + 64) & 0x80) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(8, *(_QWORD *)(v5 + 48), a2);
  return result;
}

uint64_t sub_1002BD1A4(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  int v26;

  LOBYTE(v3) = *(_BYTE *)(a1 + 64);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_55;
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      v4 = 11;
    }
    else if (v6 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v4 = 2;
    }
  }
  else
  {
    v4 = 0;
  }
  if ((v3 & 2) != 0)
    v4 += 9;
  if ((v3 & 4) != 0)
    v5 = v4 + 5;
  else
    v5 = v4;
  if ((v3 & 8) != 0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v3 = *(_DWORD *)(a1 + 64);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    v5 = (v5 + v12 + v8 + 1);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0)
        goto LABEL_18;
      goto LABEL_36;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
  if ((v13 & 0x80000000) != 0)
  {
    v14 = 11;
  }
  else if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v14 = 2;
  }
  v5 = (v14 + v5);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v5 = v5
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
  v3 = *(_DWORD *)(a1 + 64);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0)
      goto LABEL_55;
    goto LABEL_46;
  }
LABEL_37:
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(unsigned __int8 *)(v15 + 23);
  v17 = v16;
  v18 = *(_QWORD *)(v15 + 8);
  if ((v16 & 0x80u) == 0)
    v19 = *(unsigned __int8 *)(v15 + 23);
  else
    v19 = v18;
  if (v19 >= 0x80)
  {
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v19, a2);
    v16 = *(unsigned __int8 *)(v15 + 23);
    v18 = *(_QWORD *)(v15 + 8);
    v3 = *(_DWORD *)(a1 + 64);
    v17 = *(_BYTE *)(v15 + 23);
  }
  else
  {
    v20 = 1;
  }
  if (v17 < 0)
    v16 = v18;
  v5 = (v5 + v20 + v16 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_46:
    v21 = *(_QWORD *)(a1 + 48);
    v22 = *(unsigned __int8 *)(v21 + 23);
    v23 = v22;
    v24 = *(_QWORD *)(v21 + 8);
    if ((v22 & 0x80u) == 0)
      v25 = *(unsigned __int8 *)(v21 + 23);
    else
      v25 = v24;
    if (v25 >= 0x80)
    {
      v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v25, a2);
      v22 = *(unsigned __int8 *)(v21 + 23);
      v24 = *(_QWORD *)(v21 + 8);
      v23 = *(_BYTE *)(v21 + 23);
    }
    else
    {
      v26 = 1;
    }
    if (v23 < 0)
      v22 = v24;
    v5 = (v5 + v26 + v22 + 1);
  }
LABEL_55:
  *(_DWORD *)(a1 + 60) = v5;
  return v5;
}

void sub_1002BD394(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002BC774(a1, (uint64_t)lpsrc);
}

void sub_1002BD3E0(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002BC774(a1, a2);
  }
}

uint64_t sub_1002BD420()
{
  return 1;
}

_QWORD *sub_1002BD428@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.BleLeechedBeacons");
}

uint64_t sub_1002BD438(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_10212BE10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  sub_1002BD490(a1, a2);
  return a1;
}

void sub_1002BD47C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_1002BD490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 1153);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    if ((v6 - 1) >= 6)
      sub_1018F1E6C();
    *(_DWORD *)(a1 + 40) |= 1u;
    *(_DWORD *)(a1 + 16) = v6;
    v5 = *(_DWORD *)(a2 + 40);
  }
  if ((v5 & 2) == 0)
  {
    if ((v5 & 4) == 0)
      goto LABEL_9;
LABEL_14:
    v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = v9;
    v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  v8 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) |= 2u;
  *(_QWORD *)(a1 + 8) = v8;
  v5 = *(_DWORD *)(a2 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_14;
LABEL_9:
  if ((v5 & 8) == 0)
    goto LABEL_10;
LABEL_15:
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) |= 8u;
  *(_QWORD *)(a1 + 24) = v10;
  if ((*(_DWORD *)(a2 + 40) & 0x10) != 0)
  {
LABEL_11:
    v7 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v7;
  }
}

void sub_1002BD5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002BD5C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BE10;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002BD5D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BE10;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002BD608()
{
  operator new();
}

uint64_t sub_1002BD650(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
  {
    *(_DWORD *)(result + 16) = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 28) = 0;
    *(_QWORD *)(result + 20) = 0;
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1002BD674(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned int v21[2];

  v5 = (unint64_t *)(a1 + 24);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v21[0] = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v21);
          if (!(_DWORD)result)
            return result;
          v10 = v21[0];
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v10 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 16) = v10;
        }
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 17)
        {
          *((_QWORD *)this + 1) = v15 + 1;
          goto LABEL_31;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_20;
LABEL_31:
        *(_QWORD *)v21 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v21) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v21;
        *(_DWORD *)(a1 + 40) |= 2u;
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 != 29)
          continue;
        *((_QWORD *)this + 1) = v16 + 1;
LABEL_35:
        v21[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v21) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v21[0];
          *(_DWORD *)(a1 + 40) |= 4u;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          if ((unint64_t)v17 < v11 && *v17 == 32)
          {
            v12 = v17 + 1;
            *((_QWORD *)this + 1) = v12;
LABEL_39:
            if ((unint64_t)v12 >= v11 || *v12 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
              if (!(_DWORD)result)
                return result;
              v18 = (_BYTE *)*((_QWORD *)this + 1);
              v11 = *((_QWORD *)this + 2);
            }
            else
            {
              *v5 = *v12;
              v18 = v12 + 1;
              *((_QWORD *)this + 1) = v18;
            }
            *(_DWORD *)(a1 + 40) |= 8u;
            if ((unint64_t)v18 < v11 && *v18 == 40)
            {
              v13 = v18 + 1;
              *((_QWORD *)this + 1) = v13;
LABEL_47:
              v21[0] = 0;
              if ((unint64_t)v13 >= v11 || *v13 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v21);
                if (!(_DWORD)result)
                  return result;
                v19 = v21[0];
                v20 = (unsigned __int8 *)*((_QWORD *)this + 1);
                v11 = *((_QWORD *)this + 2);
              }
              else
              {
                v19 = *v13;
                v20 = (unsigned __int8 *)(v13 + 1);
                *((_QWORD *)this + 1) = v20;
              }
              *(_DWORD *)(a1 + 32) = v19;
              *(_DWORD *)(a1 + 40) |= 0x10u;
              if (v20 == (unsigned __int8 *)v11
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_35;
        goto LABEL_20;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_39;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_47;
      default:
        v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002BD968(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 32), a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 24), a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 32), a2, a4);
  return result;
}

uint64_t sub_1002BDA18(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v5 = v4 + 5;
    else
      v5 = v4;
    if ((v3 & 8) != 0)
    {
      v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 40);
    }
    if ((v3 & 0x10) != 0)
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v7 & 0x80000000) != 0)
      {
        v8 = 11;
      }
      else if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      }
      else
      {
        v8 = 2;
      }
      v5 = (v8 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_1002BDAE4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002BD490(a1, (uint64_t)lpsrc);
}

void sub_1002BDB30(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002BD490(a1, a2);
  }
}

uint64_t sub_1002BDB70()
{
  return 1;
}

float sub_1002BDB78(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  float result;
  uint64_t v5;

  if (a2 != a1)
  {
    v2 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v2;
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v3;
    result = *(float *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(float *)(a2 + 20) = result;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = v5;
  }
  return result;
}

_QWORD *sub_1002BDBF4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.WiFiRssi");
}

float sub_1002BDC04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 1392);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      result = *(float *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(float *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 24);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(float *)(a2 + 12);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(float *)(a1 + 12) = result;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0)
      return result;
LABEL_7:
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 24) |= 4u;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

void sub_1002BDCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002BDCEC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BE88;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002BDCFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BE88;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002BDD2C()
{
  operator new();
}

uint64_t sub_1002BDD68(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1002BDD80(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_27;
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v14) & 1) == 0)
          return 0;
        a1[2] = v14;
        a1[6] |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 21)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v13 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0)
            return 0;
          a1[3] = v13;
          a1[6] |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 29)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 5)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12) & 1) == 0)
      return 0;
    a1[4] = v12;
    a1[6] |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_1002BDF44(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 24);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v4 + 16), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v4 + 12), a3);
  if ((*(_DWORD *)(v4 + 24) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v4 + 16), a3);
  return result;
}

uint64_t sub_1002BDFBC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0)
      v2 += 5;
    if ((v1 & 4) != 0)
      v1 = v2 + 5;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

float sub_1002BDFF4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1002BDC04(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002BE040()
{
  return 1;
}

_QWORD *sub_1002BE048@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.Direction");
}

uint64_t sub_1002BE058(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_10212BF00;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1002BE0C0(a1, a2);
  return a1;
}

void sub_1002BE0AC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float sub_1002BE0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const std::string *v10;
  std::string *v11;
  int v12;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 1813);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 56);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 16);
      if ((v7 - 1) >= 6)
        sub_1018F1EBC();
      *(_DWORD *)(a1 + 56) |= 1u;
      *(_DWORD *)(a1 + 16) = v7;
      v6 = *(_DWORD *)(a2 + 56);
    }
    if ((v6 & 2) != 0)
    {
      v5 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 56) |= 2u;
      *(_QWORD *)(a1 + 8) = v5;
      v6 = *(_DWORD *)(a2 + 56);
      if ((v6 & 4) == 0)
      {
LABEL_9:
        if ((v6 & 8) == 0)
          goto LABEL_10;
        goto LABEL_19;
      }
    }
    else if ((v6 & 4) == 0)
    {
      goto LABEL_9;
    }
    LODWORD(v5) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 56) |= 4u;
    *(_DWORD *)(a1 + 20) = v5;
    v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 8) == 0)
    {
LABEL_10:
      if ((v6 & 0x10) == 0)
        goto LABEL_11;
      goto LABEL_24;
    }
LABEL_19:
    *(_DWORD *)(a1 + 56) |= 8u;
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      v9 = *(_QWORD *)(qword_102310278 + 24);
    *(float *)&v5 = sub_1002BDC04(v8, v9);
    v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x10) == 0)
    {
LABEL_11:
      if ((v6 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_27;
    }
LABEL_24:
    v10 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    v11 = *(std::string **)(a1 + 32);
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v11, v10);
    v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x20) == 0)
    {
LABEL_12:
      if ((v6 & 0x40) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
LABEL_27:
    v12 = *(_DWORD *)(a2 + 40);
    if ((v12 - 1) >= 2)
      sub_1018F1E94();
    *(_DWORD *)(a1 + 56) |= 0x20u;
    *(_DWORD *)(a1 + 40) = v12;
    v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x40) == 0)
      goto LABEL_14;
LABEL_13:
    LODWORD(v5) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 56) |= 0x40u;
    *(_DWORD *)(a1 + 44) = v5;
    v6 = *(_DWORD *)(a2 + 56);
LABEL_14:
    if ((v6 & 0x80) != 0)
    {
      LODWORD(v5) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 56) |= 0x80u;
      *(_DWORD *)(a1 + 48) = v5;
    }
  }
  return *(float *)&v5;
}

void sub_1002BE2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002BE2F0(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  if ((_QWORD *)qword_102310278 != result)
  {
    result = (_QWORD *)result[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1002BE378(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BF00;
  sub_1002BE2F0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002BE3A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BF00;
  sub_1002BE2F0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002BE3EC()
{
  operator new();
}

uint64_t sub_1002BE444(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(result + 56);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 6;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(result + 24);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 24))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 24) = 0;
        v1 = *(_DWORD *)(result + 56);
      }
    }
    if ((v1 & 0x10) != 0)
    {
      v3 = *(_QWORD *)(result + 32);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 44) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_DWORD *)(result + 40) = 1;
  }
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_1002BE4C4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  char *v12;
  uint64_t result;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _DWORD *v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  _BYTE *v26;
  void *v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_25;
        v32[0] = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
          if (!(_DWORD)result)
            return result;
          v9 = v32[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 56) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 < *((_QWORD *)this + 2) && *v14 == 17)
        {
          *((_QWORD *)this + 1) = v14 + 1;
          goto LABEL_35;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_25;
LABEL_35:
        *(_QWORD *)v32 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v32) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v32;
        *(_DWORD *)(a1 + 56) |= 2u;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 29)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_39:
        v32[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v32) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 20) = v32[0];
        v10 = *(_DWORD *)(a1 + 56) | 4;
        *(_DWORD *)(a1 + 56) = v10;
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 != 34)
          continue;
        *((_QWORD *)this + 1) = v16 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 56) = v10 | 8;
        v17 = *(_DWORD **)(a1 + 24);
        if (!v17)
          operator new();
        v32[0] = 0;
        v18 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32))return 0;
        }
        else
        {
          v32[0] = *v18;
          *((_QWORD *)this + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)this + 14);
        v20 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32[0]);
        if (!sub_1002BDD80(v17, this, v22) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
        v23 = *((_DWORD *)this + 14);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v25 < 0 == v24)
          *((_DWORD *)this + 14) = v25;
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 != 42)
          continue;
        *((_QWORD *)this + 1) = v26 + 1;
LABEL_57:
        *(_DWORD *)(a1 + 56) |= 0x10u;
        v27 = *(void **)(a1 + 32);
        if (v27 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v27);
        if (!(_DWORD)result)
          return result;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v28 >= v11 || *v28 != 48)
          continue;
        v12 = v28 + 1;
        *((_QWORD *)this + 1) = v12;
LABEL_63:
        v32[0] = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
          if (!(_DWORD)result)
            return result;
          v29 = v32[0];
        }
        else
        {
          v29 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (v29 - 1 <= 1)
        {
          *(_DWORD *)(a1 + 56) |= 0x20u;
          *(_DWORD *)(a1 + 40) = v29;
        }
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 != 61)
          continue;
        *((_QWORD *)this + 1) = v30 + 1;
LABEL_73:
        v32[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v32) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 44) = v32[0];
        *(_DWORD *)(a1 + 56) |= 0x40u;
        v31 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v31 >= *((_QWORD *)this + 2) || *v31 != 69)
          continue;
        *((_QWORD *)this + 1) = v31 + 1;
LABEL_77:
        v32[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v32) & 1) != 0)
        {
          *(_DWORD *)(a1 + 48) = v32[0];
          *(_DWORD *)(a1 + 56) |= 0x80u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_39;
        goto LABEL_25;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_25;
        v10 = *(_DWORD *)(a1 + 56);
        goto LABEL_43;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_57;
        goto LABEL_25;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_25;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_63;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_73;
        goto LABEL_25;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_25;
        goto LABEL_77;
      default:
        v7 = TagFallback & 7;
LABEL_25:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002BE99C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 56);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_13:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    v7 = *(_QWORD *)(qword_102310278 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 32), a2);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 40), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, *(float *)(v5 + 48), a3);
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(float *)(v5 + 44), a3);
  if ((*(_DWORD *)(v5 + 56) & 0x80) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, *(float *)(v5 + 48), a3);
  return result;
}

uint64_t sub_1002BEAB0(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  unsigned int v20;

  LOBYTE(v3) = *(_BYTE *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_49;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      v4 = 11;
    }
    else if (v6 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      v4 = 2;
    }
  }
  else
  {
    v4 = 0;
  }
  if ((v3 & 2) != 0)
    v4 += 9;
  if ((v3 & 4) != 0)
    v7 = v4 + 5;
  else
    v7 = v4;
  if ((v3 & 8) != 0)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      v8 = *(_QWORD *)(qword_102310278 + 24);
    v9 = *(unsigned __int8 *)(v8 + 24);
    v10 = (v9 << 31 >> 31) & 5;
    if ((v9 & 2) != 0)
      v10 += 5;
    if ((v9 & 4) != 0)
      v10 += 5;
    if (*(_BYTE *)(v8 + 24))
      v11 = v10;
    else
      v11 = 0;
    *(_DWORD *)(v8 + 20) = v11;
    v7 += v11 + 2;
    v3 = *(_DWORD *)(a1 + 56);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0)
        goto LABEL_44;
      goto LABEL_38;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = v13;
  v15 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v16 = *(unsigned __int8 *)(v12 + 23);
  else
    v16 = v15;
  if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v15 = *(_QWORD *)(v12 + 8);
    v3 = *(_DWORD *)(a1 + 56);
    v14 = *(_BYTE *)(v12 + 23);
  }
  else
  {
    v17 = 1;
  }
  if (v14 < 0)
    v13 = v15;
  v7 += v17 + v13 + 1;
  if ((v3 & 0x20) == 0)
    goto LABEL_44;
LABEL_38:
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v18 & 0x80000000) != 0)
  {
    v19 = 11;
  }
  else if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
    v3 = *(_DWORD *)(a1 + 56);
  }
  else
  {
    v19 = 2;
  }
  v7 += v19;
LABEL_44:
  v20 = v7 + 5;
  if ((v3 & 0x40) == 0)
    v20 = v7;
  if ((v3 & 0x80) != 0)
    result = v20 + 5;
  else
    result = v20;
LABEL_49:
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

float sub_1002BEC40(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1002BE0C0(a1, (uint64_t)lpsrc);
}

float sub_1002BEC8C(uint64_t a1, uint64_t a2)
{
  float result;

  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    return sub_1002BE0C0(a1, a2);
  }
  return result;
}

uint64_t sub_1002BECCC()
{
  return 1;
}

_QWORD *sub_1002BECD4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.UwbRange");
}

void sub_1002BECE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::string *v10;
  std::string *v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 2135);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if ((v6 - 1) >= 6)
        sub_1018F1EE4();
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0)
          goto LABEL_10;
        goto LABEL_14;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }
    v8 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = v8;
    v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0)
        return;
LABEL_15:
      v10 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 0x10u;
      v11 = *(std::string **)(a1 + 24);
      if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v11, v10);
      return;
    }
LABEL_14:
    v9 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 8u;
    *(_DWORD *)(a1 + 32) = v9;
    if ((*(_DWORD *)(a2 + 40) & 0x10) == 0)
      return;
    goto LABEL_15;
  }
}

void sub_1002BEE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BEE54(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

void sub_1002BEEB4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BF78;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002BEEE4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BF78;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002BEF28()
{
  operator new();
}

uint64_t sub_1002BEF74(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 2;
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 0x10) != 0)
    {
      v2 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1002BEFC8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  void *v16;
  unsigned int v17[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v17[0] = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v17);
          if (!(_DWORD)result)
            return result;
          v9 = v17[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 17)
        {
          *((_QWORD *)this + 1) = v12 + 1;
          goto LABEL_30;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_20;
LABEL_30:
        *(_QWORD *)v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v17) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v17;
        *(_DWORD *)(a1 + 40) |= 2u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 29)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_34:
        v17[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v17) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 20) = v17[0];
        *(_DWORD *)(a1 + 40) |= 4u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 37)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_38:
        v17[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v17) & 1) != 0)
        {
          *(_DWORD *)(a1 + 32) = v17[0];
          v10 = *(_DWORD *)(a1 + 40) | 8;
          *(_DWORD *)(a1 + 40) = v10;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 42)
          {
            *((_QWORD *)this + 1) = v15 + 1;
LABEL_42:
            *(_DWORD *)(a1 + 40) = v10 | 0x10;
            v16 = *(void **)(a1 + 24);
            if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
              operator new();
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
            if (!(_DWORD)result)
              return result;
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_34;
        goto LABEL_20;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_38;
        goto LABEL_20;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_20;
        v10 = *(_DWORD *)(a1 + 40);
        goto LABEL_42;
      default:
        v7 = TagFallback & 7;
LABEL_20:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002BF2AC(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 24), a2);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(float *)(v5 + 32), a3);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 24), a2);
  return result;
}

uint64_t sub_1002BF35C(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 5;
    if ((v3 & 8) != 0)
      v5 = v4 + 5;
    else
      v5 = v4;
    if ((v3 & 0x10) != 0)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v9 = v8;
      v10 = *(_QWORD *)(v7 + 8);
      if ((v8 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v7 + 23);
      else
        v11 = v10;
      if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
        v8 = *(unsigned __int8 *)(v7 + 23);
        v10 = *(_QWORD *)(v7 + 8);
        v9 = *(_BYTE *)(v7 + 23);
      }
      else
      {
        v12 = 1;
      }
      if (v9 < 0)
        v8 = v10;
      v5 = (v5 + v12 + v8 + 1);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_1002BF448(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002BECE4(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002BF494()
{
  return 1;
}

_QWORD *sub_1002BF49C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.WiFiRange");
}

void sub_1002BF4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  const std::string *v11;
  std::string *v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 2478);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    if ((v6 - 1) >= 6)
      sub_1018F1F0C();
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v6;
    v5 = *(_DWORD *)(a2 + 44);
  }
  if ((v5 & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0)
        goto LABEL_10;
LABEL_16:
      v10 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 44) |= 8u;
      *(_DWORD *)(a1 + 32) = v10;
      v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 0x10) == 0)
      {
LABEL_11:
        if ((v5 & 0x20) == 0)
          return;
        goto LABEL_12;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }
  v9 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 20) = v9;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 8) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v5 & 0x10) == 0)
    goto LABEL_11;
LABEL_17:
  v11 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 44) |= 0x10u;
  v12 = *(std::string **)(a1 + 24);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, v11);
  if ((*(_DWORD *)(a2 + 44) & 0x20) != 0)
  {
LABEL_12:
    v7 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v7;
  }
}

void sub_1002BF62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002BF644(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BFF0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002BF674(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212BFF0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002BF6B8()
{
  operator new();
}

uint64_t sub_1002BF700(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 44);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 3;
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 0x10) != 0)
    {
      v2 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 36) = 0;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1002BF758(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;
  char *v15;
  uint64_t result;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  void *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned int v25[2];

  v5 = (unsigned int *)(a1 + 32);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v25[0] = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!(_DWORD)result)
            return result;
          v10 = v25[0];
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v10 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 44) |= 1u;
          *(_DWORD *)(a1 + 16) = v10;
        }
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 17)
        {
          *((_QWORD *)this + 1) = v17 + 1;
          goto LABEL_33;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_22;
LABEL_33:
        *(_QWORD *)v25 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v25) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v25;
        *(_DWORD *)(a1 + 44) |= 2u;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 29)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
LABEL_37:
        v25[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v25) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v25[0];
          *(_DWORD *)(a1 + 44) |= 4u;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          if ((unint64_t)v19 < v11 && *v19 == 32)
          {
            v12 = v19 + 1;
            *((_QWORD *)this + 1) = v12;
LABEL_41:
            if ((unint64_t)v12 >= v11 || *v12 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
              if (!(_DWORD)result)
                return result;
              v20 = (_BYTE *)*((_QWORD *)this + 1);
              v11 = *((_QWORD *)this + 2);
            }
            else
            {
              *v5 = *v12;
              v20 = v12 + 1;
              *((_QWORD *)this + 1) = v20;
            }
            v13 = *(_DWORD *)(a1 + 44) | 8;
            *(_DWORD *)(a1 + 44) = v13;
            if ((unint64_t)v20 < v11 && *v20 == 42)
            {
              *((_QWORD *)this + 1) = v20 + 1;
LABEL_49:
              *(_DWORD *)(a1 + 44) = v13 | 0x10;
              v21 = *(void **)(a1 + 24);
              if (v21 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
                operator new();
              result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v21);
              if (!(_DWORD)result)
                return result;
              v22 = (_BYTE *)*((_QWORD *)this + 1);
              v14 = *((_QWORD *)this + 2);
              if ((unint64_t)v22 < v14 && *v22 == 48)
              {
                v15 = v22 + 1;
                *((_QWORD *)this + 1) = v15;
LABEL_55:
                v25[0] = 0;
                if ((unint64_t)v15 >= v14 || *v15 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
                  if (!(_DWORD)result)
                    return result;
                  v23 = v25[0];
                  v24 = (unsigned __int8 *)*((_QWORD *)this + 1);
                  v14 = *((_QWORD *)this + 2);
                }
                else
                {
                  v23 = *v15;
                  v24 = (unsigned __int8 *)(v15 + 1);
                  *((_QWORD *)this + 1) = v24;
                }
                *(_DWORD *)(a1 + 36) = v23;
                *(_DWORD *)(a1 + 44) |= 0x20u;
                if (v24 == (unsigned __int8 *)v14
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  result = 1;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_37;
        goto LABEL_22;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_41;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_22;
        v13 = *(_DWORD *)(a1 + 44);
        goto LABEL_49;
      case 6u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_55;
      default:
        v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002BFAD8(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 32), a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 36), a2, a4);
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 36), a2, a4);
  return result;
}

uint64_t sub_1002BFBA4(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_38;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      v4 = 11;
    }
    else if (v6 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      v4 = 2;
    }
  }
  else
  {
    v4 = 0;
  }
  if ((v3 & 2) != 0)
    v4 += 9;
  if ((v3 & 4) != 0)
    v5 = v4 + 5;
  else
    v5 = v4;
  if ((v3 & 8) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      v8 = 2;
    }
    v5 = (v8 + v5);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0)
        goto LABEL_38;
      goto LABEL_32;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = v10;
  v12 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v13 = *(unsigned __int8 *)(v9 + 23);
  else
    v13 = v12;
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13, a2);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v12 = *(_QWORD *)(v9 + 8);
    v3 = *(_DWORD *)(a1 + 44);
    v11 = *(_BYTE *)(v9 + 23);
  }
  else
  {
    v14 = 1;
  }
  if (v11 < 0)
    v10 = v12;
  v5 = (v5 + v14 + v10 + 1);
  if ((v3 & 0x20) != 0)
  {
LABEL_32:
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v15 & 0x80000000) != 0)
    {
      v16 = 11;
    }
    else if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    }
    else
    {
      v16 = 2;
    }
    v5 = (v16 + v5);
  }
LABEL_38:
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

void sub_1002BFCEC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002BF4AC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002BFD38()
{
  return 1;
}

_QWORD *sub_1002BFD40@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ATVAirplayBluetoothRssi");
}

void sub_1002BFD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  const std::string *v9;
  std::string *v10;
  int v11;
  int v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 2891);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    if ((v6 - 1) >= 6)
      sub_1018F1F84();
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v6;
    v5 = *(_DWORD *)(a2 + 44);
  }
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(_QWORD *)(a1 + 8) = v7;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0)
        goto LABEL_10;
LABEL_15:
      v9 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 44) |= 8u;
      v10 = *(std::string **)(a1 + 24);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v10, v9);
      v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 0x10) == 0)
      {
LABEL_11:
        if ((v5 & 0x20) == 0)
          return;
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 20) = v8;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_10:
  if ((v5 & 0x10) == 0)
    goto LABEL_11;
LABEL_18:
  v11 = *(_DWORD *)(a2 + 32);
  if ((v11 - 1) >= 0xF)
    sub_1018F1F5C();
  *(_DWORD *)(a1 + 44) |= 0x10u;
  *(_DWORD *)(a1 + 32) = v11;
  if ((*(_DWORD *)(a2 + 44) & 0x20) != 0)
  {
LABEL_20:
    v12 = *(_DWORD *)(a2 + 36);
    if ((v12 - 1) >= 2)
      sub_1018F1F34();
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v12;
  }
}

void sub_1002BFEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002BFF08(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C068;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002BFF38(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C068;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002BFF7C()
{
  operator new();
}

uint64_t sub_1002BFFCC(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 44);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 4;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(result + 32) = 0x100000001;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1002C0024(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t result;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  void *v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v24[0] = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result)
            return result;
          v9 = v24[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 44) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 17)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_32;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_21;
LABEL_32:
        *(_QWORD *)v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v24) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v24;
        *(_DWORD *)(a1 + 44) |= 2u;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 29)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_36:
        v24[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v24) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v24[0];
          v10 = *(_DWORD *)(a1 + 44) | 4;
          *(_DWORD *)(a1 + 44) = v10;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v18 < *((_QWORD *)this + 2) && *v18 == 34)
          {
            *((_QWORD *)this + 1) = v18 + 1;
LABEL_40:
            *(_DWORD *)(a1 + 44) = v10 | 8;
            v19 = *(void **)(a1 + 24);
            if (v19 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
              operator new();
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v19);
            if (!(_DWORD)result)
              return result;
            v20 = (_BYTE *)*((_QWORD *)this + 1);
            v11 = *((_QWORD *)this + 2);
            if ((unint64_t)v20 < v11 && *v20 == 40)
            {
              v12 = v20 + 1;
              *((_QWORD *)this + 1) = v12;
LABEL_46:
              v24[0] = 0;
              if ((unint64_t)v12 >= v11 || *v12 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
                if (!(_DWORD)result)
                  return result;
                v21 = v24[0];
              }
              else
              {
                v21 = *v12;
                *((_QWORD *)this + 1) = v12 + 1;
              }
              if (v21 - 1 <= 0xE)
              {
                *(_DWORD *)(a1 + 44) |= 0x10u;
                *(_DWORD *)(a1 + 32) = v21;
              }
              v22 = (_BYTE *)*((_QWORD *)this + 1);
              v13 = *((_QWORD *)this + 2);
              if ((unint64_t)v22 < v13 && *v22 == 48)
              {
                v14 = v22 + 1;
                *((_QWORD *)this + 1) = v14;
LABEL_56:
                v24[0] = 0;
                if ((unint64_t)v14 >= v13 || *v14 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
                  if (!(_DWORD)result)
                    return result;
                  v23 = v24[0];
                }
                else
                {
                  v23 = *v14;
                  *((_QWORD *)this + 1) = v14 + 1;
                }
                if (v23 - 1 <= 1)
                {
                  *(_DWORD *)(a1 + 44) |= 0x20u;
                  *(_DWORD *)(a1 + 36) = v23;
                }
                if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  result = 1;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_36;
        goto LABEL_21;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_21;
        v10 = *(_DWORD *)(a1 + 44);
        goto LABEL_40;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_46;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_56;
      default:
        v7 = TagFallback & 7;
LABEL_21:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002C03B8(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4, *(_QWORD *)(v5 + 24), a2);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 36), a2, a4);
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 32), a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 36), a2, a4);
  return result;
}

uint64_t sub_1002C0484(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_40;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      v4 = 11;
    }
    else if (v6 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      v4 = 2;
    }
  }
  else
  {
    v4 = 0;
  }
  if ((v3 & 2) != 0)
    v4 += 9;
  if ((v3 & 4) != 0)
    v5 = v4 + 5;
  else
    v5 = v4;
  if ((v3 & 8) != 0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v3 = *(_DWORD *)(a1 + 44);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    v5 = (v5 + v12 + v8 + 1);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0)
        goto LABEL_40;
      goto LABEL_34;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if ((v13 & 0x80000000) != 0)
  {
    v14 = 11;
  }
  else if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    v14 = 2;
  }
  v5 = (v14 + v5);
  if ((v3 & 0x20) != 0)
  {
LABEL_34:
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v15 & 0x80000000) != 0)
    {
      v16 = 11;
    }
    else if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    }
    else
    {
      v16 = 2;
    }
    v5 = (v16 + v5);
  }
LABEL_40:
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

void sub_1002C05D8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002BFD50(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002C0624()
{
  return 1;
}

_QWORD *sub_1002C062C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.HomeKitBluetoothRssi");
}

uint64_t sub_1002C063C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_10212C0E0;
  *(_QWORD *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1002C06A4(a1, a2);
  return a1;
}

void sub_1002C0690(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float sub_1002C06A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  _BYTE v22[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v22, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 3344);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v21, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 72);
  if (!(_BYTE)v6)
    return *(float *)&v5;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 64);
    if ((v7 - 1) >= 6)
      sub_1018F1FAC();
    *(_DWORD *)(a1 + 72) |= 1u;
    *(_DWORD *)(a1 + 64) = v7;
    v6 = *(_DWORD *)(a2 + 72);
  }
  if ((v6 & 2) != 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 72) |= 2u;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = *(_DWORD *)(a2 + 72);
    if ((v6 & 4) == 0)
    {
LABEL_9:
      if ((v6 & 8) == 0)
        goto LABEL_10;
      goto LABEL_21;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 72) |= 4u;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    operator new();
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    v9 = *(_QWORD *)(qword_102310298 + 16);
  sub_1002BD490(v8, v9);
  v6 = *(_DWORD *)(a2 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_10:
    if ((v6 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_21:
  *(_DWORD *)(a1 + 72) |= 8u;
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
    operator new();
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
    v11 = *(_QWORD *)(qword_102310298 + 24);
  sub_1002BECE4(v10, v11);
  v6 = *(_DWORD *)(a2 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_11:
    if ((v6 & 0x20) == 0)
      goto LABEL_12;
LABEL_31:
    *(_DWORD *)(a1 + 72) |= 0x20u;
    v14 = *(_QWORD *)(a1 + 40);
    if (!v14)
      operator new();
    v15 = *(_QWORD *)(a2 + 40);
    if (!v15)
      v15 = *(_QWORD *)(qword_102310298 + 40);
    sub_1002BFD50(v14, v15);
    v6 = *(_DWORD *)(a2 + 72);
    if ((v6 & 0x40) == 0)
    {
LABEL_13:
      if ((v6 & 0x80) == 0)
        return *(float *)&v5;
      goto LABEL_41;
    }
    goto LABEL_36;
  }
LABEL_26:
  *(_DWORD *)(a1 + 72) |= 0x10u;
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
    operator new();
  v13 = *(_QWORD *)(a2 + 32);
  if (!v13)
    v13 = *(_QWORD *)(qword_102310298 + 32);
  sub_1002BF4AC(v12, v13);
  v6 = *(_DWORD *)(a2 + 72);
  if ((v6 & 0x20) != 0)
    goto LABEL_31;
LABEL_12:
  if ((v6 & 0x40) == 0)
    goto LABEL_13;
LABEL_36:
  *(_DWORD *)(a1 + 72) |= 0x40u;
  v16 = *(_QWORD *)(a1 + 48);
  if (!v16)
    operator new();
  v17 = *(_QWORD *)(a2 + 48);
  if (!v17)
    v17 = *(_QWORD *)(qword_102310298 + 48);
  sub_1002BC774(v16, v17);
  if ((*(_DWORD *)(a2 + 72) & 0x80) != 0)
  {
LABEL_41:
    *(_DWORD *)(a1 + 72) |= 0x80u;
    v18 = *(_QWORD *)(a1 + 56);
    if (!v18)
      operator new();
    v19 = *(_QWORD *)(a2 + 56);
    if (!v19)
      v19 = *(_QWORD *)(qword_102310298 + 56);
    *(float *)&v5 = sub_1002BE0C0(v18, v19);
  }
  return *(float *)&v5;
}

void sub_1002C0A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002C0A58(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((_QWORD *)qword_102310298 != result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[5];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[6];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = (_QWORD *)v1[7];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1002C0B04(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C0E0;
  sub_1002C0A58(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002C0B34(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C0E0;
  sub_1002C0A58(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002C0B78()
{
  operator new();
}

uint64_t sub_1002C0BD0(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 72);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 64) = 1;
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 40))
        {
          *(_DWORD *)(v3 + 16) = 1;
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 28) = 0;
          *(_QWORD *)(v3 + 20) = 0;
        }
        *(_DWORD *)(v3 + 40) = 0;
        v2 = *(_DWORD *)(result + 72);
      }
    }
    if ((v2 & 8) != 0)
    {
      result = *(_QWORD *)(result + 24);
      if (result)
      {
        result = sub_1002BEF74(result);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 32);
      if (result)
      {
        result = sub_1002BF700(result);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      result = *(_QWORD *)(v1 + 40);
      if (result)
      {
        result = sub_1002BFFCC(result);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      result = *(_QWORD *)(v1 + 48);
      if (result)
      {
        result = sub_1002BCB6C(result);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      result = *(_QWORD *)(v1 + 56);
      if (result)
        result = sub_1002BE444(result);
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_1002C0C94(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  _BYTE *v59;
  uint64_t v60;
  char *v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68[2];

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_25;
        v68[0] = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68);
          if (!(_DWORD)result)
            return result;
          v9 = v68[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 72) |= 1u;
          *(_DWORD *)(a1 + 64) = v9;
        }
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 17)
        {
          *((_QWORD *)this + 1) = v12 + 1;
          goto LABEL_35;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_25;
LABEL_35:
        *(_QWORD *)v68 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v68) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v68;
        v10 = *(_DWORD *)(a1 + 72) | 2;
        *(_DWORD *)(a1 + 72) = v10;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 26)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_39:
        *(_DWORD *)(a1 + 72) = v10 | 4;
        v14 = *(_QWORD *)(a1 + 16);
        if (!v14)
          operator new();
        v68[0] = 0;
        v15 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)this + 14);
        v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_1002BD674(v14, this, v19) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        v20 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)this + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 != 34)
          continue;
        *((_QWORD *)this + 1) = v23 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 72) |= 8u;
        v24 = *(_QWORD *)(a1 + 24);
        if (!v24)
          operator new();
        v68[0] = 0;
        v25 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v25;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)this + 14);
        v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27)
          return 0;
        v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_1002BEFC8(v24, this, v29) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        v30 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v30, 1);
        v31 = v30 - 1;
        if (v31 < 0 == v21)
          *((_DWORD *)this + 14) = v31;
        v32 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 != 42)
          continue;
        *((_QWORD *)this + 1) = v32 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 72) |= 0x10u;
        v33 = *(_QWORD *)(a1 + 32);
        if (!v33)
          operator new();
        v68[0] = 0;
        v34 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v34 >= *((_QWORD *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v34;
          *((_QWORD *)this + 1) = v34 + 1;
        }
        v35 = *((_DWORD *)this + 14);
        v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36)
          return 0;
        v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_1002BF758(v33, this, v38) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        v39 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v39, 1);
        v40 = v39 - 1;
        if (v40 < 0 == v21)
          *((_DWORD *)this + 14) = v40;
        v41 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v41 >= *((_QWORD *)this + 2) || *v41 != 50)
          continue;
        *((_QWORD *)this + 1) = v41 + 1;
LABEL_81:
        *(_DWORD *)(a1 + 72) |= 0x20u;
        v42 = *(_QWORD *)(a1 + 40);
        if (!v42)
          operator new();
        v68[0] = 0;
        v43 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v43 >= *((_QWORD *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v43;
          *((_QWORD *)this + 1) = v43 + 1;
        }
        v44 = *((_DWORD *)this + 14);
        v45 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v44 + 1;
        if (v44 >= v45)
          return 0;
        v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_1002C0024(v42, this, v47) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
        v48 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v48, 1);
        v49 = v48 - 1;
        if (v49 < 0 == v21)
          *((_DWORD *)this + 14) = v49;
        v50 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v50 >= *((_QWORD *)this + 2) || *v50 != 58)
          continue;
        *((_QWORD *)this + 1) = v50 + 1;
LABEL_95:
        *(_DWORD *)(a1 + 72) |= 0x40u;
        v51 = *(_QWORD *)(a1 + 48);
        if (!v51)
          operator new();
        v68[0] = 0;
        v52 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v52 >= *((_QWORD *)this + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v52;
          *((_QWORD *)this + 1) = v52 + 1;
        }
        v53 = *((_DWORD *)this + 14);
        v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54)
          return 0;
        v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_1002BCC2C(v51, this, v56) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        v57 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v57, 1);
        v58 = v57 - 1;
        if (v58 < 0 == v21)
          *((_DWORD *)this + 14) = v58;
        v59 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v59 >= *((_QWORD *)this + 2) || *v59 != 66)
          continue;
        *((_QWORD *)this + 1) = v59 + 1;
LABEL_109:
        *(_DWORD *)(a1 + 72) |= 0x80u;
        v60 = *(_QWORD *)(a1 + 56);
        if (!v60)
          operator new();
        v68[0] = 0;
        v61 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v61 >= *((_QWORD *)this + 2) || *v61 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v61;
          *((_QWORD *)this + 1) = v61 + 1;
        }
        v62 = *((_DWORD *)this + 14);
        v63 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v62 + 1;
        if (v62 >= v63)
          return 0;
        v64 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_1002BE4C4(v60, this, v65) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v64);
        v66 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v66, 1);
        v67 = v66 - 1;
        if (v67 < 0 == v21)
          *((_DWORD *)this + 14) = v67;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_25;
        v10 = *(_DWORD *)(a1 + 72);
        goto LABEL_39;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_53;
        goto LABEL_25;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_67;
        goto LABEL_25;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_81;
        goto LABEL_25;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_95;
        goto LABEL_25;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_25;
        goto LABEL_109;
      default:
        v7 = TagFallback & 7;
LABEL_25:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002C14F0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  v6 = *(_DWORD *)(result + 72);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 64), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_12:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102310298 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_15:
  v8 = *(_QWORD *)(v5 + 24);
  if (!v8)
    v8 = *(_QWORD *)(qword_102310298 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_18:
  v9 = *(_QWORD *)(v5 + 32);
  if (!v9)
    v9 = *(_QWORD *)(qword_102310298 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_21:
  v10 = *(_QWORD *)(v5 + 40);
  if (!v10)
    v10 = *(_QWORD *)(qword_102310298 + 40);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return result;
    goto LABEL_27;
  }
LABEL_24:
  v11 = *(_QWORD *)(v5 + 48);
  if (!v11)
    v11 = *(_QWORD *)(qword_102310298 + 48);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v11, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) != 0)
  {
LABEL_27:
    v12 = *(_QWORD *)(v5 + 56);
    if (!v12)
      v12 = *(_QWORD *)(qword_102310298 + 56);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v12, a2, a4);
  }
  return result;
}

uint64_t sub_1002C1654(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  uint64_t v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  uint64_t v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  int v19;
  uint64_t v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;
  uint64_t v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  int v27;
  uint64_t v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  unsigned int v30;
  int v31;
  int v32;

  LOBYTE(v3) = *(_BYTE *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_57;
  }
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 10;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      v3 = *(_DWORD *)(a1 + 72);
    }
    else
    {
      v7 = 1;
    }
    v4 = v7 + 1;
  }
  else
  {
    v4 = 0;
  }
  if ((v3 & 2) != 0)
    v5 = v4 + 9;
  else
    v5 = v4;
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102310298 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002BDA18(v8, a2);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    else
      v11 = 1;
    v5 = (v5 + v10 + v11 + 1);
    v3 = *(_DWORD *)(a1 + 72);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_33;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }
  v12 = *(_QWORD *)(a1 + 24);
  if (!v12)
    v12 = *(_QWORD *)(qword_102310298 + 24);
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002BF35C(v12, a2);
  v14 = (int)v13;
  if (v13 >= 0x80)
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
  else
    v15 = 1;
  v5 = (v5 + v14 + v15 + 1);
  v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_33:
  v16 = *(_QWORD *)(a1 + 32);
  if (!v16)
    v16 = *(_QWORD *)(qword_102310298 + 32);
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002BFBA4(v16, a2);
  v18 = (int)v17;
  if (v17 >= 0x80)
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
  else
    v19 = 1;
  v5 = (v5 + v18 + v19 + 1);
  v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_39:
  v20 = *(_QWORD *)(a1 + 40);
  if (!v20)
    v20 = *(_QWORD *)(qword_102310298 + 40);
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C0484(v20, a2);
  v22 = (int)v21;
  if (v21 >= 0x80)
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
  else
    v23 = 1;
  v5 = (v5 + v22 + v23 + 1);
  v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0)
      goto LABEL_57;
    goto LABEL_51;
  }
LABEL_45:
  v24 = *(_QWORD *)(a1 + 48);
  if (!v24)
    v24 = *(_QWORD *)(qword_102310298 + 48);
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002BD1A4(v24, a2);
  v26 = (int)v25;
  if (v25 >= 0x80)
    v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
  else
    v27 = 1;
  v5 = (v5 + v26 + v27 + 1);
  if ((*(_DWORD *)(a1 + 72) & 0x80) != 0)
  {
LABEL_51:
    v28 = *(_QWORD *)(a1 + 56);
    if (!v28)
      v28 = *(_QWORD *)(qword_102310298 + 56);
    v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002BEAB0(v28, a2);
    v31 = (int)v29;
    if (v29 >= 0x80)
      v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, v30);
    else
      v32 = 1;
    v5 = (v5 + v31 + v32 + 1);
  }
LABEL_57:
  *(_DWORD *)(a1 + 68) = v5;
  return v5;
}

float sub_1002C1898(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1002C06A4(a1, (uint64_t)lpsrc);
}

float sub_1002C18E4(uint64_t a1, uint64_t a2)
{
  float result;

  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    return sub_1002C06A4(a1, a2);
  }
  return result;
}

uint64_t sub_1002C1924()
{
  return 1;
}

double sub_1002C192C(uint64_t a1, uint64_t a2)
{
  int v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a1)
  {
    v2 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = v2;
    result = *(double *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(double *)(a2 + 8) = result;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v5;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v6;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v7;
    v8 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = v8;
    v9 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = v9;
  }
  return result;
}

_QWORD *sub_1002C19D8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.Measurement");
}

void sub_1002C19E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  const std::string *v7;
  std::string *v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 3576);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      v8 = *(std::string **)(a1 + 16);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
    }
  }
}

void sub_1002C1ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C1AE4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C158;
  sub_1000257AC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002C1B14(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C158;
  sub_1000257AC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002C1B58()
{
  operator new();
}

uint64_t sub_1002C1B98(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1002C1BE4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  void *v13;
  uint64_t result;

  v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)this + 1) = v12;
        }
        v9 = *(_DWORD *)(a1 + 28) | 1;
        *(_DWORD *)(a1 + 28) = v9;
        if ((unint64_t)v12 < v10 && *v12 == 18)
        {
          *((_QWORD *)this + 1) = v12 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_16;
      v9 = *(_DWORD *)(a1 + 28);
LABEL_24:
      *(_DWORD *)(a1 + 28) = v9 | 2;
      v13 = *(void **)(a1 + 16);
      if (v13 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v13);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002C1D90(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(2, *(_QWORD *)(v5 + 16), a2);
  return result;
}

uint64_t sub_1002C1DE8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  if (*(_BYTE *)(a1 + 28))
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      if ((*(_DWORD *)(a1 + 28) & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v3 = 0;
      if ((*(_BYTE *)(a1 + 28) & 2) == 0)
        goto LABEL_16;
    }
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = v5;
    v7 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = v7;
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v7 = *(_QWORD *)(v4 + 8);
      v6 = *(_BYTE *)(v4 + 23);
    }
    else
    {
      v9 = 1;
    }
    if (v6 < 0)
      v5 = v7;
    v3 = (v3 + v9 + v5 + 1);
  }
  else
  {
    v3 = 0;
  }
LABEL_16:
  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

void sub_1002C1E98(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C19E8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002C1EE4()
{
  return 1;
}

_QWORD *sub_1002C1EEC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.DeviceId");
}

void sub_1002C1EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 3847);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 16);
      if ((v7 - 1) >= 6)
        sub_1018F1FD4();
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 16) = v7;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 4) != 0)
    {
      v8 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a1 + 36) |= 4u;
      *(_DWORD *)(a1 + 20) = v8;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      v9 = *(_QWORD *)(a1 + 24);
      if (!v9)
        operator new();
      v10 = *(_QWORD *)(a2 + 24);
      if (!v10)
        v10 = *(_QWORD *)(qword_1023102A8 + 24);
      sub_1002C19E8(v9, v10);
    }
  }
}

void sub_1002C2038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C2050(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10212C1D0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023102A8 != this)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1002C20A4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1002C2050(a1);
  operator delete();
}

void sub_1002C20C8()
{
  operator new();
}

uint64_t sub_1002C2108(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 36);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 1;
    if ((v2 & 8) != 0)
    {
      result = *(_QWORD *)(result + 24);
      if (result)
        result = sub_1002C1B98(result);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_1002C2148(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  unsigned int v25[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_22;
        *(_QWORD *)v25 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v25) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v25;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 != 16)
          continue;
        v10 = v9 + 1;
        *((_QWORD *)this + 1) = v10;
        goto LABEL_15;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v10 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_15:
        v25[0] = 0;
        if ((unint64_t)v10 >= v8 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!(_DWORD)result)
            return result;
          v11 = v25[0];
        }
        else
        {
          v11 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        if (v11 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 16) = v11;
        }
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 29)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_32:
        v25[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v25) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 20) = v25[0];
        v12 = *(_DWORD *)(a1 + 36) | 4;
        *(_DWORD *)(a1 + 36) = v12;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 34)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_36:
        *(_DWORD *)(a1 + 36) = v12 | 8;
        v16 = *(_QWORD *)(a1 + 24);
        if (!v16)
          operator new();
        v25[0] = 0;
        v17 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25))return 0;
        }
        else
        {
          v25[0] = *v17;
          *((_QWORD *)this + 1) = v17 + 1;
        }
        v18 = *((_DWORD *)this + 14);
        v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 < v19)
        {
          v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25[0]);
          if (sub_1002C1BE4(v16, this, v21))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
              v22 = *((_DWORD *)this + 14);
              v23 = __OFSUB__(v22, 1);
              v24 = v22 - 1;
              if (v24 < 0 == v23)
                *((_DWORD *)this + 14) = v24;
              if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_32;
        goto LABEL_22;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_22;
        v12 = *(_DWORD *)(a1 + 36);
        goto LABEL_36;
      default:
        v7 = TagFallback & 7;
LABEL_22:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002C2470(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
LABEL_8:
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0)
        return result;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0)
    goto LABEL_8;
LABEL_4:
  if ((v6 & 8) == 0)
    return result;
LABEL_9:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023102A8 + 24);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t sub_1002C2514(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  unsigned int v9;
  int v10;
  int v11;

  v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    LODWORD(v4) = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        v6 = 11;
      }
      else if (v5 >= 0x80)
      {
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        v3 = *(_DWORD *)(a1 + 36);
      }
      else
      {
        v6 = 2;
      }
      LODWORD(v4) = v6 + v4;
    }
    if ((v3 & 4) != 0)
      v4 = (v4 + 5);
    else
      v4 = v4;
    if ((v3 & 8) != 0)
    {
      v7 = *(_QWORD *)(a1 + 24);
      if (!v7)
        v7 = *(_QWORD *)(qword_1023102A8 + 24);
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C1DE8(v7, a2);
      v10 = (int)v8;
      if (v8 >= 0x80)
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, v9);
      else
        v11 = 1;
      v4 = (v4 + v10 + v11 + 1);
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_1002C25E0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C1EFC(a1, (uint64_t)lpsrc);
}

void sub_1002C262C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002C1EFC(a1, a2);
  }
}

uint64_t sub_1002C266C()
{
  return 1;
}

_QWORD *sub_1002C2674@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.FingerprintMeasurement");
}

void sub_1002C2684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  const std::string *v21;
  std::string *v22;
  const std::string *v23;
  std::string *v24;
  char v25;
  _BYTE v26[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v26, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 4283);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v25, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 20);
      v8 = *(int *)(a1 + 16);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 24))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), v7 + 1);
          v7 = *(_DWORD *)(a1 + 20);
        }
        *(_DWORD *)(a1 + 20) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v8 + 1;
      sub_1002C06A4(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 72), *(_DWORD *)(a2 + 80) + *(_DWORD *)(a1 + 80));
  if (*(int *)(a2 + 80) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v10);
      v12 = *(_DWORD *)(a1 + 84);
      v13 = *(int *)(a1 + 80);
      if ((int)v13 >= v12)
      {
        if (v12 == *(_DWORD *)(a1 + 88))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 72), v12 + 1);
          v12 = *(_DWORD *)(a1 + 84);
        }
        *(_DWORD *)(a1 + 84) = v12 + 1;
        operator new();
      }
      v14 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 80) = v13 + 1;
      sub_1002C1EFC(*(_QWORD *)(v14 + 8 * v13), v11);
      ++v10;
    }
    while (v10 < *(int *)(a2 + 80));
  }
  v15 = *(_DWORD *)(a2 + 104);
  if ((v15 & 0x1FE) == 0)
    goto LABEL_28;
  if ((v15 & 2) == 0)
  {
    if ((v15 & 4) == 0)
      goto LABEL_22;
LABEL_32:
    v20 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 104) |= 4u;
    *(_QWORD *)(a1 + 40) = v20;
    v15 = *(_DWORD *)(a2 + 104);
    if ((v15 & 8) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  v19 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 104) |= 2u;
  *(_QWORD *)(a1 + 32) = v19;
  v15 = *(_DWORD *)(a2 + 104);
  if ((v15 & 4) != 0)
    goto LABEL_32;
LABEL_22:
  if ((v15 & 8) != 0)
  {
LABEL_23:
    v16 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 104) |= 8u;
    *(_QWORD *)(a1 + 48) = v16;
    v15 = *(_DWORD *)(a2 + 104);
  }
LABEL_24:
  if ((v15 & 0x10) != 0)
  {
    v21 = *(const std::string **)(a2 + 56);
    *(_DWORD *)(a1 + 104) |= 0x10u;
    v22 = *(std::string **)(a1 + 56);
    if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v22, v21);
    v15 = *(_DWORD *)(a2 + 104);
    if ((v15 & 0x20) == 0)
    {
LABEL_26:
      if ((v15 & 0x80) == 0)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  else if ((v15 & 0x20) == 0)
  {
    goto LABEL_26;
  }
  v23 = *(const std::string **)(a2 + 64);
  *(_DWORD *)(a1 + 104) |= 0x20u;
  v24 = *(std::string **)(a1 + 64);
  if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v24, v23);
  v15 = *(_DWORD *)(a2 + 104);
  if ((v15 & 0x80) != 0)
  {
LABEL_27:
    v17 = *(_BYTE *)(a2 + 96);
    *(_DWORD *)(a1 + 104) |= 0x80u;
    *(_BYTE *)(a1 + 96) = v17;
    v15 = *(_DWORD *)(a2 + 104);
  }
LABEL_28:
  if ((v15 & 0x100) != 0)
  {
    v18 = *(_BYTE *)(a2 + 97);
    *(_DWORD *)(a1 + 104) |= 0x100u;
    *(_BYTE *)(a1 + 97) = v18;
  }
}

void sub_1002C2A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C2A3C(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_10212C248;
  v2 = a1 + 9;
  sub_1002C2A88((uint64_t)a1);
  sub_10010C59C(v2);
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

uint64_t sub_1002C2A88(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 56);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = *(_QWORD *)(result + 64);
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  return result;
}

void sub_1002C2B34(uint64_t *a1)
{
  sub_1002C2A3C(a1);
  operator delete();
}

void sub_1002C2B58()
{
  operator new();
}

uint64_t sub_1002C2BB8(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_DWORD *)(result + 104);
  if ((v2 & 0x1FE) != 0)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    if ((v2 & 0x10) != 0)
    {
      v3 = *(_QWORD *)(result + 56);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 104) & 0x20) != 0)
    {
      v4 = *(_QWORD *)(result + 64);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(result + 96) = 0;
    v2 = *(_DWORD *)(result + 104);
  }
  if ((v2 & 0xFF00) != 0)
    *(_BYTE *)(result + 97) = 0;
  if (*(int *)(result + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 80) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 80));
  }
  *(_DWORD *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  return result;
}

uint64_t sub_1002C2CDC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  unint64_t *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  char *v26;
  _BYTE *v27;
  int v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t result;
  _BYTE *v33;
  _BYTE *v34;
  void *v35;
  _BYTE *v36;
  void *v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  _BYTE *v52;
  unsigned int v53;
  unsigned __int8 *v54;
  unsigned int v55[2];

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  v6 = (unint64_t *)(a1 + 32);
  v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 72);
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_45;
        while (1)
        {
          v11 = *(_DWORD *)(a1 + 20);
          v12 = *(int *)(a1 + 16);
          if ((int)v12 >= v11)
          {
            if (v11 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v11 + 1);
              v11 = *(_DWORD *)(a1 + 20);
            }
            *(_DWORD *)(a1 + 20) = v11 + 1;
            operator new();
          }
          v13 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v12 + 1;
          v14 = *(_QWORD *)(v13 + 8 * v12);
          v55[0] = 0;
          v15 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55))return 0;
          }
          else
          {
            v55[0] = *v15;
            *((_QWORD *)this + 1) = v15 + 1;
          }
          v16 = *((_DWORD *)this + 14);
          v17 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v16 + 1;
          if (v16 >= v17)
            return 0;
          v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55[0]);
          if (!sub_1002C0C94(v14, this, v19) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
          v20 = *((_DWORD *)this + 14);
          v21 = __OFSUB__(v20, 1);
          v22 = v20 - 1;
          if (v22 < 0 == v21)
            *((_DWORD *)this + 14) = v22;
          v24 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
          if ((unint64_t)v24 >= v23)
            goto LABEL_2;
          v25 = *v24;
          if (v25 != 10)
            break;
          *((_QWORD *)this + 1) = v24 + 1;
        }
        if (v25 != 16)
          continue;
        v26 = (char *)(v24 + 1);
        *((_QWORD *)this + 1) = v26;
        goto LABEL_29;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_45;
        v26 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
LABEL_29:
        if ((unint64_t)v26 >= v23 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v26;
          v27 = v26 + 1;
          *((_QWORD *)this + 1) = v27;
        }
        *(_DWORD *)(a1 + 104) |= 2u;
        if ((unint64_t)v27 >= v23 || *v27 != 25)
          continue;
        *((_QWORD *)this + 1) = v27 + 1;
LABEL_56:
        *(_QWORD *)v55 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v55) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v55;
        *(_DWORD *)(a1 + 104) |= 4u;
        v33 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v33 >= *((_QWORD *)this + 2) || *v33 != 33)
          continue;
        *((_QWORD *)this + 1) = v33 + 1;
LABEL_60:
        *(_QWORD *)v55 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v55) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)v55;
        v28 = *(_DWORD *)(a1 + 104) | 8;
        *(_DWORD *)(a1 + 104) = v28;
        v34 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v34 < *((_QWORD *)this + 2) && *v34 == 42)
        {
          *((_QWORD *)this + 1) = v34 + 1;
LABEL_64:
          *(_DWORD *)(a1 + 104) = v28 | 0x10;
          v35 = *(void **)(a1 + 56);
          if (v35 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v35);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v36 < *((_QWORD *)this + 2) && *v36 == 50)
          {
            *((_QWORD *)this + 1) = v36 + 1;
LABEL_70:
            *(_DWORD *)(a1 + 104) |= 0x20u;
            v37 = *(void **)(a1 + 64);
            if (v37 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
              operator new();
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v37);
            if (!(_DWORD)result)
              return result;
            v38 = (_BYTE *)*((_QWORD *)this + 1);
            if ((unint64_t)v38 < *((_QWORD *)this + 2) && *v38 == 58)
            {
              do
              {
                *((_QWORD *)this + 1) = v38 + 1;
LABEL_76:
                v39 = *(_DWORD *)(a1 + 84);
                v40 = *(int *)(a1 + 80);
                if ((int)v40 >= v39)
                {
                  if (v39 == *(_DWORD *)(a1 + 88))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v39 + 1);
                    v39 = *(_DWORD *)(a1 + 84);
                  }
                  *(_DWORD *)(a1 + 84) = v39 + 1;
                  operator new();
                }
                v41 = *(_QWORD *)(a1 + 72);
                *(_DWORD *)(a1 + 80) = v40 + 1;
                v42 = *(_QWORD *)(v41 + 8 * v40);
                v55[0] = 0;
                v43 = (char *)*((_QWORD *)this + 1);
                if ((unint64_t)v43 >= *((_QWORD *)this + 2) || *v43 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55))return 0;
                }
                else
                {
                  v55[0] = *v43;
                  *((_QWORD *)this + 1) = v43 + 1;
                }
                v44 = *((_DWORD *)this + 14);
                v45 = *((_DWORD *)this + 15);
                *((_DWORD *)this + 14) = v44 + 1;
                if (v44 >= v45)
                  return 0;
                v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55[0]);
                if (!sub_1002C2148(v42, this, v47) || !*((_BYTE *)this + 36))
                  return 0;
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
                v48 = *((_DWORD *)this + 14);
                v21 = __OFSUB__(v48, 1);
                v49 = v48 - 1;
                if (v49 < 0 == v21)
                  *((_DWORD *)this + 14) = v49;
                v38 = (_BYTE *)*((_QWORD *)this + 1);
                v29 = *((_QWORD *)this + 2);
                if ((unint64_t)v38 >= v29)
                  goto LABEL_2;
                v50 = *v38;
              }
              while (v50 == 58);
              if (v50 == 64)
              {
                v30 = v38 + 1;
                *((_QWORD *)this + 1) = v30;
LABEL_94:
                v55[0] = 0;
                if ((unint64_t)v30 >= v29 || *v30 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
                  if (!(_DWORD)result)
                    return result;
                  v51 = v55[0];
                  v52 = (_BYTE *)*((_QWORD *)this + 1);
                  v29 = *((_QWORD *)this + 2);
                }
                else
                {
                  v51 = *v30;
                  v52 = v30 + 1;
                  *((_QWORD *)this + 1) = v52;
                }
                *(_BYTE *)(a1 + 96) = v51 != 0;
                *(_DWORD *)(a1 + 104) |= 0x80u;
                if ((unint64_t)v52 < v29 && *v52 == 72)
                {
                  v31 = v52 + 1;
                  *((_QWORD *)this + 1) = v31;
LABEL_102:
                  v55[0] = 0;
                  if ((unint64_t)v31 >= v29 || *v31 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
                    if (!(_DWORD)result)
                      return result;
                    v53 = v55[0];
                    v54 = (unsigned __int8 *)*((_QWORD *)this + 1);
                    v29 = *((_QWORD *)this + 2);
                  }
                  else
                  {
                    v53 = *v31;
                    v54 = (unsigned __int8 *)(v31 + 1);
                    *((_QWORD *)this + 1) = v54;
                  }
                  *(_BYTE *)(a1 + 97) = v53 != 0;
                  *(_DWORD *)(a1 + 104) |= 0x100u;
                  if (v54 == (unsigned __int8 *)v29
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + 8) = 0;
                    result = 1;
                    *((_BYTE *)this + 36) = 1;
                    return result;
                  }
                }
              }
            }
          }
        }
        break;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 == 1)
          goto LABEL_56;
        goto LABEL_45;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 == 1)
          goto LABEL_60;
        goto LABEL_45;
      case 5u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_45;
        v28 = *(_DWORD *)(a1 + 104);
        goto LABEL_64;
      case 6u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_70;
        goto LABEL_45;
      case 7u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_76;
        goto LABEL_45;
      case 8u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_45;
        v30 = (char *)*((_QWORD *)this + 1);
        v29 = *((_QWORD *)this + 2);
        goto LABEL_94;
      case 9u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_45;
        v31 = (char *)*((_QWORD *)this + 1);
        v29 = *((_QWORD *)this + 2);
        goto LABEL_102;
      default:
        v10 = TagFallback & 7;
LABEL_45:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002C33D8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 2) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 32), (unint64_t)a2, a4);
    v7 = *(_DWORD *)(v5 + 104);
    if ((v7 & 4) == 0)
    {
LABEL_6:
      if ((v7 & 8) == 0)
        goto LABEL_7;
      goto LABEL_19;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_6;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 40), a3);
  v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 8) == 0)
  {
LABEL_7:
    if ((v7 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(double *)(v5 + 48), a3);
  v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 0x10) == 0)
  {
LABEL_8:
    if ((v7 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 56), a2);
  if ((*(_DWORD *)(v5 + 104) & 0x20) != 0)
LABEL_9:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(6, *(_QWORD *)(v5 + 64), a2);
LABEL_10:
  if (*(int *)(v5 + 80) >= 1)
  {
    v8 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 80));
  }
  v9 = *(_DWORD *)(v5 + 104);
  if ((v9 & 0x80) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 96), (BOOL)a2, a4);
    v9 = *(_DWORD *)(v5 + 104);
  }
  if ((v9 & 0x100) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 97), (BOOL)a2, a4);
  return result;
}

uint64_t sub_1002C3530(uint64_t a1, unint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  int v30;
  int v31;

  v3 = *(_DWORD *)(a1 + 104);
  if ((v3 & 0x1FE) != 0)
  {
    if ((v3 & 2) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 104);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v6 = v4 + 9;
    else
      v6 = v4;
    if ((v3 & 0x10) != 0)
    {
      v7 = *(_QWORD *)(a1 + 56);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v9 = v8;
      v10 = *(_QWORD *)(v7 + 8);
      if ((v8 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v7 + 23);
      else
        v11 = v10;
      if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
        v8 = *(unsigned __int8 *)(v7 + 23);
        v10 = *(_QWORD *)(v7 + 8);
        v3 = *(_DWORD *)(a1 + 104);
        v9 = *(_BYTE *)(v7 + 23);
      }
      else
      {
        v12 = 1;
      }
      if (v9 < 0)
        v8 = v10;
      v6 += v12 + v8 + 1;
    }
    if ((v3 & 0x20) != 0)
    {
      v13 = *(_QWORD *)(a1 + 64);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v15 = v14;
      v16 = *(_QWORD *)(v13 + 8);
      if ((v14 & 0x80u) == 0)
        v17 = *(unsigned __int8 *)(v13 + 23);
      else
        v17 = v16;
      if (v17 >= 0x80)
      {
        v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
        v14 = *(unsigned __int8 *)(v13 + 23);
        v16 = *(_QWORD *)(v13 + 8);
        v3 = *(_DWORD *)(a1 + 104);
        v15 = *(_BYTE *)(v13 + 23);
      }
      else
      {
        v18 = 1;
      }
      if (v15 < 0)
        v14 = v16;
      v6 += v18 + v14 + 1;
    }
    v5 = v6 + 2;
    if ((v3 & 0x80) == 0)
      v5 = v6;
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0x100) != 0)
    v19 = v5 + 2;
  else
    v19 = v5;
  v20 = *(_DWORD *)(a1 + 16);
  v21 = v19 + v20;
  if (v20 >= 1)
  {
    v22 = 0;
    do
    {
      v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C1654(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v22), a2);
      v24 = (int)v23;
      if (v23 >= 0x80)
        v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
      else
        v25 = 1;
      v21 += v24 + v25;
      ++v22;
    }
    while (v22 < *(int *)(a1 + 16));
  }
  v26 = *(_DWORD *)(a1 + 80);
  v27 = (v26 + v21);
  if (v26 >= 1)
  {
    v28 = 0;
    do
    {
      v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C2514(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v28), a2);
      v30 = (int)v29;
      if (v29 >= 0x80)
        v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2);
      else
        v31 = 1;
      v27 = (v30 + v27 + v31);
      ++v28;
    }
    while (v28 < *(int *)(a1 + 80));
  }
  *(_DWORD *)(a1 + 100) = v27;
  return v27;
}

void sub_1002C3714(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C2684(a1, (uint64_t)lpsrc);
}

void sub_1002C3760(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002C2684(a1, a2);
  }
}

uint64_t sub_1002C37A0()
{
  return 1;
}

_QWORD *sub_1002C37A8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.Fingerprint");
}

std::string *sub_1002C37B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *result;
  uint64_t v6;
  const std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  const std::string *v14;
  std::string *v15;
  char v16;
  _BYTE v17[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v17, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 4516);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(const std::string **)(*(_QWORD *)(a2 + 16) + 8 * v6);
      v8 = *(_DWORD *)(a1 + 28);
      v9 = *(int *)(a1 + 24);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a1 + 32))
        {
          result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v8 + 1);
          v8 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v8 + 1;
        v11 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
        v12 = *(_QWORD *)(a1 + 16);
        v13 = *(int *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = v11;
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 24) = v9 + 1;
        v11 = *(std::string **)(v10 + 8 * v9);
      }
      result = std::string::operator=(v11, v7);
      ++v6;
    }
    while (v6 < *(int *)(a2 + 24));
  }
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v14 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 1u;
    v15 = *(std::string **)(a1 + 8);
    if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    return std::string::operator=(v15, v14);
  }
  return result;
}

void sub_1002C3934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C394C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  int *v2;

  *(_QWORD *)a1 = off_10212C2C0;
  v2 = (int *)((char *)a1 + 16);
  sub_100109DDC((uint64_t)a1);
  sub_1002E6188(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002C3990(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1002C394C(a1);
  operator delete();
}

void sub_1002C39B4()
{
  operator new();
}

uint64_t sub_1002C39FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
    }
  }
  result = sub_1002E6138(a1 + 16);
  *(_DWORD *)(a1 + 44) = 0;
  return result;
}

uint64_t sub_1002C3A60(uint64_t result, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *v7;
  int v8;
  void *v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;

  v4 = result;
  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)result;
          *((_DWORD *)this + 8) = result;
          if (!(_DWORD)result)
            return 1;
        }
        else
        {
          v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)v7;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)v7)
            return 1;
        }
        if (v7 >> 3 != 1)
          break;
        v8 = v7 & 7;
        if (v8 != 2)
          goto LABEL_19;
        *(_DWORD *)(v4 + 44) |= 1u;
        v9 = *(void **)(v4 + 8);
        if (v9 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v9);
        if (!(_DWORD)result)
          return result;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 18)
          goto LABEL_22;
      }
      if (v7 >> 3 != 2)
        break;
      v8 = v7 & 7;
      if (v8 != 2)
        goto LABEL_19;
      while (1)
      {
        v11 = *(_DWORD *)(v4 + 28);
        v12 = *(int *)(v4 + 24);
        if ((int)v12 >= v11)
        {
          if (v11 == *(_DWORD *)(v4 + 32))
          {
            result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v11 + 1);
            v11 = *(_DWORD *)(v4 + 28);
          }
          *(_DWORD *)(v4 + 28) = v11 + 1;
          v14 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
          v15 = *(_QWORD *)(v4 + 16);
          v16 = *(int *)(v4 + 24);
          *(_DWORD *)(v4 + 24) = v16 + 1;
          *(_QWORD *)(v15 + 8 * v16) = v14;
        }
        else
        {
          v13 = *(_QWORD *)(v4 + 16);
          *(_DWORD *)(v4 + 24) = v12 + 1;
          v14 = *(_QWORD *)(v13 + 8 * v12);
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v14);
        if (!(_DWORD)result)
          return result;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        v17 = (_BYTE *)*((_QWORD *)this + 2);
        if (v10 >= v17 || *v10 != 18)
          break;
LABEL_22:
        *((_QWORD *)this + 1) = v10 + 1;
      }
      if (v10 == v17 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = v7 & 7;
LABEL_19:
    if (v8 == 4)
      return 1;
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, v7, a3);
    if ((result & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002C3C54(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  if ((*(_BYTE *)(result + 44) & 1) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(1, *(_QWORD *)(result + 8), a2);
  if (*(int *)(v3 + 24) >= 1)
  {
    v4 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(2, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4++), a2);
    while (v4 < *(int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_1002C3CC8(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = v5;
    v7 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = v7;
    if (v8 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v7 = *(_QWORD *)(v4 + 8);
      v9 = v10 + 1;
      v6 = *(_BYTE *)(v4 + 23);
    }
    else
    {
      v9 = 2;
    }
    if (v6 < 0)
      v5 = v7;
    v3 = v9 + v5;
  }
  else
  {
    v3 = 0;
  }
  v11 = *(_DWORD *)(a1 + 24);
  v12 = (v11 + v3);
  if (v11 >= 1)
  {
    for (i = 0; i < v11; ++i)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i);
      v15 = *(unsigned __int8 *)(v14 + 23);
      v16 = v15;
      v17 = *(_QWORD *)(v14 + 8);
      if ((v15 & 0x80u) == 0)
        v18 = *(unsigned __int8 *)(v14 + 23);
      else
        v18 = v17;
      if (v18 >= 0x80)
      {
        v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
        v15 = *(unsigned __int8 *)(v14 + 23);
        v17 = *(_QWORD *)(v14 + 8);
        v11 = *(_DWORD *)(a1 + 24);
        v16 = *(_BYTE *)(v14 + 23);
      }
      else
      {
        v19 = 1;
      }
      if (v16 < 0)
        v15 = v17;
      v12 = (v19 + v12 + v15);
    }
  }
  *(_DWORD *)(a1 + 40) = v12;
  return v12;
}

std::string *sub_1002C3DC4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1002C37B8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002C3E10()
{
  return 1;
}

_QWORD *sub_1002C3E18@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ClusterRecordings");
}

void sub_1002C3E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  int v11;
  const std::string *v12;
  std::string *v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 4875);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 48) |= 1u;
    *(_QWORD *)(a1 + 8) = v6;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 48) |= 2u;
  *(_QWORD *)(a1 + 16) = v7;
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 24);
  if ((v8 - 1) >= 2)
    sub_1018F2024();
  *(_DWORD *)(a1 + 48) |= 4u;
  *(_DWORD *)(a1 + 24) = v8;
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_17:
    v10 = *(_BYTE *)(a2 + 29);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(_BYTE *)(a1 + 29) = v10;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0)
        return;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
LABEL_16:
  v9 = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 48) |= 8u;
  *(_BYTE *)(a1 + 28) = v9;
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_9:
  if ((v5 & 0x20) == 0)
    goto LABEL_10;
LABEL_18:
  v11 = *(_DWORD *)(a2 + 40);
  if ((v11 - 1) >= 6)
    sub_1018F1FFC();
  *(_DWORD *)(a1 + 48) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v11;
  if ((*(_DWORD *)(a2 + 48) & 0x40) != 0)
  {
LABEL_20:
    v12 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x40u;
    v13 = *(std::string **)(a1 + 32);
    if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v13, v12);
  }
}

void sub_1002C3FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C3FEC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

void sub_1002C404C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C338;
  sub_1002C3FEC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002C407C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C338;
  sub_1002C3FEC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002C40C0()
{
  operator new();
}

uint64_t sub_1002C4120(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 48);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 1;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 40) = 1;
    if ((v1 & 0x40) != 0)
    {
      v2 = *(_QWORD *)(result + 32);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_1002C417C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t result;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  void *v25;
  unsigned int v26[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_30;
        *(_QWORD *)v26 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v26) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v26;
        *(_DWORD *)(a1 + 48) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 17)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_30;
LABEL_14:
        *(_QWORD *)v26 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v26) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v26;
        *(_DWORD *)(a1 + 48) |= 2u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 != 24)
          continue;
        v11 = v10 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_20:
        v26[0] = 0;
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v26);
          if (!(_DWORD)result)
            return result;
          v12 = v26[0];
        }
        else
        {
          v12 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v12 - 1 <= 1)
        {
          *(_DWORD *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 24) = v12;
        }
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v18 >= v13 || *v18 != 32)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_40:
        v26[0] = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v26);
          if (!(_DWORD)result)
            return result;
          v19 = v26[0];
          v20 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          v19 = *v14;
          v20 = v14 + 1;
          *((_QWORD *)this + 1) = v20;
        }
        *(_BYTE *)(a1 + 28) = v19 != 0;
        *(_DWORD *)(a1 + 48) |= 8u;
        if ((unint64_t)v20 >= v13 || *v20 != 40)
          continue;
        v15 = v20 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_48:
        v26[0] = 0;
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v26);
          if (!(_DWORD)result)
            return result;
          v21 = v26[0];
          v22 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          v21 = *v15;
          v22 = v15 + 1;
          *((_QWORD *)this + 1) = v22;
        }
        *(_BYTE *)(a1 + 29) = v21 != 0;
        *(_DWORD *)(a1 + 48) |= 0x10u;
        if ((unint64_t)v22 >= v13 || *v22 != 48)
          continue;
        v16 = v22 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_56:
        v26[0] = 0;
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v26);
          if (!(_DWORD)result)
            return result;
          v23 = v26[0];
        }
        else
        {
          v23 = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        if (v23 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 48) |= 0x20u;
          *(_DWORD *)(a1 + 40) = v23;
        }
        v24 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v24 >= *((_QWORD *)this + 2) || *v24 != 58)
          continue;
        *((_QWORD *)this + 1) = v24 + 1;
LABEL_66:
        *(_DWORD *)(a1 + 48) |= 0x40u;
        v25 = *(void **)(a1 + 32);
        if (v25 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v25);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v11 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_20;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_40;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v15 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_48;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v16 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_56;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_30;
        goto LABEL_66;
      default:
        v7 = TagFallback & 7;
LABEL_30:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1002C4588(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7, *(_QWORD *)(v5 + 32), a2);
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 40), a2, a4);
  if ((*(_DWORD *)(v5 + 48) & 0x40) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7, *(_QWORD *)(v5 + 32), a2);
  return result;
}

uint64_t sub_1002C4670(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    if ((v3 & 2) != 0)
      v4 = ((v3 << 31 >> 31) & 9) + 9;
    else
      v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 4) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
      if ((v5 & 0x80000000) != 0)
      {
        v6 = 11;
      }
      else if (v5 >= 0x80)
      {
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        v3 = *(_DWORD *)(a1 + 48);
      }
      else
      {
        v6 = 2;
      }
      v4 += v6;
    }
    v8 = v4 + 2;
    if ((v3 & 8) == 0)
      v8 = v4;
    if ((v3 & 0x10) != 0)
      v7 = v8 + 2;
    else
      v7 = v8;
    if ((v3 & 0x20) != 0)
    {
      v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
      if ((v9 & 0x80000000) != 0)
      {
        v10 = 11;
      }
      else if (v9 >= 0x80)
      {
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
        v3 = *(_DWORD *)(a1 + 48);
      }
      else
      {
        v10 = 2;
      }
      v7 = (v10 + v7);
    }
    if ((v3 & 0x40) != 0)
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = v12;
      v14 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v15 = *(unsigned __int8 *)(v11 + 23);
      else
        v15 = v14;
      if (v15 >= 0x80)
      {
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, a2);
        v12 = *(unsigned __int8 *)(v11 + 23);
        v14 = *(_QWORD *)(v11 + 8);
        v13 = *(_BYTE *)(v11 + 23);
      }
      else
      {
        v16 = 1;
      }
      if (v13 < 0)
        v12 = v14;
      v7 = (v7 + v16 + v12 + 1);
    }
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(a1 + 44) = v7;
  return v7;
}

void sub_1002C4798(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C3E28(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002C47E4()
{
  return 1;
}

_QWORD *sub_1002C47EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.AnchorMetadata");
}

void sub_1002C47FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 5161);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else if ((*(_BYTE *)(a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 2u;
    *(_QWORD *)(a1 + 16) = v7;
    v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_12;
    }
LABEL_11:
    v8 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 32) = v8;
    if ((*(_DWORD *)(a2 + 40) & 8) == 0)
      return;
LABEL_12:
    v9 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 8u;
    v10 = *(std::string **)(a1 + 24);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, v9);
  }
}

void sub_1002C4928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C4940(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C3B0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002C4970(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C3B0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002C49B4()
{
  operator new();
}

uint64_t sub_1002C49FC(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1002C4A4C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  _BYTE *v13;
  int v14;
  uint64_t result;
  void *v16;
  unint64_t v17;

  v5 = (unsigned int *)(a1 + 32);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_26;
        v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v17) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v17;
        *(_DWORD *)(a1 + 40) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 17)
          continue;
        *((_QWORD *)this + 1) = v9 + 1;
        goto LABEL_15;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_26;
LABEL_15:
        v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v17) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 40) |= 2u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 >= v10 || *v11 != 24)
          continue;
        v12 = v11 + 1;
        *((_QWORD *)this + 1) = v12;
LABEL_21:
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)this + 1) = v13;
        }
        v14 = *(_DWORD *)(a1 + 40) | 4;
        *(_DWORD *)(a1 + 40) = v14;
        if ((unint64_t)v13 >= v10 || *v13 != 34)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 40) = v14 | 8;
        v16 = *(void **)(a1 + 24);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v12 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_21;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        v14 = *(_DWORD *)(a1 + 40);
        goto LABEL_34;
      default:
        v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1002C4CD0(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4, *(_QWORD *)(v5 + 24), a2);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 32), a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4, *(_QWORD *)(v5 + 24), a2);
  return result;
}

uint64_t sub_1002C4D64(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 4) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        v7 = 2;
      }
      v5 = (v7 + v5);
    }
    if ((v3 & 8) != 0)
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = *(unsigned __int8 *)(v8 + 23);
      v10 = v9;
      v11 = *(_QWORD *)(v8 + 8);
      if ((v9 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(v8 + 23);
      else
        v12 = v11;
      if (v12 >= 0x80)
      {
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
        v9 = *(unsigned __int8 *)(v8 + 23);
        v11 = *(_QWORD *)(v8 + 8);
        v10 = *(_BYTE *)(v8 + 23);
      }
      else
      {
        v13 = 1;
      }
      if (v10 < 0)
        v9 = v11;
      v5 = (v5 + v13 + v9 + 1);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_1002C4E34(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C47FC(a1, (uint64_t)lpsrc);
}

void sub_1002C4E80(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002C47FC(a1, a2);
  }
}

uint64_t sub_1002C4EC0()
{
  return 1;
}

_QWORD *sub_1002C4EC8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.AnchorAppearance");
}

void sub_1002C4ED8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 5337);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_1002C47FC(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_1002C5038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C5050(uint64_t *a1)
{
  *a1 = (uint64_t)off_10212C428;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_1002C5088(uint64_t *a1)
{
  sub_1002C5050(a1);
  operator delete();
}

void sub_1002C50AC()
{
  operator new();
}

uint64_t sub_1002C50EC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_1002C5144(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(_QWORD *)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_1002C4A4C(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002C5370(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_1002C53CC(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C4D64(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4), a2);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      else
        v7 = 1;
      v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_1002C5448(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C4ED8(a1, (uint64_t)lpsrc);
}

void sub_1002C5494(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 != a1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1);
    sub_1002C4ED8(a1, a2);
  }
}

uint64_t sub_1002C54D4()
{
  return 1;
}

_QWORD *sub_1002C54DC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.anchorAppearancesVector");
}

void sub_1002C54EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const std::string *v8;
  std::string *v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 5564);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_10;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(_QWORD *)(a1 + 16) = v7;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return;
LABEL_10:
    v8 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    v9 = *(std::string **)(a1 + 24);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v9, v8);
  }
}

void sub_1002C55F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C5610(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C4A0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002C5640(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C4A0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002C5684()
{
  operator new();
}

uint64_t sub_1002C56C8(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 36);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1002C5714(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  void *v12;
  uint64_t result;
  unint64_t v14;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_29;
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v14;
        *(_DWORD *)(a1 + 36) |= 1u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 17)
        {
          *((_QWORD *)this + 1) = v10 + 1;
          goto LABEL_17;
        }
      }
      if (v7 == 2)
        break;
      if (v7 == 3)
      {
        v8 = TagFallback & 7;
        if (v8 == 2)
        {
          v9 = *(_DWORD *)(a1 + 36);
          goto LABEL_21;
        }
      }
      else
      {
        v8 = TagFallback & 7;
      }
LABEL_29:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
    v8 = TagFallback & 7;
    if (v8 != 1)
      goto LABEL_29;
LABEL_17:
    v14 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 16) = v14;
    v9 = *(_DWORD *)(a1 + 36) | 2;
    *(_DWORD *)(a1 + 36) = v9;
    v11 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 26)
    {
      *((_QWORD *)this + 1) = v11 + 1;
LABEL_21:
      *(_DWORD *)(a1 + 36) = v9 | 4;
      v12 = *(void **)(a1 + 24);
      if (v12 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v12);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_1002C590C(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v4 + 24), a2);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v4 + 24), a2);
  return result;
}

uint64_t sub_1002C5984(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 4) != 0)
    {
      v6 = *(_QWORD *)(a1 + 24);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v6 + 23);
      else
        v10 = v9;
      if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
        v7 = *(unsigned __int8 *)(v6 + 23);
        v9 = *(_QWORD *)(v6 + 8);
        v8 = *(_BYTE *)(v6 + 23);
      }
      else
      {
        v11 = 1;
      }
      if (v8 < 0)
        v7 = v9;
      v5 = (v5 + v11 + v7 + 1);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_1002C5A2C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C54EC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002C5A78()
{
  return 1;
}

_QWORD *sub_1002C5A80@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.AnchorValueStatistics");
}

void sub_1002C5A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const std::string *v10;
  std::string *v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 5777);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 20);
      v8 = *(int *)(a1 + 16);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 24))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), v7 + 1);
          v7 = *(_DWORD *)(a1 + 20);
        }
        *(_DWORD *)(a1 + 20) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v8 + 1;
      sub_1002C54EC(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    v10 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 2u;
    v11 = *(std::string **)(a1 + 32);
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v11, v10);
  }
}

void sub_1002C5C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C5C54(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  uint64_t *v2;

  *(_QWORD *)a1 = off_10212C518;
  v2 = (uint64_t *)((char *)a1 + 8);
  sub_1002C3FEC((uint64_t)a1);
  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002C5C98(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1002C5C54(a1);
  operator delete();
}

void sub_1002C5CBC()
{
  operator new();
}

uint64_t sub_1002C5D04(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  if ((*(_BYTE *)(result + 44) & 2) != 0)
  {
    v2 = *(_QWORD *)(result + 32);
    if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
    }
  }
  if (*(int *)(result + 16) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v3);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_1002C5D98(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  void *v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int v25;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  do
  {
    while (1)
    {
LABEL_2:
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if (v8 == 2)
      {
        while (1)
        {
          v11 = *(_DWORD *)(a1 + 20);
          v12 = *(int *)(a1 + 16);
          if ((int)v12 >= v11)
          {
            if (v11 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v11 + 1);
              v11 = *(_DWORD *)(a1 + 20);
            }
            *(_DWORD *)(a1 + 20) = v11 + 1;
            operator new();
          }
          v13 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v12 + 1;
          v14 = *(_QWORD *)(v13 + 8 * v12);
          v25 = 0;
          v15 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25))return 0;
          }
          else
          {
            v25 = *v15;
            *((_QWORD *)this + 1) = v15 + 1;
          }
          v16 = *((_DWORD *)this + 14);
          v17 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v16 + 1;
          if (v16 >= v17)
            return 0;
          v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
          if (!sub_1002C5714(v14, this, v19) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
          v20 = *((_DWORD *)this + 14);
          v21 = __OFSUB__(v20, 1);
          v22 = v20 - 1;
          if (v22 < 0 == v21)
            *((_DWORD *)this + 14) = v22;
          v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
          if ((unint64_t)v23 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v24 = *v23;
          if (v24 != 10)
          {
            if (v24 != 18)
              goto LABEL_2;
            *((_QWORD *)this + 1) = v23 + 1;
            goto LABEL_10;
          }
          *((_QWORD *)this + 1) = v23 + 1;
        }
      }
LABEL_36:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
    if (TagFallback >> 3 != 2)
    {
      v8 = TagFallback & 7;
      goto LABEL_36;
    }
    v8 = TagFallback & 7;
    if (v8 != 2)
      goto LABEL_36;
LABEL_10:
    *(_DWORD *)(a1 + 44) |= 2u;
    v9 = *(void **)(a1 + 32);
    if (v9 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v9);
    if (!(_DWORD)result)
      return result;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_1002C6054(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if ((*(_BYTE *)(v5 + 44) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(2, *(_QWORD *)(v5 + 32), a2);
  return result;
}

uint64_t sub_1002C60D4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = v5;
    v7 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = v7;
    if (v8 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v7 = *(_QWORD *)(v4 + 8);
      v9 = v10 + 1;
      v6 = *(_BYTE *)(v4 + 23);
    }
    else
    {
      v9 = 2;
    }
    if (v6 < 0)
      v5 = v7;
    v3 = v9 + v5;
  }
  else
  {
    v3 = 0;
  }
  v11 = *(_DWORD *)(a1 + 16);
  v12 = (v11 + v3);
  if (v11 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C5984(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v13), a2);
      v15 = (int)v14;
      if (v14 >= 0x80)
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
      else
        v16 = 1;
      v12 = (v15 + v12 + v16);
      ++v13;
    }
    while (v13 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 40) = v12;
  return v12;
}

void sub_1002C61B0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C5A90(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002C61FC()
{
  return 1;
}

_QWORD *sub_1002C6204@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ClusterAnchorValueStatistics");
}

void sub_1002C6214(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 5943);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_1002C5A90(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_1002C6374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C638C(uint64_t *a1)
{
  *a1 = (uint64_t)off_10212C590;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_1002C63C4(uint64_t *a1)
{
  sub_1002C638C(a1);
  operator delete();
}

void sub_1002C63E8()
{
  operator new();
}

uint64_t sub_1002C6428(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_1002C6480(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(_QWORD *)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_1002C5D98(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002C66AC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_1002C6708(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C60D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4), a2);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      else
        v7 = 1;
      v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_1002C6784(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C6214(a1, (uint64_t)lpsrc);
}

void sub_1002C67D0(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 != a1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1);
    sub_1002C6214(a1, a2);
  }
}

uint64_t sub_1002C6810()
{
  return 1;
}

_QWORD *sub_1002C6818@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ClusterAnchorValueStatisticsVector");
}

void sub_1002C6828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const std::string *v6;
  std::string *v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 6149);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_1002E60A0(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 8 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 8 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    v6 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 36) |= 1u;
    v7 = *(std::string **)(a1 + 8);
    if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v7, v6);
  }
}

void sub_1002C6930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C6948(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C608;
  sub_100109DDC((uint64_t)a1);
  if (*((_QWORD *)a1 + 2))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002C6998(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1002C6948(a1);
  operator delete();
}

void sub_1002C69BC()
{
  operator new();
}

uint64_t sub_1002C6A00(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(result + 36) & 1) != 0)
  {
    v1 = *(_QWORD *)(result + 8);
    if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(_BYTE **)v1 = 0;
        *(_QWORD *)(v1 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v1 = 0;
        *(_BYTE *)(v1 + 23) = 0;
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1002C6A48(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t result;
  void *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  signed int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  unint64_t v25[6];

  v5 = a1 + 16;
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_21;
      *(_DWORD *)(a1 + 36) |= 1u;
      v10 = *(void **)(a1 + 8);
      if (v10 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v10);
      if (!(_DWORD)result)
        return result;
      v11 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 17)
      {
        do
        {
          *((_QWORD *)this + 1) = v11 + 1;
LABEL_25:
          v25[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v25) & 1) == 0)
            return 0;
          v12 = v25[0];
          v13 = *(_DWORD *)(a1 + 24);
          if (v13 == *(_DWORD *)(a1 + 28))
          {
            sub_1002E60A0(v5, v13 + 1);
            v13 = *(_DWORD *)(a1 + 24);
          }
          v14 = *(_QWORD *)(a1 + 16);
          v15 = v13 + 1;
          *(_DWORD *)(a1 + 24) = v13 + 1;
          *(_QWORD *)(v14 + 8 * v13) = v12;
          v16 = *((_QWORD *)this + 1);
          v17 = *((_DWORD *)this + 4) - v16;
          if (v17 >= 1)
          {
            v18 = v17 / 9u;
            v19 = v18 >= *(_DWORD *)(a1 + 28) - v15 ? *(_DWORD *)(a1 + 28) - v15 : v18;
            if (v19 >= 1)
            {
              v20 = 0;
              while (*(_BYTE *)v16 == 17)
              {
                v21 = *(_QWORD *)(v16 + 1);
                if (v15 >= *(_DWORD *)(a1 + 28))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v25, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v22 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v24, v22);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v25);
                  v15 = *(_DWORD *)(a1 + 24);
                  v14 = *(_QWORD *)(a1 + 16);
                }
                *(_DWORD *)(a1 + 24) = v15 + 1;
                *(_QWORD *)(v14 + 8 * v15) = v21;
                ++v20;
                v16 += 9;
                ++v15;
                if (v19 == v20)
                {
                  v20 = v19;
                  break;
                }
              }
              if (v20)
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v20);
            }
          }
LABEL_41:
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v23 = (_BYTE *)*((_QWORD *)this + 2);
        }
        while (v11 < v23 && *v11 == 17);
        if (v11 == v23 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
      break;
    v8 = TagFallback & 7;
LABEL_21:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  v8 = TagFallback & 7;
  if (v8 == 1)
    goto LABEL_25;
  if (v8 != 2)
    goto LABEL_21;
  result = sub_1002C6D44(this, v5);
  if ((_DWORD)result)
    goto LABEL_41;
  return result;
}

void sub_1002C6D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C6D44(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;

  v11 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
    if (!(_DWORD)result)
      return result;
    v5 = v11;
  }
  else
  {
    v5 = *v4;
    v11 = v5;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) < 1)
  {
LABEL_11:
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
    return 1;
  }
  else
  {
    while (1)
    {
      v12 = 0;
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12);
      if (!(_DWORD)result)
        break;
      v8 = v12;
      v9 = *(_DWORD *)(a2 + 8);
      if (v9 == *(_DWORD *)(a2 + 12))
      {
        sub_1002E60A0(a2, v9 + 1);
        v9 = *(_DWORD *)(a2 + 8);
      }
      v10 = *(_QWORD *)a2;
      *(_DWORD *)(a2 + 8) = v9 + 1;
      *(_QWORD *)(v10 + 8 * v9) = v8;
      if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) <= 0)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_1002C6E3C(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2;
  v4 = result;
  if ((*(_BYTE *)(result + 36) & 1) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(1, *(_QWORD *)(result + 8), a2);
  if (*(int *)(v4 + 24) >= 1)
  {
    v5 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v3, *(double *)(*(_QWORD *)(v4 + 16) + 8 * v5++), a3);
    while (v5 < *(int *)(v4 + 24));
  }
  return result;
}

uint64_t sub_1002C6EB0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = v5;
    v7 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = v7;
    if (v8 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v7 = *(_QWORD *)(v4 + 8);
      v9 = v10 + 1;
      v6 = *(_BYTE *)(v4 + 23);
    }
    else
    {
      v9 = 2;
    }
    if (v6 < 0)
      v5 = v7;
    v3 = v9 + v5;
  }
  else
  {
    v3 = 0;
  }
  result = (9 * *(_DWORD *)(a1 + 24) + v3);
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_1002C6F38(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C6828(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002C6F84()
{
  return 1;
}

_QWORD *sub_1002C6F8C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.LocationSimilarityListElement");
}

void sub_1002C6F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  const std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _BYTE v21[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v21, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 6390);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  v5 = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(const std::string **)(*(_QWORD *)(a2 + 8) + 8 * v6);
      v8 = *(_DWORD *)(a1 + 20);
      v9 = *(int *)(a1 + 16);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a1 + 24))
        {
          v5 = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), v8 + 1);
          v8 = *(_DWORD *)(a1 + 20);
        }
        *(_DWORD *)(a1 + 20) = v8 + 1;
        v11 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)v5);
        v12 = *(_QWORD *)(a1 + 8);
        v13 = *(int *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = v11;
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 16) = v9 + 1;
        v11 = *(std::string **)(v10 + 8 * v9);
      }
      v5 = std::string::operator=(v11, v7);
      ++v6;
    }
    while (v6 < *(int *)(a2 + 16));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), *(_DWORD *)(a2 + 40) + *(_DWORD *)(a1 + 40));
  if (*(int *)(a2 + 40) >= 1)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v14);
      v16 = *(_DWORD *)(a1 + 44);
      v17 = *(int *)(a1 + 40);
      if ((int)v17 >= v16)
      {
        if (v16 == *(_DWORD *)(a1 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), v16 + 1);
          v16 = *(_DWORD *)(a1 + 44);
        }
        *(_DWORD *)(a1 + 44) = v16 + 1;
        operator new();
      }
      v18 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = v17 + 1;
      sub_1002C6828(*(_QWORD *)(v18 + 8 * v17), v15);
      ++v14;
    }
    while (v14 < *(int *)(a2 + 40));
  }
  v19 = *(_DWORD *)(a2 + 64);
  if (v19)
  {
    sub_1002A19E0(a1 + 56, *(_DWORD *)(a1 + 64) + v19);
    memcpy((void *)(*(_QWORD *)(a1 + 56) + 4 * *(int *)(a1 + 64)), *(const void **)(a2 + 56), 4 * *(int *)(a2 + 64));
    *(_DWORD *)(a1 + 64) += *(_DWORD *)(a2 + 64);
  }
}

void sub_1002C71E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C71FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10212C680;
  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  sub_10010C59C((uint64_t *)(a1 + 32));
  sub_1002E6188((int *)(a1 + 8));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_1002C7260(uint64_t a1)
{
  sub_1002C71FC(a1);
  operator delete();
}

void sub_1002C7284()
{
  operator new();
}

uint64_t sub_1002C72D0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1002E6138(a1 + 8);
  if (*(int *)(a1 + 40) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *(int *)(a1 + 40));
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

uint64_t sub_1002C7334(uint64_t result, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *v9;
  unsigned int v10;
  int v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  unsigned int v35;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;

  v4 = result;
  v5 = result + 56;
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 8);
  v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 32);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          v9 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)result;
          *((_DWORD *)this + 8) = result;
          if (!(_DWORD)result)
            return 1;
        }
        else
        {
          v9 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)this + 8) = (_DWORD)v9;
          *((_QWORD *)this + 1) = v8 + 1;
          if (!(_DWORD)v9)
            return 1;
        }
        v10 = v9 >> 3;
        if (v9 >> 3 != 1)
          break;
        v11 = v9 & 7;
        if (v11 != 2)
          goto LABEL_26;
        while (1)
        {
          v14 = *(_DWORD *)(v4 + 20);
          v15 = *(int *)(v4 + 16);
          if ((int)v15 >= v14)
          {
            if (v14 == *(_DWORD *)(v4 + 24))
            {
              result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
              v14 = *(_DWORD *)(v4 + 20);
            }
            *(_DWORD *)(v4 + 20) = v14 + 1;
            v17 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
            v18 = *(_QWORD *)(v4 + 8);
            v19 = *(int *)(v4 + 16);
            *(_DWORD *)(v4 + 16) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19) = v17;
          }
          else
          {
            v16 = *(_QWORD *)(v4 + 8);
            *(_DWORD *)(v4 + 16) = v15 + 1;
            v17 = *(_QWORD *)(v16 + 8 * v15);
          }
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v17);
          if (!(_DWORD)result)
            return result;
          v20 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v20 >= *((_QWORD *)this + 2))
            break;
          v21 = *v20;
          if (v21 != 10)
          {
            if (v21 != 18)
              goto LABEL_2;
            goto LABEL_32;
          }
          *((_QWORD *)this + 1) = v20 + 1;
        }
      }
      if (v10 != 2)
        break;
      v11 = v9 & 7;
      if (v11 != 2)
        goto LABEL_26;
      while (1)
      {
        v22 = *(_DWORD *)(v4 + 44);
        v23 = *(int *)(v4 + 40);
        if ((int)v23 >= v22)
        {
          if (v22 == *(_DWORD *)(v4 + 48))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v22 + 1);
            v22 = *(_DWORD *)(v4 + 44);
          }
          *(_DWORD *)(v4 + 44) = v22 + 1;
          operator new();
        }
        v24 = *(_QWORD *)(v4 + 32);
        *(_DWORD *)(v4 + 40) = v23 + 1;
        v25 = *(_QWORD *)(v24 + 8 * v23);
        v40 = 0;
        v26 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40))return 0;
        }
        else
        {
          v40 = *v26;
          *((_QWORD *)this + 1) = v26 + 1;
        }
        v27 = *((_DWORD *)this + 14);
        v28 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v27 + 1;
        if (v27 >= v28)
          return 0;
        v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v40);
        if (!sub_1002C6A48(v25, this, v30) || !*((_BYTE *)this + 36))
          return 0;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
        v31 = *((_DWORD *)this + 14);
        v32 = __OFSUB__(v31, 1);
        v33 = v31 - 1;
        if (v33 < 0 == v32)
          *((_DWORD *)this + 14) = v33;
        v20 = (char *)*((_QWORD *)this + 1);
        v12 = (char *)*((_QWORD *)this + 2);
        if (v20 >= v12)
          break;
        v34 = *v20;
        if (v34 != 18)
        {
          if (v34 == 24)
          {
            do
            {
              v13 = v20 + 1;
              *((_QWORD *)this + 1) = v13;
LABEL_51:
              v39 = 0;
              if (v13 >= v12 || *v13 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
                if (!(_DWORD)result)
                  return result;
                v35 = v39;
              }
              else
              {
                v35 = *v13;
                *((_QWORD *)this + 1) = v13 + 1;
              }
              if (v35 < 4 || v35 == 15)
              {
                v37 = *(_DWORD *)(v4 + 64);
                if (v37 == *(_DWORD *)(v4 + 68))
                {
                  result = sub_1002A19E0(v5, v37 + 1);
                  v37 = *(_DWORD *)(v4 + 64);
                }
                v38 = *(_QWORD *)(v4 + 56);
                *(_DWORD *)(v4 + 64) = v37 + 1;
                *(_DWORD *)(v38 + 4 * v37) = v35;
              }
LABEL_64:
              v20 = (char *)*((_QWORD *)this + 1);
              v12 = (char *)*((_QWORD *)this + 2);
            }
            while (v20 < v12 && *v20 == 24);
            if (v20 == v12 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          goto LABEL_2;
        }
LABEL_32:
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (v10 != 3)
    {
      v11 = v9 & 7;
      goto LABEL_26;
    }
    v11 = v9 & 7;
    if (v11 == 2)
      break;
    if ((v9 & 7) == 0)
    {
      v13 = (char *)*((_QWORD *)this + 1);
      v12 = (char *)*((_QWORD *)this + 2);
      goto LABEL_51;
    }
LABEL_26:
    if (v11 == 4)
      return 1;
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, v9, a3);
    if ((result & 1) == 0)
      return 0;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(this, sub_1002BC674, v5);
  if ((_DWORD)result)
    goto LABEL_64;
  return result;
}

uint64_t sub_1002C770C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2);
    while (v6 < *(int *)(v5 + 16));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  if (*(int *)(v5 + 64) >= 1)
  {
    v8 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v8++), (int)a2, a4);
    while (v8 < *(int *)(v5 + 64));
  }
  return result;
}

uint64_t sub_1002C77D0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    v5 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v4 = 0;
    v5 = *(_DWORD *)(a1 + 16);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v6 + 23);
      else
        v10 = v9;
      if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
        v7 = *(unsigned __int8 *)(v6 + 23);
        v9 = *(_QWORD *)(v6 + 8);
        v3 = *(_DWORD *)(a1 + 16);
        v8 = *(_BYTE *)(v6 + 23);
      }
      else
      {
        v11 = 1;
      }
      if (v8 < 0)
        v7 = v9;
      v5 += v11 + v7;
      ++v4;
    }
    while (v4 < v3);
  }
  v12 = *(_DWORD *)(a1 + 40);
  v13 = v12 + v5;
  if (v12 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C6EB0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14), a2);
      v16 = (int)v15;
      if (v15 >= 0x80)
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      else
        v17 = 1;
      v13 += v16 + v17;
      ++v14;
    }
    while (v14 < *(int *)(a1 + 40));
  }
  v18 = *(_DWORD *)(a1 + 64);
  if (v18 < 1)
  {
    v20 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 56)
                                                                                             + 4 * v19);
      if ((v21 & 0x80000000) != 0)
      {
        v22 = 10;
      }
      else if (v21 >= 0x80)
      {
        v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
        v18 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        v22 = 1;
      }
      v20 += v22;
      ++v19;
    }
    while (v19 < v18);
  }
  result = (v20 + v13 + v18);
  *(_DWORD *)(a1 + 72) = result;
  return result;
}

void sub_1002C7928(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C6F9C(a1, (uint64_t)lpsrc);
}

void sub_1002C7974(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002C6F9C(a1, a2);
  }
}

uint64_t sub_1002C79B4()
{
  return 1;
}

_QWORD *sub_1002C79BC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.LocationSimilarityListData");
}

uint64_t sub_1002C79CC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_10212C6F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 176) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 192) = 0;
  sub_1002C7ABC(a1, a2);
  return a1;
}

void sub_1002C7A68(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  if (*((_QWORD *)v1 + 17))
    operator delete[]();
  sub_10010C59C(v4);
  sub_10010C59C(v3);
  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_1002C7ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  const std::string *v31;
  std::string *v32;
  char v33;
  _BYTE v34[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v34, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 7329);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v34, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v33, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v34);
  }
  sub_1002E61F4((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), a2 + 8);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56), *(_DWORD *)(a2 + 64) + *(_DWORD *)(a1 + 64));
  if (*(int *)(a2 + 64) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 68);
      v8 = *(int *)(a1 + 64);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56), v7 + 1);
          v7 = *(_DWORD *)(a1 + 68);
        }
        *(_DWORD *)(a1 + 68) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 64) = v8 + 1;
      sub_1002C37B8(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 64));
  }
  sub_1002E6310((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80), a2 + 80);
  v10 = *(_DWORD *)(a2 + 144);
  if (v10)
  {
    sub_1002A19E0(a1 + 136, *(_DWORD *)(a1 + 144) + v10);
    memcpy((void *)(*(_QWORD *)(a1 + 136) + 4 * *(int *)(a1 + 144)), *(const void **)(a2 + 136), 4 * *(int *)(a2 + 144));
    *(_DWORD *)(a1 + 144) += *(_DWORD *)(a2 + 144);
  }
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 0x1FE) == 0)
    goto LABEL_20;
  if ((v11 & 2) != 0)
  {
    v15 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 192) |= 2u;
    *(_QWORD *)(a1 + 32) = v15;
    v11 = *(_DWORD *)(a2 + 192);
    if ((v11 & 4) == 0)
    {
LABEL_16:
      if ((v11 & 8) == 0)
        goto LABEL_17;
LABEL_40:
      v17 = *(_DWORD *)(a2 + 48);
      if (v17 >= 6)
        sub_1018F20C4();
      *(_DWORD *)(a1 + 192) |= 8u;
      *(_DWORD *)(a1 + 48) = v17;
      v11 = *(_DWORD *)(a2 + 192);
      if ((v11 & 0x10) == 0)
      {
LABEL_18:
        if ((v11 & 0x80) == 0)
          goto LABEL_20;
        goto LABEL_19;
      }
      goto LABEL_42;
    }
  }
  else if ((v11 & 4) == 0)
  {
    goto LABEL_16;
  }
  v16 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 192) |= 4u;
  *(_QWORD *)(a1 + 40) = v16;
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 8) != 0)
    goto LABEL_40;
LABEL_17:
  if ((v11 & 0x10) == 0)
    goto LABEL_18;
LABEL_42:
  v18 = *(_DWORD *)(a2 + 52);
  if (v18 >= 4)
    sub_1018F209C();
  *(_DWORD *)(a1 + 192) |= 0x10u;
  *(_DWORD *)(a1 + 52) = v18;
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 0x80) != 0)
  {
LABEL_19:
    v12 = *(_BYTE *)(a2 + 104);
    *(_DWORD *)(a1 + 192) |= 0x80u;
    *(_BYTE *)(a1 + 104) = v12;
    v11 = *(_DWORD *)(a2 + 192);
  }
LABEL_20:
  if ((v11 & 0xFF00) == 0)
    goto LABEL_30;
  if ((v11 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 192) |= 0x100u;
    v19 = *(_DWORD **)(a1 + 112);
    if (!v19)
      operator new();
    v20 = *(_QWORD *)(a2 + 112);
    if (!v20)
      v20 = *(_QWORD *)(qword_102310300 + 112);
    sub_1002C4ED8(v19, v20);
    v11 = *(_DWORD *)(a2 + 192);
    if ((v11 & 0x200) == 0)
    {
LABEL_23:
      if ((v11 & 0x400) == 0)
        goto LABEL_24;
      goto LABEL_51;
    }
  }
  else if ((v11 & 0x200) == 0)
  {
    goto LABEL_23;
  }
  v21 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 192) |= 0x200u;
  *(_DWORD *)(a1 + 108) = v21;
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 0x400) == 0)
  {
LABEL_24:
    if ((v11 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_51:
  *(_DWORD *)(a1 + 192) |= 0x400u;
  v22 = *(_QWORD *)(a1 + 120);
  if (!v22)
    operator new();
  v23 = *(_QWORD *)(a2 + 120);
  if (!v23)
    v23 = *(_QWORD *)(qword_102310300 + 120);
  sub_1002C6F9C(v22, v23);
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 0x800) == 0)
  {
LABEL_25:
    if ((v11 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_56:
  v24 = *(_DWORD *)(a2 + 128);
  if (v24 >= 4)
    sub_1018F2074();
  *(_DWORD *)(a1 + 192) |= 0x800u;
  *(_DWORD *)(a1 + 128) = v24;
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 0x1000) == 0)
  {
LABEL_26:
    if ((v11 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_58:
  v25 = *(_DWORD *)(a2 + 132);
  if (v25 >= 4)
    sub_1018F204C();
  *(_DWORD *)(a1 + 192) |= 0x1000u;
  *(_DWORD *)(a1 + 132) = v25;
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 0x4000) == 0)
    goto LABEL_28;
LABEL_27:
  v13 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 192) |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v13;
  v11 = *(_DWORD *)(a2 + 192);
LABEL_28:
  if ((v11 & 0x8000) != 0)
  {
    v14 = *(_DWORD *)(a2 + 156);
    *(_DWORD *)(a1 + 192) |= 0x8000u;
    *(_DWORD *)(a1 + 156) = v14;
    v11 = *(_DWORD *)(a2 + 192);
  }
LABEL_30:
  if ((v11 & 0xFF0000) == 0)
    return;
  if ((v11 & 0x10000) != 0)
  {
    v26 = *(_DWORD *)(a2 + 160);
    *(_DWORD *)(a1 + 192) |= 0x10000u;
    *(_DWORD *)(a1 + 160) = v26;
    v11 = *(_DWORD *)(a2 + 192);
    if ((v11 & 0x20000) == 0)
    {
LABEL_33:
      if ((v11 & 0x40000) == 0)
        goto LABEL_34;
      goto LABEL_63;
    }
  }
  else if ((v11 & 0x20000) == 0)
  {
    goto LABEL_33;
  }
  v27 = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 192) |= 0x20000u;
  *(_DWORD *)(a1 + 164) = v27;
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 0x40000) == 0)
  {
LABEL_34:
    if ((v11 & 0x80000) == 0)
      goto LABEL_35;
    goto LABEL_64;
  }
LABEL_63:
  v28 = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 192) |= 0x40000u;
  *(_DWORD *)(a1 + 168) = v28;
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 0x80000) == 0)
  {
LABEL_35:
    if ((v11 & 0x100000) == 0)
      goto LABEL_36;
LABEL_65:
    v30 = *(_DWORD *)(a2 + 184);
    *(_DWORD *)(a1 + 192) |= 0x100000u;
    *(_DWORD *)(a1 + 184) = v30;
    if ((*(_DWORD *)(a2 + 192) & 0x200000) == 0)
      return;
    goto LABEL_66;
  }
LABEL_64:
  v29 = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 192) |= 0x80000u;
  *(_DWORD *)(a1 + 172) = v29;
  v11 = *(_DWORD *)(a2 + 192);
  if ((v11 & 0x100000) != 0)
    goto LABEL_65;
LABEL_36:
  if ((v11 & 0x200000) == 0)
    return;
LABEL_66:
  v31 = *(const std::string **)(a2 + 176);
  *(_DWORD *)(a1 + 192) |= 0x200000u;
  v32 = *(std::string **)(a1 + 176);
  if (v32 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v32, v31);
}

void sub_1002C7FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C7FF8(uint64_t *a1)
{
  *a1 = (uint64_t)off_10212C6F8;
  sub_1002C8068(a1);
  if (a1[17])
    operator delete[]();
  sub_10010C59C(a1 + 10);
  sub_10010C59C(a1 + 7);
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_1002C8068(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = result;
  v2 = result[22];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_102310300 != result)
  {
    v4 = result[14];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_QWORD *)v1[15];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1002C8108(uint64_t *a1)
{
  sub_1002C7FF8(a1);
  operator delete();
}

void sub_1002C812C()
{
  operator new();
}

uint64_t sub_1002C81A8(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *(_DWORD *)(result + 192);
  if ((v2 & 0x1FE) != 0)
  {
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 32) = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      v3 = *(_QWORD *)(result + 112);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          v4 = 0;
          do
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
            ++v4;
          }
          while (v4 < *(int *)(v3 + 16));
        }
        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 192);
      }
    }
    *(_DWORD *)(v1 + 108) = 0;
    if ((v2 & 0x400) != 0)
    {
      result = *(_QWORD *)(v1 + 120);
      if (result)
      {
        result = sub_1002C72D0(result);
        v2 = *(_DWORD *)(v1 + 192);
      }
    }
    *(_QWORD *)(v1 + 128) = 0;
    *(_QWORD *)(v1 + 152) = 0;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_DWORD *)(v1 + 184) = 0;
    *(_QWORD *)(v1 + 160) = 0;
    *(_QWORD *)(v1 + 168) = 0;
    if ((v2 & 0x200000) != 0)
    {
      v6 = *(_QWORD *)(v1 + 176);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
  }
  if (*(int *)(v1 + 16) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 64) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v9);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      ++v9;
    }
    while (v9 < *(int *)(v1 + 64));
  }
  *(_DWORD *)(v1 + 64) = 0;
  if (*(int *)(v1 + 88) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 8 * v11);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      ++v11;
    }
    while (v11 < *(int *)(v1 + 88));
  }
  *(_DWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  return result;
}

uint64_t sub_1002C8354(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  int v26;
  char *v27;
  _BYTE *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  int v35;
  unint64_t v36;
  char *v37;
  int v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  void *v53;
  uint64_t result;
  _BYTE *v55;
  unsigned int v56;
  _BYTE *v57;
  unsigned int v58;
  _BYTE *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  _BYTE *v85;
  int *v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  char *v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  _BYTE *v104;
  unsigned int v105;
  _BYTE *v106;
  unsigned int v107;
  unsigned __int8 *v108;
  int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v120;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v121;
  unint64_t *v122;
  unsigned int *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int v129[2];

  v5 = a1 + 136;
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  v120 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56);
  v121 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80);
  v122 = (unint64_t *)(a1 + 32);
  v7 = (unsigned int *)(a1 + 108);
  v8 = (unsigned int *)(a1 + 152);
  v127 = (unsigned int *)(a1 + 160);
  v128 = (unsigned int *)(a1 + 156);
  v125 = (unsigned int *)(a1 + 168);
  v126 = (unsigned int *)(a1 + 164);
  v124 = (unsigned int *)(a1 + 172);
  v123 = (unsigned int *)(a1 + 184);
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_80;
        while (1)
        {
          v12 = *(_DWORD *)(a1 + 20);
          v13 = *(int *)(a1 + 16);
          if ((int)v13 >= v12)
          {
            if (v12 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v12 + 1);
              v12 = *(_DWORD *)(a1 + 20);
            }
            *(_DWORD *)(a1 + 20) = v12 + 1;
            operator new();
          }
          v14 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v13 + 1;
          v15 = *(_QWORD *)(v14 + 8 * v13);
          v129[0] = 0;
          v16 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129))return 0;
          }
          else
          {
            v129[0] = *v16;
            *((_QWORD *)this + 1) = v16 + 1;
          }
          v17 = *((_DWORD *)this + 14);
          v18 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v17 + 1;
          if (v17 >= v18)
            return 0;
          v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v129[0]);
          if (!sub_1002C2CDC(v15, this, v20) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
          v21 = *((_DWORD *)this + 14);
          v22 = __OFSUB__(v21, 1);
          v23 = v21 - 1;
          if (v23 < 0 == v22)
            *((_DWORD *)this + 14) = v23;
          v25 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          if ((unint64_t)v25 >= v24)
            goto LABEL_2;
          v26 = *v25;
          if (v26 != 10)
            break;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        if (v26 != 16)
          continue;
        v27 = (char *)(v25 + 1);
        *((_QWORD *)this + 1) = v27;
        goto LABEL_29;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v27 = (char *)*((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
LABEL_29:
        if ((unint64_t)v27 >= v24 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v122);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
        }
        else
        {
          *v122 = *v27;
          v28 = v27 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 192) |= 2u;
        if ((unint64_t)v28 >= v24 || *v28 != 25)
          continue;
        *((_QWORD *)this + 1) = v28 + 1;
LABEL_92:
        *(_QWORD *)v129 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v129) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v129;
        *(_DWORD *)(a1 + 192) |= 4u;
        v55 = (_BYTE *)*((_QWORD *)this + 1);
        v29 = *((_QWORD *)this + 2);
        if ((unint64_t)v55 >= v29 || *v55 != 32)
          continue;
        v30 = v55 + 1;
        *((_QWORD *)this + 1) = v30;
LABEL_96:
        v129[0] = 0;
        if ((unint64_t)v30 >= v29 || *v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129);
          if (!(_DWORD)result)
            return result;
          v56 = v129[0];
        }
        else
        {
          v56 = *v30;
          *((_QWORD *)this + 1) = v30 + 1;
        }
        if (v56 <= 5)
        {
          *(_DWORD *)(a1 + 192) |= 8u;
          *(_DWORD *)(a1 + 48) = v56;
        }
        v57 = (_BYTE *)*((_QWORD *)this + 1);
        v31 = *((_QWORD *)this + 2);
        if ((unint64_t)v57 >= v31 || *v57 != 40)
          continue;
        v32 = v57 + 1;
        *((_QWORD *)this + 1) = v32;
LABEL_106:
        v129[0] = 0;
        if ((unint64_t)v32 >= v31 || *v32 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129);
          if (!(_DWORD)result)
            return result;
          v58 = v129[0];
        }
        else
        {
          v58 = *v32;
          *((_QWORD *)this + 1) = v32 + 1;
        }
        if (v58 <= 3)
        {
          *(_DWORD *)(a1 + 192) |= 0x10u;
          *(_DWORD *)(a1 + 52) = v58;
        }
        v59 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v59 >= *((_QWORD *)this + 2) || *v59 != 50)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v59 + 1;
LABEL_116:
          v60 = *(_DWORD *)(a1 + 68);
          v61 = *(int *)(a1 + 64);
          if ((int)v61 >= v60)
          {
            if (v60 == *(_DWORD *)(a1 + 72))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v120, v60 + 1);
              v60 = *(_DWORD *)(a1 + 68);
            }
            *(_DWORD *)(a1 + 68) = v60 + 1;
            operator new();
          }
          v62 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 64) = v61 + 1;
          v63 = *(_QWORD *)(v62 + 8 * v61);
          v129[0] = 0;
          v64 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v64 >= *((_QWORD *)this + 2) || *v64 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129))return 0;
          }
          else
          {
            v129[0] = *v64;
            *((_QWORD *)this + 1) = v64 + 1;
          }
          v65 = *((_DWORD *)this + 14);
          v66 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v65 + 1;
          if (v65 >= v66)
            return 0;
          v67 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v129[0]);
          if (!sub_1002C3A60(v63, this, v68) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v67);
          v69 = *((_DWORD *)this + 14);
          v22 = __OFSUB__(v69, 1);
          v70 = v69 - 1;
          if (v70 < 0 == v22)
            *((_DWORD *)this + 14) = v70;
          v59 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v59 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v71 = *v59;
        }
        while (v71 == 50);
        if (v71 != 58)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v59 + 1;
LABEL_134:
          v72 = *(_DWORD *)(a1 + 92);
          v73 = *(int *)(a1 + 88);
          if ((int)v73 >= v72)
          {
            if (v72 == *(_DWORD *)(a1 + 96))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v121, v72 + 1);
              v72 = *(_DWORD *)(a1 + 92);
            }
            *(_DWORD *)(a1 + 92) = v72 + 1;
            operator new();
          }
          v74 = *(_QWORD *)(a1 + 80);
          *(_DWORD *)(a1 + 88) = v73 + 1;
          v75 = *(_QWORD *)(v74 + 8 * v73);
          v129[0] = 0;
          v76 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v76 >= *((_QWORD *)this + 2) || *v76 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129))return 0;
          }
          else
          {
            v129[0] = *v76;
            *((_QWORD *)this + 1) = v76 + 1;
          }
          v77 = *((_DWORD *)this + 14);
          v78 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v77 + 1;
          if (v77 >= v78)
            return 0;
          v79 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v129[0]);
          if (!sub_1002C417C(v75, this, v80) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v79);
          v81 = *((_DWORD *)this + 14);
          v22 = __OFSUB__(v81, 1);
          v82 = v81 - 1;
          if (v82 < 0 == v22)
            *((_DWORD *)this + 14) = v82;
          v59 = (_BYTE *)*((_QWORD *)this + 1);
          v33 = *((_QWORD *)this + 2);
          if ((unint64_t)v59 >= v33)
            goto LABEL_2;
          v83 = *v59;
        }
        while (v83 == 58);
        if (v83 != 64)
          continue;
        v34 = v59 + 1;
        *((_QWORD *)this + 1) = v34;
LABEL_152:
        v129[0] = 0;
        if ((unint64_t)v34 >= v33 || *v34 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129);
          if (!(_DWORD)result)
            return result;
          v84 = v129[0];
          v85 = (_BYTE *)*((_QWORD *)this + 1);
          v33 = *((_QWORD *)this + 2);
        }
        else
        {
          v84 = *v34;
          v85 = v34 + 1;
          *((_QWORD *)this + 1) = v85;
        }
        *(_BYTE *)(a1 + 104) = v84 != 0;
        v35 = *(_DWORD *)(a1 + 192) | 0x80;
        *(_DWORD *)(a1 + 192) = v35;
        if ((unint64_t)v85 >= v33 || *v85 != 74)
          continue;
        *((_QWORD *)this + 1) = v85 + 1;
LABEL_160:
        *(_DWORD *)(a1 + 192) = v35 | 0x100;
        v86 = *(int **)(a1 + 112);
        if (!v86)
          operator new();
        v129[0] = 0;
        v87 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v87 >= *((_QWORD *)this + 2) || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129))return 0;
        }
        else
        {
          v129[0] = *v87;
          *((_QWORD *)this + 1) = v87 + 1;
        }
        v88 = *((_DWORD *)this + 14);
        v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89)
          return 0;
        v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v129[0]);
        if (!sub_1002C5144(v86, this, v91) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        v92 = *((_DWORD *)this + 14);
        v22 = __OFSUB__(v92, 1);
        v93 = v92 - 1;
        if (v93 < 0 == v22)
          *((_DWORD *)this + 14) = v93;
        v94 = (_BYTE *)*((_QWORD *)this + 1);
        v36 = *((_QWORD *)this + 2);
        if ((unint64_t)v94 >= v36 || *v94 != 80)
          continue;
        v37 = v94 + 1;
        *((_QWORD *)this + 1) = v37;
LABEL_174:
        if ((unint64_t)v37 >= v36 || *v37 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v95 = (_BYTE *)*((_QWORD *)this + 1);
          v36 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v37;
          v95 = v37 + 1;
          *((_QWORD *)this + 1) = v95;
        }
        v38 = *(_DWORD *)(a1 + 192) | 0x200;
        *(_DWORD *)(a1 + 192) = v38;
        if ((unint64_t)v95 >= v36 || *v95 != 90)
          continue;
        *((_QWORD *)this + 1) = v95 + 1;
LABEL_182:
        *(_DWORD *)(a1 + 192) = v38 | 0x400;
        v96 = *(_QWORD *)(a1 + 120);
        if (!v96)
          operator new();
        v129[0] = 0;
        v97 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v97 >= *((_QWORD *)this + 2) || *v97 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129))return 0;
        }
        else
        {
          v129[0] = *v97;
          *((_QWORD *)this + 1) = v97 + 1;
        }
        v98 = *((_DWORD *)this + 14);
        v99 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v98 + 1;
        if (v98 >= v99)
          return 0;
        v100 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v129[0]);
        if (!sub_1002C7334(v96, this, v101) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v100);
        v102 = *((_DWORD *)this + 14);
        v22 = __OFSUB__(v102, 1);
        v103 = v102 - 1;
        if (v103 < 0 == v22)
          *((_DWORD *)this + 14) = v103;
        v104 = (_BYTE *)*((_QWORD *)this + 1);
        v39 = *((_QWORD *)this + 2);
        if ((unint64_t)v104 < v39 && *v104 == 96)
        {
          v40 = v104 + 1;
          *((_QWORD *)this + 1) = v40;
LABEL_196:
          v129[0] = 0;
          if ((unint64_t)v40 >= v39 || *v40 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129);
            if (!(_DWORD)result)
              return result;
            v105 = v129[0];
          }
          else
          {
            v105 = *v40;
            *((_QWORD *)this + 1) = v40 + 1;
          }
          if (v105 <= 3)
          {
            *(_DWORD *)(a1 + 192) |= 0x800u;
            *(_DWORD *)(a1 + 128) = v105;
          }
          v106 = (_BYTE *)*((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          if ((unint64_t)v106 < v41 && *v106 == 104)
          {
            v42 = v106 + 1;
            *((_QWORD *)this + 1) = v42;
LABEL_206:
            v129[0] = 0;
            if ((unint64_t)v42 >= v41 || *v42 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129);
              if (!(_DWORD)result)
                return result;
              v107 = v129[0];
            }
            else
            {
              v107 = *v42;
              *((_QWORD *)this + 1) = v42 + 1;
            }
            if (v107 <= 3)
            {
              *(_DWORD *)(a1 + 192) |= 0x1000u;
              *(_DWORD *)(a1 + 132) = v107;
            }
            v108 = (unsigned __int8 *)*((_QWORD *)this + 1);
            v43 = *((_QWORD *)this + 2);
            if ((unint64_t)v108 < v43)
            {
              v109 = *v108;
              goto LABEL_226;
            }
          }
        }
        continue;
      case 3u:
        v11 = TagFallback & 7;
        if (v11 == 1)
          goto LABEL_92;
        goto LABEL_80;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v30 = (char *)*((_QWORD *)this + 1);
        v29 = *((_QWORD *)this + 2);
        goto LABEL_96;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v32 = (char *)*((_QWORD *)this + 1);
        v31 = *((_QWORD *)this + 2);
        goto LABEL_106;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_116;
        goto LABEL_80;
      case 7u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_134;
        goto LABEL_80;
      case 8u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v34 = (char *)*((_QWORD *)this + 1);
        v33 = *((_QWORD *)this + 2);
        goto LABEL_152;
      case 9u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_80;
        v35 = *(_DWORD *)(a1 + 192);
        goto LABEL_160;
      case 0xAu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v37 = (char *)*((_QWORD *)this + 1);
        v36 = *((_QWORD *)this + 2);
        goto LABEL_174;
      case 0xBu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_80;
        v38 = *(_DWORD *)(a1 + 192);
        goto LABEL_182;
      case 0xCu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v40 = (char *)*((_QWORD *)this + 1);
        v39 = *((_QWORD *)this + 2);
        goto LABEL_196;
      case 0xDu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v42 = (char *)*((_QWORD *)this + 1);
        v41 = *((_QWORD *)this + 2);
        goto LABEL_206;
      case 0xEu:
        v11 = TagFallback & 7;
        if (v11 == 2)
        {
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(this, sub_1002BC698, v5);
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v108 = (unsigned __int8 *)*((_QWORD *)this + 1);
            v43 = *((_QWORD *)this + 2);
            if ((unint64_t)v108 >= v43)
              goto LABEL_2;
            v109 = *v108;
            if (v109 == 120)
              break;
LABEL_226:
            if (v109 != 112)
              goto LABEL_2;
            v44 = (char *)(v108 + 1);
            *((_QWORD *)this + 1) = v44;
LABEL_215:
            v129[0] = 0;
            if ((unint64_t)v44 >= v43 || *v44 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v129);
              if (!(_DWORD)result)
                return result;
              v110 = v129[0];
            }
            else
            {
              v110 = *v44;
              *((_QWORD *)this + 1) = v44 + 1;
            }
            if (v110 <= 8)
            {
              v111 = *(_DWORD *)(a1 + 144);
              if (v111 == *(_DWORD *)(a1 + 148))
              {
                sub_1002A19E0(v5, v111 + 1);
                v111 = *(_DWORD *)(a1 + 144);
              }
              v112 = *(_QWORD *)(a1 + 136);
              *(_DWORD *)(a1 + 144) = v111 + 1;
              *(_DWORD *)(v112 + 4 * v111) = v110;
            }
          }
          v45 = v108 + 1;
          *((_QWORD *)this + 1) = v45;
LABEL_229:
          if ((unint64_t)v45 >= v43 || (char)*v45 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
            if (!(_DWORD)result)
              return result;
            v113 = (unsigned __int8 *)*((_QWORD *)this + 1);
            v43 = *((_QWORD *)this + 2);
          }
          else
          {
            *v8 = *v45;
            v113 = v45 + 1;
            *((_QWORD *)this + 1) = v113;
          }
          *(_DWORD *)(a1 + 192) |= 0x4000u;
          if ((int)v43 - (int)v113 >= 2 && *v113 == 128 && v113[1] == 1)
          {
            v46 = v113 + 2;
            *((_QWORD *)this + 1) = v46;
LABEL_238:
            if ((unint64_t)v46 >= v43 || (char)*v46 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128);
              if (!(_DWORD)result)
                return result;
              v114 = (unsigned __int8 *)*((_QWORD *)this + 1);
              v43 = *((_QWORD *)this + 2);
            }
            else
            {
              *v128 = *v46;
              v114 = v46 + 1;
              *((_QWORD *)this + 1) = v114;
            }
            *(_DWORD *)(a1 + 192) |= 0x8000u;
            if ((int)v43 - (int)v114 >= 2 && *v114 == 136 && v114[1] == 1)
            {
              v47 = v114 + 2;
              *((_QWORD *)this + 1) = v47;
LABEL_247:
              if ((unint64_t)v47 >= v43 || (char)*v47 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v127);
                if (!(_DWORD)result)
                  return result;
                v115 = (unsigned __int8 *)*((_QWORD *)this + 1);
                v43 = *((_QWORD *)this + 2);
              }
              else
              {
                *v127 = *v47;
                v115 = v47 + 1;
                *((_QWORD *)this + 1) = v115;
              }
              *(_DWORD *)(a1 + 192) |= 0x10000u;
              if ((int)v43 - (int)v115 >= 2 && *v115 == 144 && v115[1] == 1)
              {
                v48 = v115 + 2;
                *((_QWORD *)this + 1) = v48;
LABEL_256:
                if ((unint64_t)v48 >= v43 || (char)*v48 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v126);
                  if (!(_DWORD)result)
                    return result;
                  v116 = (unsigned __int8 *)*((_QWORD *)this + 1);
                  v43 = *((_QWORD *)this + 2);
                }
                else
                {
                  *v126 = *v48;
                  v116 = v48 + 1;
                  *((_QWORD *)this + 1) = v116;
                }
                *(_DWORD *)(a1 + 192) |= 0x20000u;
                if ((int)v43 - (int)v116 >= 2 && *v116 == 152 && v116[1] == 1)
                {
                  v49 = v116 + 2;
                  *((_QWORD *)this + 1) = v49;
LABEL_265:
                  if ((unint64_t)v49 >= v43 || (char)*v49 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v125);
                    if (!(_DWORD)result)
                      return result;
                    v117 = (unsigned __int8 *)*((_QWORD *)this + 1);
                    v43 = *((_QWORD *)this + 2);
                  }
                  else
                  {
                    *v125 = *v49;
                    v117 = v49 + 1;
                    *((_QWORD *)this + 1) = v117;
                  }
                  *(_DWORD *)(a1 + 192) |= 0x40000u;
                  if ((int)v43 - (int)v117 >= 2 && *v117 == 160 && v117[1] == 1)
                  {
                    v50 = v117 + 2;
                    *((_QWORD *)this + 1) = v50;
LABEL_274:
                    if ((unint64_t)v50 >= v43 || (char)*v50 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v124);
                      if (!(_DWORD)result)
                        return result;
                      v118 = (unsigned __int8 *)*((_QWORD *)this + 1);
                      v43 = *((_QWORD *)this + 2);
                    }
                    else
                    {
                      *v124 = *v50;
                      v118 = v50 + 1;
                      *((_QWORD *)this + 1) = v118;
                    }
                    *(_DWORD *)(a1 + 192) |= 0x80000u;
                    if ((int)v43 - (int)v118 >= 2 && *v118 == 168 && v118[1] == 1)
                    {
                      v51 = v118 + 2;
                      *((_QWORD *)this + 1) = v51;
LABEL_283:
                      if ((unint64_t)v51 >= v43 || (char)*v51 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v123);
                        if (!(_DWORD)result)
                          return result;
                        v119 = (unsigned __int8 *)*((_QWORD *)this + 1);
                        v43 = *((_QWORD *)this + 2);
                      }
                      else
                      {
                        *v123 = *v51;
                        v119 = v51 + 1;
                        *((_QWORD *)this + 1) = v119;
                      }
                      v52 = *(_DWORD *)(a1 + 192) | 0x100000;
                      *(_DWORD *)(a1 + 192) = v52;
                      if ((int)v43 - (int)v119 >= 2 && *v119 == 178 && v119[1] == 1)
                      {
                        *((_QWORD *)this + 1) = v119 + 2;
LABEL_73:
                        *(_DWORD *)(a1 + 192) = v52 | 0x200000;
                        v53 = *(void **)(a1 + 176);
                        if (v53 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
                          operator new();
                        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v53);
                        if (!(_DWORD)result)
                          return result;
                        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                        {
                          *((_DWORD *)this + 8) = 0;
                          result = 1;
                          *((_BYTE *)this + 36) = 1;
                          return result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        if ((TagFallback & 7) == 0)
        {
          v44 = (char *)*((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          goto LABEL_215;
        }
LABEL_80:
        if (v11 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
            return 0;
          continue;
        }
        return 1;
      case 0xFu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v45 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v43 = *((_QWORD *)this + 2);
        goto LABEL_229;
      case 0x10u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v46 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v43 = *((_QWORD *)this + 2);
        goto LABEL_238;
      case 0x11u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v47 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v43 = *((_QWORD *)this + 2);
        goto LABEL_247;
      case 0x12u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v48 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v43 = *((_QWORD *)this + 2);
        goto LABEL_256;
      case 0x13u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v49 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v43 = *((_QWORD *)this + 2);
        goto LABEL_265;
      case 0x14u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v50 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v43 = *((_QWORD *)this + 2);
        goto LABEL_274;
      case 0x15u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_80;
        v51 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v43 = *((_QWORD *)this + 2);
        goto LABEL_283;
      case 0x16u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_80;
        v52 = *(_DWORD *)(a1 + 192);
        goto LABEL_73;
      default:
        v11 = TagFallback & 7;
        goto LABEL_80;
    }
  }
}

uint64_t sub_1002C93B4(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  v7 = *(_DWORD *)(v5 + 192);
  if ((v7 & 2) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 32), (unint64_t)a2, a4);
    v7 = *(_DWORD *)(v5 + 192);
    if ((v7 & 4) == 0)
    {
LABEL_6:
      if ((v7 & 8) == 0)
        goto LABEL_7;
      goto LABEL_36;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_6;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 40), a3);
  v7 = *(_DWORD *)(v5 + 192);
  if ((v7 & 8) == 0)
  {
LABEL_7:
    if ((v7 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_36:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 48), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 192) & 0x10) != 0)
LABEL_8:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 52), (int)a2, a4);
LABEL_9:
  if (*(int *)(v5 + 64) >= 1)
  {
    v8 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 64));
  }
  if (*(int *)(v5 + 88) >= 1)
  {
    v9 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 88));
  }
  v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x80) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 104), (BOOL)a2, a4);
    v10 = *(_DWORD *)(v5 + 192);
    if ((v10 & 0x100) == 0)
    {
LABEL_17:
      if ((v10 & 0x200) == 0)
        goto LABEL_18;
      goto LABEL_42;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_17;
  }
  v13 = *(_QWORD *)(v5 + 112);
  if (!v13)
    v13 = *(_QWORD *)(qword_102310300 + 112);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v13, a2, a4);
  v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x200) == 0)
  {
LABEL_18:
    if ((v10 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 108), a2, a4);
  v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x400) == 0)
  {
LABEL_19:
    if ((v10 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_43:
  v14 = *(_QWORD *)(v5 + 120);
  if (!v14)
    v14 = *(_QWORD *)(qword_102310300 + 120);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v14, a2, a4);
  v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x800) == 0)
  {
LABEL_20:
    if ((v10 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_46:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 128), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 192) & 0x1000) != 0)
LABEL_21:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 132), (int)a2, a4);
LABEL_22:
  if (*(int *)(v5 + 144) >= 1)
  {
    v11 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_DWORD *)(*(_QWORD *)(v5 + 136) + 4 * v11++), (int)a2, a4);
    while (v11 < *(int *)(v5 + 144));
  }
  v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x4000) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(_DWORD *)(v5 + 152), a2, a4);
    v12 = *(_DWORD *)(v5 + 192);
    if ((v12 & 0x8000) == 0)
    {
LABEL_27:
      if ((v12 & 0x10000) == 0)
        goto LABEL_28;
      goto LABEL_50;
    }
  }
  else if ((v12 & 0x8000) == 0)
  {
    goto LABEL_27;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(_DWORD *)(v5 + 156), a2, a4);
  v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x10000) == 0)
  {
LABEL_28:
    if ((v12 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_51;
  }
LABEL_50:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(_DWORD *)(v5 + 160), a2, a4);
  v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x20000) == 0)
  {
LABEL_29:
    if ((v12 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_52;
  }
LABEL_51:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(_DWORD *)(v5 + 164), a2, a4);
  v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x40000) == 0)
  {
LABEL_30:
    if ((v12 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_53;
  }
LABEL_52:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(_DWORD *)(v5 + 168), a2, a4);
  v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x80000) == 0)
  {
LABEL_31:
    if ((v12 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_54;
  }
LABEL_53:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(_DWORD *)(v5 + 172), a2, a4);
  v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x100000) == 0)
  {
LABEL_32:
    if ((v12 & 0x200000) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(22, *(_QWORD *)(v5 + 176), a2);
  }
LABEL_54:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(_DWORD *)(v5 + 184), a2, a4);
  if ((*(_DWORD *)(v5 + 192) & 0x200000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(22, *(_QWORD *)(v5 + 176), a2);
  return result;
}

uint64_t sub_1002C96CC(uint64_t a1, unint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  uint64_t v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  int v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  int v32;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v33;
  int v34;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v35;
  int v36;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v37;
  int v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v66;
  int v67;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 192);
  if ((v3 & 0x1FE) != 0)
  {
    if ((v3 & 2) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
      v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 4) != 0)
      v6 = v4 + 9;
    else
      v6 = v4;
    if ((v3 & 8) != 0)
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
      if ((v7 & 0x80000000) != 0)
      {
        v8 = 10;
      }
      else if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        v3 = *(_DWORD *)(a1 + 192);
      }
      else
      {
        v8 = 1;
      }
      v6 += v8 + 1;
    }
    if ((v3 & 0x10) != 0)
    {
      v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
      if ((v9 & 0x80000000) != 0)
      {
        v10 = 10;
      }
      else if (v9 >= 0x80)
      {
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
        v3 = *(_DWORD *)(a1 + 192);
      }
      else
      {
        v10 = 1;
      }
      v6 += v10 + 1;
    }
    if ((v3 & 0x80) != 0)
      v5 = v6 + 2;
    else
      v5 = v6;
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFF00) == 0)
    goto LABEL_71;
  if ((v3 & 0x100) != 0)
  {
    v11 = *(_QWORD *)(a1 + 112);
    if (!v11)
      v11 = *(_QWORD *)(qword_102310300 + 112);
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C53CC(v11, a2);
    v13 = (int)v12;
    if (v12 >= 0x80)
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
    else
      v14 = 1;
    v5 += v13 + v14 + 1;
    v3 = *(_DWORD *)(a1 + 192);
    if ((v3 & 0x200) == 0)
    {
LABEL_29:
      if ((v3 & 0x400) == 0)
        goto LABEL_30;
      goto LABEL_45;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_29;
  }
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 108);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    v16 = 1;
  }
  v5 += v16 + 1;
  if ((v3 & 0x400) == 0)
  {
LABEL_30:
    if ((v3 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_51;
  }
LABEL_45:
  v17 = *(_QWORD *)(a1 + 120);
  if (!v17)
    v17 = *(_QWORD *)(qword_102310300 + 120);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C77D0(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v5 += v19 + v20 + 1;
  v3 = *(_DWORD *)(a1 + 192);
  if ((v3 & 0x800) == 0)
  {
LABEL_31:
    if ((v3 & 0x1000) == 0)
      goto LABEL_32;
LABEL_57:
    v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 132);
    if ((v23 & 0x80000000) != 0)
    {
      v24 = 10;
    }
    else if (v23 >= 0x80)
    {
      v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
      v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      v24 = 1;
    }
    v5 += v24 + 1;
    if ((v3 & 0x4000) == 0)
    {
LABEL_33:
      if ((v3 & 0x8000) == 0)
        goto LABEL_71;
      goto LABEL_67;
    }
    goto LABEL_63;
  }
LABEL_51:
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 128);
  if ((v21 & 0x80000000) != 0)
  {
    v22 = 10;
  }
  else if (v21 >= 0x80)
  {
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
    v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    v22 = 1;
  }
  v5 += v22 + 1;
  if ((v3 & 0x1000) != 0)
    goto LABEL_57;
LABEL_32:
  if ((v3 & 0x4000) == 0)
    goto LABEL_33;
LABEL_63:
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 152);
  if (v25 >= 0x80)
  {
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
    v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    v26 = 1;
  }
  v5 += v26 + 1;
  if ((v3 & 0x8000) != 0)
  {
LABEL_67:
    v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 156);
    if (v27 >= 0x80)
    {
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2);
      v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      v28 = 1;
    }
    v5 += v28 + 2;
  }
LABEL_71:
  if ((v3 & 0xFF0000) == 0)
    goto LABEL_108;
  if ((v3 & 0x10000) != 0)
  {
    v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 160);
    if (v29 >= 0x80)
    {
      v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2);
      v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      v30 = 1;
    }
    v5 += v30 + 2;
    if ((v3 & 0x20000) == 0)
    {
LABEL_74:
      if ((v3 & 0x40000) == 0)
        goto LABEL_75;
      goto LABEL_87;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_74;
  }
  v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 164);
  if (v31 >= 0x80)
  {
    v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, a2);
    v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    v32 = 1;
  }
  v5 += v32 + 2;
  if ((v3 & 0x40000) == 0)
  {
LABEL_75:
    if ((v3 & 0x80000) == 0)
      goto LABEL_76;
    goto LABEL_91;
  }
LABEL_87:
  v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 168);
  if (v33 >= 0x80)
  {
    v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2);
    v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    v34 = 1;
  }
  v5 += v34 + 2;
  if ((v3 & 0x80000) == 0)
  {
LABEL_76:
    if ((v3 & 0x100000) == 0)
      goto LABEL_77;
LABEL_95:
    v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 184);
    if (v37 >= 0x80)
    {
      v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37, a2) + 2;
      v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      v38 = 3;
    }
    v5 += v38;
    if ((v3 & 0x200000) == 0)
      goto LABEL_108;
    goto LABEL_99;
  }
LABEL_91:
  v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 172);
  if (v35 >= 0x80)
  {
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35, a2) + 2;
    v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    v36 = 3;
  }
  v5 += v36;
  if ((v3 & 0x100000) != 0)
    goto LABEL_95;
LABEL_77:
  if ((v3 & 0x200000) == 0)
    goto LABEL_108;
LABEL_99:
  v39 = *(_QWORD *)(a1 + 176);
  v40 = *(unsigned __int8 *)(v39 + 23);
  v41 = v40;
  v42 = *(_QWORD *)(v39 + 8);
  if ((v40 & 0x80u) == 0)
    v43 = *(unsigned __int8 *)(v39 + 23);
  else
    v43 = v42;
  if (v43 >= 0x80)
  {
    v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v43, a2);
    v40 = *(unsigned __int8 *)(v39 + 23);
    v42 = *(_QWORD *)(v39 + 8);
    v41 = *(_BYTE *)(v39 + 23);
  }
  else
  {
    v44 = 1;
  }
  if (v41 < 0)
    v40 = v42;
  v5 += v44 + v40 + 2;
LABEL_108:
  v45 = *(_DWORD *)(a1 + 16);
  v46 = v45 + v5;
  if (v45 >= 1)
  {
    v47 = 0;
    do
    {
      v48 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C3530(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v47), a2);
      v49 = (int)v48;
      if (v48 >= 0x80)
        v50 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v48, a2);
      else
        v50 = 1;
      v46 += v49 + v50;
      ++v47;
    }
    while (v47 < *(int *)(a1 + 16));
  }
  v51 = *(_DWORD *)(a1 + 64);
  v52 = v51 + v46;
  if (v51 >= 1)
  {
    v53 = 0;
    do
    {
      v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C3CC8(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v53), a2);
      v55 = (int)v54;
      if (v54 >= 0x80)
        v56 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v54, a2);
      else
        v56 = 1;
      v52 += v55 + v56;
      ++v53;
    }
    while (v53 < *(int *)(a1 + 64));
  }
  v57 = *(_DWORD *)(a1 + 88);
  v58 = v57 + v52;
  if (v57 >= 1)
  {
    v59 = 0;
    do
    {
      v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002C4670(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v59), a2);
      v61 = (int)v60;
      if (v60 >= 0x80)
        v62 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60, a2);
      else
        v62 = 1;
      v58 += v61 + v62;
      ++v59;
    }
    while (v59 < *(int *)(a1 + 88));
  }
  v63 = *(_DWORD *)(a1 + 144);
  if (v63 < 1)
  {
    v65 = 0;
  }
  else
  {
    v64 = 0;
    v65 = 0;
    do
    {
      v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 136)
                                                                                             + 4 * v64);
      if ((v66 & 0x80000000) != 0)
      {
        v67 = 10;
      }
      else if (v66 >= 0x80)
      {
        v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v66, a2);
        v63 = *(_DWORD *)(a1 + 144);
      }
      else
      {
        v67 = 1;
      }
      v65 += v67;
      ++v64;
    }
    while (v64 < v63);
  }
  result = (v65 + v58 + v63);
  *(_DWORD *)(a1 + 188) = result;
  return result;
}

void sub_1002C9BD0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C7ABC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002C9C1C()
{
  return 1;
}

double sub_1002C9C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;

  if (a2 != a1)
  {
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8));
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = v4;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56), (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 56));
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80), (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 80));
    v6 = *(_BYTE *)(a1 + 104);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a2 + 104) = v6;
    v7 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    *(_DWORD *)(a2 + 108) = v7;
    v8 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a2 + 128) = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = v8;
    v9 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    result = *(double *)(a2 + 144);
    *(_QWORD *)(a2 + 136) = v9;
    v11 = *(_QWORD *)(a1 + 144);
    *(double *)(a1 + 144) = result;
    *(_QWORD *)(a2 + 144) = v11;
    LODWORD(v9) = *(_DWORD *)(a1 + 152);
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a2 + 152) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 156);
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
    *(_DWORD *)(a2 + 156) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    *(_DWORD *)(a2 + 160) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 164);
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
    *(_DWORD *)(a2 + 164) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 168);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
    *(_DWORD *)(a2 + 168) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 172);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(_DWORD *)(a2 + 172) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 184);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    *(_DWORD *)(a2 + 184) = v9;
    v12 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 176) = v12;
    LODWORD(v12) = *(_DWORD *)(a1 + 192);
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
    *(_DWORD *)(a2 + 192) = v12;
    LODWORD(v12) = *(_DWORD *)(a1 + 188);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
    *(_DWORD *)(a2 + 188) = v12;
  }
  return result;
}

_QWORD *sub_1002C9DD0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.Model");
}

uint64_t sub_1002C9DE0(uint64_t a1, _BYTE *a2)
{
  *(_QWORD *)a1 = off_10212C770;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_1002C9E2C(a1, a2);
  return a1;
}

void sub_1002C9E18(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_1002C9E2C(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 7603);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v6 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v6;
      v5 = *((_DWORD *)a2 + 4);
    }
    if ((v5 & 2) != 0)
    {
      v7 = a2[9];
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_BYTE *)(a1 + 9) = v7;
    }
  }
}

void sub_1002C9ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002C9EF0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C770;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002C9F00(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C770;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002C9F30()
{
  operator new();
}

uint64_t sub_1002C9F6C(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002C9F80(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v17 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
        if (!(_DWORD)result)
          return result;
        v11 = v17;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_BYTE *)(a1 + 8) = v11 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)this + 1) = v9;
LABEL_23:
        v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v9;
          v14 = (unsigned __int8 *)(v9 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_BYTE *)(a1 + 9) = v13 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002CA134(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  return result;
}

uint64_t sub_1002CA18C(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = 2 * (*(_DWORD *)(a1 + 16) & 1);
  if ((*(_DWORD *)(a1 + 16) & 2) != 0)
    v1 += 2;
  if (*(_DWORD *)(a1 + 16))
    v2 = v1;
  else
    v2 = 0;
  *(_DWORD *)(a1 + 12) = v2;
  return v2;
}

void sub_1002CA1B4(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002C9E2C(a1, lpsrc);
}

void sub_1002CA200(uint64_t a1, _BYTE *a2)
{
  if (a2 != (_BYTE *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002C9E2C(a1, a2);
  }
}

uint64_t sub_1002CA240()
{
  return 1;
}

_QWORD *sub_1002CA248@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.BundleIdFeatures");
}

void sub_1002CA258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 7922);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F2114();
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 44);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if ((v7 - 1) >= 4)
        sub_1018F20EC();
      *(_DWORD *)(a1 + 44) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 44);
    }
    if ((v5 & 4) != 0)
    {
      v8 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 44) |= 4u;
      v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v9, v8);
      v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 8) == 0)
      {
LABEL_14:
        if ((v5 & 0x10) == 0)
          return;
        goto LABEL_22;
      }
    }
    else if ((v5 & 8) == 0)
    {
      goto LABEL_14;
    }
    v10 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    v11 = *(std::string **)(a1 + 24);
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v11, v10);
    if ((*(_DWORD *)(a2 + 44) & 0x10) != 0)
    {
LABEL_22:
      v12 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 44) |= 0x10u;
      v13 = *(std::string **)(a1 + 32);
      if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v13, v12);
    }
  }
}

void sub_1002CA448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CA460(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = result[2];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[3];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  v5 = result[4];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    operator delete();
  }
  return result;
}

void sub_1002CA540(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C7E8;
  sub_1002CA460(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002CA570(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C7E8;
  sub_1002CA460(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002CA5B4()
{
  operator new();
}

uint64_t sub_1002CA600(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(result + 44);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0x100000001;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 44) & 8) != 0)
    {
      v3 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 44) & 0x10) != 0)
    {
      v4 = *(_QWORD *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1002CA6B8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  _BYTE *v19;
  void *v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v23 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
LABEL_24:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v12 = ((1 << v9) & 0x76B6) == 0) : (v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              sub_1018F2114();
            *(_DWORD *)(a1 + 44) |= 1u;
            *(_DWORD *)(a1 + 8) = v9;
          }
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            v11 = v13 + 1;
            *((_QWORD *)this + 1) = v11;
            goto LABEL_36;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if ((_DWORD)result)
        {
          v9 = v23;
          goto LABEL_24;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_36:
        v22 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v14 = v22;
        }
        else
        {
          v14 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v14 - 1 <= 3)
        {
          *(_DWORD *)(a1 + 44) |= 2u;
          *(_DWORD *)(a1 + 12) = v14;
        }
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 26)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_46:
        *(_DWORD *)(a1 + 44) |= 4u;
        v16 = *(void **)(a1 + 16);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 34)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_52:
        *(_DWORD *)(a1 + 44) |= 8u;
        v18 = *(void **)(a1 + 24);
        if (v18 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v18);
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 != 42)
          continue;
        *((_QWORD *)this + 1) = v19 + 1;
LABEL_58:
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v20 = *(void **)(a1 + 32);
        if (v20 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v20);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_46;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        goto LABEL_52;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_58;
        goto LABEL_19;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1002CAA50(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 32), a2);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4, *(_QWORD *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 44) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 32), a2);
  return result;
}

uint64_t sub_1002CAB00(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  int v25;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_50;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 44) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = v9;
    v11 = *(_QWORD *)(v8 + 8);
    if ((v9 & 0x80u) == 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = v11;
    if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
      v9 = *(unsigned __int8 *)(v8 + 23);
      v11 = *(_QWORD *)(v8 + 8);
      v3 = *(_DWORD *)(a1 + 44);
      v10 = *(_BYTE *)(v8 + 23);
    }
    else
    {
      v13 = 1;
    }
    if (v10 < 0)
      v9 = v11;
    v4 = (v4 + v13 + v9 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0)
        goto LABEL_50;
      goto LABEL_41;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = v15;
  v17 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = v17;
  if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v17 = *(_QWORD *)(v14 + 8);
    v3 = *(_DWORD *)(a1 + 44);
    v16 = *(_BYTE *)(v14 + 23);
  }
  else
  {
    v19 = 1;
  }
  if (v16 < 0)
    v15 = v17;
  v4 = (v4 + v19 + v15 + 1);
  if ((v3 & 0x10) != 0)
  {
LABEL_41:
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(unsigned __int8 *)(v20 + 23);
    v22 = v21;
    v23 = *(_QWORD *)(v20 + 8);
    if ((v21 & 0x80u) == 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = v23;
    if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24, a2);
      v21 = *(unsigned __int8 *)(v20 + 23);
      v23 = *(_QWORD *)(v20 + 8);
      v22 = *(_BYTE *)(v20 + 23);
    }
    else
    {
      v25 = 1;
    }
    if (v22 < 0)
      v21 = v23;
    v4 = (v4 + v25 + v21 + 1);
  }
LABEL_50:
  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

void sub_1002CACC4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002CA258(a1, (uint64_t)lpsrc);
}

void sub_1002CAD10(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002CA258(a1, a2);
  }
}

uint64_t sub_1002CAD50()
{
  return 1;
}

_QWORD *sub_1002CAD58@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ReceivedEventAction");
}

void sub_1002CAD68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 8253);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F2164();
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 44);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if ((v7 - 1) >= 2)
        sub_1018F213C();
      *(_DWORD *)(a1 + 44) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 44);
    }
    if ((v5 & 4) != 0)
    {
      v8 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 44) |= 4u;
      v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v9, v8);
      v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 8) == 0)
      {
LABEL_14:
        if ((v5 & 0x10) == 0)
          return;
        goto LABEL_22;
      }
    }
    else if ((v5 & 8) == 0)
    {
      goto LABEL_14;
    }
    v10 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    v11 = *(std::string **)(a1 + 24);
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v11, v10);
    if ((*(_DWORD *)(a2 + 44) & 0x10) != 0)
    {
LABEL_22:
      v12 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 44) |= 0x10u;
      v13 = *(std::string **)(a1 + 32);
      if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v13, v12);
    }
  }
}

void sub_1002CAF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002CAF70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C860;
  sub_1002CA460(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002CAFA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C860;
  sub_1002CA460(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002CAFE4()
{
  operator new();
}

uint64_t sub_1002CB034(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(result + 44);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0x10000000DLL;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 44) & 8) != 0)
    {
      v3 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 44) & 0x10) != 0)
    {
      v4 = *(_QWORD *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1002CB0F0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  _BYTE *v19;
  void *v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v23 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
LABEL_24:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v12 = ((1 << v9) & 0x76B6) == 0) : (v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              sub_1018F2164();
            *(_DWORD *)(a1 + 44) |= 1u;
            *(_DWORD *)(a1 + 8) = v9;
          }
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            v11 = v13 + 1;
            *((_QWORD *)this + 1) = v11;
            goto LABEL_36;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if ((_DWORD)result)
        {
          v9 = v23;
          goto LABEL_24;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_36:
        v22 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v14 = v22;
        }
        else
        {
          v14 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v14 - 1 <= 1)
        {
          *(_DWORD *)(a1 + 44) |= 2u;
          *(_DWORD *)(a1 + 12) = v14;
        }
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 26)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_46:
        *(_DWORD *)(a1 + 44) |= 4u;
        v16 = *(void **)(a1 + 16);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 34)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_52:
        *(_DWORD *)(a1 + 44) |= 8u;
        v18 = *(void **)(a1 + 24);
        if (v18 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v18);
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 != 42)
          continue;
        *((_QWORD *)this + 1) = v19 + 1;
LABEL_58:
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v20 = *(void **)(a1 + 32);
        if (v20 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v20);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_46;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        goto LABEL_52;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_58;
        goto LABEL_19;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1002CB488(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 32), a2);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4, *(_QWORD *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 44) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 32), a2);
  return result;
}

uint64_t sub_1002CB538(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  int v25;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_50;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 44) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = v9;
    v11 = *(_QWORD *)(v8 + 8);
    if ((v9 & 0x80u) == 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = v11;
    if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
      v9 = *(unsigned __int8 *)(v8 + 23);
      v11 = *(_QWORD *)(v8 + 8);
      v3 = *(_DWORD *)(a1 + 44);
      v10 = *(_BYTE *)(v8 + 23);
    }
    else
    {
      v13 = 1;
    }
    if (v10 < 0)
      v9 = v11;
    v4 = (v4 + v13 + v9 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0)
        goto LABEL_50;
      goto LABEL_41;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = v15;
  v17 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = v17;
  if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v17 = *(_QWORD *)(v14 + 8);
    v3 = *(_DWORD *)(a1 + 44);
    v16 = *(_BYTE *)(v14 + 23);
  }
  else
  {
    v19 = 1;
  }
  if (v16 < 0)
    v15 = v17;
  v4 = (v4 + v19 + v15 + 1);
  if ((v3 & 0x10) != 0)
  {
LABEL_41:
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(unsigned __int8 *)(v20 + 23);
    v22 = v21;
    v23 = *(_QWORD *)(v20 + 8);
    if ((v21 & 0x80u) == 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = v23;
    if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24, a2);
      v21 = *(unsigned __int8 *)(v20 + 23);
      v23 = *(_QWORD *)(v20 + 8);
      v22 = *(_BYTE *)(v20 + 23);
    }
    else
    {
      v25 = 1;
    }
    if (v22 < 0)
      v21 = v23;
    v4 = (v4 + v25 + v21 + 1);
  }
LABEL_50:
  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

void sub_1002CB6FC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002CAD68(a1, (uint64_t)lpsrc);
}

void sub_1002CB748(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002CAD68(a1, a2);
  }
}

uint64_t sub_1002CB788()
{
  return 1;
}

_QWORD *sub_1002CB790@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.RecordingRequest");
}

void sub_1002CB7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  uint64_t v9;
  _BYTE *v10;
  const std::string *v11;
  std::string *v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 8552);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 32);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F218C();
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_11:
        if ((v5 & 8) == 0)
          return;
        goto LABEL_21;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_11;
    }
    *(_DWORD *)(a1 + 40) |= 4u;
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      operator new();
    v10 = *(_BYTE **)(a2 + 16);
    if (!v10)
      v10 = *(_BYTE **)(qword_102310320 + 16);
    sub_1002C9E2C(v9, v10);
    if ((*(_DWORD *)(a2 + 40) & 8) != 0)
    {
LABEL_21:
      v11 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 8u;
      v12 = *(std::string **)(a1 + 24);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v12, v11);
    }
  }
}

void sub_1002CB980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CB998(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;

  v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[3];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  if ((_QWORD *)qword_102310320 != result)
  {
    result = (_QWORD *)result[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1002CBA64(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C8D8;
  sub_1002CB998(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002CBA94(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C8D8;
  sub_1002CB998(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002CBAD8()
{
  operator new();
}

uint64_t sub_1002CBB28(uint64_t result)
{
  char v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 2;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    v3 = *(_DWORD *)(result + 40);
    if ((v3 & 4) != 0)
    {
      v4 = *(_QWORD *)(result + 16);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16))
          *(_WORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v3 = *(_DWORD *)(result + 40);
      }
    }
    if ((v3 & 8) != 0)
    {
      v5 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1002CBBCC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  BOOL v11;
  _BYTE *v12;
  void *v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE *v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v26 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!(_DWORD)result)
            return result;
          v9 = v26;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v11 = ((1 << v9) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
            sub_1018F218C();
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 32) = v9;
        }
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 18)
        {
          *((_QWORD *)this + 1) = v12 + 1;
          goto LABEL_35;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_18;
LABEL_35:
        *(_DWORD *)(a1 + 40) |= 2u;
        v13 = *(void **)(a1 + 8);
        if (v13 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
        if (!(_DWORD)result)
          return result;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 26)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_41:
        *(_DWORD *)(a1 + 40) |= 4u;
        v15 = *(_QWORD *)(a1 + 16);
        if (!v15)
          operator new();
        v27 = 0;
        v16 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0;
        }
        else
        {
          v27 = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        v17 = *((_DWORD *)this + 14);
        v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 < v18)
        {
          v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
          if (sub_1002C9F80(v15, this, v20))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
              v21 = *((_DWORD *)this + 14);
              v22 = __OFSUB__(v21, 1);
              v23 = v21 - 1;
              if (v23 < 0 == v22)
                *((_DWORD *)this + 14) = v23;
              v24 = (_BYTE *)*((_QWORD *)this + 1);
              if ((unint64_t)v24 < *((_QWORD *)this + 2) && *v24 == 34)
              {
                *((_QWORD *)this + 1) = v24 + 1;
LABEL_55:
                *(_DWORD *)(a1 + 40) |= 8u;
                v25 = *(void **)(a1 + 24);
                if (v25 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
                  operator new();
                result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v25);
                if (!(_DWORD)result)
                  return result;
                if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  result = 1;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_41;
        goto LABEL_18;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_55;
        goto LABEL_18;
      default:
        v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002CBF80(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  }
LABEL_8:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102310320 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  return result;
}

uint64_t sub_1002CC024(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int v20;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_42;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      goto LABEL_22;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = v9;
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v9 = *(_QWORD *)(v6 + 8);
    v3 = *(_DWORD *)(a1 + 40);
    v8 = *(_BYTE *)(v6 + 23);
  }
  else
  {
    v11 = 1;
  }
  if (v8 < 0)
    v7 = v9;
  v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_42;
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    v12 = *(_QWORD *)(qword_102310320 + 16);
  v13 = 2 * (*(_DWORD *)(v12 + 16) & 1);
  if ((*(_DWORD *)(v12 + 16) & 2) != 0)
    v13 += 2;
  if (*(_DWORD *)(v12 + 16))
    v14 = v13;
  else
    v14 = 0;
  *(_DWORD *)(v12 + 12) = v14;
  v4 = (v4 + v14 + 2);
  if ((*(_DWORD *)(a1 + 40) & 8) != 0)
  {
LABEL_33:
    v15 = *(_QWORD *)(a1 + 24);
    v16 = *(unsigned __int8 *)(v15 + 23);
    v17 = v16;
    v18 = *(_QWORD *)(v15 + 8);
    if ((v16 & 0x80u) == 0)
      v19 = *(unsigned __int8 *)(v15 + 23);
    else
      v19 = v18;
    if (v19 >= 0x80)
    {
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v19, a2);
      v16 = *(unsigned __int8 *)(v15 + 23);
      v18 = *(_QWORD *)(v15 + 8);
      v17 = *(_BYTE *)(v15 + 23);
    }
    else
    {
      v20 = 1;
    }
    if (v17 < 0)
      v16 = v18;
    v4 = (v4 + v20 + v16 + 1);
  }
LABEL_42:
  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

void sub_1002CC19C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002CB7A0(a1, (uint64_t)lpsrc);
}

void sub_1002CC1E8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002CB7A0(a1, a2);
  }
}

uint64_t sub_1002CC228()
{
  return 1;
}

_QWORD *sub_1002CC230@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.AppLaunch");
}

void sub_1002CC240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 8771);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F21B4();
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
    }
  }
}

void sub_1002CC350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002CC368(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C950;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002CC398(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C950;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002CC3DC()
{
  operator new();
}

uint64_t sub_1002CC428(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 4;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1002CC478(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  _BYTE *v12;
  void *v13;
  uint64_t result;
  unsigned int v15;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v15 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
        if (!(_DWORD)result)
          return result;
        v9 = v15;
      }
      else
      {
        v9 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v10 = ((1 << v9) & 0x76B6) == 0) : (v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
          sub_1018F21B4();
        *(_DWORD *)(a1 + 24) |= 1u;
        *(_DWORD *)(a1 + 16) = v9;
      }
      v12 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 18)
      {
        *((_QWORD *)this + 1) = v12 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 24) |= 2u;
        v13 = *(void **)(a1 + 8);
        if (v13 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if (v7 == 2)
        goto LABEL_34;
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002CC680(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  return result;
}

uint64_t sub_1002CC6D8(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_22;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0)
          goto LABEL_22;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        goto LABEL_22;
    }
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = (v4 + v11 + v7 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_22:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1002CC7AC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002CC240(a1, (uint64_t)lpsrc);
}

void sub_1002CC7F8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002CC240(a1, a2);
  }
}

uint64_t sub_1002CC838()
{
  return 1;
}

_QWORD *sub_1002CC840@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.BacklightOn");
}

void sub_1002CC850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 8945);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      sub_1018F21DC();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_1002CC904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002CC91C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C9C8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002CC92C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212C9C8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002CC95C()
{
  operator new();
}

uint64_t sub_1002CC9A0(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 5;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002CC9B8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v8 = v12;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (v9 = ((1 << v8) & 0x76B6) == 0) : (v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0))
          sub_1018F21DC();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_1002CCB1C(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_1002CCB38(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002CCB90(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002CC850(a1, (uint64_t)lpsrc);
}

void sub_1002CCBDC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002CC850(a1, a2);
  }
}

uint64_t sub_1002CCC1C()
{
  return 1;
}

_QWORD *sub_1002CCC24@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.BatteryChargerConnected");
}

void sub_1002CCC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  std::string *v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 9226);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 32);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F2204();
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_11:
        if ((v5 & 8) == 0)
          return;
        goto LABEL_19;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_11;
    }
    v9 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    v10 = *(std::string **)(a1 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, v9);
    if ((*(_DWORD *)(a2 + 40) & 8) != 0)
    {
LABEL_19:
      v11 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 8u;
      v12 = *(std::string **)(a1 + 24);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v12, v11);
    }
  }
}

void sub_1002CCE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CCE20(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  v5 = result[3];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    operator delete();
  }
  return result;
}

void sub_1002CCF00(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CA40;
  sub_1002CCE20(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002CCF30(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CA40;
  sub_1002CCE20(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002CCF74()
{
  operator new();
}

uint64_t sub_1002CCFC4(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 14;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 40) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 40) & 8) != 0)
    {
      v4 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1002CD07C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  _BYTE *v11;
  void *v12;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  uint64_t result;
  unsigned int v18;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
LABEL_6:
      switch(TagFallback >> 3)
      {
        case 1u:
          v7 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v18 = 0;
          v8 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
            if (!(_DWORD)result)
              return result;
            v9 = v18;
          }
          else
          {
            v9 = *v8;
            *((_QWORD *)this + 1) = v8 + 1;
          }
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v10 = ((1 << v9) & 0x76B6) == 0) : (v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              sub_1018F2204();
            *(_DWORD *)(a1 + 40) |= 1u;
            *(_DWORD *)(a1 + 32) = v9;
          }
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 18)
          {
            *((_QWORD *)this + 1) = v11 + 1;
            goto LABEL_35;
          }
          continue;
        case 2u:
          v7 = TagFallback & 7;
          if (v7 != 2)
            goto LABEL_18;
LABEL_35:
          *(_DWORD *)(a1 + 40) |= 2u;
          v12 = *(void **)(a1 + 8);
          if (v12 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v12);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 26)
            continue;
          *((_QWORD *)this + 1) = v13 + 1;
LABEL_41:
          *(_DWORD *)(a1 + 40) |= 4u;
          v14 = *(void **)(a1 + 16);
          if (v14 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v14);
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 34)
            continue;
          *((_QWORD *)this + 1) = v15 + 1;
LABEL_47:
          *(_DWORD *)(a1 + 40) |= 8u;
          v16 = *(void **)(a1 + 24);
          if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
            || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          {
            continue;
          }
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        case 3u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_41;
          goto LABEL_18;
        case 4u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_47;
          goto LABEL_18;
        default:
          v7 = TagFallback & 7;
LABEL_18:
          if (v7 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
            continue;
          return 0;
      }
    }
    break;
  }
  TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
  *((_DWORD *)this + 8) = (_DWORD)TagFallback;
  if ((_DWORD)TagFallback)
    goto LABEL_6;
  return 1;
}

uint64_t sub_1002CD390(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4, *(_QWORD *)(v5 + 24), a2);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4, *(_QWORD *)(v5 + 24), a2);
  return result;
}

uint64_t sub_1002CD424(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_43;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      goto LABEL_22;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = v9;
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v9 = *(_QWORD *)(v6 + 8);
    v3 = *(_DWORD *)(a1 + 40);
    v8 = *(_BYTE *)(v6 + 23);
  }
  else
  {
    v11 = 1;
  }
  if (v8 < 0)
    v7 = v9;
  v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_43;
    goto LABEL_34;
  }
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = v13;
  v15 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v16 = *(unsigned __int8 *)(v12 + 23);
  else
    v16 = v15;
  if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v15 = *(_QWORD *)(v12 + 8);
    v3 = *(_DWORD *)(a1 + 40);
    v14 = *(_BYTE *)(v12 + 23);
  }
  else
  {
    v17 = 1;
  }
  if (v14 < 0)
    v13 = v15;
  v4 = (v4 + v17 + v13 + 1);
  if ((v3 & 8) != 0)
  {
LABEL_34:
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v20 = v19;
    v21 = *(_QWORD *)(v18 + 8);
    if ((v19 & 0x80u) == 0)
      v22 = *(unsigned __int8 *)(v18 + 23);
    else
      v22 = v21;
    if (v22 >= 0x80)
    {
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, a2);
      v19 = *(unsigned __int8 *)(v18 + 23);
      v21 = *(_QWORD *)(v18 + 8);
      v20 = *(_BYTE *)(v18 + 23);
    }
    else
    {
      v23 = 1;
    }
    if (v20 < 0)
      v19 = v21;
    v4 = (v4 + v23 + v19 + 1);
  }
LABEL_43:
  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

void sub_1002CD5B0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002CCC34(a1, (uint64_t)lpsrc);
}

void sub_1002CD5FC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002CCC34(a1, a2);
  }
}

uint64_t sub_1002CD63C()
{
  return 1;
}

_QWORD *sub_1002CD644@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.TruthLabelDonation");
}

void sub_1002CD654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 9408);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      sub_1018F222C();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_1002CD708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002CD720(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CAB8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002CD730(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CAB8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002CD760()
{
  operator new();
}

uint64_t sub_1002CD7A4(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 7;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002CD7BC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v8 = v12;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (v9 = ((1 << v8) & 0x76B6) == 0) : (v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0))
          sub_1018F222C();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_1002CD920(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_1002CD93C(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002CD994(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002CD654(a1, (uint64_t)lpsrc);
}

void sub_1002CD9E0(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002CD654(a1, a2);
  }
}

uint64_t sub_1002CDA20()
{
  return 1;
}

_QWORD *sub_1002CDA28@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ForcedRecording");
}

void sub_1002CDA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  std::string *v12;
  const std::string *v13;
  std::string *v14;
  const std::string *v15;
  std::string *v16;
  const std::string *v17;
  std::string *v18;
  const std::string *v19;
  std::string *v20;
  const std::string *v21;
  std::string *v22;
  const std::string *v23;
  std::string *v24;
  char v25;
  char v26;
  const std::string *v27;
  std::string *v28;
  const std::string *v29;
  std::string *v30;
  const std::string *v31;
  std::string *v32;
  char v33;
  _BYTE v34[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v34, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 10084);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v34, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v33, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v34);
  }
  v5 = *(_DWORD *)(a2 + 116);
  if (!(_BYTE)v5)
    goto LABEL_38;
  if ((v5 & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 64);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
      sub_1018F2254();
    *(_DWORD *)(a1 + 116) |= 1u;
    *(_DWORD *)(a1 + 64) = v6;
    v5 = *(_DWORD *)(a2 + 116);
  }
  if ((v5 & 2) != 0)
  {
    v7 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 116) |= 2u;
    v8 = *(std::string **)(a1 + 8);
    if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v8, v7);
    v5 = *(_DWORD *)(a2 + 116);
    if ((v5 & 4) == 0)
    {
LABEL_11:
      if ((v5 & 8) == 0)
        goto LABEL_12;
      goto LABEL_23;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_11;
  }
  v9 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 116) |= 4u;
  v10 = *(std::string **)(a1 + 16);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v10, v9);
  v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_12:
    if ((v5 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_23:
  v11 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 116) |= 8u;
  v12 = *(std::string **)(a1 + 24);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, v11);
  v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_13:
    if ((v5 & 0x20) == 0)
      goto LABEL_14;
LABEL_29:
    v15 = *(const std::string **)(a2 + 40);
    *(_DWORD *)(a1 + 116) |= 0x20u;
    v16 = *(std::string **)(a1 + 40);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v16, v15);
    v5 = *(_DWORD *)(a2 + 116);
    if ((v5 & 0x40) == 0)
    {
LABEL_15:
      if ((v5 & 0x80) == 0)
        goto LABEL_38;
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_26:
  v13 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 116) |= 0x10u;
  v14 = *(std::string **)(a1 + 32);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v14, v13);
  v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x20) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x40) == 0)
    goto LABEL_15;
LABEL_32:
  v17 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 116) |= 0x40u;
  v18 = *(std::string **)(a1 + 48);
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v18, v17);
  v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x80) != 0)
  {
LABEL_35:
    v19 = *(const std::string **)(a2 + 56);
    *(_DWORD *)(a1 + 116) |= 0x80u;
    v20 = *(std::string **)(a1 + 56);
    if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v20, v19);
    v5 = *(_DWORD *)(a2 + 116);
  }
LABEL_38:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    v21 = *(const std::string **)(a2 + 72);
    *(_DWORD *)(a1 + 116) |= 0x100u;
    v22 = *(std::string **)(a1 + 72);
    if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v22, v21);
    v5 = *(_DWORD *)(a2 + 116);
    if ((v5 & 0x200) == 0)
    {
LABEL_41:
      if ((v5 & 0x400) == 0)
        goto LABEL_42;
      goto LABEL_53;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_41;
  }
  v23 = *(const std::string **)(a2 + 80);
  *(_DWORD *)(a1 + 116) |= 0x200u;
  v24 = *(std::string **)(a1 + 80);
  if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v24, v23);
  v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_42:
    if ((v5 & 0x800) == 0)
      goto LABEL_43;
    goto LABEL_54;
  }
LABEL_53:
  v25 = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 116) |= 0x400u;
  *(_BYTE *)(a1 + 68) = v25;
  v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_43:
    if ((v5 & 0x1000) == 0)
      goto LABEL_44;
    goto LABEL_55;
  }
LABEL_54:
  v26 = *(_BYTE *)(a2 + 69);
  *(_DWORD *)(a1 + 116) |= 0x800u;
  *(_BYTE *)(a1 + 69) = v26;
  v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000) == 0)
      goto LABEL_45;
    goto LABEL_58;
  }
LABEL_55:
  v27 = *(const std::string **)(a2 + 88);
  *(_DWORD *)(a1 + 116) |= 0x1000u;
  v28 = *(std::string **)(a1 + 88);
  if (v28 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v28, v27);
  v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000) == 0)
      return;
    goto LABEL_61;
  }
LABEL_58:
  v29 = *(const std::string **)(a2 + 96);
  *(_DWORD *)(a1 + 116) |= 0x2000u;
  v30 = *(std::string **)(a1 + 96);
  if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v30, v29);
  if ((*(_DWORD *)(a2 + 116) & 0x4000) != 0)
  {
LABEL_61:
    v31 = *(const std::string **)(a2 + 104);
    *(_DWORD *)(a1 + 116) |= 0x4000u;
    v32 = *(std::string **)(a1 + 104);
    if (v32 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v32, v31);
  }
}

void sub_1002CDF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CDFAC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  v5 = result[3];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    operator delete();
  }
  v7 = result[4];
  if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    operator delete();
  }
  v9 = result[5];
  if ((_UNKNOWN *)v9 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v9)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    operator delete();
  }
  v10 = result[6];
  if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    operator delete();
  }
  v11 = result[7];
  if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    operator delete();
  }
  v12 = result[9];
  if ((_UNKNOWN *)v12 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    operator delete();
  }
  v13 = result[10];
  if ((_UNKNOWN *)v13 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    operator delete();
  }
  v14 = result[11];
  if ((_UNKNOWN *)v14 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    operator delete();
  }
  v15 = result[12];
  if ((_UNKNOWN *)v15 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    operator delete();
  }
  v16 = result[13];
  if ((_UNKNOWN *)v16 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    operator delete();
  }
  return result;
}

void sub_1002CE284(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CB30;
  sub_1002CDFAC(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002CE2B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CB30;
  sub_1002CDFAC(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002CE2F8()
{
  operator new();
}

uint64_t sub_1002CE358(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_BYTE *)(result + 116);
  if (v1)
  {
    *(_DWORD *)(result + 64) = 9;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 116) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 116) & 8) != 0)
    {
      v4 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 116) & 0x10) != 0)
    {
      v5 = *(_QWORD *)(result + 32);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 116) & 0x20) != 0)
    {
      v6 = *(_QWORD *)(result + 40);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 116) & 0x40) != 0)
    {
      v7 = *(_QWORD *)(result + 48);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 116) & 0x80) != 0)
    {
      v8 = *(_QWORD *)(result + 56);
      if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
  }
  v9 = *(_DWORD *)(result + 116);
  if ((v9 & 0xFF00) != 0)
  {
    if ((v9 & 0x100) != 0)
    {
      v10 = *(_QWORD *)(result + 72);
      if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 117) & 2) != 0)
    {
      v11 = *(_QWORD *)(result + 80);
      if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
    *(_WORD *)(result + 68) = 0;
    if ((*(_BYTE *)(result + 117) & 0x10) != 0)
    {
      v12 = *(_QWORD *)(result + 88);
      if ((_UNKNOWN *)v12 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(_BYTE **)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v12 = 0;
          *(_BYTE *)(v12 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 117) & 0x20) != 0)
    {
      v13 = *(_QWORD *)(result + 96);
      if ((_UNKNOWN *)v13 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(_BYTE **)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v13 = 0;
          *(_BYTE *)(v13 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 117) & 0x40) != 0)
    {
      v14 = *(_QWORD *)(result + 104);
      if ((_UNKNOWN *)v14 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v14 + 23) < 0)
        {
          **(_BYTE **)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v14 = 0;
          *(_BYTE *)(v14 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_1002CE618(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  int v12;
  char *v13;
  BOOL v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  _BYTE *v19;
  void *v20;
  _BYTE *v21;
  void *v22;
  _BYTE *v23;
  void *v24;
  _BYTE *v25;
  void *v26;
  _BYTE *v27;
  void *v28;
  _BYTE *v29;
  void *v30;
  _BYTE *v31;
  void *v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  unsigned int v36;
  _BYTE *v37;
  void *v38;
  _BYTE *v39;
  void *v40;
  _BYTE *v41;
  void *v42;
  uint64_t result;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_39;
        v44 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
LABEL_44:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v14 = ((1 << v9) & 0x76B6) == 0) : (v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              sub_1018F2254();
            *(_DWORD *)(a1 + 116) |= 1u;
            *(_DWORD *)(a1 + 64) = v9;
          }
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 18)
          {
            *((_QWORD *)this + 1) = v15 + 1;
            goto LABEL_56;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v44);
        if ((_DWORD)result)
        {
          v9 = v44;
          goto LABEL_44;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_39;
LABEL_56:
        *(_DWORD *)(a1 + 116) |= 2u;
        v16 = *(void **)(a1 + 8);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 26)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_62:
        *(_DWORD *)(a1 + 116) |= 4u;
        v18 = *(void **)(a1 + 16);
        if (v18 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 != 34)
          continue;
        *((_QWORD *)this + 1) = v19 + 1;
LABEL_68:
        *(_DWORD *)(a1 + 116) |= 8u;
        v20 = *(void **)(a1 + 24);
        if (v20 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v20);
        if (!(_DWORD)result)
          return result;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 42)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
LABEL_74:
        *(_DWORD *)(a1 + 116) |= 0x10u;
        v22 = *(void **)(a1 + 32);
        if (v22 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v22);
        if (!(_DWORD)result)
          return result;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 != 50)
          continue;
        *((_QWORD *)this + 1) = v23 + 1;
LABEL_80:
        *(_DWORD *)(a1 + 116) |= 0x20u;
        v24 = *(void **)(a1 + 40);
        if (v24 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v24);
        if (!(_DWORD)result)
          return result;
        v25 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 != 58)
          continue;
        *((_QWORD *)this + 1) = v25 + 1;
LABEL_86:
        *(_DWORD *)(a1 + 116) |= 0x40u;
        v26 = *(void **)(a1 + 48);
        if (v26 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v26);
        if (!(_DWORD)result)
          return result;
        v27 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 != 66)
          continue;
        *((_QWORD *)this + 1) = v27 + 1;
LABEL_92:
        *(_DWORD *)(a1 + 116) |= 0x80u;
        v28 = *(void **)(a1 + 56);
        if (v28 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v28);
        if (!(_DWORD)result)
          return result;
        v29 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v29 >= *((_QWORD *)this + 2) || *v29 != 74)
          continue;
        *((_QWORD *)this + 1) = v29 + 1;
LABEL_98:
        *(_DWORD *)(a1 + 116) |= 0x100u;
        v30 = *(void **)(a1 + 72);
        if (v30 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v30);
        if (!(_DWORD)result)
          return result;
        v31 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v31 >= *((_QWORD *)this + 2) || *v31 != 82)
          continue;
        *((_QWORD *)this + 1) = v31 + 1;
LABEL_104:
        *(_DWORD *)(a1 + 116) |= 0x200u;
        v32 = *(void **)(a1 + 80);
        if (v32 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v32);
        if (!(_DWORD)result)
          return result;
        v33 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v33 >= v10 || *v33 != 88)
          continue;
        v13 = v33 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_110:
        v46 = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v46);
          if (!(_DWORD)result)
            return result;
          v34 = v46;
          v35 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v34 = *v13;
          v35 = v13 + 1;
          *((_QWORD *)this + 1) = v35;
        }
        *(_BYTE *)(a1 + 68) = v34 != 0;
        *(_DWORD *)(a1 + 116) |= 0x400u;
        if ((unint64_t)v35 >= v10 || *v35 != 96)
          continue;
        v11 = v35 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_118:
        v45 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
          if (!(_DWORD)result)
            return result;
          v36 = v45;
          v37 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v36 = *v11;
          v37 = v11 + 1;
          *((_QWORD *)this + 1) = v37;
        }
        *(_BYTE *)(a1 + 69) = v36 != 0;
        v12 = *(_DWORD *)(a1 + 116) | 0x800;
        *(_DWORD *)(a1 + 116) = v12;
        if ((unint64_t)v37 >= v10 || *v37 != 106)
          continue;
        *((_QWORD *)this + 1) = v37 + 1;
LABEL_126:
        *(_DWORD *)(a1 + 116) = v12 | 0x1000;
        v38 = *(void **)(a1 + 88);
        if (v38 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v38);
        if (!(_DWORD)result)
          return result;
        v39 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v39 >= *((_QWORD *)this + 2) || *v39 != 114)
          continue;
        *((_QWORD *)this + 1) = v39 + 1;
LABEL_132:
        *(_DWORD *)(a1 + 116) |= 0x2000u;
        v40 = *(void **)(a1 + 96);
        if (v40 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v40);
        if (!(_DWORD)result)
          return result;
        v41 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v41 >= *((_QWORD *)this + 2) || *v41 != 122)
          continue;
        *((_QWORD *)this + 1) = v41 + 1;
LABEL_138:
        *(_DWORD *)(a1 + 116) |= 0x4000u;
        v42 = *(void **)(a1 + 104);
        if (v42 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v42);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_62;
        goto LABEL_39;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_68;
        goto LABEL_39;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_74;
        goto LABEL_39;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_80;
        goto LABEL_39;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_86;
        goto LABEL_39;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_92;
        goto LABEL_39;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_98;
        goto LABEL_39;
      case 0xAu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_104;
        goto LABEL_39;
      case 0xBu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_39;
        v13 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_110;
      case 0xCu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_39;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_118;
      case 0xDu:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_39;
        v12 = *(_DWORD *)(a1 + 116);
        goto LABEL_126;
      case 0xEu:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_39;
        goto LABEL_132;
      case 0xFu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_138;
        goto LABEL_39;
      default:
        v7 = TagFallback & 7;
LABEL_39:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1002CEE88(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 116);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 64), a2, a4);
    v6 = *(_DWORD *)(v5 + 116);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(5, *(_QWORD *)(v5 + 32), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(6, *(_QWORD *)(v5 + 40), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7, *(_QWORD *)(v5 + 48), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(8, *(_QWORD *)(v5 + 56), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(9, *(_QWORD *)(v5 + 72), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(10, *(_QWORD *)(v5 + 80), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned __int8 *)(v5 + 68), a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned __int8 *)(v5 + 69), a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(13, *(_QWORD *)(v5 + 88), a2);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(15, *(_QWORD *)(v5 + 104), a2);
  }
LABEL_30:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(14, *(_QWORD *)(v5 + 96), a2);
  if ((*(_DWORD *)(v5 + 116) & 0x4000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(15, *(_QWORD *)(v5 + 104), a2);
  return result;
}

uint64_t sub_1002CF050(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  int v79;

  v3 = *(_DWORD *)(a1 + 116);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_82;
  }
  if ((v3 & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      v3 = *(_DWORD *)(a1 + 116);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v6 + 1);
    if ((v3 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_21;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(v7 + 23);
  v9 = v8;
  v10 = *(_QWORD *)(v7 + 8);
  if ((v8 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = v10;
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v10 = *(_QWORD *)(v7 + 8);
    v3 = *(_DWORD *)(a1 + 116);
    v9 = *(_BYTE *)(v7 + 23);
  }
  else
  {
    v12 = 1;
  }
  if (v9 < 0)
    v8 = v10;
  v4 = (v4 + v12 + v8 + 1);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = v14;
    v16 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = v16;
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v16 = *(_QWORD *)(v13 + 8);
      v3 = *(_DWORD *)(a1 + 116);
      v15 = *(_BYTE *)(v13 + 23);
    }
    else
    {
      v18 = 1;
    }
    if (v15 < 0)
      v14 = v16;
    v4 = (v4 + v18 + v14 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0)
        goto LABEL_24;
      goto LABEL_46;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(unsigned __int8 *)(v19 + 23);
  v21 = v20;
  v22 = *(_QWORD *)(v19 + 8);
  if ((v20 & 0x80u) == 0)
    v23 = *(unsigned __int8 *)(v19 + 23);
  else
    v23 = v22;
  if (v23 >= 0x80)
  {
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23, a2);
    v20 = *(unsigned __int8 *)(v19 + 23);
    v22 = *(_QWORD *)(v19 + 8);
    v3 = *(_DWORD *)(a1 + 116);
    v21 = *(_BYTE *)(v19 + 23);
  }
  else
  {
    v24 = 1;
  }
  if (v21 < 0)
    v20 = v22;
  v4 = (v4 + v24 + v20 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_46:
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(unsigned __int8 *)(v25 + 23);
  v27 = v26;
  v28 = *(_QWORD *)(v25 + 8);
  if ((v26 & 0x80u) == 0)
    v29 = *(unsigned __int8 *)(v25 + 23);
  else
    v29 = v28;
  if (v29 >= 0x80)
  {
    v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29, a2);
    v26 = *(unsigned __int8 *)(v25 + 23);
    v28 = *(_QWORD *)(v25 + 8);
    v3 = *(_DWORD *)(a1 + 116);
    v27 = *(_BYTE *)(v25 + 23);
  }
  else
  {
    v30 = 1;
  }
  if (v27 < 0)
    v26 = v28;
  v4 = (v4 + v30 + v26 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_55:
  v31 = *(_QWORD *)(a1 + 40);
  v32 = *(unsigned __int8 *)(v31 + 23);
  v33 = v32;
  v34 = *(_QWORD *)(v31 + 8);
  if ((v32 & 0x80u) == 0)
    v35 = *(unsigned __int8 *)(v31 + 23);
  else
    v35 = v34;
  if (v35 >= 0x80)
  {
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v35, a2);
    v32 = *(unsigned __int8 *)(v31 + 23);
    v34 = *(_QWORD *)(v31 + 8);
    v3 = *(_DWORD *)(a1 + 116);
    v33 = *(_BYTE *)(v31 + 23);
  }
  else
  {
    v36 = 1;
  }
  if (v33 < 0)
    v32 = v34;
  v4 = (v4 + v36 + v32 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0)
      goto LABEL_82;
    goto LABEL_73;
  }
LABEL_64:
  v37 = *(_QWORD *)(a1 + 48);
  v38 = *(unsigned __int8 *)(v37 + 23);
  v39 = v38;
  v40 = *(_QWORD *)(v37 + 8);
  if ((v38 & 0x80u) == 0)
    v41 = *(unsigned __int8 *)(v37 + 23);
  else
    v41 = v40;
  if (v41 >= 0x80)
  {
    v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v41, a2);
    v38 = *(unsigned __int8 *)(v37 + 23);
    v40 = *(_QWORD *)(v37 + 8);
    v3 = *(_DWORD *)(a1 + 116);
    v39 = *(_BYTE *)(v37 + 23);
  }
  else
  {
    v42 = 1;
  }
  if (v39 < 0)
    v38 = v40;
  v4 = (v4 + v42 + v38 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_73:
    v43 = *(_QWORD *)(a1 + 56);
    v44 = *(unsigned __int8 *)(v43 + 23);
    v45 = v44;
    v46 = *(_QWORD *)(v43 + 8);
    if ((v44 & 0x80u) == 0)
      v47 = *(unsigned __int8 *)(v43 + 23);
    else
      v47 = v46;
    if (v47 >= 0x80)
    {
      v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v47, a2);
      v44 = *(unsigned __int8 *)(v43 + 23);
      v46 = *(_QWORD *)(v43 + 8);
      v3 = *(_DWORD *)(a1 + 116);
      v45 = *(_BYTE *)(v43 + 23);
    }
    else
    {
      v48 = 1;
    }
    if (v45 < 0)
      v44 = v46;
    v4 = (v4 + v48 + v44 + 1);
  }
LABEL_82:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_139;
  if ((v3 & 0x100) != 0)
  {
    v49 = *(_QWORD *)(a1 + 72);
    v50 = *(unsigned __int8 *)(v49 + 23);
    v51 = v50;
    v52 = *(_QWORD *)(v49 + 8);
    if ((v50 & 0x80u) == 0)
      v53 = *(unsigned __int8 *)(v49 + 23);
    else
      v53 = v52;
    if (v53 >= 0x80)
    {
      v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v53, a2);
      v50 = *(unsigned __int8 *)(v49 + 23);
      v52 = *(_QWORD *)(v49 + 8);
      v3 = *(_DWORD *)(a1 + 116);
      v51 = *(_BYTE *)(v49 + 23);
    }
    else
    {
      v54 = 1;
    }
    if (v51 < 0)
      v50 = v52;
    LODWORD(v4) = v4 + v54 + v50 + 1;
  }
  if ((v3 & 0x200) != 0)
  {
    v55 = *(_QWORD *)(a1 + 80);
    v56 = *(unsigned __int8 *)(v55 + 23);
    v57 = v56;
    v58 = *(_QWORD *)(v55 + 8);
    if ((v56 & 0x80u) == 0)
      v59 = *(unsigned __int8 *)(v55 + 23);
    else
      v59 = v58;
    if (v59 >= 0x80)
    {
      v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v59, a2);
      v56 = *(unsigned __int8 *)(v55 + 23);
      v58 = *(_QWORD *)(v55 + 8);
      v3 = *(_DWORD *)(a1 + 116);
      v57 = *(_BYTE *)(v55 + 23);
    }
    else
    {
      v60 = 1;
    }
    if (v57 < 0)
      v56 = v58;
    LODWORD(v4) = v4 + v60 + v56 + 1;
  }
  v61 = v4 + 2;
  if ((v3 & 0x400) == 0)
    v61 = v4;
  if ((v3 & 0x800) != 0)
    v4 = v61 + 2;
  else
    v4 = v61;
  if ((v3 & 0x1000) != 0)
  {
    v62 = *(_QWORD *)(a1 + 88);
    v63 = *(unsigned __int8 *)(v62 + 23);
    v64 = v63;
    v65 = *(_QWORD *)(v62 + 8);
    if ((v63 & 0x80u) == 0)
      v66 = *(unsigned __int8 *)(v62 + 23);
    else
      v66 = v65;
    if (v66 >= 0x80)
    {
      v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v66, a2);
      v63 = *(unsigned __int8 *)(v62 + 23);
      v65 = *(_QWORD *)(v62 + 8);
      v3 = *(_DWORD *)(a1 + 116);
      v64 = *(_BYTE *)(v62 + 23);
    }
    else
    {
      v67 = 1;
    }
    if (v64 < 0)
      v63 = v65;
    v4 = (v4 + v67 + v63 + 1);
    if ((v3 & 0x2000) == 0)
    {
LABEL_110:
      if ((v3 & 0x4000) == 0)
        goto LABEL_139;
      goto LABEL_130;
    }
  }
  else if ((v3 & 0x2000) == 0)
  {
    goto LABEL_110;
  }
  v68 = *(_QWORD *)(a1 + 96);
  v69 = *(unsigned __int8 *)(v68 + 23);
  v70 = v69;
  v71 = *(_QWORD *)(v68 + 8);
  if ((v69 & 0x80u) == 0)
    v72 = *(unsigned __int8 *)(v68 + 23);
  else
    v72 = v71;
  if (v72 >= 0x80)
  {
    v73 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v72, a2);
    v69 = *(unsigned __int8 *)(v68 + 23);
    v71 = *(_QWORD *)(v68 + 8);
    v3 = *(_DWORD *)(a1 + 116);
    v70 = *(_BYTE *)(v68 + 23);
  }
  else
  {
    v73 = 1;
  }
  if (v70 < 0)
    v69 = v71;
  v4 = (v4 + v73 + v69 + 1);
  if ((v3 & 0x4000) != 0)
  {
LABEL_130:
    v74 = *(_QWORD *)(a1 + 104);
    v75 = *(unsigned __int8 *)(v74 + 23);
    v76 = v75;
    v77 = *(_QWORD *)(v74 + 8);
    if ((v75 & 0x80u) == 0)
      v78 = *(unsigned __int8 *)(v74 + 23);
    else
      v78 = v77;
    if (v78 >= 0x80)
    {
      v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v78, a2);
      v75 = *(unsigned __int8 *)(v74 + 23);
      v77 = *(_QWORD *)(v74 + 8);
      v76 = *(_BYTE *)(v74 + 23);
    }
    else
    {
      v79 = 1;
    }
    if (v76 < 0)
      v75 = v77;
    v4 = (v4 + v79 + v75 + 1);
  }
LABEL_139:
  *(_DWORD *)(a1 + 112) = v4;
  return v4;
}

void sub_1002CF52C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002CDA38(a1, (uint64_t)lpsrc);
}

void sub_1002CF578(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002CDA38(a1, a2);
  }
}

uint64_t sub_1002CF5B8()
{
  return 1;
}

_QWORD *sub_1002CF5C0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.HomeKitAccessory");
}

void sub_1002CF5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  std::string *v12;
  const std::string *v13;
  std::string *v14;
  const std::string *v15;
  std::string *v16;
  const std::string *v17;
  std::string *v18;
  const std::string *v19;
  std::string *v20;
  char v21;
  char v22;
  const std::string *v23;
  std::string *v24;
  char v25;
  _BYTE v26[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v26, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 10670);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v25, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  v5 = *(_DWORD *)(a2 + 84);
  if (!(_BYTE)v5)
    goto LABEL_38;
  if ((v5 & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 48);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
      sub_1018F227C();
    *(_DWORD *)(a1 + 84) |= 1u;
    *(_DWORD *)(a1 + 48) = v6;
    v5 = *(_DWORD *)(a2 + 84);
  }
  if ((v5 & 2) != 0)
  {
    v7 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 84) |= 2u;
    v8 = *(std::string **)(a1 + 8);
    if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v8, v7);
    v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 4) == 0)
    {
LABEL_11:
      if ((v5 & 8) == 0)
        goto LABEL_12;
      goto LABEL_23;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_11;
  }
  v9 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 84) |= 4u;
  v10 = *(std::string **)(a1 + 16);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v10, v9);
  v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_12:
    if ((v5 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_23:
  v11 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 84) |= 8u;
  v12 = *(std::string **)(a1 + 24);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, v11);
  v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_13:
    if ((v5 & 0x20) == 0)
      goto LABEL_14;
LABEL_29:
    v15 = *(const std::string **)(a2 + 40);
    *(_DWORD *)(a1 + 84) |= 0x20u;
    v16 = *(std::string **)(a1 + 40);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v16, v15);
    v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 0x40) == 0)
    {
LABEL_15:
      if ((v5 & 0x80) == 0)
        goto LABEL_38;
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_26:
  v13 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 84) |= 0x10u;
  v14 = *(std::string **)(a1 + 32);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v14, v13);
  v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x20) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x40) == 0)
    goto LABEL_15;
LABEL_32:
  v17 = *(const std::string **)(a2 + 56);
  *(_DWORD *)(a1 + 84) |= 0x40u;
  v18 = *(std::string **)(a1 + 56);
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v18, v17);
  v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x80) != 0)
  {
LABEL_35:
    v19 = *(const std::string **)(a2 + 64);
    *(_DWORD *)(a1 + 84) |= 0x80u;
    v20 = *(std::string **)(a1 + 64);
    if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v20, v19);
    v5 = *(_DWORD *)(a2 + 84);
  }
LABEL_38:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) == 0)
  {
    if ((v5 & 0x200) == 0)
      goto LABEL_41;
LABEL_44:
    v22 = *(_BYTE *)(a2 + 53);
    *(_DWORD *)(a1 + 84) |= 0x200u;
    *(_BYTE *)(a1 + 53) = v22;
    if ((*(_DWORD *)(a2 + 84) & 0x400) == 0)
      return;
    goto LABEL_45;
  }
  v21 = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 84) |= 0x100u;
  *(_BYTE *)(a1 + 52) = v21;
  v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x200) != 0)
    goto LABEL_44;
LABEL_41:
  if ((v5 & 0x400) == 0)
    return;
LABEL_45:
  v23 = *(const std::string **)(a2 + 72);
  *(_DWORD *)(a1 + 84) |= 0x400u;
  v24 = *(std::string **)(a1 + 72);
  if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v24, v23);
}

void sub_1002CF9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CF9D4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  v5 = result[3];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    operator delete();
  }
  v7 = result[4];
  if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    operator delete();
  }
  v9 = result[5];
  if ((_UNKNOWN *)v9 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v9)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    operator delete();
  }
  v10 = result[7];
  if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    operator delete();
  }
  v11 = result[8];
  if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    operator delete();
  }
  v12 = result[9];
  if ((_UNKNOWN *)v12 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    operator delete();
  }
  return result;
}

void sub_1002CFBCC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CBA8;
  sub_1002CF9D4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002CFBFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CBA8;
  sub_1002CF9D4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002CFC40()
{
  operator new();
}

uint64_t sub_1002CFC98(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(_BYTE *)(result + 84);
  if (v1)
  {
    *(_DWORD *)(result + 48) = 10;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 84) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 84) & 8) != 0)
    {
      v4 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 84) & 0x10) != 0)
    {
      v5 = *(_QWORD *)(result + 32);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 84) & 0x20) != 0)
    {
      v6 = *(_QWORD *)(result + 40);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 84) & 0x40) != 0)
    {
      v7 = *(_QWORD *)(result + 56);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 84) & 0x80) != 0)
    {
      v8 = *(_QWORD *)(result + 64);
      if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
  }
  v9 = *(_DWORD *)(result + 84);
  if ((v9 & 0xFF00) != 0)
  {
    *(_WORD *)(result + 52) = 0;
    if ((v9 & 0x400) != 0)
    {
      v10 = *(_QWORD *)(result + 72);
      if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 84) = 0;
  return result;
}

uint64_t sub_1002CFE68(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  BOOL v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  _BYTE *v19;
  void *v20;
  _BYTE *v21;
  void *v22;
  _BYTE *v23;
  void *v24;
  _BYTE *v25;
  void *v26;
  _BYTE *v27;
  void *v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE *v33;
  void *v34;
  uint64_t result;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v36 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
LABEL_37:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v14 = ((1 << v9) & 0x76B6) == 0) : (v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              sub_1018F227C();
            *(_DWORD *)(a1 + 84) |= 1u;
            *(_DWORD *)(a1 + 48) = v9;
          }
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 18)
          {
            *((_QWORD *)this + 1) = v15 + 1;
            goto LABEL_49;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v36);
        if ((_DWORD)result)
        {
          v9 = v36;
          goto LABEL_37;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_32;
LABEL_49:
        *(_DWORD *)(a1 + 84) |= 2u;
        v16 = *(void **)(a1 + 8);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 26)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_55:
        *(_DWORD *)(a1 + 84) |= 4u;
        v18 = *(void **)(a1 + 16);
        if (v18 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 != 34)
          continue;
        *((_QWORD *)this + 1) = v19 + 1;
LABEL_61:
        *(_DWORD *)(a1 + 84) |= 8u;
        v20 = *(void **)(a1 + 24);
        if (v20 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v20);
        if (!(_DWORD)result)
          return result;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 42)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 84) |= 0x10u;
        v22 = *(void **)(a1 + 32);
        if (v22 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v22);
        if (!(_DWORD)result)
          return result;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 != 50)
          continue;
        *((_QWORD *)this + 1) = v23 + 1;
LABEL_73:
        *(_DWORD *)(a1 + 84) |= 0x20u;
        v24 = *(void **)(a1 + 40);
        if (v24 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v24);
        if (!(_DWORD)result)
          return result;
        v25 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 != 58)
          continue;
        *((_QWORD *)this + 1) = v25 + 1;
LABEL_79:
        *(_DWORD *)(a1 + 84) |= 0x40u;
        v26 = *(void **)(a1 + 56);
        if (v26 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v26);
        if (!(_DWORD)result)
          return result;
        v27 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 != 66)
          continue;
        *((_QWORD *)this + 1) = v27 + 1;
LABEL_85:
        *(_DWORD *)(a1 + 84) |= 0x80u;
        v28 = *(void **)(a1 + 64);
        if (v28 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v28);
        if (!(_DWORD)result)
          return result;
        v29 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v29 >= v10 || *v29 != 72)
          continue;
        v12 = v29 + 1;
        *((_QWORD *)this + 1) = v12;
LABEL_91:
        v38 = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v38);
          if (!(_DWORD)result)
            return result;
          v30 = v38;
          v31 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v30 = *v12;
          v31 = v12 + 1;
          *((_QWORD *)this + 1) = v31;
        }
        *(_BYTE *)(a1 + 52) = v30 != 0;
        *(_DWORD *)(a1 + 84) |= 0x100u;
        if ((unint64_t)v31 >= v10 || *v31 != 80)
          continue;
        v11 = v31 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_99:
        v37 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v32 = v37;
          v33 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v32 = *v11;
          v33 = v11 + 1;
          *((_QWORD *)this + 1) = v33;
        }
        *(_BYTE *)(a1 + 53) = v32 != 0;
        v13 = *(_DWORD *)(a1 + 84) | 0x200;
        *(_DWORD *)(a1 + 84) = v13;
        if ((unint64_t)v33 >= v10 || *v33 != 90)
          continue;
        *((_QWORD *)this + 1) = v33 + 1;
LABEL_107:
        *(_DWORD *)(a1 + 84) = v13 | 0x400;
        v34 = *(void **)(a1 + 72);
        if (v34 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v34);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_55;
        goto LABEL_32;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_61;
        goto LABEL_32;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_67;
        goto LABEL_32;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_73;
        goto LABEL_32;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_79;
        goto LABEL_32;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_85;
        goto LABEL_32;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v12 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_91;
      case 0xAu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_99;
      case 0xBu:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_32;
        v13 = *(_DWORD *)(a1 + 84);
        goto LABEL_107;
      default:
        v7 = TagFallback & 7;
LABEL_32:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1002D04E8(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 84);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 48), a2, a4);
    v6 = *(_DWORD *)(v5 + 84);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(5, *(_QWORD *)(v5 + 32), a2);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(6, *(_QWORD *)(v5 + 40), a2);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7, *(_QWORD *)(v5 + 56), a2);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(8, *(_QWORD *)(v5 + 64), a2);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 52), a2, a4);
  v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(11, *(_QWORD *)(v5 + 72), a2);
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 53), a2, a4);
  if ((*(_DWORD *)(v5 + 84) & 0x400) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(11, *(_QWORD *)(v5 + 72), a2);
  return result;
}

uint64_t sub_1002D0640(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  int v55;

  v3 = *(_DWORD *)(a1 + 84);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_82;
  }
  if ((v3 & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      v3 = *(_DWORD *)(a1 + 84);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v6 + 1);
    if ((v3 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_21;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(v7 + 23);
  v9 = v8;
  v10 = *(_QWORD *)(v7 + 8);
  if ((v8 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = v10;
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v10 = *(_QWORD *)(v7 + 8);
    v3 = *(_DWORD *)(a1 + 84);
    v9 = *(_BYTE *)(v7 + 23);
  }
  else
  {
    v12 = 1;
  }
  if (v9 < 0)
    v8 = v10;
  v4 = (v4 + v12 + v8 + 1);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = v14;
    v16 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = v16;
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v16 = *(_QWORD *)(v13 + 8);
      v3 = *(_DWORD *)(a1 + 84);
      v15 = *(_BYTE *)(v13 + 23);
    }
    else
    {
      v18 = 1;
    }
    if (v15 < 0)
      v14 = v16;
    v4 = (v4 + v18 + v14 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0)
        goto LABEL_24;
      goto LABEL_46;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(unsigned __int8 *)(v19 + 23);
  v21 = v20;
  v22 = *(_QWORD *)(v19 + 8);
  if ((v20 & 0x80u) == 0)
    v23 = *(unsigned __int8 *)(v19 + 23);
  else
    v23 = v22;
  if (v23 >= 0x80)
  {
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23, a2);
    v20 = *(unsigned __int8 *)(v19 + 23);
    v22 = *(_QWORD *)(v19 + 8);
    v3 = *(_DWORD *)(a1 + 84);
    v21 = *(_BYTE *)(v19 + 23);
  }
  else
  {
    v24 = 1;
  }
  if (v21 < 0)
    v20 = v22;
  v4 = (v4 + v24 + v20 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_46:
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(unsigned __int8 *)(v25 + 23);
  v27 = v26;
  v28 = *(_QWORD *)(v25 + 8);
  if ((v26 & 0x80u) == 0)
    v29 = *(unsigned __int8 *)(v25 + 23);
  else
    v29 = v28;
  if (v29 >= 0x80)
  {
    v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29, a2);
    v26 = *(unsigned __int8 *)(v25 + 23);
    v28 = *(_QWORD *)(v25 + 8);
    v3 = *(_DWORD *)(a1 + 84);
    v27 = *(_BYTE *)(v25 + 23);
  }
  else
  {
    v30 = 1;
  }
  if (v27 < 0)
    v26 = v28;
  v4 = (v4 + v30 + v26 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_55:
  v31 = *(_QWORD *)(a1 + 40);
  v32 = *(unsigned __int8 *)(v31 + 23);
  v33 = v32;
  v34 = *(_QWORD *)(v31 + 8);
  if ((v32 & 0x80u) == 0)
    v35 = *(unsigned __int8 *)(v31 + 23);
  else
    v35 = v34;
  if (v35 >= 0x80)
  {
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v35, a2);
    v32 = *(unsigned __int8 *)(v31 + 23);
    v34 = *(_QWORD *)(v31 + 8);
    v3 = *(_DWORD *)(a1 + 84);
    v33 = *(_BYTE *)(v31 + 23);
  }
  else
  {
    v36 = 1;
  }
  if (v33 < 0)
    v32 = v34;
  v4 = (v4 + v36 + v32 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0)
      goto LABEL_82;
    goto LABEL_73;
  }
LABEL_64:
  v37 = *(_QWORD *)(a1 + 56);
  v38 = *(unsigned __int8 *)(v37 + 23);
  v39 = v38;
  v40 = *(_QWORD *)(v37 + 8);
  if ((v38 & 0x80u) == 0)
    v41 = *(unsigned __int8 *)(v37 + 23);
  else
    v41 = v40;
  if (v41 >= 0x80)
  {
    v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v41, a2);
    v38 = *(unsigned __int8 *)(v37 + 23);
    v40 = *(_QWORD *)(v37 + 8);
    v3 = *(_DWORD *)(a1 + 84);
    v39 = *(_BYTE *)(v37 + 23);
  }
  else
  {
    v42 = 1;
  }
  if (v39 < 0)
    v38 = v40;
  v4 = (v4 + v42 + v38 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_73:
    v43 = *(_QWORD *)(a1 + 64);
    v44 = *(unsigned __int8 *)(v43 + 23);
    v45 = v44;
    v46 = *(_QWORD *)(v43 + 8);
    if ((v44 & 0x80u) == 0)
      v47 = *(unsigned __int8 *)(v43 + 23);
    else
      v47 = v46;
    if (v47 >= 0x80)
    {
      v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v47, a2);
      v44 = *(unsigned __int8 *)(v43 + 23);
      v46 = *(_QWORD *)(v43 + 8);
      v3 = *(_DWORD *)(a1 + 84);
      v45 = *(_BYTE *)(v43 + 23);
    }
    else
    {
      v48 = 1;
    }
    if (v45 < 0)
      v44 = v46;
    v4 = (v4 + v48 + v44 + 1);
  }
LABEL_82:
  if ((v3 & 0xFF00) != 0)
  {
    v49 = v4 + 2;
    if ((v3 & 0x100) == 0)
      v49 = v4;
    if ((v3 & 0x200) != 0)
      v4 = v49 + 2;
    else
      v4 = v49;
    if ((v3 & 0x400) != 0)
    {
      v50 = *(_QWORD *)(a1 + 72);
      v51 = *(unsigned __int8 *)(v50 + 23);
      v52 = v51;
      v53 = *(_QWORD *)(v50 + 8);
      if ((v51 & 0x80u) == 0)
        v54 = *(unsigned __int8 *)(v50 + 23);
      else
        v54 = v53;
      if (v54 >= 0x80)
      {
        v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v54, a2);
        v51 = *(unsigned __int8 *)(v50 + 23);
        v53 = *(_QWORD *)(v50 + 8);
        v52 = *(_BYTE *)(v50 + 23);
      }
      else
      {
        v55 = 1;
      }
      if (v52 < 0)
        v51 = v53;
      v4 = (v4 + v55 + v51 + 1);
    }
  }
  *(_DWORD *)(a1 + 80) = v4;
  return v4;
}

void sub_1002D09B0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002CF5D0(a1, (uint64_t)lpsrc);
}

void sub_1002D09FC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002CF5D0(a1, a2);
  }
}

uint64_t sub_1002D0A3C()
{
  return 1;
}

_QWORD *sub_1002D0A44@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.HomeKitScene");
}

void sub_1002D0A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 10947);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_10;
      }
    }
    else if ((*(_BYTE *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 28) |= 2u;
    *(_DWORD *)(a1 + 12) = v7;
    if ((*(_DWORD *)(a2 + 28) & 4) == 0)
      return;
LABEL_10:
    v8 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 4u;
    v9 = *(std::string **)(a1 + 16);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v9, v8);
  }
}

void sub_1002D0B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D0B78(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CC20;
  sub_1000257AC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D0BA8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CC20;
  sub_1000257AC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D0BEC()
{
  operator new();
}

uint64_t sub_1002D0C38(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1002D0C84(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  _BYTE *v16;
  void *v17;
  uint64_t result;

  v5 = (unsigned int *)(a1 + 8);
  v6 = (unsigned int *)(a1 + 12);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v7 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v9 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v10 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v13 = (char *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
          if ((unint64_t)v13 >= v12 || *v13 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
            if (!(_DWORD)result)
              return result;
            v14 = (_BYTE *)*((_QWORD *)this + 1);
            v12 = *((_QWORD *)this + 2);
          }
          else
          {
            *v5 = *v13;
            v14 = v13 + 1;
            *((_QWORD *)this + 1) = v14;
          }
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v14 < v12 && *v14 == 16)
          {
            v15 = v14 + 1;
            *((_QWORD *)this + 1) = v15;
            goto LABEL_27;
          }
        }
        if (v9 != 2)
          break;
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v15 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
LABEL_27:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v15;
          v16 = v15 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        v11 = *(_DWORD *)(a1 + 28) | 2;
        *(_DWORD *)(a1 + 28) = v11;
        if ((unint64_t)v16 < v12 && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_35;
        }
      }
      if (v9 != 3)
        break;
      v10 = TagFallback & 7;
      if (v10 != 2)
        goto LABEL_19;
      v11 = *(_DWORD *)(a1 + 28);
LABEL_35:
      *(_DWORD *)(a1 + 28) = v11 | 4;
      v17 = *(void **)(a1 + 16);
      if (v17 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v17);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v10 = TagFallback & 7;
LABEL_19:
    if (v10 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002D0EB4(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
  return result;
}

uint64_t sub_1002D0F2C(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_24;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = v9;
    v11 = *(_QWORD *)(v8 + 8);
    if ((v9 & 0x80u) == 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = v11;
    if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
      v9 = *(unsigned __int8 *)(v8 + 23);
      v11 = *(_QWORD *)(v8 + 8);
      v10 = *(_BYTE *)(v8 + 23);
    }
    else
    {
      v13 = 1;
    }
    if (v10 < 0)
      v9 = v11;
    v4 = (v4 + v13 + v9 + 1);
  }
LABEL_24:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_1002D1018(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D0A54(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002D1064()
{
  return 1;
}

_QWORD *sub_1002D106C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.NowPlayingOutputDevice");
}

uint64_t sub_1002D107C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_10212CC98;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = 12;
  *(_QWORD *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1002D1100(a1, a2);
  return a1;
}

void sub_1002D10E0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t *v2;

  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_1002D1100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  const std::string *v12;
  std::string *v13;
  int v14;
  const std::string *v15;
  std::string *v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  _BYTE v20[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v20, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 11300);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v19, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v20);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), *(_DWORD *)(a2 + 40) + *(_DWORD *)(a1 + 40));
  if (*(int *)(a2 + 40) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 44);
      v8 = *(int *)(a1 + 40);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), v7 + 1);
          v7 = *(_DWORD *)(a1 + 44);
        }
        *(_DWORD *)(a1 + 44) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = v8 + 1;
      sub_1002D0A54(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 40));
  }
  LOBYTE(v10) = *(_BYTE *)(a2 + 68);
  if (!(_BYTE)v10)
    return;
  if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
    v11 = *(_DWORD *)(a2 + 16);
    if (v11 - 31 >= 0x19 && (v11 > 0xE || ((1 << v11) & 0x76B6) == 0))
      sub_1018F22A4();
    *(_DWORD *)(a1 + 68) |= 1u;
    *(_DWORD *)(a1 + 16) = v11;
    v10 = *(_DWORD *)(a2 + 68);
  }
  if ((v10 & 2) == 0)
  {
    if ((v10 & 4) == 0)
      goto LABEL_19;
LABEL_25:
    v14 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 68) |= 4u;
    *(_DWORD *)(a1 + 20) = v14;
    v10 = *(_DWORD *)(a2 + 68);
    if ((v10 & 8) == 0)
    {
LABEL_20:
      if ((v10 & 0x20) == 0)
        return;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  v12 = *(const std::string **)(a2 + 8);
  *(_DWORD *)(a1 + 68) |= 2u;
  v13 = *(std::string **)(a1 + 8);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v13, v12);
  v10 = *(_DWORD *)(a2 + 68);
  if ((v10 & 4) != 0)
    goto LABEL_25;
LABEL_19:
  if ((v10 & 8) == 0)
    goto LABEL_20;
LABEL_26:
  v15 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 68) |= 8u;
  v16 = *(std::string **)(a1 + 24);
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v16, v15);
  if ((*(_DWORD *)(a2 + 68) & 0x20) != 0)
  {
LABEL_29:
    *(_DWORD *)(a1 + 68) |= 0x20u;
    v17 = *(_QWORD *)(a1 + 56);
    if (!v17)
      operator new();
    v18 = *(_BYTE **)(a2 + 56);
    if (!v18)
      v18 = *(_BYTE **)(qword_102310360 + 56);
    sub_1002C9E2C(v17, v18);
  }
}

void sub_1002D13F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D140C(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_10212CC98;
  v2 = a1 + 4;
  sub_1002D144C(a1);
  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_1002D144C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;

  v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[3];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  if ((_QWORD *)qword_102310360 != result)
  {
    result = (_QWORD *)result[7];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1002D151C(uint64_t *a1)
{
  sub_1002D140C(a1);
  operator delete();
}

void sub_1002D1540()
{
  operator new();
}

uint64_t sub_1002D1598(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = *(_BYTE *)(result + 68);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 12;
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 20) = 0;
    if ((*(_BYTE *)(result + 68) & 8) != 0)
    {
      v4 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 68) & 0x20) != 0)
    {
      v5 = *(_QWORD *)(result + 56);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 16))
          *(_WORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
      }
    }
  }
  if (*(int *)(result + 40) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v6);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 40));
  }
  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 68) = 0;
  return result;
}

uint64_t sub_1002D1690(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  char *v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  int v14;
  uint64_t result;
  BOOL v16;
  _BYTE *v17;
  void *v18;
  _BYTE *v19;
  _BYTE *v20;
  void *v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;

  v5 = (unsigned int *)(a1 + 20);
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32);
LABEL_2:
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v44 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v44);
          if (!(_DWORD)result)
            return result;
          v11 = v44;
        }
        else
        {
          v11 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        if (v11 - 31 < 0x19 || (v11 <= 0xE ? (v16 = ((1 << v11) & 0x76B6) == 0) : (v16 = 1), !v16))
        {
          if (v11 - 31 >= 0x19 && (v11 > 0xE || ((1 << v11) & 0x76B6) == 0))
            sub_1018F22A4();
          *(_DWORD *)(a1 + 68) |= 1u;
          *(_DWORD *)(a1 + 16) = v11;
        }
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 18)
        {
          *((_QWORD *)this + 1) = v17 + 1;
          goto LABEL_40;
        }
        continue;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_23;
LABEL_40:
        *(_DWORD *)(a1 + 68) |= 2u;
        v18 = *(void **)(a1 + 8);
        if (v18 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v19 >= v12 || *v19 != 24)
          continue;
        v13 = v19 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_46:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v20 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v13;
          v20 = v13 + 1;
          *((_QWORD *)this + 1) = v20;
        }
        v14 = *(_DWORD *)(a1 + 68) | 4;
        *(_DWORD *)(a1 + 68) = v14;
        if ((unint64_t)v20 >= v12 || *v20 != 34)
          continue;
        *((_QWORD *)this + 1) = v20 + 1;
LABEL_54:
        *(_DWORD *)(a1 + 68) = v14 | 8;
        v21 = *(void **)(a1 + 24);
        if (v21 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v21);
        if (!(_DWORD)result)
          return result;
        v22 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v22 >= *((_QWORD *)this + 2) || *v22 != 42)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v22 + 1;
LABEL_60:
          v23 = *(_DWORD *)(a1 + 44);
          v24 = *(int *)(a1 + 40);
          if ((int)v24 >= v23)
          {
            if (v23 == *(_DWORD *)(a1 + 48))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v23 + 1);
              v23 = *(_DWORD *)(a1 + 44);
            }
            *(_DWORD *)(a1 + 44) = v23 + 1;
            operator new();
          }
          v25 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = v24 + 1;
          v26 = *(_QWORD *)(v25 + 8 * v24);
          v45 = 0;
          v27 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45))return 0;
          }
          else
          {
            v45 = *v27;
            *((_QWORD *)this + 1) = v27 + 1;
          }
          v28 = *((_DWORD *)this + 14);
          v29 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v28 + 1;
          if (v28 >= v29)
            return 0;
          v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
          if (!sub_1002D0C84(v26, this, v31) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
          v32 = *((_DWORD *)this + 14);
          v33 = __OFSUB__(v32, 1);
          v34 = v32 - 1;
          if (v34 < 0 == v33)
            *((_DWORD *)this + 14) = v34;
          v22 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v22 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v35 = *v22;
        }
        while (v35 == 42);
        if (v35 != 50)
          continue;
        *((_QWORD *)this + 1) = v22 + 1;
LABEL_78:
        *(_DWORD *)(a1 + 68) |= 0x20u;
        v36 = *(_QWORD *)(a1 + 56);
        if (!v36)
          operator new();
        v46 = 0;
        v37 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v37 >= *((_QWORD *)this + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v46))return 0;
        }
        else
        {
          v46 = *v37;
          *((_QWORD *)this + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)this + 14);
        v39 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v38 + 1;
        if (v38 < v39)
        {
          v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v46);
          if (sub_1002C9F80(v36, this, v41))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v40);
              v42 = *((_DWORD *)this + 14);
              v33 = __OFSUB__(v42, 1);
              v43 = v42 - 1;
              if (v43 < 0 == v33)
                *((_DWORD *)this + 14) = v43;
              if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_46;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_23;
        v14 = *(_DWORD *)(a1 + 68);
        goto LABEL_54;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_60;
        goto LABEL_23;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_78;
        goto LABEL_23;
      default:
        v9 = TagFallback & 7;
LABEL_23:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1002D1C24(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 68);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 68);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), a2, a4);
  if ((*(_DWORD *)(v5 + 68) & 8) != 0)
LABEL_5:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
LABEL_6:
  if (*(int *)(v5 + 40) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  if ((*(_BYTE *)(v5 + 68) & 0x20) != 0)
  {
    v8 = *(_QWORD *)(v5 + 56);
    if (!v8)
      v8 = *(_QWORD *)(qword_102310360 + 56);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v8, a2, a4);
  }
  return result;
}

uint64_t sub_1002D1D24(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  int v28;

  LOBYTE(v3) = *(_BYTE *)(a1 + 68);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_47;
  }
  if ((*(_BYTE *)(a1 + 68) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 68);
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 68) & 2) == 0)
      goto LABEL_22;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = v9;
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v9 = *(_QWORD *)(v6 + 8);
    v3 = *(_DWORD *)(a1 + 68);
    v8 = *(_BYTE *)(v6 + 23);
  }
  else
  {
    v11 = 1;
  }
  if (v8 < 0)
    v7 = v9;
  v4 += v11 + v7 + 1;
LABEL_22:
  if ((v3 & 4) != 0)
  {
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
      v3 = *(_DWORD *)(a1 + 68);
    }
    else
    {
      v13 = 2;
    }
    v4 += v13;
    if ((v3 & 8) == 0)
    {
LABEL_24:
      if ((v3 & 0x20) == 0)
        goto LABEL_47;
      goto LABEL_39;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_24;
  }
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = v15;
  v17 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = v17;
  if (v18 >= 0x80)
  {
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v17 = *(_QWORD *)(v14 + 8);
    v3 = *(_DWORD *)(a1 + 68);
    v16 = *(_BYTE *)(v14 + 23);
  }
  else
  {
    v19 = 1;
  }
  if (v16 < 0)
    v15 = v17;
  v4 += v19 + v15 + 1;
  if ((v3 & 0x20) != 0)
  {
LABEL_39:
    v20 = *(_QWORD *)(a1 + 56);
    if (!v20)
      v20 = *(_QWORD *)(qword_102310360 + 56);
    v21 = 2 * (*(_DWORD *)(v20 + 16) & 1);
    if ((*(_DWORD *)(v20 + 16) & 2) != 0)
      v21 += 2;
    if (*(_DWORD *)(v20 + 16))
      v22 = v21;
    else
      v22 = 0;
    *(_DWORD *)(v20 + 12) = v22;
    v4 += v22 + 2;
  }
LABEL_47:
  v23 = *(_DWORD *)(a1 + 40);
  v24 = (v23 + v4);
  if (v23 >= 1)
  {
    v25 = 0;
    do
    {
      v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002D0F2C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v25), a2);
      v27 = (int)v26;
      if (v26 >= 0x80)
        v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
      else
        v28 = 1;
      v24 = (v27 + v24 + v28);
      ++v25;
    }
    while (v25 < *(int *)(a1 + 40));
  }
  *(_DWORD *)(a1 + 64) = v24;
  return v24;
}

void sub_1002D1F1C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D1100(a1, (uint64_t)lpsrc);
}

void sub_1002D1F68(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D1100(a1, a2);
  }
}

uint64_t sub_1002D1FA8()
{
  return 1;
}

_QWORD *sub_1002D1FB0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.NowPlaying");
}

void sub_1002D1FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 11488);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      sub_1018F22CC();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_1002D2074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D208C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CD10;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D209C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CD10;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D20CC()
{
  operator new();
}

uint64_t sub_1002D2110(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 31;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002D2128(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v8 = v12;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (v9 = ((1 << v8) & 0x76B6) == 0) : (v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0))
          sub_1018F22CC();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_1002D228C(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_1002D22A8(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002D2300(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D1FC0(a1, (uint64_t)lpsrc);
}

void sub_1002D234C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D1FC0(a1, a2);
  }
}

uint64_t sub_1002D238C()
{
  return 1;
}

_QWORD *sub_1002D2394@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.LearnModel");
}

void sub_1002D23A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 11658);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      sub_1018F22F4();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_1002D2458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D2470(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CD88;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D2480(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CD88;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D24B0()
{
  operator new();
}

uint64_t sub_1002D24F4(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 32;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002D250C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v8 = v12;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (v9 = ((1 << v8) & 0x76B6) == 0) : (v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0))
          sub_1018F22F4();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_1002D2670(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_1002D268C(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002D26E4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D23A4(a1, (uint64_t)lpsrc);
}

void sub_1002D2730(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D23A4(a1, a2);
  }
}

uint64_t sub_1002D2770()
{
  return 1;
}

_QWORD *sub_1002D2778@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.LearnCompleted");
}

void sub_1002D2788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 11828);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      sub_1018F231C();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_1002D283C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D2854(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CE00;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D2864(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CE00;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D2894()
{
  operator new();
}

uint64_t sub_1002D28D8(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 33;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002D28F0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v8 = v12;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (v9 = ((1 << v8) & 0x76B6) == 0) : (v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0))
          sub_1018F231C();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_1002D2A54(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_1002D2A70(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002D2AC8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D2788(a1, (uint64_t)lpsrc);
}

void sub_1002D2B14(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D2788(a1, a2);
  }
}

uint64_t sub_1002D2B54()
{
  return 1;
}

_QWORD *sub_1002D2B5C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.SensorsScanComplete");
}

void sub_1002D2B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 11998);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      sub_1018F2344();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_1002D2C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D2C38(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CE78;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D2C48(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CE78;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D2C78()
{
  operator new();
}

uint64_t sub_1002D2CBC(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 34;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002D2CD4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v8 = v12;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (v9 = ((1 << v8) & 0x76B6) == 0) : (v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0))
          sub_1018F2344();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_1002D2E38(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_1002D2E54(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002D2EAC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D2B6C(a1, (uint64_t)lpsrc);
}

void sub_1002D2EF8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D2B6C(a1, a2);
  }
}

uint64_t sub_1002D2F38()
{
  return 1;
}

_QWORD *sub_1002D2F40@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.StartSpectating");
}

void sub_1002D2F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 12168);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0))
      sub_1018F236C();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_1002D3004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D301C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CEF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D302C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CEF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D305C()
{
  operator new();
}

uint64_t sub_1002D30A0(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 35;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002D30B8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v8 = v12;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (v9 = ((1 << v8) & 0x76B6) == 0) : (v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0))
          sub_1018F236C();
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_1002D321C(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  return result;
}

uint64_t sub_1002D3238(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002D3290(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D2F50(a1, (uint64_t)lpsrc);
}

void sub_1002D32DC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D2F50(a1, a2);
  }
}

uint64_t sub_1002D331C()
{
  return 1;
}

_QWORD *sub_1002D3324@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.StopSpectating");
}

void sub_1002D3334(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 12406);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F2394();
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      *(_QWORD *)(a1 + 16) = v9;
    }
  }
}

void sub_1002D3468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D3480(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CF68;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D34B0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CF68;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D34F4()
{
  operator new();
}

uint64_t sub_1002D3544(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 36;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1002D3598(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  _BYTE *v16;
  void *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  uint64_t result;
  unsigned int v21;

  v5 = (unint64_t *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v21 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!(_DWORD)result)
            return result;
          v13 = v21;
        }
        else
        {
          v13 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (v13 - 31 < 0x19 || (v13 <= 0xE ? (v14 = ((1 << v13) & 0x76B6) == 0) : (v14 = 1), !v14))
        {
          if (v13 - 31 >= 0x19 && (v13 > 0xE || ((1 << v13) & 0x76B6) == 0))
            sub_1018F2394();
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v13;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 18)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_38;
        }
      }
      if (v8 != 2)
        break;
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_19;
LABEL_38:
      *(_DWORD *)(a1 + 32) |= 2u;
      v17 = *(void **)(a1 + 8);
      if (v17 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v17);
      if (!(_DWORD)result)
        return result;
      v18 = (_BYTE *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v18 < v10 && *v18 == 24)
      {
        v11 = v18 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_44:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v19 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v11;
          v19 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)this + 1) = v19;
        }
        *(_DWORD *)(a1 + 32) |= 4u;
        if (v19 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v8 == 3)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_44;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_19:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002D381C(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
  return result;
}

uint64_t sub_1002D3894(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_24;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v3 = *(_DWORD *)(a1 + 32);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v3 & 4) != 0)
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
LABEL_24:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_1002D3980(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D3334(a1, (uint64_t)lpsrc);
}

void sub_1002D39CC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D3334(a1, a2);
  }
}

uint64_t sub_1002D3A0C()
{
  return 1;
}

_QWORD *sub_1002D3A14@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ServiceCreate");
}

void sub_1002D3A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 12658);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F23BC();
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v10, v9);
    }
  }
}

void sub_1002D3B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D3BAC(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = *(_QWORD *)(result + 16);
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  return result;
}

void sub_1002D3C54(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CFE0;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D3C84(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212CFE0;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D3CC8()
{
  operator new();
}

uint64_t sub_1002D3D18(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 37;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 32) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1002D3D9C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  uint64_t result;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v18 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
          if (!(_DWORD)result)
            return result;
          v10 = v18;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
            sub_1018F23BC();
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 < *((_QWORD *)this + 2) && *v13 == 18)
        {
          *((_QWORD *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_18;
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      v14 = *(void **)(a1 + 8);
      if (v14 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
      if (!(_DWORD)result)
        return result;
      v15 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 26)
      {
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        v16 = *(void **)(a1 + 16);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if (v8 == 2)
        goto LABEL_43;
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002D4028(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
  return result;
}

uint64_t sub_1002D40A0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_32;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v3 = *(_DWORD *)(a1 + 32);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v4 = (v4 + v17 + v13 + 1);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_1002D41CC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D3A24(a1, (uint64_t)lpsrc);
}

void sub_1002D4218(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D3A24(a1, a2);
  }
}

uint64_t sub_1002D4258()
{
  return 1;
}

_QWORD *sub_1002D4260@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ServiceDelete");
}

void sub_1002D4270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 12910);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F23E4();
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v10, v9);
    }
  }
}

void sub_1002D43E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D43F8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D058;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D4428(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D058;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D446C()
{
  operator new();
}

uint64_t sub_1002D44BC(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 38;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 32) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1002D4540(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  uint64_t result;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v18 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
          if (!(_DWORD)result)
            return result;
          v10 = v18;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
            sub_1018F23E4();
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 < *((_QWORD *)this + 2) && *v13 == 18)
        {
          *((_QWORD *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_18;
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      v14 = *(void **)(a1 + 8);
      if (v14 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
      if (!(_DWORD)result)
        return result;
      v15 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 26)
      {
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        v16 = *(void **)(a1 + 16);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if (v8 == 2)
        goto LABEL_43;
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002D47CC(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
  return result;
}

uint64_t sub_1002D4844(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_32;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v3 = *(_DWORD *)(a1 + 32);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v4 = (v4 + v17 + v13 + 1);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_1002D4970(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D4270(a1, (uint64_t)lpsrc);
}

void sub_1002D49BC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D4270(a1, a2);
  }
}

uint64_t sub_1002D49FC()
{
  return 1;
}

_QWORD *sub_1002D4A04@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ServiceConnect");
}

void sub_1002D4A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 13162);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F240C();
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v10, v9);
    }
  }
}

void sub_1002D4B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D4B9C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D0D0;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D4BCC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D0D0;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D4C10()
{
  operator new();
}

uint64_t sub_1002D4C60(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 39;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 32) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1002D4CE4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  uint64_t result;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v18 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
          if (!(_DWORD)result)
            return result;
          v10 = v18;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
            sub_1018F240C();
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 < *((_QWORD *)this + 2) && *v13 == 18)
        {
          *((_QWORD *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_18;
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      v14 = *(void **)(a1 + 8);
      if (v14 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
      if (!(_DWORD)result)
        return result;
      v15 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 26)
      {
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        v16 = *(void **)(a1 + 16);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if (v8 == 2)
        goto LABEL_43;
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002D4F70(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
  return result;
}

uint64_t sub_1002D4FE8(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_32;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v3 = *(_DWORD *)(a1 + 32);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v4 = (v4 + v17 + v13 + 1);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_1002D5114(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D4A14(a1, (uint64_t)lpsrc);
}

void sub_1002D5160(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D4A14(a1, a2);
  }
}

uint64_t sub_1002D51A0()
{
  return 1;
}

_QWORD *sub_1002D51A8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ServiceDisconnect");
}

void sub_1002D51B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 13443);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F2434();
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 2u;
      v9 = *(std::string **)(a1 + 8);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v9, v8);
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 4) == 0)
      {
LABEL_11:
        if ((v5 & 8) == 0)
          return;
        goto LABEL_12;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_11;
    }
    v10 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    v11 = *(std::string **)(a1 + 24);
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v11, v10);
    if ((*(_DWORD *)(a2 + 36) & 8) != 0)
    {
LABEL_12:
      v7 = *(_BYTE *)(a2 + 20);
      *(_DWORD *)(a1 + 36) |= 8u;
      *(_BYTE *)(a1 + 20) = v7;
    }
  }
}

void sub_1002D5350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D5368(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = *(_QWORD *)(result + 24);
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  return result;
}

void sub_1002D5410(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D148;
  sub_1002D5368((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D5440(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D148;
  sub_1002D5368((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D5484()
{
  operator new();
}

uint64_t sub_1002D54D8(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(result + 36);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 40;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 36) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(result + 20) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1002D5560(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t result;
  unsigned int v21;
  unsigned int v22;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v21 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
LABEL_23:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v12 = ((1 << v9) & 0x76B6) == 0) : (v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              sub_1018F2434();
            *(_DWORD *)(a1 + 36) |= 1u;
            *(_DWORD *)(a1 + 16) = v9;
          }
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v13 < *((_QWORD *)this + 2) && *v13 == 18)
          {
            *((_QWORD *)this + 1) = v13 + 1;
            goto LABEL_35;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
        if ((_DWORD)result)
        {
          v9 = v21;
          goto LABEL_23;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_18;
LABEL_35:
        *(_DWORD *)(a1 + 36) |= 2u;
        v14 = *(void **)(a1 + 8);
        if (v14 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
        if (!(_DWORD)result)
          return result;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 26)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_41:
        *(_DWORD *)(a1 + 36) |= 4u;
        v16 = *(void **)(a1 + 24);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v17 >= v10 || *v17 != 32)
          continue;
        v11 = v17 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_47:
        v22 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v18 = v22;
          v19 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v18 = *v11;
          v19 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)this + 1) = v19;
        }
        *(_BYTE *)(a1 + 20) = v18 != 0;
        *(_DWORD *)(a1 + 36) |= 8u;
        if (v19 != (unsigned __int8 *)v10 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_41;
        goto LABEL_18;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_47;
      default:
        v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1002D5878(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 20), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 20), a2, a4);
  return result;
}

uint64_t sub_1002D590C(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_35;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v3 = *(_DWORD *)(a1 + 36);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    v4 += v12 + v8 + 1;
    goto LABEL_22;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v6 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) == 0)
      goto LABEL_22;
    goto LABEL_13;
  }
  if (v6 < 0x80)
  {
    v4 = 2;
    if ((v3 & 2) == 0)
      goto LABEL_22;
    goto LABEL_13;
  }
  v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  v3 = *(_DWORD *)(a1 + 36);
  if ((v3 & 2) != 0)
    goto LABEL_13;
LABEL_22:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = v14;
    v16 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = v16;
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v16 = *(_QWORD *)(v13 + 8);
      v3 = *(_DWORD *)(a1 + 36);
      v15 = *(_BYTE *)(v13 + 23);
    }
    else
    {
      v18 = 1;
    }
    if (v15 < 0)
      v14 = v16;
    v4 += v18 + v14 + 1;
  }
  if ((v3 & 8) != 0)
    result = v4 + 2;
  else
    result = v4;
LABEL_35:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_1002D5A44(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D51B8(a1, (uint64_t)lpsrc);
}

void sub_1002D5A90(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D51B8(a1, a2);
  }
}

uint64_t sub_1002D5AD0()
{
  return 1;
}

_QWORD *sub_1002D5AD8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ServiceStartUpdating");
}

void sub_1002D5AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 13699);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F245C();
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v10, v9);
    }
  }
}

void sub_1002D5C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D5C70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D1C0;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D5CA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D1C0;
  sub_1002D3BAC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D5CE4()
{
  operator new();
}

uint64_t sub_1002D5D34(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 41;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 32) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1002D5DB8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  uint64_t result;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v18 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
          if (!(_DWORD)result)
            return result;
          v10 = v18;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (v11 = ((1 << v10) & 0x76B6) == 0) : (v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0))
            sub_1018F245C();
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 < *((_QWORD *)this + 2) && *v13 == 18)
        {
          *((_QWORD *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_18;
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      v14 = *(void **)(a1 + 8);
      if (v14 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
      if (!(_DWORD)result)
        return result;
      v15 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 26)
      {
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        v16 = *(void **)(a1 + 16);
        if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result)
          return result;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if (v8 == 2)
        goto LABEL_43;
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1002D6044(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
  return result;
}

uint64_t sub_1002D60BC(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_32;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v3 = *(_DWORD *)(a1 + 32);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v4 = (v4 + v17 + v13 + 1);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_1002D61E8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D5AE8(a1, (uint64_t)lpsrc);
}

void sub_1002D6234(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D5AE8(a1, a2);
  }
}

uint64_t sub_1002D6274()
{
  return 1;
}

_QWORD *sub_1002D627C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.ServiceStopUpdating");
}

void sub_1002D628C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  std::string *v12;
  const std::string *v13;
  std::string *v14;
  char v15;
  _BYTE v16[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 14025);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 40);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
      sub_1018F2484();
    *(_DWORD *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 40) = v6;
    v5 = *(_DWORD *)(a2 + 48);
  }
  if ((v5 & 2) == 0)
  {
    if ((v5 & 4) == 0)
      goto LABEL_11;
LABEL_17:
    v9 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 4u;
    v10 = *(std::string **)(a1 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, v9);
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_12:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  v7 = *(const std::string **)(a2 + 8);
  *(_DWORD *)(a1 + 48) |= 2u;
  v8 = *(std::string **)(a1 + 8);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v8, v7);
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 4) != 0)
    goto LABEL_17;
LABEL_11:
  if ((v5 & 8) == 0)
    goto LABEL_12;
LABEL_20:
  v11 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 8u;
  v12 = *(std::string **)(a1 + 24);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, v11);
  if ((*(_DWORD *)(a2 + 48) & 0x10) != 0)
  {
LABEL_23:
    v13 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    v14 = *(std::string **)(a1 + 32);
    if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v14, v13);
  }
}

void sub_1002D64BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002D64D4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  v5 = result[3];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    operator delete();
  }
  v7 = result[4];
  if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    operator delete();
  }
  return result;
}

void sub_1002D65EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D238;
  sub_1002D64D4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D661C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D238;
  sub_1002D64D4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D6660()
{
  operator new();
}

uint64_t sub_1002D66B4(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(result + 48);
  if (v1)
  {
    *(_DWORD *)(result + 40) = 42;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 48) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 48) & 8) != 0)
    {
      v4 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 48) & 0x10) != 0)
    {
      v5 = *(_QWORD *)(result + 32);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_1002D67A0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  _BYTE *v11;
  void *v12;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  uint64_t result;
  unsigned int v20;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
LABEL_6:
      switch(TagFallback >> 3)
      {
        case 1u:
          v7 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v20 = 0;
          v8 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
            if (!(_DWORD)result)
              return result;
            v9 = v20;
          }
          else
          {
            v9 = *v8;
            *((_QWORD *)this + 1) = v8 + 1;
          }
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (v10 = ((1 << v9) & 0x76B6) == 0) : (v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0))
              sub_1018F2484();
            *(_DWORD *)(a1 + 48) |= 1u;
            *(_DWORD *)(a1 + 40) = v9;
          }
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 18)
          {
            *((_QWORD *)this + 1) = v11 + 1;
            goto LABEL_36;
          }
          continue;
        case 2u:
          v7 = TagFallback & 7;
          if (v7 != 2)
            goto LABEL_19;
LABEL_36:
          *(_DWORD *)(a1 + 48) |= 2u;
          v12 = *(void **)(a1 + 8);
          if (v12 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v12);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 26)
            continue;
          *((_QWORD *)this + 1) = v13 + 1;
LABEL_42:
          *(_DWORD *)(a1 + 48) |= 4u;
          v14 = *(void **)(a1 + 16);
          if (v14 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v14);
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 34)
            continue;
          *((_QWORD *)this + 1) = v15 + 1;
LABEL_48:
          *(_DWORD *)(a1 + 48) |= 8u;
          v16 = *(void **)(a1 + 24);
          if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 42)
            continue;
          *((_QWORD *)this + 1) = v17 + 1;
LABEL_54:
          *(_DWORD *)(a1 + 48) |= 0x10u;
          v18 = *(void **)(a1 + 32);
          if (v18 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v18);
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
            || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          {
            continue;
          }
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        case 3u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_42;
          goto LABEL_19;
        case 4u:
          v7 = TagFallback & 7;
          if (v7 != 2)
            goto LABEL_19;
          goto LABEL_48;
        case 5u:
          v7 = TagFallback & 7;
          if (v7 == 2)
            goto LABEL_54;
          goto LABEL_19;
        default:
          v7 = TagFallback & 7;
LABEL_19:
          if (v7 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
            continue;
          return 0;
      }
    }
    break;
  }
  TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
  *((_DWORD *)this + 8) = (_DWORD)TagFallback;
  if ((_DWORD)TagFallback)
    goto LABEL_6;
  return 1;
}

uint64_t sub_1002D6B30(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 40), a2, a4);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3, *(_QWORD *)(v5 + 16), a2);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 32), a2);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4, *(_QWORD *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5, *(_QWORD *)(v5 + 32), a2);
  return result;
}

uint64_t sub_1002D6BE0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;

  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_53;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 48);
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_22;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 48) & 2) == 0)
      goto LABEL_22;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = v9;
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v9 = *(_QWORD *)(v6 + 8);
    v3 = *(_DWORD *)(a1 + 48);
    v8 = *(_BYTE *)(v6 + 23);
  }
  else
  {
    v11 = 1;
  }
  if (v8 < 0)
    v7 = v9;
  v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) != 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v3 = *(_DWORD *)(a1 + 48);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v4 = (v4 + v17 + v13 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_24:
      if ((v3 & 0x10) == 0)
        goto LABEL_53;
      goto LABEL_44;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_24;
  }
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(unsigned __int8 *)(v18 + 23);
  v20 = v19;
  v21 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = v21;
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, a2);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v21 = *(_QWORD *)(v18 + 8);
    v3 = *(_DWORD *)(a1 + 48);
    v20 = *(_BYTE *)(v18 + 23);
  }
  else
  {
    v23 = 1;
  }
  if (v20 < 0)
    v19 = v21;
  v4 = (v4 + v23 + v19 + 1);
  if ((v3 & 0x10) != 0)
  {
LABEL_44:
    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = v25;
    v27 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v28 = *(unsigned __int8 *)(v24 + 23);
    else
      v28 = v27;
    if (v28 >= 0x80)
    {
      v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28, a2);
      v25 = *(unsigned __int8 *)(v24 + 23);
      v27 = *(_QWORD *)(v24 + 8);
      v26 = *(_BYTE *)(v24 + 23);
    }
    else
    {
      v29 = 1;
    }
    if (v26 < 0)
      v25 = v27;
    v4 = (v4 + v29 + v25 + 1);
  }
LABEL_53:
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_1002D6DC8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1002D628C(a1, (uint64_t)lpsrc);
}

void sub_1002D6E14(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_1002D628C(a1, a2);
  }
}

uint64_t sub_1002D6E54()
{
  return 1;
}

_QWORD *sub_1002D6E5C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLMicroLocationProto.RequestObservation");
}

void sub_1002D6E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  std::string *v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 14322);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 32);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F24AC();
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_11:
        if ((v5 & 8) == 0)
          return;
        goto LABEL_19;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_11;
    }
    v9 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    v10 = *(std::string **)(a1 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, v9);
    if ((*(_DWORD *)(a2 + 40) & 8) != 0)
    {
LABEL_19:
      v11 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 8u;
      v12 = *(std::string **)(a1 + 24);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v12, v11);
    }
  }
}

void sub_1002D7040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002D7058(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D2B0;
  sub_1002CCE20(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002D7088(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D2B0;
  sub_1002CCE20(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1002D70CC()
{
  operator new();
}

uint64_t sub_1002D711C(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 43;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 40) & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 40) & 8) != 0)
    {
      v4 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

