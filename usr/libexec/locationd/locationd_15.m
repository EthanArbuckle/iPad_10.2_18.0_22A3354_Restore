void sub_1009211E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29)
{
  uint64_t i;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  for (i = 224; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a29 + i));
  v31 = a12;
  if (a12 == &a9)
  {
    v32 = 4;
    v31 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_8:
  v33 = a16;
  if (a16 == &a13)
  {
    v34 = 4;
    v33 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_13:
  v35 = a20;
  if (a20 == &a17)
  {
    v36 = 4;
    v35 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_18:
  v37 = a24;
  if (a24 == &a21)
  {
    v38 = 4;
    v37 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_23;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_23:
  v39 = a28;
  if (a28 == &a25)
  {
    v40 = 4;
    v39 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_28;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_28:
  _Unwind_Resume(a1);
}

void sub_100921364(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  __int128 *v10;
  __int128 v11;
  void *v12[2];
  __int128 v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  void *v17[2];
  __int128 v18;
  void *v19[2];
  void *v20[2];
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  void *v24[2];
  __int128 v25;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  void *v29[2];
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  uint64_t v34;
  uint64_t buf;
  __int16 v36;
  const char *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1009222DC(a1) & 1) != 0)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_10215ECE0);
    v5 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 24);
      buf = 68289794;
      v36 = 2082;
      v37 = "";
      v38 = 2114;
      v39 = v6;
      v40 = 2050;
      v41 = a1;
      v42 = 1026;
      v43 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Motion alarm fire subscription changed\", \"Client\":%{public, location:escape_only}@, \"subscription\":\"%{public}p\", \"subscribe\":%{public}hhd}", (uint8_t *)&buf, 0x2Cu);
    }
    sub_1001A638C(a1);
    v7 = *(void **)(a1 + 48);
    v8 = *(void **)(a1 + 24);
    if (a2)
    {
      if (v8)
      {
        objc_msgSend(v8, "clientName");
      }
      else
      {
        v34 = 0;
        *(_OWORD *)__p = 0u;
        v33 = 0u;
        v30 = 0u;
        *(_OWORD *)v31 = 0u;
        v28 = 0u;
        *(_OWORD *)v29 = 0u;
        *(_OWORD *)v26 = 0u;
        *(_OWORD *)v27 = 0u;
        *(_OWORD *)v24 = 0u;
        v25 = 0u;
        v23 = 0u;
      }
      objc_msgSend(v7, "registerClient:adapter:systemClient:", sub_1001AE728(&v23), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 42));
      if (SHIBYTE(v33) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
        operator delete(v31[0]);
      if (SHIBYTE(v30) < 0)
        operator delete(v29[1]);
      if (SHIBYTE(v28) < 0)
        operator delete(v27[1]);
      if (SHIBYTE(v27[0]) < 0)
        operator delete(v26[0]);
      if (SHIBYTE(v25) < 0)
        operator delete(v24[1]);
      v9 = 1;
      if ((SHIBYTE(v24[0]) & 0x80000000) == 0)
        goto LABEL_42;
      v10 = &v23;
    }
    else
    {
      if (v8)
      {
        objc_msgSend(v8, "clientName");
      }
      else
      {
        v22 = 0;
        *(_OWORD *)v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        *(_OWORD *)v19 = 0u;
        v16 = 0u;
        *(_OWORD *)v17 = 0u;
        *(_OWORD *)v14 = 0u;
        *(_OWORD *)v15 = 0u;
        *(_OWORD *)v12 = 0u;
        v13 = 0u;
        v11 = 0u;
      }
      objc_msgSend(v7, "unregisterClient:systemClient:", sub_1001AE728(&v11), *(unsigned __int8 *)(a1 + 42));
      if (SHIBYTE(v21) < 0)
        operator delete(v20[1]);
      if (SHIBYTE(v20[0]) < 0)
        operator delete(v19[0]);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[1]);
      if (SHIBYTE(v16) < 0)
        operator delete(v15[1]);
      if (SHIBYTE(v15[0]) < 0)
        operator delete(v14[0]);
      if (SHIBYTE(v13) < 0)
        operator delete(v12[1]);
      v9 = 0;
      if ((SHIBYTE(v12[0]) & 0x80000000) == 0)
        goto LABEL_42;
      v10 = &v11;
    }
    operator delete(*(void **)v10);
LABEL_42:
    *(_BYTE *)(a1 + 41) = v9;
  }

}

void sub_100921640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100010174((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100921684(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  id v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  void *v13;
  CLConnectionMessage *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD v28[5];
  std::__shared_weak_count *v29;
  void *v30[2];
  void *v31[2];
  __int128 v32;
  void *v33[2];
  void *v34[2];
  __int128 v35;
  void *v36[2];
  __int128 v37;
  void *v38[2];
  void *__p[2];
  __int128 v40;
  uint64_t v41;
  int v42;
  id v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  id v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  _UNKNOWN **v51;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1009222DC(a1) & 1) != 0)
  {
    v6 = objc_opt_class(CMMotionAlarm, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    v9 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v8), "objectForKey:", CMMotionAlarmKey);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_10215ECE0);
    v10 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_INFO))
    {
      v11 = objc_msgSend(*(id *)(a1 + 24), "legacyClientKey");
      v12 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138543618;
      v47 = v11;
      v48 = 2114;
      v49 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#MotionAlarm handleMessageMotionAlarmRegister  clientKey: %{public}@  client: %{public}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_10215ECE0);
      v22 = qword_10229FDD8;
      v23 = objc_msgSend(*(id *)(a1 + 24), "legacyClientKey");
      v24 = *(_QWORD *)(a1 + 24);
      v42 = 138543618;
      v43 = v23;
      v44 = 2114;
      v45 = v24;
      LODWORD(v27) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 1, "#MotionAlarm handleMessageMotionAlarmRegister  clientKey: %{public}@  client: %{public}@", &v42, v27);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmSubscription::handleMessageMotionAlarmRegister(std::shared_ptr<CLConnectionMessage>)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v13 = *(void **)(a1 + 24);
    if (v13)
    {
      objc_msgSend(v13, "clientName");
    }
    else
    {
      v41 = 0;
      *(_OWORD *)__p = 0u;
      v40 = 0u;
      v37 = 0u;
      *(_OWORD *)v38 = 0u;
      v35 = 0u;
      *(_OWORD *)v36 = 0u;
      *(_OWORD *)v33 = 0u;
      *(_OWORD *)v34 = 0u;
      *(_OWORD *)v31 = 0u;
      v32 = 0u;
      *(_OWORD *)v30 = 0u;
    }
    objc_msgSend(v9, "setBundleId:", sub_10092241C((uint64_t)v30));
    if (SHIBYTE(v40) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v37) < 0)
      operator delete(v36[1]);
    if (SHIBYTE(v35) < 0)
      operator delete(v34[1]);
    if (SHIBYTE(v34[0]) < 0)
      operator delete(v33[0]);
    if (SHIBYTE(v32) < 0)
      operator delete(v31[1]);
    if (SHIBYTE(v31[0]) < 0)
      operator delete(v30[0]);
    v15 = *(void **)(a1 + 48);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3321888768;
    v28[2] = sub_100922870;
    v28[3] = &unk_10215EC50;
    v16 = *(std::__shared_weak_count **)(a2 + 8);
    v28[4] = *(_QWORD *)a2;
    v29 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    objc_msgSend(v15, "registerAlarm:withReply:", v9, v28);
    v19 = v29;
    if (v29)
    {
      v20 = (unint64_t *)&v29->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    v14 = *(CLConnectionMessage **)a2;
    v50 = CMErrorMessage;
    v51 = &off_10221B7B0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1);
    CLConnectionMessage::sendReply(v14);
  }

}

void sub_100921A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100921AE8(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  id v9;
  void *v10;
  CLConnectionMessage *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[5];
  std::__shared_weak_count *v20;
  void *v21[2];
  void *v22[2];
  __int128 v23;
  void *v24[2];
  void *v25[2];
  __int128 v26;
  void *v27[2];
  __int128 v28;
  void *v29[2];
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1009222DC(a1) & 1) != 0)
  {
    v6 = objc_opt_class(CMMotionAlarm, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    v9 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v8), "objectForKey:", CMMotionAlarmKey);
    v10 = *(void **)(a1 + 24);
    if (v10)
    {
      objc_msgSend(v10, "clientName");
    }
    else
    {
      v32 = 0;
      *(_OWORD *)__p = 0u;
      v31 = 0u;
      v28 = 0u;
      *(_OWORD *)v29 = 0u;
      v26 = 0u;
      *(_OWORD *)v27 = 0u;
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)v22 = 0u;
      v23 = 0u;
      *(_OWORD *)v21 = 0u;
    }
    objc_msgSend(v9, "setBundleId:", sub_10092241C((uint64_t)v21));
    if (SHIBYTE(v31) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v29[0]);
    if (SHIBYTE(v28) < 0)
      operator delete(v27[1]);
    if (SHIBYTE(v26) < 0)
      operator delete(v25[1]);
    if (SHIBYTE(v25[0]) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v23) < 0)
      operator delete(v22[1]);
    if (SHIBYTE(v22[0]) < 0)
      operator delete(v21[0]);
    v12 = *(void **)(a1 + 48);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768;
    v19[2] = sub_100922914;
    v19[3] = &unk_10215EC50;
    v13 = *(std::__shared_weak_count **)(a2 + 8);
    v19[4] = *(_QWORD *)a2;
    v20 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    objc_msgSend(v12, "unregisterAlarm:withReply:", v9, v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v11 = *(CLConnectionMessage **)a2;
    v33 = CMErrorMessage;
    v34 = &off_10221B7B0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
    CLConnectionMessage::sendReply(v11);
  }

}

void sub_100921D5C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

void sub_100921DB0(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  id v9;
  void *v10;
  CLConnectionMessage *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[5];
  std::__shared_weak_count *v20;
  void *v21[2];
  void *v22[2];
  __int128 v23;
  void *v24[2];
  void *v25[2];
  __int128 v26;
  void *v27[2];
  __int128 v28;
  void *v29[2];
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1009222DC(a1) & 1) != 0)
  {
    v6 = objc_opt_class(CMMotionAlarm, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    v9 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v8), "objectForKey:", CMMotionAlarmKey);
    v10 = *(void **)(a1 + 24);
    if (v10)
    {
      objc_msgSend(v10, "clientName");
    }
    else
    {
      v32 = 0;
      *(_OWORD *)__p = 0u;
      v31 = 0u;
      v28 = 0u;
      *(_OWORD *)v29 = 0u;
      v26 = 0u;
      *(_OWORD *)v27 = 0u;
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)v22 = 0u;
      v23 = 0u;
      *(_OWORD *)v21 = 0u;
    }
    objc_msgSend(v9, "setBundleId:", sub_10092241C((uint64_t)v21));
    if (SHIBYTE(v31) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v29[0]);
    if (SHIBYTE(v28) < 0)
      operator delete(v27[1]);
    if (SHIBYTE(v26) < 0)
      operator delete(v25[1]);
    if (SHIBYTE(v25[0]) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v23) < 0)
      operator delete(v22[1]);
    if (SHIBYTE(v22[0]) < 0)
      operator delete(v21[0]);
    v12 = *(void **)(a1 + 48);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768;
    v19[2] = sub_1009229B8;
    v19[3] = &unk_10215EC50;
    v13 = *(std::__shared_weak_count **)(a2 + 8);
    v19[4] = *(_QWORD *)a2;
    v20 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    objc_msgSend(v12, "acknowledgeAlarm:withReply:", v9, v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v11 = *(CLConnectionMessage **)a2;
    v33 = CMErrorMessage;
    v34 = &off_10221B7B0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
    CLConnectionMessage::sendReply(v11);
  }

}

void sub_100922024(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

void sub_100922078(uint64_t a1, _QWORD *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  NSString *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[5];
  std::__shared_weak_count *v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  void *v20[2];
  void *v21[2];
  __int128 v22;
  void *v23[2];
  __int128 v24;
  void *v25[2];
  void *__p[2];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1009222DC(a1) & 1) != 0)
  {
    v5 = *(void **)(a1 + 24);
    if (v5)
    {
      objc_msgSend(v5, "clientName");
    }
    else
    {
      v28 = 0;
      *(_OWORD *)__p = 0u;
      v27 = 0u;
      v24 = 0u;
      *(_OWORD *)v25 = 0u;
      v22 = 0u;
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)v18 = 0u;
      v19 = 0u;
      *(_OWORD *)v17 = 0u;
    }
    v7 = sub_10092241C((uint64_t)v17);
    if (SHIBYTE(v27) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v25[0]);
    if (SHIBYTE(v24) < 0)
      operator delete(v23[1]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[1]);
    if (SHIBYTE(v21[0]) < 0)
      operator delete(v20[0]);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[1]);
    if (SHIBYTE(v18[0]) < 0)
      operator delete(v17[0]);
    v8 = *(void **)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3321888768;
    v15[2] = sub_100922A5C;
    v15[3] = &unk_10215EC80;
    v9 = (std::__shared_weak_count *)a2[1];
    v15[4] = *a2;
    v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    objc_msgSend(v8, "launchRemoteApplication:withReply:", v7, v15);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v6 = *a2;
    v29 = CMErrorMessage;
    v30 = &off_10221B7B0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_100922290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1009222DC(uint64_t a1)
{
  uint64_t v2;
  void *__p;
  char v5;

  sub_1015A2E04(&__p, "com.apple.locationd.motion_alarms");
  if ((sub_1002255E0(a1) & 1) != 0)
  {
    if (v5 < 0)
      operator delete(__p);
    return 1;
  }
  else
  {
    v2 = sub_100920D38(a1);
    if (v5 < 0)
      operator delete(__p);
  }
  return v2;
}

void sub_100922358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100922374(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_10215EE60, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100922408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

NSString *sub_10092241C(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  NSString *v6;
  NSString *v7;
  NSObject *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *p_p;
  NSObject *v15;
  void **v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::string *v20;
  std::string __p;
  void *v23[2];
  char v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  void **v30;
  __int16 v31;
  _QWORD **v32;
  __int16 v33;
  _QWORD *v34;
  __int16 v35;
  _QWORD *v36;
  __int16 v37;
  _QWORD *v38;
  __int16 v39;
  std::string *v40;

  sub_1001A8D50(a1);
  if (*(char *)(a1 + 151) < 0)
    v2 = *(_QWORD *)(a1 + 136);
  else
    v2 = *(unsigned __int8 *)(a1 + 151);
  v3 = (_QWORD **)(a1 + 128);
  if (v2)
  {
    sub_1001A8D50(a1);
    v4 = (_QWORD *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0)
      v4 = *v3;
    goto LABEL_19;
  }
  sub_1001A8D50(a1);
  if (*(char *)(a1 + 127) < 0)
  {
    if (*(_QWORD *)(a1 + 112))
      goto LABEL_10;
  }
  else if (*(_BYTE *)(a1 + 127))
  {
LABEL_10:
    v5 = (_QWORD *)(a1 + 104);
    sub_1001A8D50(a1);
    if (*(char *)(a1 + 127) < 0)
      v5 = (_QWORD *)*v5;
    v4 = v5;
LABEL_19:
    v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
    v7 = v6;
    if (v6 && -[NSString length](v6, "length"))
      return v7;
    goto LABEL_21;
  }
  v4 = (_QWORD *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v4 = (_QWORD *)*v4;
      goto LABEL_19;
    }
  }
  else if (*(_BYTE *)(a1 + 47))
  {
    goto LABEL_19;
  }
LABEL_21:
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_10215ECE0);
  v8 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
  {
    sub_1001A885C(a1, (uint64_t)v23);
    if (v24 >= 0)
      v9 = v23;
    else
      v9 = (void **)v23[0];
    sub_1001A8D50(a1);
    v10 = (_QWORD *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0)
      v10 = *v3;
    sub_1001A8D50(a1);
    v11 = (_QWORD *)(a1 + 104);
    if (*(char *)(a1 + 127) < 0)
      v11 = (_QWORD *)*v11;
    v12 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v12 = (_QWORD *)*v12;
    v13 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v13 = (_QWORD *)*v13;
    sub_1001A8444(a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290562;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    v29 = 2082;
    v30 = v9;
    v31 = 2082;
    v32 = (_QWORD **)v10;
    v33 = 2082;
    v34 = v11;
    v35 = 2082;
    v36 = v12;
    v37 = 2082;
    v38 = v13;
    v39 = 2082;
    v40 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Unable to find bundleId or executable!\", \"clientKey\":%{public, location:escape_only}s, \"pluginBundleId\":%{public, location:escape_only}s, \"bundleId\":%{public, location:escape_only}s, \"bundlePath\":%{public, location:escape_only}s, \"executable\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}s}", buf, 0x4Eu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v24 < 0)
      operator delete(v23[0]);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_10215ECE0);
  }
  v15 = qword_10229FDD8;
  if (os_signpost_enabled((os_log_t)qword_10229FDD8))
  {
    v16 = v23;
    sub_1001A885C(a1, (uint64_t)v23);
    if (v24 < 0)
      v16 = (void **)v23[0];
    sub_1001A8D50(a1);
    if (*(char *)(a1 + 151) < 0)
      v3 = (_QWORD **)*v3;
    sub_1001A8D50(a1);
    v17 = (_QWORD *)(a1 + 104);
    if (*(char *)(a1 + 127) < 0)
      v17 = (_QWORD *)*v17;
    v18 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v18 = (_QWORD *)*v18;
    v19 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v19 = (_QWORD *)*v19;
    sub_1001A8444(a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &__p;
    else
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290562;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    v29 = 2082;
    v30 = v16;
    v31 = 2082;
    v32 = v3;
    v33 = 2082;
    v34 = v17;
    v35 = 2082;
    v36 = v18;
    v37 = 2082;
    v38 = v19;
    v39 = 2082;
    v40 = v20;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to find bundleId or executable!", "{\"msg%{public}.0s\":\"Unable to find bundleId or executable!\", \"clientKey\":%{public, location:escape_only}s, \"pluginBundleId\":%{public, location:escape_only}s, \"bundleId\":%{public, location:escape_only}s, \"bundlePath\":%{public, location:escape_only}s, \"executable\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}s}", buf, 0x4Eu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  return 0;
}

void sub_100922840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100922870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = a2;
  v4[0] = CMMotionAlarmKey;
  v4[1] = CMErrorMessage;
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  return CLConnectionMessage::sendReply(v2);
}

uint64_t sub_100922914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = a2;
  v4[0] = CMMotionAlarmKey;
  v4[1] = CMErrorMessage;
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  return CLConnectionMessage::sendReply(v2);
}

uint64_t sub_1009229B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = a2;
  v4[0] = CMMotionAlarmKey;
  v4[1] = CMErrorMessage;
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  return CLConnectionMessage::sendReply(v2);
}

uint64_t sub_100922A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSNumber *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = CMErrorMessage;
  v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  return CLConnectionMessage::sendReply(v2);
}

uint64_t sub_100922AF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100922B58(id a1)
{
  qword_10229FDD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionAlarm");
}

uint64_t sub_100922B84@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  _BYTE *v7;
  void *v8;
  const void *v9;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  result = sub_100259584(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (_BYTE *)result;
  else
    v7 = *(_BYTE **)result;
  *v7 = a1;
  v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  *((_BYTE *)v8 + v5) = 0;
  return result;
}

__n128 sub_100922C10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10215ED40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100922C4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10215ED40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100922C70(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100922CC0(a1 + 8, a2, a3);
}

uint64_t sub_100922C78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100922CB4()
{
}

void sub_100922CC0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100922D44(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100922D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100922D44(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10215EDB0);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10215EDB0);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_100922F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100922F48(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100922F74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10215EDF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100922FB0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10215EDF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100922FD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100923024(a1 + 8, a2, a3);
}

uint64_t sub_100922FDC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100923018()
{
}

void sub_100923024(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1009230F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100923114(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_10092318C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100923178(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10092318C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_10092340C(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_1009233F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10092340C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100923480(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100923468(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100923480(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1009234D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009234F4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  int v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  int v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v78;
  const char *v79;
  char *v80;
  uint64_t v81;
  const char *v82;
  char *v83;
  uint64_t v84;
  const char *v85;
  char *v86;
  uint64_t v87;
  const char *v88;
  char *v89;
  uint64_t v90;
  const char *v91;
  char *v92;
  uint64_t v93;
  const char *v94;
  char *v95;
  uint64_t v96;
  const char *v97;
  char *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  _OWORD buf[102];

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 56) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = *a3;
  v8 = a3[1];
  *(_QWORD *)(a1 + 72) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 80) = *a4;
  v11 = a4[1];
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_OWORD *)(a1 + 96) = xmmword_101BE7940;
  *(_OWORD *)(a1 + 112) = unk_101BE7950;
  *(_OWORD *)(a1 + 128) = xmmword_101BE7960;
  *(_OWORD *)(a1 + 140) = *(__int128 *)((char *)&xmmword_101BE7960 + 12);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_DWORD *)(a1 + 188) = 0;
  *(_OWORD *)(a1 + 320) = xmmword_101BE78B0;
  *(_OWORD *)(a1 + 336) = xmmword_101BE78C0;
  *(_OWORD *)(a1 + 352) = xmmword_101BE78D0;
  *(_OWORD *)(a1 + 368) = xmmword_101BE78E0;
  *(_QWORD *)(a1 + 384) = 0x404B800000000000;
  v14 = sub_100127B9C();
  sub_100081C10(v14, buf);
  v15 = (uint64_t *)(a1 + 328);
  v16 = sub_1001FD98C(*(uint64_t *)&buf[0], "HRR_MaxDiffPeakHRMaxRecoveryHR", (void *)(a1 + 328));
  v17 = v16;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_14;
  v19 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v17)
      goto LABEL_20;
  }
  else
  {
LABEL_14:
    if (!v16)
      goto LABEL_20;
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v21 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *v15;
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Estimator,fMaxDiffPeakHRMaxRecoveryHR overridden (%{public}f)", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v78 = *v15;
    v100 = 134349056;
    v101 = v78;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,fMaxDiffPeakHRMaxRecoveryHR overridden (%{public}f)", &v100, 12);
    v80 = (char *)v79;
    sub_100512490("Generic", 1, 0, 2, "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRRecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)", "%s\n", v79);
    if (v80 != (char *)buf)
      free(v80);
  }
LABEL_20:
  v23 = sub_100127B9C();
  sub_100081C10(v23, buf);
  v24 = (uint64_t *)(a1 + 336);
  v25 = sub_1001FD98C(*(uint64_t *)&buf[0], "HRR_MaxDiffSteadyStateHRMinRecoveryHR", (void *)(a1 + 336));
  v26 = v25;
  v27 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_24;
  v28 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v26)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if (!v25)
      goto LABEL_30;
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v30 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *v24;
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Estimator,fMaxDiffSteadyStateHRMinRecoveryHR overridden (%{public}f)", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v81 = *v24;
    v100 = 134349056;
    v101 = v81;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,fMaxDiffSteadyStateHRMinRecoveryHR overridden (%{public}f)", &v100, v99);
    v83 = (char *)v82;
    sub_100512490("Generic", 1, 0, 2, "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRRecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)", "%s\n", v82);
    if (v83 != (char *)buf)
      free(v83);
  }
LABEL_30:
  v32 = sub_100127B9C();
  sub_100081C10(v32, buf);
  v33 = (uint64_t *)(a1 + 344);
  v34 = sub_1001FD98C(*(uint64_t *)&buf[0], "HRR_PeakHRExertionThreshold", (void *)(a1 + 344));
  v35 = v34;
  v36 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_34;
  v37 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if (!v35)
      goto LABEL_40;
  }
  else
  {
LABEL_34:
    if (!v34)
      goto LABEL_40;
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v39 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v40 = *v33;
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v40;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Estimator,fPeakHRExertionThreshold overridden (%{public}f)", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v84 = *v33;
    v100 = 134349056;
    v101 = v84;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,fPeakHRExertionThreshold overridden (%{public}f)", &v100, v99);
    v86 = (char *)v85;
    sub_100512490("Generic", 1, 0, 2, "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRRecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)", "%s\n", v85);
    if (v86 != (char *)buf)
      free(v86);
  }
LABEL_40:
  v41 = sub_100127B9C();
  sub_100081C10(v41, buf);
  v42 = (uint64_t *)(a1 + 352);
  v43 = sub_1001FD98C(*(uint64_t *)&buf[0], "HRR_MinDiffPeakHRSteadyStateHR", (void *)(a1 + 352));
  v44 = v43;
  v45 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_44;
  v46 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if (!v44)
      goto LABEL_50;
  }
  else
  {
LABEL_44:
    if (!v43)
      goto LABEL_50;
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v48 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v49 = *v42;
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Estimator,fMinDiffPeakHRSteadyStateHR overridden (%{public}f)", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v87 = *v42;
    v100 = 134349056;
    v101 = v87;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,fMinDiffPeakHRSteadyStateHR overridden (%{public}f)", &v100, v99);
    v89 = (char *)v88;
    sub_100512490("Generic", 1, 0, 2, "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRRecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)", "%s\n", v88);
    if (v89 != (char *)buf)
      free(v89);
  }
LABEL_50:
  v50 = sub_100127B9C();
  sub_100081C10(v50, buf);
  v51 = (uint64_t *)(a1 + 368);
  v52 = sub_1001FD98C(*(uint64_t *)&buf[0], "HRR_MinExplainedVarianceScore", (void *)(a1 + 368));
  v53 = v52;
  v54 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_54;
  v55 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    if (!v53)
      goto LABEL_60;
  }
  else
  {
LABEL_54:
    if (!v52)
      goto LABEL_60;
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v57 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v58 = *v51;
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v58;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Estimator,fMinExplainedVarianceScore overridden (%{public}f)", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v90 = *v51;
    v100 = 134349056;
    v101 = v90;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,fMinExplainedVarianceScore overridden (%{public}f)", &v100, v99);
    v92 = (char *)v91;
    sub_100512490("Generic", 1, 0, 2, "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRRecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)", "%s\n", v91);
    if (v92 != (char *)buf)
      free(v92);
  }
LABEL_60:
  v59 = sub_100127B9C();
  sub_100081C10(v59, buf);
  v60 = (uint64_t *)(a1 + 376);
  v61 = sub_1001FD98C(*(uint64_t *)&buf[0], "HRR_MinAllowedEstimate", (void *)(a1 + 376));
  v62 = v61;
  v63 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_64;
  v64 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    if (!v62)
      goto LABEL_70;
  }
  else
  {
LABEL_64:
    if (!v61)
      goto LABEL_70;
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v66 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v67 = *v60;
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v67;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Estimator,fMinAllowedEstimate overridden (%{public}f)", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v93 = *v60;
    v100 = 134349056;
    v101 = v93;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,fMinAllowedEstimate overridden (%{public}f)", &v100, v99);
    v95 = (char *)v94;
    sub_100512490("Generic", 1, 0, 2, "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRRecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)", "%s\n", v94);
    if (v95 != (char *)buf)
      free(v95);
  }
LABEL_70:
  v68 = sub_100127B9C();
  sub_100081C10(v68, buf);
  v69 = (uint64_t *)(a1 + 384);
  v70 = sub_1001FD98C(*(uint64_t *)&buf[0], "HRR_MaxAllowedEstimate", (void *)(a1 + 384));
  v71 = v70;
  v72 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_74;
  v73 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v71)
      return a1;
  }
  else
  {
LABEL_74:
    if (!v70)
      return a1;
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v75 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v76 = *v69;
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v76;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Estimator,fMaxAllowedEstimate overridden (%{public}f)", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v96 = *v69;
    v100 = 134349056;
    v101 = v96;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,fMaxAllowedEstimate overridden (%{public}f)", &v100, v99);
    v98 = (char *)v97;
    sub_100512490("Generic", 1, 0, 2, "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRRecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)", "%s\n", v97);
    if (v98 != (char *)buf)
      free(v98);
  }
  return a1;
}

void sub_1009242B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100261F44(v3);
  sub_100261F44(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_10092433C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  int v7;
  double v8;
  int v9;
  int v10;
  double v11;
  int v12;
  double v13;
  int v14;
  int v15;
  double v16;
  int v17;
  int v18;
  double v19;
  int v20;
  double v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _DWORD v25[2];
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  double v33;
  __int16 v34;
  int v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  double v49;
  __int16 v50;
  int v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(a1 + 140) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 96) = v3;
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v6 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 152);
    v8 = *(float *)(a1 + 116);
    v9 = *(_DWORD *)(a1 + 100);
    v10 = *(unsigned __int8 *)(a1 + 153);
    v11 = *(float *)(a1 + 104);
    v12 = *(unsigned __int8 *)(a1 + 154);
    v13 = *(float *)(a1 + 108);
    v14 = *(unsigned __int8 *)(a1 + 144);
    *(_DWORD *)buf = 67241985;
    v41 = v7;
    v42 = 2049;
    v43 = v8;
    v44 = 1025;
    v45 = v9;
    v46 = 1026;
    v47 = v10;
    v48 = 2049;
    v49 = v11;
    v50 = 1026;
    v51 = v12;
    v52 = 2049;
    v53 = v13;
    v54 = 1025;
    v55 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Estimator,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v15 = *(unsigned __int8 *)(a1 + 152);
    v16 = *(float *)(a1 + 116);
    v17 = *(_DWORD *)(a1 + 100);
    v18 = *(unsigned __int8 *)(a1 + 153);
    v19 = *(float *)(a1 + 104);
    v20 = *(unsigned __int8 *)(a1 + 154);
    v21 = *(float *)(a1 + 108);
    v22 = *(unsigned __int8 *)(a1 + 144);
    v25[0] = 67241985;
    v25[1] = v15;
    v26 = 2049;
    v27 = v16;
    v28 = 1025;
    v29 = v17;
    v30 = 1026;
    v31 = v18;
    v32 = 2049;
    v33 = v19;
    v34 = 1026;
    v35 = v20;
    v36 = 2049;
    v37 = v21;
    v38 = 1025;
    v39 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "Estimator,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d", v25, 62);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
}

void sub_1009245D4(uint64_t a1, float a2)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  double v9;
  uint8_t buf[4];
  double v11;

  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v4 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134283521;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Estimator,restingHeartRateSevenDay,%{private}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v5 = a2;
    v8 = 134283521;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,restingHeartRateSevenDay,%{private}f", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::feedRestingHeartRate(float)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  else
  {
    v5 = a2;
  }
  *(double *)(a1 + 320) = v5;
}

void sub_100924798(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  _BYTE buf[1632];

  if (*(_DWORD *)(a1 + 156))
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v4 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a2 + 40);
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 134284033;
      *(_QWORD *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2049;
      *(_QWORD *)&buf[24] = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Estimator,startTime,%{private}f,hr,%{private}f,hrConfidence,%{private}f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v8 = *(_QWORD *)(a2 + 40);
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 16);
      v13 = 134284033;
      v14 = v8;
      v15 = 2049;
      v16 = v9;
      v17 = 2049;
      v18 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,startTime,%{private}f,hr,%{private}f,hrConfidence,%{private}f", &v13, 32);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::feedStreamingHeartRate(const CLCatherineData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_1009249BC(a1, 0, *(double *)(a2 + 40));
    if (*(_DWORD *)(a1 + 156))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = *(_QWORD *)(a2 + 40);
      *(_OWORD *)&buf[16] = *(_OWORD *)(a2 + 8);
      sub_100423B04(*(_QWORD *)(a1 + 48), (uint64_t)buf);
    }
  }
}

void sub_1009249BC(uint64_t a1, int a2, double a3)
{
  double *v6;
  double Current;
  int v8;
  double v9;
  NSObject *v10;
  double v11;
  double v12;
  double v13;
  _BOOL4 v14;
  NSObject *v15;
  int v17;
  int v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  NSObject *v22;
  double v23;
  NSObject *v24;
  double v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  double v29;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  double v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  double v44;
  const char *v45;
  uint8_t *v46;
  uint64_t v47;
  int v48;
  double v49;
  __int16 v50;
  _BYTE v51[14];
  __int16 v52;
  double v53;
  uint8_t buf[4];
  double v55;
  __int16 v56;
  _BYTE v57[14];
  __int16 v58;
  double v59;

  if (a2 == 1)
  {
    v6 = (double *)(a1 + 304);
LABEL_5:
    *v6 = a3;
    Current = CFAbsoluteTimeGetCurrent();
    v8 = *(_DWORD *)(a1 + 156);
    if (v8 == 3)
    {
      if (*(double *)(a1 + 296) - *(double *)(a1 + 184) <= 180.0)
        return;
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v22 = qword_10229FF68;
      if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(double *)(a1 + 184);
        *(_DWORD *)buf = 134283777;
        v55 = v23;
        v56 = 2049;
        *(_QWORD *)v57 = 0x4066800000000000;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Estimator: Workout paused from %{private}f, exceeding max pause duration:%{private}.2f seconds, need to unregister HR notification", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v33 = *(double *)(a1 + 184);
        v48 = 134283777;
        v49 = v33;
        v50 = 2049;
        *(_QWORD *)v51 = 0x4066800000000000;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Workout paused from %{private}f, exceeding max pause duration:%{private}.2f seconds, need to unregister HR notification", &v48, 22);
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      v17 = 0;
      v14 = 0;
      v18 = 0;
      *(_DWORD *)(a1 + 156) = 4;
    }
    else
    {
      if (v8 != 2)
        return;
      v9 = Current;
      if (*(double *)(a1 + 176) + 178.0 >= a3)
        return;
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v10 = qword_10229FF68;
      if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134284033;
        v55 = a3;
        v56 = 2049;
        *(double *)v57 = v9;
        *(_WORD *)&v57[8] = 1025;
        *(_DWORD *)&v57[10] = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Estimator: Input sample time:%{private}f, now:%{private}f, inputType:%{private}d ", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v48 = 134284033;
        v49 = a3;
        v50 = 2049;
        *(double *)v51 = v9;
        *(_WORD *)&v51[8] = 1025;
        *(_DWORD *)&v51[10] = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Input sample time:%{private}f, now:%{private}f, inputType:%{private}d ", &v48, 28);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      v11 = *(double *)(a1 + 176) + 178.0;
      v12 = *(double *)(a1 + 296);
      v13 = *(double *)(a1 + 304);
      v14 = v13 > v11;
      if (v9 - a3 > 185.0)
      {
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v15 = qword_10229FF68;
        if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134284289;
          v55 = a3;
          v56 = 1025;
          *(_DWORD *)v57 = a2;
          *(_WORD *)&v57[4] = 2049;
          *(double *)&v57[6] = v9;
          v58 = 2049;
          v59 = v9 - a3;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Estimator: Input sample time exceeds allowed delay, sample time:%{private}f, inputType:%{private}d, now:%{private}f, delay:%{private}f ", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF60 != -1)
            dispatch_once(&qword_10229FF60, &stru_10215EE68);
          v48 = 134284289;
          v49 = a3;
          v50 = 1025;
          *(_DWORD *)v51 = a2;
          *(_WORD *)&v51[4] = 2049;
          *(double *)&v51[6] = v9;
          v52 = 2049;
          v53 = v9 - a3;
          LODWORD(v47) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "Estimator: Input sample time exceeds allowed delay, sample time:%{private}f, inputType:%{private}d, now:%{private}f, delay:%{private}f ", &v48, v47);
          v37 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 0, "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
      }
      if (v13 > v11 && v12 <= v11)
      {
        if (v9 - *(double *)(a1 + 296) <= 240.0)
        {
          v17 = 0;
          v18 = 0;
          v14 = 1;
          goto LABEL_58;
        }
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v24 = qword_10229FF68;
        if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
        {
          v25 = *(double *)(a1 + 296);
          *(_DWORD *)buf = 134283777;
          v55 = v9 - v25;
          v56 = 2049;
          *(double *)v57 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Estimator: HR samples not received for %{private}f seconds, lastHRTime:%{private}f)", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF60 != -1)
            dispatch_once(&qword_10229FF60, &stru_10215EE68);
          v44 = *(double *)(a1 + 296);
          v48 = 134283777;
          v49 = v9 - v44;
          v50 = 2049;
          *(double *)v51 = v44;
          LODWORD(v47) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "Estimator: HR samples not received for %{private}f seconds, lastHRTime:%{private}f)", &v48, v47);
          v46 = (uint8_t *)v45;
          sub_100512490("Generic", 1, 0, 0, "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)", "%s\n", v45);
          if (v46 != buf)
            free(v46);
        }
        v18 = 0;
        v17 = 1;
        v14 = 1;
      }
      else
      {
        v17 = 0;
        if (v12 <= v11)
        {
          v18 = 0;
LABEL_58:
          if (v14 && v17 | v18)
          {
            if (v18)
            {
              if (qword_10229FF60 != -1)
                dispatch_once(&qword_10229FF60, &stru_10215EE68);
              v28 = qword_10229FF68;
              if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
              {
                v29 = *(double *)(a1 + 168);
                v30 = *(_QWORD *)(a1 + 176);
                *(_DWORD *)buf = 134283777;
                v55 = v29;
                v56 = 2049;
                *(_QWORD *)v57 = v30;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Estimator: Ending session due to reaching the end of the post activity period (sessionStartTime:%{private}f, activityEndTime:%{private}f)", buf, 0x16u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FF60 != -1)
                  dispatch_once(&qword_10229FF60, &stru_10215EE68);
                v38 = *(double *)(a1 + 168);
                v39 = *(_QWORD *)(a1 + 176);
                v48 = 134283777;
                v49 = v38;
                v50 = 2049;
                *(_QWORD *)v51 = v39;
                LODWORD(v47) = 22;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Ending session due to reaching the end of the post activity period (sessionStartTime:%{private}f, activityEndTime:%{private}f)", &v48, v47);
                v41 = (uint8_t *)v40;
                sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)", "%s\n", v40);
                if (v41 != buf)
                  free(v41);
              }
            }
            sub_100926BA0(a1, v18);
          }
          return;
        }
        v18 = 1;
      }
    }
    if (*(_QWORD *)(a1 + 24) && !*(_BYTE *)(a1 + 312))
    {
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v26 = qword_10229FF68;
      if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Estimator: Unregistering HR notification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        LOWORD(v48) = 0;
        LODWORD(v47) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Unregistering HR notification", &v48, v47);
        v43 = (uint8_t *)v42;
        sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)", "%s\n", v42);
        if (v43 != buf)
          free(v43);
      }
      v27 = sub_1001FD94C();
      sub_100525484(v27, "HRRecoveryWorkoutSessionCachedId", 0xFFFFFFFFLL);
      *(_BYTE *)(a1 + 312) = 1;
      (*(void (**)(_QWORD))(a1 + 24))(*(_QWORD *)(a1 + 40));
    }
    goto LABEL_58;
  }
  if (!a2)
  {
    v6 = (double *)(a1 + 296);
    goto LABEL_5;
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v19 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283777;
    v55 = a3;
    v56 = 1025;
    *(_DWORD *)v57 = a2;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Estimator: Received input sample of unknown type, event time:%{private}f, inputType:%{private}d ", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v48 = 134283777;
    v49 = a3;
    v50 = 1025;
    *(_DWORD *)v51 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "Estimator: Received input sample of unknown type, event time:%{private}f, inputType:%{private}d ", &v48, 18);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "void CLHRRecoveryEstimator::evaluateForSessionEnd(CFAbsoluteTime, HRRecoveryInputType)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

void sub_100925570(uint64_t a1, int a2, int a3, double a4, double a5, double a6, double a7)
{
  NSObject *v14;
  const char *v15;
  char *v16;
  int v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  int v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  int v28;
  _BYTE buf[24];
  int v30;
  __int16 v31;
  _BYTE v32[10];
  double v33;
  _DWORD v34[398];

  if (*(_DWORD *)(a1 + 156))
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v14 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134284801;
      *(double *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = a5;
      *(_WORD *)&buf[22] = 1025;
      v30 = a2;
      v31 = 2049;
      *(double *)v32 = a6;
      *(_WORD *)&v32[8] = 2049;
      v33 = a7;
      LOWORD(v34[0]) = 1025;
      *(_DWORD *)((char *)v34 + 2) = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Estimator,computeTime,%{private}f,wrMets,%{private}f,gradeType,%{private}d,grade,%{private}f,userMets,%{private}f,userMetsSource,%{private}d", buf, 0x36u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v17 = 134284801;
      v18 = a4;
      v19 = 2049;
      v20 = a5;
      v21 = 1025;
      v22 = a2;
      v23 = 2049;
      v24 = a6;
      v25 = 2049;
      v26 = a7;
      v27 = 1025;
      v28 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,computeTime,%{private}f,wrMets,%{private}f,gradeType,%{private}d,grade,%{private}f,userMets,%{private}f,userMetsSource,%{private}d", &v17, 54);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::feedCalorieUpdate(CFAbsoluteTime, double, GradeType, double, double, CLMetsSource)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    sub_1009249BC(a1, 1, a4);
    if (*(_DWORD *)(a1 + 156))
    {
      *(_QWORD *)buf = 0;
      *(double *)&buf[8] = a4;
      *(double *)&buf[16] = a5;
      v30 = a2;
      *(double *)&v32[2] = a6;
      v33 = a7;
      v34[0] = a3;
      sub_100423B04(*(_QWORD *)(a1 + 64), (uint64_t)buf);
    }
  }
}

void sub_1009257E8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  char *v22;
  __int16 v23;
  uint64_t v24;
  uuid_string_t out;
  uint8_t buf[4];
  char *v27;
  __int16 v28;
  uint64_t v29;

  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v4 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(char **)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 112);
    *(_DWORD *)buf = 134283777;
    v27 = v5;
    v28 = 2049;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Estimator,workoutEvent,%{private}ld,workoutType,%{private}ld", buf, 0x16u);
  }
  v7 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 112);
    *(_DWORD *)out = 134283777;
    *(_QWORD *)&out[4] = v13;
    *(_WORD *)&out[12] = 2049;
    *(_QWORD *)&out[14] = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,workoutEvent,%{private}ld,workoutType,%{private}ld", out, 22);
    v16 = (uint8_t *)v15;
    v7 = sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v8 = *(_QWORD *)(a2 + 16);
  switch(v8)
  {
    case 13:
      v9 = *(_QWORD *)(a2 + 112);
      if ((v9 <= 0x18 && ((1 << v9) & 0x1028000) != 0 || sub_100925CB4(v7, v9)) && !*(_QWORD *)(a2 + 224))
        sub_100925E88(a1, (const unsigned __int8 *)a2);
      *(_BYTE *)(a1 + 313) = uuid_compare((const unsigned __int8 *)(a2 + 80), (const unsigned __int8 *)(a2 + 64)) != 0;
      return;
    case 14:
      return;
    case 15:
      sub_100926554(a1, a2);
      return;
    case 16:
      if (*(_DWORD *)(a1 + 156) == 1)
      {
        *(_DWORD *)(a1 + 156) = 3;
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 24);
      }
      return;
    case 17:
      sub_1009269D8(a1);
      return;
    default:
      if (v8 || !*(_BYTE *)(a1 + 313))
        return;
      v10 = *(_QWORD *)(a2 + 112);
      if (v10 <= 23)
      {
        if (v10 != 15 && v10 != 17)
          goto LABEL_27;
        goto LABEL_26;
      }
      if (v10 == 33)
        return;
      if (v10 == 24)
      {
LABEL_26:
        if (!*(_QWORD *)(a2 + 224))
        {
          sub_100925E88(a1, (const unsigned __int8 *)a2);
          return;
        }
      }
LABEL_27:
      if (*(_DWORD *)(a1 + 156)
        && uuid_compare((const unsigned __int8 *)(a2 + 64), (const unsigned __int8 *)(a1 + 192)))
      {
        memset(out, 0, sizeof(out));
        uuid_unparse((const unsigned __int8 *)(a1 + 192), out);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v11 = qword_10229FF68;
        if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *(_QWORD *)(a2 + 112);
          *(_DWORD *)buf = 136380931;
          v27 = out;
          v28 = 2049;
          v29 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Estimator: Terminating session (id,%{private}s) due to new multisport workout leg starting (invalid workout type,%{private}ld).", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF60 != -1)
            dispatch_once(&qword_10229FF60, &stru_10215EE68);
          v17 = *(_QWORD *)(a2 + 112);
          v21 = 136380931;
          v22 = out;
          v23 = 2049;
          v24 = v17;
          LODWORD(v20) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Terminating session (id,%{private}s) due to new multisport workout leg starting (invalid workout type,%{private}ld).", &v21, v20);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        sub_100926BA0(a1, 0);
      }
      return;
  }
}

uint64_t sub_100925C98(uint64_t a1, unint64_t a2)
{
  return (a2 < 0x19) & (0x1028000u >> a2);
}

BOOL sub_100925CB4(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (objc_opt_class(MCProfileConnection, a2)
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if (a2 <= 0x12)
      return (0x51230u >> a2) & 1;
    else
      return 0;
  }
  else
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v4 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRRecovery, not collecting analytics, no IHA permission", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "HRRecovery, not collecting analytics, no IHA permission", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHRRecoveryEstimator::isValidWorkoutTypeForHRRecoveryCoreAnalytics(CMWorkoutType) const", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

BOOL sub_100925E7C(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_100925E88(uint64_t a1, const unsigned __int8 *a2)
{
  const unsigned __int8 *v4;
  unint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  uuid_string_t v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[28];
  __int128 v34;
  _BYTE v35[26];
  int v36;
  char *v37;
  __int16 v38;
  _BYTE v39[14];
  uint8_t buf[4];
  char *v41;
  __int16 v42;
  _BYTE v43[14];
  char out[40];

  memset(out, 0, 37);
  v4 = a2 + 64;
  uuid_unparse(a2 + 64, out);
  if (!*(_DWORD *)(a1 + 156))
    goto LABEL_17;
  if (uuid_compare(v4, (const unsigned __int8 *)(a1 + 192)))
  {
    memset(v30, 0, sizeof(v30));
    uuid_unparse((const unsigned __int8 *)(a1 + 192), v30);
    v5 = *((_QWORD *)a2 + 14);
    if (v5 <= 0x18 && ((1 << v5) & 0x1028000) != 0)
    {
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v6 = qword_10229FF68;
      if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_DWORD *)(a1 + 156);
        *(_DWORD *)buf = 136381187;
        v41 = v30;
        v42 = 1025;
        *(_DWORD *)v43 = v7;
        *(_WORD *)&v43[4] = 2081;
        *(_QWORD *)&v43[6] = out;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Estimator: Terminating session (id,%{private}s,state,%{private}d) in favor of newly started session (id,%{private}s)", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v22 = *(_DWORD *)(a1 + 156);
        v36 = 136381187;
        v37 = v30;
        v38 = 1025;
        *(_DWORD *)v39 = v22;
        *(_WORD *)&v39[4] = 2081;
        *(_QWORD *)&v39[6] = out;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Terminating session (id,%{private}s,state,%{private}d) in favor of newly started session (id,%{private}s)", &v36, 28);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::beginWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      sub_100926BA0(a1, 0);
    }
    else
    {
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v8 = qword_10229FF68;
      if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_DWORD *)(a1 + 156);
        v10 = *(_QWORD *)(a1 + 208);
        *(_DWORD *)buf = 136381187;
        v41 = v30;
        v42 = 1025;
        *(_DWORD *)v43 = v9;
        *(_WORD *)&v43[4] = 2048;
        *(_QWORD *)&v43[6] = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Estimator: Session in progress (id,%{private}s,state,%{private}d,workoutType,%ld), not starting a new session", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v25 = *(_DWORD *)(a1 + 156);
        v26 = *(_QWORD *)(a1 + 208);
        v36 = 136381187;
        v37 = v30;
        v38 = 1025;
        *(_DWORD *)v39 = v25;
        *(_WORD *)&v39[4] = 2048;
        *(_QWORD *)&v39[6] = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Session in progress (id,%{private}s,state,%{private}d,workoutType,%ld), not starting a new session", &v36, 28);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::beginWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
  }
  if (!*(_DWORD *)(a1 + 156))
  {
LABEL_17:
    memset(v30, 0, 32);
    v31 = 0u;
    v32 = 0u;
    memset(v33, 0, sizeof(v33));
    v34 = 0u;
    memset(v35, 0, sizeof(v35));
    v11 = uuid_compare(a2 + 80, v4) != 0;
    if (sub_10051DBC4(*(_QWORD **)(a1 + 80), (uint64_t)v30) && !uuid_compare(v4, (const unsigned __int8 *)&v30[32]))
    {
      v15 = *(_QWORD *)&v30[8];
      *(_QWORD *)(a1 + 160) = *(_QWORD *)v30;
      *(_OWORD *)(a1 + 192) = 0u;
      v16 = v31;
      *(_QWORD *)(a1 + 168) = v15;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_QWORD *)(a1 + 208) = v16;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(_OWORD *)(a1 + 248) = 0u;
      *(_DWORD *)(a1 + 264) = 0;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 297) = 0u;
      *(_BYTE *)(a1 + 313) = v11;
      uuid_copy((unsigned __int8 *)(a1 + 192), v4);
    }
    else
    {
      v12 = *(_QWORD *)a2;
      v13 = sub_100F72BB4(*((_QWORD *)a2 + 14), *((_QWORD *)a2 + 15));
      *(_OWORD *)(a1 + 192) = 0u;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = v12;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_QWORD *)(a1 + 208) = v13;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(_OWORD *)(a1 + 248) = 0u;
      *(_DWORD *)(a1 + 264) = 0;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 297) = 0u;
      *(_BYTE *)(a1 + 313) = v11;
      uuid_copy((unsigned __int8 *)(a1 + 192), v4);
      v14 = *((_QWORD *)a2 + 14);
      if (v14 <= 0x18 && ((1 << v14) & 0x1028000) != 0)
        sub_100B0E63C(*(_QWORD **)(a1 + 80), (double *)(a1 + 160));
    }
    *(_DWORD *)(a1 + 156) = 1;
    if (*(_QWORD *)a1)
      (*(void (**)(_QWORD))a1)(*(_QWORD *)(a1 + 40));
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v17 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a1 + 168);
      *(_DWORD *)buf = 136380931;
      v41 = out;
      v42 = 2049;
      *(_QWORD *)v43 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Estimator: Beginning session due to new workout (id:%{private}s, sessionStartTime:%{private}f)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v19 = *(_QWORD *)(a1 + 168);
      v36 = 136380931;
      v37 = out;
      v38 = 2049;
      *(_QWORD *)v39 = v19;
      LODWORD(v29) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Beginning session due to new workout (id:%{private}s, sessionStartTime:%{private}f)", &v36, v29);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::beginWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
}

double sub_100926554(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  const unsigned __int8 *v8;
  const unsigned __int8 *v9;
  NSObject *v10;
  double result;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  char *v23;
  __int16 v24;
  char *v25;
  char v26[48];
  uint8_t buf[4];
  char *v28;
  __int16 v29;
  char *v30;
  char out[40];

  v2 = *(_DWORD *)(a1 + 156);
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    v8 = (const unsigned __int8 *)(a2 + 64);
    v9 = (const unsigned __int8 *)(a1 + 192);
    if (uuid_compare((const unsigned __int8 *)(a2 + 64), (const unsigned __int8 *)(a1 + 192)))
    {
      memset(out, 0, 37);
      uuid_unparse(v9, out);
      memset(v26, 0, 37);
      uuid_unparse(v8, v26);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v10 = qword_10229FF68;
      if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136380931;
        v28 = out;
        v29 = 2081;
        v30 = v26;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Estimator: Unexpected Workout SessionId (expected,%{private}s,actual,%{private}s)", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v22 = 136380931;
        v23 = out;
        v24 = 2081;
        v25 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "Estimator: Unexpected Workout SessionId (expected,%{private}s,actual,%{private}s)", &v22, 22);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "void CLHRRecoveryEstimator::endWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      return sub_100926BA0(a1, 0);
    }
    else
    {
      result = *(double *)(a2 + 24);
      *(double *)(a1 + 176) = result;
      v12 = *(_QWORD *)(a2 + 112);
      if (v12 <= 0x18 && ((1 << v12) & 0x1028000) != 0)
      {
        v13 = *(_QWORD **)(a1 + 80);
        if (*(_QWORD *)(a1 + 160))
          sub_100B0E3E4((uint64_t)v13);
        else
          sub_100B0E63C(v13, (double *)(a1 + 160));
      }
      v14 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)(a1 + 156) = 2;
      if (v14 == 4)
      {
        return sub_100926BA0(a1, 1);
      }
      else
      {
        v15 = *(_QWORD *)(a2 + 112);
        if (v15 <= 0x18 && ((1 << v15) & 0x1028000) != 0)
        {
          memset(out, 0, 37);
          uuid_unparse(v9, out);
          if (qword_10229FF60 != -1)
            dispatch_once(&qword_10229FF60, &stru_10215EE68);
          v16 = qword_10229FF68;
          if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136380675;
            v28 = out;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Estimator: Caching session id %{private}s.", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF60 != -1)
              dispatch_once(&qword_10229FF60, &stru_10215EE68);
            *(_DWORD *)v26 = 136380675;
            *(_QWORD *)&v26[4] = out;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "Estimator: Caching session id %{private}s.", v26, 12);
            v21 = (uint8_t *)v20;
            sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::endWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v20);
            if (v21 != buf)
              free(v21);
          }
          v17 = sub_1001FD94C();
          sub_1005285B4(v17, "HRRecoveryWorkoutSessionCachedId", out);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1009269D8(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if ((*(_DWORD *)(result + 156) - 3) <= 1)
  {
    v1 = result;
    *(_DWORD *)(result + 156) = 1;
    *(_QWORD *)(result + 184) = 0;
    if (*(_QWORD *)(result + 32))
    {
      if (*(_BYTE *)(result + 312))
      {
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v2 = qword_10229FF68;
        if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Estimator: Reregistering HR notification on workout resume", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF60 != -1)
            dispatch_once(&qword_10229FF60, &stru_10215EE68);
          v5[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Reregistering HR notification on workout resume", v5, 2);
          v4 = (uint8_t *)v3;
          sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::resumeWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v3);
          if (v4 != buf)
            free(v4);
        }
        *(_BYTE *)(v1 + 312) = 0;
        return (*(uint64_t (**)(_QWORD))(v1 + 32))(*(_QWORD *)(v1 + 40));
      }
    }
  }
  return result;
}

double sub_100926BA0(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  void (*v5)(_QWORD);
  double result;
  _OWORD *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (a2)
    sub_100927348((id *)a1);
  v3 = sub_1001FD94C();
  sub_100525484(v3, "HRRecoveryWorkoutSessionCachedId", 0xFFFFFFFFLL);
  if (*(_QWORD *)(a1 + 24) && !*(_BYTE *)(a1 + 312))
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v4 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Estimator: Unregistering HR notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Unregistering HR notification", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::endSession(BOOL)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    *(_BYTE *)(a1 + 312) = 1;
    (*(void (**)(_QWORD))(a1 + 24))(*(_QWORD *)(a1 + 40));
  }
  v5 = *(void (**)(_QWORD))(a1 + 8);
  if (v5)
    v5(*(_QWORD *)(a1 + 40));
  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  v7 = (_OWORD *)(a1 + 160);
  *((_DWORD *)v7 - 1) = 0;
  v7[7] = 0u;
  v7[8] = 0u;
  *(_OWORD *)((char *)v7 + 138) = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  *(_OWORD *)((char *)v7 + 92) = 0u;
  return result;
}

void sub_100926DA8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  std::string *p_p;
  std::string *v5;
  NSObject *v6;
  uint64_t v7;
  CFAbsoluteTime Current;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint64_t v19;
  __int16 v20;
  std::string __p;
  __int128 v22;
  __int128 v23;
  unsigned __int8 v24[16];
  __int128 v25;
  __int128 v26;
  _BYTE v27[28];
  __int128 v28;
  unsigned __int8 v29[26];
  uuid_t uu;
  uint8_t buf[4];
  std::string *v32;

  memset(&__p, 0, sizeof(__p));
  v2 = sub_1001FD94C();
  if (!sub_1000BCB64(v2, "HRRecoveryWorkoutSessionCachedId", &__p))
    goto LABEL_20;
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v3 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380675;
    v32 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Estimator: Found cached workout session %{private}s. Will attempt to recover.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v13 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(v22) = 136380675;
    *(_QWORD *)((char *)&v22 + 4) = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Found cached workout session %{private}s. Will attempt to recover.", &v22, 12);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::recoverSessionFromCache()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  memset(uu, 0, sizeof(uu));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &__p;
  else
    v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  uuid_parse((const char *)v5, uu);
  v22 = 0u;
  v23 = 0u;
  v25 = 0u;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v28 = 0u;
  memset(v29, 0, sizeof(v29));
  if (!sub_10051DBC4(*(_QWORD **)(a1 + 80), (uint64_t)&v22) || uuid_compare(uu, v24))
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v6 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Estimator: Cached session ID does not match most recent persisted session ID. Terminating recovery attempt.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_19;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v20 = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Cached session ID does not match most recent persisted session ID. Terminating recovery attempt.", &v20, v19);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::recoverSessionFromCache()", "%s\n", v16);
    if (v17 == buf)
      goto LABEL_19;
    goto LABEL_41;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v9 = v23;
  if (Current > *(double *)&v23 + 178.0)
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v10 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Estimator: Recovered workout session is stale, terminating recovery.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_19;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v20 = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator: Recovered workout session is stale, terminating recovery.", &v20, v19);
    v17 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::recoverSessionFromCache()", "%s\n", v18);
    if (v17 == buf)
      goto LABEL_19;
LABEL_41:
    free(v17);
LABEL_19:
    v7 = sub_1001FD94C();
    sub_100525484(v7, "HRRecoveryWorkoutSessionCachedId", 0xFFFFFFFFLL);
    goto LABEL_20;
  }
  v11 = *((_QWORD *)&v22 + 1);
  v12 = v25;
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  *(_QWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  uuid_copy((unsigned __int8 *)(a1 + 192), uu);
  *(_DWORD *)(a1 + 156) = 2;
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD))a1)(*(_QWORD *)(a1 + 40));
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100927314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id *sub_100927348(id *result)
{
  uint64_t v1;
  double v2;
  double v3;
  int v9;
  char v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void (*v21)(double *, _QWORD);
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  char v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unsigned __int8 v46;
  uint64_t v47;
  id v48[2];
  _DWORD v49[2];
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  double v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  int v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  double v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  int v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  uint8_t buf[4];
  int v115;
  __int16 v116;
  double v117;
  __int16 v118;
  double v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  double v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  int v161;
  __int16 v162;
  uint64_t v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  __int16 v168;
  double v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  int v175;
  __int16 v176;
  uint64_t v177;
  __int16 v178;
  uint64_t v179;

  if (*((_DWORD *)result + 39) != 2)
    return result;
  v1 = (uint64_t)result;
  sub_100131938(v48, (uint64_t)"CLHRRecoveryEstimator::estimateHeartRateRecovery", 0);
  v3 = *(double *)(v1 + 168);
  v2 = *(double *)(v1 + 176);
  v26 = v2 + 178.0;
  LODWORD(v25) = 0;
  v27 = 0.0;
  v28 = v2 - v3;
  v29 = *(_QWORD *)(v1 + 208);
  v30 = *(_BYTE *)(v1 + 144);
  v31 = v2;
  v32 = 0u;
  v33 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v34 = _Q1;
  v35 = 0u;
  v47 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0;
  v42 = 0;
  v41 = 0u;
  v40 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0;
  sub_100927A5C(v1, (uint64_t)&v25);
  v9 = LODWORD(v25);
  if (v28 >= 360.0)
  {
    if (*((double *)&v45 + 1) <= 0.3 || *(double *)&v45 - *((double *)&v44 + 1) <= 10.0 || LODWORD(v25) == 4)
      goto LABEL_9;
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  v46 = v10;
LABEL_9:
  if (!LODWORD(v25) || v46)
  {
    if (!LODWORD(v25))
    {
      v12 = (*((double *)&v32 + 1) - *(double *)&v43) / *((double *)&v32 + 1) * *(float *)(v1 + 124);
      if (*((double *)&v43 + 1) - *(double *)&v36 > v12)
        v12 = *((double *)&v43 + 1) - *(double *)&v36;
      v13 = v12 + -1.6;
      if (*(double *)(v1 + 384) < v13)
        v13 = *(double *)(v1 + 384);
      *(double *)&v40 = v13;
      if (v13 > 0.0)
      {
        if (v13 < *(double *)(v1 + 376))
          v13 = *(double *)(v1 + 376);
        *(double *)&v40 = v13;
      }
      sub_100927CB4(v1, (uint64_t)&v25);
    }
    v11 = sub_100927DE0(v1, &v25);
    v27 = v11;
    if (v11 >= *(double *)(v1 + 376) && v11 <= *(double *)(v1 + 384))
    {
      v9 = LODWORD(v25);
    }
    else
    {
      v9 = LODWORD(v25);
      if (LODWORD(v25) == 1)
      {
        v9 = 13;
        LODWORD(v25) = 13;
      }
      v46 = 0;
    }
  }
  else
  {
    v11 = v27;
  }
  *(_QWORD *)&v41 = 0xBFF999999999999ALL;
  v47 = *(_QWORD *)(v1 + 320);
  v14 = v33;
  *(double *)(v1 + 216) = v11;
  *(_QWORD *)(v1 + 224) = *((_QWORD *)&v14 + 1);
  v15 = *((_QWORD *)&v35 + 1);
  v16 = v36;
  *(double *)(v1 + 232) = *(float *)(v1 + 124);
  *(_QWORD *)(v1 + 240) = v15;
  v17 = *((_QWORD *)&v32 + 1);
  *(_QWORD *)(v1 + 248) = v32;
  *(_QWORD *)(v1 + 256) = v14;
  *(_QWORD *)(v1 + 272) = v40;
  *(_QWORD *)(v1 + 280) = v17;
  *(_QWORD *)(v1 + 288) = v16;
  *(_DWORD *)(v1 + 264) = v9;
  v18 = *(_QWORD *)(v1 + 208);
  if (v18 <= 0x18 && ((1 << v18) & 0x1028000) != 0)
  {
    HIBYTE(v42) = sub_100B10B90(*(_QWORD *)(v1 + 80));
    sub_100B0E3E4(*(_QWORD *)(v1 + 80));
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v19 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v115 = LODWORD(v25);
    v117 = v26;
    v20 = *(_QWORD *)(v1 + 168);
    v119 = v27;
    v121 = v20;
    v123 = v31;
    v125 = v29;
    v129 = *((_QWORD *)&v32 + 1);
    v127 = v32;
    v133 = *((_QWORD *)&v33 + 1);
    v131 = v33;
    v137 = *((_QWORD *)&v34 + 1);
    v135 = v34;
    v141 = *((_QWORD *)&v35 + 1);
    v139 = v35;
    v145 = *((_QWORD *)&v36 + 1);
    v143 = v36;
    v149 = *((_QWORD *)&v37 + 1);
    v147 = v37;
    v153 = *((_QWORD *)&v38 + 1);
    v151 = v38;
    v155 = v41;
    v159 = *((_QWORD *)&v40 + 1);
    v157 = v40;
    v161 = HIBYTE(v42);
    v165 = *((_QWORD *)&v43 + 1);
    v163 = v43;
    v171 = *((_QWORD *)&v44 + 1);
    v167 = v44;
    v173 = v45;
    v177 = *(_QWORD *)(v1 + 320);
    v169 = *(float *)(v1 + 124);
    v160 = 1025;
    v174 = 1025;
    v175 = v46;
    v116 = 2049;
    v118 = 2049;
    v120 = 2049;
    v122 = 2049;
    v124 = 2049;
    v126 = 2049;
    v128 = 2049;
    v130 = 2049;
    v132 = 2049;
    v134 = 2049;
    v136 = 2049;
    v138 = 2049;
    v140 = 2049;
    v142 = 2049;
    v144 = 2049;
    v146 = 2049;
    v148 = 2049;
    v150 = 2049;
    v152 = 2049;
    v154 = 2049;
    v156 = 2049;
    v158 = 2049;
    v162 = 2049;
    v164 = 2049;
    v166 = 2049;
    v168 = 2049;
    v170 = 2049;
    v172 = 2049;
    v176 = 2049;
    v178 = 2049;
    v179 = *((_QWORD *)&v45 + 1);
    *(_DWORD *)buf = 67182849;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Estimator,status,%{private}d,timeOfEstimate,%{private}f,hrRecovery,%{private}f,sessionStartTime,%{private}f,activityEndTime,%{private}f,workoutType,%{private}ld,recoveryOnsetTime,%{private}f,peakHR,%{private}f,steadyStateHR,%{private}f,lambda,%{private}f,mse,%{private}f,evs,%{private}f,tDrop,%{private}f,hrMinAdjusted,%{private}f,hrRecoveryReference,%{private}f,recoveryLoad,%{private}f,maxRecoveryHR,%{private}f,minRecoveryHR,%{private}f,recoveryMetsMean,%{private}f,recoveryMetsStdDev,%{private}f,biasAdjustment,%{private}f,sessionHrRecovery,%{private}f,peakHrOneMinusFhr,%{private}f,isEligibleForHK,%{private}d,hrOneMinPostRecovery,%{private}f,hrRecoveryReferencePeak,%{private}f,hrOneMinExponential,%{private}f,hrmax,%{private}f,minHRAfterWorkoutEnd,%{private}f,maxHRAfterWorkoutEnd,%{private}f,isOtherwiseEligibleForLongitudinal,%{private}d,sevenDayRestingHR,%{private}f,oneMinusFHRAfterWorkoutEnd,%{private}f", buf, 0x140u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v49[1] = LODWORD(v25);
    v51 = v26;
    v22 = *(_QWORD *)(v1 + 168);
    v53 = v27;
    v55 = v22;
    v57 = v31;
    v59 = v29;
    v63 = *((_QWORD *)&v32 + 1);
    v61 = v32;
    v67 = *((_QWORD *)&v33 + 1);
    v65 = v33;
    v71 = *((_QWORD *)&v34 + 1);
    v69 = v34;
    v75 = *((_QWORD *)&v35 + 1);
    v73 = v35;
    v79 = *((_QWORD *)&v36 + 1);
    v77 = v36;
    v83 = *((_QWORD *)&v37 + 1);
    v81 = v37;
    v87 = *((_QWORD *)&v38 + 1);
    v85 = v38;
    v89 = v41;
    v93 = *((_QWORD *)&v40 + 1);
    v91 = v40;
    v95 = HIBYTE(v42);
    v99 = *((_QWORD *)&v43 + 1);
    v97 = v43;
    v105 = *((_QWORD *)&v44 + 1);
    v101 = v44;
    v107 = v45;
    v111 = *(_QWORD *)(v1 + 320);
    v103 = *(float *)(v1 + 124);
    v94 = 1025;
    v108 = 1025;
    v109 = v46;
    v50 = 2049;
    v52 = 2049;
    v54 = 2049;
    v56 = 2049;
    v58 = 2049;
    v60 = 2049;
    v62 = 2049;
    v64 = 2049;
    v66 = 2049;
    v68 = 2049;
    v70 = 2049;
    v72 = 2049;
    v74 = 2049;
    v76 = 2049;
    v78 = 2049;
    v80 = 2049;
    v82 = 2049;
    v84 = 2049;
    v86 = 2049;
    v88 = 2049;
    v90 = 2049;
    v92 = 2049;
    v96 = 2049;
    v98 = 2049;
    v100 = 2049;
    v102 = 2049;
    v104 = 2049;
    v106 = 2049;
    v110 = 2049;
    v112 = 2049;
    v113 = *((_QWORD *)&v45 + 1);
    v49[0] = 67182849;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Estimator,status,%{private}d,timeOfEstimate,%{private}f,hrRecovery,%{private}f,sessionStartTime,%{private}f,activityEndTime,%{private}f,workoutType,%{private}ld,recoveryOnsetTime,%{private}f,peakHR,%{private}f,steadyStateHR,%{private}f,lambda,%{private}f,mse,%{private}f,evs,%{private}f,tDrop,%{private}f,hrMinAdjusted,%{private}f,hrRecoveryReference,%{private}f,recoveryLoad,%{private}f,maxRecoveryHR,%{private}f,minRecoveryHR,%{private}f,recoveryMetsMean,%{private}f,recoveryMetsStdDev,%{private}f,biasAdjustment,%{private}f,sessionHrRecovery,%{private}f,peakHrOneMinusFhr,%{private}f,isEligibleForHK,%{private}d,hrOneMinPostRecovery,%{private}f,hrRecoveryReferencePeak,%{private}f,hrOneMinExponential,%{private}f,hrmax,%{private}f,minHRAfterWorkoutEnd,%{private}f,maxHRAfterWorkoutEnd,%{private}f,isOtherwiseEligibleForLongitudinal,%{private}d,sevenDayRestingHR,%{private}f,oneMinusFHRAfterWorkoutEnd,%{private}f", v49, 320);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryEstimator::estimateHeartRateRecovery()", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v21 = *(void (**)(double *, _QWORD))(v1 + 16);
  if (v21)
    v21(&v25, *(_QWORD *)(v1 + 40));
  return sub_100131740(v48);
}

void sub_100927A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id a47)
{
  sub_100131740(&a47);
  _Unwind_Resume(a1);
}

void sub_100927A5C(uint64_t a1, uint64_t a2)
{
  void *__p;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  __p = 0;
  v3 = 0;
  v4 = 0;
  if (sub_100928288(a1, a2, (uint64_t *)&v5, (uint64_t)&__p))
    operator new();
  if (__p)
  {
    v3 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
}

void sub_100927C18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  operator delete();
}

uint64_t sub_100927CB4(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  double v4;
  double v5;
  double v6;

  if (!*(_BYTE *)(result + 152))
  {
    v2 = 10;
    goto LABEL_7;
  }
  if (*(double *)(a2 + 24) < 360.0)
  {
    v2 = 2;
LABEL_7:
    *(_DWORD *)a2 = v2;
    *(_BYTE *)(a2 + 264) = 0;
    return result;
  }
  if (*(double *)(a2 + 200) < *(double *)(result + 360))
  {
    v2 = 3;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a2 + 208))
  {
    v3 = 16;
  }
  else
  {
    v4 = *(double *)(a2 + 64);
    if (*(double *)(a2 + 136) - v4 <= *(double *)(result + 328))
    {
      if (*(double *)(a2 + 184) <= *(double *)(result + 344))
      {
        v3 = 14;
      }
      else if (v4 - *(double *)(a2 + 72) <= *(double *)(result + 352))
      {
        v3 = 15;
      }
      else
      {
        v5 = *(double *)(a2 + 96);
        if (v5 == -1.0 || v5 < *(double *)(result + 368))
        {
          v3 = 9;
        }
        else
        {
          v6 = *(double *)(a2 + 176);
          if (v6 >= *(double *)(result + 376) && v6 <= *(double *)(result + 384))
          {
            if (vabdd_f64(*(double *)(a2 + 232), *(double *)(a2 + 216)) <= 10.0)
              v3 = 1;
            else
              v3 = 18;
          }
          else
          {
            v3 = 13;
          }
        }
      }
    }
    else
    {
      v3 = 11;
    }
  }
  *(_DWORD *)a2 = v3;
  return result;
}

double sub_100927DE0(uint64_t a1, double *a2)
{
  NSObject *v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  NSObject *v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  long double v18;
  double v19;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  void *__p;
  double *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  __int16 v29;
  double v30;
  uint8_t buf[4];
  unint64_t v32;
  __int16 v33;
  double v34;

  __p = 0;
  v25 = 0;
  v26 = 0;
  sub_100B0E9D4(*(_QWORD *)(a1 + 80), &__p, 1);
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10215EE68);
  v4 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134283521;
    v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v25 - (_BYTE *)__p) >> 5);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Estimator,Num of recent estimates:%{private}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v27 = 134283521;
    v28 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v25 - (_BYTE *)__p) >> 5);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "Estimator,Num of recent estimates:%{private}lu", &v27, 12);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "double CLHRRecoveryEstimator::getLongitudinalEstimate(HRRecoveryResult &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v5 = *(_DWORD *)a2;
  v6 = 0.0;
  if (*(_DWORD *)a2 == 1)
    v7 = a2[22];
  else
    v7 = 0.0;
  if (v5 == 1)
    v8 = 1.0;
  else
    v8 = 0.0;
  v9 = (double *)__p;
  v10 = v25;
  if (__p != v25)
  {
    do
    {
      if (v9[14] <= 0.0)
        v11 = v9[7];
      else
        v11 = v9[14];
      if (v11 >= *(double *)(a1 + 376) && v11 <= *(double *)(a1 + 384))
      {
        v17 = a2[1] - v9[1];
        v18 = exp2(v17 / 86400.0 / -28.0);
        v7 = v7 + v18 * v11;
        v8 = v8 + v18;
        if (v17 >= v6)
          v19 = v6;
        else
          v19 = v17;
        if (v6 == 0.0)
          v6 = v17;
        else
          v6 = v19;
      }
      else
      {
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v12 = qword_10229FF68;
        if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
        {
          v13 = *((_QWORD *)v9 + 1);
          *(_DWORD *)buf = 134283777;
          v32 = v13;
          v33 = 2049;
          v34 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Estimator: Excluding historical estimate from smoothing (startTime:%{private}f, sessionEstimate:%{private}f)", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF60 != -1)
            dispatch_once(&qword_10229FF60, &stru_10215EE68);
          v14 = *((_QWORD *)v9 + 1);
          v27 = 134283777;
          v28 = v14;
          v29 = 2049;
          v30 = v11;
          LODWORD(v23) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "Estimator: Excluding historical estimate from smoothing (startTime:%{private}f, sessionEstimate:%{private}f)", &v27, v23);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "double CLHRRecoveryEstimator::getLongitudinalEstimate(HRRecoveryResult &)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      v9 += 20;
    }
    while (v9 != v10);
    v5 = *(_DWORD *)a2;
  }
  if (v5 != 1 && (v6 > 2419200.0 || v6 == 0.0))
    *((_BYTE *)a2 + 264) = 0;
  else
    v7 = v7 / v8;
  if (__p)
  {
    v25 = (double *)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_100928260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100928288(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  NSObject *v7;
  _BOOL8 v8;
  int v9;
  double *v10;
  double *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  double v18;
  NSObject *v19;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  __int16 v25[8];
  void *__p;
  double *v27;
  uint64_t v28;
  uint8_t buf[8];

  if ((*(unsigned int (**)(_QWORD, uint64_t, double, double))(**(_QWORD **)(a1 + 64) + 48))(*(_QWORD *)(a1 + 64), a4, *(double *)(a1 + 168), *(double *)(a2 + 8)) == 2)
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10215EE68);
    v7 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Estimator: Failed to fetch input work rates for estimation", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "Estimator: Failed to fetch input work rates for estimation", &__p, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLHRRecoveryEstimator::getInputs(HRRecoveryResult &, std::vector<HRRecoveryInputHR> &, std::vector<HRRecoveryInputWR> &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v8 = 0;
    *(_DWORD *)a2 = 4;
  }
  else
  {
    __p = 0;
    v27 = 0;
    v28 = 0;
    v9 = (*(uint64_t (**)(_QWORD, void **, double, double))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48), &__p, *(double *)(a1 + 168), *(double *)(a2 + 8));
    v8 = v9 != 2;
    if (v9 == 2)
    {
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10215EE68);
      v19 = qword_10229FF68;
      if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Estimator: Failed to fetch input heart rates for estimation", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_10215EE68);
        v25[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "Estimator: Failed to fetch input heart rates for estimation", v25, 2);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLHRRecoveryEstimator::getInputs(HRRecoveryResult &, std::vector<HRRecoveryInputHR> &, std::vector<HRRecoveryInputWR> &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      *(_DWORD *)a2 = 4;
    }
    else
    {
      v10 = (double *)__p;
      v11 = v27;
      *(_QWORD *)buf = a3;
      if (__p != v27)
      {
        do
        {
          if (v10[3] >= 0.6)
            sub_100341284((void ***)buf, v10);
          v10 += 4;
        }
        while (v10 != v11);
      }
      v12 = *(double *)(a1 + 176) + -60.0;
      v13 = *a3;
      v14 = a3[1];
      v15 = 0.0;
      v16 = 0.0;
      if (*a3 != v14)
      {
        v17 = 0;
        do
        {
          if (*(double *)(v13 + 8) > v12)
            ++v17;
          v13 += 32;
        }
        while (v13 != v14);
        v16 = (double)v17;
      }
      v18 = *(double *)(a2 + 8);
      if (v18 > v12)
        v15 = v16 / (v18 - v12);
      *(double *)(a2 + 200) = v15;
    }
    if (__p)
    {
      v27 = (double *)__p;
      operator delete(__p);
    }
  }
  return v8;
}

void sub_10092867C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1009286A8(uint64_t a1, double *a2, _QWORD *a3)
{
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double *v12;
  double *v13;
  double v14;
  double result;

  v3 = (double *)a3[1];
  if ((double *)*a3 == v3)
  {
    v8 = a2[31];
  }
  else
  {
    v4 = a2[6];
    v5 = a2[30];
    v6 = a2[28];
    v7 = a2[15];
    v8 = a2[31];
    v9 = (double *)(*a3 + 16);
    do
    {
      v10 = *(v9 - 1);
      if (v10 > v4 && v10 < v4 + 178.0)
      {
        if (v6 == 0.0)
        {
          v6 = *v9;
          a2[28] = *v9;
        }
        if (v10 > v4 + 60.0 && v7 == 0.0)
        {
          v7 = *v9;
          a2[15] = *v9;
        }
        if (v8 < *v9)
          v8 = *v9;
        a2[31] = v8;
        v12 = v9;
        if (v5 != 0.0)
        {
          if (*v9 >= v5)
            v12 = a2 + 30;
          else
            v12 = v9;
        }
        v5 = *v12;
        a2[30] = *v12;
      }
      v13 = v9 + 2;
      v9 += 4;
    }
    while (v13 != v3);
  }
  v14 = a2[8];
  if (v14 < v8)
    v14 = v8;
  result = 1.0 - (*(float *)(a1 + 124) - v14) / (*(float *)(a1 + 124) - *(double *)(a1 + 320));
  a2[32] = result;
  return result;
}

uint64_t sub_10092879C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double *v8;
  double v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v18;
  double *v19;
  double v20;
  float v21;
  _QWORD *v22;
  double v23;
  double v24;
  double v26;
  uint64_t (**v27)();
  int v28;
  _OWORD v29[3];
  _QWORD *v30;
  _QWORD v31[2];

  v4 = *(double *)(a2 + 104);
  v5 = *(double *)(a2 + 56);
  v6 = *(float *)(a1 + 124);
  v7 = v6 - *(double *)(a1 + 320);
  v26 = 0.0;
  v27 = off_10213D2B0;
  memset(v29, 0, sizeof(v29));
  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  v28 = 3;
  v8 = (double *)a3[1];
  if ((double *)*a3 == v8)
  {
    v22 = 0;
  }
  else
  {
    v10 = v4 + 60.0;
    v11 = v5 + 178.0;
    v12 = v5 + 140.0;
    v13 = (double *)(*a3 + 16);
    do
    {
      v14 = *(v13 - 1);
      if (v14 > *(double *)(a2 + 104))
      {
        v15 = *(double *)(a2 + 136);
        if (v15 < *v13)
          v15 = *v13;
        *(double *)(a2 + 136) = v15;
        if (v14 < v12)
        {
          sub_10009E858((uint64_t)&v27, v13);
          if (sub_10009E784(&v27, 2, &v26))
          {
            v16 = *(double *)(a2 + 144);
            if (v26 < v16 || v16 == 0.0)
              v16 = v26;
            *(double *)(a2 + 144) = v16;
          }
        }
        v18 = *(v13 - 1);
        if (v18 > v10 && *(double *)(a2 + 216) == 0.0)
          *(double *)(a2 + 216) = *v13;
        if (v18 < v11)
          *(double *)(a2 + 128) = *(double *)(a2 + 128) + (*v13 - *(double *)(a1 + 320)) / v7;
      }
      v19 = v13 + 2;
      v13 += 4;
    }
    while (v19 != v8);
    v20 = *(double *)(a1 + 320);
    v21 = *(float *)(a1 + 124);
    v22 = (_QWORD *)v31[0];
    v6 = v21;
    v7 = v6 - v20;
  }
  v23 = *(double *)(a2 + 64);
  v24 = *(double *)(a2 + 72);
  *(double *)(a2 + 184) = 1.0 - (v6 - v23) / v7;
  *(long double *)(a2 + 232) = v24 + (v23 - v24) * exp(*(double *)(a2 + 80) * -60.0);
  v27 = off_10213D2B0;
  sub_100008848((uint64_t)&v30, v22);
  return sub_10047F25C(v29);
}

void sub_1009289A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100479F9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009289B4(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

unint64_t sub_1009289E0(unint64_t result)
{
  if (result <= 0x1A && ((1 << result) & 0x6000001) != 0)
    LOBYTE(result) = 0;
  return result;
}

uint64_t sub_100928A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  float v9;
  int v10;
  uint64_t result;
  int v12;

  CLMotionActivity::init((CLMotionActivity *)a2);
  *(_DWORD *)a2 = sub_1000CF584((int *)a1);
  v4 = sub_1000CF584((int *)(a1 + 24));
  v5 = *(unsigned __int8 *)(a1 + 29);
  *(_DWORD *)(a2 + 88) = v4;
  *(_DWORD *)(a2 + 92) = v5;
  *(double *)(a2 + 80) = (double)*(unint64_t *)(a1 + 16) * 0.000001;
  v6 = *(unsigned __int8 *)(a1 + 4);
  v7 = v6 == 3;
  if (v6 == 3)
    v6 = 2;
  *(_BYTE *)(a2 + 48) = v7;
  *(_DWORD *)(a2 + 4) = v6;
  v8 = *(unsigned __int8 *)(a1 + 6);
  *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(a1 + 5);
  *(_DWORD *)(a2 + 16) = v8;
  v9 = *(float *)(a1 + 84);
  *(_DWORD *)(a2 + 20) = v9 >= 0.75;
  *(double *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 52) = *(unsigned __int8 *)(a1 + 11);
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(a2 + 96) & 0xE0 | *(_BYTE *)(a1 + 36) & 0x1F;
  if (*(unsigned __int8 *)(a1 + 38) - 1 < 3)
    v10 = (*(_BYTE *)(a1 + 38) - 1) + 1;
  else
    v10 = 0;
  *(_DWORD *)(a2 + 64) = v10;
  *(_WORD *)(a2 + 74) = *(_WORD *)(a1 + 46);
  result = sub_1000CF584((int *)(a1 + 56));
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 100) = *(unsigned __int8 *)(a1 + 37);
  *(_DWORD *)(a2 + 104) = result;
  if (*(unsigned __int8 *)(a1 + 80) - 1 < 3)
    v12 = (*(_BYTE *)(a1 + 80) - 1) + 1;
  else
    v12 = 0;
  *(_DWORD *)(a2 + 128) = v12;
  return result;
}

void sub_100928B14(int *a1, int *a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  float v8;
  int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  float v27;
  int v28;
  int v29;
  int v30;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  int v45;
  int v46;
  int v47;
  double v48;
  double v49;
  _BYTE v50[12];
  int v51;
  int v52;
  _BYTE v53[6];
  _BYTE v54[6];
  int v55;
  _BYTE v56[28];
  const char *v57;
  uint8_t buf[4];
  int v59;
  __int16 v60;
  float v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  double v71;
  __int16 v72;
  int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  int v105;
  __int16 v106;
  uint64_t v107;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10215EE88);
  v6 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a1;
    v8 = *(float *)a2;
    v9 = a2[1];
    v10 = a1[3];
    v11 = a2[3];
    v12 = a2[4];
    v13 = *((float *)a2 + 9);
    v14 = a2[13];
    v15 = *((_QWORD *)a2 + 7);
    v16 = *((_QWORD *)a2 + 10);
    v17 = *((_QWORD *)a2 + 5);
    v18 = *((unsigned __int8 *)a2 + 32);
    v19 = a2[22];
    v20 = a2[23];
    v21 = *((unsigned __int8 *)a2 + 96);
    v22 = a3;
    LODWORD(a3) = a2[16];
    v23 = a2[26];
    v25 = *((_QWORD *)a2 + 14);
    v24 = *((_QWORD *)a2 + 15);
    v26 = a2[32];
    *(_DWORD *)buf = 67115266;
    v59 = v7;
    v60 = 1024;
    v61 = v8;
    v62 = 1024;
    v63 = v9;
    v64 = 1024;
    v65 = v10;
    v66 = 1024;
    v67 = v11;
    v68 = 1024;
    v69 = v12;
    v70 = 2048;
    v71 = v13;
    v72 = 1024;
    v73 = v14;
    v74 = 2048;
    v75 = v15;
    v76 = 2048;
    v77 = v16;
    v78 = 2048;
    v79 = v17;
    v80 = 1024;
    v81 = v18;
    v82 = 1024;
    v83 = v19;
    v84 = 1024;
    v85 = v20;
    v86 = 1024;
    v87 = v21 & 1;
    v88 = 1024;
    v89 = (v21 >> 2) & 1;
    v90 = 1024;
    v91 = (v21 >> 3) & 1;
    v92 = 1024;
    v93 = (v21 >> 4) & 1;
    v94 = 1024;
    v95 = (v21 >> 1) & 1;
    v96 = 1024;
    v97 = a3;
    HIDWORD(a3) = HIDWORD(v22);
    v98 = 1024;
    v99 = v23;
    v100 = 2048;
    v101 = v25;
    v102 = 2048;
    v103 = v24;
    v104 = 1024;
    v105 = v26;
    v106 = 2080;
    v107 = v22;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "MotionState,Motion,From,%d,To,%d,conf,%d,Mounted,From,%d,To,%d,conf,%d,tilt,%.1f,exitC,%d,exitTime,%f,startTime,%f,timestamp,%f,standing,%d,rawMotionType,%d,rawConfidence,%d,motionHint,%d,bbHint,%d,wifiHint,%d,btHint,%d,gpsHint,%d,vehicleType,%d,tag,workoutDetectionType,%d,workoutDetectionTime,%f,workoutEscalationTime,%lld, YouthMotionState, %d, %s\n", buf, 0xB4u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10215EE88);
    v27 = *(float *)a2;
    v28 = a2[1];
    v29 = a1[3];
    v30 = a2[4];
    v31 = *((float *)a2 + 9);
    v32 = a2[13];
    v33 = *((double *)a2 + 7);
    v34 = *((_QWORD *)a2 + 10);
    v35 = *((_QWORD *)a2 + 5);
    v36 = *((unsigned __int8 *)a2 + 32);
    v37 = a2[23];
    v38 = *((unsigned __int8 *)a2 + 96);
    v39 = a2[16];
    v40 = *((_QWORD *)a2 + 14);
    v41 = *((_QWORD *)a2 + 15);
    v42 = a2[32];
    LOWORD(v46) = 1024;
    HIWORD(v46) = LOWORD(v27);
    LOWORD(v47) = HIWORD(v29);
    HIWORD(v47) = 1024;
    LOWORD(v48) = 1024;
    *(_DWORD *)((char *)&v48 + 2) = v30;
    HIWORD(v48) = 2048;
    LOWORD(v49) = 1024;
    *(_DWORD *)((char *)&v49 + 2) = v32;
    HIWORD(v49) = 2048;
    *(_WORD *)v50 = 2048;
    *(_QWORD *)&v50[2] = v34;
    *(_WORD *)&v50[10] = 2048;
    LOWORD(v51) = HIWORD(v36);
    HIWORD(v51) = 1024;
    LOWORD(v52) = 1024;
    HIWORD(v52) = v37;
    *(_DWORD *)v53 = (v38 >> 2) & 1;
    *(_WORD *)&v53[4] = 1024;
    *(_WORD *)v54 = 1024;
    *(_DWORD *)&v54[2] = (v38 >> 4) & 1;
    LOWORD(v55) = HIWORD(v39);
    HIWORD(v55) = 1024;
    *(_WORD *)v56 = 2048;
    *(_QWORD *)&v56[2] = v40;
    *(_WORD *)&v56[10] = 2048;
    *(_QWORD *)&v56[12] = v41;
    *(_WORD *)&v56[20] = 1024;
    *(_DWORD *)&v56[22] = v42;
    *(_WORD *)&v56[26] = 2080;
    LODWORD(v57) = HIDWORD(a3);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionState,Motion,From,%d,To,%d,conf,%d,Mounted,From,%d,To,%d,conf,%d,tilt,%.1f,exitC,%d,exitTime,%f,startTime,%f,timestamp,%f,standing,%d,rawMotionType,%d,rawConfidence,%d,motionHint,%d,bbHint,%d,wifiHint,%d,btHint,%d,gpsHint,%d,vehicleType,%d,tag,workoutDetectionType,%d,workoutDetectionTime,%f,workoutEscalationTime,%lld, YouthMotionState, %d, %s\n", &v45, 180, 67115266, v46, v28, v47, v48, LODWORD(v31), v49,
      v33,
      *(double *)v50,
      *(_DWORD *)&v50[8],
      HIDWORD(v35),
      v51,
      v52,
      v38 & 1,
      *(_DWORD *)&v53[2],
      *(_DWORD *)v54,
      (v38 >> 1) & 1,
      v55,
      *(_DWORD *)v56,
      *(double *)&v56[8],
      *(_QWORD *)&v56[16],
      *(_DWORD *)&v56[24],
      v57);
    v44 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateUtils::logChange(const CLMotionActivity &, const CLMotionActivity &, const char *)", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
}

uint64_t sub_100928F38(unsigned int a1)
{
  if (a1 >= 4)
    return 0;
  else
    return a1;
}

void sub_100928F48(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100928F74(uint64_t a1)
{
  if (a1)
    sub_10092C278(a1 - 128);
  else
    sub_10092C278(0);
}

id sub_100928F84(uint64_t a1)
{
  if (a1)
    return sub_10092C7C8(a1 - 128);
  else
    return sub_10092C7C8(0);
}

void sub_100928F94(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 128;
  else
    v2 = 0;
  sub_10092CB0C(v2, a2);
}

void sub_100928FA4(uint64_t a1)
{
  uint64_t v1;

  if (a1)
    v1 = a1 - 128;
  else
    v1 = 0;
  if (*(_BYTE *)(v1 + 146))
    sub_10092A1A8(v1);
}

id sub_100928FC0(uint64_t a1)
{
  if (a1)
    return sub_10092CCB8(a1 - 128);
  else
    return sub_10092CCB8(0);
}

id sub_100928FD0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 128;
  else
    v2 = 0;
  return sub_10092CEEC(v2, a2);
}

id sub_100928FE0(uint64_t a1)
{
  if (a1)
    return sub_10092D094(a1 - 128);
  else
    return sub_10092D094(0);
}

void sub_100928FF0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 128;
  else
    v2 = 0;
  sub_10092D234(v2, a2);
}

void sub_100929000(uint64_t a1, void *a2)
{
  sub_1010BA278(a1, a2);
}

void sub_10092942C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v1 + 192) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v2;
  *v2 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_1010BAD50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009294C0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Timer fired.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Timer fired.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLMotionSyncStoreWatch::CLMotionSyncStoreWatch(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100929658(v1);
}

uint64_t sub_100929658(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  _BYTE *v4;
  int v5;
  double v6;
  NSData *v7;
  id v8;
  uint64_t v9;
  void **v10;
  int v11;
  double v12;
  char *v13;
  char *v14;
  double v15[5];
  void *v16[2];
  char v17;
  _BYTE __p[12];
  __int16 v19;
  int v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  _BYTE *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;

  result = sub_1010BB6C4(*(void **)(a1 + 168));
  if ((result & 0x80000000) == 0)
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v3 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
    {
      v4 = __p;
      sub_1010BB124(*(void **)(a1 + 168), __p);
      if (SBYTE3(v22) < 0)
        v4 = *(_BYTE **)__p;
      v5 = sub_1010BB6C4(*(void **)(a1 + 168));
      v6 = sub_1010BB768(*(void **)(a1 + 168));
      *(_DWORD *)buf = 136315650;
      v24 = v4;
      v25 = 1024;
      v26 = v5;
      v27 = 2048;
      v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s, current version, %d, timestamp, %lf", buf, 0x1Cu);
      if (SBYTE3(v22) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v9 = qword_10229FDC8;
      v10 = v16;
      sub_1010BB124(*(void **)(a1 + 168), v16);
      if (v17 < 0)
        v10 = (void **)v16[0];
      v11 = sub_1010BB6C4(*(void **)(a1 + 168));
      v12 = sub_1010BB768(*(void **)(a1 + 168));
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v19 = 1024;
      v20 = v11;
      v21 = 2048;
      v22 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "%s, current version, %d, timestamp, %lf", __p, 28, v15[0]);
      v14 = v13;
      if (v17 < 0)
        operator delete(v16[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::sendMotionCalsToCompanion()", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 168)), 1, 0);
    v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
    *(_QWORD *)&v15[0] = _NSConcreteStackBlock;
    *(_QWORD *)&v15[1] = 3221225472;
    *(_QWORD *)&v15[2] = sub_10092B3DC;
    *(_QWORD *)&v15[3] = &unk_102155328;
    *(_QWORD *)&v15[4] = v7;
    return (uint64_t)objc_msgSend(v8, "doAsync:", v15);
  }
  return result;
}

void sub_100929954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10092998C(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionSyncStoreWatch::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10215F140);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreWatch::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215F140);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreWatch::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10092B908(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100929B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100929B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionSyncStoreWatch::onUserInfoNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10215F140);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreWatch::onUserInfoNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215F140);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreWatch::onUserInfoNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_10092B764(a4);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100929D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100929D24(uint64_t a1, int *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionSyncStoreWatch::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10215F140);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreWatch::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215F140);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreWatch::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10092BC1C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100929EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100929F00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_10215EFD8;

  *(_QWORD *)(a1 + 168) = 0;
  v2 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

  *(_QWORD *)(a1 + 152) = 0;
  v5 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return sub_1010BAD50(a1);
}

void sub_100929FE4(uint64_t a1)
{
  sub_100929F00(a1);
  operator delete();
}

uint64_t sub_10092A008(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unlocked", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "unlocked", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreWatch::deviceUnlocked()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_10023195C(a1 + 128, 1, (uint64_t)buf);
}

void sub_10092A1A8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id v4;
  uint64_t v5;
  NSArray *v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  id v11;
  float v12;
  float v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  int v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  __int128 *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  char *v37;
  const char *v38;
  char *v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  id v43;
  const char *v44;
  char *v45;
  const char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[14];
  char v56;
  int v57;
  _BYTE *v58;
  uint8_t v59[128];
  __int128 buf;
  uint64_t v61;

  *(_BYTE *)(a1 + 146) = 1;
  if ((sub_1010BAF0C(a1) & 1) != 0)
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v2 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
    {
      v3 = sub_1010BB6C4(*(void **)(a1 + 168));
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Begin persisting calibrations to disk on watch, current version, %d.", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v31 = qword_10229FDC8;
      v32 = sub_1010BB6C4(*(void **)(a1 + 168));
      *(_DWORD *)v55 = 67109120;
      *(_DWORD *)&v55[4] = v32;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v31, 2, "Begin persisting calibrations to disk on watch, current version, %d.", v55);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v33);
      if (v34 != (char *)&buf)
        free(v34);
    }
    v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v5 = CMNatalimeterSetUserVo2max;
    v50 = CMNatalimeterSetUserPal;
    *(_QWORD *)&buf = CMNatalimeterSetUserPal;
    *((_QWORD *)&buf + 1) = CMNatalimeterSetUserVo2max;
    v49 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    v61 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    v6 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &buf, 3);
    v7 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v52;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v52 != v8)
            objc_enumerationMutation(v6);
          v10 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v10))
          {
            objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v10), "floatValue");
            objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:"), v10);
          }
        }
        v7 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
      }
      while (v7);
    }
    v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier"));
    objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", v5), "floatValue");
    if (v12 > 0.0)
      objc_msgSend(v11, "setActiveVo2maxOverride:", 1);
    if (objc_msgSend(v4, "objectForKeyedSubscript:", v5)
      && (objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", v5), "floatValue"), v13 == 0.0))
    {
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v14 = qword_10229FDC8;
      if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Persisted a reset Motion Cals", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FDC0 != -1)
          dispatch_once(&qword_10229FDC0, &stru_10215F120);
        *(_WORD *)v55 = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDC8, 0, "Persisted a reset Motion Cals", v55, 2);
        v47 = (char *)v46;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v46);
        if (v47 != (char *)&buf)
          free(v47);
      }
      objc_msgSend(*(id *)(a1 + 168), "removeObjectForKey:", v5);
      *(_QWORD *)&buf = v50;
      *((_QWORD *)&buf + 1) = v5;
      v61 = v49;
      objc_msgSend(v11, "resetUserProfileForKeys:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &buf, 3));
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLSwimNotifier")), "clearCalibrations");
    }
    else
    {
      objc_msgSend(v11, "setUserProfile:merge:", v4, 0);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v21 = qword_10229FDC8;
      if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEFAULT))
      {
        v22 = objc_msgSend(objc_msgSend(v4, "description"), "UTF8String");
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Finished setting user profile on watch = %s", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FDC0 != -1)
          dispatch_once(&qword_10229FDC0, &stru_10215F120);
        v42 = qword_10229FDC8;
        v43 = objc_msgSend(objc_msgSend(v4, "description"), "UTF8String");
        *(_DWORD *)v55 = 136315138;
        *(_QWORD *)&v55[4] = v43;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v42, 0, "Finished setting user profile on watch = %s", v55);
        v45 = (char *)v44;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v44);
        if (v45 != (char *)&buf)
          free(v45);
      }
    }
    if (objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable")))
    {
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "setRawSpeedToKValueBins:", objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable")));
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v23 = qword_10229FDC8;
      if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Persisted raw speed to kValue bins", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FDC0 != -1)
          dispatch_once(&qword_10229FDC0, &stru_10215F120);
        *(_WORD *)v55 = 0;
        LODWORD(v48) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDC8, 0, "Persisted raw speed to kValue bins", v55, v48);
        v39 = (char *)v38;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v38);
        if (v39 != (char *)&buf)
          free(v39);
      }
    }
    if (objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("StepCadenceToStrideLengthTable")))
    {
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "setStepCadenceToStrideLengthBins:", objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("StepCadenceToStrideLengthTable")));
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v24 = qword_10229FDC8;
      if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Persisted step cadence to stride length bins", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FDC0 != -1)
          dispatch_once(&qword_10229FDC0, &stru_10215F120);
        *(_WORD *)v55 = 0;
        LODWORD(v48) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDC8, 0, "Persisted step cadence to stride length bins", v55, v48);
        v41 = (char *)v40;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v40);
        if (v41 != (char *)&buf)
          free(v41);
      }
    }
    v25 = sub_1001FD94C();
    LODWORD(buf) = sub_1010BB6C4(*(void **)(a1 + 168));
    sub_10011B5B8(v25, CFSTR("CalibrationVersion"), &buf);
    v26 = sub_1001FD94C();
    *(_QWORD *)&buf = sub_1010BB768(*(void **)(a1 + 168));
    sub_10018A534(v26, CFSTR("CalibrationTimestamp"), &buf);
    v27 = sub_1001FD94C();
    sub_1010BB710(*(void **)(a1 + 168), &buf);
    sub_1005288FC(v27, CFSTR("CalibrationUDID"), (char *)&buf);
    if (SHIBYTE(v61) < 0)
      operator delete((void *)buf);
    v28 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 944))(v28);
    *(_BYTE *)(a1 + 146) = 0;
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v29 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
    {
      sub_1010BB124(*(void **)(a1 + 168), &buf);
      v30 = v61 >= 0 ? &buf : (__int128 *)buf;
      *(_DWORD *)v55 = 136315138;
      *(_QWORD *)&v55[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Completed persistence of motion cals to disk on watch. %s", v55, 0xCu);
      if (SHIBYTE(v61) < 0)
        operator delete((void *)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v35 = qword_10229FDC8;
      sub_1010BB124(*(void **)(a1 + 168), v55);
      v36 = v56 >= 0 ? v55 : *(_BYTE **)v55;
      v57 = 136315138;
      v58 = v36;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v35, 1, "Completed persistence of motion cals to disk on watch. %s", (const char *)&v57);
      v20 = v37;
      if (v56 < 0)
        operator delete(*(void **)v55);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v20);
      if (v20 != (char *)&buf)
LABEL_76:
        free(v20);
    }
  }
  else
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v15 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
    {
      v16 = sub_1010BB6C4(*(void **)(a1 + 168));
      LODWORD(buf) = 67109376;
      DWORD1(buf) = v16;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = sub_1010BAF0C(a1);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Watch did not persist Motion Cals, waiting until unlock, current version, %d, isDeviceCurrentlyUnlocked, %d", (uint8_t *)&buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v17 = qword_10229FDC8;
      v18 = sub_1010BB6C4(*(void **)(a1 + 168));
      *(_DWORD *)v55 = 67109376;
      *(_DWORD *)&v55[4] = v18;
      *(_WORD *)&v55[8] = 1024;
      *(_DWORD *)&v55[10] = sub_1010BAF0C(a1);
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v17, 2, "Watch did not persist Motion Cals, waiting until unlock, current version, %d, isDeviceCurrentlyUnlocked, %d", v55, 14);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v19);
      if (v20 != (char *)&buf)
        goto LABEL_76;
    }
  }
}

void sub_10092AEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10092AF08(uint64_t a1)
{
  NSMutableDictionary *v2;
  id v3;
  uint64_t v4;
  NSArray *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  int v21;
  const char *v22;
  void **v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _DWORD v29[4];
  void *__p[2];
  uint64_t v31;
  _BYTE v32[128];

  v2 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 5);
  v24 = a1;
  v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "syncgetUserProfileInternal");
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v4 = CMNatalimeterSetUserVo2max;
  __p[0] = (void *)CMNatalimeterSetUserPal;
  __p[1] = (void *)CMNatalimeterSetUserVo2max;
  v31 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  v5 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", __p, 3);
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v25, v32, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
        v10 = objc_msgSend(v3, "objectForKeyedSubscript:", v9);
        if (objc_msgSend(v9, "isEqualToString:", v4))
        {
          LOBYTE(__p[0]) = 0;
          v11 = sub_1001FD94C();
          sub_1001E48E4(v11, (uint64_t)CFSTR("ActiveJacksonCalibration"), (BOOL *)__p);
          if (!LOBYTE(__p[0]))
            continue;
        }
        if (v10)
          -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v10, v9);
      }
      v6 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v25, v32, 16);
    }
    while (v6);
  }
  v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v24 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "syncgetCopyRawSpeedToKValueBins");
  if (v12)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v12, CFSTR("RawSpeedToKValueTable"));

  }
  v13 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v24 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "syncgetCopyStepCadenceToStrideLengthBins");
  if (v13)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v13, CFSTR("StepCadenceToStrideLengthTable"));

  }
  if ((sub_1010BBB04(*(void **)(v24 + 168), v2) & 1) == 0)
  {
    objc_msgSend(*(id *)(v24 + 168), "addEntriesFromDictionary:", v2);
    objc_msgSend(*(id *)(v24 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()), CFSTR("CalibrationTimestamp"));
    sub_100197040();
    sub_10075AE6C((uint64_t)__p);
    if (v31 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    objc_msgSend(*(id *)(v24 + 168), "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14), CFSTR("CalibrationUDID"));
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    v15 = sub_1001FD94C();
    __p[0] = COERCE_VOID_(sub_1010BB768(*(void **)(v24 + 168)));
    sub_10018A534(v15, CFSTR("CalibrationTimestamp"), __p);
    v16 = sub_1001FD94C();
    sub_1010BB710(*(void **)(v24 + 168), __p);
    sub_1005288FC(v16, CFSTR("CalibrationUDID"), (char *)__p);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    v17 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 944))(v17);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v18 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
    {
      v19 = sub_1010BB6C4(*(void **)(v24 + 168));
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Watch retrieved calibrations and saved them in memory, current version, %d", (uint8_t *)__p, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v20 = qword_10229FDC8;
      v21 = sub_1010BB6C4(*(void **)(v24 + 168));
      v29[0] = 67109120;
      v29[1] = v21;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 1, "Watch retrieved calibrations and saved them in memory, current version, %d", v29);
      v23 = (void **)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::updateCalibrations()", "%s\n", v22);
      if (v23 != __p)
        free(v23);
    }
  }
}

void sub_10092B3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10092B3DC(uint64_t a1, uint64_t a2)
{
  return sub_10061F764(120.0, a2, 14, *(void **)(a1 + 32), 300, 0, 0, 0, 1, 0);
}

void sub_10092B424(uint64_t a1, void *a2)
{
  NSObject *v4;
  _BYTE *v5;
  int v6;
  double v7;
  void **v8;
  uint64_t v9;
  void **v10;
  int v11;
  double v12;
  void **v13;
  char *v14;
  char *v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  _BYTE __p[12];
  __int16 v21;
  int v22;
  __int16 v23;
  double v24;
  __int16 v25;
  void **v26;
  _BYTE buf[12];
  __int16 v28;
  int v29;
  __int16 v30;
  double v31;
  __int16 v32;
  void **v33;

  sub_1010BB710(a2, v18);
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v4 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    sub_1010BB124(a2, __p);
    if ((SBYTE3(v24) & 0x80u) == 0)
      v5 = __p;
    else
      v5 = *(_BYTE **)__p;
    v6 = sub_1010BB6C4(a2);
    v7 = sub_1010BB768(a2);
    v8 = v18;
    if (v19 < 0)
      v8 = (void **)v18[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v5;
    v28 = 1024;
    v29 = v6;
    v30 = 2048;
    v31 = v7;
    v32 = 2080;
    v33 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Watch received motion calibrations from companion, %s, version, %d, timestamp, %lf, udid, %s", buf, 0x26u);
    if (SBYTE3(v24) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v9 = qword_10229FDC8;
    sub_1010BB124(a2, v16);
    if (v17 >= 0)
      v10 = v16;
    else
      v10 = (void **)v16[0];
    v11 = sub_1010BB6C4(a2);
    v12 = sub_1010BB768(a2);
    v13 = v18;
    if (v19 < 0)
      v13 = (void **)v18[0];
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = v10;
    v21 = 1024;
    v22 = v11;
    v23 = 2048;
    v24 = v12;
    v25 = 2080;
    v26 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "Watch received motion calibrations from companion, %s, version, %d, timestamp, %lf, udid, %s", __p, 38, *(double *)v16, (const char *)v16[1]);
    v15 = v14;
    if (v17 < 0)
      operator delete(v16[0]);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreWatch::receiveMotionCals(NSDictionary *)", "%s\n", v15);
    if (v15 != buf)
      free(v15);
  }
  *(_QWORD *)buf = a2;
  sub_10023195C(a1 + 128, 4, (uint64_t)buf);
  if (v19 < 0)
    operator delete(v18[0]);
}

void sub_10092B704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10092B764(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "user info notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "user info notification", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onUserInfoNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  buf[0] = 0;
  return sub_10023195C(a1 + 128, 5, (uint64_t)buf);
}

void sub_10092B908(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  NSObject *v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  if (*a3 == 1)
  {
    if (!*a4)
    {
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v5 = qword_10229FDC8;
      if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Workout session ended on watch.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDC0 != -1)
          dispatch_once(&qword_10229FDC0, &stru_10215F120);
        LOWORD(v14[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Workout session ended on watch.", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      buf[0] = 1;
      sub_10023195C(a1 + 128, 5, (uint64_t)buf);
    }
  }
  else
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v7 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *a3;
      *(_DWORD *)buf = 67109120;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      v9 = *a3;
      v14[0] = 67109120;
      v14[1] = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 0, "#Warning Unhandled notification %d", v14);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_10092BC1C(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4)
{
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[4];
  uint8_t buf[4];
  int v18;

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v7 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67109120;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "notification, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v13 = *a3;
    v16[0] = 67109120;
    v16[1] = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "notification, %d", v16);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (*a3 == 5)
  {
    if (*a4)
      v9 = 2;
    else
      v9 = 3;
    sub_10023195C(a1 + 128, v9, (uint64_t)buf);
  }
  else
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v10 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Unhandled notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Unhandled notification", v16, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

uint64_t sub_10092BF30(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "raw speed to kValue bins updated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "raw speed to kValue bins updated", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreWatch::rawSpeedToKValueBinsHaveChanged()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  buf[0] = 0;
  return sub_10023195C(a1 + 128, 5, (uint64_t)buf);
}

uint64_t sub_10092C0D4(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "step cadence to stride length bins updated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "step cadence to stride length bins updated", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreWatch::stepCadenceToStrideLengthBinsHaveChanged()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  buf[0] = 0;
  return sub_10023195C(a1 + 128, 5, (uint64_t)buf);
}

void sub_10092C278(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restore backup motion cals", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "restore backup motion cals", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doRestoreBackupMotionCals(const EDeviceUnlocked *)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10092C410(a1);
}

void sub_10092C410(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BYTE *v7;
  int v8;
  double v9;
  uint64_t v10;
  void **v11;
  int v12;
  double v13;
  char *v14;
  char *v15;
  void *v16[2];
  char v17;
  double v18;
  unsigned int v19;
  std::string v20;
  _BYTE __p[12];
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  _BYTE *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  double v31;

  sub_100197040();
  sub_10075AE6C((uint64_t)&v20);
  v2 = sub_1001FD94C();
  sub_1000BD5F0(v2, (uint64_t)CFSTR("CalibrationUDID"), &v20);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v20;
  else
    v3 = (std::string *)v20.__r_.__value_.__r.__words[0];
  objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), CFSTR("CalibrationUDID"));
  v19 = -1;
  v4 = sub_1001FD94C();
  sub_1001C1194(v4, (uint64_t)CFSTR("CalibrationVersion"), &v19);
  objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v19), CFSTR("CalibrationVersion"));
  v18 = 0.0;
  v5 = sub_1001FD94C();
  sub_1001FD9FC(v5, (uint64_t)CFSTR("CalibrationTimestamp"), &v18);
  objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v18), CFSTR("CalibrationTimestamp"));
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v6 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    sub_1010BB124(*(void **)(a1 + 168), __p);
    v7 = (SBYTE3(v25) & 0x80u) == 0 ? __p : *(_BYTE **)__p;
    v8 = sub_1010BB6C4(*(void **)(a1 + 168));
    v9 = sub_1010BB768(*(void **)(a1 + 168));
    *(_DWORD *)buf = 136315650;
    v27 = v7;
    v28 = 1024;
    v29 = v8;
    v30 = 2048;
    v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Restored backup calibrations, %s, version, %d, timestamp, %lf", buf, 0x1Cu);
    if (SBYTE3(v25) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v10 = qword_10229FDC8;
    sub_1010BB124(*(void **)(a1 + 168), v16);
    if (v17 >= 0)
      v11 = v16;
    else
      v11 = (void **)v16[0];
    v12 = sub_1010BB6C4(*(void **)(a1 + 168));
    v13 = sub_1010BB768(*(void **)(a1 + 168));
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v11;
    v22 = 1024;
    v23 = v12;
    v24 = 2048;
    v25 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 1, "Restored backup calibrations, %s, version, %d, timestamp, %lf", __p, 28, *(double *)v16);
    v15 = v14;
    if (v17 < 0)
      operator delete(v16[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::restoreBackupMotionCals()", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_10092C764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10092C7C8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "connected", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "connected", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doConnected(const ECompanionConnected *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(a1 + 152), "setFireInterval:", *(double *)(a1 + 160));
  return sub_10092C96C(a1);
}

id sub_10092C96C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "schedule send to companion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "schedule send to companion", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::scheduleFastSendToCompanion()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", 2.56);
}

void sub_10092CB0C(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v4 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "updating motion cals", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "updating motion cals", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doUpdateMotionCals(const EMotionCalsUpdated *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_10092AF08(a1);
  if (*a2)
    sub_10092C96C(a1);
}

id sub_10092CCB8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restore and arbitrate", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "restore and arbitrate", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doRestoreBackupMotionCalsArbitrate(const EDeviceUnlocked *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10092C410(a1);
  sub_10092CE60(a1);
  return sub_10092C96C(a1);
}

void sub_10092CE60(uint64_t a1)
{
  id v2;
  int v3;

  v2 = sub_1010BBA34(*(void **)(a1 + 176));
  v3 = sub_10092D5BC((uint64_t)v2, *(void **)(a1 + 168), *(void **)(a1 + 176));
  sub_10092D3DC(a1, *(void **)(a1 + 168), *(void **)(a1 + 176), v3);
  switch(v3)
  {
    case 2:
    case 4:
      sub_10092A1A8(a1);
      break;
    case 3:
      goto LABEL_4;
    case 5:
      sub_10092A1A8(a1);
LABEL_4:
      sub_10092C96C(a1);
      break;
    default:
      return;
  }
}

id sub_10092CEEC(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v4 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Buffered motion cals from companion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "Buffered motion cals from companion", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doBufferMotionCalsFromCompanion(const ECalibrationFromCompanion *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(a1 + 176), "addEntriesFromDictionary:", *a2);
  return sub_1010BBA34(*(void **)(a1 + 176));
}

id sub_10092D094(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "disconnected", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "disconnected", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doDisconnected(const ECompanionDisconnected *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", 1.79769313e308);
}

void sub_10092D234(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v4 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "arbitrateMotionCals", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "arbitrateMotionCals", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doArbitrateMotionCals(const ECalibrationFromCompanion *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  objc_msgSend(*(id *)(a1 + 176), "addEntriesFromDictionary:", *a2);
  sub_10092CE60(a1);
}

void sub_10092D3DC(uint64_t a1, void *a2, void *a3, int a4)
{
  _QWORD *v7;
  _BOOL4 v8;
  double v9;
  NSNumber *v10;
  uint64_t v11;
  uint64_t v12;
  _Unwind_Exception *v13;
  int v14;
  void *__p;
  char v16;

  if (!objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CalibrationUDID")))
  {
    v13 = (_Unwind_Exception *)sub_10190F180();
    if (v16 < 0)
      operator delete(__p);
    _Unwind_Resume(v13);
  }
  v7 = sub_1010BB710(a2, &__p);
  if ((a4 - 2) < 2)
    goto LABEL_9;
  if (a4 == 4)
  {
    objc_msgSend(a2, "addEntriesFromDictionary:", a3);
LABEL_9:
    v12 = sub_1010BB6C4(a3);
    sub_1010BB7B4(a2, v12);
    goto LABEL_10;
  }
  if (a4 == 5)
  {
    v14 = 0;
    v8 = sub_10092D510((uint64_t)v7, a2, a3, (float *)&v14);
    objc_msgSend(a2, "addEntriesFromDictionary:", a3);
    if (v8)
    {
      LODWORD(v9) = v14;
      v10 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9);
      objc_msgSend(a2, "setObject:forKeyedSubscript:", v10, CMNatalimeterSetUserVo2max);
    }
    v11 = sub_1010BB6C4(a3);
    sub_1010BB7B4(a2, v11);
  }
LABEL_10:
  objc_msgSend(a3, "removeAllObjects");
  if (v16 < 0)
    operator delete(__p);
}

BOOL sub_10092D510(uint64_t a1, void *a2, void *a3, float *a4)
{
  uint64_t v7;
  id v8;
  float v9;
  float v10;
  float v11;

  v7 = CMNatalimeterSetUserVo2max;
  v8 = objc_msgSend(a3, "objectForKeyedSubscript:", CMNatalimeterSetUserVo2max);
  if (v8)
  {
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", v7), "floatValue");
    *a4 = v9;
    if (v9 != 0.0)
    {
      if (objc_msgSend(a2, "objectForKeyedSubscript:", v7))
      {
        v10 = *a4;
        objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v7), "floatValue");
        *a4 = fmaxf(v10, v11);
      }
    }
  }
  return v8 != 0;
}

uint64_t sub_10092D5BC(uint64_t a1, void *a2, void *a3)
{
  int v3;
  __objc2_class *v4;
  __objc2_class *v5;
  uint8_t *v6;
  double v7;
  double v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned __int8 *p_p;
  void **v15;
  NSObject *v16;
  NSObject *v17;
  void *p_s1;
  void *v19;
  double v20;
  unsigned int v21;
  NSObject *superclass;
  void *v23;
  void *v24;
  __objc2_class *v26;
  void *v27;
  void *v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  void *v33;
  void *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  void *__s1;
  size_t __n;
  double v40;
  void *__p;
  uint64_t v42;
  unsigned __int8 v43;
  int v44;
  _BYTE v45[24];
  __int16 v46;
  int v47;
  __int16 v48;
  double v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  int v53;
  uint8_t buf[4];
  _BYTE v55[18];
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;
  int v63;

  v10 = (uint64_t)a2;
  if (!objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CalibrationUDID")))
  {
    sub_10190F2FC();
    __break(1u);
    goto LABEL_59;
  }
  if (objc_msgSend(a3, "count"))
  {
    sub_1010BB710((void *)v10, &__p);
    v7 = sub_1010BB768((void *)v10);
    v3 = sub_1010BB6C4((void *)v10);
    sub_1010BB710(a3, &__s1);
    v8 = sub_1010BB768(a3);
    LODWORD(a3) = sub_1010BB6C4(a3);
    v6 = buf;
    v5 = DefaultObserver;
    v4 = DefaultObserver;
    if ((sub_1010BB6C4((void *)v10) & 0x80000000) != 0)
    {
      v10 = 4;
      goto LABEL_45;
    }
    v11 = HIBYTE(v40);
    if (v40 >= 0.0)
      v12 = HIBYTE(v40);
    else
      v12 = __n;
    v13 = v43;
    if ((v43 & 0x80u) != 0)
      v13 = v42;
    if (v12 != v13)
      goto LABEL_27;
    if ((v43 & 0x80u) == 0)
      p_p = (unsigned __int8 *)&__p;
    else
      p_p = (unsigned __int8 *)__p;
    if ((HIBYTE(v40) & 0x80) != 0)
    {
      if (memcmp(__s1, p_p, __n))
      {
LABEL_27:
        if (v3 >= (int)a3)
        {
          if (qword_10229FDC0 != -1)
            dispatch_once(&qword_10229FDC0, &stru_10215F120);
          v17 = qword_10229FDC8;
          if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEFAULT))
          {
            p_s1 = &__s1;
            if (v40 < 0.0)
              p_s1 = __s1;
            v19 = &__p;
            if ((v43 & 0x80u) != 0)
              v19 = __p;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)v55 = p_s1;
            *(_WORD *)&v55[8] = 2080;
            *(_QWORD *)&v55[10] = v19;
            v56 = 1024;
            v57 = (int)a3;
            v58 = 1024;
            v59 = v3;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Ignoring update.  Phone Motion Cals UDID %s is different from current UDID %s, but version %d is not larger than current version %d", buf, 0x22u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FDC0 != -1)
              dispatch_once(&qword_10229FDC0, &stru_10215F120);
            v33 = &__s1;
            if (v40 < 0.0)
              v33 = __s1;
            v34 = &__p;
            if ((v43 & 0x80u) != 0)
              v34 = __p;
            v44 = 136315906;
            *(_QWORD *)v45 = v33;
            *(_WORD *)&v45[8] = 2080;
            *(_QWORD *)&v45[10] = v34;
            *(_WORD *)&v45[18] = 1024;
            *(_DWORD *)&v45[20] = (_DWORD)a3;
            v46 = 1024;
            v47 = v3;
            LODWORD(v37) = 34;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 0, "Ignoring update.  Phone Motion Cals UDID %s is different from current UDID %s, but version %d is not larger than current version %d", (const char *)&v44, v37, (_DWORD)__s1, __n);
            v36 = (uint8_t *)v35;
            sub_100512490("Generic", 1, 0, 2, "CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v35);
            if (v36 != buf)
              free(v36);
          }
          v10 = 0;
        }
        else
        {
          v10 = 5;
        }
LABEL_45:
        if (qword_10229FDC0 == -1)
        {
LABEL_46:
          superclass = v4[88].superclass;
          if (os_log_type_enabled(superclass, OS_LOG_TYPE_DEFAULT))
          {
            v23 = &__s1;
            if (v40 < 0.0)
              v23 = __s1;
            v24 = &__p;
            if ((v43 & 0x80u) != 0)
              v24 = __p;
            *(_DWORD *)buf = 67110658;
            *(_DWORD *)v55 = (_DWORD)a3;
            *(_WORD *)&v55[4] = 2048;
            *(double *)&v55[6] = v8;
            *(_WORD *)&v55[14] = 2080;
            *(_QWORD *)(v6 + 20) = v23;
            v58 = 1024;
            *(_DWORD *)(v6 + 30) = v3;
            v60 = 2048;
            *(double *)(v6 + 36) = v7;
            v61 = 2080;
            *(_QWORD *)(v6 + 46) = v24;
            v62 = 1024;
            v63 = v10;
            _os_log_impl((void *)&_mh_execute_header, superclass, OS_LOG_TYPE_DEFAULT, "Buffered Motion Cals, version, %d, timestamp, %lf, udid, %s, Current Motion Cals, version, %d, timestamp, %lf, udid, %s, result, %d", buf, 0x3Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v5[88].isa != (__objc2_class *)-1)
              dispatch_once(&qword_10229FDC0, &stru_10215F120);
            v26 = v4[88].superclass;
            v27 = &__s1;
            if (v40 < 0.0)
              v27 = __s1;
            v28 = &__p;
            if ((v43 & 0x80u) != 0)
              v28 = __p;
            v44 = 67110658;
            *(_DWORD *)v45 = (_DWORD)a3;
            *(_WORD *)&v45[4] = 2048;
            *(double *)&v45[6] = v8;
            *(_WORD *)&v45[14] = 2080;
            *(_QWORD *)&v45[16] = v27;
            v46 = 1024;
            v47 = v3;
            v48 = 2048;
            v49 = v7;
            v50 = 2080;
            v51 = v28;
            v52 = 1024;
            v53 = v10;
            LODWORD(v37) = 60;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "Buffered Motion Cals, version, %d, timestamp, %lf, udid, %s, Current Motion Cals, version, %d, timestamp, %lf, udid, %s, result, %d", &v44, *(double *)&v37, (const char *)__s1, __n, v40, (const char *)__p, v42);
            v30 = (uint8_t *)v29;
            sub_100512490("Generic", 1, 0, 2, "CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v29);
            if (v30 != buf)
              free(v30);
          }
          if (SHIBYTE(v40) < 0)
            operator delete(__s1);
          if ((char)v43 < 0)
            operator delete(__p);
          return v10;
        }
LABEL_59:
        dispatch_once(&qword_10229FDC0, &stru_10215F120);
        goto LABEL_46;
      }
    }
    else if (HIBYTE(v40))
    {
      v15 = &__s1;
      while (*(unsigned __int8 *)v15 == *p_p)
      {
        v15 = (void **)((char *)v15 + 1);
        ++p_p;
        if (!--v11)
          goto LABEL_39;
      }
      goto LABEL_27;
    }
LABEL_39:
    v20 = vabdd_f64(v8, v7);
    if (v8 <= v7)
      v21 = 3;
    else
      v21 = 4;
    if (v20 >= 1.0)
      v10 = v21;
    else
      v10 = 2;
    goto LABEL_45;
  }
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10215F120);
  v16 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "No buffered Motion Cals, no arbitration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10215F120);
    LOWORD(v44) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "No buffered Motion Cals, no arbitration", &v44, 2);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  return 1;
}

void sub_10092DCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_10092DD00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10215F140);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10215F140);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10092DF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A57A0);
}

uint64_t sub_10092DF88(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10092F7F8();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A57A1;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10215F140);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215F140);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_10092E3E4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215F140);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10215F140);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10092E664(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10215F140);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10215F140);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

BOOL sub_10092E9EC(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = a1 + 64;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = *a2;
  v6 = v2;
  do
  {
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 < v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (!v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  return v6 != v2 && v5 >= *(_DWORD *)(v6 + 32) && *(_QWORD *)(v6 + 64) != 0;
}

uint64_t sub_10092EA44(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  v4 = operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_10215F190;
  *(_QWORD *)&v11 = v4 + 3;
  *((_QWORD *)&v11 + 1) = v4;
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_10092EB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10092EB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;

  v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_10092EB50(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  __n128 *v11;
  signed __int32 v12;
  __n128 *v13;
  signed __int32 v14;
  BOOL v15;
  __n128 **v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215F140);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v9 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v9 = (_QWORD *)*v9;
      v10 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v9;
      v32 = 2050;
      v33 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v11 = *(__n128 **)(a1 + 64);
    if (!v11)
      goto LABEL_18;
    v12 = *a2;
    v13 = (__n128 *)(a1 + 64);
    do
    {
      v14 = v11[2].n128_i32[0];
      v15 = v14 < v12;
      if (v14 >= v12)
        v16 = (__n128 **)v11;
      else
        v16 = (__n128 **)&v11->n128_u64[1];
      if (!v15)
        v13 = v11;
      v11 = *v16;
    }
    while (*v16);
    if (v13 == (__n128 *)(a1 + 64) || v12 < (signed __int32)v13[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v34);
      v13 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v17 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v20 = v36;
      if (v36)
      {
        v21 = (unint64_t *)&v36->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      v23 = operator new(0x20uLL);
      v23[2] = 0;
      *v23 = off_10215F190;
      v23[1] = 0;
      *(_QWORD *)buf = v23 + 3;
      *(_QWORD *)v29 = v23;
      sub_1002B7674((uint64_t)&v13[4], (__int128 *)buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v13[4].n128_u64);
    }
    if (v13[3].n128_u64[1])
      sub_1009301D8();
    os_activity_scope_leave(&state);
  }
}

void sub_10092F180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10092F1CC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215F140);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10215F140);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::listClients() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215F140);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10215F140);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::listClients() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10215F140);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10215F140);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::listClients() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10092F774(id a1)
{
  qword_10229FDC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionSync");
}

void sub_10092F7A0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10092F7CC(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10092F7F8()
{
  operator new();
}

_BYTE *sub_10092F870(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_10092F968(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

uint64_t sub_10092F94C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_10092F968(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_10092F9E0(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_10092FD68(a1);
  }
}

void sub_10092F9E0(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_100930114((uint64_t)&v7 + 7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10215F160);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE79C3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10215F160);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
LABEL_21:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionSyncStore_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10215F160);
    v5 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE79C3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10215F160);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
      goto LABEL_21;
    }
  }
}

id sub_10092FD68(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10215F160);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE79C3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10215F160);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10215F160);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE79C3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10215F160);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionSyncStore_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100930114(uint64_t a1, void *a2)
{
  std::__shared_weak_count *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B7C8))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)1)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (std::__shared_weak_count *)sub_10190F478();
  sub_100930188(v3);
}

void sub_100930188(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10215F190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10093019C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10215F190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1009301D8()
{
  operator new();
}

void sub_100930250(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_10092F968(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10092F870(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10215F140);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10215F140);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_100930624(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100930640()
{
  sub_1015A2E04(qword_1023057F0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023057F0, (void *)&_mh_execute_header);
}

void sub_100930684(char *__dst, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p[2];
  char v17;
  uint8_t buf[8];
  char v19;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  sub_100932354((_QWORD *)__dst + 3);
  sub_100932354((_QWORD *)__dst + 5);
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  sub_1015A2E04(buf, "CLWifiLocationDatabase");
  sub_1015A2E04(__p, "CLMovingApDetector");
  sub_10136E244(__dst + 72, buf, __p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(*(void **)buf);
  v4 = (std::__shared_weak_count *)*((_QWORD *)__dst + 4);
  v14 = *((_QWORD *)__dst + 3);
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_101325EAC(__dst + 168, &v14);
  v7 = v15;
  if (v15)
  {
    v8 = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F1D0);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MovingApDetector, initialize database tables", buf, 2u);
  }
  v11 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v11)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "MovingApDetector, initialize database tables", __p, 2, v14);
    v13 = (uint8_t *)v12;
    v11 = sub_100512490("Generic", 1, 0, 2, "CLMovingApDetector::CLMovingApDetector(const std::string &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_100930A84(v11, (uint64_t)__dst);
}

void sub_100930968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  sub_101325F18(v31);
  sub_100930A30(v30);
  v33 = *v29;
  *v29 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *v28;
  *v28 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  sub_100261F44(v27);
  sub_100261F44(v26);
  if (*(char *)(v25 + 23) < 0)
    operator delete(*(void **)v25);
  _Unwind_Resume(a1);
}

uint64_t sub_100930A30(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021B19E0;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_100930A84(uint64_t a1, uint64_t a2)
{
  void *__p[4];

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  __p[3] = 0;
  operator new();
}

void sub_100930B64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete();
}

void sub_100930BA0(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  void **v4;
  NSObject *v5;
  const char *v6;
  void **v7;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;

  if (*a2)
  {
    if (sub_1000CC504(*a2))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v3 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 16))(__p);
        v4 = v17 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MovingApDetector, clearing database table %{private}s", buf, 0xCu);
        if (v17 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F1D0);
        v8 = qword_1022A0048;
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 16))(buf);
        if (v13 >= 0)
          v9 = buf;
        else
          v9 = *(_BYTE **)buf;
        v14 = 136380675;
        v15 = v9;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 0, "MovingApDetector, clearing database table %{private}s", &v14, 12);
        v11 = v10;
        if (v13 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::clearDatabaseTable(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v11);
        if (v11 != (char *)__p)
          free(v11);
      }
      sub_10067F6A0(*a2);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 17, "MovingApDetector, centroid database is null!", buf, 2);
      v7 = (void **)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLMovingApDetector::clearDatabaseTable(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v6);
      if (v7 != __p)
        free(v7);
    }
  }
}

void sub_100930F0C(uint64_t a1)
{
  uint64_t v2;

  sub_100930BA0(a1, (uint64_t *)(a1 + 64));
  sub_100930BA0(v2, (uint64_t *)(a1 + 56));
}

void sub_100930F34(uint64_t a1, _DWORD *a2)
{
  CFAbsoluteTime Current;

  Current = CFAbsoluteTimeGetCurrent();
  sub_101311C14(*(_QWORD *)(a1 + 24), &Current, a2, a2 + 1);
  sub_101311C14(*(_QWORD *)(a1 + 40), &Current, a2, a2 + 1);
}

void sub_100930F98(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  int v6;
  char *v7;
  NSObject *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (sub_1000CC504(*a2))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v4 = sub_10005995C(*a2);
      *(_DWORD *)buf = 67109120;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MovingApDetector, number of detected bad centroids in database: %u", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v5 = qword_1022A0048;
    v6 = sub_10005995C(*a2);
    v9[0] = 67109120;
    v9[1] = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "MovingApDetector, number of detected bad centroids in database: %u", v9);
    sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logBadWifiCentroidDatabaseSize(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v7);
    if (v7 == (char *)buf)
      return;
LABEL_20:
    free(v7);
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F1D0);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MovingApDetector, #warning, could not log number of detected bad centroids due to invalid database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    LOWORD(v9[0]) = 0;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "MovingApDetector, #warning, could not log number of detected bad centroids due to invalid database", v9, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logBadWifiCentroidDatabaseSize(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v7);
    if (v7 != (char *)buf)
      goto LABEL_20;
  }
}

void sub_10093127C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v5;
  void **v6;
  uint64_t v7;
  std::string *v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *p_buf;
  char *v16;
  NSObject *v17;
  void **v18;
  NSObject *v19;
  void **v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[156];
  __int16 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[28];
  char v39;
  uint64_t v40;
  std::string buf;
  int v42;
  std::string *v43;
  void *__p[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[94];

  if (!*a3)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v29 = 0;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 17, "MovingApDetector, centroid database is null!", &v29, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLMovingApDetector::handleDetectedBadWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v9);
      if (v9 != (char *)__p)
        goto LABEL_88;
    }
    return;
  }
  sub_101325F1C(a1 + 168, (uint64_t *)a2);
  v40 = *(_QWORD *)a2;
  sub_1000CBC6C(*a3, &v29);
  sub_10018FFD0(a2, (uint64_t)v28);
  nullsub_34(0);
  LODWORD(v26) = -1;
  v25 = *(_QWORD *)a2;
  *(int32x2_t *)((char *)&v26 + 4) = vrev64_s32(*(int32x2_t *)(a2 + 48));
  HIDWORD(v26) = 1;
  LODWORD(v27) = -1;
  if (sub_100033C08(a2))
    LODWORD(v26) = sub_100219A9C(a2);
  HIDWORD(v27) = *(_DWORD *)(a2 + 92);
  if (!v39)
  {
    if (sub_1006F7E70(*a3))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v11 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_10018FE90((uint64_t *)a2, (std::string *)__p);
        v12 = (SBYTE7(v45) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MovingApDetector, detected and inserted bad centroid: %{private}s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
      }
      v13 = sub_1001BFF7C(115, 2);
      if (!(_DWORD)v13)
        goto LABEL_60;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v14 = qword_1022A0048;
      sub_10018FE90((uint64_t *)a2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v42 = 136380675;
      v43 = p_buf;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v14, 0, "MovingApDetector, detected and inserted bad centroid: %{private}s", &v42, 12, v25, v26, v27);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v17 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_10018FE90((uint64_t *)a2, (std::string *)__p);
        v18 = (SBYTE7(v45) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "MovingApDetector, #warning, could not insert bad centroid into database: %{private}s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
      }
      v13 = sub_1001BFF7C(115, 2);
      if (!(_DWORD)v13)
        goto LABEL_60;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v21 = qword_1022A0048;
      sub_10018FE90((uint64_t *)a2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &buf;
      else
        v22 = (std::string *)buf.__r_.__value_.__r.__words[0];
      v42 = 136380675;
      v43 = v22;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v21, 0, "MovingApDetector, #warning, could not insert bad centroid into database: %{private}s", &v42, 12, v25, v26, v27);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    v13 = sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::handleDetectedBadWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v16);
    if (v16 != (char *)__p)
      free(v16);
LABEL_60:
    sub_100930F98(v13, a3);
    return;
  }
  v50 = v36;
  v51 = v37;
  v52[0] = *(_OWORD *)v38;
  *(_OWORD *)((char *)v52 + 12) = *(_OWORD *)&v38[12];
  v46 = v32;
  v47 = v33;
  v48 = v34;
  v49 = v35;
  *(_OWORD *)__p = v30;
  v45 = v31;
  if (sub_100B9429C((uint64_t)__p, (uint64_t)v28))
    return;
  if (sub_1006F7E70(*a3))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_10018FE90((uint64_t *)a2, (std::string *)__p);
      v6 = (SBYTE7(v45) & 0x80u) == 0 ? __p : (void **)__p[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MovingApDetector, detected and replaced bad centroid: %{private}s", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(v45) < 0)
        operator delete(__p[0]);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v7 = qword_1022A0048;
    sub_10018FE90((uint64_t *)a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &buf;
    else
      v8 = (std::string *)buf.__r_.__value_.__r.__words[0];
    v42 = 136380675;
    v43 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v7, 0, "MovingApDetector, detected and replaced bad centroid: %{private}s", &v42, 12, v25, v26, v27);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_10018FE90((uint64_t *)a2, (std::string *)__p);
      v20 = (SBYTE7(v45) & 0x80u) == 0 ? __p : (void **)__p[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "MovingApDetector, #warning, could not replace bad centroid into database: %{private}s", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(v45) < 0)
        operator delete(__p[0]);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v23 = qword_1022A0048;
    sub_10018FE90((uint64_t *)a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &buf;
    else
      v24 = (std::string *)buf.__r_.__value_.__r.__words[0];
    v42 = 136380675;
    v43 = v24;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 0, "MovingApDetector, #warning, could not replace bad centroid into database: %{private}s", &v42, 12, v25, v26, v27);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::handleDetectedBadWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v9);
  if (v9 != (char *)__p)
LABEL_88:
    free(v9);
}

uint64_t sub_100931BA4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned __int8 v7;
  double v8;
  double v9;
  NSObject *v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *p_p;
  NSObject *v15;
  std::string *v16;
  double v17;
  NSObject *v18;
  int v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *p_buf;
  std::string *v28;
  uint64_t v29;
  int v30;
  std::string::size_type v31;
  std::string *v32;
  _BYTE *v33;
  std::string *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  __int16 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[3];
  char v54;
  uint64_t v55;
  _BYTE v56[12];
  __int16 v57;
  std::string *v58;
  char v59;
  std::string __p;
  double v61;
  __int16 v62;
  double v63;
  std::string buf;
  std::string v65;
  double v66;
  __int16 v67;
  double v68;

  v3 = *a3;
  if (*a3)
  {
    v55 = *a2;
    result = sub_1000CC504(v3);
    if (!(_DWORD)result)
      return result;
    sub_1000CBC6C(*a3, &v44);
    if (v54)
    {
      v7 = atomic_load((unsigned __int8 *)&qword_102305860);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_102305860))
      {
        sub_1002433B8((uint64_t)dbl_102305838);
        __cxa_guard_release(&qword_102305860);
      }
      v41 = v51;
      v42 = v52;
      v43[0] = v53[0];
      *(_OWORD *)((char *)v43 + 12) = *(_OWORD *)((char *)v53 + 12);
      v37 = v47;
      v38 = v48;
      v39 = v49;
      v40 = v50;
      v35 = v45;
      v36 = v46;
      sub_10018FFD0((uint64_t)a2, (uint64_t)&v65);
      sub_10011E258(dbl_102305838, (uint64_t)&v35, (uint64_t)&v65);
      v9 = v8;
      if (v8 == 0.0)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F1D0);
        v10 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_10018FE90(a2, &v65);
          v11 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
          v12 = v65.__r_.__value_.__r.__words[0];
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 16))(&__p);
          v13 = &v65;
          if (v11 < 0)
            v13 = (std::string *)v12;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MovingApDetector, found the exact centroid %{private}s in bad centroid database table %{private}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&v65, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10215F1D0);
          v23 = qword_1022A0048;
          sub_10018FE90(a2, &__p);
          v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v25 = __p.__r_.__value_.__r.__words[0];
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 16))(&buf);
          v26 = &__p;
          if (v24 < 0)
            v26 = (std::string *)v25;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_buf = &buf;
          else
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v56 = 136380931;
          *(_QWORD *)&v56[4] = v26;
          v57 = 2081;
          v58 = p_buf;
          v28 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v65, 1628, &_mh_execute_header, v23, 0, "MovingApDetector, found the exact centroid %{private}s in bad centroid database table %{private}s", v56, 22, v35, v36, v37, v38, v39, v40, v41, v42, v43[0],
                                 *(_QWORD *)&v43[1],
                                 *((_QWORD *)&v43[1] + 1));
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMovingApDetector::isBadCentroidFromDatabaseLookup(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v28);
          if (v28 != &v65)
            free(v28);
        }
        return 1;
      }
      else
      {
        v17 = *((double *)sub_10132E530() + 1);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F1D0);
        v18 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_10018FE90(a2, &__p);
          v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v20 = __p.__r_.__value_.__r.__words[0];
          sub_100190040((uint64_t)&v35, &buf);
          v21 = &__p;
          if (v19 < 0)
            v21 = (std::string *)v20;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &buf;
          else
            v22 = (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v65.__r_.__value_.__l.__data_) = 136381443;
          *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
          WORD2(v65.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v65.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
          HIWORD(v65.__r_.__value_.__r.__words[2]) = 2049;
          v66 = v9;
          v67 = 2049;
          v68 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "MovingApDetector, centroid under lookup: %{private}s, database version: %{private}s. distance: %{private}.1fm. threshold: %{private}.1fm", (uint8_t *)&v65, 0x2Au);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&v65, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10215F1D0);
          v29 = qword_1022A0048;
          sub_10018FE90(a2, &buf);
          v30 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
          v31 = buf.__r_.__value_.__r.__words[0];
          sub_100190040((uint64_t)&v35, v56);
          v32 = &buf;
          if (v30 < 0)
            v32 = (std::string *)v31;
          if (v59 >= 0)
            v33 = v56;
          else
            v33 = *(_BYTE **)v56;
          LODWORD(__p.__r_.__value_.__l.__data_) = 136381443;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
          v61 = v9;
          v62 = 2049;
          v63 = v17;
          v34 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v65, 1628, &_mh_execute_header, v29, 0, "MovingApDetector, centroid under lookup: %{private}s, database version: %{private}s. distance: %{private}.1fm. threshold: %{private}.1fm", &__p, 42, v35, v36, v37, v38, v39, v40, v41, v42,
                                 v43[0],
                                 *(_QWORD *)&v43[1],
                                 *((_QWORD *)&v43[1] + 1));
          if (v59 < 0)
            operator delete(*(void **)v56);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMovingApDetector::isBadCentroidFromDatabaseLookup(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v34);
          if (v34 != &v65)
            free(v34);
        }
        return v9 <= v17;
      }
    }
    return 0;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F1D0);
  v15 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v65.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)&v65, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if ((_DWORD)result)
  {
    bzero(&v65, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v44 = 0;
    v16 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v65, 1628, &_mh_execute_header, qword_1022A0048, 17, "MovingApDetector, centroid database is null!", &v44, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMovingApDetector::isBadCentroidFromDatabaseLookup(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v16);
    if (v16 != &v65)
      free(v16);
    return 0;
  }
  return result;
}

void sub_1009322CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102305860);
  _Unwind_Resume(a1);
}

void sub_100932328(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_QWORD *sub_100932354@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x1B0uLL);
  result = sub_10093239C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100932388(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10093239C(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10215F200;
  a1[1] = 0;
  sub_101311AD0((uint64_t)(a1 + 3));
  return a1;
}

void sub_1009323D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1009323E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10215F200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009323FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10215F200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100932430(uint64_t a1)
{
  return sub_101311BB8(a1 + 24);
}

void sub_10093243C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1009324D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1009324F0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10093257C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100932594()
{
  sub_1015A2E04(qword_102305808, "BadClientSideCentroidTable");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305808, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102305820, "MovingApDetectionTable");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305820, (void *)&_mh_execute_header);
}

_BYTE *sub_100932610(_BYTE *__dst, unsigned __int8 *a2, size_t a3)
{
  if (a3 && a3 == 8 * (*a2 - 1 < 2))
    memcpy(__dst, a2, a3);
  else
    *__dst = -1;
  return __dst;
}

_QWORD *sub_100932660(_QWORD *result, uint64_t a2)
{
  *result = off_10215F250;
  result[1] = a2;
  return result;
}

uint64_t sub_100932670(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "MaxHarvestLocationPointsPerUpload", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1009326F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100932708(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "MaxHarvestLocations", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10093278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1009327A0(uint64_t a1, float a2, double a3)
{
  float v5;
  float v6;
  BOOL v7;
  float v8;
  float v10;
  float v11;
  float v12;

  sub_10093287C(a1, a2, a3);
  if (*(_BYTE *)(a1 + 48))
  {
    v5 = sub_100932904((_QWORD *)a1, 20.0);
    v6 = sub_100932904((_QWORD *)a1, 0.0);
    if (v5 != -9999.0)
    {
      v7 = v6 == -9999.0;
      v8 = vabds_f32(v5, v6);
      if (!v7 && v8 < 1.0)
      {
        sub_100932A28((_QWORD *)a1, a3 + -4.0);
        *(_WORD *)(a1 + 48) = 0;
        *(double *)(a1 + 56) = a3;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 49))
  {
    v10 = sub_100932904((_QWORD *)a1, 0.0);
    v11 = sub_100932AB4((_QWORD *)a1);
    if (v10 != -9999.0)
    {
      v7 = v11 == -9999.0;
      v12 = vabds_f32(v10, v11);
      if (!v7 && v12 >= 3.0)
        *(_BYTE *)(a1 + 48) = 1;
    }
  }
}

uint64_t sub_10093287C(uint64_t a1, float a2, double a3)
{
  uint64_t result;
  __n128 v7;

  sub_100932B8C(a1, a3);
  v7.n128_f64[0] = a3;
  v7.n128_u32[2] = sub_10024806C(a2 * 1000.0, 101320.0);
  sub_100932CCC((_QWORD *)a1, &v7);
  result = sub_100932A28((_QWORD *)a1, a3 + -44.0);
  *(_BYTE *)(a1 + 49) = (_DWORD)result != 0;
  return result;
}

float sub_100932904(_QWORD *a1, double a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _QWORD *v9;
  uint64_t v10;
  float result;
  int v12;
  double v13;
  float v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;

  v2 = a1[5];
  if (!v2)
    return -9999.0;
  v3 = a1[4];
  v4 = v3 + v2;
  v5 = v3 + v2 - 1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = *(double *)(*(_QWORD *)(v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v5) - a2;
  v9 = (_QWORD *)(v6 + 8 * (v4 >> 8));
  if (v7 == v6)
    v10 = 0;
  else
    v10 = *v9 + 16 * v4;
  v12 = 0;
  v13 = v8 + -4.0;
  v14 = 0.0;
  while (1)
  {
    v15 = v7 == v6 ? 0 : *(_QWORD *)(v6 + 8 * (v3 >> 8)) + 16 * a1[4];
    if (v10 == v15)
      break;
    if (v10 == *v9)
    {
      v18 = *--v9;
      v17 = v18;
      v19 = *(double *)(v18 + 4080);
      if (v19 <= v8)
      {
        if (v19 < v13)
          break;
        v14 = v14 + (float)((float)(*(float *)(v17 + 4088) - v14) / (float)++v12);
      }
      v10 = *v9 + 4096;
    }
    else
    {
      v16 = *(double *)(v10 - 16);
      if (v16 <= v8)
      {
        if (v16 < v13)
          break;
        v14 = v14 + (float)((float)(*(float *)(v10 - 8) - v14) / (float)++v12);
      }
    }
    v10 -= 16;
  }
  result = -9999.0;
  if (v12)
    return v14;
  return result;
}

uint64_t sub_100932A28(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v2 = a1[5];
  if (!v2)
    return 0;
  v5 = 0;
  do
  {
    v6 = a1[4];
    if (*(double *)(*(_QWORD *)(a1[1] + ((v6 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v6) >= a2)
      break;
    a1[4] = v6 + 1;
    a1[5] = v2 - 1;
    sub_1004A57E8((uint64_t)a1, 1);
    v5 = (v5 + 1);
    v2 = a1[5];
  }
  while (v2);
  return v5;
}

float sub_100932AB4(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  v1 = a1[5];
  if (!v1)
    return -9999.0;
  v2 = 0;
  v3 = a1[4];
  v4 = a1[1];
  v5 = a1[2];
  v6 = (uint64_t *)(v4 + 8 * (v3 >> 8));
  v7 = *v6;
  v8 = *v6 + 16 * v3;
  v9 = *(double *)v8 + 20.0;
  if (v5 == v4)
    v8 = 0;
  v10 = v3 + v1;
  v11 = 0.0;
LABEL_5:
  v12 = v7 - v8 + 4096;
  while (1)
  {
    v13 = v5 == v4 ? 0 : *(_QWORD *)(v4 + 8 * (v10 >> 8)) + 16 * v10;
    if (v8 == v13 || *(double *)v8 > v9)
      break;
    v11 = v11 + (float)((float)(*(float *)(v8 + 8) - v11) / (float)++v2);
    v8 += 16;
    v12 -= 16;
    if (!v12)
    {
      v14 = v6[1];
      ++v6;
      v7 = v14;
      v8 = v14;
      goto LABEL_5;
    }
  }
  result = -9999.0;
  if (v2)
    return v11;
  return result;
}

double sub_100932B7C(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t sub_100932B84(uint64_t result)
{
  *(_QWORD *)(result + 56) = 0;
  return result;
}

void sub_100932B8C(uint64_t a1, double a2)
{
  uint64_t v2;
  unint64_t v5;
  void **v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double i;
  unint64_t v13;
  __n128 v14;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v5 = v2 + *(_QWORD *)(a1 + 32) - 1;
    v6 = *(void ***)(a1 + 8);
    v7 = (double *)(*(char **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v5);
    if (vabdd_f64(a2, *v7) <= 44.0)
    {
      for (i = *v7 + 1.0; i < a2; i = *v7 + 1.0)
      {
        *v7 = i;
        v14.n128_u32[2] = -971228160;
        v14.n128_f64[0] = i;
        v13 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32) - 1;
        v14.n128_u32[2] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v13
                                    + 8);
        sub_100932CCC((_QWORD *)a1, &v14);
      }
    }
    else
    {
      *(_WORD *)(a1 + 48) = 0;
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 40) = 0;
      v9 = v8 - (_QWORD)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          v10 = *(_QWORD *)(a1 + 16);
          v6 = (void **)(*(_QWORD *)(a1 + 8) + 8);
          *(_QWORD *)(a1 + 8) = v6;
          v9 = v10 - (_QWORD)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        v11 = 128;
      }
      else
      {
        if (v9 >> 3 != 2)
          return;
        v11 = 256;
      }
      *(_QWORD *)(a1 + 32) = v11;
    }
  }
}

__n128 sub_100932CCC(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100932D54(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100932D54(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10093301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100933068(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v14;
  const char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  _BYTE buf[36];
  __int128 v20;
  __int128 v21;
  int v22;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  sub_10091DAC8(a1 + 88);
  *(double *)(a1 + 80) = a2;
  v5 = (uint64_t *)(a1 + 80);
  sub_1001E4804(buf);
  v6 = sub_1001FD98C(*(uint64_t *)buf, "maxAllowedAccessPointNotificationAge", (void *)(a1 + 80));
  v7 = v6;
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_5;
  v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    if (!v6)
      goto LABEL_11;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F2B8);
  v11 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *v5;
    *(_DWORD *)buf = 134283521;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@Wsb, #Warning defaults write maxAllowedAccessPointNotificationAge to %{private}.1f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F2B8);
    v14 = *v5;
    v17 = 134283521;
    v18 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@Wsb, #Warning defaults write maxAllowedAccessPointNotificationAge to %{private}.1f", &v17, 12);
    v16 = (char *)v15;
    sub_100512490("Generic", 1, 0, 2, "CLWsbScanComparator::CLWsbScanComparator(const CFTimeInterval)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
LABEL_11:
  sub_10091DAC8((uint64_t)buf);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)&buf[8];
  *(_OWORD *)(a1 + 108) = *(_OWORD *)&buf[20];
  *(_OWORD *)(a1 + 124) = v20;
  *(_OWORD *)(a1 + 140) = v21;
  *(_DWORD *)(a1 + 156) = v22;
  sub_100935804(a1);
  sub_100935804(v4);
  return a1;
}

void sub_100933308(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100935780(v2);
  sub_100935780(v1);
  _Unwind_Resume(a1);
}

void sub_100933344(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_102305878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102305878))
  {
    __cxa_atexit((void (*)(void *))sub_1009333FC, &qword_102305868, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102305878);
  }
  if (qword_102305880 != -1)
    dispatch_once(&qword_102305880, &stru_10215F298);
  v3 = unk_102305870;
  *a1 = qword_102305868;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_100933400(id a1)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  sub_100935858(&v4);
  sub_1002B7674((uint64_t)&qword_102305868, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_100933474(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  void **v11;

  v2 = *(uint64_t **)result;
  v3 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v3)
  {
    do
    {
      v10 = *v2;
      if (!sub_1000AF064(a2, &v10))
      {
        memset(v9, 0, sizeof(v9));
        sub_100935964((uint64_t)a2, &v10, &v10, (uint64_t)v9);
        v11 = (void **)v9;
        sub_100279AA4(&v11);
      }
      v5 = sub_1000AF064(a2, &v10);
      if (!v5)
        sub_100263950("unordered_map::at: key not found");
      v6 = v5;
      v7 = v5 + 3;
      v8 = v6[4];
      if (v8 >= v6[5])
      {
        result = sub_100279DEC(v7, (uint64_t)v2);
      }
      else
      {
        sub_100279D64((uint64_t)v7, (uint64_t)v2);
        result = v8 + 88;
      }
      v6[4] = result;
      v2 += 11;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_10093354C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_100279AA4(&a14);
  _Unwind_Resume(a1);
}

void sub_100933568(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  id v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  id v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  double v44;
  _BYTE buf[12];
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  double v51;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = 0;
    v6 = *(double *)(v3 + 56);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    while (1)
    {
      if (vabdd_f64(v6, *(double *)(v3 + 56)) <= 4.0)
      {
        if (v5 >= v36)
          goto LABEL_18;
        sub_100279D64((uint64_t)&v34, v3);
        v5 += 88;
      }
      else
      {
        v7 = v34;
        sub_100933C5C(&v31, (uint64_t)&v34);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F2D8);
        v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - v7) >> 3);
        v9 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v10 = objc_msgSend(a2, "UTF8String");
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = v10;
          v46 = 2050;
          v47 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3);
          v48 = 2050;
          v49 = v8;
          v50 = 2050;
          v51 = v6;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F2D8);
          v13 = qword_1022A0058;
          v14 = objc_msgSend(a2, "UTF8String");
          v37 = 136446978;
          v38 = v14;
          v39 = 2050;
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3);
          v41 = 2050;
          v42 = v8;
          v43 = 2050;
          v44 = v6;
          LODWORD(v30) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f", &v37, v30);
          v16 = (char *)v15;
          sub_100512490("Generic", 1, 0, 2, "void createWsbGroups(CLWifiService_Type::AccessPointVector, NSString *)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
        v6 = *(double *)(v3 + 56);
        v11 = v34;
        for (i = v35; i != v11; i -= 88)
        {
          if (*(char *)(i - 57) < 0)
            operator delete(*(void **)(i - 80));
        }
        v35 = v11;
        if (v11 >= v36)
        {
LABEL_18:
          v5 = sub_100279DEC((uint64_t *)&v34, v3);
          goto LABEL_19;
        }
        sub_100279D64((uint64_t)&v34, v3);
        v5 = v11 + 88;
      }
LABEL_19:
      v35 = v5;
      v3 += 88;
      if (v3 == v4)
      {
        v17 = v34;
        sub_100933C5C(&v31, (uint64_t)&v34);
        v18 = (uint64_t)(v5 - v17) >> 3;
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F2D8);
        v19 = 0x2E8BA2E8BA2E8BA3 * v18;
        v20 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v21 = objc_msgSend(a2, "UTF8String");
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = v21;
          v46 = 2050;
          v47 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3);
          v48 = 2050;
          v49 = v19;
          v50 = 2050;
          v51 = v6;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F2D8);
          v23 = qword_1022A0058;
          v24 = objc_msgSend(a2, "UTF8String");
          v37 = 136446978;
          v38 = v24;
          v39 = 2050;
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3);
          v41 = 2050;
          v42 = v19;
          v43 = 2050;
          v44 = v6;
          LODWORD(v30) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 0, "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f", &v37, v30);
          v26 = (char *)v25;
          sub_100512490("Generic", 1, 0, 2, "void createWsbGroups(CLWifiService_Type::AccessPointVector, NSString *)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
        *(_QWORD *)buf = &v31;
        sub_10055C824((void ***)buf);
        *(_QWORD *)buf = &v34;
        sub_100279AA4((void ***)buf);
        return;
      }
    }
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F2D8);
  v22 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = objc_msgSend(a2, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "@WsbGroupCheck, %{public}s, empty", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F2D8);
    v27 = qword_1022A0058;
    v37 = 136446210;
    v38 = objc_msgSend(a2, "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 0, "@WsbGroupCheck, %{public}s, empty", &v37, 12);
    v29 = (char *)v28;
    sub_100512490("Generic", 1, 0, 2, "void createWsbGroups(CLWifiService_Type::AccessPointVector, NSString *)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
}

void sub_100933C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a13;
  sub_10055C824(&a25);
  a25 = (void **)&a16;
  sub_100279AA4(&a25);
  _Unwind_Resume(a1);
}

_QWORD *sub_100933C5C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)sub_1002596A8((uint64_t)v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    sub_100935C24(a1, v17);
    v8 = (_QWORD *)a1[1];
    sub_100935DB4(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_100933D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100935DB4((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100933D9C(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v9;
  const char *v10;
  const char *v11;
  char *v12;
  uint64_t v13[3];
  uint64_t v14[3];
  int v15;
  const char *v16;
  _BYTE buf[1632];

  v4 = *(_DWORD *)(a2 + 24);
  if (v4 == 1)
  {
    sub_100933474(a2, a1 + 5);
    sub_10091DB18((uint64_t)(a1 + 11), -1171354717 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    memset(v13, 0, sizeof(v13));
    sub_10055A7B8(v13, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    v5 = v13;
    sub_100933568(v13, CFSTR("bgScanCache"));
    goto LABEL_5;
  }
  if (v4 == 2)
  {
    sub_100933474(a2, a1);
    sub_10091DAFC((uint64_t)(a1 + 11), -1171354717 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    memset(v14, 0, sizeof(v14));
    sub_10055A7B8(v14, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    v5 = v14;
    sub_100933568(v14, CFSTR("aonsensed"));
LABEL_5:
    *(_QWORD *)buf = v5;
    sub_100279AA4((void ***)buf);
    return sub_100934080((uint64_t)a1);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F2B8);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    v7 = sub_100CF2174(*(_DWORD *)(a2 + 24));
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "@Wsb, warning, received WSB scan from unsupported source %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F2B8);
    v9 = qword_1022A0048;
    v10 = sub_100CF2174(*(_DWORD *)(a2 + 24));
    v15 = 136446210;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 16, "@Wsb, warning, received WSB scan from unsupported source %{public}s", &v15, 12);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 0, "void CLWsbScanComparator::receiveWsbScanEvent(const CL::Wifi1::Events::Wifi::Wsb &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return sub_100934080((uint64_t)a1);
}

void sub_10093405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_100934080(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *i;
  _QWORD *v4;
  int v5;
  int v6;
  _QWORD *v7;
  int v8;
  int v9;

  v2 = (_QWORD *)(a1 + 40);
  for (i = *(_QWORD **)(a1 + 56); i; i = (_QWORD *)*i)
    sub_100934910((_QWORD *)a1, i + 2, i + 3);
  sub_1009348A0(a1, (_QWORD *)a1);
  sub_1009348A0(a1, v2);
  v4 = *(_QWORD **)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    do
    {
      v5 -= 1171354717 * ((v4[4] - v4[3]) >> 3);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  sub_10091DB50(a1 + 88, v6);
  v7 = *(_QWORD **)(a1 + 56);
  if (v7)
  {
    v8 = 0;
    do
    {
      v8 -= 1171354717 * ((v7[4] - v7[3]) >> 3);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  sub_10091DB58(a1 + 88, v9);
  sub_10091DB70((_DWORD *)(a1 + 88));
  return sub_1000CC970((double *)(a1 + 88));
}

uint64_t sub_100934170(uint64_t a1, _QWORD *a2)
{
  return sub_10091DB34(a1 + 88, -1171354717 * ((uint64_t)(a2[1] - *a2) >> 3));
}

void sub_100934198(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  NSObject *v5;
  void **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE buf[12];
  char v16;
  int v17;
  _BYTE *v18;
  void *__p[2];
  char v20;

  v2 = *a2;
  if (*a2 != a2[1])
  {
    do
    {
      if (sub_100CF1F84((uint64_t)v2) <= *(double *)(a1 + 80) + 0.0)
      {
        v2 += 11;
        v8 = a2[1];
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F2B8);
        v5 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_100CF1BCC(v2, __p);
          v6 = v20 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)&buf[4] = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "@Wsb, WsbScanComparator, removing AP %{private}s as it is too old", buf, 0xCu);
          if (v20 < 0)
            operator delete(__p[0]);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10215F2B8);
          v10 = qword_1022A0048;
          sub_100CF1BCC(v2, buf);
          v11 = buf;
          if (v16 < 0)
            v11 = *(_BYTE **)buf;
          v17 = 136380675;
          v18 = v11;
          LODWORD(v14) = 12;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 2, "@Wsb, WsbScanComparator, removing AP %{private}s as it is too old", &v17, v14);
          v13 = v12;
          if (v16 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "void CLWsbScanComparator::removeAccessPointsTooOld(CLWifiService_Type::AccessPointVector &)", "%s\n", v13);
          if (v13 != (char *)__p)
            free(v13);
        }
        sub_100935E34((uint64_t)__p, (uint64_t)(v2 + 11), (uint64_t)a2[1], (uint64_t)v2);
        v8 = v7;
        for (i = a2[1]; i != v8; i -= 11)
        {
          if (*((char *)i - 57) < 0)
            operator delete((void *)*(i - 10));
        }
        a2[1] = v8;
      }
    }
    while (v2 != v8);
  }
}

void sub_10093444C(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  NSObject *v4;
  std::string *v5;
  uint64_t *v6;
  uint64_t *v7;
  NSObject *v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *p_buf;
  std::string *v16;
  std::string *v17;
  uint64_t v18;
  int v19;
  std::string *v20;
  __int16 v21;
  uint64_t v22;
  std::string buf;
  std::string __p[68];

  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    if (i[3] == i[4])
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F2B8);
      v4 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        sub_1000C2254(i + 2, __p);
        v5 = __p;
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v5 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "@Wsb, failed validity check, mac %{private}s has 0 AP", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F2B8);
        v14 = qword_1022A0048;
        sub_1000C2254(i + 2, &buf);
        p_buf = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        v19 = 136380675;
        v20 = p_buf;
        LODWORD(v18) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v14, 17, "@Wsb, failed validity check, mac %{private}s has 0 AP", &v19, v18);
        v17 = v16;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 0, "void CLWsbScanComparator::validityCheck(const std::unordered_map<CLMacAddress, CLWifiService_Type::AccessPointVector> &)", "%s\n", (const char *)v17);
        if (v17 != __p)
          free(v17);
      }
    }
    v7 = (uint64_t *)i[3];
    v6 = (uint64_t *)i[4];
    while (v7 != v6)
    {
      if (sub_100CF1F84((uint64_t)v7) > *(double *)(a1 + 80) + 0.2)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F2B8);
        v8 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
        {
          sub_100CF1BCC(v7, __p);
          v9 = __p;
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v9 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 0x3FC999999999999ALL;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "@Wsb, failed validity check, ap is too old, %{private}s, buffer, %{public}.1f", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10215F2B8);
          v10 = qword_1022A0048;
          sub_100CF1BCC(v7, &buf);
          v11 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v11 = (std::string *)buf.__r_.__value_.__r.__words[0];
          v19 = 136380931;
          v20 = v11;
          v21 = 2050;
          v22 = 0x3FC999999999999ALL;
          LODWORD(v18) = 22;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 17, "@Wsb, failed validity check, ap is too old, %{private}s, buffer, %{public}.1f", &v19, v18);
          v13 = v12;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 0, "void CLWsbScanComparator::validityCheck(const std::unordered_map<CLMacAddress, CLWifiService_Type::AccessPointVector> &)", "%s\n", (const char *)v13);
          if (v13 != __p)
            free(v13);
        }
      }
      v7 += 11;
    }
  }
}

void sub_1009348A0(uint64_t a1, _QWORD *a2)
{
  uint64_t i;

  for (i = a2[2]; i; i = sub_100935ED0(a2, (uint64_t *)i))
  {
    while (1)
    {
      sub_100934198(a1, (uint64_t **)(i + 24));
      if (*(_QWORD *)(i + 24) == *(_QWORD *)(i + 32))
        break;
      i = *(_QWORD *)i;
      if (!i)
        goto LABEL_6;
    }
  }
LABEL_6:
  sub_10093444C(a1, (uint64_t)a2);
}

void sub_100934910(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  void **v17;
  void **v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  NSObject *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  int v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  NSObject *log;
  os_log_t loga;
  uint64_t v41;
  uint64_t v42;
  _BYTE buf[12];
  __int16 v44;
  _BYTE *v45;
  char v46;
  int v47;
  _BYTE *v48;
  __int16 v49;
  _BYTE *v50;
  void *__p[2];
  char v52;
  _BYTE v53[12];
  char v54;

  if (sub_1000AF064(a1, a2))
  {
    v6 = sub_1000AF064(a1, a2);
    if (!v6)
      sub_100263950("unordered_map::at: key not found");
    v7 = *a3;
    if (*a3 != a3[1])
    {
      v8 = v6;
      v9 = (uint64_t)(a1 + 11);
      do
      {
        v10 = v8[3];
        if (v10 == v8[4])
        {
LABEL_24:
          v7 += 88;
        }
        else
        {
          v11 = -v10;
          while (1)
          {
            __p[0] = *(void **)v7;
            *(_QWORD *)v53 = *(_QWORD *)v10;
            if (!sub_100B0630C(__p, v53) && *(_DWORD *)(v7 + 40) == *(_DWORD *)(v10 + 40))
            {
              v12 = atomic_load((unsigned __int8 *)&qword_102305890);
              if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_102305890))
              {
                dword_102305888 = sub_1009350AC();
                __cxa_guard_release(&qword_102305890);
              }
              if (fabs((double)(*(_DWORD *)(v7 + 32) - *(_DWORD *)(v10 + 32))) <= (double)dword_102305888
                && (*(_BYTE *)(v7 + 72) != 0) == (*(_BYTE *)(v10 + 72) != 0))
              {
                v13 = atomic_load((unsigned __int8 *)&qword_1023058A0);
                if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1023058A0))
                {
                  qword_102305898 = sub_1009352F0();
                  __cxa_guard_release(&qword_1023058A0);
                }
                if (vabdd_f64(*(double *)(v7 + 56), *(double *)(v10 + 56)) <= *(double *)&qword_102305898)
                {
                  v14 = atomic_load((unsigned __int8 *)&qword_1023058B0);
                  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1023058B0))
                  {
                    qword_1023058A8 = sub_100935538();
                    __cxa_guard_release(&qword_1023058B0);
                  }
                  if (vabdd_f64(*(double *)(v7 + 48), *(double *)(v10 + 48)) <= *(double *)&qword_1023058A8)
                    break;
                }
              }
            }
            v10 += 88;
            v11 -= 88;
            if (v10 == v8[4])
              goto LABEL_24;
          }
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10215F2B8);
          v15 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            log = v15;
            sub_100CF1BCC((uint64_t *)v7, __p);
            v41 = v9;
            v16 = v52;
            v17 = (void **)__p[0];
            sub_100CF1BCC((uint64_t *)v10, v53);
            v18 = __p;
            if (v16 < 0)
              v18 = v17;
            v19 = v53;
            if (v54 < 0)
              v19 = *(_BYTE **)v53;
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)&buf[4] = v18;
            v44 = 2081;
            v45 = v19;
            _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "@Wsb, AP %{private}s from WifiManager is matched with AP %{private}s from Aonsensed", buf, 0x16u);
            if (v54 < 0)
              operator delete(*(void **)v53);
            v9 = v41;
            if (v52 < 0)
              operator delete(__p[0]);
          }
          if (sub_1001BFF7C(115, 2))
          {
            v42 = v9;
            bzero(__p, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10215F2B8);
            loga = (os_log_t)qword_1022A0048;
            sub_100CF1BCC((uint64_t *)v7, v53);
            v28 = v54;
            v29 = *(_BYTE **)v53;
            sub_100CF1BCC((uint64_t *)v10, buf);
            v30 = v53;
            if (v28 < 0)
              v30 = v29;
            v31 = buf;
            if (v46 < 0)
              v31 = *(_BYTE **)buf;
            v47 = 136380931;
            v48 = v30;
            v49 = 2081;
            v50 = v31;
            LODWORD(v38) = 22;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, loga, 2, "@Wsb, AP %{private}s from WifiManager is matched with AP %{private}s from Aonsensed", &v47, v38);
            v33 = v32;
            if (v46 < 0)
              operator delete(*(void **)buf);
            if (v54 < 0)
              operator delete(*(void **)v53);
            sub_100512490("Generic", 1, 0, 2, "BOOL checkIfApIsMatched(const CLWifiService_Type::AccessPoint &, CLWifiService_Type::AccessPointVector &)", "%s\n", v33);
            v9 = v42;
            if (v33 != (char *)__p)
              free(v33);
          }
          sub_100935E34((uint64_t)__p, 88 - v11, v8[4], -v11);
          v21 = v20;
          for (i = v8[4]; i != v21; i -= 88)
          {
            if (*(char *)(i - 57) < 0)
              operator delete(*(void **)(i - 80));
          }
          v8[4] = v21;
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10215F2B8);
          v23 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            sub_100CF1BCC((uint64_t *)v7, __p);
            v24 = __p;
            if (v52 < 0)
              v24 = (void **)__p[0];
            *(_DWORD *)v53 = 136380675;
            *(_QWORD *)&v53[4] = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "@Wsb, removing AP %{private}s from WifiManager as it is matched with Aonsensed", v53, 0xCu);
            if (v52 < 0)
              operator delete(__p[0]);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10215F2B8);
            v34 = qword_1022A0048;
            sub_100CF1BCC((uint64_t *)v7, v53);
            v35 = v53;
            if (v54 < 0)
              v35 = *(_BYTE **)v53;
            *(_DWORD *)buf = 136380675;
            *(_QWORD *)&buf[4] = v35;
            LODWORD(v38) = 12;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v34, 2, "@Wsb, removing AP %{private}s from WifiManager as it is matched with Aonsensed", buf, v38);
            v37 = v36;
            if (v54 < 0)
              operator delete(*(void **)v53);
            sub_100512490("Generic", 1, 0, 2, "void CLWsbScanComparator::checkApMatchForWifiManager(const CLMacAddress &, CLWifiService_Type::AccessPointVector &)", "%s\n", v37);
            if (v37 != (char *)__p)
              free(v37);
          }
          sub_100935E34((uint64_t)__p, v7 + 88, a3[1], v7);
          v26 = v25;
          for (j = a3[1]; j != v26; j -= 88)
          {
            if (*(char *)(j - 57) < 0)
              operator delete(*(void **)(j - 80));
          }
          a3[1] = v26;
          sub_10091DB60(v9);
        }
      }
      while (v7 != a3[1]);
    }
  }
}

void sub_100934FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  _Unwind_Resume(exception_object);
}

void sub_100935054(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100935080(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1009350AC()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _DWORD v10[4];
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  HIDWORD(v9) = 0;
  sub_1001E4804(buf);
  v0 = sub_1001E4B84(*(uint64_t *)buf, "maxRssiDeltaAllowed", (_DWORD *)&v9 + 1);
  v1 = v0;
  v2 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v1)
        goto LABEL_6;
LABEL_13:
      sub_100197040();
      if (sub_1007573A8())
        return 5;
      else
        return 0;
    }
  }
  if (!v0)
    goto LABEL_13;
LABEL_6:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F2B8);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&buf[4] = HIDWORD(v9);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@Wsb, #Warning defaults write maxRssiDeltaAllowed to %{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F2B8);
    v10[0] = 67174657;
    v10[1] = HIDWORD(v9);
    LODWORD(v9) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@Wsb, #Warning defaults write maxRssiDeltaAllowed to %{private}d", v10, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "int getMaxRssiDeltaAllowed()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return HIDWORD(v9);
}

void sub_1009352D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1009352F0()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;
  double result;
  int v7;
  const char *v8;
  char *v9;
  double v10;
  int v11;
  double v12;
  _OWORD buf[102];

  v10 = 0.0;
  sub_1001E4804(buf);
  v0 = sub_1001FD98C(*(uint64_t *)&buf[0], "maxTimestampDeltaAllowed", &v10);
  v1 = v0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_5;
  v3 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v1)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    if (v0)
    {
LABEL_6:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F2B8);
      v5 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134283521;
        *(double *)((char *)buf + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@Wsb, #Warning defaults write maxTimestampDeltaAllowed to %{private}.1f", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F2B8);
        v11 = 134283521;
        v12 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@Wsb, #Warning defaults write maxTimestampDeltaAllowed to %{private}.1f", &v11, 12);
        v9 = (char *)v8;
        sub_100512490("Generic", 1, 0, 2, "CFTimeInterval getMaxTimestampDeltaAllowed()", "%s\n", v8);
        if (v9 != (char *)buf)
          free(v9);
      }
      return v10;
    }
  }
  sub_100197040();
  v7 = sub_1007573A8();
  result = 1.0;
  if (v7)
    return 5.0;
  return result;
}

void sub_10093551C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100935538()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;
  double result;
  int v7;
  const char *v8;
  char *v9;
  double v10;
  int v11;
  double v12;
  _OWORD buf[102];

  v10 = 0.0;
  sub_1001E4804(buf);
  v0 = sub_1001FD98C(*(uint64_t *)&buf[0], "maxAgeDeltaAllowed", &v10);
  v1 = v0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_5;
  v3 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v1)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    if (v0)
    {
LABEL_6:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F2B8);
      v5 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134283521;
        *(double *)((char *)buf + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@Wsb, #Warning defaults write maxAgeDeltaAllowed to %{private}.1f", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F2B8);
        v11 = 134283521;
        v12 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@Wsb, #Warning defaults write maxAgeDeltaAllowed to %{private}.1f", &v11, 12);
        v9 = (char *)v8;
        sub_100512490("Generic", 1, 0, 2, "CFTimeInterval getMaxAgeDeltaAllowed()", "%s\n", v8);
        if (v9 != (char *)buf)
          free(v9);
      }
      return v10;
    }
  }
  sub_100197040();
  v7 = sub_1007573A8();
  result = 1.0;
  if (v7)
    return 5.0;
  return result;
}

void sub_100935764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100935780(uint64_t a1)
{
  void *v2;

  sub_1009357B8(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1009357B8(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      sub_100279AA4(&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100935804(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1009357B8(a1, *(char **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *sub_100935858@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xB8uLL);
  result = sub_1009358A0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10093588C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009358A0(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10215F308;
  a1[1] = 0;
  sub_100933068((uint64_t)(a1 + 3), 6.0);
  return a1;
}

void sub_1009358DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1009358F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10215F308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100935904(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10215F308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100935938(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_100935780(a1 + 64);
  return sub_100935780(v1);
}

char *sub_100935964(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v9 = sub_100129380((uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v10)
          {
            if (sub_10009483C((_QWORD *)v15 + 2, a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_QWORD *)v15 + 2) = *a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 5) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_10012E444(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v15 = *v25;
LABEL_38:
    *v25 = v15;
    goto LABEL_39;
  }
  *(_QWORD *)v15 = *v17;
  *v17 = v15;
  *(_QWORD *)(v24 + 8 * v4) = v17;
  if (*(_QWORD *)v15)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_100935BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_100935BDC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_100935BDC(uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    sub_100279AA4(&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_100935C24(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100935C98((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100935C98(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_100935D38((uint64_t)v11);
  return v9;
}

uint64_t sub_100935D38(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100935D6C(a1);
  return a1;
}

void sub_100935D6C(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_100279AA4(&v3);
    v1 += 3;
  }
}

void **sub_100935DB4(void **a1)
{
  sub_100935DE4((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100935DE4(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_100279AA4(&v5);
  }
}

uint64_t sub_100935E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)a4 = *(_QWORD *)v5;
      v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      v9 = *(_OWORD *)(v5 + 32);
      v10 = *(_OWORD *)(v5 + 48);
      v11 = *(_OWORD *)(v5 + 64);
      *(_QWORD *)(a4 + 80) = *(_QWORD *)(v5 + 80);
      *(_OWORD *)(a4 + 48) = v10;
      *(_OWORD *)(a4 + 64) = v11;
      *(_OWORD *)(a4 + 32) = v9;
      a4 += 88;
      v5 += 88;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_100935ED0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_1000592D8(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    sub_100935BDC((uint64_t)&v6, v3);
  return v2;
}

void sub_100935F18()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100935FB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100935FCC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100936058(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100936070(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;

  sub_100130994((_DWORD *)a2, a1);
  sub_10017F954(a1, (uint64_t)"als", a2);
  if (*(_DWORD *)(a2 + 1564))
  {
    v4 = *(double *)(a1 + 6456);
    ++*(_DWORD *)(*(_QWORD *)(a2 + 6496) + 204);
    if (*(_BYTE *)(a2 + 1624))
    {
      sub_100225584(a2 + 6040, 2, v4);
      sub_10003A974(a2 + 6040, 5, 9u, v4);
    }
    else
    {
      sub_100225584(a2 + 6040, 1, v4);
    }
  }
}

void sub_10093611C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100936134(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  char *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  void *v26;
  char *v27;
  __int128 v29;
  uint64_t v30;
  void *__p;
  char *v32;
  char *v33;

  sub_100130994((_DWORD *)a2, (uint64_t)a1);
  __p = 0;
  v32 = 0;
  v33 = 0;
  sub_100936368(&__p, a1[151]);
  v3 = (uint64_t *)a1[150];
  if (v3)
  {
    v4 = v32;
    do
    {
      v5 = v3 + 3;
      if (v4 >= v33)
      {
        v10 = (char *)__p;
        v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)__p) >> 5);
        v12 = v11 + 1;
        if (v11 + 1 > 0x2AAAAAAAAAAAAAALL)
          sub_100259694();
        if (0x5555555555555556 * ((v33 - (_BYTE *)__p) >> 5) > v12)
          v12 = 0x5555555555555556 * ((v33 - (_BYTE *)__p) >> 5);
        if (0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)__p) >> 5) >= 0x155555555555555)
          v13 = 0x2AAAAAAAAAAAAAALL;
        else
          v13 = v12;
        if (v13)
        {
          v14 = (char *)sub_10067257C((uint64_t)&v33, v13);
          v10 = (char *)__p;
          v4 = v32;
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[96 * v11];
        v16 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)v15 = *v5;
        *((_OWORD *)v15 + 1) = v16;
        v17 = *(_OWORD *)(v3 + 7);
        v18 = *(_OWORD *)(v3 + 9);
        v19 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v15 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v15 + 5) = v19;
        *((_OWORD *)v15 + 2) = v17;
        *((_OWORD *)v15 + 3) = v18;
        if (v4 == v10)
        {
          v25 = &v14[96 * v11];
        }
        else
        {
          v20 = &v14[96 * v11];
          do
          {
            v21 = *((_OWORD *)v4 - 5);
            *((_OWORD *)v20 - 6) = *((_OWORD *)v4 - 6);
            *((_OWORD *)v20 - 5) = v21;
            v22 = *((_OWORD *)v4 - 4);
            v23 = *((_OWORD *)v4 - 3);
            v24 = *((_OWORD *)v4 - 1);
            v25 = v20 - 96;
            *((_OWORD *)v20 - 2) = *((_OWORD *)v4 - 2);
            *((_OWORD *)v20 - 1) = v24;
            *((_OWORD *)v20 - 4) = v22;
            *((_OWORD *)v20 - 3) = v23;
            v4 -= 96;
            v20 -= 96;
          }
          while (v4 != v10);
        }
        v4 = v15 + 96;
        __p = v25;
        v32 = v15 + 96;
        v33 = &v14[96 * v13];
        if (v10)
          operator delete(v10);
      }
      else
      {
        v6 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)v4 = *v5;
        *((_OWORD *)v4 + 1) = v6;
        v7 = *(_OWORD *)(v3 + 7);
        v8 = *(_OWORD *)(v3 + 9);
        v9 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v4 + 5) = v9;
        *((_OWORD *)v4 + 2) = v7;
        *((_OWORD *)v4 + 3) = v8;
        v4 += 96;
      }
      v32 = v4;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  sub_10093644C((uint64_t)a1, a1 + 134, (double **)&__p, 0, &v29);
  v26 = *(void **)(a2 + 1632);
  if (v26)
  {
    *(_QWORD *)(a2 + 1640) = v26;
    operator delete(v26);
    *(_QWORD *)(a2 + 1632) = 0;
    *(_QWORD *)(a2 + 1640) = 0;
    *(_QWORD *)(a2 + 1648) = 0;
  }
  *(_OWORD *)(a2 + 1632) = v29;
  v27 = (char *)__p;
  *(_QWORD *)(a2 + 1648) = v30;
  if (v27)
  {
    v32 = v27;
    operator delete(v27);
  }
}

void sub_100936338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  sub_10055829C(a10);
  _Unwind_Resume(a1);
}

void sub_100936368(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      sub_100259694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 96;
    v6 = (char *)sub_10067257C(v3, a2);
    v7 = &v6[96 * v5];
    v9 = &v6[96 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v13;
        v14 = *((_OWORD *)v10 - 4);
        v15 = *((_OWORD *)v10 - 3);
        v16 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v16;
        *((_OWORD *)v12 - 4) = v14;
        *((_OWORD *)v12 - 3) = v15;
        v12 -= 96;
        v10 -= 96;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_10093644C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, double **a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  double v9;
  const char *v10;
  NSObject *v11;
  unint64_t v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  NSObject *v56;
  _BYTE *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  id v70;
  double v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  NSObject *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  NSObject *v85;
  uint64_t v86;
  double v87;
  NSObject *v88;
  char *v89;
  uint64_t v90;
  _BYTE *v91;
  char *v92;
  uint64_t v93;
  double v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  NSObject *v103;
  unint64_t v104;
  NSObject *v105;
  NSObject *v106;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  _BOOL4 v117;
  _QWORD *v118;
  int v120;
  uint64_t v121;
  const char *v122;
  int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  _QWORD v133[6];
  int v134;
  _QWORD v135[5];
  int v136;
  _QWORD v137[5];
  _QWORD v138[7];
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  _BYTE v151[156];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  _OWORD v157[6];
  char v158;
  void *__p;
  char *v160;
  char *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  __int128 v181;
  int v182;
  _BYTE v183[18];
  __int16 v184;
  _BYTE v185[14];
  __int16 v186;
  uint64_t v187;
  __int16 v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191;
  __int16 v192;
  unsigned int v193;
  __int16 v194;
  int v195;
  unsigned int v196;
  _QWORD v197[14];
  _QWORD v198[14];
  int v199;
  _BYTE v200[12];
  _OWORD v201[3];
  int v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  __int16 v207;
  uint64_t v208;
  char v209;
  __int128 v210;
  _BYTE v211[22];
  uint64_t v212;
  __int128 v213;
  _BYTE v214[32];
  _BYTE buf[64];
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;

  v8 = a5;
  v9 = *(double *)(a1 + 6456);
  sub_100939184(a5, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  v10 = "reproc";
  if (!a4)
    v10 = "live";
  v122 = v10;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F410);
  v11 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134349314;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v122;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@WsbCalc, groups, %{public}lu, %{public}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    LODWORD(v201[0]) = 134349314;
    *(_QWORD *)((char *)v201 + 4) = v108;
    WORD6(v201[0]) = 2082;
    *(_QWORD *)((char *)v201 + 14) = v122;
    v109 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WsbCalc, groups, %{public}lu, %{public}s", v201, 22);
    sub_100512490("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v109);
    if (v109 != buf)
      free(v109);
  }
  v13 = *a3;
  v14 = a3[1];
  if (*a3 == v14)
  {
    v180 = 0u;
    v181 = 0u;
    v182 = 1065353216;
  }
  else
  {
    do
    {
      if (!sub_10018FDEC(v13))
      {
        sub_10190F5EC();
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/Policies/CLWifiPositionCalculation.mm", 185, "processScanGroups");
        __break(1u);
      }
      v13 += 12;
    }
    while (v13 != v14);
    v16 = *a3;
    v15 = a3[1];
    v180 = 0u;
    v181 = 0u;
    v182 = 1065353216;
    while (v16 != v15)
    {
      *(double *)buf = *v16;
      sub_100212D50((uint64_t)&v180, buf, buf, v16);
      v16 += 12;
    }
  }
  v164 = 0;
  v163 = 0;
  v165 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v166 = _Q0;
  v167 = _Q0;
  v168 = _Q0;
  v162 = 0xFFFF;
  v169 = 0;
  v171 = 0;
  v172 = 0;
  v170 = 0xBFF0000000000000;
  v174 = 0xBFF0000000000000;
  v173 = 0;
  v175 = 0x7FFFFFFF;
  v177 = 0;
  v178 = 0;
  v176 = 0;
  v179 = 0;
  v22 = (_QWORD *)*a2;
  v115 = a2;
  v118 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 == v118)
  {
    v124 = 0;
    v121 = 0;
    v120 = 0;
  }
  else
  {
    v120 = 0;
    v132 = 0;
    v121 = 0;
    v124 = 0;
    v117 = a4 == 1;
    v116 = v8;
    do
    {
      v160 = 0;
      __p = 0;
      v161 = 0;
      LOBYTE(v157[0]) = 0;
      v158 = 0;
      sub_1015A2E04(buf, "ff:ff:ff:ff:ff:ff");
      v156 = sub_1000CC740((uint64_t)buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v23 = *v22;
      v24 = v22[1];
      if (*v22 == v24)
      {
        v25 = 0;
      }
      else
      {
        v25 = 0;
        do
        {
          if (*(_BYTE *)(v23 + 72))
          {
            v156 = *(_QWORD *)v23;
            v25 = 1;
          }
          *(_QWORD *)buf = *(_QWORD *)v23;
          v26 = sub_1000AF064(&v180, buf);
          if (v26)
          {
            v27 = *(_OWORD *)(v26 + 7);
            v28 = *(_OWORD *)(v26 + 9);
            v29 = *(_OWORD *)(v26 + 11);
            v217 = *(_OWORD *)(v26 + 13);
            v216 = v29;
            *(_OWORD *)&buf[32] = v27;
            *(_OWORD *)&buf[48] = v28;
            v30 = *(_OWORD *)(v26 + 5);
            *(_OWORD *)buf = *(_OWORD *)(v26 + 3);
            *(_OWORD *)&buf[16] = v30;
            sub_10023C76C((uint64_t)buf, *(_DWORD *)(v23 + 32), *(_DWORD *)(v23 + 40), *(double *)(v23 + 56));
            v31 = v160;
            if (v160 >= v161)
            {
              v37 = (char *)__p;
              v38 = 0xAAAAAAAAAAAAAAABLL * ((v160 - (_BYTE *)__p) >> 5);
              v39 = v38 + 1;
              if (v38 + 1 > 0x2AAAAAAAAAAAAAALL)
                sub_100259694();
              if (0x5555555555555556 * ((v161 - (_BYTE *)__p) >> 5) > v39)
                v39 = 0x5555555555555556 * ((v161 - (_BYTE *)__p) >> 5);
              if (0xAAAAAAAAAAAAAAABLL * ((v161 - (_BYTE *)__p) >> 5) >= 0x155555555555555)
                v40 = 0x2AAAAAAAAAAAAAALL;
              else
                v40 = v39;
              if (v40)
              {
                v41 = (char *)sub_10067257C((uint64_t)&v161, v40);
                v31 = v160;
                v37 = (char *)__p;
              }
              else
              {
                v41 = 0;
              }
              v42 = &v41[96 * v38];
              v43 = *(_OWORD *)&buf[16];
              *(_OWORD *)v42 = *(_OWORD *)buf;
              *((_OWORD *)v42 + 1) = v43;
              v44 = *(_OWORD *)&buf[32];
              v45 = *(_OWORD *)&buf[48];
              v46 = v217;
              *((_OWORD *)v42 + 4) = v216;
              *((_OWORD *)v42 + 5) = v46;
              *((_OWORD *)v42 + 2) = v44;
              *((_OWORD *)v42 + 3) = v45;
              if (v31 == v37)
              {
                v52 = &v41[96 * v38];
              }
              else
              {
                v47 = &v41[96 * v38];
                do
                {
                  v48 = *((_OWORD *)v31 - 5);
                  *((_OWORD *)v47 - 6) = *((_OWORD *)v31 - 6);
                  *((_OWORD *)v47 - 5) = v48;
                  v49 = *((_OWORD *)v31 - 4);
                  v50 = *((_OWORD *)v31 - 3);
                  v51 = *((_OWORD *)v31 - 1);
                  v52 = v47 - 96;
                  *((_OWORD *)v47 - 2) = *((_OWORD *)v31 - 2);
                  *((_OWORD *)v47 - 1) = v51;
                  *((_OWORD *)v47 - 4) = v49;
                  *((_OWORD *)v47 - 3) = v50;
                  v31 -= 96;
                  v47 -= 96;
                }
                while (v31 != v37);
              }
              v36 = v42 + 96;
              __p = v52;
              v160 = v42 + 96;
              v161 = &v41[96 * v40];
              if (v37)
                operator delete(v37);
            }
            else
            {
              v32 = *(_OWORD *)&buf[16];
              *(_OWORD *)v160 = *(_OWORD *)buf;
              *((_OWORD *)v31 + 1) = v32;
              v33 = *(_OWORD *)&buf[32];
              v34 = *(_OWORD *)&buf[48];
              v35 = v217;
              *((_OWORD *)v31 + 4) = v216;
              *((_OWORD *)v31 + 5) = v35;
              *((_OWORD *)v31 + 2) = v33;
              *((_OWORD *)v31 + 3) = v34;
              v36 = v31 + 96;
            }
            v160 = v36;
            if (*(_BYTE *)(v23 + 72))
            {
              v157[2] = *(_OWORD *)&buf[32];
              v157[3] = *(_OWORD *)&buf[48];
              v157[4] = v216;
              v157[5] = v217;
              v157[0] = *(_OWORD *)buf;
              v157[1] = *(_OWORD *)&buf[16];
              if (!v158)
                v158 = 1;
            }
          }
          v23 += 88;
        }
        while (v23 != v24);
      }
      v203 = 0;
      v204 = 0;
      v208 = 0;
      v209 = 0;
      memset(v201, 0, sizeof(v201));
      v202 = 0;
      v205 = 0;
      v206 = 0;
      v207 = 0;
      v210 = 0u;
      *(_OWORD *)v211 = 0u;
      *(_QWORD *)&v211[14] = 0x100000000000000;
      v212 = 0xFFFFFFFFLL;
      v213 = 0u;
      memset(v214, 0, sizeof(v214));
      v153 = 0;
      v152 = 0;
      v155 = 0;
      v154 = 0;
      sub_100184CCC(0, (uint64_t *)&__p, (uint64_t *)&__p, (uint64_t)&v162, (uint64_t)&v162, 0, 0, &v152, buf, *(double *)(*v22 + 56), (uint64_t)v201, 0);
      v53 = *v8;
      v54 = *v8 + 184 * v132;
      *(_OWORD *)(v54 + 128) = v220;
      *(_OWORD *)(v54 + 144) = v221;
      *(_OWORD *)(v54 + 160) = v222;
      *(_QWORD *)(v54 + 176) = v223;
      *(_OWORD *)(v54 + 64) = v216;
      *(_OWORD *)(v54 + 80) = v217;
      *(_OWORD *)(v54 + 96) = v218;
      *(_OWORD *)(v54 + 112) = v219;
      *(_OWORD *)v54 = *(_OWORD *)buf;
      *(_OWORD *)(v54 + 16) = *(_OWORD *)&buf[16];
      *(_OWORD *)(v54 + 32) = *(_OWORD *)&buf[32];
      *(_OWORD *)(v54 + 48) = *(_OWORD *)&buf[48];
      if (0xD37A6F4DE9BD37A7 * ((v8[1] - v53) >> 3) <= v132)
        sub_1002EAEB0();
      *(_QWORD *)(v54 + 76) = *(_QWORD *)(*v22 + 56);
      v55 = (double *)(v54 + 76);
      *(_DWORD *)(v54 + 96) = 4;
      sub_1012262A8((_QWORD *)(a1 + 4952), (double *)(v54 + 76), (uint64_t)v151);
      if ((v25 & 1) != 0)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        v56 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000C2254(&v156, (std::string *)buf);
          v57 = buf;
          if (buf[23] < 0)
            v57 = *(_BYTE **)buf;
          *(_DWORD *)v183 = 136380675;
          *(_QWORD *)&v183[4] = v57;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "@WsbLoc, associated AP, %{private}s", v183, 0xCu);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          v90 = qword_1022A0058;
          sub_1000C2254(&v156, (std::string *)v183);
          v91 = v183;
          if (v185[3] < 0)
            v91 = *(_BYTE **)v183;
          v199 = 136380675;
          *(_QWORD *)v200 = v91;
          LODWORD(v114) = 12;
          v92 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v90, 0, "@WsbLoc, associated AP, %{private}s", &v199, v114);
          if ((v185[3] & 0x80000000) != 0)
            operator delete(*(void **)v183);
          sub_100512490("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v92);
          if (v92 != buf)
            free(v92);
        }
        sub_10022142C(&v199);
        sub_1015A2E04(v183, "WSB");
        sub_100EF1704(buf, &v156, v157, &v199, a1 + 6544, v183);
        if ((v185[3] & 0x80000000) != 0)
          operator delete(*(void **)v183);
        v58 = *(std::__shared_weak_count **)&v200[4];
        if (*(_QWORD *)&v200[4])
        {
          v59 = (unint64_t *)(*(_QWORD *)&v200[4] + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        sub_10003FAE0((uint64_t)buf, (__int128 *)v54);
        sub_100183120((uint64_t)buf, (uint64_t)v151);
        sub_100183138((uint64_t)buf);
        LODWORD(v121) = v121 + 1;
        sub_100183070((uint64_t)buf);
      }
      else
      {
        ++HIDWORD(v121);
      }
      v61 = v53 + 184 * v132;
      v63 = *(unsigned __int8 *)(v61 + 180);
      v62 = (unsigned __int8 *)(v61 + 180);
      v123 = v63;
      *(double *)(v54 + 88) = *(double *)(a1 + 6232) * 1.5;
      v64 = (unint64_t)(v153 - v152) >> 3;
      v65 = (-1431655765 * v64);
      v66 = v155;
      v131 = v65 - v155;
      v130 = sub_100182310(v65 - v155, -1431655765 * (int)v64, 100);
      v129 = sub_100182310(v66, v65, 100);
      v67 = -1171354717 * ((v22[1] - *v22) >> 3);
      v68 = (unint64_t)(v160 - (_BYTE *)__p) >> 5;
      v69 = (-1431655765 * v68);
      v128 = sub_100182310(-1431655765 * (int)v68, -1171354717 * ((v22[1] - *v22) >> 3), 100);
      v127 = sub_100182310((int)v67 - (int)v69, v67, 100);
      v126 = sub_100182310(v65, v67, 100);
      v125 = sub_100182310(v65, v69, 100);
      v70 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      v197[0] = CFSTR("aps");
      v198[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v65);
      v197[1] = CFSTR("alsAps");
      v198[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v131);
      v197[2] = CFSTR("tileAps");
      v198[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v66);
      v197[3] = CFSTR("percentAlsAps");
      v198[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v130);
      v197[4] = CFSTR("percentTileAps");
      v198[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v129);
      v197[5] = CFSTR("pass");
      v198[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v122);
      v198[6] = &__kCFBooleanFalse;
      v197[6] = CFSTR("isWifiFixWithAssociatedAp");
      v197[7] = CFSTR("apsInScanGroup");
      v198[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v67);
      v197[8] = CFSTR("apsWithLocationInScanGroup");
      v198[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v69);
      v197[9] = CFSTR("apsWithoutLocationInScanGroup");
      v198[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v67 - v69));
      v197[10] = CFSTR("percentApsWithLocationInScanGroup");
      v198[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v128);
      v197[11] = CFSTR("percentApsWithoutLocationInScanGroup");
      v198[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v127);
      v197[12] = CFSTR("percentApsInScanGroupUsedInLocation");
      v198[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v126);
      v197[13] = CFSTR("percentApsWithLocationUsedInLocation");
      v198[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v125);
      objc_msgSend(v70, "setDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v198, v197, 14));
      if (sub_100182290(v54))
      {
        v71 = *(double *)(v54 + 20);
        if (v71 < 20.0)
          v71 = 20.0;
        *(double *)(v54 + 20) = v71;
        *(_DWORD *)(v54 + 128) = sub_100CDC7C0(*(_DWORD *)(v54 + 84));
        *(_OWORD *)(v54 + 100) = *(_OWORD *)(v54 + 4);
        *(_QWORD *)(v54 + 116) = *(_QWORD *)(v54 + 60);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        v72 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v73 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22[1] - *v22) >> 3);
          v74 = *(_QWORD *)(v54 + 76);
          v75 = *(_QWORD *)(v54 + 4);
          v76 = *(_QWORD *)(v54 + 12);
          v77 = *(_QWORD *)(v54 + 20);
          *(_DWORD *)buf = 67242241;
          *(_DWORD *)&buf[4] = v65;
          *(_WORD *)&buf[8] = 2050;
          *(_QWORD *)&buf[10] = v73;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v117;
          *(_WORD *)&buf[24] = 2050;
          *(_QWORD *)&buf[26] = v74;
          *(_WORD *)&buf[34] = 2049;
          *(_QWORD *)&buf[36] = v75;
          *(_WORD *)&buf[44] = 2049;
          *(_QWORD *)&buf[46] = v76;
          *(_WORD *)&buf[54] = 2050;
          *(_QWORD *)&buf[56] = v77;
          LOWORD(v216) = 1026;
          *(_DWORD *)((char *)&v216 + 2) = v131;
          WORD3(v216) = 1026;
          DWORD2(v216) = v66;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "@WsbLoc, fix, aps, %{public}d, %{public}lu, reproc, %{public}d, time, %{public}.1f, ll, %{private}.7f, %{private}.7f, hAcc, %{public}.1f, alsAps, %{public}u, tileAps, %{public}u", buf, 0x4Cu);
        }
        v8 = v116;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          v96 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22[1] - *v22) >> 3);
          v97 = *(_QWORD *)(v54 + 76);
          v98 = *(_QWORD *)(v54 + 4);
          v99 = *(_QWORD *)(v54 + 12);
          v100 = *(_QWORD *)(v54 + 20);
          *(_DWORD *)v183 = 67242241;
          *(_DWORD *)&v183[4] = v65;
          *(_WORD *)&v183[8] = 2050;
          *(_QWORD *)&v183[10] = v96;
          v184 = 1026;
          *(_DWORD *)v185 = v117;
          *(_WORD *)&v185[4] = 2050;
          *(_QWORD *)&v185[6] = v97;
          v186 = 2049;
          v187 = v98;
          v188 = 2049;
          v189 = v99;
          v190 = 2050;
          v191 = v100;
          v192 = 1026;
          v193 = v131;
          v194 = 1026;
          v195 = v66;
          LODWORD(v114) = 76;
          v101 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbLoc, fix, aps, %{public}d, %{public}lu, reproc, %{public}d, time, %{public}.1f, ll, %{private}.7f, %{private}.7f, hAcc, %{public}.1f, alsAps, %{public}u, tileAps, %{public}u", v183, v114);
          sub_100512490("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v101);
          if (v101 != buf)
            free(v101);
          v8 = v116;
        }
        v78 = *v55;
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        v79 = qword_1022A0058;
        v80 = (v9 - v78) / 60.0;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240706;
          *(_DWORD *)&buf[4] = v65;
          *(_WORD *)&buf[8] = 2050;
          *(double *)&buf[10] = v80;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v122;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "WsbMetric, fix, aps, %{public}d, age, %{public}0.1f, %{public}s", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          *(_DWORD *)v183 = 67240706;
          *(_DWORD *)&v183[4] = v65;
          *(_WORD *)&v183[8] = 2050;
          *(double *)&v183[10] = v80;
          v184 = 2082;
          *(_QWORD *)v185 = v122;
          LODWORD(v114) = 28;
          v102 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, fix, aps, %{public}d, age, %{public}0.1f, %{public}s", v183, v114);
          sub_100512490("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v102);
          if (v102 != buf)
            free(v102);
        }
        objc_msgSend(v70, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("fix"));
        objc_msgSend(v70, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v80), CFSTR("age"));
        objc_msgSend(v70, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *v62), CFSTR("isWifiFixWithAssociatedAp"));
        if (*v62)
        {
          objc_msgSend(v70, "setObject:forKeyedSubscript:", &off_10221B7E0, CFSTR("aps"));
          objc_msgSend(v70, "setObject:forKeyedSubscript:", &off_10221B7F8, CFSTR("alsAps"));
          objc_msgSend(v70, "setObject:forKeyedSubscript:", &off_10221B7F8, CFSTR("tileAps"));
          objc_msgSend(v70, "setObject:forKeyedSubscript:", &off_10221B7F8, CFSTR("percentAlsAps"));
          objc_msgSend(v70, "setObject:forKeyedSubscript:", &off_10221B7F8, CFSTR("percentTileAps"));
          objc_msgSend(v70, "setObject:forKeyedSubscript:", &off_10221B7F8, CFSTR("percentApsInScanGroupUsedInLocation"));
          objc_msgSend(v70, "setObject:forKeyedSubscript:", &off_10221B7F8, CFSTR("percentApsWithLocationUsedInLocation"));
        }
        sub_1011B975C((uint64_t)buf, (uint64_t)v151);
        if (sub_1011B9790((uint64_t)buf, v54))
        {
          sub_1011B9808((uint64_t)buf, v54);
          v82 = *(double *)(v54 + 20);
          if (v82 > 0.0)
            v83 = v81 / v82;
          else
            v83 = -1.0;
          objc_msgSend(v70, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("horizontalError"));
          objc_msgSend(v70, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v83), CFSTR("horizontalErrorRatio"));
          *(_QWORD *)&v84 = sub_1011B981C((uint64_t)buf, v183).n128_u64[0];
          objc_msgSend(v70, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v196, v84), CFSTR("referenceLocationType"));
        }
        v138[0] = _NSConcreteStackBlock;
        v138[1] = 3221225472;
        v138[2] = sub_100938570;
        v138[3] = &unk_10215F348;
        v139 = v65;
        v140 = v131;
        v141 = v66;
        v142 = v130;
        *(double *)&v138[4] = v80;
        v138[5] = v122;
        v138[6] = v54;
        v143 = v129;
        v144 = v67;
        v145 = v69;
        v146 = v67 - v69;
        v147 = v128;
        v148 = v127;
        v149 = v126;
        v150 = v125;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.fix"), v138);
        ++v120;
      }
      else
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        v85 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
        {
          v86 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22[1] - *v22) >> 3);
          v87 = *v55;
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v86;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v117;
          *(_WORD *)&buf[18] = 2050;
          *(double *)&buf[20] = v87;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "@WsbLoc, none, aps, %{public}lu, reproc, %{public}d, time, %{public}.3f", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          v93 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22[1] - *v22) >> 3);
          v94 = *v55;
          *(_DWORD *)v183 = 134349568;
          *(_QWORD *)&v183[4] = v93;
          *(_WORD *)&v183[12] = 1026;
          *(_DWORD *)&v183[14] = v117;
          v184 = 2050;
          *(double *)v185 = v94;
          LODWORD(v114) = 28;
          v95 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WsbLoc, none, aps, %{public}lu, reproc, %{public}d, time, %{public}.3f", v183, v114);
          sub_100512490("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v95);
          if (v95 != buf)
            free(v95);
        }
        objc_msgSend(v70, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("fix"));
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F410);
      v88 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138477827;
        *(_QWORD *)&buf[4] = v70;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "@WsbMetric, result, %{private}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        *(_DWORD *)v183 = 138477827;
        *(_QWORD *)&v183[4] = v70;
        LODWORD(v114) = 12;
        v89 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbMetric, result, %{private}@", v183, v114);
        sub_100512490("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v89);
        if (v89 != buf)
          free(v89);
      }
      v137[0] = _NSConcreteStackBlock;
      v137[1] = 3221225472;
      v137[2] = sub_100938790;
      v137[3] = &unk_10215F370;
      v137[4] = v70;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.result"), v137);
      *(_QWORD *)buf = &v152;
      sub_100259608((void ***)buf);
      *(_QWORD *)buf = &v214[8];
      sub_100259608((void ***)buf);
      if ((_QWORD)v213)
      {
        *((_QWORD *)&v213 + 1) = v213;
        operator delete((void *)v213);
      }
      if (__p)
      {
        v160 = (char *)__p;
        operator delete(__p);
      }
      v124 += v123;
      ++v132;
      v22 += 3;
    }
    while (v22 != v118);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F410);
  v103 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115[1] - *v115) >> 3);
    *(_DWORD *)buf = 67240706;
    *(_DWORD *)&buf[4] = v120;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v104;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v122;
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "WsbCalc, computed, %{public}d, of, %{public}lu, %{public}s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115[1] - *v115) >> 3);
    LODWORD(v201[0]) = 67240706;
    DWORD1(v201[0]) = v120;
    WORD4(v201[0]) = 2050;
    *(_QWORD *)((char *)v201 + 10) = v110;
    WORD1(v201[1]) = 2082;
    *(_QWORD *)((char *)&v201[1] + 4) = v122;
    LODWORD(v114) = 28;
    v111 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbCalc, computed, %{public}d, of, %{public}lu, %{public}s", v201, v114);
    sub_100512490("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v111);
    if (v111 != buf)
      free(v111);
  }
  if (v120)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    v105 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v122;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v120;
      _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, %{public}s, %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F410);
      LODWORD(v201[0]) = 136446466;
      *(_QWORD *)((char *)v201 + 4) = v122;
      WORD6(v201[0]) = 1026;
      *(_DWORD *)((char *)v201 + 14) = v120;
      LODWORD(v114) = 18;
      v113 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, groupresult, %{public}s, %{public}d", v201, v114);
      sub_100512490("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v113);
      if (v113 != buf)
        free(v113);
    }
    v135[0] = _NSConcreteStackBlock;
    v135[1] = 3221225472;
    v135[2] = sub_1009387E0;
    v135[3] = &unk_10215F390;
    v135[4] = v122;
    v136 = v120;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v135);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F410);
  v106 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240962;
    *(_DWORD *)&buf[4] = v121;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = HIDWORD(v121);
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v124;
    *(_WORD *)&buf[20] = 2082;
    *(_QWORD *)&buf[22] = v122;
    _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "@WsbMetric, wsbWithAssociatedAp, numAssociated, %{public}d, numUnassociated, %{public}d, numWifiFixesWithAssociatedAp, %{public}d, passType, %{public}s", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    LODWORD(v201[0]) = 67240962;
    DWORD1(v201[0]) = v121;
    WORD4(v201[0]) = 1026;
    *(_DWORD *)((char *)v201 + 10) = HIDWORD(v121);
    HIWORD(v201[0]) = 1026;
    LODWORD(v201[1]) = v124;
    WORD2(v201[1]) = 2082;
    *(_QWORD *)((char *)&v201[1] + 6) = v122;
    LODWORD(v114) = 30;
    v112 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbMetric, wsbWithAssociatedAp, numAssociated, %{public}d, numUnassociated, %{public}d, numWifiFixesWithAssociatedAp, %{public}d, passType, %{public}s", v201, v114);
    sub_100512490("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v112);
    if (v112 != buf)
      free(v112);
  }
  v133[0] = _NSConcreteStackBlock;
  v133[1] = 3221225472;
  v133[2] = sub_100938884;
  v133[3] = &unk_10215F3B0;
  v133[5] = v121;
  v134 = v124;
  v133[4] = v122;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsbWithAssociatedAp"), v133);
  return sub_100067AC4((uint64_t)&v180);
}

void sub_1009381E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  sub_100067AC4((uint64_t)&STACK[0x3F0]);
  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_100938338(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  char *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  void *v26;
  char *v27;
  __int128 v29;
  uint64_t v30;
  void *__p;
  char *v32;
  char *v33;

  sub_100130994((_DWORD *)a2, (uint64_t)a1);
  __p = 0;
  v32 = 0;
  v33 = 0;
  sub_100936368(&__p, a1[151]);
  v3 = (uint64_t *)a1[150];
  if (v3)
  {
    v4 = v32;
    do
    {
      v5 = v3 + 3;
      if (v4 >= v33)
      {
        v10 = (char *)__p;
        v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)__p) >> 5);
        v12 = v11 + 1;
        if (v11 + 1 > 0x2AAAAAAAAAAAAAALL)
          sub_100259694();
        if (0x5555555555555556 * ((v33 - (_BYTE *)__p) >> 5) > v12)
          v12 = 0x5555555555555556 * ((v33 - (_BYTE *)__p) >> 5);
        if (0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)__p) >> 5) >= 0x155555555555555)
          v13 = 0x2AAAAAAAAAAAAAALL;
        else
          v13 = v12;
        if (v13)
        {
          v14 = (char *)sub_10067257C((uint64_t)&v33, v13);
          v10 = (char *)__p;
          v4 = v32;
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[96 * v11];
        v16 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)v15 = *v5;
        *((_OWORD *)v15 + 1) = v16;
        v17 = *(_OWORD *)(v3 + 7);
        v18 = *(_OWORD *)(v3 + 9);
        v19 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v15 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v15 + 5) = v19;
        *((_OWORD *)v15 + 2) = v17;
        *((_OWORD *)v15 + 3) = v18;
        if (v4 == v10)
        {
          v25 = &v14[96 * v11];
        }
        else
        {
          v20 = &v14[96 * v11];
          do
          {
            v21 = *((_OWORD *)v4 - 5);
            *((_OWORD *)v20 - 6) = *((_OWORD *)v4 - 6);
            *((_OWORD *)v20 - 5) = v21;
            v22 = *((_OWORD *)v4 - 4);
            v23 = *((_OWORD *)v4 - 3);
            v24 = *((_OWORD *)v4 - 1);
            v25 = v20 - 96;
            *((_OWORD *)v20 - 2) = *((_OWORD *)v4 - 2);
            *((_OWORD *)v20 - 1) = v24;
            *((_OWORD *)v20 - 4) = v22;
            *((_OWORD *)v20 - 3) = v23;
            v4 -= 96;
            v20 -= 96;
          }
          while (v4 != v10);
        }
        v4 = v15 + 96;
        __p = v25;
        v32 = v15 + 96;
        v33 = &v14[96 * v13];
        if (v10)
          operator delete(v10);
      }
      else
      {
        v6 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)v4 = *v5;
        *((_OWORD *)v4 + 1) = v6;
        v7 = *(_OWORD *)(v3 + 7);
        v8 = *(_OWORD *)(v3 + 9);
        v9 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v4 + 5) = v9;
        *((_OWORD *)v4 + 2) = v7;
        *((_OWORD *)v4 + 3) = v8;
        v4 += 96;
      }
      v32 = v4;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  sub_10093644C((uint64_t)a1, a1 + 794, (double **)&__p, 1, &v29);
  v26 = *(void **)(a2 + 1632);
  if (v26)
  {
    *(_QWORD *)(a2 + 1640) = v26;
    operator delete(v26);
    *(_QWORD *)(a2 + 1632) = 0;
    *(_QWORD *)(a2 + 1640) = 0;
    *(_QWORD *)(a2 + 1648) = 0;
  }
  *(_OWORD *)(a2 + 1632) = v29;
  v27 = (char *)__p;
  *(_QWORD *)(a2 + 1648) = v30;
  if (v27)
  {
    v32 = v27;
    operator delete(v27);
  }
}

void sub_100938540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  sub_10055829C(a10);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100938570(uint64_t a1)
{
  _QWORD v3[15];
  _QWORD v4[15];

  v3[0] = CFSTR("aps");
  v4[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56));
  v3[1] = CFSTR("alsAps");
  v4[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 60));
  v3[2] = CFSTR("tileAps");
  v4[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 64));
  v3[3] = CFSTR("percentAlsAps");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68));
  v3[4] = CFSTR("percentTileAps");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72));
  v3[5] = CFSTR("age");
  v4[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  v3[6] = CFSTR("pass");
  v4[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 40));
  v3[7] = CFSTR("isWifiFixWithAssociatedAp");
  v4[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 180));
  v3[8] = CFSTR("apsInScanGroup");
  v4[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 76));
  v3[9] = CFSTR("apsWithLocationInScanGroup");
  v4[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80));
  v3[10] = CFSTR("apsWithoutLocationInScanGroup");
  v4[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 84));
  v3[11] = CFSTR("percentApsWithLocationInScanGroup");
  v4[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 88));
  v3[12] = CFSTR("percentApsWithoutLocationInScanGroup");
  v4[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 92));
  v3[13] = CFSTR("percentApsInScanGroupUsedInLocation");
  v4[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 96));
  v3[14] = CFSTR("percentApsWithLocationUsedInLocation");
  v4[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 100));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 15);
}

uint64_t sub_100938790(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_100938798(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 184);
  sub_100259608(&v4);
  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  return a1;
}

NSDictionary *sub_1009387E0(uint64_t a1)
{
  NSString *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("groupResult");
  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v4[1] = CFSTR("numInGroup");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

NSDictionary *sub_100938884(uint64_t a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("numAssociated");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v3[1] = CFSTR("numUnassociated");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v3[2] = CFSTR("numWifiFixesWithAssociatedAp");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v3[3] = CFSTR("wsbPassType");
  v4[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

NSDictionary *sub_100938964(uint64_t a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("fixaps");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 188));
  v3[1] = CFSTR("trigger");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 216));
  v3[2] = CFSTR("outliers");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 224));
  v3[3] = CFSTR("pct");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 228));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

NSDictionary *sub_100938A44(uint64_t a1)
{
  NSString *v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("wifi");
  v3[0] = CFSTR("provider");
  v3[1] = CFSTR("flow");
  v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v3[2] = CFSTR("island");
  v4[1] = v1;
  v4[2] = CFSTR("null");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_100938AEC(uint64_t a1)
{
  NSString *v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("wifi");
  v3[0] = CFSTR("provider");
  v3[1] = CFSTR("flow");
  v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v3[2] = CFSTR("island");
  v4[1] = v1;
  v4[2] = CFSTR("sentinel");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_100938B94(uint64_t a1)
{
  _QWORD v3[28];
  _QWORD v4[28];

  v3[0] = CFSTR("distance");
  v4[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  v3[1] = CFSTR("agebin");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 248));
  v3[2] = CFSTR("motion");
  v4[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 40));
  v3[3] = CFSTR("uncertainty");
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v4[4] = CFSTR("valid");
  v3[4] = CFSTR("truth");
  v3[5] = CFSTR("altitude");
  v4[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 56) + 28));
  v3[6] = CFSTR("verticalAccuracy");
  v4[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 56) + 36));
  v3[7] = CFSTR("horizontalAccuracy");
  v4[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 56) + 20));
  v3[8] = CFSTR("referenceLocationType");
  v4[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 348));
  v3[9] = CFSTR("numberOfApsUsedInHorizontalCalculation");
  v4[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 408));
  v3[10] = CFSTR("numberOfApsUsedInVerticalCalculation");
  v4[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 412));
  v3[11] = CFSTR("isWifiFixWithAssociatedAp");
  v4[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 244));
  v3[12] = CFSTR("visibilityIntersectionOverrideState");
  v4[12] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 246));
  v3[13] = CFSTR("numberOfAlsApsUsedInHorizontalCalculation");
  v4[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 416));
  v3[14] = CFSTR("numberOfTileApsUsedInHorizontalCalculation");
  v4[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 420));
  v3[15] = CFSTR("percentAlsAps");
  v4[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 424));
  v3[16] = CFSTR("percentTileAps");
  v4[16] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 428));
  v3[17] = CFSTR("numberOfApsWithValidCentroids");
  v4[17] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 432));
  v3[18] = CFSTR("numberOfApsWithNoCentroidInformation");
  v4[18] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 436));
  v3[19] = CFSTR("numberOfApsInDatabasesButNoValidCentroid");
  v4[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 440));
  v3[20] = CFSTR("numberOfApsWithoutValidCentroids");
  v4[20] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 444));
  v3[21] = CFSTR("numberOfApsTotal");
  v4[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 448));
  v3[22] = CFSTR("percentApsWithValidCentroids");
  v4[22] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 452));
  v3[23] = CFSTR("percentApsWithoutValidCentroids");
  v4[23] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 456));
  v3[24] = CFSTR("percentApsWithNoCentroidInformation");
  v4[24] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 460));
  v3[25] = CFSTR("percentApsInDatabasesButNoValidCentroid");
  v4[25] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 464));
  v3[26] = CFSTR("percentApsUsedInHorizontalCalculation");
  v4[26] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 468));
  v3[27] = CFSTR("percentApsWithValidCentroidsUsedInHorizontalCalculation");
  v4[27] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 472));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 28);
}

NSDictionary *sub_100938F1C(uint64_t a1)
{
  const __CFString *v2;
  NSString *v3;

  v2 = CFSTR("truth");
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

std::string *sub_100938F9C(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::assign(a1, a2);
  }
  else
  {
    sub_1015A2E04(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

uint64_t sub_100938FE0(uint64_t a1)
{
  sub_100261F44(a1 + 992);
  sub_100008848(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_100261F44(a1 + 16);
  return sub_100261F44(a1);
}

uint64_t sub_100939020(uint64_t a1)
{
  if (*(char *)(a1 + 6567) < 0)
    operator delete(*(void **)(a1 + 6544));
  sub_100126B34(a1 + 3016);
  sub_100126A1C(a1 + 808);
  sub_100126D5C(a1);
  return a1;
}

void sub_10093906C(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100939098(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

NSDictionary *sub_1009390C4(unsigned int *a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("numScannedAps");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[8]);
  v3[1] = CFSTR("numScannedApsWithKnownLocations");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[9]);
  v3[2] = CFSTR("percentageOfScannedApsWithKnownLocationsToAllScannedAps");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[10]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

_QWORD *sub_100939184(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10055AD54(a1, a2);
    v4 = a1[1];
    v5 = 184 * a2;
    v6 = v4 + 184 * a2;
    do
    {
      sub_10012A340(v4);
      v4 = v7 + 184;
      v5 -= 184;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_1009391E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100939204()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1009392A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1009392B8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100939344(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_10093935C()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t *v6;
  NSObject *v7;
  __int128 *v8;
  int v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  const char *v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _BYTE v23[12];
  char v24;
  int v25;
  _BYTE *v26;
  __int128 buf;
  char v28;

  HIBYTE(v22) = 0;
  sub_1001E4804(&buf);
  v0 = sub_1001E4874(buf, "wifiTilesEnabled", (BOOL *)&v22 + 7);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F450);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      if (HIBYTE(v22))
        v5 = "true";
      else
        v5 = "false";
      LODWORD(buf) = 136380675;
      *(_QWORD *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWifiTilesManagerSettings, #Warning defaults write wifiTilesEnabled to %{private}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F450);
      if (HIBYTE(v22))
        v15 = "true";
      else
        v15 = "false";
      *(_DWORD *)v23 = 136380675;
      *(_QWORD *)&v23[4] = v15;
      LODWORD(v22) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CLWifiTilesManagerSettings, #Warning defaults write wifiTilesEnabled to %{private}s", v23, v22);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiTilesManagerSettings::isEnabledForDevice()", "%s\n", v16);
      if (v17 != (char *)&buf)
        free(v17);
    }
    v6 = (uint64_t *)((char *)&v22 + 7);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F450);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_100197040();
      sub_100186708(&buf);
      v8 = v28 >= 0 ? &buf : (__int128 *)buf;
      *(_DWORD *)v23 = 136446210;
      *(_QWORD *)&v23[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLWifiTilesManagerSettings, system version: %{public}s", v23, 0xCu);
      if (v28 < 0)
        operator delete((void *)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F450);
      v18 = qword_1022A0048;
      sub_100197040();
      sub_100186708(v23);
      if (v24 >= 0)
        v19 = v23;
      else
        v19 = *(_BYTE **)v23;
      v25 = 136446210;
      v26 = v19;
      LODWORD(v22) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v18, 0, "CLWifiTilesManagerSettings, system version: %{public}s", &v25, v22);
      v21 = v20;
      if (v24 < 0)
        operator delete(*(void **)v23);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiTilesManagerSettings::isEnabledForDevice()", "%s\n", v21);
      if (v21 != (char *)&buf)
        free(v21);
    }
    sub_100197040();
    if (sub_1000C4240())
    {
      v6 = sub_10132F04C() + 2;
    }
    else
    {
      sub_100197040();
      if (sub_100195F08())
      {
        v6 = (uint64_t *)((char *)sub_10132F04C() + 19);
      }
      else
      {
        sub_100197040();
        v10 = sub_100081BD0();
        sub_100197040();
        if (v10)
        {
          v11 = sub_1001CE630();
          v12 = sub_10132F04C();
          if (v11)
            v6 = (uint64_t *)((char *)v12 + 17);
          else
            v6 = (uint64_t *)((char *)v12 + 18);
        }
        else if (sub_10075C0C4())
        {
          v6 = (uint64_t *)((char *)sub_10132F04C() + 21);
        }
        else
        {
          sub_100197040();
          v13 = sub_10075C1D4();
          v14 = sub_10132F04C();
          if (v13)
            v6 = (uint64_t *)((char *)v14 + 22);
          else
            v6 = v14 + 3;
        }
      }
    }
  }
  return *(unsigned __int8 *)v6;
}

void sub_1009397DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009397F8(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100939824()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1009398C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1009398D8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100939964(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_10093997C(uint64_t a1@<X8>)
{
  _BYTE *v2;
  int v3;
  void *__p[2];
  uint64_t v5;

  sub_1015A2E04(__p, "");
  *(_QWORD *)a1 = 0x200000000;
  *(_WORD *)(a1 + 8) = 0;
  v2 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_100115CE4(v2, __p[0], (unint64_t)__p[1]);
    v3 = SHIBYTE(v5);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = 0;
  }
}

void sub_100939A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100939A1C(uint64_t a1)
{
  _BYTE v3[16];
  void *__p;
  char v5;

  sub_10093997C((uint64_t)v3);
  sub_100939A88(a1, (uint64_t)v3);
  if (v5 < 0)
    operator delete(__p);
  return a1;
}

void sub_100939A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100939A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v4 = sub_100631F84(a1, a2);
  sub_100F5FEE8(v4 + 136, a2);
  sub_1006506CC(a1 + 272);
  if (sub_1000CC4F4(a1))
  {
    if (sub_100634364(a1, "FenceHandOffDeviceId", (const char **)&off_10215F760, (const std::string::value_type **)&off_1022A57A8, 0))sub_100939D20(a1);
    sub_100634364(a1, "GeoFence", (const char **)&off_10215F470, (const std::string::value_type **)off_1022A57B8, 0);
    if (sub_100635B3C(a1, "Fences"))
      sub_10093A060(a1);
    if (sub_10093A470())
      sub_10093A570(a1);
    sub_10093AE44(a1);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Fence: No access to DB", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: No access to DB", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "CLFenceDatabase::CLFenceDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *, BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return a1;
}

void sub_100939CE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10064BB88(v3);
  sub_10064BB88(v2);
  sub_1006322C0(v1);
  _Unwind_Resume(a1);
}

void sub_100939D20(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  void *__p[2];
  char v11;

  sub_100263E50((uint64_t)&v7);
  v2 = sub_100263F7C(&v8, (uint64_t)"INSERT INTO ", 12);
  v3 = sub_100263F7C(v2, (uint64_t)"FenceHandOffDeviceId", 20);
  v4 = sub_100263F7C(v3, (uint64_t)"(", 1);
  v5 = sub_100263F7C(v4, (uint64_t)"DeviceIdIndex", 13);
  sub_100263F7C(v5, (uint64_t)") VALUES (?)", 12);
  std::stringbuf::str(__p, v9);
  if (v11 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000CDA68(a1, v6);
}

void sub_10093A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_10093A060(uint64_t a1)
{
  char *v2;
  void *__p[2];
  char v4;
  _BYTE v5[8];
  uint64_t v6;

  sub_10001E638(a1);
  sub_100633908(a1, 0);
  sub_100263E50((uint64_t)&v6);
  sub_1009467D0(a1, (uint64_t)v5);
  sub_100946B48((uint64_t)v5, __p);
  if (v4 >= 0)
    v2 = (char *)__p;
  else
    v2 = (char *)__p[0];
  sub_1000CDA68(a1, v2);
}

void sub_10093A3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  if (*(char *)(v20 - 57) < 0)
    operator delete(*(void **)(v20 - 80));
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a15 < 0)
    operator delete(__p);
  sub_100090AE4((uint64_t)&a16, a17);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL sub_10093A470()
{
  _BOOL8 v0;
  void *__p[2];
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  sub_1015A2E04(__p, "");
  v4 = 0x200000000;
  v5 = 0;
  if (SHIBYTE(v3) < 0)
  {
    sub_100115CE4(&v6, __p[0], (unint64_t)__p[1]);
    v8 = 0;
    if (SHIBYTE(v3) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(_OWORD *)__p;
    v7 = v3;
    v8 = 0;
  }
  sub_100631F84(__p, &v4);
  v0 = sub_100635B3C((uint64_t)__p, "GeoFences");
  sub_1006322C0(__p);
  if (SHIBYTE(v7) < 0)
    operator delete((void *)v6);
  return v0;
}

void sub_10093A530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10093A570(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  int *v4;
  char v5[16];
  int buf;
  const char *buf_4;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    buf = 136315138;
    buf_4 = "performMigrationToSplitDB";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    *(_DWORD *)v5 = 136315138;
    *(_QWORD *)&v5[4] = "performMigrationToSplitDB";
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s", v5);
    v4 = (int *)v3;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceDatabase::performMigrationToSplitDB()", "%s\n", v3);
    if (v4 != &buf)
      free(v4);
  }
  sub_100948674(a1);
}

void sub_10093ADD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char *a62)
{
  uint64_t v62;

  a62 = &a22;
  sub_10091BBB0((void ***)&a62);
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (a17 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_10093AE44(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[8];

  sub_100263E50((uint64_t)&v9);
  v2 = sub_100263F7C(&v10, (uint64_t)"DELETE FROM ", 12);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" WHERE length(", 14);
  v5 = sub_100263F7C(v4, (uint64_t)"Name", 4);
  sub_100263F7C(v5, (uint64_t)") > 512", 7);
  std::stringbuf::str(__p, v11);
  if (v8 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000CDA68(a1, v6);
}

void sub_10093AFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_10093B004(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];
  uint8_t buf[8];
  char v14;

  sub_100263E50((uint64_t)&v10);
  v2 = sub_100263F7C(&v11, (uint64_t)"DELETE FROM ", 12);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" WHERE ", 7);
  v5 = sub_100263F7C(v4, (uint64_t)"BundleId", 8);
  v6 = sub_100263F7C(v5, (uint64_t)"=?", 2);
  v7 = sub_100263F7C(v6, (uint64_t)" AND ", 5);
  v8 = sub_100263F7C(v7, (uint64_t)"DeviceIdIndex", 13);
  sub_100263F7C(v8, (uint64_t)"=?", 2);
  +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", CFSTR("/System/Library/LocationBundles/LocationFenceSync.bundle"), 112);
  std::stringbuf::str(buf, v12);
  if (v14 >= 0)
    v9 = (char *)buf;
  else
    v9 = *(char **)buf;
  sub_1000CDA68(a1, v9);
}

void sub_10093B4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 89) < 0)
    operator delete(*(void **)(v2 - 112));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10093B548(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *p_p;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  const char *v48;
  void **v49;
  uint64_t v50;
  _DWORD v51[3];
  __int16 v52;
  uint64_t v53;
  _BYTE buf[12];
  __int16 v55;
  uint64_t v56;
  char v57;
  _QWORD v58[8];
  void *__p;
  __int16 v60;
  const char *v61;
  __int16 v62;
  id v63;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    sub_100C3B9BC(a2, &__p);
    v7 = SBYTE3(v63) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v7;
    v55 = 1026;
    LODWORD(v56) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: addFence, %{private}s, key, %{public}d", buf, 0x12u);
    if (SBYTE3(v63) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    v44 = qword_1022A0068;
    sub_100C3B9BC(a2, buf);
    if (v57 >= 0)
      v45 = buf;
    else
      v45 = *(_BYTE **)buf;
    v51[0] = 136380931;
    *(_QWORD *)&v51[1] = v45;
    v52 = 1026;
    LODWORD(v53) = a3;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v44, 2, "Fence: addFence, %{private}s, key, %{public}d", v51, 18);
    v47 = v46;
    if (v57 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &, int, int &)", "%s\n", v47);
    if (v47 != (char *)&__p)
      free(v47);
  }
  if (a3 == -1)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Fence: attempting to add fence to db without a key", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10215F740);
      *(_WORD *)buf = 0;
      LODWORD(v50) = 2;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: attempting to add fence to db without a key", buf, v50);
      v49 = (void **)v48;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &, int, int &)", "%s\n", v48);
      if (v49 != &__p)
        free(v49);
    }
  }
  else
  {
    v9 = *(void **)(a2 + 216);
    if (!v9 || sub_10093C240(a1, *(void **)(a2 + 216)) != -1)
    {
      sub_100263E50((uint64_t)buf);
      v14 = sub_100263F7C((uint64_t *)((char *)&v56 + 2), (uint64_t)"INSERT INTO ", 12);
      v15 = sub_100263F7C(v14, (uint64_t)"GeoFence", 8);
      v16 = sub_100263F7C(v15, (uint64_t)" (", 2);
      v17 = sub_100263F7C(v16, (uint64_t)"BundleId", 8);
      v18 = sub_100263F7C(v17, (uint64_t)", ", 2);
      v19 = sub_100263F7C(v18, (uint64_t)"Name", 4);
      v20 = sub_100263F7C(v19, (uint64_t)", ", 2);
      v21 = sub_100263F7C(v20, (uint64_t)"Timestamp", 9);
      v22 = sub_100263F7C(v21, (uint64_t)", ", 2);
      v23 = sub_100263F7C(v22, (uint64_t)"Distance", 8);
      v24 = sub_100263F7C(v23, (uint64_t)", ", 2);
      v25 = sub_100263F7C(v24, (uint64_t)"DesiredAccuracy", 15);
      v26 = sub_100263F7C(v25, (uint64_t)", ", 2);
      v27 = sub_100263F7C(v26, (uint64_t)"SetupComplete", 13);
      v28 = sub_100263F7C(v27, (uint64_t)", ", 2);
      v29 = sub_100263F7C(v28, (uint64_t)"MonitorFlags", 12);
      v30 = sub_100263F7C(v29, (uint64_t)", ", 2);
      v31 = sub_100263F7C(v30, (uint64_t)"OnBehalfBundleId", 16);
      v32 = sub_100263F7C(v31, (uint64_t)", ", 2);
      v33 = sub_100263F7C(v32, (uint64_t)"ReferenceFrame", 14);
      v34 = sub_100263F7C(v33, (uint64_t)", ", 2);
      v35 = sub_100263F7C(v34, (uint64_t)"FenceForeignKey", 15);
      v36 = sub_100263F7C(v35, (uint64_t)", ", 2);
      v37 = sub_100263F7C(v36, (uint64_t)"HandoffTag", 10);
      v38 = sub_100263F7C(v37, (uint64_t)", ", 2);
      v39 = sub_100263F7C(v38, (uint64_t)"HandoffFenceEnablementStatus", 28);
      v40 = sub_100263F7C(v39, (uint64_t)", ", 2);
      v41 = sub_100263F7C(v40, (uint64_t)"DeviceIdIndex", 13);
      sub_100263F7C(v41, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 48);
      std::stringbuf::str(&__p, v58);
      if (SBYTE3(v63) >= 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      sub_1000CDA68(a1, p_p);
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    v10 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      v11 = objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
      __p = (void *)68289282;
      v60 = 2082;
      v61 = "";
      v62 = 2082;
      v63 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: unable to get the index for deviceId from deviceId table\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10215F740);
    }
    v12 = qword_1022A0068;
    if (os_signpost_enabled((os_log_t)qword_1022A0068))
    {
      v13 = objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
      __p = (void *)68289282;
      v60 = 2082;
      v61 = "";
      v62 = 2082;
      v63 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: unable to get the index for deviceId from deviceId table", "{\"msg%{public}.0s\":\"Fence: unable to get the index for deviceId from deviceId table\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
  }
  return 0;
}

void sub_10093C1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10093C240(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *p_p;
  void *__p;
  char v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  _QWORD v17[8];
  _QWORD v18[2];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: insertInHandOffDeviceIdTableIfNeeded\"}", buf, 0x12u);
  }
  v5 = sub_10093DA74(a1, a2);
  if (v5 == -1)
  {
    v18[0] = 0;
    v18[1] = 0;
    objc_msgSend(a2, "getUUIDBytes:", v18);
    sub_100263E50((uint64_t)buf);
    v6 = sub_100263F7C((const char **)((char *)&v16 + 6), (uint64_t)"INSERT INTO ", 12);
    v7 = sub_100263F7C(v6, (uint64_t)"FenceHandOffDeviceId", 20);
    v8 = sub_100263F7C(v7, (uint64_t)" (", 2);
    v9 = sub_100263F7C(v8, (uint64_t)"DeviceId", 8);
    sub_100263F7C(v9, (uint64_t)") VALUES (?)", 12);
    std::stringbuf::str(&__p, v17);
    if (v13 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(a1, p_p);
  }
  return v5;
}

void sub_10093C5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10093C638(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  const char *v18;
  char *v19;
  _DWORD v20[3];
  __int16 v21;
  uint64_t *v22;
  _QWORD v23[8];
  _BYTE buf[12];
  __int16 v25;
  uint64_t *v26;
  char v27;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = (uint64_t *)*a2;
    if (*((char *)a2 + 47) >= 0)
      v6 = a2 + 3;
    else
      v6 = (uint64_t *)a2[3];
    *(_DWORD *)buf = 136446467;
    *(_QWORD *)&buf[4] = v5;
    v25 = 2081;
    v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fence: Removing fence %{public}s/%{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if (*((char *)a2 + 47) >= 0)
      v17 = a2 + 3;
    else
      v17 = (uint64_t *)a2[3];
    v20[0] = 136446467;
    *(_QWORD *)&v20[1] = v16;
    v21 = 2081;
    v22 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Removing fence %{public}s/%{private}s", v20, 22);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceDatabase::removeFence(const CLFenceManager_Type::Fence &, int &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  sub_100263E50((uint64_t)v20);
  v7 = sub_100263F7C((uint64_t **)((char *)&v22 + 2), (uint64_t)"DELETE FROM ", 12);
  v8 = sub_100263F7C(v7, (uint64_t)"GeoFence", 8);
  v9 = sub_100263F7C(v8, (uint64_t)" WHERE ", 7);
  v10 = sub_100263F7C(v9, (uint64_t)"BundleId", 8);
  v11 = sub_100263F7C(v10, (uint64_t)"=? AND ", 7);
  v12 = sub_100263F7C(v11, (uint64_t)"Name", 4);
  v13 = sub_100263F7C(v12, (uint64_t)"=? AND ", 7);
  v14 = sub_100263F7C(v13, (uint64_t)"OnBehalfBundleId", 16);
  sub_100263F7C(v14, (uint64_t)"=?", 2);
  std::stringbuf::str(buf, v23);
  if (v27 >= 0)
    v15 = buf;
  else
    v15 = *(char **)buf;
  sub_1000CDA68(a1, v15);
}

void sub_10093D06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_10093D0D8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[8];
  void *__p[2];
  char v13;

  sub_100263E50((uint64_t)&v9);
  v2 = sub_100263F7C(&v10, (uint64_t)"DELETE FROM ", 12);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" WHERE ", 7);
  v5 = sub_100263F7C(v4, (uint64_t)"BundleId", 8);
  v6 = sub_100263F7C(v5, (uint64_t)"=? OR ", 6);
  v7 = sub_100263F7C(v6, (uint64_t)"OnBehalfBundleId", 16);
  sub_100263F7C(v7, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v11);
  if (v13 >= 0)
    v8 = (char *)__p;
  else
    v8 = (char *)__p[0];
  sub_1000CDA68(a1, v8);
}

void sub_10093D4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10093D524(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *p_p;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  void *__p;
  char v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  _QWORD v17[8];

  if (a2)
  {
    if (sub_10063FA54(a1))
    {
      sub_100263E50((uint64_t)buf);
      v3 = sub_100263F7C((const char **)((char *)&v16 + 6), (uint64_t)"DELETE FROM ", 12);
      v4 = sub_100263F7C(v3, (uint64_t)"FenceHandOffDeviceId", 20);
      v5 = sub_100263F7C(v4, (uint64_t)" WHERE ", 7);
      v6 = sub_100263F7C(v5, (uint64_t)"DeviceId", 8);
      sub_100263F7C(v6, (uint64_t)"=?", 2);
      std::stringbuf::str(&__p, v17);
      if (v13 >= 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      sub_1000CDA68(a1, p_p);
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    v9 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: Sqlite Foreign Key feature is turned off\"}", buf, 0x12u);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10215F740);
    }
    v10 = qword_1022A0068;
    if (os_signpost_enabled((os_log_t)qword_1022A0068))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: Sqlite Foreign Key feature is turned off", "{\"msg%{public}.0s\":\"Fence: Sqlite Foreign Key feature is turned off\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: Null DeviceId\"}", buf, 0x12u);
    }
  }
  return 0;
}

void sub_10093DA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10093DA74(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *p_p;
  NSObject *v11;
  void *__p;
  char v14;
  _QWORD v15[2];
  uint8_t buf[8];
  __int16 v17;
  const char *v18;
  _QWORD v19[8];

  if (a2)
  {
    sub_100263E50((uint64_t)buf);
    v15[0] = 0;
    v15[1] = 0;
    objc_msgSend(a2, "getUUIDBytes:", v15);
    v4 = sub_100263F7C((const char **)((char *)&v18 + 6), (uint64_t)"SELECT ", 7);
    v5 = sub_100263F7C(v4, (uint64_t)"DeviceIdIndex", 13);
    v6 = sub_100263F7C(v5, (uint64_t)" FROM ", 6);
    v7 = sub_100263F7C(v6, (uint64_t)"FenceHandOffDeviceId", 20);
    v8 = sub_100263F7C(v7, (uint64_t)" WHERE ", 7);
    v9 = sub_100263F7C(v8, (uint64_t)"DeviceId", 8);
    sub_100263F7C(v9, (uint64_t)"=?;", 3);
    std::stringbuf::str(&__p, v19);
    if (v14 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(a1, p_p);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v11 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v17 = 2082;
    v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: deviceId is null\"}", buf, 0x12u);
  }
  return -1;
}

void sub_10093DEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_10093DF44(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *p_p;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[8];
  void *__p;
  char v44;

  sub_100263E50((uint64_t)&v40);
  v2 = sub_100263F7C(&v41, (uint64_t)"SELECT ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"BundleId", 8);
  v4 = sub_100263F7C(v3, (uint64_t)", ", 2);
  v5 = sub_100263F7C(v4, (uint64_t)"Name", 4);
  v6 = sub_100263F7C(v5, (uint64_t)", ", 2);
  v7 = sub_100263F7C(v6, (uint64_t)"Distance", 8);
  v8 = sub_100263F7C(v7, (uint64_t)", ", 2);
  v9 = sub_100263F7C(v8, (uint64_t)"DesiredAccuracy", 15);
  v10 = sub_100263F7C(v9, (uint64_t)", ", 2);
  v11 = sub_100263F7C(v10, (uint64_t)"SetupComplete", 13);
  v12 = sub_100263F7C(v11, (uint64_t)", ", 2);
  v13 = sub_100263F7C(v12, (uint64_t)"Timestamp", 9);
  v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
  v15 = sub_100263F7C(v14, (uint64_t)"MonitorFlags", 12);
  v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
  v17 = sub_100263F7C(v16, (uint64_t)"OnBehalfBundleId", 16);
  v18 = sub_100263F7C(v17, (uint64_t)", ", 2);
  v19 = sub_100263F7C(v18, (uint64_t)"ReferenceFrame", 14);
  v20 = sub_100263F7C(v19, (uint64_t)", ", 2);
  v21 = sub_100263F7C(v20, (uint64_t)"FenceForeignKey", 15);
  v22 = sub_100263F7C(v21, (uint64_t)", ", 2);
  v23 = sub_100263F7C(v22, (uint64_t)"HandoffTag", 10);
  v24 = sub_100263F7C(v23, (uint64_t)", ", 2);
  v25 = sub_100263F7C(v24, (uint64_t)"FenceHandOffDeviceId", 20);
  v26 = sub_100263F7C(v25, (uint64_t)".", 1);
  v27 = sub_100263F7C(v26, (uint64_t)"DeviceId", 8);
  v28 = sub_100263F7C(v27, (uint64_t)" FROM ", 6);
  v29 = sub_100263F7C(v28, (uint64_t)"GeoFence", 8);
  v30 = sub_100263F7C(v29, (uint64_t)" INNER JOIN ", 12);
  v31 = sub_100263F7C(v30, (uint64_t)"FenceHandOffDeviceId", 20);
  v32 = sub_100263F7C(v31, (uint64_t)" ON ", 4);
  v33 = sub_100263F7C(v32, (uint64_t)"GeoFence", 8);
  v34 = sub_100263F7C(v33, (uint64_t)".", 1);
  v35 = sub_100263F7C(v34, (uint64_t)"DeviceIdIndex", 13);
  v36 = sub_100263F7C(v35, (uint64_t)"=", 1);
  v37 = sub_100263F7C(v36, (uint64_t)"FenceHandOffDeviceId", 20);
  v38 = sub_100263F7C(v37, (uint64_t)".", 1);
  sub_100263F7C(v38, (uint64_t)"DeviceIdIndex", 13);
  std::stringbuf::str(&__p, v42);
  if (v44 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_10093EF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_10093F038(uint64_t a1)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  char *v90;
  std::string v91;
  std::string::value_type v92[8];
  char v93;
  std::string::value_type v94[8];
  char v95;
  std::string::value_type v96[8];
  char v97;
  std::string::value_type v98[8];
  char v99;
  std::string::value_type v100[8];
  char v101;
  std::string::value_type v102[8];
  char v103;
  std::string::value_type v104[8];
  char v105;
  std::string::value_type v106[8];
  char v107;
  void *v108[2];
  char v109;
  std::string::value_type v110[8];
  char v111;
  std::string::value_type v112[8];
  char v113;
  std::string::value_type v114[8];
  char v115;
  std::string::value_type v116[8];
  char v117;
  std::string::value_type v118[8];
  char v119;
  std::string::value_type v120[8];
  char v121;
  std::string::value_type v122[8];
  char v123;
  std::string::value_type v124[8];
  char v125;
  std::string::value_type v126[8];
  char v127;
  std::string::value_type v128[8];
  char v129;
  std::string::value_type v130[8];
  char v131;
  std::string::value_type v132[8];
  char v133;
  std::string::value_type __s[8];
  char v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string v166;
  std::string v167;
  std::string v168;
  std::string v169;
  std::string v170;
  std::string v171;
  std::string v172;
  std::string v173;
  std::string v174;
  void *__p[2];
  int64_t v176;
  std::string __str;
  std::string v178;
  std::string v179;
  std::string v180;

  *((_BYTE *)&v136.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v136, "SELECT ");
  v2 = std::string::append(&v136, "BundleId");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v135 = 2;
  strcpy(__s, ", ");
  v4 = std::string::append(&v137, __s, 2uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v138, "Name");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v133 = 2;
  strcpy(v132, ", ");
  v8 = std::string::append(&v139, v132, 2uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v140.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v140, "Distance");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v141.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v131 = 2;
  strcpy(v130, ", ");
  v12 = std::string::append(&v141, v130, 2uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v142.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v142, "DesiredAccuracy");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v143.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v129 = 2;
  strcpy(v128, ", ");
  v16 = std::string::append(&v143, v128, 2uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v144.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v144, "SetupComplete");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v145.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v127 = 2;
  strcpy(v126, ", ");
  v20 = std::string::append(&v145, v126, 2uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v146.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v146, "Timestamp");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v125 = 2;
  strcpy(v124, ", ");
  v24 = std::string::append(&v147, v124, 2uLL);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v148.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v148, "MonitorFlags");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v149.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v123 = 2;
  strcpy(v122, ", ");
  v28 = std::string::append(&v149, v122, 2uLL);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v150.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v150, "OnBehalfBundleId");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v121 = 2;
  strcpy(v120, ", ");
  v32 = std::string::append(&v151, v120, 2uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v152, "ReferenceFrame");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v153.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v119 = 2;
  strcpy(v118, ", ");
  v36 = std::string::append(&v153, v118, 2uLL);
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v154, "FenceForeignKey");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v117 = 2;
  strcpy(v116, ", ");
  v40 = std::string::append(&v155, v116, 2uLL);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v156.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v156, "HandoffTag");
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v157.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v115 = 2;
  strcpy(v114, ", ");
  v44 = std::string::append(&v157, v114, 2uLL);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v158.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  v46 = std::string::append(&v158, "FenceHandOffDeviceId");
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v159.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v113 = 1;
  strcpy(v112, ".");
  v48 = std::string::append(&v159, v112, 1uLL);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v160.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v160, "DeviceId");
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v161.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v111 = 6;
  strcpy(v110, " FROM ");
  v52 = std::string::append(&v161, v110, 6uLL);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v162.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v54 = std::string::append(&v162, "GeoFence");
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v163.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v109 = 12;
  strcpy((char *)v108, " INNER JOIN ");
  v56 = std::string::append(&v163, (const std::string::value_type *)v108, 0xCuLL);
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v164.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  v58 = std::string::append(&v164, "FenceHandOffDeviceId");
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v165.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v107 = 4;
  strcpy(v106, " ON ");
  v60 = std::string::append(&v165, v106, 4uLL);
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v166.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v62 = std::string::append(&v166, "GeoFence");
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v167.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v105 = 1;
  strcpy(v104, ".");
  v64 = std::string::append(&v167, v104, 1uLL);
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v168.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v168, "DeviceIdIndex");
  v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v169.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  v103 = 1;
  strcpy(v102, "=");
  v68 = std::string::append(&v169, v102, 1uLL);
  v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v170.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  v70 = std::string::append(&v170, "FenceHandOffDeviceId");
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v171.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  v101 = 1;
  strcpy(v100, ".");
  v72 = std::string::append(&v171, v100, 1uLL);
  v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v172.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  v74 = std::string::append(&v172, "DeviceIdIndex");
  v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v173.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  v99 = 7;
  strcpy(v98, " WHERE ");
  v76 = std::string::append(&v173, v98, 7uLL);
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v174.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  v78 = std::string::append(&v174, "BundleId");
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v179.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  v97 = 7;
  strcpy(v96, "=? AND ");
  v80 = std::string::append(&v179, v96, 7uLL);
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v180.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  v82 = std::string::append(&v180, "Name");
  v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  v95 = 7;
  strcpy(v94, "=? AND ");
  v84 = std::string::append(&v91, v94, 7uLL);
  v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  v86 = std::string::append(&__str, "OnBehalfBundleId");
  v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v178.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  v93 = 2;
  strcpy(v92, "=?");
  v88 = std::string::append(&v178, v92, 2uLL);
  v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v176 = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  if (v93 < 0)
    operator delete(*(void **)v92);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v95 < 0)
    operator delete(*(void **)v94);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
  if (v97 < 0)
    operator delete(*(void **)v96);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v179.__r_.__value_.__l.__data_);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if (v99 < 0)
    operator delete(*(void **)v98);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  if (v101 < 0)
    operator delete(*(void **)v100);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  if (v103 < 0)
    operator delete(*(void **)v102);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(*(void **)v104);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  if (v107 < 0)
    operator delete(*(void **)v106);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if (v109 < 0)
    operator delete(v108[0]);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (v111 < 0)
    operator delete(*(void **)v110);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (v113 < 0)
    operator delete(*(void **)v112);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if (v115 < 0)
    operator delete(*(void **)v114);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  if (v117 < 0)
    operator delete(*(void **)v116);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  if (v119 < 0)
    operator delete(*(void **)v118);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (v121 < 0)
    operator delete(*(void **)v120);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  if (v123 < 0)
    operator delete(*(void **)v122);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  if (v125 < 0)
    operator delete(*(void **)v124);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if (v127 < 0)
    operator delete(*(void **)v126);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v129 < 0)
    operator delete(*(void **)v128);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (v131 < 0)
    operator delete(*(void **)v130);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if (v133 < 0)
    operator delete(*(void **)v132);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (v135 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (v176 >= 0)
    v90 = (char *)__p;
  else
    v90 = (char *)__p[0];
  sub_1000CDA68(a1, v90);
}

void sub_100940A9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E2BD0((uint64_t)&STACK[0x830]);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  _Unwind_Resume(a1);
}

uint64_t sub_100941108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  char *p_p;
  NSObject *v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[8];
  void *__p;
  __int16 v57;
  const char *v58;
  char v59;

  v7 = *(void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 != *(_QWORD *)a3)
  {
    do
    {
      v6 -= 248;
      sub_10091BC34(a3 + 16, v6);
    }
    while ((void *)v6 != v7);
  }
  *(_QWORD *)(a3 + 8) = v7;
  if (a2)
  {
    sub_100263E50((uint64_t)&v53);
    v8 = sub_100263F7C(&v54, (uint64_t)"SELECT ", 7);
    v9 = sub_100263F7C(v8, (uint64_t)"BundleId", 8);
    v10 = sub_100263F7C(v9, (uint64_t)", ", 2);
    v11 = sub_100263F7C(v10, (uint64_t)"Name", 4);
    v12 = sub_100263F7C(v11, (uint64_t)", ", 2);
    v13 = sub_100263F7C(v12, (uint64_t)"Distance", 8);
    v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
    v15 = sub_100263F7C(v14, (uint64_t)"DesiredAccuracy", 15);
    v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
    v17 = sub_100263F7C(v16, (uint64_t)"SetupComplete", 13);
    v18 = sub_100263F7C(v17, (uint64_t)", ", 2);
    v19 = sub_100263F7C(v18, (uint64_t)"Timestamp", 9);
    v20 = sub_100263F7C(v19, (uint64_t)", ", 2);
    v21 = sub_100263F7C(v20, (uint64_t)"MonitorFlags", 12);
    v22 = sub_100263F7C(v21, (uint64_t)", ", 2);
    v23 = sub_100263F7C(v22, (uint64_t)"OnBehalfBundleId", 16);
    v24 = sub_100263F7C(v23, (uint64_t)", ", 2);
    v25 = sub_100263F7C(v24, (uint64_t)"ReferenceFrame", 14);
    v26 = sub_100263F7C(v25, (uint64_t)", ", 2);
    v27 = sub_100263F7C(v26, (uint64_t)"FenceForeignKey", 15);
    v28 = sub_100263F7C(v27, (uint64_t)", ", 2);
    v29 = sub_100263F7C(v28, (uint64_t)"HandoffTag", 10);
    v30 = sub_100263F7C(v29, (uint64_t)", ", 2);
    v31 = sub_100263F7C(v30, (uint64_t)"FenceHandOffDeviceId", 20);
    v32 = sub_100263F7C(v31, (uint64_t)".", 1);
    v33 = sub_100263F7C(v32, (uint64_t)"DeviceId", 8);
    v34 = sub_100263F7C(v33, (uint64_t)" FROM ", 6);
    v35 = sub_100263F7C(v34, (uint64_t)"GeoFence", 8);
    v36 = sub_100263F7C(v35, (uint64_t)" INNER JOIN ", 12);
    v37 = sub_100263F7C(v36, (uint64_t)"FenceHandOffDeviceId", 20);
    v38 = sub_100263F7C(v37, (uint64_t)" ON ", 4);
    v39 = sub_100263F7C(v38, (uint64_t)"GeoFence", 8);
    v40 = sub_100263F7C(v39, (uint64_t)".", 1);
    v41 = sub_100263F7C(v40, (uint64_t)"DeviceIdIndex", 13);
    v42 = sub_100263F7C(v41, (uint64_t)" = ", 3);
    v43 = sub_100263F7C(v42, (uint64_t)"FenceHandOffDeviceId", 20);
    v44 = sub_100263F7C(v43, (uint64_t)".", 1);
    v45 = sub_100263F7C(v44, (uint64_t)"DeviceIdIndex", 13);
    v46 = sub_100263F7C(v45, (uint64_t)" WHERE ", 7);
    v47 = sub_100263F7C(v46, (uint64_t)"FenceHandOffDeviceId", 20);
    v48 = sub_100263F7C(v47, (uint64_t)".", 1);
    v49 = sub_100263F7C(v48, (uint64_t)"DeviceId", 8);
    sub_100263F7C(v49, (uint64_t)"=?", 2);
    std::stringbuf::str(&__p, v55);
    if (v59 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(a1, p_p);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v51 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289026;
    v57 = 2082;
    v58 = "";
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: getAllFencesFromDeviceId: DeviceId is null\"}", (uint8_t *)&__p, 0x12u);
  }
  sub_10008A674((void **)a3);
  return 0;
}

void sub_1009420BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  sub_1018B38B4((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_1009421CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  sub_10093DF44(a1);
}

void sub_100942544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a14;
  sub_10091BBB0(&a19);
  _Unwind_Resume(a1);
}

void sub_10094257C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *p_p;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[8];
  void *__p;
  char v34;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 248;
      sub_10091BC34((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  sub_100263E50((uint64_t)&v30);
  v6 = sub_100263F7C(&v31, (uint64_t)"SELECT ", 7);
  v7 = sub_100263F7C(v6, (uint64_t)"FenceIndex", 10);
  v8 = sub_100263F7C(v7, (uint64_t)",", 1);
  v9 = sub_100263F7C(v8, (uint64_t)"BundleId", 8);
  v10 = sub_100263F7C(v9, (uint64_t)", ", 2);
  v11 = sub_100263F7C(v10, (uint64_t)"Name", 4);
  v12 = sub_100263F7C(v11, (uint64_t)", ", 2);
  v13 = sub_100263F7C(v12, (uint64_t)"Distance", 8);
  v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
  v15 = sub_100263F7C(v14, (uint64_t)"DesiredAccuracy", 15);
  v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
  v17 = sub_100263F7C(v16, (uint64_t)"SetupComplete", 13);
  v18 = sub_100263F7C(v17, (uint64_t)", ", 2);
  v19 = sub_100263F7C(v18, (uint64_t)"Timestamp", 9);
  v20 = sub_100263F7C(v19, (uint64_t)", ", 2);
  v21 = sub_100263F7C(v20, (uint64_t)"MonitorFlags", 12);
  v22 = sub_100263F7C(v21, (uint64_t)", ", 2);
  v23 = sub_100263F7C(v22, (uint64_t)"OnBehalfBundleId", 16);
  v24 = sub_100263F7C(v23, (uint64_t)", ", 2);
  v25 = sub_100263F7C(v24, (uint64_t)"ReferenceFrame", 14);
  v26 = sub_100263F7C(v25, (uint64_t)", ", 2);
  v27 = sub_100263F7C(v26, (uint64_t)"FenceForeignKey", 15);
  v28 = sub_100263F7C(v27, (uint64_t)" FROM ", 6);
  sub_100263F7C(v28, (uint64_t)"GeoFence", 8);
  std::stringbuf::str(&__p, v32);
  if (v34 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_100943120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  sub_1018B38B4((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_100943258(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *p_p;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p;
  char v17;

  sub_100263E50((uint64_t)&v13);
  v2 = sub_100263F7C(&v14, (uint64_t)"SELECT ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"FenceForeignKey", 15);
  v4 = sub_100263F7C(v3, (uint64_t)" FROM ", 6);
  v5 = sub_100263F7C(v4, (uint64_t)"GeoFence", 8);
  v6 = sub_100263F7C(v5, (uint64_t)" WHERE ", 7);
  v7 = sub_100263F7C(v6, (uint64_t)"BundleId", 8);
  v8 = sub_100263F7C(v7, (uint64_t)"=? AND ", 7);
  v9 = sub_100263F7C(v8, (uint64_t)"Name", 4);
  v10 = sub_100263F7C(v9, (uint64_t)"=? AND ", 7);
  v11 = sub_100263F7C(v10, (uint64_t)"OnBehalfBundleId", 16);
  sub_100263F7C(v11, (uint64_t)"=?", 2);
  std::stringbuf::str(&__p, v15);
  if (v17 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_100943A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100943AE4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  void *__p[2];
  char v11;

  sub_100263E50((uint64_t)&v7);
  v2 = sub_100263F7C(&v8, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" WHERE ", 7);
  v5 = sub_100263F7C(v4, (uint64_t)"BundleId", 8);
  sub_100263F7C(v5, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v9);
  if (v11 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000CDA68(a1, v6);
}

void sub_100943E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100943E94(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];
  uint8_t buf[8];
  char v14;

  sub_100263E50((uint64_t)&v10);
  v2 = sub_100263F7C(&v11, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" WHERE ", 7);
  v5 = sub_100263F7C(v4, (uint64_t)"BundleId", 8);
  v6 = sub_100263F7C(v5, (uint64_t)"=?", 2);
  v7 = sub_100263F7C(v6, (uint64_t)" OR ", 4);
  v8 = sub_100263F7C(v7, (uint64_t)"OnBehalfBundleId", 16);
  sub_100263F7C(v8, (uint64_t)"=?", 2);
  std::stringbuf::str(buf, v12);
  if (v14 >= 0)
    v9 = (char *)buf;
  else
    v9 = *(char **)buf;
  sub_1000CDA68(a1, v9);
}

void sub_100944170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 73) < 0)
    operator delete(*(void **)(v2 - 96));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009441C4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double a5)
{
  NSObject *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  const char *v29;
  char *v30;
  _DWORD v31[3];
  __int16 v32;
  uint64_t *v33;
  __int16 v34;
  uint64_t *v35;
  __int16 v36;
  double v37;
  _BYTE buf[12];
  __int16 v39;
  uint64_t *v40;
  __int16 v41;
  uint64_t *v42;
  __int16 v43;
  double v44;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v10 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = (uint64_t *)*a3;
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = (uint64_t *)*a2;
    if (*((char *)a4 + 23) >= 0)
      v13 = a4;
    else
      v13 = (uint64_t *)*a4;
    *(_DWORD *)buf = 136446979;
    *(_QWORD *)&buf[4] = v11;
    v39 = 2082;
    v40 = v12;
    v41 = 2081;
    v42 = v13;
    v43 = 2050;
    v44 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Fence: Recording [%{public}s]/%{public}s/%{private}s last download time change to %{public}.2f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    if (*((char *)a3 + 23) >= 0)
      v26 = a3;
    else
      v26 = (uint64_t *)*a3;
    if (*((char *)a2 + 23) >= 0)
      v27 = a2;
    else
      v27 = (uint64_t *)*a2;
    if (*((char *)a4 + 23) >= 0)
      v28 = a4;
    else
      v28 = (uint64_t *)*a4;
    v31[0] = 136446979;
    *(_QWORD *)&v31[1] = v26;
    v32 = 2082;
    v33 = v27;
    v34 = 2081;
    v35 = v28;
    v36 = 2050;
    v37 = a5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Recording [%{public}s]/%{public}s/%{private}s last download time change to %{public}.2f", v31, 42);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDatabase::lastDownloadTimeChanged(const std::string &, const std::string &, const std::string &, const double)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  sub_100263E50((uint64_t)v31);
  v14 = sub_100263F7C((uint64_t **)((char *)&v33 + 2), (uint64_t)"UPDATE ", 7);
  v15 = sub_100263F7C(v14, (uint64_t)"GeoFence", 8);
  v16 = sub_100263F7C(v15, (uint64_t)" SET ", 5);
  v17 = sub_100263F7C(v16, (uint64_t)"SetupComplete", 13);
  v18 = sub_100263F7C(v17, (uint64_t)"=?", 2);
  v19 = sub_100263F7C(v18, (uint64_t)" WHERE ", 7);
  v20 = sub_100263F7C(v19, (uint64_t)"BundleId", 8);
  v21 = sub_100263F7C(v20, (uint64_t)"=? AND ", 7);
  v22 = sub_100263F7C(v21, (uint64_t)"Name", 4);
  v23 = sub_100263F7C(v22, (uint64_t)"=? AND ", 7);
  v24 = sub_100263F7C(v23, (uint64_t)"OnBehalfBundleId", 16);
  sub_100263F7C(v24, (uint64_t)"=?", 2);
  std::stringbuf::str(buf, &v35);
  if (v41 >= 0)
    v25 = buf;
  else
    v25 = *(char **)buf;
  sub_1000CDA68(a1, v25);
}

void sub_100944800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_100944858(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  const char *v8;
  uint8_t *v9;
  void *__p[2];
  char v11;
  uint8_t buf[16];
  uint64_t v13;
  _QWORD v14[8];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fence: Marking all fence data download times as invalid", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Marking all fence data download times as invalid", __p, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDatabase::markDataDownloadInvalid()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100263E50((uint64_t)buf);
  v3 = sub_100263F7C(&v13, (uint64_t)"UPDATE ", 7);
  v4 = sub_100263F7C(v3, (uint64_t)"GeoFence", 8);
  v5 = sub_100263F7C(v4, (uint64_t)" SET ", 5);
  v6 = sub_100263F7C(v5, (uint64_t)"SetupComplete", 13);
  sub_100263F7C(v6, (uint64_t)"=-1", 3);
  std::stringbuf::str(__p, v14);
  if (v11 >= 0)
    v7 = (char *)__p;
  else
    v7 = (char *)__p[0];
  sub_1000CDA68(a1, v7);
}

void sub_100944B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100944B6C(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t *v16;
  const char *v17;
  char *v18;
  _DWORD v19[4];
  uint64_t v20;
  _QWORD v21[8];
  uint8_t buf[23];
  char v23;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: invalidate download date for, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    v19[0] = 136446210;
    *(_QWORD *)&v19[1] = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: invalidate download date for, %{public}s", v19, 12);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDatabase::markDataDownloadInvalidForBundleAndOnBehalf(const std::string &, const std::string &)", "%s\n", v17);
    if (v18 != (char *)buf)
      free(v18);
  }
  sub_100263E50((uint64_t)v19);
  v6 = sub_100263F7C(&v20, (uint64_t)"UPDATE OR IGNORE ", 17);
  v7 = sub_100263F7C(v6, (uint64_t)"GeoFence", 8);
  v8 = sub_100263F7C(v7, (uint64_t)" SET ", 5);
  v9 = sub_100263F7C(v8, (uint64_t)"SetupComplete", 13);
  v10 = sub_100263F7C(v9, (uint64_t)"=-1", 3);
  v11 = sub_100263F7C(v10, (uint64_t)" WHERE ", 7);
  v12 = sub_100263F7C(v11, (uint64_t)"BundleId", 8);
  v13 = sub_100263F7C(v12, (uint64_t)"=? AND ", 7);
  v14 = sub_100263F7C(v13, (uint64_t)"OnBehalfBundleId", 16);
  sub_100263F7C(v14, (uint64_t)"=?", 2);
  std::stringbuf::str(buf, v21);
  if (v23 >= 0)
    v15 = (char *)buf;
  else
    v15 = *(char **)buf;
  sub_1000CDA68(a1, v15);
}

void sub_100945088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1009450E0(uint64_t a1, void *a2)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *p_p;
  NSObject *v13;
  id v14;
  NSObject *v15;
  id v16;
  void *__p;
  char v18;
  uint8_t buf[8];
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2082;
    v23 = (uint64_t)objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff invalidate download date for deviceId\", \"deviceId\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (sub_10093DA74(a1, a2) != -1)
  {
    sub_100263E50((uint64_t)buf);
    v5 = sub_100263F7C((const char **)((char *)&v21 + 6), (uint64_t)"UPDATE OR IGNORE ", 17);
    v6 = sub_100263F7C(v5, (uint64_t)"GeoFence", 8);
    v7 = sub_100263F7C(v6, (uint64_t)" SET ", 5);
    v8 = sub_100263F7C(v7, (uint64_t)"SetupComplete", 13);
    v9 = sub_100263F7C(v8, (uint64_t)"=-1", 3);
    v10 = sub_100263F7C(v9, (uint64_t)" WHERE ", 7);
    v11 = sub_100263F7C(v10, (uint64_t)"DeviceIdIndex", 13);
    sub_100263F7C(v11, (uint64_t)"=?", 2);
    std::stringbuf::str(&__p, (char *)&v23 + 4);
    if (v18 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(a1, p_p);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v13 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    v14 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2050;
    v23 = -1;
    v24 = 2082;
    v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: Invalid DeviceId Index returned\", \"index\":%{public}lld, \"deviceID\":%{public, location:escape_only}s}", buf, 0x26u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
  }
  v15 = qword_1022A0068;
  if (os_signpost_enabled((os_log_t)qword_1022A0068))
  {
    v16 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2050;
    v23 = -1;
    v24 = 2082;
    v25 = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: Invalid DeviceId Index returned", "{\"msg%{public}.0s\":\"Fence: Invalid DeviceId Index returned\", \"index\":%{public}lld, \"deviceID\":%{public, location:escape_only}s}", buf, 0x26u);
  }
}

void sub_100945634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_100945690(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *p_p;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[8];
  void *__p;
  char v10;

  sub_100263E50((uint64_t)&v6);
  v2 = sub_100263F7C(&v7, (uint64_t)"SELECT DISTINCT ", 16);
  v3 = sub_100263F7C(v2, (uint64_t)"BundleId", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" FROM ", 6);
  sub_100263F7C(v4, (uint64_t)"GeoFence", 8);
  std::stringbuf::str(&__p, v8);
  if (v10 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_100945C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100945CAC(uint64_t result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = *(_QWORD *)result;
  v2 = *(int64x2_t *)(result + 8);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)result)), 3uLL);
  v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = result + 16;
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)sub_1002596A8(v7, v4);
    }
    v10 = v8;
    v11 = &v8[24 * v5];
    v12 = v11;
    v13 = &v8[24 * v9];
    sub_100074D44(v6, &v10);
    return sub_100074DB8((uint64_t)&v10);
  }
  return result;
}

void sub_100945D60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x100945D50);
}

uint64_t sub_100945D88(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v10;
  int v11;
  __int16 v12;
  char v13;
  char v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t *v20;
  __int16 v21;
  uint64_t v22;

  v3 = a3;
  v4 = (uint64_t *)a2;
  v5 = a3;
  if (*(char *)(a3 + 23) < 0)
    v5 = *(_QWORD *)a3;
  v10 = v5;
  v11 = 5;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v6 = sub_10063A758(a1, a2, &v10);
  if ((_DWORD)v6)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v4 + 23) < 0)
        v4 = (uint64_t *)*v4;
      if (*(char *)(v3 + 23) < 0)
        v3 = *(_QWORD *)v3;
      *(_DWORD *)buf = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = v4;
      v21 = 2082;
      v22 = v3;
      v8 = "{\"msg%{public}.0s\":\"Fence: #migration column exists\", \"table\":%{public, location:escape_only}s, \"colum"
           "n\":%{public, location:escape_only}s}";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0x26u);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v4 + 23) < 0)
        v4 = (uint64_t *)*v4;
      if (*(char *)(v3 + 23) < 0)
        v3 = *(_QWORD *)v3;
      *(_DWORD *)buf = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = v4;
      v21 = 2082;
      v22 = v3;
      v8 = "{\"msg%{public}.0s\":\"Fence: #migration column doesn't exists\", \"table\":%{public, location:escape_only}s,"
           " \"column\":%{public, location:escape_only}s}";
      goto LABEL_22;
    }
  }
  return v6;
}

void sub_100945F74(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void *__p[2];
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[8];

  sub_100263E50((uint64_t)&v11);
  v2 = sub_100263F7C(&v12, (uint64_t)"UPDATE ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" SET ", 5);
  v5 = sub_100263F7C(v4, (uint64_t)"MonitorFlags", 12);
  v6 = sub_100263F7C(v5, (uint64_t)" = ", 3);
  v7 = (_QWORD *)std::ostream::operator<<(v6, 3);
  sub_100263F7C(v7, (uint64_t)";", 1);
  std::stringbuf::str(__p, v13);
  if (v10 >= 0)
    v8 = (char *)__p;
  else
    v8 = (char *)__p[0];
  sub_1000CDA68(a1, v8);
}

void sub_1009460E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100946134(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void *__p[2];
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[8];

  sub_100263E50((uint64_t)&v11);
  v2 = sub_100263F7C(&v12, (uint64_t)"UPDATE ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" SET ", 5);
  v5 = sub_100263F7C(v4, (uint64_t)"OnBehalfBundleId", 16);
  v6 = sub_100263F7C(v5, (uint64_t)" = ", 3);
  v7 = sub_100263F7C(v6, (uint64_t)"''", 2);
  sub_100263F7C(v7, (uint64_t)";", 1);
  std::stringbuf::str(__p, v13);
  if (v10 >= 0)
    v8 = (char *)__p;
  else
    v8 = (char *)__p[0];
  sub_1000CDA68(a1, v8);
}

void sub_1009462B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1009462FC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void *__p[2];
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[8];

  sub_100263E50((uint64_t)&v11);
  v2 = sub_100263F7C(&v12, (uint64_t)"UPDATE ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" SET ", 5);
  v5 = sub_100263F7C(v4, (uint64_t)"ReferenceFrame", 14);
  v6 = sub_100263F7C(v5, (uint64_t)" = ", 3);
  v7 = (_QWORD *)std::ostream::operator<<(v6, 0);
  sub_100263F7C(v7, (uint64_t)";", 1);
  std::stringbuf::str(__p, v13);
  if (v10 >= 0)
    v8 = (char *)__p;
  else
    v8 = (char *)__p[0];
  sub_1000CDA68(a1, v8);
}

void sub_100946470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1009464BC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  const char *v8;
  uint8_t *v9;
  void *__p[2];
  char v11;
  uint8_t buf[16];
  uint64_t v13;
  _QWORD v14[8];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: Setting fence keys values for existing fences", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215F740);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Setting fence keys values for existing fences", __p, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDatabase::setUniqueKeysToFenceForeignKeyColumn()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100263E50((uint64_t)buf);
  v3 = sub_100263F7C(&v13, (uint64_t)"UPDATE ", 7);
  v4 = sub_100263F7C(v3, (uint64_t)"GeoFence", 8);
  v5 = sub_100263F7C(v4, (uint64_t)" SET ", 5);
  v6 = sub_100263F7C(v5, (uint64_t)"FenceForeignKey", 15);
  sub_100263F7C(v6, (uint64_t)" = rowid", 8);
  std::stringbuf::str(__p, v14);
  if (v11 >= 0)
    v7 = (char *)__p;
  else
    v7 = (char *)__p[0];
  sub_1000CDA68(a1, v7);
}

void sub_10094677C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1009467D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  char v6;
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  const void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  sub_1015A2E04(v24, "Fences");
  sub_1015A2E04(v22, "MonitorFlags");
  v4 = sub_100945D88(a1, (const char *)v24, (uint64_t)v22);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if ((v4 & 1) != 0)
      goto LABEL_9;
  }
  else if ((v4 & 1) != 0)
  {
    goto LABEL_9;
  }
  sub_1015A2E04(v20, "MonitorFlags");
  sub_1006751D8((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0)
    operator delete((void *)v20[0]);
LABEL_9:
  sub_1015A2E04(v18, "Fences");
  sub_1015A2E04(__p, "ReferenceFrame");
  v5 = sub_100945D88(a1, (const char *)v18, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
  {
    operator delete(v18[0]);
    if ((v5 & 1) != 0)
      goto LABEL_17;
  }
  else if ((v5 & 1) != 0)
  {
    goto LABEL_17;
  }
  sub_1015A2E04(v20, "ReferenceFrame");
  sub_1006751D8((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0)
    operator delete((void *)v20[0]);
LABEL_17:
  sub_1015A2E04(v14, "Fences");
  sub_1015A2E04(v12, "OnBehalfBundleId");
  v6 = sub_100945D88(a1, (const char *)v14, (uint64_t)v12);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
  {
    operator delete(v14[0]);
    if ((v6 & 1) != 0)
      goto LABEL_25;
  }
  else if ((v6 & 1) != 0)
  {
    goto LABEL_25;
  }
  sub_1015A2E04(v20, "OnBehalfBundleId");
  sub_1006751D8((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0)
    operator delete((void *)v20[0]);
LABEL_25:
  sub_1015A2E04(v10, "Fences");
  sub_1015A2E04(v8, "FenceForeignKey");
  v7 = sub_100945D88(a1, (const char *)v10, (uint64_t)v8);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if ((v7 & 1) != 0)
      return;
  }
  else if ((v7 & 1) != 0)
  {
    return;
  }
  sub_1015A2E04(v20, "FenceForeignKey");
  sub_1006751D8((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0)
    operator delete((void *)v20[0]);
}

void sub_100946A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  if (*(char *)(v46 - 81) < 0)
    operator delete(*(void **)(v46 - 104));
  sub_100090AE4(v45, *(char **)(v45 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100946B48@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  NSObject *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD v216[2];
  uint64_t v217;
  _QWORD v218[10];
  char v219;
  uint64_t v220;
  uint8_t buf[8];
  __int16 v222;
  const char *v223;
  char v224;

  sub_100263E50((uint64_t)v216);
  sub_1015A2E04(buf, "MonitorFlags");
  v4 = sub_10019C4C0(a1, (const void **)buf);
  if (v224 < 0)
    operator delete(*(void **)buf);
  if (a1 + 8 != v4)
  {
    v5 = sub_100263F7C(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22);
    v6 = sub_100263F7C(v5, (uint64_t)"GeoFence", 8);
    v7 = sub_100263F7C(v6, (uint64_t)" (", 2);
    v8 = sub_100263F7C(v7, (uint64_t)"BundleId", 8);
    v9 = sub_100263F7C(v8, (uint64_t)",", 1);
    v10 = sub_100263F7C(v9, (uint64_t)"Name", 4);
    v11 = sub_100263F7C(v10, (uint64_t)",", 1);
    v12 = sub_100263F7C(v11, (uint64_t)"Timestamp", 9);
    v13 = sub_100263F7C(v12, (uint64_t)",", 1);
    v14 = sub_100263F7C(v13, (uint64_t)"Latitude", 8);
    v15 = sub_100263F7C(v14, (uint64_t)",", 1);
    v16 = sub_100263F7C(v15, (uint64_t)"Longitude", 9);
    v17 = sub_100263F7C(v16, (uint64_t)",", 1);
    v18 = sub_100263F7C(v17, (uint64_t)"Distance", 8);
    v19 = sub_100263F7C(v18, (uint64_t)",", 1);
    v20 = sub_100263F7C(v19, (uint64_t)"DesiredAccuracy", 15);
    v21 = sub_100263F7C(v20, (uint64_t)",", 1);
    v22 = sub_100263F7C(v21, (uint64_t)"SetupComplete", 13);
    v23 = sub_100263F7C(v22, (uint64_t)") SELECT ", 9);
    v24 = sub_100263F7C(v23, (uint64_t)"BundleId", 8);
    v25 = sub_100263F7C(v24, (uint64_t)",", 1);
    v26 = sub_100263F7C(v25, (uint64_t)"Name", 4);
    v27 = sub_100263F7C(v26, (uint64_t)",", 1);
    v28 = sub_100263F7C(v27, (uint64_t)"Timestamp", 9);
    v29 = sub_100263F7C(v28, (uint64_t)",", 1);
    v30 = sub_100263F7C(v29, (uint64_t)"Latitude", 8);
    v31 = sub_100263F7C(v30, (uint64_t)",", 1);
    v32 = sub_100263F7C(v31, (uint64_t)"Longitude", 9);
    v33 = sub_100263F7C(v32, (uint64_t)",", 1);
    v34 = sub_100263F7C(v33, (uint64_t)"Distance", 8);
    v35 = sub_100263F7C(v34, (uint64_t)",", 1);
    v36 = sub_100263F7C(v35, (uint64_t)"DesiredAccuracy", 15);
    v37 = sub_100263F7C(v36, (uint64_t)",", 1);
    v38 = "SetupComplete";
    v39 = 13;
    goto LABEL_18;
  }
  sub_1015A2E04(buf, "ReferenceFrame");
  v40 = sub_10019C4C0(a1, (const void **)buf);
  if (v224 < 0)
    operator delete(*(void **)buf);
  if (v4 != v40)
  {
    v41 = sub_100263F7C(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22);
    v42 = sub_100263F7C(v41, (uint64_t)"GeoFence", 8);
    v43 = sub_100263F7C(v42, (uint64_t)" (", 2);
    v44 = sub_100263F7C(v43, (uint64_t)"BundleId", 8);
    v45 = sub_100263F7C(v44, (uint64_t)",", 1);
    v46 = sub_100263F7C(v45, (uint64_t)"Name", 4);
    v47 = sub_100263F7C(v46, (uint64_t)",", 1);
    v48 = sub_100263F7C(v47, (uint64_t)"Timestamp", 9);
    v49 = sub_100263F7C(v48, (uint64_t)",", 1);
    v50 = sub_100263F7C(v49, (uint64_t)"Latitude", 8);
    v51 = sub_100263F7C(v50, (uint64_t)",", 1);
    v52 = sub_100263F7C(v51, (uint64_t)"Longitude", 9);
    v53 = sub_100263F7C(v52, (uint64_t)",", 1);
    v54 = sub_100263F7C(v53, (uint64_t)"Distance", 8);
    v55 = sub_100263F7C(v54, (uint64_t)",", 1);
    v56 = sub_100263F7C(v55, (uint64_t)"DesiredAccuracy", 15);
    v57 = sub_100263F7C(v56, (uint64_t)",", 1);
    v58 = sub_100263F7C(v57, (uint64_t)"SetupComplete", 13);
    v59 = sub_100263F7C(v58, (uint64_t)",", 1);
    v60 = sub_100263F7C(v59, (uint64_t)"MonitorFlags", 12);
    v61 = sub_100263F7C(v60, (uint64_t)") SELECT ", 9);
    v62 = sub_100263F7C(v61, (uint64_t)"BundleId", 8);
    v63 = sub_100263F7C(v62, (uint64_t)",", 1);
    v64 = sub_100263F7C(v63, (uint64_t)"Name", 4);
    v65 = sub_100263F7C(v64, (uint64_t)",", 1);
    v66 = sub_100263F7C(v65, (uint64_t)"Timestamp", 9);
    v67 = sub_100263F7C(v66, (uint64_t)",", 1);
    v68 = sub_100263F7C(v67, (uint64_t)"Latitude", 8);
    v69 = sub_100263F7C(v68, (uint64_t)",", 1);
    v70 = sub_100263F7C(v69, (uint64_t)"Longitude", 9);
    v71 = sub_100263F7C(v70, (uint64_t)",", 1);
    v72 = sub_100263F7C(v71, (uint64_t)"Distance", 8);
    v73 = sub_100263F7C(v72, (uint64_t)",", 1);
    v74 = sub_100263F7C(v73, (uint64_t)"DesiredAccuracy", 15);
    v75 = sub_100263F7C(v74, (uint64_t)",", 1);
    v76 = sub_100263F7C(v75, (uint64_t)"SetupComplete", 13);
    v37 = sub_100263F7C(v76, (uint64_t)",", 1);
    v38 = "MonitorFlags";
    v39 = 12;
    goto LABEL_18;
  }
  sub_1015A2E04(buf, "OnBehalfBundleId");
  v77 = sub_10019C4C0(a1, (const void **)buf);
  if (v224 < 0)
    operator delete(*(void **)buf);
  if (v4 != v77)
  {
    v78 = sub_100263F7C(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22);
    v79 = sub_100263F7C(v78, (uint64_t)"GeoFence", 8);
    v80 = sub_100263F7C(v79, (uint64_t)" (", 2);
    v81 = sub_100263F7C(v80, (uint64_t)"BundleId", 8);
    v82 = sub_100263F7C(v81, (uint64_t)",", 1);
    v83 = sub_100263F7C(v82, (uint64_t)"Name", 4);
    v84 = sub_100263F7C(v83, (uint64_t)",", 1);
    v85 = sub_100263F7C(v84, (uint64_t)"Timestamp", 9);
    v86 = sub_100263F7C(v85, (uint64_t)",", 1);
    v87 = sub_100263F7C(v86, (uint64_t)"Latitude", 8);
    v88 = sub_100263F7C(v87, (uint64_t)",", 1);
    v89 = sub_100263F7C(v88, (uint64_t)"Longitude", 9);
    v90 = sub_100263F7C(v89, (uint64_t)",", 1);
    v91 = sub_100263F7C(v90, (uint64_t)"Distance", 8);
    v92 = sub_100263F7C(v91, (uint64_t)",", 1);
    v93 = sub_100263F7C(v92, (uint64_t)"DesiredAccuracy", 15);
    v94 = sub_100263F7C(v93, (uint64_t)",", 1);
    v95 = sub_100263F7C(v94, (uint64_t)"SetupComplete", 13);
    v96 = sub_100263F7C(v95, (uint64_t)",", 1);
    v97 = sub_100263F7C(v96, (uint64_t)"MonitorFlags", 12);
    v98 = sub_100263F7C(v97, (uint64_t)",", 1);
    v99 = sub_100263F7C(v98, (uint64_t)"ReferenceFrame", 14);
    v100 = sub_100263F7C(v99, (uint64_t)") SELECT ", 9);
    v101 = sub_100263F7C(v100, (uint64_t)"BundleId", 8);
    v102 = sub_100263F7C(v101, (uint64_t)",", 1);
    v103 = sub_100263F7C(v102, (uint64_t)"Name", 4);
    v104 = sub_100263F7C(v103, (uint64_t)",", 1);
    v105 = sub_100263F7C(v104, (uint64_t)"Timestamp", 9);
    v106 = sub_100263F7C(v105, (uint64_t)",", 1);
    v107 = sub_100263F7C(v106, (uint64_t)"Latitude", 8);
    v108 = sub_100263F7C(v107, (uint64_t)",", 1);
    v109 = sub_100263F7C(v108, (uint64_t)"Longitude", 9);
    v110 = sub_100263F7C(v109, (uint64_t)",", 1);
    v111 = sub_100263F7C(v110, (uint64_t)"Distance", 8);
    v112 = sub_100263F7C(v111, (uint64_t)",", 1);
    v113 = sub_100263F7C(v112, (uint64_t)"DesiredAccuracy", 15);
    v114 = sub_100263F7C(v113, (uint64_t)",", 1);
    v115 = sub_100263F7C(v114, (uint64_t)"SetupComplete", 13);
    v116 = sub_100263F7C(v115, (uint64_t)",", 1);
    v117 = "MonitorFlags";
    v118 = 12;
LABEL_17:
    v162 = sub_100263F7C(v116, (uint64_t)v117, v118);
    v37 = sub_100263F7C(v162, (uint64_t)",", 1);
    v38 = "ReferenceFrame";
    v39 = 14;
    goto LABEL_18;
  }
  sub_1015A2E04(buf, "FenceForeignKey");
  v119 = sub_10019C4C0(a1, (const void **)buf);
  if (v224 < 0)
    operator delete(*(void **)buf);
  if (v4 != v119)
  {
    v120 = sub_100263F7C(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22);
    v121 = sub_100263F7C(v120, (uint64_t)"GeoFence", 8);
    v122 = sub_100263F7C(v121, (uint64_t)" (", 2);
    v123 = sub_100263F7C(v122, (uint64_t)"BundleId", 8);
    v124 = sub_100263F7C(v123, (uint64_t)",", 1);
    v125 = sub_100263F7C(v124, (uint64_t)"Name", 4);
    v126 = sub_100263F7C(v125, (uint64_t)",", 1);
    v127 = sub_100263F7C(v126, (uint64_t)"Timestamp", 9);
    v128 = sub_100263F7C(v127, (uint64_t)",", 1);
    v129 = sub_100263F7C(v128, (uint64_t)"Latitude", 8);
    v130 = sub_100263F7C(v129, (uint64_t)",", 1);
    v131 = sub_100263F7C(v130, (uint64_t)"Longitude", 9);
    v132 = sub_100263F7C(v131, (uint64_t)",", 1);
    v133 = sub_100263F7C(v132, (uint64_t)"Distance", 8);
    v134 = sub_100263F7C(v133, (uint64_t)",", 1);
    v135 = sub_100263F7C(v134, (uint64_t)"DesiredAccuracy", 15);
    v136 = sub_100263F7C(v135, (uint64_t)",", 1);
    v137 = sub_100263F7C(v136, (uint64_t)"SetupComplete", 13);
    v138 = sub_100263F7C(v137, (uint64_t)",", 1);
    v139 = sub_100263F7C(v138, (uint64_t)"MonitorFlags", 12);
    v140 = sub_100263F7C(v139, (uint64_t)",", 1);
    v141 = sub_100263F7C(v140, (uint64_t)"OnBehalfBundleId", 16);
    v142 = sub_100263F7C(v141, (uint64_t)",", 1);
    v143 = sub_100263F7C(v142, (uint64_t)"ReferenceFrame", 14);
    v144 = sub_100263F7C(v143, (uint64_t)") SELECT ", 9);
    v145 = sub_100263F7C(v144, (uint64_t)"BundleId", 8);
    v146 = sub_100263F7C(v145, (uint64_t)",", 1);
    v147 = sub_100263F7C(v146, (uint64_t)"Name", 4);
    v148 = sub_100263F7C(v147, (uint64_t)",", 1);
    v149 = sub_100263F7C(v148, (uint64_t)"Timestamp", 9);
    v150 = sub_100263F7C(v149, (uint64_t)",", 1);
    v151 = sub_100263F7C(v150, (uint64_t)"Latitude", 8);
    v152 = sub_100263F7C(v151, (uint64_t)",", 1);
    v153 = sub_100263F7C(v152, (uint64_t)"Longitude", 9);
    v154 = sub_100263F7C(v153, (uint64_t)",", 1);
    v155 = sub_100263F7C(v154, (uint64_t)"Distance", 8);
    v156 = sub_100263F7C(v155, (uint64_t)",", 1);
    v157 = sub_100263F7C(v156, (uint64_t)"DesiredAccuracy", 15);
    v158 = sub_100263F7C(v157, (uint64_t)",", 1);
    v159 = sub_100263F7C(v158, (uint64_t)"SetupComplete", 13);
    v160 = sub_100263F7C(v159, (uint64_t)",", 1);
    v161 = sub_100263F7C(v160, (uint64_t)"MonitorFlags", 12);
    v116 = sub_100263F7C(v161, (uint64_t)",", 1);
    v117 = "OnBehalfBundleId";
    v118 = 16;
    goto LABEL_17;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215F740);
  v167 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289026;
    v222 = 2082;
    v223 = "";
    _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: #migration contains FenceForeignKey\"}", buf, 0x12u);
  }
  v168 = sub_100263F7C(&v217, (uint64_t)"INSERT OR IGNORE INTO ", 22);
  v169 = sub_100263F7C(v168, (uint64_t)"GeoFence", 8);
  v170 = sub_100263F7C(v169, (uint64_t)" (", 2);
  v171 = sub_100263F7C(v170, (uint64_t)"BundleId", 8);
  v172 = sub_100263F7C(v171, (uint64_t)",", 1);
  v173 = sub_100263F7C(v172, (uint64_t)"Name", 4);
  v174 = sub_100263F7C(v173, (uint64_t)",", 1);
  v175 = sub_100263F7C(v174, (uint64_t)"Timestamp", 9);
  v176 = sub_100263F7C(v175, (uint64_t)",", 1);
  v177 = sub_100263F7C(v176, (uint64_t)"Latitude", 8);
  v178 = sub_100263F7C(v177, (uint64_t)",", 1);
  v179 = sub_100263F7C(v178, (uint64_t)"Longitude", 9);
  v180 = sub_100263F7C(v179, (uint64_t)",", 1);
  v181 = sub_100263F7C(v180, (uint64_t)"Distance", 8);
  v182 = sub_100263F7C(v181, (uint64_t)",", 1);
  v183 = sub_100263F7C(v182, (uint64_t)"DesiredAccuracy", 15);
  v184 = sub_100263F7C(v183, (uint64_t)",", 1);
  v185 = sub_100263F7C(v184, (uint64_t)"SetupComplete", 13);
  v186 = sub_100263F7C(v185, (uint64_t)",", 1);
  v187 = sub_100263F7C(v186, (uint64_t)"MonitorFlags", 12);
  v188 = sub_100263F7C(v187, (uint64_t)",", 1);
  v189 = sub_100263F7C(v188, (uint64_t)"OnBehalfBundleId", 16);
  v190 = sub_100263F7C(v189, (uint64_t)",", 1);
  v191 = sub_100263F7C(v190, (uint64_t)"ReferenceFrame", 14);
  v192 = sub_100263F7C(v191, (uint64_t)",", 1);
  v193 = sub_100263F7C(v192, (uint64_t)"FenceForeignKey", 15);
  v194 = sub_100263F7C(v193, (uint64_t)") SELECT ", 9);
  v195 = sub_100263F7C(v194, (uint64_t)"BundleId", 8);
  v196 = sub_100263F7C(v195, (uint64_t)",", 1);
  v197 = sub_100263F7C(v196, (uint64_t)"Name", 4);
  v198 = sub_100263F7C(v197, (uint64_t)",", 1);
  v199 = sub_100263F7C(v198, (uint64_t)"Timestamp", 9);
  v200 = sub_100263F7C(v199, (uint64_t)",", 1);
  v201 = sub_100263F7C(v200, (uint64_t)"Latitude", 8);
  v202 = sub_100263F7C(v201, (uint64_t)",", 1);
  v203 = sub_100263F7C(v202, (uint64_t)"Longitude", 9);
  v204 = sub_100263F7C(v203, (uint64_t)",", 1);
  v205 = sub_100263F7C(v204, (uint64_t)"Distance", 8);
  v206 = sub_100263F7C(v205, (uint64_t)",", 1);
  v207 = sub_100263F7C(v206, (uint64_t)"DesiredAccuracy", 15);
  v208 = sub_100263F7C(v207, (uint64_t)",", 1);
  v209 = sub_100263F7C(v208, (uint64_t)"SetupComplete", 13);
  v210 = sub_100263F7C(v209, (uint64_t)",", 1);
  v211 = sub_100263F7C(v210, (uint64_t)"MonitorFlags", 12);
  v212 = sub_100263F7C(v211, (uint64_t)",", 1);
  v213 = sub_100263F7C(v212, (uint64_t)"OnBehalfBundleId", 16);
  v214 = sub_100263F7C(v213, (uint64_t)",", 1);
  v215 = sub_100263F7C(v214, (uint64_t)"ReferenceFrame", 14);
  v37 = sub_100263F7C(v215, (uint64_t)",", 1);
  v38 = "FenceForeignKey";
  v39 = 15;
LABEL_18:
  v163 = sub_100263F7C(v37, (uint64_t)v38, v39);
  v164 = sub_100263F7C(v163, (uint64_t)" FROM ", 6);
  sub_100263F7C(v164, (uint64_t)"Fences", 6);
  std::stringbuf::str(a2, v218);
  *(_QWORD *)((char *)v216
  v217 = v165;
  if (v219 < 0)
    operator delete((void *)v218[8]);
  std::streambuf::~streambuf(v218);
  return std::ios::~ios(&v220);
}

void sub_100947AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 57) < 0)
    operator delete(*(void **)(v2 - 80));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100947B28(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[8];

  sub_100263E50((uint64_t)&v9);
  v2 = sub_100263F7C(&v10, (uint64_t)"UPDATE ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" SET ", 5);
  v5 = sub_100263F7C(v4, (uint64_t)"FenceIndex", 10);
  sub_100263F7C(v5, (uint64_t)" = rowid", 8);
  std::stringbuf::str(__p, v11);
  if (v8 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000CDA68(a1, v6);
}

void sub_100947C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100947CD0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  void *__p[2];
  char v11;

  sub_100263E50((uint64_t)&v7);
  v2 = sub_100263F7C(&v8, (uint64_t)"UPDATE ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" SET ", 5);
  v5 = sub_100263F7C(v4, (uint64_t)"HandoffTag", 10);
  sub_100263F7C(v5, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v9);
  if (v11 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000CDA68(a1, v6);
}

void sub_100947FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100948008(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  void *__p[2];
  char v11;

  sub_100263E50((uint64_t)&v7);
  v2 = sub_100263F7C(&v8, (uint64_t)"UPDATE ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" SET ", 5);
  v5 = sub_100263F7C(v4, (uint64_t)"HandoffFenceEnablementStatus", 28);
  sub_100263F7C(v5, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v9);
  if (v11 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000CDA68(a1, v6);
}

void sub_1009482E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100948340(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  void *__p[2];
  char v11;

  sub_100263E50((uint64_t)&v7);
  v2 = sub_100263F7C(&v8, (uint64_t)"UPDATE ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" SET ", 5);
  v5 = sub_100263F7C(v4, (uint64_t)"DeviceIdIndex", 13);
  sub_100263F7C(v5, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v9);
  if (v11 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000CDA68(a1, v6);
}

void sub_10094861C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100948674(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];
  void *__p[2];
  char v14;

  sub_10001E638(a1);
  sub_100263E50((uint64_t)&v10);
  v2 = sub_100263F7C(&v11, (uint64_t)"SELECT ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"Latitude", 8);
  v4 = sub_100263F7C(v3, (uint64_t)",", 1);
  v5 = sub_100263F7C(v4, (uint64_t)"Longitude", 9);
  v6 = sub_100263F7C(v5, (uint64_t)",", 1);
  v7 = sub_100263F7C(v6, (uint64_t)"FenceForeignKey", 15);
  v8 = sub_100263F7C(v7, (uint64_t)" FROM ", 6);
  sub_100263F7C(v8, (uint64_t)"GeoFences", 9);
  std::stringbuf::str(__p, v12);
  if (v14 >= 0)
    v9 = (char *)__p;
  else
    v9 = (char *)__p[0];
  sub_1000CDA68(a1, v9);
}

void sub_100948B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100948BC8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD v47[2];
  uint64_t v48;
  _QWORD v49[10];
  char v50;
  uint64_t v51;

  sub_100263E50((uint64_t)v47);
  v2 = sub_100263F7C(&v48, (uint64_t)"INSERT OR IGNORE INTO ", 22);
  v3 = sub_100263F7C(v2, (uint64_t)"GeoFence", 8);
  v4 = sub_100263F7C(v3, (uint64_t)" (", 2);
  v5 = sub_100263F7C(v4, (uint64_t)"BundleId", 8);
  v6 = sub_100263F7C(v5, (uint64_t)",", 1);
  v7 = sub_100263F7C(v6, (uint64_t)"Name", 4);
  v8 = sub_100263F7C(v7, (uint64_t)",", 1);
  v9 = sub_100263F7C(v8, (uint64_t)"Timestamp", 9);
  v10 = sub_100263F7C(v9, (uint64_t)",", 1);
  v11 = sub_100263F7C(v10, (uint64_t)"Distance", 8);
  v12 = sub_100263F7C(v11, (uint64_t)",", 1);
  v13 = sub_100263F7C(v12, (uint64_t)"DesiredAccuracy", 15);
  v14 = sub_100263F7C(v13, (uint64_t)",", 1);
  v15 = sub_100263F7C(v14, (uint64_t)"SetupComplete", 13);
  v16 = sub_100263F7C(v15, (uint64_t)",", 1);
  v17 = sub_100263F7C(v16, (uint64_t)"MonitorFlags", 12);
  v18 = sub_100263F7C(v17, (uint64_t)",", 1);
  v19 = sub_100263F7C(v18, (uint64_t)"OnBehalfBundleId", 16);
  v20 = sub_100263F7C(v19, (uint64_t)",", 1);
  v21 = sub_100263F7C(v20, (uint64_t)"ReferenceFrame", 14);
  v22 = sub_100263F7C(v21, (uint64_t)",", 1);
  v23 = sub_100263F7C(v22, (uint64_t)"FenceForeignKey", 15);
  v24 = sub_100263F7C(v23, (uint64_t)") SELECT ", 9);
  v25 = sub_100263F7C(v24, (uint64_t)"BundleId", 8);
  v26 = sub_100263F7C(v25, (uint64_t)",", 1);
  v27 = sub_100263F7C(v26, (uint64_t)"Name", 4);
  v28 = sub_100263F7C(v27, (uint64_t)",", 1);
  v29 = sub_100263F7C(v28, (uint64_t)"Timestamp", 9);
  v30 = sub_100263F7C(v29, (uint64_t)",", 1);
  v31 = sub_100263F7C(v30, (uint64_t)"Distance", 8);
  v32 = sub_100263F7C(v31, (uint64_t)",", 1);
  v33 = sub_100263F7C(v32, (uint64_t)"DesiredAccuracy", 15);
  v34 = sub_100263F7C(v33, (uint64_t)",", 1);
  v35 = sub_100263F7C(v34, (uint64_t)"SetupComplete", 13);
  v36 = sub_100263F7C(v35, (uint64_t)",", 1);
  v37 = sub_100263F7C(v36, (uint64_t)"MonitorFlags", 12);
  v38 = sub_100263F7C(v37, (uint64_t)",", 1);
  v39 = sub_100263F7C(v38, (uint64_t)"OnBehalfBundleId", 16);
  v40 = sub_100263F7C(v39, (uint64_t)",", 1);
  v41 = sub_100263F7C(v40, (uint64_t)"ReferenceFrame", 14);
  v42 = sub_100263F7C(v41, (uint64_t)",", 1);
  v43 = sub_100263F7C(v42, (uint64_t)"FenceForeignKey", 15);
  v44 = sub_100263F7C(v43, (uint64_t)" FROM ", 6);
  sub_100263F7C(v44, (uint64_t)"GeoFences", 9);
  std::stringbuf::str(a1, v49);
  *(_QWORD *)((char *)v47
  v48 = v45;
  if (v50 < 0)
    operator delete((void *)v49[8]);
  std::streambuf::~streambuf(v49);
  return std::ios::~ios(&v51);
}

void sub_100948F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100948F48(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *p_p;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];
  void *__p;
  char v14;

  sub_100949880((uint64_t)a2, *a2);
  sub_100263E50((uint64_t)&v10);
  v3 = sub_100263F7C(&v11, (uint64_t)"SELECT ", 7);
  v4 = sub_100263F7C(v3, (uint64_t)"DeviceId", 8);
  v5 = sub_100263F7C(v4, (uint64_t)" FROM ", 6);
  v6 = sub_100263F7C(v5, (uint64_t)"FenceHandOffDeviceId", 20);
  v7 = sub_100263F7C(v6, (uint64_t)" WHERE ", 7);
  v8 = sub_100263F7C(v7, (uint64_t)"DeviceIdIndex", 13);
  sub_100263F7C(v8, (uint64_t)">?", 2);
  std::stringbuf::str(&__p, v12);
  if (v14 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_1009496D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_1018B38B4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10094977C(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = a1[2];
  result = (uint64_t)(a1 + 2);
  v4 = *a1;
  v5 = a1[1];
  v6 = (v5 - *a1) >> 3;
  if (v6 < (v3 - *a1) >> 3)
  {
    v13 = result;
    if (v5 == v4)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(result, v6);
    }
    v9 = v7;
    v10 = &v7[8 * v6];
    v11 = v10;
    v12 = &v7[8 * v8];
    sub_1009498C8(a1, &v9);
    return sub_100949AF0((uint64_t)&v9);
  }
  return result;
}

void sub_100949800(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1009497F0);
}

void sub_100949828(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100949854(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100949880(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 8)
  {
    v5 = *(void **)(i - 8);

  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_1009498C8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10094993C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10094993C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      *(_QWORD *)(v7 - 8) = 0;
      v10 = *(void **)(v9 - 8);
      v9 -= 8;
      *(_QWORD *)(v7 - 8) = v10;
      v7 = *((_QWORD *)&v16 + 1) - 8;
      *((_QWORD *)&v16 + 1) -= 8;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1009499F4((uint64_t)v13);
  return v11;
}

void sub_1009499E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1009499F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1009499F4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100949A28((uint64_t *)a1);
  return a1;
}

void sub_100949A28(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  sub_100949A9C(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_100949A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *i;

  for (i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {

    i = (id *)(*(_QWORD *)(a2 + 32) + 8);
  }
}

uint64_t sub_100949AF0(uint64_t a1)
{
  sub_100949B24(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100949B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    v5 = *(void **)(v4 - 8);
    *(_QWORD *)(a1 + 16) = v4 - 8;

  }
}

BOOL sub_100949B70()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 104), OS_LOG_TYPE_INFO);
}

uint64_t sub_100949B80(uint64_t a1)
{
  double v2;
  int v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v11;
  const char *v12;
  char *v13;
  _BYTE v14[12];
  _OWORD buf[102];

  *(_OWORD *)a1 = xmmword_101BE7B70;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0x403E000000000000;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x40F5180000000000;
  sub_100949E24(a1);
  sub_1001E4804(buf);
  v2 = *(double *)(a1 + 88);
  *(_QWORD *)v14 = 0;
  v3 = sub_1001FD98C(*(uint64_t *)&buf[0], "LCStatsSubmitMetricsThrSec", v14);
  v4 = *(double *)v14;
  if (!v3)
    v4 = v2;
  *(double *)(a1 + 80) = v4;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10215F830);
  v8 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 80);
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,fMetricsCollectionDuration,%{public}f", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v11 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)v14 = 134349056;
    *(_QWORD *)&v14[4] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,fMetricsCollectionDuration,%{public}f", v14, 12);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "cllcf::CLLCFusionStats::CLLCFusionStats()", "%s\n", v12);
    if (v13 != (char *)buf)
      free(v13);
  }
  return a1;
}

void sub_100949DF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_100008848(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_100949E24(uint64_t a1)
{
  int __dst[268];
  uint64_t v3;

  memcpy(__dst, &unk_101BE7BBC, sizeof(__dst));
  sub_10094D110((uint64_t **)(a1 + 48), __dst, (int *)&v3);
  *(double *)(a1 + 72) = sub_1001FCBB4();
}

void sub_100949EAC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100949EBC(uint64_t a1)
{
  double v2;
  double v3;
  NSObject *v4;
  int v5;
  double v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _DWORD v19[4];
  uint8_t buf[4];
  int v21;

  v2 = sub_1001FCBB4();
  v3 = v2;
  if (*(_DWORD *)(a1 + 24) == 4 && v2 - *(double *)(a1 + 32) > 900.0)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 28);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v4 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)buf = 67240192;
      v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,reverting visit exit likely context to,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10215F830);
      v15 = *(_DWORD *)(a1 + 28);
      v19[0] = 67240192;
      v19[1] = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,reverting visit exit likely context to,%{public}d", v19, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  v6 = *(double *)(a1 + 80);
  if (v3 - *(double *)(a1 + 72) >= v6)
  {
    v10 = *(double *)(a1 + 88);
    v11 = *(_QWORD **)(a1 + 48);
    if (v11 != (_QWORD *)(a1 + 56))
    {
      do
      {
        sub_10094A268(a1, (uint64_t)(v11 + 4), v6 < v10, *((_DWORD *)v11 + 7));
        v12 = (_QWORD *)v11[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v11[2];
            v14 = *v13 == (_QWORD)v11;
            v11 = v13;
          }
          while (!v14);
        }
        v11 = v13;
      }
      while (v13 != (_QWORD *)(a1 + 56));
    }
    if (v6 >= v10)
      sub_100949E24(a1);
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v7 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#LCFusionStats,submitMetrics,less than threshold time to submit metrics", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10215F830);
      LOWORD(v19[0]) = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#LCFusionStats,submitMetrics,less than threshold time to submit metrics", v19, v18);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10094A25C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10094A268(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  unsigned int v33;
  uint64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int32x2_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t v40;
  unsigned int v41;
  uint64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int32x2_t v45;
  NSObject *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  NSObject *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  NSObject *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  NSObject *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  NSObject *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  const char *v133;
  uint8_t *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  const char *v146;
  uint8_t *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  const char *v161;
  uint8_t *v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  const char *v171;
  uint8_t *v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  const char *v185;
  uint8_t *v186;
  uint64_t v187;
  unsigned int v188;
  int32x2_t v189;
  int32x2_t v190;
  int32x2_t v191;
  int32x2_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[6];
  int v199;
  int v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int32x2_t v212;
  int32x2_t v213;
  int32x2_t v214;
  int32x2_t v215;
  int v216;
  int v217;
  __int16 v218;
  int v219;
  __int16 v220;
  int v221;
  __int16 v222;
  int v223;
  __int16 v224;
  int v225;
  __int16 v226;
  int v227;
  __int16 v228;
  int v229;
  __int16 v230;
  int v231;
  __int16 v232;
  int v233;
  __int16 v234;
  int v235;
  __int16 v236;
  int v237;
  __int16 v238;
  int v239;
  __int16 v240;
  int v241;
  __int16 v242;
  int v243;
  __int16 v244;
  int v245;
  __int16 v246;
  int v247;
  __int16 v248;
  int v249;
  __int16 v250;
  int v251;
  __int16 v252;
  unsigned int v253;
  __int16 v254;
  unsigned int v255;
  __int16 v256;
  unsigned int v257;
  __int16 v258;
  int v259;
  __int16 v260;
  int v261;
  __int16 v262;
  int v263;
  __int16 v264;
  int v265;
  uint8_t buf[4];
  int v267;
  __int16 v268;
  int v269;
  __int16 v270;
  int v271;
  __int16 v272;
  int v273;
  __int16 v274;
  int v275;
  __int16 v276;
  int v277;
  __int16 v278;
  int v279;
  __int16 v280;
  int v281;
  __int16 v282;
  int v283;
  __int16 v284;
  int v285;
  __int16 v286;
  int v287;
  __int16 v288;
  int v289;
  __int16 v290;
  int v291;
  __int16 v292;
  int v293;
  __int16 v294;
  int v295;
  __int16 v296;
  int v297;
  __int16 v298;
  int v299;
  __int16 v300;
  int v301;
  __int16 v302;
  unsigned int v303;
  __int16 v304;
  unsigned int v305;
  __int16 v306;
  unsigned int v307;
  __int16 v308;
  int v309;
  __int16 v310;
  int v311;
  __int16 v312;
  int v313;
  __int16 v314;
  int v315;

  if (*(_BYTE *)a2)
  {
    v9 = *(_DWORD *)(a2 + 4);
    v8 = *(_DWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a2 + 12);
    v10 = *(_DWORD *)(a2 + 16);
    v12 = *(_DWORD *)(a2 + 20);
    v13 = v8 + v9 + v11 + v10 + v12;
    if (v13)
    {
      v14 = ((double)v9 * 100.0 / (double)v13);
      v15 = ((double)v8 * 100.0 / (double)v13);
      v16 = ((double)v11 * 100.0 / (double)v13);
      LODWORD(v197) = ((double)v12 * 100.0 / (double)v13);
      HIDWORD(v197) = ((double)v10 * 100.0 / (double)v13);
    }
    else
    {
      v197 = 0;
      v16 = 0;
      v15 = 0;
      v14 = 0;
    }
    v21 = *(_DWORD *)(a2 + 184);
    v20 = *(_DWORD *)(a2 + 188);
    v23 = *(_DWORD *)(a2 + 192);
    v22 = *(_DWORD *)(a2 + 196);
    v24 = v20 + v21 + v23 + v22;
    if (v24)
    {
      LODWORD(v196) = ((double)v20 * 100.0 / (double)v24);
      HIDWORD(v196) = ((double)v21 * 100.0 / (double)v24);
      LODWORD(v195) = ((double)v22 * 100.0 / (double)v24);
      HIDWORD(v195) = ((double)v23 * 100.0 / (double)v24);
    }
    else
    {
      v195 = 0;
      v196 = 0;
    }
    v26 = *(_DWORD *)(a2 + 200);
    v25 = *(_DWORD *)(a2 + 204);
    v28 = *(_DWORD *)(a2 + 208);
    v27 = *(_DWORD *)(a2 + 212);
    v29 = v25 + v26 + v28 + v27;
    if (v29)
    {
      LODWORD(v194) = ((double)v25 * 100.0 / (double)v29);
      HIDWORD(v194) = ((double)v26 * 100.0 / (double)v29);
      LODWORD(v193) = ((double)v27 * 100.0 / (double)v29);
      HIDWORD(v193) = ((double)v28 * 100.0 / (double)v29);
    }
    else
    {
      v193 = 0;
      v194 = 0;
    }
    v31 = *(_QWORD *)(a2 + 232);
    v30 = *(_QWORD *)(a2 + 240);
    v32.i64[0] = v30;
    v32.i64[1] = v31;
    v33 = vaddvq_s32(v32);
    if (v33)
    {
      v34.i64[0] = v31;
      v34.i64[1] = HIDWORD(v31);
      v35 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      v36 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v33), 0);
      v37 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v34), v35), v36)));
      v34.i64[0] = v30;
      v34.i64[1] = HIDWORD(v30);
      v191 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v34), v35), v36)));
      v192 = v37;
    }
    else
    {
      v191 = 0;
      v192 = 0;
    }
    v39 = *(_QWORD *)(a2 + 248);
    v38 = *(_QWORD *)(a2 + 256);
    v40.i64[0] = v38;
    v40.i64[1] = v39;
    v41 = vaddvq_s32(v40);
    if (v41)
    {
      v42.i64[0] = v39;
      v42.i64[1] = HIDWORD(v39);
      v43 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      v44 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v41), 0);
      v45 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v42), v43), v44)));
      v42.i64[0] = v38;
      v42.i64[1] = HIDWORD(v38);
      v189 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v42), v43), v44)));
      v190 = v45;
    }
    else
    {
      v189 = 0;
      v190 = 0;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v46 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      v48 = *(_DWORD *)(a2 + 144);
      v47 = *(_DWORD *)(a2 + 148);
      v49 = *(_DWORD *)(a2 + 152);
      v50 = *(_DWORD *)(a2 + 156);
      v52 = *(_DWORD *)(a2 + 136);
      v51 = *(_DWORD *)(a2 + 140);
      v53 = *(_DWORD *)(a2 + 120);
      v54 = *(_DWORD *)(a2 + 124);
      v55 = *(_DWORD *)(a2 + 128);
      v56 = *(_DWORD *)(a2 + 132);
      v58 = *(_DWORD *)(a2 + 60);
      v57 = *(_DWORD *)(a2 + 64);
      v59 = *(_DWORD *)(a2 + 48);
      v60 = *(_DWORD *)(a2 + 52);
      v61 = *(_DWORD *)(a2 + 56);
      v62 = *(_DWORD *)(a2 + 40);
      v63 = *(_DWORD *)(a2 + 44);
      v65 = *(_DWORD *)(a2 + 32);
      v64 = *(_DWORD *)(a2 + 36);
      *(_DWORD *)buf = 67245056;
      v267 = a4;
      v268 = 1026;
      v269 = v49;
      v270 = 1026;
      v271 = v47;
      v272 = 1026;
      v273 = v53;
      v274 = 1026;
      v275 = v48;
      v276 = 1026;
      v277 = v51;
      v278 = 1026;
      v279 = v50;
      v280 = 1026;
      v281 = v55;
      v282 = 1026;
      v283 = v52;
      v284 = 1026;
      v285 = v54;
      v286 = 1026;
      v287 = v56;
      v288 = 1026;
      v289 = v62;
      v290 = 1026;
      v291 = v59;
      v292 = 1026;
      v293 = v57;
      v294 = 1026;
      v295 = v61;
      v296 = 1026;
      v297 = v60;
      v298 = 1026;
      v299 = v64;
      v300 = 1026;
      v301 = v58;
      v302 = 1026;
      v303 = v63;
      v304 = 1026;
      v305 = v65;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,dynamics mode,loc rejection reason,visitContext,%{public}d,cntDynModeAirborneHighG,%{public}d,cntDynModeAirborneLowG,%{public}d,cntDynModeGeneralPurpose,%{public}d,cntDynModeGroundVehicleFast,%{public}d,cntDynModeGroundVehicleSlow,%{public}d,cntDynModeLsqTest,%{public}d,cntDynModeMovPed,%{public}d,cntDynModeRunning,%{public}d,cntDynModeStationaryKnown,%{public}d,cntDynModeWalking,%{public}d,cntRejReasonDuplicateLocation,%{public}d,cntRejReasonGrossOutlier,%{public}d,cntRejReasonHypothesisSelectionFailed,%{public}d,cntRejReasonInconsistentCellPosition,%{public}d,cntRejReasonIndoorFavoringWiFiAP,%{public}d,cntRejReasonInvalidLocation,%{public}d,cntRejReasonLowAccuracyCellOrWiFiPosition,%{public}d,cntRejReasonOldLocation,%{public}d,cntRejReasonOther,%{public}d,", buf, 0x7Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      v188 = v14;
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10215F830);
      v115 = *(_DWORD *)(a2 + 144);
      v114 = *(_DWORD *)(a2 + 148);
      v116 = *(_DWORD *)(a2 + 152);
      v117 = *(_DWORD *)(a2 + 156);
      v119 = *(_DWORD *)(a2 + 136);
      v118 = *(_DWORD *)(a2 + 140);
      v120 = *(_DWORD *)(a2 + 120);
      v121 = *(_DWORD *)(a2 + 124);
      v122 = *(_DWORD *)(a2 + 128);
      v123 = *(_DWORD *)(a2 + 132);
      v125 = *(_DWORD *)(a2 + 60);
      v124 = *(_DWORD *)(a2 + 64);
      v126 = *(_DWORD *)(a2 + 48);
      v127 = *(_DWORD *)(a2 + 52);
      v128 = *(_DWORD *)(a2 + 56);
      v129 = *(_DWORD *)(a2 + 40);
      v130 = *(_DWORD *)(a2 + 44);
      v132 = *(_DWORD *)(a2 + 32);
      v131 = *(_DWORD *)(a2 + 36);
      v216 = 67245056;
      v217 = a4;
      v218 = 1026;
      v219 = v116;
      v220 = 1026;
      v221 = v114;
      v222 = 1026;
      v223 = v120;
      v224 = 1026;
      v225 = v115;
      v226 = 1026;
      v227 = v118;
      v228 = 1026;
      v229 = v117;
      v230 = 1026;
      v231 = v122;
      v232 = 1026;
      v233 = v119;
      v234 = 1026;
      v235 = v121;
      v236 = 1026;
      v237 = v123;
      v238 = 1026;
      v239 = v129;
      v240 = 1026;
      v241 = v126;
      v242 = 1026;
      v243 = v124;
      v244 = 1026;
      v245 = v128;
      v246 = 1026;
      v247 = v127;
      v248 = 1026;
      v249 = v131;
      v250 = 1026;
      v251 = v125;
      v252 = 1026;
      v253 = v130;
      v254 = 1026;
      v255 = v132;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,dynamics mode,loc rejection reason,visitContext,%{public}d,cntDynModeAirborneHighG,%{public}d,cntDynModeAirborneLowG,%{public}d,cntDynModeGeneralPurpose,%{public}d,cntDynModeGroundVehicleFast,%{public}d,cntDynModeGroundVehicleSlow,%{public}d,cntDynModeLsqTest,%{public}d,cntDynModeMovPed,%{public}d,cntDynModeRunning,%{public}d,cntDynModeStationaryKnown,%{public}d,cntDynModeWalking,%{public}d,cntRejReasonDuplicateLocation,%{public}d,cntRejReasonGrossOutlier,%{public}d,cntRejReasonHypothesisSelectionFailed,%{public}d,cntRejReasonInconsistentCellPosition,%{public}d,cntRejReasonIndoorFavoringWiFiAP,%{public}d,cntRejReasonInvalidLocation,%{public}d,cntRejReasonLowAccuracyCellOrWiFiPosition,%{public}d,cntRejReasonOldLocation,%{public}d,cntRejReasonOther,%{public}d,", &v216, 122, qword_1022A01B8);
      v134 = (uint8_t *)v133;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v133);
      v14 = v188;
      if (v134 != buf)
        free(v134);
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v66 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      v67 = *(_DWORD *)(a2 + 168);
      v68 = *(_DWORD *)(a2 + 172);
      v69 = *(_DWORD *)(a2 + 176);
      v70 = *(_DWORD *)(a2 + 180);
      v72 = *(_DWORD *)(a2 + 72);
      v71 = *(_DWORD *)(a2 + 76);
      v73 = *(_DWORD *)(a2 + 160);
      v74 = *(_DWORD *)(a2 + 164);
      v75 = *(_DWORD *)(a2 + 68);
      v76 = *(_DWORD *)(a2 + 24);
      v77 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)buf = 67246336;
      v267 = a4;
      v268 = 1026;
      v269 = v73;
      v270 = 1026;
      v271 = v75;
      v272 = 1026;
      v273 = v67;
      v274 = 1026;
      v275 = v68;
      v276 = 1026;
      v277 = v69;
      v278 = 1026;
      v279 = v70;
      v280 = 1026;
      v281 = v71;
      v282 = 1026;
      v283 = v74;
      v284 = 1026;
      v285 = v72;
      v286 = 1026;
      v287 = v77;
      v288 = 1026;
      v289 = v76;
      v290 = 1026;
      v291 = HIDWORD(v196);
      v292 = 1026;
      v293 = v196;
      v294 = 1026;
      v295 = HIDWORD(v195);
      v296 = 1026;
      v297 = v195;
      v298 = 1026;
      v299 = v197;
      v300 = 1026;
      v301 = HIDWORD(v197);
      v302 = 1026;
      v303 = v16;
      v304 = 1026;
      v305 = v15;
      v306 = 1026;
      v307 = v14;
      v308 = 1026;
      v309 = HIDWORD(v194);
      v310 = 1026;
      v311 = v194;
      v312 = 1026;
      v313 = HIDWORD(v193);
      v314 = 1026;
      v315 = v193;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,hypothesis,visitContext,%{public}d,cntGPSFuserDistanceGT500m,%{public}d,cntGPSIsYieldingButNotSelected,%{public}d,cntHypoDistanceLT50m,%{public}d,cntHypoDistanceGT50mLT100m,%{public}d,cntHypoDistanceGT100mLT200m,%{public}d,cntHypoDistanceGT200m,%{public}d,cntHypoCreated,%{public}d,cntWiFiFuserDistanceGT500m,%{public}d,cntLikelihoodOutlierRej,%{public}d,maxEuclideanDistBtwnActiveHypo,%{public}d,maxMDistBtwnActiveHypo,%{public}d,pctGPSFuserDistLT50m,%{public}d,pctGPSFuserDistGT50mLT100m,%{public}d,pctGPSFuserDistGT100mLT200m,%{public}d,pctGPSFuserDistGT200m,%{public}d,pctFixesWithMoreThanFourHypoActive,%{public}d,pctFixesWithFourHypoActive,%{public}d,pctFixesWithThreeHypoActive,%{public}d,pctFixesWithTwoHypoActive,%{public}d,pctFixesWithOneHypoActive,%{public}d,pctWiFiFuserDistLT50m,%{public}d,pctWiFiFuserDistGT50mLT100m,%{public}d,pctWiFiFuserDistGT100mLT200m,%{public}d,pctWiFiFuserDistGT200m,%{public}d,", buf, 0x98u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10215F830);
      v135 = *(_DWORD *)(a2 + 168);
      v136 = *(_DWORD *)(a2 + 172);
      v137 = *(_DWORD *)(a2 + 176);
      v138 = *(_DWORD *)(a2 + 180);
      v140 = *(_DWORD *)(a2 + 72);
      v139 = *(_DWORD *)(a2 + 76);
      v141 = *(_DWORD *)(a2 + 160);
      v142 = *(_DWORD *)(a2 + 164);
      v143 = *(_DWORD *)(a2 + 68);
      v144 = *(_DWORD *)(a2 + 24);
      v145 = *(_DWORD *)(a2 + 28);
      v216 = 67246336;
      v217 = a4;
      v218 = 1026;
      v219 = v141;
      v220 = 1026;
      v221 = v143;
      v222 = 1026;
      v223 = v135;
      v224 = 1026;
      v225 = v136;
      v226 = 1026;
      v227 = v137;
      v228 = 1026;
      v229 = v138;
      v230 = 1026;
      v231 = v139;
      v232 = 1026;
      v233 = v142;
      v234 = 1026;
      v235 = v140;
      v236 = 1026;
      v237 = v145;
      v238 = 1026;
      v239 = v144;
      v240 = 1026;
      v241 = HIDWORD(v196);
      v242 = 1026;
      v243 = v196;
      v244 = 1026;
      v245 = HIDWORD(v195);
      v246 = 1026;
      v247 = v195;
      v248 = 1026;
      v249 = v197;
      v250 = 1026;
      v251 = HIDWORD(v197);
      v252 = 1026;
      v253 = v16;
      v254 = 1026;
      v255 = v15;
      v256 = 1026;
      v257 = v14;
      v258 = 1026;
      v259 = HIDWORD(v194);
      v260 = 1026;
      v261 = v194;
      v262 = 1026;
      v263 = HIDWORD(v193);
      v264 = 1026;
      v265 = v193;
      LODWORD(v187) = 152;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,hypothesis,visitContext,%{public}d,cntGPSFuserDistanceGT500m,%{public}d,cntGPSIsYieldingButNotSelected,%{public}d,cntHypoDistanceLT50m,%{public}d,cntHypoDistanceGT50mLT100m,%{public}d,cntHypoDistanceGT100mLT200m,%{public}d,cntHypoDistanceGT200m,%{public}d,cntHypoCreated,%{public}d,cntWiFiFuserDistanceGT500m,%{public}d,cntLikelihoodOutlierRej,%{public}d,maxEuclideanDistBtwnActiveHypo,%{public}d,maxMDistBtwnActiveHypo,%{public}d,pctGPSFuserDistLT50m,%{public}d,pctGPSFuserDistGT50mLT100m,%{public}d,pctGPSFuserDistGT100mLT200m,%{public}d,pctGPSFuserDistGT200m,%{public}d,pctFixesWithMoreThanFourHypoActive,%{public}d,pctFixesWithFourHypoActive,%{public}d,pctFixesWithThreeHypoActive,%{public}d,pctFixesWithTwoHypoActive,%{public}d,pctFixesWithOneHypoActive,%{public}d,pctWiFiFuserDistLT50m,%{public}d,pctWiFiFuserDistGT50mLT100m,%{public}d,pctWiFiFuserDistGT100mLT200m,%{public}d,pctWiFiFuserDistGT200m,%{public}d,", &v216, v187);
      v147 = (uint8_t *)v146;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v146);
      if (v147 != buf)
        free(v147);
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v78 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      v79 = *(_DWORD *)(a2 + 4);
      v80 = *(_DWORD *)(a2 + 8);
      v81 = *(_DWORD *)(a2 + 12);
      v82 = *(_DWORD *)(a2 + 16);
      v83 = *(_DWORD *)(a2 + 20);
      v84 = *(_DWORD *)(a2 + 184);
      v85 = *(_DWORD *)(a2 + 188);
      v86 = *(_DWORD *)(a2 + 192);
      v87 = *(_DWORD *)(a2 + 196);
      v89 = *(_DWORD *)(a2 + 200);
      v88 = *(_DWORD *)(a2 + 204);
      v90 = *(_DWORD *)(a2 + 208);
      v91 = *(_DWORD *)(a2 + 212);
      *(_DWORD *)buf = 67243520;
      v267 = a4;
      v268 = 1026;
      v269 = v79;
      v270 = 1026;
      v271 = v80;
      v272 = 1026;
      v273 = v81;
      v274 = 1026;
      v275 = v82;
      v276 = 1026;
      v277 = v83;
      v278 = 1026;
      v279 = v84;
      v280 = 1026;
      v281 = v85;
      v282 = 1026;
      v283 = v86;
      v284 = 1026;
      v285 = v87;
      v286 = 1026;
      v287 = v89;
      v288 = 1026;
      v289 = v88;
      v290 = 1026;
      v291 = v90;
      v292 = 1026;
      v293 = v91;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,hypotheses count valuesvisitContext,%{public}d,cntFixesWithOneHypothesActive,%{public}d,cntFixesWithTwoHypothesActive,%{public}d,cntFixesWithThreeHypothesActive,%{public}d,cntFixesWithFourHypothesActive,%{public}d,cntFixesWithMoreThanFourHypothesActive,%{public}d,cntGPSFuserDistanceLT50m,%{public}d,cntGPSFuserDistanceGT50mLT100m,%{public}d,cntGPSFuserDistanceGT100mLT200m,%{public}d,cntGPSFuserDistanceGT200m,%{public}d,cntWiFiFuserDistanceLT50m,%{public}d,cntWiFiFuserDistanceGT50mLT100m,%{public}d,cntWiFiFuserDistanceGT100mLT200m,%{public}d,cntWiFiFuserDistanceGT200m,%{public}d,", buf, 0x56u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10215F830);
      v148 = *(_DWORD *)(a2 + 4);
      v149 = *(_DWORD *)(a2 + 8);
      v150 = *(_DWORD *)(a2 + 12);
      v151 = *(_DWORD *)(a2 + 16);
      v152 = *(_DWORD *)(a2 + 20);
      v153 = *(_DWORD *)(a2 + 184);
      v154 = *(_DWORD *)(a2 + 188);
      v155 = *(_DWORD *)(a2 + 192);
      v156 = *(_DWORD *)(a2 + 196);
      v158 = *(_DWORD *)(a2 + 200);
      v157 = *(_DWORD *)(a2 + 204);
      v159 = *(_DWORD *)(a2 + 208);
      v160 = *(_DWORD *)(a2 + 212);
      v216 = 67243520;
      v217 = a4;
      v218 = 1026;
      v219 = v148;
      v220 = 1026;
      v221 = v149;
      v222 = 1026;
      v223 = v150;
      v224 = 1026;
      v225 = v151;
      v226 = 1026;
      v227 = v152;
      v228 = 1026;
      v229 = v153;
      v230 = 1026;
      v231 = v154;
      v232 = 1026;
      v233 = v155;
      v234 = 1026;
      v235 = v156;
      v236 = 1026;
      v237 = v158;
      v238 = 1026;
      v239 = v157;
      v240 = 1026;
      v241 = v159;
      v242 = 1026;
      v243 = v160;
      LODWORD(v187) = 86;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,hypotheses count valuesvisitContext,%{public}d,cntFixesWithOneHypothesActive,%{public}d,cntFixesWithTwoHypothesActive,%{public}d,cntFixesWithThreeHypothesActive,%{public}d,cntFixesWithFourHypothesActive,%{public}d,cntFixesWithMoreThanFourHypothesActive,%{public}d,cntGPSFuserDistanceLT50m,%{public}d,cntGPSFuserDistanceGT50mLT100m,%{public}d,cntGPSFuserDistanceGT100mLT200m,%{public}d,cntGPSFuserDistanceGT200m,%{public}d,cntWiFiFuserDistanceLT50m,%{public}d,cntWiFiFuserDistanceGT50mLT100m,%{public}d,cntWiFiFuserDistanceGT100mLT200m,%{public}d,cntWiFiFuserDistanceGT200m,%{public}d,", &v216, v187);
      v162 = (uint8_t *)v161;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v161);
      if (v162 != buf)
        free(v162);
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v92 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      v94 = *(_DWORD *)(a2 + 80);
      v93 = *(_DWORD *)(a2 + 84);
      v95 = *(_DWORD *)(a2 + 88);
      v96 = *(_DWORD *)(a2 + 92);
      v98 = *(_DWORD *)(a2 + 104);
      v97 = *(_DWORD *)(a2 + 108);
      v100 = *(_DWORD *)(a2 + 96);
      v99 = *(_DWORD *)(a2 + 100);
      *(_DWORD *)buf = 67242240;
      v267 = a4;
      v268 = 1026;
      v269 = v93;
      v270 = 1026;
      v271 = v94;
      v272 = 1026;
      v273 = v95;
      v274 = 1026;
      v275 = v96;
      v276 = 1026;
      v277 = v97;
      v278 = 1026;
      v279 = v99;
      v280 = 1026;
      v281 = v98;
      v282 = 1026;
      v283 = v100;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,io,visitContext,%{public}d,cntBioDispGTExpected,%{public}d,cntBioDispLargeGapInIO,%{public}d,cntIODerivedMotionSpeedMatchMotionActivity,%{public}d,cntIODerivedMotionSpeedMisMatchMotionActivity,%{public}d,cntIOMotionActivityMovingGroundVehicle,%{public}d,cntIOMotionActivityMovingInPlace,%{public}d,cntIOMotionActivityMovingWithPurpose,%{public}d,cntIOMotionActivityStationary,%{public}d,", buf, 0x38u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10215F830);
      v164 = *(_DWORD *)(a2 + 80);
      v163 = *(_DWORD *)(a2 + 84);
      v165 = *(_DWORD *)(a2 + 88);
      v166 = *(_DWORD *)(a2 + 92);
      v168 = *(_DWORD *)(a2 + 104);
      v167 = *(_DWORD *)(a2 + 108);
      v170 = *(_DWORD *)(a2 + 96);
      v169 = *(_DWORD *)(a2 + 100);
      v216 = 67242240;
      v217 = a4;
      v218 = 1026;
      v219 = v163;
      v220 = 1026;
      v221 = v164;
      v222 = 1026;
      v223 = v165;
      v224 = 1026;
      v225 = v166;
      v226 = 1026;
      v227 = v167;
      v228 = 1026;
      v229 = v169;
      v230 = 1026;
      v231 = v168;
      v232 = 1026;
      v233 = v170;
      LODWORD(v187) = 56;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,io,visitContext,%{public}d,cntBioDispGTExpected,%{public}d,cntBioDispLargeGapInIO,%{public}d,cntIODerivedMotionSpeedMatchMotionActivity,%{public}d,cntIODerivedMotionSpeedMisMatchMotionActivity,%{public}d,cntIOMotionActivityMovingGroundVehicle,%{public}d,cntIOMotionActivityMovingInPlace,%{public}d,cntIOMotionActivityMovingWithPurpose,%{public}d,cntIOMotionActivityStationary,%{public}d,", &v216, v187);
      v172 = (uint8_t *)v171;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v171);
      if (v172 != buf)
        free(v172);
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v101 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      v102 = *(_DWORD *)(a2 + 216);
      v103 = *(_DWORD *)(a2 + 220);
      v104 = *(_DWORD *)(a2 + 224);
      v105 = *(_DWORD *)(a2 + 228);
      v106 = *(_DWORD *)(a2 + 232);
      v107 = *(_DWORD *)(a2 + 236);
      v108 = *(_DWORD *)(a2 + 240);
      v109 = *(_DWORD *)(a2 + 244);
      v110 = *(_DWORD *)(a2 + 248);
      v111 = *(_DWORD *)(a2 + 252);
      v112 = *(_DWORD *)(a2 + 256);
      v113 = *(_DWORD *)(a2 + 260);
      *(_DWORD *)buf = 67243264;
      v267 = a4;
      v268 = 1026;
      v269 = v102;
      v270 = 1026;
      v271 = v103;
      v272 = 1026;
      v273 = v104;
      v274 = 1026;
      v275 = v105;
      v276 = 1026;
      v277 = v106;
      v278 = 1026;
      v279 = v107;
      v280 = 1026;
      v281 = v108;
      v282 = 1026;
      v283 = v109;
      v284 = 1026;
      v285 = v110;
      v286 = 1026;
      v287 = v111;
      v288 = 1026;
      v289 = v112;
      v290 = 1026;
      v291 = v113;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,Mahalanobis distances,UncLT50m,visitContext,%{public}d,CountHypoDistLT2Sd,%{public}d,CountHypoDistGT2SdLT3Sd,%{public}d,CountHypoDistGT3SdLTThresholdSd,%{public}d,CountHypoDistGTThresholdSd,%{public}d,CountGPSFuserDistLT2Sd,%{public}d,CountGPSFuserDistGT2SdLT3Sd,%{public}d,CountGPSFuserDistGT3SdLTThresholdSd,%{public}d,CountGPSFuserDistGTThresholdSd,%{public}d,CountWiFiFuserDistLT2Sd,%{public}d,CountWiFiFuserDistGT2SdLT3Sd,%{public}d,CountWiFiFuserDistGT3SdLTThresholdSd,%{public}d,CountWiFiFuserDistGTThresholdSd,%{public}d,", buf, 0x50u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10215F830);
      v173 = *(_DWORD *)(a2 + 216);
      v174 = *(_DWORD *)(a2 + 220);
      v175 = *(_DWORD *)(a2 + 224);
      v176 = *(_DWORD *)(a2 + 228);
      v177 = *(_DWORD *)(a2 + 232);
      v178 = *(_DWORD *)(a2 + 236);
      v179 = *(_DWORD *)(a2 + 240);
      v180 = *(_DWORD *)(a2 + 244);
      v181 = *(_DWORD *)(a2 + 248);
      v182 = *(_DWORD *)(a2 + 252);
      v183 = *(_DWORD *)(a2 + 256);
      v184 = *(_DWORD *)(a2 + 260);
      v216 = 67243264;
      v217 = a4;
      v218 = 1026;
      v219 = v173;
      v220 = 1026;
      v221 = v174;
      v222 = 1026;
      v223 = v175;
      v224 = 1026;
      v225 = v176;
      v226 = 1026;
      v227 = v177;
      v228 = 1026;
      v229 = v178;
      v230 = 1026;
      v231 = v179;
      v232 = 1026;
      v233 = v180;
      v234 = 1026;
      v235 = v181;
      v236 = 1026;
      v237 = v182;
      v238 = 1026;
      v239 = v183;
      v240 = 1026;
      v241 = v184;
      LODWORD(v187) = 80;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,Mahalanobis distances,UncLT50m,visitContext,%{public}d,CountHypoDistLT2Sd,%{public}d,CountHypoDistGT2SdLT3Sd,%{public}d,CountHypoDistGT3SdLTThresholdSd,%{public}d,CountHypoDistGTThresholdSd,%{public}d,CountGPSFuserDistLT2Sd,%{public}d,CountGPSFuserDistGT2SdLT3Sd,%{public}d,CountGPSFuserDistGT3SdLTThresholdSd,%{public}d,CountGPSFuserDistGTThresholdSd,%{public}d,CountWiFiFuserDistLT2Sd,%{public}d,CountWiFiFuserDistGT2SdLT3Sd,%{public}d,CountWiFiFuserDistGT3SdLTThresholdSd,%{public}d,CountWiFiFuserDistGTThresholdSd,%{public}d,", &v216, v187);
      v186 = (uint8_t *)v185;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v185);
      if (v186 != buf)
        free(v186);
    }
    if (a3)
    {
      *(double *)(a1 + 72) = sub_1001FCBB4();
    }
    else
    {
      v198[0] = _NSConcreteStackBlock;
      v198[1] = 3221225472;
      v198[2] = sub_10094B454;
      v198[3] = &unk_10215F810;
      v198[4] = a1;
      v198[5] = a2;
      v199 = a4;
      v200 = HIDWORD(v195);
      v201 = v195;
      v202 = v196;
      v203 = HIDWORD(v197);
      v204 = v197;
      v205 = v14;
      v206 = v16;
      v207 = v15;
      v208 = HIDWORD(v194);
      v209 = v194;
      v210 = HIDWORD(v193);
      v211 = v193;
      v212 = vrev64_s32(v191);
      v213 = vrev64_s32(v192);
      v214 = vrev64_s32(v189);
      v215 = vrev64_s32(v190);
      AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.LCFuserInternalHomeVisitMetrics"), v198);
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v17 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v267 = a4;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#LCFusionStats,submitMetrics,no data for visitContext,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10215F830);
      v216 = 67240192;
      v217 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#LCFusionStats,submitMetrics,no data for visitContext,%{public}d", &v216, 8);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
}

void sub_10094B448(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

NSDictionary *sub_10094B454(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[69];
  _QWORD v5[69];

  v4[0] = CFSTR("CountBIODisplacementMoreThanExpected");
  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 84));
  v4[1] = CFSTR("CountBIOResetLargeGapInIOData");
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 80));
  v4[2] = CFSTR("CountDynamicsModeAirborneHighG");
  v5[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 152));
  v4[3] = CFSTR("CountDynamicsModeAirborneLowG");
  v5[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 148));
  v4[4] = CFSTR("CountDynamicsModeGeneralPurposeMode");
  v5[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 120));
  v4[5] = CFSTR("CountDynamicsModeGroundVehicleFast");
  v5[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 144));
  v4[6] = CFSTR("CountDynamicsModeGroundVehicleSlow");
  v5[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 140));
  v4[7] = CFSTR("CountDynamicsModeLsqTestMode");
  v5[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 156));
  v4[8] = CFSTR("CountDynamicsModeMovingPedestrian");
  v5[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 128));
  v4[9] = CFSTR("CountDynamicsModeRunning");
  v5[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 136));
  v4[10] = CFSTR("CountDynamicsModeStationaryKnown");
  v5[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 124));
  v4[11] = CFSTR("CountDynamicsModeWalking");
  v5[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 132));
  v4[12] = CFSTR("CountGPSFuserDistanceGT500m");
  v5[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 160));
  v4[13] = CFSTR("CountGPSIsYieldingButNotSelected");
  v5[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 68));
  v4[14] = CFSTR("CountHypoDistanceGT100mLT200mHypoUncLT50m");
  v5[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v4[15] = CFSTR("CountHypoDistanceGT200mHypoUncLT50m");
  v5[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
  v4[16] = CFSTR("CountHypoDistanceGT50mLT100mHypoUncLT50m");
  v5[16] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 172));
  v4[17] = CFSTR("CountHypoDistanceLT50mHypoUncLT50m");
  v5[17] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 168));
  v4[18] = CFSTR("CountIODerivedMotionSpeedMatchMotionActivity");
  v5[18] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 88));
  v4[19] = CFSTR("CountIODerivedMotionSpeedMisMatchMotionActivity");
  v5[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 92));
  v4[20] = CFSTR("CountIOMotionActivityMovingGroundVehicle");
  v5[20] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 108));
  v4[21] = CFSTR("CountIOMotionActivityMovingInPlace");
  v5[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 100));
  v4[22] = CFSTR("CountIOMotionActivityMovingWithPurpose");
  v5[22] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 104));
  v4[23] = CFSTR("CountIOMotionActivityStationary");
  v5[23] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 96));
  v4[24] = CFSTR("CountLocRejectionReasonDuplicateLocation");
  v5[24] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 40));
  v4[25] = CFSTR("CountLocRejectionReasonGrossOutlier");
  v5[25] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 48));
  v4[26] = CFSTR("CountLocRejectionReasonHypothesisSelectionFailed");
  v5[26] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 64));
  v4[27] = CFSTR("CountLocRejectionReasonInconsistentCellPosition");
  v5[27] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 56));
  v4[28] = CFSTR("CountLocRejectionReasonIndoorFavoringWiFiAP");
  v5[28] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 52));
  v4[29] = CFSTR("CountLocRejectionReasonInvalidLocation");
  v5[29] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 36));
  v4[30] = CFSTR("CountLocRejectionReasonLowAccuracyCellOrWiFiPosition");
  v5[30] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 60));
  v4[31] = CFSTR("CountLocRejectionReasonOldLocation");
  v5[31] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 44));
  v4[32] = CFSTR("CountLocRejectionReasonOther");
  v5[32] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 32));
  v4[33] = CFSTR("CountOfHypothesisCreated");
  v5[33] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 76));
  v4[34] = CFSTR("CountWiFiFuserDistanceGT500m");
  v5[34] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 164));
  v5[35] = &off_10221B810;
  v4[35] = CFSTR("CumulativeDistanceWanderWhenStatic");
  v4[36] = CFSTR("LCFuserInternalMetricsVisitContext");
  v5[36] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48));
  v4[37] = CFSTR("LCFuserInternalSignalEnvironmentForHomeVisit");
  v5[37] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 40));
  v4[38] = CFSTR("LikelihoodOutlierRejectionCount");
  v5[38] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 72));
  v4[39] = CFSTR("MaxEuclideanDistBtwnActiveHypothesis");
  v5[39] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 28));
  v5[40] = &off_10221B810;
  v4[40] = CFSTR("MaxFusionHypothesisConvergenceSeconds");
  v4[41] = CFSTR("MaxIODerivedGroundSpeed");
  v5[41] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 112));
  v4[42] = CFSTR("MaxLocDistanceWithIOMotionStationary");
  v5[42] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 116));
  v4[43] = CFSTR("MaxMahalanobisDistBtwnActiveHypothesis");
  v5[43] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 24));
  v4[44] = CFSTR("PctGPSFuserDistanceGT100mLT200mGPSUncLT50m");
  v5[44] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 52));
  v4[45] = CFSTR("PctGPSFuserDistanceGT200mGPSUncLT50m");
  v5[45] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56));
  v4[46] = CFSTR("PctGPSFuserDistanceGT50mLT100mGPSUncLT50m");
  v5[46] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 60));
  v4[47] = CFSTR("PctGPSFuserDistanceLT50mGPSUncLT50m");
  v5[47] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 64));
  v4[48] = CFSTR("PctOfFixesWithFourHypothesActive");
  v5[48] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 68));
  v4[49] = CFSTR("PctOfFixesWithMoreThanFourHypothesActive");
  v5[49] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72));
  v4[50] = CFSTR("PctOfFixesWithOneHypothesActive");
  v5[50] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 76));
  v4[51] = CFSTR("PctOfFixesWithThreeHypothesActive");
  v5[51] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80));
  v4[52] = CFSTR("PctOfFixesWithTwoHypothesActive");
  v5[52] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 84));
  v4[53] = CFSTR("PctWiFiFuserDistanceGT100mLT200mFuserUncLT50m");
  v5[53] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 88));
  v4[54] = CFSTR("PctWiFiFuserDistanceGT200mFuserUncLT50m");
  v5[54] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 92));
  v4[55] = CFSTR("PctWiFiFuserDistanceGT50mLT100mFuserUncLT50m");
  v5[55] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 96));
  v4[56] = CFSTR("PctWiFiFuserDistanceLT50mFuserUncLT50m");
  v5[56] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 100));
  v4[57] = CFSTR("CountHypoDistanceGTThresholdSdHypoUncLT50m");
  v5[57] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 228));
  v4[58] = CFSTR("CountHypoDistanceGT3SdLTThresholdHypoUncLT50m");
  v5[58] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 224));
  v4[59] = CFSTR("CountHypoDistanceGT2SdLT3SdHypoUncLT50m");
  v5[59] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 220));
  v4[60] = CFSTR("CountHypoDistanceLT2SdHypoUncLT50m");
  v5[60] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 216));
  v4[61] = CFSTR("PctGPSFuserDistanceGTThresholdSdGPSUncLT50m");
  v5[61] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 104));
  v4[62] = CFSTR("PctGPSFuserDistanceGT3SdLTThresholdGPSUncLT50m");
  v5[62] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 108));
  v4[63] = CFSTR("PctGPSFuserDistanceGT2SdLT3SdGPSUncLT50m");
  v5[63] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 112));
  v4[64] = CFSTR("PctGPSFuserDistanceLT2SdGPSUncLT50m");
  v5[64] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 116));
  v4[65] = CFSTR("PctWiFiFuserDistanceGTThresholdSdFuserUncLT50m");
  v5[65] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 120));
  v4[66] = CFSTR("PctWiFiFuserDistanceGT3SdLTThresholdFuserUncLT50m");
  v5[66] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 124));
  v4[67] = CFSTR("PctWiFiFuserDistanceGT2SdLT3SdFuserUncLT50m");
  v5[67] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 128));
  v4[68] = CFSTR("PctWiFiFuserDistanceLT2SdFuserUncLT50m");
  v5[68] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 132));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 69);
}

uint64_t sub_10094BCF4(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  char v8;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 24);
    v4 = result + 56;
    do
    {
      v5 = *(_DWORD *)(v2 + 28);
      v6 = v5 < v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      v8 = *(_BYTE *)(v4 + 32);
      *(_BYTE *)(v4 + 32) = 1;
      switch(a2)
      {
        case 0:
          ++*(_DWORD *)(v4 + 152);
          break;
        case 1:
          ++*(_DWORD *)(v4 + 156);
          break;
        case 3:
          ++*(_DWORD *)(v4 + 160);
          break;
        case 4:
          ++*(_DWORD *)(v4 + 164);
          break;
        case 5:
          ++*(_DWORD *)(v4 + 168);
          break;
        case 6:
          ++*(_DWORD *)(v4 + 172);
          break;
        case 7:
          ++*(_DWORD *)(v4 + 176);
          break;
        case 8:
          ++*(_DWORD *)(v4 + 180);
          break;
        case 9:
          ++*(_DWORD *)(v4 + 184);
          break;
        case 10:
          ++*(_DWORD *)(v4 + 188);
          break;
        default:
          *(_BYTE *)(v4 + 32) = v8;
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10094BE14(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  char v8;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 24);
    v4 = result + 56;
    do
    {
      v5 = *(_DWORD *)(v2 + 28);
      v6 = v5 < v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      v8 = *(_BYTE *)(v4 + 32);
      *(_BYTE *)(v4 + 32) = 1;
      switch(a2)
      {
        case 1:
          ++*(_DWORD *)(v4 + 128);
          break;
        case 2:
          ++*(_DWORD *)(v4 + 132);
          break;
        case 3:
          ++*(_DWORD *)(v4 + 136);
          break;
        case 4:
          ++*(_DWORD *)(v4 + 140);
          break;
        default:
          *(_BYTE *)(v4 + 32) = v8;
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10094BED4(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 24);
    v4 = result + 56;
    do
    {
      v5 = *(_DWORD *)(v2 + 28);
      v6 = v5 < v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      *(_BYTE *)(v4 + 32) = 1;
      switch(a2)
      {
        case 1u:
          v8 = (_DWORD *)(v4 + 36);
          goto LABEL_18;
        case 2u:
          v8 = (_DWORD *)(v4 + 40);
          goto LABEL_18;
        case 3u:
          v8 = (_DWORD *)(v4 + 44);
          goto LABEL_18;
        case 4u:
          v8 = (_DWORD *)(v4 + 48);
          goto LABEL_18;
        default:
          if (a2 < 5)
            return result;
          v8 = (_DWORD *)(v4 + 52);
LABEL_18:
          ++*v8;
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10094BF80(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  char v8;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 24);
    v4 = result + 56;
    do
    {
      v5 = *(_DWORD *)(v2 + 28);
      v6 = v5 < v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      v8 = *(_BYTE *)(v4 + 32);
      *(_BYTE *)(v4 + 32) = 1;
      switch(a2)
      {
        case 1:
          ++*(_DWORD *)(v4 + 64);
          break;
        case 2:
          ++*(_DWORD *)(v4 + 68);
          break;
        case 3:
          ++*(_DWORD *)(v4 + 72);
          break;
        case 4:
          ++*(_DWORD *)(v4 + 76);
          break;
        case 5:
          ++*(_DWORD *)(v4 + 80);
          break;
        case 6:
          ++*(_DWORD *)(v4 + 84);
          break;
        case 7:
          ++*(_DWORD *)(v4 + 88);
          break;
        case 8:
          ++*(_DWORD *)(v4 + 92);
          break;
        case 9:
          ++*(_DWORD *)(v4 + 96);
          break;
        default:
          *(_BYTE *)(v4 + 32) = v8;
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10094C090(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;

  v1 = *(_QWORD *)(result + 56);
  if (v1)
  {
    v2 = *(_DWORD *)(result + 24);
    v3 = result + 56;
    do
    {
      v4 = *(_DWORD *)(v1 + 28);
      v5 = v4 < v2;
      if (v4 >= v2)
        v6 = (uint64_t *)v1;
      else
        v6 = (uint64_t *)(v1 + 8);
      if (!v5)
        v3 = v1;
      v1 = *v6;
    }
    while (*v6);
    if (v3 != result + 56 && v2 >= *(_DWORD *)(v3 + 28))
    {
      *(_BYTE *)(v3 + 32) = 1;
      ++*(_DWORD *)(v3 + 100);
    }
  }
  return result;
}

uint64_t sub_10094C0EC(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;

  v1 = *(_QWORD *)(result + 56);
  if (v1)
  {
    v2 = *(_DWORD *)(result + 24);
    v3 = result + 56;
    do
    {
      v4 = *(_DWORD *)(v1 + 28);
      v5 = v4 < v2;
      if (v4 >= v2)
        v6 = (uint64_t *)v1;
      else
        v6 = (uint64_t *)(v1 + 8);
      if (!v5)
        v3 = v1;
      v1 = *v6;
    }
    while (*v6);
    if (v3 != result + 56 && v2 >= *(_DWORD *)(v3 + 28))
    {
      *(_BYTE *)(v3 + 32) = 1;
      ++*(_DWORD *)(v3 + 104);
    }
  }
  return result;
}

uint64_t sub_10094C148(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;

  v1 = *(_QWORD *)(result + 56);
  if (v1)
  {
    v2 = *(_DWORD *)(result + 24);
    v3 = result + 56;
    do
    {
      v4 = *(_DWORD *)(v1 + 28);
      v5 = v4 < v2;
      if (v4 >= v2)
        v6 = (uint64_t *)v1;
      else
        v6 = (uint64_t *)(v1 + 8);
      if (!v5)
        v3 = v1;
      v1 = *v6;
    }
    while (*v6);
    if (v3 != result + 56 && v2 >= *(_DWORD *)(v3 + 28))
    {
      *(_BYTE *)(v3 + 32) = 1;
      ++*(_DWORD *)(v3 + 108);
    }
  }
  return result;
}

uint64_t sub_10094C1A4(uint64_t result, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  int v11;
  int v12;

  v5 = *(_QWORD *)(result + 56);
  if (v5)
  {
    v6 = *(_DWORD *)(result + 24);
    v7 = result + 56;
    do
    {
      v8 = *(_DWORD *)(v5 + 28);
      v9 = v8 < v6;
      if (v8 >= v6)
        v10 = (uint64_t *)v5;
      else
        v10 = (uint64_t *)(v5 + 8);
      if (!v9)
        v7 = v5;
      v5 = *v10;
    }
    while (*v10);
    if (v7 != result + 56 && v6 >= *(_DWORD *)(v7 + 28))
    {
      *(_BYTE *)(v7 + 32) = 1;
      v11 = *(_DWORD *)(v7 + 116) + a3;
      *(_DWORD *)(v7 + 112) += a2;
      *(_DWORD *)(v7 + 116) = v11;
      v12 = *(_DWORD *)(v7 + 124) + a4;
      *(_DWORD *)(v7 + 120) += a5;
      *(_DWORD *)(v7 + 124) = v12;
    }
  }
  return result;
}

uint64_t sub_10094C214(uint64_t result, double **a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  double *v8;
  double *v9;
  int v10;
  int v11;
  double *v12;
  int v13;
  double v14;
  double *v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  unsigned int v23;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 24);
    v4 = result + 56;
    do
    {
      v5 = *(_DWORD *)(v2 + 28);
      v6 = v5 < v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      v8 = *a2;
      v9 = a2[1];
      if (*a2 != v9)
      {
        *(_BYTE *)(v4 + 32) = 1;
        v10 = *(_DWORD *)(v4 + 200);
        v11 = *(_DWORD *)(v4 + 204);
        v12 = v8;
        v13 = *(_DWORD *)(v4 + 208);
        result = *(unsigned int *)(v4 + 212);
        do
        {
          v14 = *v12;
          if (*v12 <= 0.0 || v14 > 50.0)
          {
            if (v14 <= 50.0 || v14 > 100.0)
            {
              if (v14 <= 100.0 || v14 > 200.0)
              {
                result = (result + 1);
                *(_DWORD *)(v4 + 212) = result;
              }
              else
              {
                *(_DWORD *)(v4 + 208) = ++v13;
              }
            }
            else
            {
              *(_DWORD *)(v4 + 204) = ++v11;
            }
          }
          else
          {
            *(_DWORD *)(v4 + 200) = ++v10;
          }
          ++v12;
        }
        while (v12 != v9);
        v18 = v8 + 1;
        if (v8 + 1 != v9)
        {
          v19 = *v8;
          v20 = v8 + 1;
          do
          {
            v21 = *v20++;
            v22 = v21;
            if (v19 < v21)
            {
              v19 = v22;
              v8 = v18;
            }
            v18 = v20;
          }
          while (v20 != v9);
        }
        v23 = *v8;
        if (*(_DWORD *)(v4 + 60) < v23)
          *(_DWORD *)(v4 + 60) = v23;
      }
    }
  }
  return result;
}

uint64_t sub_10094C344(uint64_t result, double **a2, double a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  double *v9;
  double *v10;
  double v11;
  _DWORD *v12;
  BOOL v13;
  BOOL v14;

  v3 = *(_QWORD *)(result + 56);
  if (v3)
  {
    v4 = *(_DWORD *)(result + 24);
    v5 = result + 56;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 56 && v4 >= *(_DWORD *)(v5 + 28) && a3 > 0.0)
    {
      v9 = *a2;
      v10 = a2[1];
      if (*a2 != v10)
      {
        result = 0x4059000000000000;
        do
        {
          v11 = *v9;
          if (a3 <= 50.0)
          {
            v13 = v11 <= 0.0 || v11 > 50.0;
            v12 = (_DWORD *)(v5 + 216);
            if (v13)
            {
              v14 = v11 <= 50.0 || v11 > 100.0;
              v12 = (_DWORD *)(v5 + 220);
              if (v14)
              {
                if (v11 > 200.0 || v11 <= 100.0)
                  v12 = (_DWORD *)(v5 + 228);
                else
                  v12 = (_DWORD *)(v5 + 224);
              }
            }
          }
          else
          {
            v12 = (_DWORD *)(v5 + 192);
            if (v11 <= 500.0)
              goto LABEL_34;
          }
          ++*v12;
          *(_BYTE *)(v5 + 32) = 1;
LABEL_34:
          ++v9;
        }
        while (v9 != v10);
      }
    }
  }
  return result;
}

uint64_t sub_10094C448(uint64_t result, double **a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  _DWORD *v12;
  BOOL v13;
  BOOL v14;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 24);
    v4 = result + 56;
    do
    {
      v5 = *(_DWORD *)(v2 + 28);
      v6 = v5 < v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      v8 = *a2;
      v9 = a2[1];
      if (*a2 != v9)
      {
        result = 0x4059000000000000;
        do
        {
          v10 = v8[1];
          if (v10 > 0.0)
          {
            v11 = *v8;
            if (v10 <= 50.0)
            {
              v13 = v11 <= 0.0 || v11 > 50.0;
              v12 = (_DWORD *)(v4 + 232);
              if (v13)
              {
                v14 = v11 <= 50.0 || v11 > 100.0;
                v12 = (_DWORD *)(v4 + 236);
                if (v14)
                {
                  if (v11 > 200.0 || v11 <= 100.0)
                    v12 = (_DWORD *)(v4 + 244);
                  else
                    v12 = (_DWORD *)(v4 + 240);
                }
              }
            }
            else
            {
              v12 = (_DWORD *)(v4 + 196);
              if (v11 <= 500.0)
                goto LABEL_34;
            }
            ++*v12;
            *(_BYTE *)(v4 + 32) = 1;
          }
LABEL_34:
          v8 += 2;
        }
        while (v8 != v9);
      }
    }
  }
  return result;
}

uint64_t sub_10094C550(uint64_t result, double **a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  double *v8;
  double *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  double *v14;
  double v15;
  double v16;
  double v18;
  double *v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  unsigned int v25;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 24);
    v4 = result + 56;
    do
    {
      v5 = *(_DWORD *)(v2 + 28);
      v6 = v5 < v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      v8 = *a2;
      v9 = a2[1];
      if (*a2 != v9)
      {
        *(_BYTE *)(v4 + 32) = 1;
        v10 = *(_DWORD *)(v4 + 248);
        v11 = *(_DWORD *)(v4 + 252);
        v12 = *(_DWORD *)(v4 + 256);
        v13 = *(_DWORD *)(v4 + 260);
        v14 = v8;
        v15 = *(double *)result;
        do
        {
          v16 = *v14;
          if (*v14 <= 0.0 || v16 > v15)
          {
            v18 = *(double *)(result + 8);
            if (v16 <= v15 || v16 > v18)
            {
              if (v16 > v18 && v16 <= *(double *)(result + 16))
                *(_DWORD *)(v4 + 256) = ++v12;
              else
                *(_DWORD *)(v4 + 260) = ++v13;
            }
            else
            {
              *(_DWORD *)(v4 + 252) = ++v11;
            }
          }
          else
          {
            *(_DWORD *)(v4 + 248) = ++v10;
          }
          ++v14;
        }
        while (v14 != v9);
        v20 = v8 + 1;
        if (v8 + 1 != v9)
        {
          v21 = *v8;
          v22 = v8 + 1;
          do
          {
            v23 = *v22++;
            v24 = v23;
            if (v21 < v23)
            {
              v21 = v24;
              v8 = v20;
            }
            v20 = v22;
          }
          while (v22 != v9);
        }
        v25 = *v8;
        if (*(_DWORD *)(v4 + 56) < v25)
          *(_DWORD *)(v4 + 56) = v25;
      }
    }
  }
  return result;
}

uint64_t sub_10094C678(uint64_t result, double **a2, double a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  double *v9;
  double *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  double v15;
  double v16;
  BOOL v17;
  _DWORD *v18;
  double v19;
  BOOL v20;

  v3 = *(_QWORD *)(result + 56);
  if (v3)
  {
    v4 = *(_DWORD *)(result + 24);
    v5 = result + 56;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 56 && v4 >= *(_DWORD *)(v5 + 28) && a3 > 0.0 && a3 <= 50.0)
    {
      v9 = *a2;
      v10 = a2[1];
      if (*a2 != v10)
      {
        *(_BYTE *)(v5 + 32) = 1;
        v11 = (_DWORD *)(v5 + 264);
        v12 = (_DWORD *)(v5 + 268);
        v13 = (_DWORD *)(v5 + 272);
        v14 = (_DWORD *)(v5 + 276);
        v15 = *(double *)result;
        do
        {
          v16 = *v9;
          v17 = *v9 <= 0.0 || v16 > v15;
          v18 = v11;
          if (v17)
          {
            v19 = *(double *)(result + 8);
            v20 = v16 <= v15 || v16 > v19;
            v18 = v12;
            if (v20)
            {
              if (v16 <= v19 || (v18 = v13, v16 > *(double *)(result + 16)))
                v18 = v14;
            }
          }
          ++*v18;
          ++v9;
        }
        while (v9 != v10);
      }
    }
  }
  return result;
}

uint64_t sub_10094C75C(uint64_t result, double **a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  _DWORD *v14;
  double v15;
  BOOL v16;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 24);
    v4 = result + 56;
    do
    {
      v5 = *(_DWORD *)(v2 + 28);
      v6 = v5 < v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      v8 = *a2;
      v9 = a2[1];
      if (*a2 != v9)
      {
        do
        {
          v10 = v8[1];
          if (v10 <= 50.0 || v10 > 0.0)
          {
            v11 = *v8;
            v12 = *(double *)result;
            v13 = *v8 <= 0.0 || v11 > v12;
            v14 = (_DWORD *)(v4 + 280);
            if (v13)
            {
              v15 = *(double *)(result + 8);
              v16 = v11 <= v12 || v11 > v15;
              v14 = (_DWORD *)(v4 + 284);
              if (v16)
              {
                if (v11 <= v15 || (v14 = (_DWORD *)(v4 + 288), v11 > *(double *)(result + 16)))
                  v14 = (_DWORD *)(v4 + 292);
              }
            }
            ++*v14;
            *(_BYTE *)(v4 + 32) = 1;
          }
          v8 += 2;
        }
        while (v8 != v9);
      }
    }
  }
  return result;
}

void sub_10094C844(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10215F830);
  v4 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)buf = 67240192;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedInAVisit,%{public}d,", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v7 = *(_DWORD *)(a1 + 24);
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,feedInAVisit,%{public}d,", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedInAVisit(const BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (a2)
    v6 = 1;
  else
    v6 = 2;
  *(_DWORD *)(a1 + 24) = v6;
}

void sub_10094CA08(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10094CA14(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint8_t buf[4];
  int v17;

  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10215F830);
  v2 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)buf = 67240192;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedLikelyOutOfAVisit,%{public}d,", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v10 = *(_DWORD *)(a1 + 24);
    v14 = 67240192;
    v15 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,feedLikelyOutOfAVisit,%{public}d,", &v14, 8);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedLikelyOutOfAVisit()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v4 = *(_DWORD *)(a1 + 24);
  if (v4 == 3)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v5 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)buf = 67240192;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedLikelyOutOfAVisit,Ignored,%{public}d,", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10215F830);
      v7 = *(_DWORD *)(a1 + 24);
      v14 = 67240192;
      v15 = v7;
      LODWORD(v13) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,feedLikelyOutOfAVisit,Ignored,%{public}d,", &v14, v13);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedLikelyOutOfAVisit()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 28) = v4;
    *(double *)(a1 + 32) = sub_1001FCBB4();
    *(_DWORD *)(a1 + 24) = 4;
  }
}

void sub_10094CD2C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10094CD38(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10215F830);
  v2 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)buf = 67240192;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedOutOfAVisit,%{public}d,", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v4 = *(_DWORD *)(a1 + 24);
    v7[0] = 67240192;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,feedOutOfAVisit,%{public}d,", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedOutOfAVisit()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_DWORD *)(a1 + 24) = 3;
}

void sub_10094CEF0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10094CEFC(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10215F830);
  v4 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 24);
    v6 = *a2;
    *(_DWORD *)buf = 67240448;
    v15 = v5;
    v16 = 1026;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedSignalEnvironment,%{public}d,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10215F830);
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *a2;
    v11[0] = 67240448;
    v11[1] = v7;
    v12 = 1026;
    v13 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 0, "#LCFusionStats,feedSignalEnvironment,%{public}d,%{public}d", v11, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedSignalEnvironment(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(_DWORD *)(a1 + 40) = *a2;
}

void sub_10094D0D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10094D0E4(id a1)
{
  qword_1022A01B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

uint64_t **sub_10094D110(uint64_t **result, int *a2, int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v10 = result;
    v11 = v8;
    v12 = v8;
    if (v8)
    {
      v11 = sub_10036C1BC((uint64_t)v8);
      while (a2 != a3)
      {
        sub_10094D214(v5, a2, (uint64_t)v8);
        if ((v9 & 1) != 0)
        {
          v8 = v11;
          v12 = v11;
          if (!v11)
          {
            a2 += 67;
            break;
          }
          v11 = sub_10036C1BC((uint64_t)v11);
        }
        else
        {
          v8 = v12;
        }
        a2 += 67;
        if (!v8)
          break;
      }
    }
    result = (uint64_t **)sub_10036C210((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    result = (uint64_t **)sub_10094D2C4(v5, a2, a2);
    a2 += 67;
  }
  return result;
}

void sub_10094D200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036C210((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10094D214(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;

  v3 = (uint64_t *)a3;
  v6 = a1 + 1;
  v5 = a1[1];
  v7 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v9 >= v7)
        return (uint64_t *)v8;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_9:
    *(_DWORD *)(a3 + 28) = v7;
    memcpy((void *)(a3 + 32), a2 + 1, 0x108uLL);
    sub_1000145B0(a1, (uint64_t)v8, v6, v3);
  }
  return v3;
}

uint64_t *sub_10094D2C4(uint64_t **a1, int *a2, const void *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x128uLL);
    memcpy((char *)v10 + 28, a3, 0x10CuLL);
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_10094D534(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  void *String;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      *(_BYTE *)(a1 + 20) |= 1u;
      while (1)
      {
        v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          goto LABEL_30;
        v13 += 7;
        v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_32;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v15) = 0;
LABEL_32:
      *(_DWORD *)(a1 + 16) = v15;
    }
    else if ((v6 >> 3) == 1)
    {
      String = (void *)PBReaderReadString(a2);

      *(_QWORD *)(a1 + 8) = String;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

float sub_10094DA5C(float a1)
{
  return sqrtf((float)(a1 * 9.8067) * 0.58) * 0.742;
}

uint64_t sub_10094DA88(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_10094DB04(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  NSObject *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  uint64_t v34;
  const char *v36;
  std::string *v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  _QWORD v47[2];
  std::string buf[68];

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }
  *((_QWORD *)__dst + 6) = 0x100000002;
  *((_WORD *)__dst + 28) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst + 64, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 10) = *((_QWORD *)a3 + 2);
    *((_OWORD *)__dst + 4) = v7;
  }
  *((_QWORD *)__dst + 15) = 0;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  sub_10094E158((uint64_t)__dst);
  v8 = *((_QWORD *)__dst + 15);
  if (!v8 || !sub_1000CC4F4(v8))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F850);
    v9 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@TileData, CLWifiTileBlobsTable, not connected to wifi #tile header table", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F850);
      LOWORD(v46.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@TileData, CLWifiTileBlobsTable, not connected to wifi #tile header table", &v46, 2);
      v37 = (std::string *)v36;
      sub_100512490("Generic", 1, 0, 2, "CLWifiTileBlobsTable::CLWifiTileBlobsTable(const std::string &, const std::string &)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  *((_BYTE *)&v38.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v38, "SELECT rowid,");
  v10 = std::string::append(&v38, "TileDataOffsetBytes");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v39, ",");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v40, "SizeOfTileDataBytes");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v41, " FROM ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = __dst[23];
  if (v18 >= 0)
    v19 = __dst;
  else
    v19 = *(const std::string::value_type **)__dst;
  if (v18 >= 0)
    v20 = __dst[23];
  else
    v20 = *((_QWORD *)__dst + 1);
  v21 = std::string::append(&v42, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v43, " WHERE ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v44, "TileX");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v45, " = ? AND ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v46, "TileY");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(buf, " = ? LIMIT 1;");
  v32 = v31->__r_.__value_.__r.__words[0];
  v47[0] = v31->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
  v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (__dst[119] < 0)
    operator delete(*((void **)__dst + 12));
  v34 = v47[0];
  *((_QWORD *)__dst + 12) = v32;
  *((_QWORD *)__dst + 13) = v34;
  *(_QWORD *)(__dst + 111) = *(_QWORD *)((char *)v47 + 7);
  __dst[119] = v33;
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return __dst;
}

void sub_10094DFF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*(void **)(v1 + 96));
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

BOOL sub_10094E158(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;

  v1 = *(_QWORD *)(a1 + 120);
  if (!v1 || !(result = sub_1000CC4F4(v1)))
    sub_10094E1D4();
  return result;
}

uint64_t sub_10094E1C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 120);
  if (result)
    return sub_1000CC4F4(result);
  return result;
}

void sub_10094E1D4()
{
  operator new();
}

void sub_10094E64C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10094E69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const char *v22;
  std::string *v23;
  void *__p[2];
  unsigned __int8 v25;
  std::string v26;
  std::string v27;
  void *v28[2];
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string v32;
  std::string v33;

  v30 = a3;
  v31 = a4;
  v5 = *(_QWORD *)(a1 + 120);
  if (v5 && sub_1000CC4F4(v5))
  {
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_101B980A0;
    strcpy(v26.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
    v6 = *(char *)(a1 + 23);
    if (v6 >= 0)
      v7 = (const std::string::value_type *)a1;
    else
      v7 = *(const std::string::value_type **)a1;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a1 + 23);
    else
      v8 = *(_QWORD *)(a1 + 8);
    v9 = std::string::append(&v26, v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v27, " (");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_10094EF60(0, (uint64_t)__p);
    if ((v25 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v25 & 0x80u) == 0)
      v14 = v25;
    else
      v14 = (std::string::size_type)__p[1];
    v15 = std::string::append(&v32, (const std::string::value_type *)v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v33, ") VALUES (?, ?, ?, ?, ?)");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v29 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)v28 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if ((char)v25 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (v29 >= 0)
      v19 = (char *)v28;
    else
      v19 = (char *)v28[0];
    sub_1000CDA68(*(_QWORD *)(a1 + 120), v19);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F850);
  v20 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    LOWORD(v33.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "@TileData, saveWifiTileBlobData, not connected to wifi #tile blobs table", (uint8_t *)&v33, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v33, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F850);
    LOWORD(v32.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, &v33, 1628, &_mh_execute_header, qword_1022A0058, 1, "@TileData, saveWifiTileBlobData, not connected to wifi #tile blobs table", &v32, 2);
    v23 = (std::string *)v22;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTileBlobsTable::saveWifiTileBlobData(const CLWifiTileBlobsEntry &, std::optional<CLWifiTileParser::MemoryMappedFileHandle *>)", "%s\n", v22);
    if (v23 != &v33)
      free(v23);
  }
  return 0;
}

void sub_10094EE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void **a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;
  void **v53;
  uint64_t v54;

  v53 = a45;
  if (a45 == &a39)
  {
    v54 = 4;
    v53 = &a39;
  }
  else
  {
    if (!a45)
      goto LABEL_6;
    v54 = 5;
  }
  (*((void (**)(void))*v53 + v54))();
LABEL_6:
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10094EF60(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string v10;
  void *__p[2];
  int64_t v12;

  v4 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  do
  {
    if (!a1 || LODWORD(qword_1023058B8[v4 + 1]) != 4)
    {
      v5 = *(unsigned __int8 *)(a2 + 23);
      if ((v5 & 0x80u) != 0)
        v5 = *(_QWORD *)(a2 + 8);
      if (v5)
      {
        *((_BYTE *)&v10.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v10, ", ");
        v6 = std::string::append(&v10, (const std::string::value_type *)qword_1023058B8[v4]);
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v12 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (v12 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        if (v12 >= 0)
          v9 = HIBYTE(v12);
        else
          v9 = (std::string::size_type)__p[1];
        std::string::append((std::string *)a2, (const std::string::value_type *)v8, v9);
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::append((std::string *)a2, (const std::string::value_type *)qword_1023058B8[v4]);
      }
    }
    v4 += 6;
  }
  while (v4 != 30);
}

void sub_10094F078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void sub_10094F0C4(uint64_t a1)
{
  uint64_t v2;
  char *v3;

  v2 = *(_QWORD *)(a1 + 120);
  v3 = (char *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    v3 = *(char **)v3;
  sub_1000CDA68(v2, v3);
}

void sub_10094F330(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_10094F360(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  char *v25;
  NSObject *v26;
  char *v27;
  std::string::value_type v28[8];
  char v29;
  std::string::value_type v30[8];
  char v31;
  std::string::value_type v32[8];
  char v33;
  std::string::value_type __s[8];
  char v35;
  void *__p[2];
  unsigned __int8 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  uint8_t buf[16];
  int64_t v47;

  *a2 = 0;
  a2[16] = 0;
  v3 = *(_QWORD *)(a1 + 120);
  if (v3 && sub_1000CC4F4(v3))
  {
    *((_BYTE *)&v38.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v38, "SELECT ");
    sub_10094EF60(1, (uint64_t)__p);
    if ((v37 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v37 & 0x80u) == 0)
      v5 = v37;
    else
      v5 = (std::string::size_type)__p[1];
    v6 = std::string::append(&v38, (const std::string::value_type *)v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v35 = 6;
    strcpy(__s, " FROM ");
    v8 = std::string::append(&v39, __s, 6uLL);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = *(char *)(a1 + 23);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)a1;
    else
      v11 = *(const std::string::value_type **)a1;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a1 + 23);
    else
      v12 = *(_QWORD *)(a1 + 8);
    v13 = std::string::append(&v40, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v33 = 7;
    strcpy(v32, " WHERE ");
    v15 = std::string::append(&v41, v32, 7uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v42, "TileX");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v31 = 7;
    strcpy(v30, "=? AND ");
    v19 = std::string::append(&v43, v30, 7uLL);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v44, "TileY");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v29 = 2;
    strcpy(v28, "=?");
    v23 = std::string::append(&v45, v28, 2uLL);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v47 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)buf = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (v29 < 0)
      operator delete(*(void **)v28);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (v31 < 0)
      operator delete(*(void **)v30);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (v33 < 0)
      operator delete(*(void **)v32);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (v35 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if ((char)v37 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (v47 >= 0)
      v25 = (char *)buf;
    else
      v25 = *(char **)buf;
    sub_1000CDA68(*(_QWORD *)(a1 + 120), v25);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F850);
  v26 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "@TileData, selectBlobDataByTileXY, not connected to wifi #tile data table", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F850);
    LOWORD(v45.__r_.__value_.__l.__data_) = 0;
    v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@TileData, selectBlobDataByTileXY, not connected to wifi #tile data table", &v45, 2);
    sub_100512490("Generic", 1, 0, 2, "std::optional<CLWifiTileBlobsEntry> CLWifiTileBlobsTable::selectBlobDataByTileXY(const WifiTileXY &)", "%s\n", v27);
    if (v27 != (char *)buf)
      free(v27);
  }
}

void sub_10094F8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (a62 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10094FA54(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  char *p_p;
  NSObject *v19;
  const char *v21;
  std::string *v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 __p;
  int64_t v29;
  std::string v30;

  v2 = *(_QWORD *)(a1 + 120);
  if (v2 && sub_1000CC4F4(v2))
  {
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v23, "DELETE FROM ");
    v3 = *(char *)(a1 + 23);
    if (v3 >= 0)
      v4 = (const std::string::value_type *)a1;
    else
      v4 = *(const std::string::value_type **)a1;
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 23);
    else
      v5 = *(_QWORD *)(a1 + 8);
    v6 = std::string::append(&v23, v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v24, " WHERE ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v25, "TileX");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v26, " = ? AND ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v27, "TileY");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v30, " = ? ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v29 = v16->__r_.__value_.__r.__words[2];
    __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (v29 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(*(_QWORD *)(a1 + 120), p_p);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F850);
  v19 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    LOWORD(v30.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "@TileData, deleteBlobDataByTileXY, not connected to wifi #tile blob data table", (uint8_t *)&v30, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v30, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F850);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, &v30, 1628, &_mh_execute_header, qword_1022A0058, 1, "@TileData, deleteBlobDataByTileXY, not connected to wifi #tile blob data table", &__p, 2);
    v22 = (std::string *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTileBlobsTable::deleteBlobDataByTileXY(const WifiTileXY &)", "%s\n", v21);
    if (v22 != &v30)
      free(v22);
  }
  return 0;
}

void sub_10094FF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  if (a51 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10095003C(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint8_t *v16;
  int v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  _WORD v24[7];
  char v25;
  uint8_t buf[24];
  uint8_t *v27;

  v7 = a2[1];
  if (*a2 == v7)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  sub_100950F58(a6, (v7 - *a2) >> 3);
  v13 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v13 = *(const char **)a1;
  v14 = *(_QWORD *)(a1 + 120);
  v15 = operator new(0x30uLL);
  *v15 = off_10215F930;
  v15[1] = a1;
  v15[2] = a2;
  v15[3] = a6;
  *((_DWORD *)v15 + 8) = a4;
  *((_DWORD *)v15 + 9) = a5;
  v15[5] = &v25;
  v27 = (uint8_t *)v15;
  v16 = buf;
  v17 = sub_10063BDD0(v14, "main", v13, "TileData", a3, 1, (uint64_t)buf);
  v18 = v27;
  if (v27 == buf)
  {
    v19 = 4;
    v18 = buf;
  }
  else
  {
    if (!v27)
      goto LABEL_10;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_10:
  if (!v17)
    goto LABEL_15;
  v16 = (uint8_t *)&qword_1022A0000;
  if (qword_1022A0050 != -1)
    goto LABEL_17;
  while (1)
  {
    v20 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Failed to read wifi tile successfully", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (*((_QWORD *)v16 + 10) != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F850);
      v24[0] = 0;
      LODWORD(v23) = 2;
      v16 = buf;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 17, "Failed to read wifi tile successfully", v24, v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "std::vector<std::optional<CLTilesManager_Type::AccessPointEntry>> CLWifiTileBlobsTable::findMacAddresses(const std::vector<CLMacAddress> &, int, int, int)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
LABEL_15:
    if (0x2E8BA2E8BA2E8BA3 * (a6[1] - *a6) == (uint64_t)(a2[1] - *a2) >> 3)
      break;
    sub_10190F8EC();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Network/CLWifiTileBlobsTable.mm", 377, "findMacAddresses");
    __break(1u);
LABEL_17:
    dispatch_once(&qword_1022A0050, &stru_10215F850);
  }
}

void sub_100950310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v18 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100950370(uint64_t a1)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  char *v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int128 v34;
  int64_t v35;
  std::string v36;
  std::string v37;

  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v26, "SELECT rowid, ");
  v2 = std::string::append(&v26, "TileDataOffsetBytes");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v27, ", ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v28, "SizeOfTileDataBytes");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v29, " FROM ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a1 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a1;
  else
    v11 = *(const std::string::value_type **)a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 23);
  else
    v12 = *(_QWORD *)(a1 + 8);
  v13 = std::string::append(&v30, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v31, " WHERE ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v32, "TileX");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v33, " = ? AND ");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v37, "TileY");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v36, " = ?;");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v35 = v23->__r_.__value_.__r.__words[2];
  v34 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v35 >= 0)
    v25 = (char *)&v34;
  else
    v25 = (char *)v34;
  sub_1000CDA68(*(_QWORD *)(a1 + 120), v25);
}

void sub_100950ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v59 = *(_QWORD **)(v57 - 120);
  if (v59 == v56)
  {
    v60 = 4;
    v59 = (_QWORD *)(v57 - 144);
  }
  else
  {
    if (!v59)
      goto LABEL_6;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_6:
  v61 = (uint64_t)__p;
  __p = 0;
  if (v61)
    sub_1004966B4((uint64_t)&__p, v61);
  v62 = *(_QWORD *)(v57 - 208);
  *(_QWORD *)(v57 - 208) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (*(char *)(v57 - 153) < 0)
    operator delete(*(void **)(v57 - 176));
  _Unwind_Resume(exception_object);
}

void sub_100950C80(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100950CAC(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100950CDC()
{
  operator delete();
}

__n128 sub_100950CF0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10215F8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100950D30(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10215F8A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100950D58(uint64_t a1, sqlite3_blob **a2)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = sqlite3_blob_write(*a2, *(const void **)(**(_QWORD **)(a1 + 16) + 40), **(_DWORD **)(a1 + 24), 0);
  if (v3)
  {
    v4 = v3;
    sub_10063434C(*(_QWORD *)(v2 + 120), v3);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F850);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"@TileData, wifi, failed to write #blob data to #tile #database\", \"code\":%{public}d}", (uint8_t *)&v7, 0x18u);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F850);
    }
    v6 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = v4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "@TileData, wifi, failed to write #blob data to #tile #database", "{\"msg%{public}.0s\":\"@TileData, wifi, failed to write #blob data to #tile #database\", \"code\":%{public}d}", (uint8_t *)&v7, 0x18u);
    }
  }
}

uint64_t sub_100950F10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100950F4C()
{
}

_QWORD *sub_100950F58(_QWORD *a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100950FD0(a1, a2);
    v4 = (_BYTE *)a1[1];
    v5 = &v4[11 * a2];
    do
    {
      *v4 = 0;
      v4[10] = 0;
      v4 += 11;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_100950FB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100950FD0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1745D1745D1745D2)
    sub_100259694();
  result = (char *)sub_100951024((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[11 * v4];
  return result;
}

void *sub_100951024(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745D2)
    sub_10025955C();
  return operator new(11 * a2);
}

void sub_100951070()
{
  operator delete();
}

__n128 sub_100951084(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = off_10215F930;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1009510CC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = off_10215F930;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1009510FC(uint64_t a1, sqlite3_blob **a2)
{
  uint64_t v2;
  unint64_t v4;
  sqlite3_blob *v5;
  int v6;
  unint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t Z;
  unsigned __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;

  v2 = **(_QWORD **)(a1 + 16);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) != v2)
  {
    v4 = 0;
    v5 = *a2;
    v23 = *(_QWORD *)(a1 + 8);
    do
    {
      v6 = *(_DWORD *)(a1 + 32);
      v7 = (*(_DWORD *)(a1 + 36) + ~v6) / 0xAuLL;
      if ((v7 & 0x80000000) != 0)
      {
LABEL_14:
        v15 = 0;
        v16 = 0;
        v17 = 0;
LABEL_23:
        v21 = v16 | v15;
        v22 = **(_QWORD **)(a1 + 24) + 11 * v4;
        *(_QWORD *)v22 = v21;
        *(_BYTE *)(v22 + 10) = BYTE2(v17);
        *(_WORD *)(v22 + 8) = v17;
      }
      else
      {
        v8 = 0;
        v9 = (_QWORD *)(v2 + 8 * v4);
        v10 = (*(_DWORD *)(a1 + 36) + ~v6) / 0xAuLL;
        while (1)
        {
          v11 = (v7 & 0x80000000) == 0 ? v7 : (int)v7 + 1;
          v12 = v11 >> 1;
          v13 = sqlite3_blob_read(v5, &Z, 10, v6 + 10 * (v11 >> 1));
          if (v13)
            break;
          Z = sub_101003214((uint64_t)&Z);
          v26 = v14;
          v24 = sub_100B062F0((unsigned __int8 *)&Z);
          if (sub_10009483C(&v24, v9))
          {
            v15 = Z & 0xFFFFFFFFFFFFFF00;
            v17 = v26 | 0x10000;
            v16 = Z;
            goto LABEL_23;
          }
          if (sub_100191720(&v24, v9))
            v8 = v12 + 1;
          else
            LODWORD(v10) = v12 - 1;
          LODWORD(v7) = v8 + v10;
          if (v8 > (int)v10)
            goto LABEL_14;
        }
        v18 = v13;
        sub_10063434C(*(_QWORD *)(v23 + 120), v13);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F850);
        v19 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
        {
          Z = 68289282;
          v26 = 2082;
          v27 = "";
          v28 = 1026;
          v29 = v18;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"@TileData, wifi, failed to read #blob data from #tile #database\", \"code\":%{public}d}", (uint8_t *)&Z, 0x18u);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F850);
        }
        v20 = qword_1022A0058;
        if (os_signpost_enabled((os_log_t)qword_1022A0058))
        {
          Z = 68289282;
          v26 = 2082;
          v27 = "";
          v28 = 1026;
          v29 = v18;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "@TileData, wifi, failed to read #blob data from #tile #database", "{\"msg%{public}.0s\":\"@TileData, wifi, failed to read #blob data from #tile #database\", \"code\":%{public}d}", (uint8_t *)&Z, 0x18u);
        }
      }
      ++v4;
      v2 = **(_QWORD **)(a1 + 16);
    }
    while (v4 < (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - v2) >> 3);
  }
}

uint64_t sub_1009513F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10095142C()
{
}

void sub_10095143C()
{
  operator delete();
}

__n128 sub_100951450(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10215F9B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100951490(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10215F9B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1009514B8(uint64_t a1, sqlite3_blob **a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;

  v3 = **(_QWORD **)(a1 + 24);
  if (*(_QWORD *)(v3 + 8) == *(_QWORD *)v3)
    sub_1002EAEB0();
  v4 = *(_QWORD *)(a1 + 8);
  v5 = sqlite3_blob_read(*a2, *(void **)v3, **(_DWORD **)(a1 + 16), 0);
  if (v5)
  {
    sub_10063434C(*(_QWORD *)(v4 + 120), v5);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F850);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v10 = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"@TileData, wifi, failed to incrementally read contents of blob from #tile header\"}", (uint8_t *)&v10, 0x12u);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F850);
    }
    v7 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      v10 = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "@TileData, wifi, failed to incrementally read contents of blob from #tile header", "{\"msg%{public}.0s\":\"@TileData, wifi, failed to incrementally read contents of blob from #tile header\"}", (uint8_t *)&v10, 0x12u);
    }
    v8 = *(uint64_t **)(a1 + 24);
    v9 = *v8;
    *v8 = 0;
    if (v9)
      sub_1004966B4((uint64_t)v8, v9);
  }
}

uint64_t sub_100951678(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1009516B4()
{
}

void sub_1009516C0()
{
  qword_1023058B8 = (uint64_t)"TileX";
  dword_1023058C0 = 1;
  word_1023058C4 = 1;
  byte_1023058C8 = 0;
  byte_1023058E0 = 0;
  qword_1023058E8 = (uint64_t)"TileY";
  dword_1023058F0 = 1;
  word_1023058F4 = 1;
  byte_1023058F8 = 0;
  byte_102305910 = 0;
  qword_102305918 = (uint64_t)"TileDataOffsetBytes";
  dword_102305920 = 1;
  word_102305924 = 0;
  byte_102305928 = 0;
  byte_102305940 = 0;
  qword_102305948 = (uint64_t)"SizeOfTileDataBytes";
  dword_102305950 = 1;
  word_102305954 = 0;
  byte_102305958 = 0;
  byte_102305970 = 0;
  qword_102305978 = (uint64_t)"TileData";
  dword_102305980 = 4;
  word_102305984 = 0;
  byte_102305988 = 0;
  byte_1023059A0 = 0;
  qword_1023059A8 = 0;
  dword_1023059B0 = 5;
  word_1023059B4 = 0;
  byte_1023059B8 = 0;
  byte_1023059D0 = 0;
}

BOOL sub_100951778(void *a1, _WORD *a2)
{
  NSObject *v4;
  _BOOL4 v5;
  _BOOL8 result;
  const char *v7;
  uint8_t *v8;
  int v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if ((unint64_t)objc_msgSend(a1, "length") > 1)
  {
    v9 = *(unsigned __int16 *)objc_msgSend(a1, "bytes");
    if (a2)
    {
      *a2 = v9;
    }
    else
    {
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10215FA20);
      v10 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Invalid version parameter.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_10215FA20);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "Invalid version parameter.", v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::isGYTTVersionValid(NSData *, UInt16 *)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    return v9 == 2;
  }
  else
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10215FA20);
    v4 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "GYTT data not long enough to get version properly", buf, 2u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10215FA20);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "GYTT data not long enough to get version properly", v13, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::isGYTTVersionValid(NSData *, UInt16 *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100951A74(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSDictionary *v8;
  io_service_t MatchingService;
  io_object_t v10;
  CFTypeID v11;
  CFTypeRef v12;
  NSObject *v13;
  uint64_t result;
  NSObject *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  CFTypeRef cf;
  int v29;
  CFTypeRef v30;
  _OWORD buf[102];
  const __CFString *v32;
  NSDictionary *v33;
  const __CFString *v34;
  const __CFString *v35;

  cf = 0;
  v2 = sub_100127B9C();
  sub_100081C10(v2, buf);
  v3 = sub_100525C58(*(uint64_t *)&buf[0], "GYTTOverride", &cf, 0xFFFFFFFFLL);
  v4 = v3;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_5;
  v6 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v4)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    if (v3)
    {
LABEL_6:
      CFRetain(cf);
      goto LABEL_10;
    }
  }
  v34 = CFSTR("name");
  v35 = CFSTR("gyro");
  v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
  v32 = CFSTR("IOPropertyMatch");
  v33 = v8;
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
  v10 = MatchingService;
  if (!MatchingService)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10215FA40);
    v19 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Service doesn't exist", (uint8_t *)buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!(_DWORD)result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10215FA40);
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Service doesn't exist", &v29, 2);
    v21 = (char *)v20;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v20);
    goto LABEL_62;
  }
  cf = IORegistryEntryCreateCFProperty(MatchingService, CFSTR("gyro-temp-table"), kCFAllocatorDefault, 0);
  IOObjectRelease(v10);
LABEL_10:
  if (!cf || (v11 = CFGetTypeID(cf), v11 != CFDataGetTypeID()))
  {
    if ((sub_1001B7910() & 0x80000) != 0)
    {
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10215FA20);
      v18 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "No optional GYTT data found", (uint8_t *)buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_33;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10215FA20);
      LOWORD(v29) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "No optional GYTT data found", &v29, 2);
      v17 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v23);
    }
    else
    {
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10215FA20);
      v15 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Cannot get GYTT property", (uint8_t *)buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_33;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10215FA20);
      LOWORD(v29) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "Cannot get GYTT property", &v29, 2);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v16);
    }
    if (v17 != (char *)buf)
      free(v17);
LABEL_33:
    result = (uint64_t)cf;
    if (!cf)
      return result;
    CFRelease(cf);
    return 0;
  }
  v12 = cf;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_10215FA20);
  v13 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 138412290;
    *(_QWORD *)((char *)buf + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "GYTT data %@", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10215FA20);
    v29 = 138412290;
    v30 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "GYTT data %@", &v29, 12);
    v25 = (char *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v24);
    if (v25 != (char *)buf)
      free(v25);
  }
  if (a1)
  {
    *a1 = v12;
    return 1;
  }
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_10215FA20);
  v22 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Invalid GYTT parameter data.", (uint8_t *)buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10215FA20);
    LOWORD(v29) = 0;
    LODWORD(v27) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "Invalid GYTT parameter data.", &v29, v27);
    v21 = (char *)v26;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v26);
LABEL_62:
    if (v21 != (char *)buf)
      free(v21);
    return 0;
  }
  return result;
}

void sub_10095220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100952228(void *a1)
{
  char *v2;
  id result;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v2 = (char *)objc_msgSend(a1, "bytes");
  result = objc_msgSend(a1, "length");
  if ((unint64_t)result >= 4)
  {
    v4 = (unint64_t)result;
    v5 = 0;
    do
    {
      v6 = bswap32(*(_DWORD *)&v2[v5]);
      result = objc_msgSend(a1, "replaceBytesInRange:withBytes:length:", v5, 4, &v6, 4);
      v5 += 4;
      v4 -= 4;
    }
    while (v4 > 3);
  }
  return result;
}

id sub_1009522A8(void *a1)
{
  _WORD *v2;
  __int16 v3;
  __int16 v5;
  __int16 v6;

  v2 = objc_msgSend(a1, "bytes");
  v3 = v2[2];
  v6 = -v2[3];
  v5 = v3;
  objc_msgSend(a1, "replaceBytesInRange:withBytes:length:", 4, 2, &v6, 2);
  return objc_msgSend(a1, "replaceBytesInRange:withBytes:length:", 6, 2, &v5, 2);
}

void sub_100952314(void **a1)
{
  char *v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  NSObject *v8;
  float v9;
  float v10;
  float v11;
  NSObject *v12;
  float *v13;
  unint64_t v14;
  float *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  float *v25;
  char *v26;
  char *v27;
  float *v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  NSObject *v33;
  NSObject *v34;
  id v35;
  NSObject *v36;
  const char *v37;
  uint8_t *v38;
  NSObject *v39;
  const char *v40;
  NSObject *v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  double v47;
  __int128 v48;
  double v49;
  uint64_t v50;
  unsigned __int16 v51;
  void *v52;
  int v53;
  _BYTE v54[10];
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  uint8_t buf[4];
  _BYTE v63[10];
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;

  v52 = 0;
  if ((sub_100951A74(&v52) & 1) != 0)
  {
    v51 = -1;
    if (!sub_100951778(v52, &v51))
    {
      sub_100197040();
      if (sub_1001AA9A8() - 191 >= 2)
      {
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_10215FA20);
        v39 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v63 = v51;
          *(_WORD *)&v63[4] = 1026;
          *(_DWORD *)&v63[6] = 2;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "GYTT version (%{public}u) does not match expected version (%{public}u)", buf, 0xEu);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_87;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_10215FA20);
        v53 = 67240448;
        *(_DWORD *)v54 = v51;
        *(_WORD *)&v54[4] = 1026;
        *(_DWORD *)&v54[6] = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "GYTT version (%{public}u) does not match expected version (%{public}u)", &v53, 14);
        v38 = (uint8_t *)v40;
        sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v40);
        goto LABEL_99;
      }
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10215FA20);
      v34 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Attempting GYTT recovery!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_10215FA20);
        LOWORD(v53) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Attempting GYTT recovery!", &v53, 2);
        v45 = (uint8_t *)v44;
        sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v44);
        if (v45 != buf)
          free(v45);
      }
      v35 = objc_msgSend(v52, "mutableCopy");

      v52 = v35;
      sub_100952228(v35);
      if (!sub_100951778(v52, &v51))
      {
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_10215FA20);
        v41 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v63 = v51;
          *(_WORD *)&v63[4] = 1026;
          *(_DWORD *)&v63[6] = 2;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "After recovery, GYTT version (%{public}u) still does not match expected version (%{public}u)", buf, 0xEu);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_87;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_10215FA20);
        v53 = 67240448;
        *(_DWORD *)v54 = v51;
        *(_WORD *)&v54[4] = 1026;
        *(_DWORD *)&v54[6] = 2;
        LODWORD(v47) = 14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "After recovery, GYTT version (%{public}u) still does not match expected version (%{public}u)", &v53, *(_QWORD *)&v47);
        v38 = (uint8_t *)v46;
        sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v46);
        goto LABEL_99;
      }
      sub_100197040();
      if (sub_1001AA9A8() - 191 <= 1)
        sub_1009522A8(v52);
    }
    v2 = (char *)objc_msgSend(v52, "bytes");
    v3 = (char *)objc_msgSend(v52, "length");
    if ((unint64_t)(v3 - 10) > 0xFFFFFFFFFFFFFFF7)
    {
      v5 = 0;
    }
    else
    {
      v5 = 0;
      v6 = 2;
      *(_QWORD *)&v4 = 134349056;
      v48 = v4;
      do
      {
        v50 = *(_QWORD *)&v2[v6];
        v7 = (float)(__int16)v50 * 0.0039062;
        if (v7 > 100.0)
        {
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_10215FA20);
          v8 = off_10229FD58;
          if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v48;
            *(double *)v63 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Invalid GYTT temperature %{public}f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD50 != -1)
              dispatch_once(&qword_10229FD50, &stru_10215FA20);
            v53 = v48;
            *(double *)v54 = v7;
            LODWORD(v47) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "Invalid GYTT temperature %{public}f", &v53, *(_QWORD *)&v47);
            v32 = (uint8_t *)v31;
            sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v31);
            if (v32 != buf)
              free(v32);
          }
        }
        v9 = (float)SWORD1(v50) * 0.0039062;
        v10 = (float)SWORD2(v50) * 0.0039062;
        v11 = (float)SHIWORD(v50) * 0.0039062;
        if (v50)
        {
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_10215FA20);
          v12 = off_10229FD58;
          if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134219008;
            *(_QWORD *)v63 = v5;
            *(_WORD *)&v63[8] = 2048;
            v64 = v7;
            v65 = 2048;
            v66 = v9;
            v67 = 2048;
            v68 = v10;
            v69 = 2048;
            v70 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Reading GYTT point %zu: %f,%f,%f,%f", buf, 0x34u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD50 != -1)
              dispatch_once(&qword_10229FD50, &stru_10215FA20);
            v53 = 134219008;
            *(_QWORD *)v54 = v5;
            *(_WORD *)&v54[8] = 2048;
            v55 = v7;
            v56 = 2048;
            v57 = v9;
            v58 = 2048;
            v59 = v10;
            v60 = 2048;
            v61 = v11;
            LODWORD(v47) = 52;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "Reading GYTT point %zu: %f,%f,%f,%f", (size_t)&v53, v47, *(double *)&v48, *((double *)&v48 + 1), v49);
            v30 = (uint8_t *)v29;
            sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v29);
            if (v30 != buf)
              free(v30);
          }
          v13 = (float *)a1[1];
          v14 = (unint64_t)a1[2];
          if ((unint64_t)v13 >= v14)
          {
            v19 = ((char *)v13 - (_BYTE *)*a1) >> 4;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60)
              sub_100259694();
            v21 = v14 - (_QWORD)*a1;
            if (v21 >> 3 > v20)
              v20 = v21 >> 3;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
              v22 = 0xFFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            v23 = (char *)sub_10028E224((uint64_t)(a1 + 2), v22);
            v25 = (float *)&v23[16 * v19];
            *v25 = v7;
            v25[1] = v9;
            v25[2] = v10;
            v25[3] = v11;
            v27 = (char *)*a1;
            v26 = (char *)a1[1];
            v28 = v25;
            if (v26 != *a1)
            {
              do
              {
                *((_OWORD *)v28 - 1) = *((_OWORD *)v26 - 1);
                v28 -= 4;
                v26 -= 16;
              }
              while (v26 != v27);
              v26 = (char *)*a1;
            }
            v15 = v25 + 4;
            *a1 = v28;
            a1[1] = v25 + 4;
            a1[2] = &v23[16 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v13 = v7;
            v13[1] = v9;
            v15 = v13 + 4;
            v13[2] = v10;
            v13[3] = v11;
          }
          a1[1] = v15;
          ++v5;
        }
        else
        {
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_10215FA20);
          v16 = off_10229FD58;
          if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134219008;
            *(_QWORD *)v63 = v5;
            *(_WORD *)&v63[8] = 2048;
            v64 = v7;
            v65 = 2048;
            v66 = v9;
            v67 = 2048;
            v68 = v10;
            v69 = 2048;
            v70 = v11;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Skipping GYTT point %zu: %f,%f,%f,%f", buf, 0x34u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD50 != -1)
              dispatch_once(&qword_10229FD50, &stru_10215FA20);
            v53 = 134219008;
            *(_QWORD *)v54 = v5;
            *(_WORD *)&v54[8] = 2048;
            v55 = v7;
            v56 = 2048;
            v57 = v9;
            v58 = 2048;
            v59 = v10;
            v60 = 2048;
            v61 = v11;
            LODWORD(v47) = 52;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "Skipping GYTT point %zu: %f,%f,%f,%f", (size_t)&v53, v47, *(double *)&v48, *((double *)&v48 + 1), v49);
            v18 = (uint8_t *)v17;
            sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v17);
            if (v18 != buf)
              free(v18);
          }
        }
        v6 += 8;
      }
      while ((unint64_t)&v3[-v6] > 7);
    }
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10215FA20);
    v36 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v63 = v5;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "%zu GYTT points found", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_87;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10215FA20);
    v53 = 134217984;
    *(_QWORD *)v54 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "%zu GYTT points found", (size_t)&v53);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v37);
LABEL_99:
    if (v38 != buf)
      free(v38);
LABEL_87:

    return;
  }
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_10215FA20);
  v33 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Failed to read GYTT.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10215FA20);
    LOWORD(v53) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "Failed to read GYTT.", &v53, 2);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }

}

void sub_100953090(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1009530BC(id a1)
{
  qword_10229FC88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

uint64_t sub_1009530E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_10215FA70;
  sub_100270E34(a1 + 8, a3);
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_100953128(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  void *__p;
  void *v10;
  _DWORD *v11;
  uint8_t buf[1632];
  _QWORD v13[19];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD v19[6];
  char v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[25];
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  _BYTE v51[11];
  int v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  unint64_t v103;
  __int16 v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  if (*(_QWORD *)(a1 + 48))
    return 1;
  v3 = operator new(4uLL);
  __p = v3;
  *v3 = 0;
  v10 = v3 + 1;
  v11 = v3 + 1;
  v14 = 0;
  *(_OWORD *)v13 = xmmword_101BB1ED0;
  memset(&v13[2], 0, 135);
  v15 = xmmword_101BB1ED0;
  v16 = 0;
  v17 = 0;
  v19[0] = 0;
  v18 = 0;
  *(_QWORD *)((char *)v19 + 5) = 0;
  *(_QWORD *)((char *)&v19[1] + 6) = 0;
  v20 = 0;
  memset(&v19[3], 0, 24);
  v21 = xmmword_101BB1ED0;
  v22 = 0;
  v23 = 0;
  v24 = 0xFFEFFFFFFFFFFFFFLL;
  v35 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  memset(v34, 0, sizeof(v34));
  v36 = 0;
  v37 = 0;
  v38 = 0xFFEFFFFFFFFFFFFFLL;
  v39 = 0;
  v40 = 0;
  v46 = 0;
  v47 = 0;
  v52 = 0;
  v45 = 0;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v49 = 0u;
  v48 = 0u;
  v50 = 0;
  memset(v51, 0, sizeof(v51));
  v53 = 0xFFEFFFFFFFFFFFFFLL;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v73 = 0;
  v74 = 0xFFEFFFFFFFFFFFFFLL;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0xFFEFFFFFFFFFFFFFLL;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0xFFEFFFFFFFFFFFFFLL;
  v86 = 0;
  v85 = 0;
  v87 = 0x80000000800000;
  v89 = 0;
  v88 = 0;
  v90 = xmmword_101BB1EE0;
  v91 = 0x80000000800000;
  v92 = 0u;
  v93 = 0u;
  v94 = 0;
  v95 = 0xFFEFFFFFFFFFFFFFLL;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0;
  v103 = 0xFFEFFFFFFFFFFFFFLL;
  v104 = 0;
  v105 = 0;
  v106 = 0xFFEFFFFFFFFFFFFFLL;
  v107 = 7;
  v108 = 0xFFEFFFFFFFFFFFFFLL;
  v109 = 0;
  v111 = 0;
  v110 = 0;
  v112 = 0;
  v1 = sub_1000D03AC(*(double **)(a1 + 40), &__p, (uint64_t)v13);
  if ((v1 & 1) != 0)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10215FA98);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Started Tier2 smoother.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10215FA98);
      v8 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Started Tier2 smoother.", &v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutLabeler::startTier2SmootherIfNecessary()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_1000CF518((uint64_t)v13, (uint64_t)buf);
    operator new();
  }
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_10095358C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009535D0(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10215FA98);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopped Tier2 smoother.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10215FA98);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Stopped Tier2 smoother.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutLabeler::stopTier2Smoother()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
  {
    *(_QWORD *)(result + 2760) = off_10217E940;
    operator delete();
  }
  return result;
}

_QWORD *sub_100953794(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10215FA70;
  sub_1009535D0((uint64_t)a1);
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    *(_QWORD *)(v2 + 2760) = off_10217E940;
    operator delete();
  }
  v3 = (_QWORD *)a1[4];
  if (v3 == a1 + 1)
  {
    v4 = 4;
    v3 = a1 + 1;
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_10095382C(_QWORD *a1)
{
  sub_100953794(a1);
  operator delete();
}

uint64_t sub_100953850(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[14];
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[200];

  result = sub_100953128(a1);
  if ((_DWORD)result)
  {
    result = sub_1006E2088(*(_QWORD *)(a1 + 48), (uint64_t)&v7);
    if ((_DWORD)result)
    {
      memset(&v21[8], 0, 192);
      v19 = v7;
      v20 = v8;
      *(_QWORD *)v21 = v9;
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10215FA98);
      v3 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        v16 = DWORD2(v7);
        v17 = 1024;
        v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Tier2Smoothed,%d,Confidence,%d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10215FA98);
        v12[0] = 67109376;
        v12[1] = DWORD2(v7);
        v13 = 1024;
        v14 = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Tier2Smoothed,%d,Confidence,%d", v12, 14);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLWorkoutLabeler::update()", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
      v10[12] = *(_OWORD *)&v21[160];
      v10[13] = *(_OWORD *)&v21[176];
      v11 = *(_QWORD *)&v21[192];
      v10[8] = *(_OWORD *)&v21[96];
      v10[9] = *(_OWORD *)&v21[112];
      v10[10] = *(_OWORD *)&v21[128];
      v10[11] = *(_OWORD *)&v21[144];
      v10[4] = *(_OWORD *)&v21[32];
      v10[5] = *(_OWORD *)&v21[48];
      v10[6] = *(_OWORD *)&v21[64];
      v10[7] = *(_OWORD *)&v21[80];
      v10[0] = v19;
      v10[1] = v20;
      v10[2] = *(_OWORD *)v21;
      v10[3] = *(_OWORD *)&v21[16];
      *(_DWORD *)buf = 4;
      v4 = *(_QWORD *)(a1 + 32);
      if (!v4)
        sub_10025FD1C();
      return (*(uint64_t (**)(uint64_t, uint8_t *, _OWORD *))(*(_QWORD *)v4 + 48))(v4, buf, v10);
    }
  }
  return result;
}

void sub_100953AF8(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100953B24()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  sub_100197040();
  if (sub_100195F08())
    operator new();
  sub_100197040();
  if (sub_1000C4240())
    operator new();
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_10215FAB8);
  v0 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Indoor outdoor detection running on unsupported platform, defaulting to watch version", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10215FAB8);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 16, "Indoor outdoor detection running on unsupported platform, defaulting to watch version", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "static std::unique_ptr<CLIndoorOutdoorDetectorInterface> CLIndoorOutdoorDetectorInterface::create(CLOutdoorSources &, CLIndoorOutdoorProtocol *)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
  operator new();
}

void sub_100953D70()
{
  operator delete();
}

void sub_100953DA4(id a1)
{
  qword_10229FF48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

BOOL sub_100954028(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v18 = &OBJC_IVAR___ALCMCoarseElevation__elevationAscended;
            goto LABEL_37;
          }
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            break;
          v12 += 7;
          v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            v18 = &OBJC_IVAR___ALCMCoarseElevation__elevationAscended;
            goto LABEL_40;
          }
        }
        v18 = &OBJC_IVAR___ALCMCoarseElevation__elevationAscended;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_40:
        *(_DWORD *)(a1 + *v18) = v14;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_41:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v19 = 0;
    v20 = 0;
    v14 = 0;
    *(_BYTE *)(a1 + 16) |= 1u;
    while (1)
    {
      v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        v18 = &OBJC_IVAR___ALCMCoarseElevation__source;
        goto LABEL_38;
      }
      v19 += 7;
      v17 = v20++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        v18 = &OBJC_IVAR___ALCMCoarseElevation__source;
        goto LABEL_40;
      }
    }
    v18 = &OBJC_IVAR___ALCMCoarseElevation__source;
LABEL_37:
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1009545A0()
{
  if (qword_1023059D8 != -1)
    dispatch_once(&qword_1023059D8, &stru_10215FAD8);
  return qword_102311040;
}

void sub_1009545E0(uint64_t a1, uint64_t a2, char *__src, size_t __n)
{
  NSObject *v6;
  const char *v7;
  __int16 v8;
  char v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  char *v18;
  unsigned int v19;
  NSObject *v20;
  const char *v21;
  char v22;
  const char *v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE buf[22];
  char v29;

  if (*(_QWORD *)(a1 + 48) == a2)
  {
    if (__n != 30)
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10215FB70);
      v16 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = __n;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = 30;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Bad motion report input %ld, expected %lu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_10215FB70);
        LODWORD(v26) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "Bad motion report input %ld, expected %lu", v27, v26);
        goto LABEL_34;
      }
      return;
    }
    v8 = *(_WORD *)(__src + 7);
    v9 = __src[17];
    v10 = *(_DWORD *)(__src + 26);
    *(_QWORD *)buf = *(_QWORD *)(__src + 9);
    *(_WORD *)&buf[20] = v8;
    v29 = v9;
    *(_QWORD *)&buf[8] = *(_QWORD *)(__src + 18);
    *(_DWORD *)&buf[16] = v10;
    *(_QWORD *)v27 = sub_100127828(*(unint64_t *)buf);
    v11 = buf;
    v12 = a1;
    v13 = 0;
    v14 = 23;
LABEL_17:
    sub_10012AC18(v12, v13, (uint64_t)v11, v14);
    return;
  }
  if (*(_QWORD *)(a1 + 40) != a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10215FB70);
    v6 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "received bad hid report", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10215FB70);
      *(_WORD *)v27 = 0;
      LODWORD(v26) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "received bad hid report", v27, v26, *(_QWORD *)v27, *(_OWORD *)&v27[8]);
LABEL_34:
      v18 = (char *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLKeyboardMotionNotifier::onIoHidReportBounce(CLHidDevice *, uint8_t *, CFIndex)", "%s\n", v7);
      if (v18 != buf)
        free(v18);
      return;
    }
    return;
  }
  if (__n)
  {
    v15 = *__src;
    if (v15 == 196)
    {
      memcpy((char *)&v26 + 5, __src, __n);
      v19 = BYTE6(v26) & 2;
      if (*(unsigned __int8 *)(a1 + 88) != v19 >> 1)
      {
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_10215FB70);
        v20 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
        {
          v21 = "entered";
          if (!v19)
            v21 = "dismissed";
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Accessory Hall Effect sensor detected tablet mode %s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_10215FB70);
          v23 = "entered";
          if (!v19)
            v23 = "dismissed";
          *(_DWORD *)v27 = 136315138;
          *(_QWORD *)&v27[4] = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "Accessory Hall Effect sensor detected tablet mode %s", v27);
          v25 = (char *)v24;
          sub_100512490("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::onIoHidReportBounce(CLHidDevice *, uint8_t *, CFIndex)", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        if (v19)
          v22 = 3;
        else
          v22 = 4;
        v27[0] = v22;
        *(_QWORD *)buf = sub_100078B88();
        sub_10012AC18(a1, 4, (uint64_t)v27, 1);
      }
      *(_BYTE *)(a1 + 88) = v19 >> 1;
      return;
    }
    if (v15 != 1)
      return;
    memcpy(buf, __src, __n);
    BYTE5(v26) = !sub_100955C0C(buf, byte_101BE8366);
    *(_QWORD *)v27 = sub_100078B88();
    v11 = (char *)&v26 + 5;
    v12 = a1;
    v13 = 1;
    v14 = 1;
    goto LABEL_17;
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_10215FB70);
  v17 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Empty keyboard device report input", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10215FB70);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "Empty keyboard device report input");
    goto LABEL_34;
  }
}

_BYTE *sub_100954C4C(_BYTE *result, uint64_t a2, int a3)
{
  uint64_t v4;
  char v5;
  char v6;
  double v7;
  char v8;
  _BYTE v9[2];
  _BYTE v10[2];

  v4 = (uint64_t)result;
  if (*((_QWORD *)result + 5) == a2)
  {
    v8 = a3;
    v7 = sub_100078B88();
    result = (_BYTE *)sub_10012AC18(v4, 2, (uint64_t)&v8, 1);
    *(_BYTE *)(v4 + 91) = v8;
    if (a3)
    {
      result = (_BYTE *)sub_100955AB0();
      if (*(unsigned __int8 *)(v4 + 89) != (_DWORD)result)
      {
        v6 = (char)result;
        v9[0] = -60;
        v9[1] = (_BYTE)result;
        result = objc_msgSend(*(id *)(v4 + 40), "setReport:payload:length:", 196, v9, 2, *(_QWORD *)&v7);
        if ((_DWORD)result)
          *(_BYTE *)(v4 + 89) = v6;
      }
    }
    else
    {
      *(_BYTE *)(v4 + 89) = 0;
    }
  }
  else if (*((_QWORD *)result + 6) == a2)
  {
    if (a3)
    {
      result = (_BYTE *)sub_100955804();
      if (*(unsigned __int8 *)(v4 + 90) != (_DWORD)result)
      {
        v5 = (char)result;
        v10[0] = 105;
        v10[1] = (_BYTE)result;
        result = objc_msgSend(*(id *)(v4 + 48), "setReport:payload:length:", 105, v10, 2);
        if ((_DWORD)result)
          *(_BYTE *)(v4 + 90) = v5;
      }
    }
    else
    {
      result[90] = 0;
    }
  }
  return result;
}

CFIndex sub_100954D9C(uint64_t a1, uint64_t a2)
{
  CFIndex result;
  const __CFArray *v5;
  CFIndex v6;
  CFIndex i;
  const void *ValueAtIndex;
  int v9;
  BOOL v10;

  result = IOHIDEventConformsTo(a2, 17);
  if ((_DWORD)result)
  {
    result = IOHIDEventGetChildren(a2);
    if (result)
    {
      v5 = (const __CFArray *)result;
      result = CFArrayGetCount((CFArrayRef)result);
      if (result >= 1)
      {
        v6 = result;
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
          result = IOHIDEventGetType(ValueAtIndex);
          if ((_DWORD)result == 11)
          {
            result = IOHIDEventGetIntegerValue(ValueAtIndex, 720905);
            v9 = result == 1;
            if (*(unsigned __int8 *)(a1 + 72) != v9)
            {
              v10 = result == 1;
              result = sub_10014C2F4(a1, 3, (uint64_t)&v10, 1);
              *(_BYTE *)(a1 + 72) = v9;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100954EC0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint8_t buf[1640];

  if (*(_BYTE *)(result + 91))
  {
    v3 = result;
    if (a2 == 1)
    {
      v4 = 2;
    }
    else
    {
      if (a2 != 3)
        return result;
      v4 = 1;
    }
    HIBYTE(v9) = v4;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10215FB70);
    v5 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = off_1022A5908(a2);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "iPad Hall Effect sensor detected the cover was, %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10215FB70);
      v6 = qword_10229FD88;
      v10 = 138412290;
      v11 = off_1022A5908(a2);
      LODWORD(v9) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 1, "iPad Hall Effect sensor detected the cover was, %@", &v10, v9);
      v8 = (char *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::onSmartCoverOpened(SBSSmartCoverState)", "%s\n", v7);
      if (v8 != (char *)buf)
        free(v8);
    }
    *(_QWORD *)buf = sub_100078B88();
    return sub_10012AC18(v3, 4, (uint64_t)&v9 + 7, 1);
  }
  return result;
}

void sub_1009550D8()
{
  if (qword_1023059D8 != -1)
    dispatch_once(&qword_1023059D8, &stru_10215FAD8);
  sub_100955118(qword_102311040);
}

void sub_100955118(uint64_t a1)
{
  int v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  BOOL v22;
  int v23;
  _BOOL4 v24;
  __int16 v25;
  int v26;
  uint8_t buf[8];
  std::__shared_weak_count *v28;

  v2 = sub_100955AB0();
  v3 = sub_100955804();
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_10215FB70);
  v4 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v2;
    LOWORD(v28) = 1024;
    *(_DWORD *)((char *)&v28 + 2) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "KeyboardMotion preferences changed,dataCollection,%d,accelStreaming,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10215FB70);
    v23 = 67109376;
    v24 = v2;
    v25 = 1024;
    v26 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "KeyboardMotion preferences changed,dataCollection,%d,accelStreaming,%d", &v23, 14);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::dataCollectionSettingsChanged()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  sub_100955788((id *)a1, v3);
  if (*(unsigned __int8 *)(a1 + 89) != v2)
  {
    buf[0] = -60;
    buf[1] = v2;
    if (objc_msgSend(*(id *)(a1 + 40), "setReport:payload:length:", 196, buf, 2))
      *(_BYTE *)(a1 + 89) = v2;
  }
  if (*(unsigned __int8 *)(a1 + 90) != v3)
  {
    buf[0] = 105;
    buf[1] = v3;
    if (objc_msgSend(*(id *)(a1 + 48), "setReport:payload:length:", 105, buf, 2))
      *(_BYTE *)(a1 + 90) = v3;
  }
  v22 = 0;
  sub_1001E4804(buf);
  v5 = sub_1001E4874(*(uint64_t *)buf, "MotionLoggerLogKeyboardMotion", &v22);
  v6 = v5;
  v7 = v28;
  if (!v28)
    goto LABEL_16;
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v6)
      return;
  }
  else
  {
LABEL_16:
    if (!v5)
      return;
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_10215FB70);
  v10 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "KeyboardMotion,Msl Logging,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10215FB70);
    v23 = 67109120;
    v24 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "KeyboardMotion,Msl Logging,%d", &v23);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::dataCollectionSettingsChanged()", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  sub_1001E4804(buf);
  sub_10011B47C(*(uint64_t *)buf, "MslLogger.Enable", &v22);
  v11 = v28;
  if (v28)
  {
    v12 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_1001E4804(buf);
  if (v22)
    v14 = 15;
  else
    v14 = 255;
  v23 = v14;
  sub_10011B4E4(*(uint64_t *)buf, "MslLogger.FlushTimeout", &v23);
  v15 = v28;
  if (v28)
  {
    v16 = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1009555D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009555FC(id a1)
{
  sub_100197040();
  if (sub_100081BD0())
    operator new();
}

void sub_100955648()
{
  operator delete();
}

void sub_10095566C(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLKeyboardMotionNotifier", 5);
}

void sub_100955774(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1009BAD18(v1);
  _Unwind_Resume(a1);
}

id *sub_100955788(id *result, int a2)
{
  uint64_t v2;

  v2 = (uint64_t)result;
  if (a2)
  {
    if (!result[5])
    {
      result = (id *)objc_msgSend(result[4], "registerForDeviceMatching:", &off_10221FE30);
      *(_QWORD *)(v2 + 40) = result;
    }
  }
  else
  {
    result = (id *)sub_1009BB4D4((uint64_t)result, 1);
    if (!result)
    {
      result = (id *)sub_1009BB4D4(v2, 2);
      if (!result)
      {
        result = (id *)sub_1009BB4D4(v2, 4);
        if (!result)
        {
          result = (id *)objc_msgSend(*(id *)(v2 + 32), "unregisterForDeviceMatching:", *(_QWORD *)(v2 + 40));
          *(_QWORD *)(v2 + 40) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100955804()
{
  unsigned int v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  BOOL v7;

  v7 = 0;
  sub_1001E4804(&v5);
  v0 = sub_1001E4874(v5, "EnableKeyboardMotionAccelStream", &v7);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v7)
    return v0;
  else
    return 0;
}

void sub_100955890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009558A4(id *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  *a1 = off_10215FB08;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.locationd.KeyboardMotion.DataCollectionMode"), 0);

  objc_msgSend(a1[10], "invalidate");
  return sub_1009BAD18(a1);
}

void sub_100955920(id *a1)
{
  sub_1009558A4(a1);
  operator delete();
}

void sub_100955944(uint64_t a1, int a2, uint64_t a3)
{
  void *v5;
  CLHidEventMonitorManager *v6;

  switch(a2)
  {
    case 0:
      if (a3)
      {
        if (!*(_QWORD *)(a1 + 48))
          *(_QWORD *)(a1 + 48) = objc_msgSend(*(id *)(a1 + 32), "registerForDeviceMatching:", &off_10221FD68);
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 32), "unregisterForDeviceMatching:", *(_QWORD *)(a1 + 48));

        *(_QWORD *)(a1 + 48) = 0;
      }
      break;
    case 1:
    case 4:
      sub_100955788((id *)a1, a3 != 0);
      break;
    case 2:
      sub_100955788((id *)a1, a3 != 0);
      if (a3)
      {
        sub_100078B88();
        sub_10012AC18(a1, 2, a1 + 91, 1);
      }
      break;
    case 3:
      v5 = *(void **)(a1 + 64);
      if (a3)
      {
        if (!v5)
        {
          v6 = -[CLHidEventMonitorManager initWithDelegate:queue:matching:]([CLHidEventMonitorManager alloc], "initWithDelegate:queue:matching:", *(_QWORD *)(a1 + 56), dispatch_get_global_queue(0, 0), &off_10221FE08);
          *(_QWORD *)(a1 + 64) = v6;
          -[CLHidEventMonitorManager addSystemClientMatching:](v6, "addSystemClientMatching:", &off_10221FE08);
        }
      }
      else
      {
        _objc_msgSend(v5, "removeSystemClientmatching:", &off_10221FE08);
      }
      break;
    default:
      return;
  }
}

uint64_t sub_100955AB0()
{
  unsigned int v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  BOOL v7;

  v7 = 0;
  sub_1001E4804(&v5);
  v0 = sub_1001E4874(v5, "EnableKeyboardMotionDataCollectionMode", &v7);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v7)
    return v0;
  else
    return 0;
}

void sub_100955B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

Class sub_100955B50()
{
  Class result;

  if (qword_1023059E8 != -1)
    dispatch_once(&qword_1023059E8, &stru_10215FB50);
  result = objc_getClass("SBSSmartCoverService");
  qword_1023059E0 = (uint64_t)result;
  off_1022A5900 = sub_100955BAC;
  return result;
}

uint64_t sub_100955BAC()
{
  return qword_1023059E0;
}

void sub_100955BB8(id a1)
{
  qword_1023059F0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
}

void sub_100955BE0(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

BOOL sub_100955C0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;

  if (*a1 == *a2
    && a1[1] == a2[1]
    && a1[2] == a2[2]
    && (*(_DWORD *)(a1 + 3) == *(_DWORD *)(a2 + 3)
      ? (v2 = *(unsigned __int16 *)(a1 + 7) == *(unsigned __int16 *)(a2 + 7))
      : (v2 = 0),
        v2))
  {
    return a1[9] == a2[9];
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100955C74(uint64_t a1)
{
  if (qword_1023059E8 != -1)
    dispatch_once(&qword_1023059E8, &stru_10215FB50);
  off_1022A5908 = (uint64_t (*)())dlsym((void *)qword_1023059F0, "NSStringFromSBSSmartCoverState");
  return ((uint64_t (*)(uint64_t))off_1022A5908)(a1);
}

uint64_t sub_100955CE0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  double v6;
  float v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t result;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  char *v21;
  int v22;
  double v23;
  double v24;
  double *v25;
  char **v26;
  double *v27;
  char **v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double *v38;
  unint64_t v39;
  double *v40;
  double *v41;
  int v42;
  double v43;
  double v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  uint64_t v49;
  double *v50;
  double *v51;
  double v52;
  unint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  double *v63;
  unint64_t v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  double *v76;
  double *v77;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  NSObject *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  char *v95;
  double v96;
  const char *v97;
  char *v98;
  double v99;
  double v100;
  double v101;
  int v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  double v117;
  _BYTE __p[12];
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  double v132;
  _OWORD v133[7];
  __int128 v134;
  _BYTE v135[23];
  __int16 v136;
  __int128 v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  _QWORD v141[4];
  double v142;
  double v143;
  char v144;
  __int128 v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  int v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[25];
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  int v169;
  uint64_t v170;
  __int16 v171;
  __int128 v172;
  __int128 v173;
  char v174;
  _BYTE v175[11];
  int v176;
  unint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  unint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  char v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  unint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  int v226;
  unint64_t v227;
  __int16 v228;
  int v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;

  v4 = atomic_load((unsigned __int8 *)&qword_102305A10);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102305A10))
  {
    *(_QWORD *)__p = 3;
    sub_100546300(qword_1023059F8, __p, 2uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_1023059F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102305A10);
  }
  *(_QWORD *)(a1 + 400) = 0;
  v136 = 0;
  v133[0] = xmmword_101BB1ED0;
  memset(&v133[1], 0, 96);
  v134 = 0u;
  memset(v135, 0, sizeof(v135));
  v137 = xmmword_101BB1ED0;
  v138 = 0;
  v139 = 0;
  v141[0] = 0;
  v140 = 0;
  *(_QWORD *)((char *)v141 + 5) = 0;
  *(_QWORD *)((char *)&v141[1] + 6) = 0;
  v143 = 0.0;
  v144 = 0;
  v141[3] = 0;
  v142 = 0.0;
  v145 = xmmword_101BB1ED0;
  v146 = 0;
  v147 = 0;
  v148 = 0xFFEFFFFFFFFFFFFFLL;
  v159 = 0;
  v149 = 0u;
  v150 = 0u;
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v154 = 0;
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  memset(v158, 0, sizeof(v158));
  v160 = 0;
  v161 = 0;
  v162 = 0xFFEFFFFFFFFFFFFFLL;
  v163 = 0;
  v164 = 0;
  v170 = 0;
  v171 = 0;
  v176 = 0;
  v169 = 0;
  v168 = 0u;
  v167 = 0u;
  v166 = 0u;
  v165 = 0u;
  v173 = 0u;
  v172 = 0u;
  v174 = 0;
  memset(v175, 0, sizeof(v175));
  v177 = 0xFFEFFFFFFFFFFFFFLL;
  v196 = 0u;
  v195 = 0u;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v184 = 0u;
  v183 = 0u;
  v182 = 0u;
  v181 = 0u;
  v180 = 0u;
  v179 = 0u;
  v178 = 0u;
  v197 = 0;
  v198 = 0xFFEFFFFFFFFFFFFFLL;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v202 = 0u;
  v203 = 0xFFEFFFFFFFFFFFFFLL;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0xFFEFFFFFFFFFFFFFLL;
  v210 = 0;
  v209 = 0;
  v211 = 0x80000000800000;
  v213 = 0;
  v212 = 0;
  v214 = xmmword_101BB1EE0;
  v215 = 0x80000000800000;
  v216 = 0u;
  v217 = 0u;
  v218 = 0;
  v219 = 0xFFEFFFFFFFFFFFFFLL;
  v220 = 0u;
  v221 = 0u;
  v222 = 0u;
  v223 = 0u;
  v224 = 0u;
  v225 = 0u;
  v226 = 0;
  v227 = 0xFFEFFFFFFFFFFFFFLL;
  v228 = 0;
  v229 = 0;
  v230 = 0xFFEFFFFFFFFFFFFFLL;
  v231 = 7;
  v232 = 0xFFEFFFFFFFFFFFFFLL;
  v233 = 0;
  v235 = 0;
  v234 = 0;
  v236 = 0;
  if ((sub_1000D03AC((double *)a2, qword_1023059F8, (uint64_t)v133) & 1) == 0)
  {
    sub_1015A2E04(__p, "HRStop");
    sub_101069F5C((_QWORD *)a2, (uint64_t *)__p, (uint64_t)qword_1023059F8);
    if (SHIBYTE(v121) < 0)
      operator delete(*(void **)__p);
    return 0;
  }
  v5 = *((_QWORD *)&v145 + 1);
  if (*(double *)(a1 + 24) == *((double *)&v145 + 1))
    return 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)&v145 + 1);
  v6 = *(double *)(a2 + 304);
  v7 = *(float *)(a2 + 356);
  v8 = v142;
  v9 = v143;
  if (v143 > 0.389999986)
  {
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(double **)(a1 + 48);
    if ((unint64_t)v11 >= v10)
    {
      v14 = *(double **)(a1 + 40);
      v15 = ((char *)v11 - (char *)v14) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        sub_100259694();
      v17 = v10 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)sub_10028E224(a1 + 56, v18);
        v14 = *(double **)(a1 + 40);
        v11 = *(double **)(a1 + 48);
      }
      else
      {
        v19 = 0;
      }
      v20 = (double *)&v19[16 * v15];
      v21 = &v19[16 * v18];
      *(_QWORD *)v20 = v5;
      v20[1] = v8;
      v12 = v20 + 2;
      if (v11 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v11 - 1);
          v20 -= 2;
          v11 -= 2;
        }
        while (v11 != v14);
        v14 = *(double **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = v20;
      *(_QWORD *)(a1 + 48) = v12;
      *(_QWORD *)(a1 + 56) = v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v11 = v5;
      v11[1] = v8;
      v12 = v11 + 2;
    }
    *(_QWORD *)(a1 + 48) = v12;
    v9 = v143;
  }
  if (v9 < 0.59)
  {
    v22 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v22 + 1;
    *(_BYTE *)(a1 + 440) = 1;
    if (v22 >= 9)
    {
      *(_QWORD *)(a1 + 416) = 0xC08F380000000000;
      *(_BYTE *)(a1 + 424) = 0;
      *(_QWORD *)(a1 + 432) = 0;
    }
    result = 0;
    *(_QWORD *)(a1 + 392) = 0;
    return result;
  }
  v23 = (v8 - v6) * 100.0 / (v7 - v6);
  *(_BYTE *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v24 = *(double *)(a1 + 392);
  if (v24 > 0.0)
    *(double *)(a1 + 400) = v23 - v24;
  v26 = (char **)(a1 + 40);
  v25 = *(double **)(a1 + 40);
  v28 = (char **)(a1 + 48);
  v27 = *(double **)(a1 + 48);
  v29 = 126 - 2 * __clz(((char *)v27 - (char *)v25) >> 4);
  *(double *)(a1 + 416) = v23;
  *(double *)(a1 + 392) = v23;
  *(double *)(a1 + 432) = v9;
  if (v27 == v25)
    v30 = 0;
  else
    v30 = v29;
  sub_100956BB8(v25, v27, (uint64_t)__p, v30, 1);
  v31 = *v26;
  if (*v26 != *v28)
  {
    v31 = *v26;
    while (*(double *)(a2 + 296) - *(double *)v31 > *(double *)(a1 + 16))
    {
      v31 += 16;
      if (v31 == *v28)
      {
        v31 = *v28;
        break;
      }
    }
  }
  sub_100956AB4(a1 + 40, *v26, v31);
  v32 = *(double **)(a1 + 40);
  v33 = *(double **)(a1 + 48);
  v34 = 0.0;
  v35 = 0.0;
  v36 = 0.0;
  if ((unint64_t)((char *)v33 - (char *)v32) >= 0x3C1)
  {
    v37 = (int)((double)(int)(((unint64_t)((char *)v33 - (char *)v32) >> 4) - 1) * 0.75);
    v38 = &v32[2 * v37];
    while (v33 != v38)
    {
      v39 = ((char *)v33 - (char *)v32) >> 4;
      if (v39 < 2)
        break;
      if (v39 == 3)
      {
        sub_100957540(v32, v32 + 2, v33 - 2);
        break;
      }
      if (v39 == 2)
      {
        if (*(v33 - 1) < v32[1])
        {
          v74 = *v32;
          *v32 = *(v33 - 2);
          *(v33 - 2) = v74;
          v75 = *((_QWORD *)v32 + 1);
          v32[1] = *(v33 - 1);
          *((_QWORD *)v33 - 1) = v75;
        }
        break;
      }
      if ((char *)v33 - (char *)v32 <= 127)
      {
        while (v32 != v33 - 2)
        {
          v76 = v32;
          v32 += 2;
          if (v76 != v33 && v32 != v33)
          {
            v77 = v32;
            v78 = v76;
            do
            {
              if (v77[1] < v78[1])
                v78 = v77;
              v77 += 2;
            }
            while (v77 != v33);
            if (v78 != v76)
            {
              v79 = *(_QWORD *)v76;
              *v76 = *v78;
              *(_QWORD *)v78 = v79;
              v80 = *((_QWORD *)v76 + 1);
              v76[1] = v78[1];
              *((_QWORD *)v78 + 1) = v80;
            }
          }
        }
        break;
      }
      v40 = &v32[2 * (v39 >> 1)];
      v41 = v33 - 2;
      v42 = sub_100957540(v32, v40, v33 - 2);
      v43 = v32[1];
      v44 = v40[1];
      if (v43 >= v44)
      {
        v46 = v33 - 2;
        while (1)
        {
          v45 = v46 - 2;
          if (v46 - 2 == v32)
            break;
          v47 = *(v46 - 1);
          v46 -= 2;
          if (v47 < v44)
          {
            v48 = *v32;
            *v32 = *v45;
            *v45 = v48;
            v49 = *((_QWORD *)v32 + 1);
            v32[1] = v45[1];
            *((_QWORD *)v45 + 1) = v49;
            ++v42;
            goto LABEL_51;
          }
        }
        v63 = v32 + 2;
        if (v43 >= *(v33 - 1))
        {
          while (v63 != v41)
          {
            if (v43 < v63[1])
            {
              v67 = *v63;
              *v63 = *(v33 - 2);
              *(v33 - 2) = v67;
              v68 = *((_QWORD *)v63 + 1);
              v63[1] = *(v33 - 1);
              *((_QWORD *)v33 - 1) = v68;
              v63 += 2;
              goto LABEL_83;
            }
            v63 += 2;
          }
          break;
        }
LABEL_83:
        if (v63 == v41)
          break;
        while (1)
        {
          v69 = v32[1];
          v60 = v63 - 2;
          do
          {
            v70 = v60[3];
            v60 += 2;
          }
          while (v69 >= v70);
          v63 = v60 + 2;
          do
          {
            v71 = *(v41 - 1);
            v41 -= 2;
          }
          while (v69 < v71);
          if (v60 >= v41)
            break;
          v72 = *v60;
          *v60 = *v41;
          *v41 = v72;
          v73 = *((_QWORD *)v60 + 1);
          v60[1] = v41[1];
          *((_QWORD *)v41 + 1) = v73;
        }
        if (v60 > v38)
          break;
      }
      else
      {
        v45 = v33 - 2;
LABEL_51:
        v50 = v32 + 2;
        if (v32 + 2 >= v45)
        {
          v53 = (unint64_t)(v32 + 2);
        }
        else
        {
          v51 = v32 + 2;
          while (1)
          {
            v52 = v40[1];
            v53 = (unint64_t)(v51 - 2);
            do
            {
              v54 = *(double *)(v53 + 24);
              v53 += 16;
            }
            while (v54 < v52);
            v51 = (double *)(v53 + 16);
            do
            {
              v55 = *(v45 - 1);
              v45 -= 2;
            }
            while (v55 >= v52);
            if (v53 >= (unint64_t)v45)
              break;
            v56 = *(double *)v53;
            *(double *)v53 = *v45;
            *v45 = v56;
            v57 = *(_QWORD *)(v53 + 8);
            *(double *)(v53 + 8) = v45[1];
            *((_QWORD *)v45 + 1) = v57;
            ++v42;
            if ((double *)v53 == v40)
              v40 = v45;
          }
        }
        if ((double *)v53 != v40 && v40[1] < *(double *)(v53 + 8))
        {
          v58 = *(double *)v53;
          *(double *)v53 = *v40;
          *v40 = v58;
          v59 = *(_QWORD *)(v53 + 8);
          *(double *)(v53 + 8) = v40[1];
          *((_QWORD *)v40 + 1) = v59;
          ++v42;
        }
        if ((double *)v53 == v38)
          break;
        if (!v42)
        {
          if (v53 <= (unint64_t)v38)
          {
            v64 = v53 + 16;
            while ((double *)v64 != v33)
            {
              v65 = *(double *)(v64 + 8);
              v66 = *(double *)(v64 - 8);
              v64 += 16;
              if (v65 < v66)
                goto LABEL_67;
            }
          }
          else
          {
            while (v50 != (double *)v53)
            {
              v61 = v50[1];
              v62 = *(v50 - 1);
              v50 += 2;
              if (v61 < v62)
                goto LABEL_67;
            }
          }
          break;
        }
LABEL_67:
        if (v53 <= (unint64_t)v38)
        {
          v60 = (double *)(v53 + 16);
        }
        else
        {
          v33 = (double *)v53;
          v60 = v32;
        }
      }
      v32 = v60;
    }
    v36 = (*(double *)(*(_QWORD *)(a1 + 40) + 16 * v37 + 8) - *(double *)(a2 + 304))
        * 100.0
        / (*(float *)(a2 + 356) - *(double *)(a2 + 304));
    *(double *)(a1 + 408) = v36;
    v35 = v36 - (fmax(fmin((v36 + -35.0) / 50.0, 1.0), 0.0) * 25.0 + 10.0);
    if (v23 >= v35 || v23 >= *(double *)(a1 + 8))
    {
      *(_BYTE *)(a1 + 424) = 0;
      *(_DWORD *)__p = 0;
      sub_1000E3564((unsigned __int16 *)(a1 + 80), __p);
    }
    else
    {
      *(_BYTE *)(a1 + 424) = 1;
      if (*((float *)&v134 + 1) >= 18.0)
        goto LABEL_112;
      *(_DWORD *)__p = 1;
      sub_1000E3564((unsigned __int16 *)(a1 + 80), __p);
    }
    *(_BYTE *)(a1 + 64) = 1;
  }
LABEL_112:
  v81 = *(unsigned __int16 *)(a1 + 82);
  if (*(_WORD *)(a1 + 82))
  {
    v82 = 0;
    v83 = 0;
    do
      v83 += *(_DWORD *)sub_1000E3624((unsigned __int16 *)(a1 + 80), v82++);
    while (v81 != v82);
    v34 = (double)v83 * 100.0;
  }
  if (qword_10229FE60 != -1)
  {
    v101 = 75.0;
    dispatch_once(&qword_10229FE60, &stru_10215FBD8);
  }
  v84 = qword_10229FE68;
  v85 = v34 / 75.0;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v86 = (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4;
    v87 = *(_QWORD *)(a1 + 24);
    v88 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)__p = 134219776;
    *(_QWORD *)&__p[4] = v86;
    v119 = 2048;
    v120 = v36;
    v121 = 2048;
    v122 = v85;
    v123 = 2048;
    v124 = v87;
    v125 = 2048;
    v126 = v23;
    v127 = 2048;
    v128 = v35;
    v129 = 2048;
    v130 = v88;
    v131 = 2048;
    v132 = *((float *)&v134 + 1);
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "n,%lu,baseline,%f,counter,%f,t,%f,exertion,%f,baseThreshold,%f,lowExertionThreshold,%f,accelVectorMagnitude,%f,HRStop", __p, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10215FBD8);
    v91 = (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4;
    v92 = *(_QWORD *)(a1 + 24);
    v93 = *(_QWORD *)(a1 + 8);
    v102 = 134219776;
    v103 = *(double *)&v91;
    v104 = 2048;
    v105 = v36;
    v106 = 2048;
    v107 = v85;
    v108 = 2048;
    v109 = v92;
    v110 = 2048;
    v111 = v23;
    v112 = 2048;
    v113 = v35;
    v114 = 2048;
    v115 = v93;
    v116 = 2048;
    v117 = *((float *)&v134 + 1);
    LODWORD(v99) = 82;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FE68, 1, "n,%lu,baseline,%f,counter,%f,t,%f,exertion,%f,baseThreshold,%f,lowExertionThreshold,%f,accelVectorMagnitude,%f,HRStop", &v102, v99, v100, v101);
    v95 = (char *)v94;
    sub_100512490("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLWorkoutStopModelHR::update(const CLWorkoutPredictorInputs &)", "%s\n", v94);
    if (v95 != __p)
      free(v95);
  }
  if (v85 <= 80.0)
    return 0;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10215FBD8);
  v89 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v90 = *(double *)(a2 + 304);
    *(_DWORD *)__p = 134283777;
    *(double *)&__p[4] = v36;
    v119 = 2049;
    v120 = v90;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "HRModel,stopping workout,baseline,%{private}f,restingHeartRate,%{private}f", __p, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10215FBD8);
    v96 = *(double *)(a2 + 304);
    v102 = 134283777;
    v103 = v36;
    v104 = 2049;
    v105 = v96;
    LODWORD(v99) = 22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FE68, 0, "HRModel,stopping workout,baseline,%{private}f,restingHeartRate,%{private}f", &v102, *(_QWORD *)&v99);
    v98 = (char *)v97;
    sub_100512490("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLWorkoutStopModelHR::update(const CLWorkoutPredictorInputs &)", "%s\n", v97);
    if (v98 != __p)
      free(v98);
  }
  return 5;
}

void sub_100956A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_guard_abort(&qword_102305A10);
  _Unwind_Resume(a1);
}

char *sub_100956AB4(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v3 = *(char **)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = 16 * ((a3 - a2) >> 4);
      v4 = a2;
      do
      {
        v6 = *(_QWORD *)&v4[v5 + 8];
        *(_QWORD *)v4 = *(_QWORD *)&v4[v5];
        *((_QWORD *)v4 + 1) = v6;
        v4 += 16;
      }
      while (&v4[v5] != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

_QWORD *sub_100956B04(_QWORD *a1)
{
  void *v2;

  *a1 = off_10215FBA0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100956B40(_QWORD *a1)
{
  void *v2;

  *a1 = off_10215FBA0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_100956B8C(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100956BB8(double *a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  __int128 v16;
  double v17;
  double *v18;
  char v19;
  BOOL v20;
  double v21;
  double v22;
  uint64_t v23;

BOOL sub_100956F2C(uint64_t a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  uint64_t v8;
  double *v9;
  double *v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1 || v7 >= v6 && *(a2 - 1) < *(double *)(a1 + 8))
      {
        *(double *)a1 = v6;
        *(a2 - 2) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        *(double *)(a1 + 8) = *(a2 - 1);
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_100672AA8((double *)a1, (double *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      sub_100673084((double *)a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      sub_100673184((double *)a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2));
      return 1;
    default:
      v9 = (double *)(a1 + 32);
      sub_100672AA8((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      v10 = (double *)(a1 + 48);
      if ((double *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13)
        goto LABEL_23;
      v15 = v10[1];
      if (v15 >= v9[1])
        goto LABEL_23;
    }
    else
    {
      v15 = v10[1];
    }
    *v10 = v14;
    v10[1] = v9[1];
    v16 = (double *)a1;
    if (v9 == (double *)a1)
      goto LABEL_22;
    v17 = v11;
    while (1)
    {
      v18 = a1 + v17;
      v19 = *(double *)(a1 + v17 + 16);
      if (v13 < v19)
      {
        v20 = *(double *)(v18 + 24);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        v16 = v9;
        goto LABEL_22;
      }
      v20 = *(double *)(a1 + v17 + 24);
      if (v15 >= v20)
        break;
LABEL_18:
      v9 -= 2;
      *(double *)(v18 + 32) = v19;
      *(double *)(a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = (double *)a1;
        goto LABEL_22;
      }
    }
    v16 = (double *)(a1 + v17 + 32);
LABEL_22:
    *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_23:
    v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_10095712C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  double v21;
  double *v22;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (double *)(a1 + 16 * v10);
      do
      {
        sub_1009572AC(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(double *)v14;
        v16 = *(double *)a1;
        if (*(double *)v14 < *(double *)a1 || v16 >= v15 && *(double *)(v14 + 8) < *(double *)(a1 + 8))
        {
          *(double *)v14 = v16;
          *(double *)a1 = v15;
          v17 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;
          sub_1009572AC(a1, a4, v9, (double *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v18 = (unint64_t)v8 >> 4;
      v19 = (double *)(a2 - 16);
      do
      {
        v21 = *(double *)a1;
        v20 = *(_QWORD *)(a1 + 8);
        sub_1009573F8((double *)a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          *((_QWORD *)v22 + 1) = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          *((_QWORD *)v19 + 1) = v20;
          sub_10095748C(a1, (uint64_t)(v22 + 2), a4, ((uint64_t)v22 - a1 + 16) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1009572AC(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (double *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(double *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v13 = a4[1];
          if (v8[1] < v13)
            return result;
        }
        else
        {
          v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (double *)(result + 16 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(double *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_23;
          }
        }
        v14 = v8;
LABEL_23:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

double sub_1009573F8(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    v7 = v3 + 1;
    a1 += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = a1[2];
      if (*a1 < v10 || v10 >= *a1 && v6[2 * v7 + 1] < a1[3])
      {
        a1 += 2;
        v3 = v9;
      }
    }
    *v6 = *a1;
    result = a1[1];
    v6[1] = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_10095748C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  unint64_t v11;
  double v12;
  double v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (double *)(result + 16 * (v4 >> 1));
    v7 = *v6;
    v8 = *(double *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v9 = *(double *)(a2 - 8);
      if (*(double *)(result + 16 * v5 + 8) >= v9)
        return result;
    }
    else
    {
      v9 = *(double *)(a2 - 8);
    }
    *(double *)(a2 - 16) = v7;
    *(_QWORD *)(a2 - 8) = *(_QWORD *)(result + 16 * v5 + 8);
    if (v4 >= 2)
    {
      while (1)
      {
        v11 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v10 = (double *)(result + 16 * v5);
        v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12)
            break;
          v13 = *(double *)(result + 16 * v5 + 8);
          if (v13 >= v9)
            break;
        }
        else
        {
          v13 = v10[1];
        }
        *v6 = v12;
        v6[1] = v13;
        v6 = (double *)(result + 16 * v5);
        if (v11 <= 1)
          goto LABEL_13;
      }
    }
    v10 = v6;
LABEL_13:
    *v10 = v8;
    v10[1] = v9;
  }
  return result;
}

uint64_t sub_100957540(double *a1, double *a2, double *a3)
{
  double *v3;
  double v4;
  double *v5;
  double v6;
  uint64_t v7;
  uint64_t result;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = a1 + 1;
  v6 = a3[1];
  if (v4 >= a1[1])
  {
    if (v6 >= v4)
      return 0;
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    v10 = *((_QWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_QWORD *)a3 + 1) = v10;
    if (a2[1] < *v5)
    {
      v11 = *a1;
      *a1 = *a2;
      *a2 = v11;
      result = 2;
LABEL_10:
      v14 = *v5;
      *v5 = *v3;
      *v3 = v14;
      return result;
    }
  }
  else
  {
    v7 = *(_QWORD *)a1;
    if (v6 < v4)
    {
      *a1 = *a3;
      *(_QWORD *)a3 = v7;
      result = 1;
LABEL_9:
      v3 = a3 + 1;
      goto LABEL_10;
    }
    *a1 = *a2;
    *(_QWORD *)a2 = v7;
    v12 = a1[1];
    a1[1] = a2[1];
    a2[1] = v12;
    if (a3[1] < v12)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      result = 2;
      v5 = a2 + 1;
      goto LABEL_9;
    }
  }
  return 1;
}

void sub_1009576DC(id a1)
{
  qword_102305A18 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLTransitMacTileDataProviderSilo"));
}

id sub_10095795C(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, void *a4)
{
  return _objc_msgSend(a4, "onDarwinNotifierNotification:data:", *a2, *a3);
}

void sub_100957C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_100957F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_10011A5A8(&a17);
  _Unwind_Resume(a1);
}

void sub_100957FF8()
{
  JUMPOUT(0x100957FF0);
}

id sub_100958000(uint64_t a1)
{
  id v1;
  _QWORD v3[4];
  void *__p;
  void *v5;
  uint64_t v6;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_10095856C;
  v3[3] = &unk_10215FC78;
  v5 = 0;
  v6 = 0;
  __p = 0;
  sub_10025EA00(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v1 = objc_msgSend(v3, "copy");
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_100958094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1009580B0(id a1, NSArray *a2, NSError *a3)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  id v14;
  uint64_t v15;
  const char *v16;
  std::string *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::string v23;
  int v24;
  std::string *v25;
  _BYTE v26[128];
  std::string buf[68];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10215FC58);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = -[NSArray count](a2, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TransitMac: result, %lu", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10215FC58);
    v15 = qword_1022A02D8;
    LODWORD(v23.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = -[NSArray count](a2, "count");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 1, "TransitMac: result, %lu", &v23);
    v17 = (std::string *)v16;
    sub_100512490("Generic", 1, 0, 2, "-[CLTransitMacTileDataProvider onDarwinNotifierNotification:data:]_block_invoke", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v19, v26, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v20;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v20 != v6)
          objc_enumerationMutation(a2);
        v18 = nullsub_34(objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v7), "macAddress"));
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10215FC58);
        v8 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
        {
          sub_1000C2254(&v18, buf);
          v9 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? buf
             : (std::string *)buf[0].__r_.__value_.__r.__words[0];
          LODWORD(v23.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "TransitMac, result, mac, %s", (uint8_t *)&v23, 0xCu);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10215FC58);
          v10 = qword_1022A02D8;
          sub_1000C2254(&v18, &v23);
          v11 = &v23;
          if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
          v24 = 136315138;
          v25 = v11;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 1, "TransitMac, result, mac, %s", (const char *)&v24);
          v13 = v12;
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v23.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "-[CLTransitMacTileDataProvider onDarwinNotifierNotification:data:]_block_invoke", "%s\n", (const char *)v13);
          if (v13 != buf)
            free(v13);
        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v14 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v19, v26, 16);
      v5 = v14;
    }
    while (v14);
  }
}

void sub_100958540(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_10095856C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_10025EA00(a2, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3);
}

_QWORD *sub_100958588(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return sub_10025EA00(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
}

void sub_1009585A4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void sub_100958628(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;

  if (*(_BYTE *)(a1 + 128))
  {
    *(_BYTE *)(a1 + 32) = a2 == 1;
    if (a2 != 1)
      *(_BYTE *)(a1 + 13792) = 0;
    if (*(_BYTE *)(a1 + 129))
    {
      v8 = 0;
      sub_10086B16C(a2, &v8);
      if (*(_BYTE *)(a1 + 32))
      {
        v4 = sub_101222968();
        sub_10114C4C0((uint64_t)v4);
        v5 = sub_101222968();
        sub_101222E88((uint64_t)v5, &v8);
      }
      else
      {
        v6 = sub_101222968();
        sub_101222E88((uint64_t)v6, &v8);
        if (!*(_BYTE *)(a1 + 130) || *(double *)(a1 + 11704) <= 0.0)
        {
          v7 = sub_101222968();
          sub_10005A6D8((uint64_t)v7);
        }
      }
    }
    if (*(_BYTE *)(a1 + 130))
      sub_1010E9CA8((unsigned __int8 *)(a1 + 152), a2);
  }
}

void sub_1009586F4(_BYTE *a1, void *a2)
{
  _QWORD *v4;
  _BYTE v5[96];

  if (a1[128] && a2 && a1[32])
  {
    if (a1[129])
    {
      sub_100B31548((uint64_t)v5);
      sub_10086B338(a2, (uint64_t)v5);
      v4 = sub_101222968();
      sub_101223040((uint64_t)v4, (uint64_t)v5);
      sub_100B356D8((wireless_diagnostics::google::protobuf::MessageLite *)v5);
    }
    if (a1[130])
      sub_1010EA698(a1 + 152, a2);
  }
}

void sub_100958784(_BYTE *a1, void *a2)
{
  _QWORD *v4;
  _BYTE v5[64];

  if (a1[128] && a2 && a1[32])
  {
    if (a1[129])
    {
      sub_100B31650((uint64_t)v5);
      sub_10086CB10(a2, (uint64_t)v5);
      v4 = sub_101222968();
      sub_10122320C((uint64_t)v4, (uint64_t)v5);
      sub_100B3DDC8((wireless_diagnostics::google::protobuf::MessageLite *)v5);
    }
    if (a1[130])
      sub_1010EB410(a1 + 152, a2);
  }
}

uint64_t sub_100958818(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  id v6;
  char v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v12[8];
  uint8_t buf[1640];

  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  v5 = *a3;
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 128) = v5;
  sub_1010E850C(a1 + 152, a3 + 1);
  *(_BYTE *)(a1 + 13792) = 0;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = -[CLVisionControllerAdapter initWithController:]([CLVisionControllerAdapter alloc], "initWithController:", a1);
    v6 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLVisionNotifier"));
    *(_QWORD *)(a1 + 16) = v6;
    objc_msgSend(v6, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(*(id *)a1, "silo"));
    *(_QWORD *)(a1 + 24) = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLDigitalElevationModel"));
    *(_BYTE *)(a1 + 128) = *(_BYTE *)a3;
    if (*((_BYTE *)a3 + 1))
      v7 = sub_101222A3C();
    else
      v7 = 0;
    *(_BYTE *)(a1 + 129) = v7;
    *(_BYTE *)(a1 + 130) = *((_BYTE *)a3 + 2);
    sub_100958AFC((_BYTE *)a1);
    sub_1009591A0(a1);
  }
  else
  {
    *(_BYTE *)(a1 + 128) = 0;
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
    v8 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVC,CLVisionController,Controller disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVC,CLVisionController,Controller disabled", v12, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "CLVisionController::CLVisionController(id<CLIntersiloUniverse>, const CLVisionConfig &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return a1;
}

void sub_100958AA0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100958AAC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  *(_QWORD *)&v3 = 0xA00010101;
  *((_QWORD *)&v3 + 1) = 0x3F847AE147AE147BLL;
  v4 = 0;
  return sub_100958818(a1, a2, &v3);
}

void sub_100958AFC(_BYTE *a1)
{
  NSObject *v2;
  int v3;
  char v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  const char *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;

  sub_1001E4804(&v27);
  if (v27)
  {
    v26 = 0;
    if (sub_1001E4B84(v27, "EnableVision", &v26))
      a1[128] = v26 == 1;
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
    v2 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v3 = a1[128];
      *(_DWORD *)buf = 136315394;
      v34 = "EnableVision";
      v35 = 1026;
      v36 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLVC,readDaemonSettings,%s,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
      v15 = a1[128];
      v29 = 136315394;
      v30 = "EnableVision";
      v31 = 1026;
      v32 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVC,readDaemonSettings,%s,%{public}d", &v29, 18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLVisionController::readDaemonSettings()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    v25 = 0;
    if (sub_1001E4B84(v27, "EnableVisionRecorder", &v25))
    {
      if (v25 == 1)
        v4 = sub_101222A3C();
      else
        v4 = 0;
      a1[129] = v4;
    }
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
    v8 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v9 = a1[129];
      *(_DWORD *)buf = 136315394;
      v34 = "EnableVisionRecorder";
      v35 = 1026;
      v36 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLVC,readDaemonSettings,%s,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
      v18 = a1[129];
      v29 = 136315394;
      v30 = "EnableVisionRecorder";
      v31 = 1026;
      v32 = v18;
      LODWORD(v23) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVC,readDaemonSettings,%s,%{public}d", &v29, v23);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLVisionController::readDaemonSettings()", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v24 = 0;
    if (sub_1001E4B84(v27, "EnableVisionLocationFuser", &v24))
      a1[130] = v24 == 1;
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
    v10 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      v11 = a1[130];
      *(_DWORD *)buf = 136315394;
      v34 = "EnableVisionLocationFuser";
      v35 = 1026;
      v36 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLVC,readDaemonSettings,%s,%{public}d", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_34;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
    v21 = a1[130];
    v29 = 136315394;
    v30 = "EnableVisionLocationFuser";
    v31 = 1026;
    v32 = v21;
    LODWORD(v23) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVC,readDaemonSettings,%s,%{public}d", &v29, v23);
    v7 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLVisionController::readDaemonSettings()", "%s\n", v22);
LABEL_51:
    if (v7 != buf)
      free(v7);
    goto LABEL_34;
  }
  a1[128] = 0;
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
  v5 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVC,readDaemonSettings,Controller disabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVC,readDaemonSettings,Controller disabled", &v29, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "void CLVisionController::readDaemonSettings()", "%s\n", v6);
    goto LABEL_51;
  }
LABEL_34:
  v12 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100959194(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1009591A0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  _BOOL4 v14;
  uint8_t buf[4];
  _BOOL4 v16;
  __int16 v17;
  _BOOL4 v18;

  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 16))
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
      v2 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLVC,registerForVisionNotifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
        LOWORD(v12[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVC,registerForVisionNotifications", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLVisionController::registerForVisionNotifications()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      objc_msgSend(*(id *)(a1 + 16), "registerForVisionNotifications:", *(_QWORD *)(a1 + 8));
    }
    else
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
      v3 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v4 = *(_QWORD *)(a1 + 8) != 0;
        v5 = *(_QWORD *)(a1 + 16) != 0;
        *(_DWORD *)buf = 67240448;
        v16 = v4;
        v17 = 1026;
        v18 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLVC,registerForVisionNotifications,fAdapter,%{public}d,fVisionNotifierProxy,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
        v6 = *(_QWORD *)(a1 + 8) != 0;
        v7 = *(_QWORD *)(a1 + 16) != 0;
        v12[0] = 67240448;
        v12[1] = v6;
        v13 = 1026;
        v14 = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVC,registerForVisionNotifications,fAdapter,%{public}d,fVisionNotifierProxy,%{public}d", v12, 14);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "void CLVisionController::registerForVisionNotifications()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
  }
}

void sub_1009594DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1009594E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_100959574(a1);

  *(_QWORD *)(a1 + 16) = 0;
  objc_msgSend(*(id *)(a1 + 8), "invalidate");

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1009597B8((_QWORD *)(a1 + 152));
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_100959574(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  _BOOL4 v12;
  uint8_t buf[4];
  _BOOL4 v14;
  __int16 v15;
  _BOOL4 v16;

  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_QWORD *)(a1 + 8) && (v2 = *(void **)(a1 + 16)) != 0)
    {
      objc_msgSend(v2, "deregisterForVisionNotifications:");
    }
    else
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
      v3 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        v4 = *(_QWORD *)(a1 + 8) != 0;
        v5 = *(_QWORD *)(a1 + 16) != 0;
        *(_DWORD *)buf = 67240448;
        v14 = v4;
        v15 = 1026;
        v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLVC,deregisterForVisionNotifications,fAdapter,%{public}d,fVisionNotifierProxy,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
        v6 = *(_QWORD *)(a1 + 8) != 0;
        v7 = *(_QWORD *)(a1 + 16) != 0;
        v10[0] = 67240448;
        v10[1] = v6;
        v11 = 1026;
        v12 = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVC,deregisterForVisionNotifications,fAdapter,%{public}d,fVisionNotifierProxy,%{public}d", v10, 14);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "void CLVisionController::deregisterForVisionNotifications()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
  }
}

void sub_10095977C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10095978C(id a1)
{
  qword_1022A00C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

_QWORD *sub_1009597B8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[844];
  if (v2)
  {
    a1[845] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_100959818()
{
  operator new();
}

void sub_100959854()
{
  operator delete();
}

__n128 sub_100959878@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 172);
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

void sub_1009598AC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BE8488;
      v1[3] = unk_101BE8498;
      v1[4] = xmmword_101BE84A8;
      v1[0] = xmmword_101BE8468;
      v1[1] = unk_101BE8478;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100959980(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100959998()
{
  sub_1015A2E04(qword_102305A28, "[");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305A28, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102305A40, "]");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305A40, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102305A58, " ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305A58, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102305A70, ";");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305A70, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102305A88, ", ");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305A88, (void *)&_mh_execute_header);
}

uint64_t sub_100959B58(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  int v12;
  unint64_t v14;
  int v15;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v14 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 4;
      }
      else
      {
        *(_BYTE *)(a2 + v11) = 1;
        v15 = 0;
      }
      *(_DWORD *)(a1 + 8) = v15;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100959E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v11;

  v4 = a1 + 166056;
  *(_QWORD *)a1 = off_10215FCD8;
  *(_QWORD *)(a1 + 8) = a2;
  sub_101076F94(a1 + 16, a2);
  sub_100FF7B58((_QWORD *)(a1 + 80));
  bzero((void *)(a1 + 712), 0x8D08uLL);
  *(_DWORD *)(a1 + 740) = 501;
  sub_100D79334(a1 + 36816);
  sub_100AFB484(a1 + 114064);
  sub_1011589C0(a1 + 114712);
  sub_10135A068(a1 + 121752, 6.0, 1.0);
  sub_100D9C6F4(a1 + 153112);
  sub_10112C784(a1 + 153240, a2);
  *(_QWORD *)v4 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v11 = _Q0;
  *(_OWORD *)(v4 + 8) = _Q0;
  sub_100308BCC((_QWORD *)(a1 + 153112), *(_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 165992) = xmmword_101BE8508;
  *(_OWORD *)(a1 + 166008) = unk_101BE8518;
  *(_OWORD *)(a1 + 166024) = xmmword_101BE8528;
  *(_OWORD *)(a1 + 166036) = *(__int128 *)((char *)&xmmword_101BE8528 + 12);
  *(_OWORD *)(a1 + 153144) = 0u;
  *(_OWORD *)(a1 + 153160) = 0u;
  *(_OWORD *)(a1 + 153176) = 0u;
  *(_OWORD *)(a1 + 153192) = 0u;
  *(_QWORD *)(a1 + 153208) = 0;
  *(_OWORD *)(a1 + 114040) = 0u;
  *(_DWORD *)(a1 + 114056) = 0;
  *(_OWORD *)(v4 + 8) = v11;
  *(_QWORD *)(a1 + 712) = 0;
  return a1;
}

void sub_100959FAC(uint64_t a1, double a2)
{
  int v4;
  int v5;
  int v6;
  __int128 v7[2];
  _BYTE v8[36];
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  _BYTE v12[24];
  unsigned int v13;
  unsigned int v14;
  unsigned int v15[4];
  float v16[14];

  if (vabdd_f64(a2, *(double *)(a1 + 728)) > 1.0)
  {
    *(_QWORD *)((char *)&v15[1] + 1) = 0;
    *(_QWORD *)v15 = 0;
    v4 = sub_1011593E4(a1 + 114712, (uint64_t)v15, v16, 3.75);
    sub_10112C788(a1 + 153240, (uint64_t)v12);
    v6 = v5;
    *(double *)(a1 + 728) = a2;
    v9 = 0;
    v10 = 0x3F80000000000000;
    sub_10095A0B0((unsigned __int16 *)(a1 + 736), (uint64_t)v8);
    if (v4)
    {
      if (v6)
      {
        *(_QWORD *)&v7[0] = __PAIR64__(LODWORD(v16[13]), v15[0]);
        *((_QWORD *)&v7[0] + 1) = __PAIR64__(v14, v13);
        v7[1] = (__int128)vextq_s8(v11, v11, 8uLL);
        sub_1010771D0(a1 + 16, v7);
      }
    }
  }
}

__n128 sub_10095A0B0(unsigned __int16 *a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int v3;
  int v4;
  unsigned __int16 *v5;
  __n128 result;

  v4 = *a1;
  v2 = a1 + 4;
  v3 = v4;
  v5 = &v2[36 * v4];
  *(_DWORD *)a2 = *(_DWORD *)v5;
  *(_DWORD *)(a2 + 4) = *((_DWORD *)v5 + 1);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)v5 + 2);
  *(_DWORD *)(a2 + 12) = *((_DWORD *)v5 + 3);
  *(_DWORD *)(a2 + 16) = *((_DWORD *)v5 + 4);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)v5 + 5);
  *(_DWORD *)(a2 + 24) = *((_DWORD *)v5 + 6);
  *(_DWORD *)(a2 + 28) = *((_DWORD *)v5 + 7);
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v5 + 8);
  if (v5 != (unsigned __int16 *)a2)
    *(_OWORD *)(a2 + 36) = *(_OWORD *)&v2[36 * v3 + 18];
  result = *(__n128 *)&v2[36 * v3 + 28];
  *(__n128 *)(a2 + 56) = result;
  return result;
}

unsigned __int16 *sub_10095A130(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  uint8_t buf[4];
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;

  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_10215FD08);
  v4 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(double *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(float *)(a2 + 16);
    v8 = *(float *)(a2 + 32);
    *(_DWORD *)buf = 134218752;
    v25 = v5;
    v26 = 2048;
    v27 = v6;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    v31 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SwimAlg, workout classifier result, startTime, %f, workoutType, %lu, confidence, %f, probability_swimming, %f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10215FD08);
    v10 = *(double *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(float *)(a2 + 16);
    v13 = *(float *)(a2 + 32);
    v16 = 134218752;
    v17 = v10;
    v18 = 2048;
    v19 = v11;
    v20 = 2048;
    v21 = v12;
    v22 = 2048;
    v23 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "SwimAlg, workout classifier result, startTime, %f, workoutType, %lu, confidence, %f, probability_swimming, %f", COERCE_DOUBLE(&v16), 42);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimAlgController::feedWorkoutClassification(const CLMotionStateMediator_Type::WorkoutClassifierResult &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  return sub_100FF7B78(a1 + 80, *(_QWORD *)(a2 + 8), *(double *)a2, *(float *)(a2 + 32));
}

uint64_t sub_10095A354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (*(double *)(a1 + 712) <= 0.0)
    sub_10047BA98(*(_QWORD *)(a1 + 8), *(double *)(a2 + 56));
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2168) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 712) = v6;
  sub_10095C4E0((unsigned __int16 *)(a1 + 736), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3);
}

uint64_t sub_10095A3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  float *v6;
  double *v7;
  double v8;
  float v9;
  NSObject *v10;
  double v11;
  double v12;
  __int128 v13;
  _BYTE *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  _BOOL4 v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  double *v33;
  _BOOL4 v34;
  NSObject *v35;
  double v36;
  double v37;
  BOOL v38;
  double v39;
  double v40;
  double *v41;
  double *v42;
  uint64_t v43;
  double v44;
  int v45;
  double v46;
  double v47;
  unsigned int v48;
  NSObject *v49;
  double v50;
  double v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  double v58;
  double v60;
  double v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  double v72;
  const char *v73;
  uint8_t *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  const char *v79;
  uint8_t *v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  double v88;
  double v89;
  void *__p[2];
  int v91;
  int v92;
  double v93;
  __int16 v94;
  double v95;
  __int16 v96;
  _BYTE v97[10];
  _BOOL4 v98;
  __int16 v99;
  int v100;
  __int16 v101;
  double v102;
  __int16 v103;
  uint64_t v104;
  uint8_t buf[4];
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  _BYTE v110[10];
  _BYTE v111[10];
  _BYTE v112[10];
  __int16 v113;
  _BYTE v114[20];
  _BYTE v115[12];
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  uint64_t v123;
  _BYTE v124[10];
  __int16 v125;
  _BYTE v126[10];
  __int16 v127;
  double v128;

  v86 = a3;
  v3 = a2;
  v5 = a1 + 166000;
  v6 = (float *)(a1 + 121752);
  v7 = (double *)(a1 + 36816);
  v8 = *(double *)(a2 + 56);
  sub_100959FAC(a1, v8);
  sub_10095AF6C(a1, a1 + 114712);
  sub_10095AFE0(a1, (uint64_t)v6);
  v85 = a1 + 153240;
  sub_10095B054(a1, a1 + 153240);
  if (sub_10095B0C8(a1, (uint64_t)v7, *v6 / *(float *)v5, v6[4]))
  {
    v87 = *(_OWORD *)(a1 + 36816);
    *(_OWORD *)__p = v87;
    v9 = *(double *)&v87 - *(double *)(v5 + 56);
    v91 = sub_101159010(a1 + 114712, v9);
    *(_QWORD *)(v5 + 56) = v87;
    *(_QWORD *)v115 = 0x400000000;
    sub_100FF7E50(a1 + 80, (double *)__p, (unsigned __int16 *)v115);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10215FD08);
    v10 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
    {
      v11 = *v7;
      v12 = v7[1];
      *(_DWORD *)buf = 134218496;
      v106 = v11;
      v107 = 2048;
      v108 = v12;
      v109 = 2048;
      *(_QWORD *)v110 = v91;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Potential stroke,timestamp,%.3f,startTime,%f,style,%lu", buf, 0x20u);
    }
    v84 = v3;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_10215FD08);
      v60 = *v7;
      v61 = v7[1];
      v92 = 134218496;
      v93 = v60;
      v94 = 2048;
      v95 = v61;
      v96 = 2048;
      *(_QWORD *)v97 = v91;
      LODWORD(v81) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "Potential stroke,timestamp,%.3f,startTime,%f,style,%lu", COERCE_DOUBLE(&v92), v81, v82);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
    if (*(_WORD *)&v115[2])
    {
      *(_QWORD *)&v13 = 134219520;
      v87 = v13;
      do
      {
        v14 = &v115[56 * *(unsigned __int16 *)v115 + 8];
        v15 = *(double *)v14;
        v16 = *((_QWORD *)v14 + 1);
        v17 = *((unsigned int *)v14 + 4);
        ++qword_102305AA0;
        sub_101077040((uint64_t *)(a1 + 16), v15);
        v18 = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), v17);
        v20 = v19;
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_10215FD08);
        v21 = qword_10229FCA8;
        if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
        {
          v22 = qword_102305AA0;
          v23 = sub_101076FD8(a1 + 16);
          *(_DWORD *)buf = v87;
          v106 = v15;
          v107 = 2048;
          v108 = *(double *)&v22;
          v109 = 2048;
          *(_QWORD *)v110 = v16;
          *(_WORD *)&v110[8] = 1024;
          *(_DWORD *)v111 = v23;
          *(_WORD *)&v111[4] = 1024;
          *(_DWORD *)&v111[6] = v17;
          *(_WORD *)v112 = 2048;
          *(double *)&v112[2] = v18;
          v113 = 2048;
          *(_QWORD *)v114 = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Stroke detected,timestamp,%.3f,count,%lu,startTime,%f,isSwim,%d,style,%d,length,%f,distanceError,%f", buf, 0x40u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCA0 != -1)
            dispatch_once(&qword_10229FCA0, &stru_10215FD08);
          v83 = *(double *)&qword_10229FCA8;
          v28 = qword_102305AA0;
          v29 = sub_101076FD8(a1 + 16);
          v92 = v87;
          v93 = v15;
          v94 = 2048;
          v95 = *(double *)&v28;
          v96 = 2048;
          *(_QWORD *)v97 = v16;
          *(_WORD *)&v97[8] = 1024;
          v98 = v29;
          v99 = 1024;
          v100 = v17;
          v101 = 2048;
          v102 = v18;
          v103 = 2048;
          v104 = v20;
          LODWORD(v81) = 64;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, *(_QWORD *)&v83, 1, "Stroke detected,timestamp,%.3f,count,%lu,startTime,%f,isSwim,%d,style,%d,length,%f,distanceError,%f", COERCE_DOUBLE(&v92), *(_QWORD *)&v81, v83, v84, v85, *(double *)&v86, *(double *)&v87);
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        v24 = *(_QWORD *)(a1 + 8);
        v25 = sub_101076FD8(a1 + 16);
        sub_10047C430(v24, v17, v25, v15);
        if (!*(_WORD *)&v115[2])
          break;
        v26 = *(unsigned __int16 *)v115 + 1;
        v27 = *(_WORD *)&v115[4];
        if (v26 < *(unsigned int *)&v115[4])
          v27 = 0;
        *(_WORD *)v115 = v26 - v27;
        --*(_WORD *)&v115[2];
      }
      while (*(_WORD *)&v115[2]);
    }
    v3 = v84;
  }
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8))
    || (v123 = 0,
        *(_QWORD *)v124 = 0x3F80000000000000,
        sub_10095A0B0((unsigned __int16 *)(a1 + 736), (uint64_t)v115),
        v89 = *(double *)v126,
        v88 = 0.0,
        v32 = sub_101076FAC(a1 + 16, &v88),
        ((sub_10095B164(a1, a1 + 114064, *(_QWORD *)(a1 + 8), &v89) | v32) & 1) == 0))
  {
    v43 = 0;
    goto LABEL_46;
  }
  v33 = &v89;
  if (v32)
    v33 = &v88;
  v89 = *v33;
  v34 = sub_101076FE8(a1 + 16, v89);
  sub_10112C95C(v85, (double **)__p, v89);
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_10215FD08);
  v35 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
  {
    v36 = *(double *)(a1 + 712);
    v37 = v36 - v89;
    v38 = v36 <= v89;
    v39 = 0.0;
    if (!v38)
      v39 = v37;
    v40 = *(double *)(*(_QWORD *)(a1 + 8) + 2168) - v39;
    *(_DWORD *)buf = 134218752;
    v106 = v89;
    v107 = 2048;
    v108 = v40;
    v109 = 1024;
    *(_DWORD *)v110 = v34;
    *(_WORD *)&v110[4] = 1024;
    *(_DWORD *)&v110[6] = v32;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Turn detected,timestamp,%f,startTime,%f,isSwimming,%d,injectedForPause,%d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10215FD08);
    v75 = *(double *)(a1 + 712);
    v76 = v75 - v89;
    v38 = v75 <= v89;
    v77 = 0.0;
    if (!v38)
      v77 = v76;
    v78 = *(double *)(*(_QWORD *)(a1 + 8) + 2168) - v77;
    v92 = 134218752;
    v93 = v89;
    v94 = 2048;
    v95 = v78;
    v96 = 1024;
    *(_DWORD *)v97 = v34;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)&v97[6] = v32;
    LODWORD(v81) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "Turn detected,timestamp,%f,startTime,%f,isSwimming,%d,injectedForPause,%d", COERCE_DOUBLE(&v92), v81, v82, v84);
    v80 = (uint8_t *)v79;
    sub_100512490("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v79);
    if (v80 != buf)
      free(v80);
  }
  if (v34)
  {
LABEL_38:
    if (sub_10095B1F0((uint64_t *)a1, v89, *(double *)(a1 + 712)))
      v43 = 2;
    else
      v43 = 0;
    v42 = (double *)__p[0];
    if (__p[0])
      goto LABEL_42;
    goto LABEL_43;
  }
  v42 = (double *)__p[0];
  v41 = (double *)__p[1];
  if (__p[0] != __p[1])
  {
    do
      sub_10047C430(*(_QWORD *)(a1 + 8), 6u, 1, *v42++);
    while (v42 != v41);
    goto LABEL_38;
  }
  v43 = 0;
  if (__p[0])
  {
LABEL_42:
    __p[1] = v42;
    operator delete(v42);
  }
LABEL_43:
  if ((_DWORD)v43)
  {
    LOBYTE(v43) = 2;
LABEL_49:
    *(_QWORD *)&v111[2] = 0;
    *(_QWORD *)v112 = 0x3F80000000000000;
    sub_10095A0B0((unsigned __int16 *)(a1 + 736), (uint64_t)buf);
    v48 = (*(uint64_t (**)(_QWORD, uint64_t, double, double, double))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v86, *(double *)v114, *(double *)&v114[8], 2.56);
    if (v48)
    {
      sub_10112C7D0(v85, v86);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_10215FD08);
      v49 = qword_10229FCA8;
      if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
      {
        v50 = *(double *)(v86 + 40);
        v51 = *(double *)(v86 + 48);
        v52 = *(_DWORD *)(v86 + 124);
        v53 = *(_QWORD *)(v86 + 72);
        v54 = *(_QWORD *)(v86 + 80);
        v55 = *(_DWORD *)(v86 + 100);
        v56 = *(_DWORD *)(v86 + 104);
        v57 = *(_DWORD *)(v86 + 108);
        v58 = *(float *)(v86 + 112);
        *(_DWORD *)buf = 134220032;
        v106 = v50;
        v107 = 2048;
        v108 = v51;
        v109 = 1024;
        *(_DWORD *)v110 = v52;
        *(_WORD *)&v110[4] = 1024;
        *(_DWORD *)&v110[6] = v55;
        *(_WORD *)v111 = 2048;
        *(_QWORD *)&v111[2] = v53;
        *(_WORD *)v112 = 2048;
        *(_QWORD *)&v112[2] = v54;
        v113 = 1024;
        *(_DWORD *)v114 = v56;
        *(_WORD *)&v114[4] = 1024;
        *(_DWORD *)&v114[6] = v57;
        *(_WORD *)&v114[10] = 2048;
        *(double *)&v114[12] = v58;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "EpochSummary,start,%f,end,%f,style,%d,epochStyle,%d,distance,%f,distanceTimestamp,%f,strokes,%d,laps,%d,strokeRate,%f\n", buf, 0x4Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_10215FD08);
        v64 = *(_QWORD *)(v86 + 40);
        v65 = *(_QWORD *)(v86 + 48);
        v66 = *(_DWORD *)(v86 + 124);
        v67 = *(_QWORD *)(v86 + 72);
        v68 = *(_QWORD *)(v86 + 80);
        v69 = *(_DWORD *)(v86 + 100);
        v70 = *(_DWORD *)(v86 + 104);
        v71 = *(_DWORD *)(v86 + 108);
        v72 = *(float *)(v86 + 112);
        *(_DWORD *)v115 = 134220032;
        *(_QWORD *)&v115[4] = v64;
        v116 = 2048;
        v117 = v65;
        v118 = 1024;
        v119 = v66;
        v120 = 1024;
        v121 = v69;
        v122 = 2048;
        v123 = v67;
        *(_WORD *)v124 = 2048;
        *(_QWORD *)&v124[2] = v68;
        v125 = 1024;
        *(_DWORD *)v126 = v70;
        *(_WORD *)&v126[4] = 1024;
        *(_DWORD *)&v126[6] = v71;
        v127 = 2048;
        v128 = v72;
        LODWORD(v81) = 76;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "EpochSummary,start,%f,end,%f,style,%d,epochStyle,%d,distance,%f,distanceTimestamp,%f,strokes,%d,laps,%d,strokeRate,%f\n", COERCE_DOUBLE(v115), v81, v82, v84, *(double *)&v85, *(double *)&v86, (_DWORD)v87, DWORD2(v87), v88);
        v74 = (uint8_t *)v73;
        sub_100512490("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v73);
        if (v74 != buf)
          free(v74);
      }
    }
    v43 = v43 & 2 | v48;
    *(_QWORD *)(a1 + 720) = *(_QWORD *)(v3 + 56);
    goto LABEL_56;
  }
LABEL_46:
  v44 = *(double *)(a1 + 720);
  v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
  v46 = vabdd_f64(v8, v44);
  v47 = 2.56;
  if (v45)
    v47 = 1.0;
  if (v46 > v47)
    goto LABEL_49;
LABEL_56:
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8)) & 1) == 0)
  {
    *(_QWORD *)&v111[2] = 0;
    *(_QWORD *)v112 = 0x3F80000000000000;
    sub_10095A0B0((unsigned __int16 *)(a1 + 736), (uint64_t)buf);
    sub_10047E900(*(_QWORD *)(a1 + 8), *(double *)&v114[8], *(double *)v114);
  }
  return v43;
}

void sub_10095AF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10095AF6C(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  uint64_t result;
  _BYTE v5[44];
  uint64_t v6;
  double v7;
  double v8;
  _BYTE v9[36];
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0x3F80000000000000;
  v3 = (unsigned __int16 *)(a1 + 736);
  result = sub_10095C560((unsigned __int16 *)(a1 + 736), 0x1F4u, (uint64_t)v9);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v5[36] = 0;
    v6 = 0x3F80000000000000;
    sub_10095A0B0(v3, (uint64_t)v5);
    return sub_1011589C4(a2, (uint64_t)v9, v8, v7);
  }
  return result;
}

uint64_t sub_10095AFE0(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  uint64_t result;
  _BYTE v5[44];
  uint64_t v6;
  double v7;
  double v8;
  _BYTE v9[36];
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0x3F80000000000000;
  v3 = (unsigned __int16 *)(a1 + 736);
  result = sub_10095C560((unsigned __int16 *)(a1 + 736), 0x1F4u, (uint64_t)v9);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v5[36] = 0;
    v6 = 0x3F80000000000000;
    sub_10095A0B0(v3, (uint64_t)v5);
    return sub_10135A0D0(a2, (uint64_t)v9, v8, v7);
  }
  return result;
}

uint64_t sub_10095B054(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  uint64_t result;
  _BYTE v5[44];
  uint64_t v6;
  double v7;
  double v8;
  _BYTE v9[36];
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0x3F80000000000000;
  v3 = (unsigned __int16 *)(a1 + 736);
  result = sub_10095C560((unsigned __int16 *)(a1 + 736), 0x100u, (uint64_t)v9);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v5[36] = 0;
    v6 = 0x3F80000000000000;
    sub_10095A0B0(v3, (uint64_t)v5);
    return sub_10112D0D4(a2, (uint64_t)v9, v8, v7);
  }
  return result;
}

uint64_t sub_10095B0C8(uint64_t a1, uint64_t a2, float a3, float a4)
{
  unsigned __int16 *v7;
  uint64_t result;
  _BYTE v9[44];
  uint64_t v10;
  double v11;
  double v12;
  _BYTE v13[36];
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0x3F80000000000000;
  v7 = (unsigned __int16 *)(a1 + 736);
  result = sub_10095C560((unsigned __int16 *)(a1 + 736), 0x12Cu, (uint64_t)v13);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v9[36] = 0;
    v10 = 0x3F80000000000000;
    sub_10095A0B0(v7, (uint64_t)v9);
    return sub_100D793E0(a2, (uint64_t)v13, v12, v11, a3, a4);
  }
  return result;
}

uint64_t sub_10095B164(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  unsigned __int16 *v7;
  uint64_t result;
  _BYTE v9[44];
  uint64_t v10;
  double v11;
  double v12;
  _BYTE v13[36];
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0x3F80000000000000;
  v7 = (unsigned __int16 *)(a1 + 736);
  result = sub_10095C560((unsigned __int16 *)(a1 + 736), 0x1F4u, (uint64_t)v13);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v9[36] = 0;
    v10 = 0x3F80000000000000;
    sub_10095A0B0(v7, (uint64_t)v9);
    return sub_100AFB504(a2, (uint64_t)v13, a3, a4, v12, v11);
  }
  return result;
}

BOOL sub_10095B1F0(uint64_t *a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _BOOL8 v12;
  __int128 v14;
  uint64_t v15;
  void *__p[3];
  __int128 v17;
  uint64_t v18;
  _OWORD v19[7];
  __int128 v20[7];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if (!sub_10047D950(a1[1]) || !sub_10047C5A4((_QWORD *)a1[1], (__n128 *)&v17, a2))
    return 0;
  v14 = v17;
  v15 = v18;
  sub_100D9CFF8((uint64_t)(a1 + 19139), &v14, v6, v7, v8, v9, __p);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1[1] + 40))(&v21, a1[1], DWORD2(v17));
  if (sub_100D9DAC8((uint64_t)(a1 + 19139), DWORD2(v17), (uint64_t)&v21))
  {
    v10 = a1[1];
    v20[4] = v25;
    v20[5] = v26;
    v20[6] = v27;
    v20[0] = v21;
    v20[1] = v22;
    v20[2] = v23;
    v20[3] = v24;
    sub_10047D968(v10, SDWORD2(v17), v20);
  }
  v19[4] = v25;
  v19[5] = v26;
  v19[6] = v27;
  v19[0] = v21;
  v19[1] = v22;
  v19[2] = v23;
  v19[3] = v24;
  sub_10095BBAC((uint64_t)a1, SDWORD2(v17), (uint64_t)v19, a2, a3);
  v11.n128_f64[0] = a3;
  v12 = sub_10095B67C(a1, (double *)__p, v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v12;
}

void sub_10095B378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10095B3A0(uint64_t a1)
{
  int v1;
  double result;

  v1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
  result = 2.56;
  if (v1)
    return 1.0;
  return result;
}

uint64_t sub_10095B3D4(uint64_t a1, uint64_t a2)
{
  _BYTE v5[36];
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;

  v6 = 0;
  v7 = 0x3F80000000000000;
  sub_10095A0B0((unsigned __int16 *)(a1 + 736), (uint64_t)v5);
  return (*(uint64_t (**)(_QWORD, uint64_t, double, double, double))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2, v8, v9, 2.56);
}

double sub_10095B434(uint64_t a1, double *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;

  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_10215FD08);
  v4 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *((_QWORD *)a2 + 2);
    v7 = *((_QWORD *)a2 + 4);
    v8 = *((_QWORD *)a2 + 5);
    v9 = *((_QWORD *)a2 + 6);
    v10 = *((_QWORD *)a2 + 7);
    v11 = *((_QWORD *)a2 + 8);
    *(_DWORD *)buf = 134219520;
    v38 = v5;
    v39 = 2048;
    v40 = v6;
    v41 = 2048;
    v42 = v7;
    v43 = 2048;
    v44 = v8;
    v45 = 2048;
    v46 = v9;
    v47 = 2048;
    v48 = v10;
    v49 = 2048;
    v50 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SwimOdom] Received an odometer update,distance,%lf,accuracy,%lf,speed,%lf,rawspeed,%lf,odometer,%lf,gpsSpeedAccuracy,%lf,timestampGps,%lf", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10215FD08);
    v13 = *((_QWORD *)a2 + 1);
    v14 = *((_QWORD *)a2 + 2);
    v15 = *((_QWORD *)a2 + 4);
    v16 = *((_QWORD *)a2 + 5);
    v17 = *((_QWORD *)a2 + 6);
    v18 = *((_QWORD *)a2 + 7);
    v19 = *((_QWORD *)a2 + 8);
    v23 = 134219520;
    v24 = v13;
    v25 = 2048;
    v26 = v14;
    v27 = 2048;
    v28 = v15;
    v29 = 2048;
    v30 = v16;
    v31 = 2048;
    v32 = v17;
    v33 = 2048;
    v34 = v18;
    v35 = 2048;
    v36 = v19;
    LODWORD(v22) = 72;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "[SwimOdom] Received an odometer update,distance,%lf,accuracy,%lf,speed,%lf,rawspeed,%lf,odometer,%lf,gpsSpeedAccuracy,%lf,timestampGps,%lf", COERCE_DOUBLE(&v23), v22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimAlgController::feedOdometer(const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  result = a2[1];
  if (result > 0.0)
    return sub_10047E8F8(*(_QWORD *)(a1 + 8), result);
  return result;
}

BOOL sub_10095B67C(uint64_t *a1, double *a2, __n128 a3)
{
  double v3;
  double v6;
  __int128 v7;
  NSObject *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v14;
  const char *v16;
  const char *v17;
  double v18;
  __n128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unsigned __int32 v23;
  uint64_t v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  int v50;
  uint8_t buf[4];
  uint64_t v52;
  __int16 v53;
  char *v54;
  __int16 v55;
  char *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  _BOOL4 v76;
  __int16 v77;
  int v78;
  char out[48];
  char v80[48];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v17 = (const char *)*((_QWORD *)a2 + 1);
  v18 = *a2;
  if (*(const char **)a2 != v17)
  {
    v3 = a3.n128_f64[0];
    a3.n128_u64[0] = 134221314;
    v19 = a3;
    v6 = *a2;
    do
    {
      v7 = **(_OWORD **)&v6;
      v21 = *(_QWORD *)(*(_QWORD *)&v6 + 16);
      v20 = v7;
      (*(void (**)(uint64_t *, __int128 *))(*a1 + 24))(a1, &v20);
      sub_10047E34C(a1[1], (uint64_t)&v20, v3);
      v90 = 0;
      v89 = 0u;
      v88 = 0u;
      v87 = 0u;
      v86 = 0u;
      v85 = 0u;
      v84 = 0u;
      v83 = 0u;
      v82 = 0u;
      v81 = 0u;
      if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1[1] + 120))(a1[1], &v81))
      {
        memset(v80, 0, 37);
        memset(out, 0, 37);
        uuid_unparse((const unsigned __int8 *)&v81 + 8, out);
        uuid_unparse((const unsigned __int8 *)&v82 + 8, v80);
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_10215FD08);
        v8 = qword_10229FCA8;
        if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
        {
          v9 = *(_QWORD *)&v6 + 24 != *((_QWORD *)a2 + 1);
          *(_DWORD *)buf = v19.n128_u32[0];
          v52 = v81;
          v53 = 2080;
          v54 = out;
          v55 = 2080;
          v56 = v80;
          v57 = 2048;
          v58 = *((_QWORD *)&v83 + 1);
          v59 = 2048;
          v60 = v84;
          v61 = 2048;
          v62 = *((_QWORD *)&v84 + 1);
          v63 = 2048;
          v64 = v85;
          v65 = 2048;
          v66 = *((_QWORD *)&v85 + 1);
          v67 = 1024;
          v68 = v87;
          v69 = 1024;
          v70 = DWORD1(v87);
          v71 = 1024;
          v72 = DWORD2(v87);
          v73 = 1024;
          v74 = HIDWORD(v87);
          v75 = 1024;
          v76 = v9;
          v77 = 1024;
          v78 = DWORD2(v88);
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "New lap entry, identifier, %llu, uuid, %s, sourceId, %s, startTime, %f, endTime, %f, timestamp, %f, pace, %f, distance, %f, paceSource, %d, style, %d, numberOfStrokes, %d, totalLaps, %d, inserted, %d, segment, %d", buf, 0x76u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_17;
        bzero(buf, 0x65CuLL);
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_10215FD08);
        v10 = *(_QWORD *)&v6 + 24 != *((_QWORD *)a2 + 1);
        v23 = v19.n128_u32[0];
        v24 = v81;
        v25 = 2080;
        v26 = out;
        v27 = 2080;
        v28 = v80;
        v29 = 2048;
        v30 = *((_QWORD *)&v83 + 1);
        v31 = 2048;
        v32 = v84;
        v33 = 2048;
        v34 = *((_QWORD *)&v84 + 1);
        v35 = 2048;
        v36 = v85;
        v37 = 2048;
        v38 = *((_QWORD *)&v85 + 1);
        v39 = 1024;
        v40 = v87;
        v41 = 1024;
        v42 = DWORD1(v87);
        v43 = 1024;
        v44 = DWORD2(v87);
        v45 = 1024;
        v46 = HIDWORD(v87);
        v47 = 1024;
        v48 = v10;
        v49 = 1024;
        v50 = DWORD2(v88);
        LODWORD(v16) = 118;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "New lap entry, identifier, %llu, uuid, %s, sourceId, %s, startTime, %f, endTime, %f, timestamp, %f, pace, %f, distance, %f, paceSource, %d, style, %d, numberOfStrokes, %d, totalLaps, %d, inserted, %d, segment, %d", &v23, v16, v17, v18, v19.n128_f64[0], v19.n128_f64[1], *(double *)&v20, *((double *)&v20 + 1), v21, v22);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLSwimAlgController::commitLaps(std::vector<CLSwimDetectedLap> &, CLMotionTypeTimestamp)", "%s\n", v11);
      }
      else
      {
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_10215FD08);
        v13 = qword_10229FCA8;
        if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "New lap entry, failed to get and log new lap entry after adding to db.", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_17;
        bzero(buf, 0x65CuLL);
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_10215FD08);
        LOWORD(v23) = 0;
        LODWORD(v16) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 17, "New lap entry, failed to get and log new lap entry after adding to db.", &v23, v16);
        v12 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLSwimAlgController::commitLaps(std::vector<CLSwimDetectedLap> &, CLMotionTypeTimestamp)", "%s\n", v14);
      }
      if (v12 != buf)
        free(v12);
LABEL_17:
      *(_QWORD *)&v6 += 24;
    }
    while (*(_QWORD *)&v6 != *((_QWORD *)a2 + 1));
  }
  return *(_QWORD *)&v18 != (_QWORD)v17;
}

void sub_10095BBAC(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  double v33;
  _BYTE v34[32];
  _BYTE v35[12];
  __int128 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;

  v9 = a5 - a4;
  if (a5 <= a4)
    v10 = 0.0;
  else
    v10 = v9;
  v11 = *(double *)(*(_QWORD *)(a1 + 8) + 2168);
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_10215FD08);
  v12 = v11 - v10;
  v13 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(_QWORD *)(a3 + 72);
    v15 = *(_QWORD *)(a3 + 80);
    v16 = *(_QWORD *)(a3 + 48);
    v17 = *(_QWORD *)(a3 + 56);
    v18 = *(_DWORD *)(a3 + 64);
    v19 = *(_QWORD *)(a3 + 88);
    v20 = *(_QWORD *)(a3 + 96);
    v21 = *(_QWORD *)(a3 + 104);
    *(_DWORD *)buf = 67111936;
    v45 = a2;
    v46 = 2048;
    v47 = a5;
    v48 = 2048;
    v49 = a4;
    v50 = 2048;
    v51 = v12;
    v52 = 2048;
    v53 = v16;
    v54 = 2048;
    v55 = v14;
    v56 = 2048;
    v57 = v15;
    v58 = 2048;
    v59 = v19;
    v60 = 2048;
    v61 = v17;
    v62 = 1024;
    v63 = v18;
    v64 = 2048;
    v65 = v20;
    v66 = 2048;
    v67 = v21;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "style,%d,currentTimestamp,%f,turnTimestamp,%f,turnStartTime,%f,mean,%f,stddev,%f,min,%f,max,%f,median,%f,samples,%d,prctile10,%f,prctile90,%f", buf, 0x72u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10215FD08);
    v22 = *(_QWORD *)(a3 + 72);
    v23 = *(_QWORD *)(a3 + 80);
    v24 = *(double *)(a3 + 48);
    v25 = *(_QWORD *)(a3 + 56);
    v26 = *(_DWORD *)(a3 + 64);
    v27 = *(_QWORD *)(a3 + 88);
    v28 = *(_QWORD *)(a3 + 96);
    v29 = *(_QWORD *)(a3 + 104);
    LODWORD(v33) = 67111936;
    HIDWORD(v33) = a2;
    *(_WORD *)v34 = 2048;
    *(double *)&v34[2] = a5;
    *(_WORD *)&v34[10] = 2048;
    *(double *)&v34[12] = a4;
    *(_WORD *)&v34[20] = 2048;
    *(double *)&v34[22] = v12;
    *(_WORD *)&v34[30] = 2048;
    *(_WORD *)v35 = 2048;
    *(_QWORD *)&v35[2] = v22;
    *(_WORD *)&v35[10] = 2048;
    LODWORD(v36) = HIDWORD(v23);
    WORD2(v36) = 2048;
    *(_QWORD *)((char *)&v36 + 6) = v27;
    HIWORD(v36) = 2048;
    v37 = v25;
    v38 = 1024;
    v39 = v26;
    v40 = 2048;
    v41 = v28;
    v42 = 2048;
    v43 = v29;
    LODWORD(v32) = 114;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "style,%d,currentTimestamp,%f,turnTimestamp,%f,turnStartTime,%f,mean,%f,stddev,%f,min,%f,max,%f,median,%f,samples,%d,prctile10,%f,prctile90,%f", &v33, v32, v33, *(double *)v34, *(double *)&v34[8], *(double *)&v34[16], *(double *)&v34[24], v24, *(double *)v35, *(_DWORD *)&v35[8],
      *(double *)&v36,
      *((double *)&v36 + 1));
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimAlgController::logDistributionParameters(CLSwimStyleType, CLMotionTypeTimestamp, CLMotionTypeTimestamp, CLSwimStrokesPerTurnDistribution) const", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
}

BOOL sub_10095BE78(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  _BOOL8 v14;
  double *i;
  double *v17;
  __int128 v18;
  uint64_t v19;
  void *__p[3];
  __int128 v21;
  uint64_t v22;
  _OWORD v23[7];
  __int128 v24[7];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  if (!sub_10047D950(*(_QWORD *)(a1 + 8)))
    return 0;
  v6 = 0;
  do
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(&v25, *(_QWORD *)(a1 + 8), v6);
    if ((*(int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), v6) >= 5)
    {
      sub_100D9DB18(a1 + 153112, v6, (uint64_t)&v25);
      v7 = *(_QWORD *)(a1 + 8);
      v24[4] = v29;
      v24[5] = v30;
      v24[6] = v31;
      v24[0] = v25;
      v24[1] = v26;
      v24[2] = v27;
      v24[3] = v28;
      sub_10047D968(v7, v6, v24);
      v23[4] = v29;
      v23[5] = v30;
      v23[6] = v31;
      v23[0] = v25;
      v23[1] = v26;
      v23[2] = v27;
      v23[3] = v28;
      sub_10095BBAC(a1, v6, (uint64_t)v23, a2, a3);
    }
    v6 = (v6 + 1);
  }
  while ((_DWORD)v6 != 7);
  v8 = *(_BYTE *)(a1 + 52) == 0;
  sub_10112C95C(a1 + 153240, (double **)&v25, a2);
  if (v8)
  {
    v17 = (double *)*((_QWORD *)&v25 + 1);
    for (i = (double *)v25; i != v17; ++i)
      sub_10047C430(*(_QWORD *)(a1 + 8), 6u, 1, *i);
  }
  if (sub_10047C5A4(*(_QWORD **)(a1 + 8), (__n128 *)&v21, a2))
  {
    v18 = v21;
    v19 = v22;
    sub_100D9CFF8(a1 + 153112, &v18, v9, v10, v11, v12, __p);
    v13.n128_f64[0] = a3;
    v14 = sub_10095B67C((uint64_t *)a1, (double *)__p, v13);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    v14 = 0;
  }
  if ((_QWORD)v25)
  {
    *((_QWORD *)&v25 + 1) = v25;
    operator delete((void *)v25);
  }
  return v14;
}

void sub_10095C09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  v16 = *(void **)(v14 - 192);
  if (v16)
  {
    *(_QWORD *)(v14 - 184) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

float sub_10095C0E0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float result;

  v4 = *(_OWORD *)(a1 + 166064);
  *(_OWORD *)a2 = v4;
  v6 = *(_DWORD *)(a1 + 153144);
  v5 = *(_DWORD *)(a1 + 153148);
  v7 = *(_QWORD *)(a1 + 153152);
  v8 = *(_DWORD *)(a1 + 153164);
  LODWORD(v9) = sub_100D7AB58(a1 + 36816, *(double *)&v4).u32[0];
  v11 = v10;
  v13 = v12;
  if (v5)
    v14 = (float)((float)v6 * 100.0) / (float)v5;
  else
    v14 = 0.0;
  *(_DWORD *)(a2 + 20) = vcvtas_u32_f32(v14);
  result = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)) * 10.0;
  *(_DWORD *)(a2 + 24) = vcvtas_u32_f32(result);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 40) = v8;
  *(_DWORD *)(a2 + 44) = vcvtas_u32_f32(v13);
  *(_DWORD *)(a2 + 48) = vcvtas_u32_f32(v9);
  *(_DWORD *)(a2 + 52) = vcvtas_u32_f32(v11);
  return result;
}

uint64_t sub_10095C1C0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  int v8;
  uint64_t result;

  v7 = a1 + 166064;
  v8 = sub_1004797E8(*(_QWORD *)(a1 + 8), a2, a4, *(double *)(a1 + 712));
  if ((v8 - 1) >= 3)
  {
    if (v8 == 5)
    {
      *(double *)(v7 + 8) = a4;
      sub_10095C0E0(a1, a3);
      *(_QWORD *)(a1 + 153208) = 0;
      *(_OWORD *)(a1 + 153176) = 0u;
      *(_OWORD *)(a1 + 153192) = 0u;
      *(_OWORD *)(a1 + 153144) = 0u;
      *(_OWORD *)(a1 + 153160) = 0u;
      *(_OWORD *)(a1 + 114040) = 0u;
      *(_DWORD *)(a1 + 114056) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)v7 = _Q0;
      result = 1;
      *(_QWORD *)(a1 + 712) = 0;
    }
    else
    {
      if (v8 == 6)
        sub_10095C2CC((uint64_t *)a1, 0, *(double *)(a1 + 712), a4, a4);
      return 0;
    }
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 153208) = 0;
    *(_OWORD *)(a1 + 153176) = 0u;
    *(_OWORD *)(a1 + 153192) = 0u;
    *(_OWORD *)(a1 + 153144) = 0u;
    *(_OWORD *)(a1 + 153160) = 0u;
    *(_OWORD *)(a1 + 114040) = 0u;
    *(_DWORD *)(a1 + 114056) = 0;
    *(_QWORD *)(v7 + 8) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 712) = 0;
    *(double *)v7 = a4;
  }
  return result;
}

void sub_10095C2CC(uint64_t *a1, int a2, double a3, double a4, double a5)
{
  uint64_t v9;
  __n128 v10;
  void *__p[3];

  v9 = a1[1];
  *(double *)(v9 + 2168) = a4;
  sub_10047EF84(v9, a5);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1[1] + 176))(a1[1]))
  {
    sub_10095BE78((uint64_t)a1, a3, a3);
    sub_100D9CFD8((uint64_t)(a1 + 19139), __p);
    if (a2)
    {
      v10.n128_f64[0] = a3;
      sub_10095B67C(a1, (double *)__p, v10);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if (a2)
    sub_10047C128(a1[1], a4, a3);
}

void sub_10095C380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10095C39C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  BOOL v6;
  double v7;
  BOOL v8;
  _OWORD v9[3];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  memset(v9, 0, sizeof(v9));
  result = (*(uint64_t (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), v9);
  v8 = !(_DWORD)result
    || (v5 = DWORD1(v13),
        result = (*(uint64_t (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), *(double *)(a2 + 8), *(double *)a2), v5 != (_DWORD)result)&& ((_DWORD)result != 6 ? (v6 = v5 == 6) : (v6 = 1), v6)|| (v7 = *(double *)(a2 + 8), *((double *)&v10 + 1) > v7)|| v7 - *((double *)&v10 + 1) > 10.0;
  *(_BYTE *)(a2 + 20) = v8;
  return result;
}

_QWORD *sub_10095C484(_QWORD *result)
{
  *result = off_10215FCD8;
  return result;
}

void sub_10095C494(_QWORD *a1)
{
  *a1 = off_10215FCD8;
  operator delete();
}

void sub_10095C4B4(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

unsigned __int16 *sub_10095C4E0(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  int v5;
  __int128 v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[36 * (v3 - v2)];
  v5 = *(_DWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 4) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 12) = v6;
  *((_DWORD *)v4 + 10) = v5;
  *(_OWORD *)(v4 + 22) = *(_OWORD *)(a2 + 36);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 56);
  v7 = result[1];
  v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    v9 = *result + 1;
    if (v9 < v8)
      LOWORD(v8) = 0;
    *result = v9 - v8;
  }
  else
  {
    result[1] = v7 + 1;
  }
  return result;
}

BOOL sub_10095C560(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v3 = a1[1];
  v4 = a2 - 501;
  v5 = v4 + v3;
  if (__CFADD__(v4, v3))
  {
    v7 = sub_10095C608(a1, v4 + v3);
    *(_DWORD *)a3 = *(_DWORD *)v7;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v7 + 4);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v7 + 8);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v7 + 12);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v7 + 16);
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(v7 + 20);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(v7 + 28);
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(v7 + 32);
    if (v7 != a3)
      *(_OWORD *)(a3 + 36) = *(_OWORD *)(v7 + 36);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v7 + 56);
  }
  return v5 < v3;
}

uint64_t sub_10095C608(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10215FD28);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10215FD28);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLSwimFusionInput>::operator[](const size_t) const [T = CLSwimFusionInput]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[36 * (v4 - v5) + 4];
}

void sub_10095C804(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

float sub_10095C830(uint64_t a1, _QWORD *a2, double *a3, int8x16_t a4, int8x16_t a5)
{
  float v5;
  float v6;
  float32x4_t v7;
  __int32 *v8;
  float32x4_t v9;
  double v10;
  _QWORD *v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  BOOL v17;
  int v18;
  _BOOL4 v19;
  _WORD *v20;
  float *v21;
  int v22;
  double *v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  int j;
  int v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  float v34;
  float v35;
  int v36;
  float *v37;
  int v38;
  int v39;
  float *v40;
  float v41;
  float v42;
  float *v43;
  BOOL v44;
  int v45;
  float v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  float *v53;
  float v54;
  int v55;
  float v56;
  float *i;
  float v58;
  int v59;
  uint64_t v60;
  int v61;

  v5 = 3.4028e38;
  if (*(_BYTE *)(a1 + 82))
  {
    v6 = 3.4028e38;
    v9 = (float32x4_t)veorq_s8(a4, a4);
    v7 = (float32x4_t)veorq_s8(a5, a5);
    v9.i64[0] = *a2;
    v8 = (__int32 *)(a2 + 1);
    v9.i32[2] = *v8;
    v10 = *(double *)((unint64_t)(v8 + 2) & 0xFFFFFFFFFFFFFFF8);
    v11 = *(_QWORD **)a1;
    v12 = *(unsigned __int16 *)(a1 + 80);
    v13 = *(_DWORD **)(a1 + 16);
    do
    {
      v7.i64[0] = *v11;
      v14 = v11 + 1;
      v7.i32[2] = *v14;
      v11 = v14 + 1;
      v15 = vsubq_f32(v7, v9);
      v16 = vmulq_f32(v15, v15);
      v7 = vpaddq_f32(v16, v16);
      v7.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v7.f32));
      *v13++ = v7.i32[0];
      v6 = fminf(v6, v7.f32[0]);
      v17 = __OFSUB__(v12--, 1);
    }
    while (v12 < 0 == v17);
    *(_WORD *)(a1 + 80) = *(_WORD *)(*(_QWORD *)(a1 + 64) + 2);
    if (SLODWORD(v6) <= *(_DWORD *)(a1 + 32))
    {
      v18 = *(_DWORD *)(a1 + 40);
      v19 = v18 != 0;
      *(_DWORD *)(a1 + 40) = (v18 + 1) % *(unsigned __int16 *)(a1 + 38);
      v20 = *(_WORD **)(a1 + 48);
      v21 = *(float **)(a1 + 24);
      v22 = *(unsigned __int16 *)(a1 + 36);
      do
      {
        v23 = (double *)(*(_QWORD *)(a1 + 72) + 4 * ((_QWORD)v20 - *(_QWORD *)(a1 + 48)));
        v24 = (unsigned __int16)*v20;
        if (v19 || *v20)
        {
          if (*v20)
          {
            v30 = (unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 4 * v24);
            v31 = *v30;
            v32 = *(v30 - 2);
            v33 = (v31 - v32);
            v34 = 3.4028e38;
            v35 = 3.4028e38;
            if ((int)v33 >= 1)
              v34 = v21[(v33 - 1)];
            if ((int)v33 < *(unsigned __int16 *)(a1 + 58) && (int)v33 >= 0)
              v35 = v21[v33];
            v36 = v30[1];
            v37 = (float *)(*(_QWORD *)(a1 + 16) + 4 * v31);
            v38 = *(v30 - 1);
            v39 = v31 + 1;
            v41 = *v37;
            v40 = v37 + 1;
            v42 = v41 + fminf(v34, v35);
            v43 = &v21[v39 - v32];
            if (v38 > v36)
              v38 = v30[1];
            v45 = v38 - v39;
            v44 = v38 < v39;
            v46 = v42;
            *v21 = v42;
            v47 = v21 + 1;
            if (!v44)
            {
              do
              {
                v48 = fminf(v35, v46);
                v49 = *v43++;
                v35 = v49;
                v50 = fminf(v48, v49);
                v51 = *v40++;
                ++v39;
                v46 = v51 + v50;
                v42 = fminf(v42, v51 + v50);
                *v47++ = v51 + v50;
                v17 = __OFSUB__(v45--, 1);
              }
              while (v45 < 0 == v17);
            }
            v52 = v36 - v39;
            if (v36 >= v39)
            {
              v54 = *v40;
              v53 = v40 + 1;
              v17 = __OFSUB__(v52, 1);
              v55 = v52 - 1;
              v56 = v54 + fminf(v35, v46);
              v42 = fminf(v42, v56);
              *v47 = v56;
              for (i = v47 + 1; v55 < 0 == v17; --v55)
              {
                v58 = *v53++;
                v56 = v56 + v58;
                v42 = fminf(v42, v56);
                *i++ = v56;
                v17 = __OFSUB__(v55, 1);
              }
            }
            v59 = *(_DWORD *)(a1 + 32);
            v60 = (v24 + 1);
            *v20 = v60;
            if (SLODWORD(v42) <= v59)
            {
              if ((int)v60 < *(unsigned __int16 *)(a1 + 10))
              {
                v61 = *(unsigned __int16 *)(a1 + 80);
                if (v61 < SHIWORD(*(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v60)))
                  LOWORD(v61) = HIWORD(*(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v60));
                *(_WORD *)(a1 + 80) = v61;
              }
              else
              {
                if (SLODWORD(v5) > SLODWORD(v42))
                {
                  v5 = v42;
                  *a3 = v10 - *v23;
                }
                *v20 = 0;
              }
            }
            else
            {
              *v20 = 0;
            }
          }
        }
        else
        {
          v25 = *(unsigned __int16 *)(a1 + 58);
          *v21 = **(float **)(a1 + 16);
          v26 = v21 + 1;
          v17 = __OFSUB__(v25, 1);
          for (j = v25 - 1; !((j < 0) ^ v17 | (j == 0)); --j)
          {
            *v26++ = 2139095039;
            v17 = __OFSUB__(j, 1);
          }
          v28 = *(unsigned __int16 *)(a1 + 80);
          v29 = *(_QWORD *)(a1 + 64);
          *v20 = 1;
          if (v28 < SHIWORD(*(_DWORD *)(v29 + 4)))
            LOWORD(v28) = HIWORD(*(_DWORD *)(v29 + 4));
          *(_WORD *)(a1 + 80) = v28;
          *v23 = v10;
          v19 = 1;
        }
        ++v20;
        v21 += *(unsigned __int16 *)(a1 + 58);
        v17 = __OFSUB__(v22--, 1);
      }
      while (!((v22 < 0) ^ v17 | (v22 == 0)));
    }
    else
    {
      bzero(*(void **)(a1 + 48), 2 * *(unsigned __int16 *)(a1 + 36));
      return 3.4028e38;
    }
  }
  return v5;
}

uint64_t sub_10095CB18(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  id v20;
  id v21;
  int v23;
  int v24;
  __int128 v25;
  int *v26;

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_QWORD *)(a1 + 104) = a2;
  v3 = sub_1001DC538();
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 120) = v3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  v24 = 0;
  sub_10096EC1C(&v24, &v25);
  v23 = 0;
  v26 = &v23;
  v4 = sub_10096E97C(a1 + 488, &v23, (uint64_t)&unk_101B9EB60, &v26);
  sub_1002B7674((uint64_t)(v4 + 3), &v25);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v24 = 1;
  sub_10096EC1C(&v24, &v25);
  v23 = 1;
  v26 = &v23;
  v8 = sub_10096E97C(a1 + 488, &v23, (uint64_t)&unk_101B9EB60, &v26);
  sub_1002B7674((uint64_t)(v8 + 3), &v25);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  LODWORD(v26) = 0;
  *(_QWORD *)&v25 = &v26;
  *((_BYTE *)sub_10096ED18(a1 + 168, (int *)&v26, (uint64_t)&unk_101B9EB60, (_DWORD **)&v25) + 20) = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    v24 = 2;
    sub_10096EC1C(&v24, &v25);
    v23 = 2;
    v26 = &v23;
    v12 = sub_10096E97C(a1 + 488, &v23, (uint64_t)&unk_101B9EB60, &v26);
    sub_1002B7674((uint64_t)(v12 + 3), &v25);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v24 = 3;
    sub_10096EC1C(&v24, &v25);
    v23 = 3;
    v26 = &v23;
    v16 = sub_10096E97C(a1 + 488, &v23, (uint64_t)&unk_101B9EB60, &v26);
    sub_1002B7674((uint64_t)(v16 + 3), &v25);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    LODWORD(v26) = 1;
    *(_QWORD *)&v25 = &v26;
    *((_BYTE *)sub_10096ED18(a1 + 168, (int *)&v26, (uint64_t)&unk_101B9EB60, (_DWORD **)&v25) + 20) = 0;
  }
  *(_QWORD *)a1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 104), "silo"), "queue");
  v20 = objc_msgSend(objc_msgSend(*(id *)(a1 + 104), "vendor"), "proxyForService:", CFSTR("CLTelephonyService"));
  *(_QWORD *)(a1 + 112) = v20;
  v21 = v20;
  sub_10095CF88(a1);
  sub_10095DA1C(a1);
  return a1;
}

void sub_10095CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_100090BB8(v21);
  sub_100067AC4(v15 + 320);
  sub_100067AC4(v20);
  sub_1001DBC50(v15 + 240);
  sub_100067AC4(v19);
  sub_100067AC4(v18);
  sub_100067AC4(v17);
  sub_100127554(a11);
  sub_100067AC4(v16);
  sub_100127554(v15);
  sub_1002A1C94(v14);
  sub_1004E6A98(v13 + 24);
  _Unwind_Resume(a1);
}

void sub_10095CF88(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t (***v3)();
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t (***v6)();
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t (***v9)();
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t (***v12)();
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t (***v15)();
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t (***v18)();
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t (***v21)();
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t (***v24)();
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t (***v27)();
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t (***v30)();
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t (***v33)();
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t (***v36)();
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t (***v39)();
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t (***v42)();
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t (***v45)();
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t (***v48)();
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t (***v51)();
  uint64_t v52;
  void *__p[2];
  char v54;
  uint64_t (**v55)();
  uint64_t v56;
  __int128 **v57;

  sub_1001A486C(CFSTR("kEmergencyModeChangeNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v2 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_102160260;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v2 + 5);
  v3 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v4 = 4;
    v3 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_6;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_6:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kSimStatusChangeNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v5 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_1021602E0;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v5 + 5);
  v6 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v7 = 4;
    v6 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_13;
    v7 = 5;
  }
  (*v6)[v7]();
LABEL_13:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kBundleChangeNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v8 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_102160360;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v8 + 5);
  v9 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v10 = 4;
    v9 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_20;
    v10 = 5;
  }
  (*v9)[v10]();
LABEL_20:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kDefaultBundleChangeNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v11 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_1021603E0;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v11 + 5);
  v12 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v13 = 4;
    v12 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_27;
    v13 = 5;
  }
  (*v12)[v13]();
LABEL_27:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kInHomeCountryNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v14 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_102160460;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v14 + 5);
  v15 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v16 = 4;
    v15 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_34;
    v16 = 5;
  }
  (*v15)[v16]();
LABEL_34:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kRegistrationDisplayStatusNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v17 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_1021604E0;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v17 + 5);
  v18 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v19 = 4;
    v18 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_41;
    v19 = 5;
  }
  (*v18)[v19]();
LABEL_41:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kCellInfoNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v20 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_102160560;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v20 + 5);
  v21 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v22 = 4;
    v21 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_48;
    v22 = 5;
  }
  (*v21)[v22]();
LABEL_48:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kDataStatusNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v23 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_1021605E0;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v23 + 5);
  v24 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v25 = 4;
    v24 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_55;
    v25 = 5;
  }
  (*v24)[v25]();
LABEL_55:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kSubscriptionChangeNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v26 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_102160660;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v26 + 5);
  v27 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v28 = 4;
    v27 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_62;
    v28 = 5;
  }
  (*v27)[v28]();
LABEL_62:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kSubscriberMccAndMncNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v29 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_1021606E0;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v29 + 5);
  v30 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v31 = 4;
    v30 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_69;
    v31 = 5;
  }
  (*v30)[v31]();
LABEL_69:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kServingMccAndMncNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v32 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_102160760;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v32 + 5);
  v33 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v34 = 4;
    v33 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_76;
    v34 = 5;
  }
  (*v33)[v34]();
LABEL_76:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kPhoneNumberStatusNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v35 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_1021607E0;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v35 + 5);
  v36 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v37 = 4;
    v36 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_83;
    v37 = 5;
  }
  (*v36)[v37]();
LABEL_83:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kSimInfoChangedNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v38 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_102160860;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v38 + 5);
  v39 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v40 = 4;
    v39 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_90;
    v40 = 5;
  }
  (*v39)[v40]();
LABEL_90:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kVoiceLinkQualityNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v41 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_1021608E0;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v41 + 5);
  v42 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v43 = 4;
    v42 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_97;
    v43 = 5;
  }
  (*v42)[v43]();
LABEL_97:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kTandemCapabilityNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v44 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_102160960;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v44 + 5);
  v45 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v46 = 4;
    v45 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_104;
    v46 = 5;
  }
  (*v45)[v46]();
LABEL_104:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kStewieSupportNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v47 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_1021609E0;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v47 + 5);
  v48 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v49 = 4;
    v48 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_111;
    v49 = 5;
  }
  (*v48)[v49]();
LABEL_111:
  if (v54 < 0)
    operator delete(__p[0]);
  sub_1001A486C(CFSTR("kImsRegStatusNotification"), (uint64_t)__p);
  v55 = (uint64_t (**)())__p;
  v50 = sub_10096EF38(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v55);
  v55 = off_102160A60;
  v56 = a1;
  v57 = (__int128 **)&v55;
  sub_100858318(&v55, (_QWORD *)v50 + 5);
  v51 = (uint64_t (***)())v57;
  if (v57 == (__int128 **)&v55)
  {
    v52 = 4;
    v51 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_118;
    v52 = 5;
  }
  (*v51)[v52]();
LABEL_118:
  if (v54 < 0)
    operator delete(__p[0]);
}

void sub_10095D9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10095DA1C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id v4;
  CTClientDelegate *v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];
  _QWORD v24[5];
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[5];
  _QWORD v29[5];
  _QWORD v30[5];
  _DWORD v31[4];
  uint8_t buf[4];
  int v33;

  sub_10095E03C(a1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 120);
    *(_DWORD *)buf = 67109120;
    v33 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl,createCTClient,isTandem,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = *(unsigned __int8 *)(a1 + 120);
    v31[0] = 67109120;
    v31[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,createCTClient,isTandem,%d", v31);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::createCTClient()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v4 = objc_msgSend(objc_alloc((Class)CoreTelephonyClient), "initWithQueue:", *(_QWORD *)a1);
  *(_QWORD *)(a1 + 16) = v4;
  if (!v4)
    sub_10190FAB0();
  v5 = objc_alloc_init(CTClientDelegate);
  *(_QWORD *)(a1 + 8) = v5;
  if (!v5)
    sub_10190FC1C();
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10095E1E8;
  v30[3] = &unk_10215FD48;
  v30[4] = a1;
  -[CTClientDelegate setFEmergModeCb:](v5, "setFEmergModeCb:", v30);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10095E3F0;
  v29[3] = &unk_10215FD68;
  v29[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFSimStatusCb:", v29);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_10095E71C;
  v28[3] = &unk_10215FD88;
  v28[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFCarrierBundleChangeCb:", v28);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10095EA28;
  v27[3] = &unk_10215FD88;
  v27[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFOperatorBundleChangeCb:", v27);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10095ED34;
  v26[3] = &unk_10212ECA0;
  v26[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFDefaultBundleChangeCb:", v26);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10095EF70;
  v25[3] = &unk_10215FDA8;
  v25[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFDisplayStatusCb:", v25);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10095F478;
  v24[3] = &unk_10215FDC8;
  v24[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFDataStatusCb:", v24);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10095F92C;
  v23[3] = &unk_10212ECA0;
  v23[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFSubscriptionInfoCb:", v23);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10095FACC;
  v22[3] = &unk_10215FD88;
  v22[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFSubscriberMccCb:", v22);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100209E88;
  v21[3] = &unk_10215FDE8;
  v21[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFCellInfoCb:", v21);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10095FCC4;
  v20[3] = &unk_10215FE08;
  v20[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFLinkQualityCb:", v20);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10096017C;
  v19[3] = &unk_10215FE28;
  v19[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFVoiceLinkQualityCb:", v19);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1009608CC;
  v18[3] = &unk_10215FE48;
  v18[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFServingCellChangedCb:", v18);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100960D68;
  v17[3] = &unk_10215FD88;
  v17[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFServingNetworkChangedCb:", v17);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1009611E4;
  v16[3] = &unk_10215FE68;
  v16[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFSuplSmsCb:", v16);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100961524;
  v15[3] = &unk_10215FE88;
  v15[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFSmsSentCb:", v15);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1009617DC;
  v14[3] = &unk_10215FD88;
  v14[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFprefDataSimChangedCb:", v14);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100961B00;
  v13[3] = &unk_10215FD88;
  v13[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFPhoneNumberInfoCb:", v13);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100961CF4;
  v12[3] = &unk_10212ECA0;
  v12[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFTandemCapabilityChangeCb:", v12);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100961E94;
  v11[3] = &unk_10212ECA0;
  v11[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFStewieSupportChangedCb:", v11);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100962088;
  v10[3] = &unk_10215FEA8;
  v10[4] = a1;
  objc_msgSend(*(id *)(a1 + 8), "setFImsRegStatusCb:", v10);
  return objc_msgSend(*(id *)(a1 + 16), "setDelegate:", *(_QWORD *)(a1 + 8));
}

uint64_t sub_10095DFA8(uint64_t a1)
{
  sub_10095E03C(a1);

  *(_QWORD *)(a1 + 112) = 0;
  sub_100090BB8(a1 + 488);
  sub_100067AC4(a1 + 448);
  sub_100067AC4(a1 + 408);
  sub_1001DBC50(a1 + 368);
  sub_100067AC4(a1 + 328);
  sub_100067AC4(a1 + 288);
  sub_100067AC4(a1 + 248);
  sub_100127554(a1 + 208);
  sub_100067AC4(a1 + 168);
  sub_100127554(a1 + 128);
  sub_1002A1C94(a1 + 64);
  sub_1004E6A98(a1 + 24);
  return a1;
}

void sub_10095E03C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl destroyCTClient", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl destroyCTClient", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::destroyCTClient()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
}

id sub_10095E1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10095E1F0(*(_QWORD *)(a1 + 32), a2, a3);
}

id sub_10095E1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478083;
    v15 = a2;
    v16 = 2114;
    v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ctcl,#emg,onEmergencyModeChanged context %{private}@, mode %{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = 138478083;
    v11 = a2;
    v12 = 2114;
    v13 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#emg,onEmergencyModeChanged context %{private}@, mode %{public}@", &v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onEmergencyModeChanged(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_1005A460C(buf, a2, a3);
  return objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kEmergencyModeChangeNotification"), sub_1005A4D00(buf));
}

void sub_10095E3F0(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10095E3F8(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_10095E3F8(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  uint64_t v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478083;
    v18 = a2;
    v19 = 2113;
    v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ctcl,#supl,onSimStatusChange context %{private}@, status %{private}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v13 = 138478083;
    v14 = a2;
    v15 = 2113;
    v16 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#supl,onSimStatusChange context %{private}@, status %{private}@", &v13, 22);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onSimStatusChange(CTXPCServiceSubscriptionContext *, NSString *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*(_BYTE *)(a1 + 120) || objc_msgSend(a2, "slotID") != (id)2)
  {
    sub_10095FAD4(a1, a2);
    sub_100965CA0(a1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onSimStatusChange,received Invalid from CTXPCServiceSubscriptionContext", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v13) = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,onSimStatusChange,received Invalid from CTXPCServiceSubscriptionContext", &v13, v12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSimStatusChange(CTXPCServiceSubscriptionContext *, NSString *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10095E71C(uint64_t a1, void *a2)
{
  sub_10095E724(*(_QWORD *)(a1 + 32), a2);
}

void sub_10095E724(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#cb,onCarrierBundleChangedNotifFromCT,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#cb,onCarrierBundleChangedNotifFromCT,context,%{private}@", &v11, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onCarrierBundleChangedNotifFromCT(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (*(_BYTE *)(a1 + 120) || objc_msgSend(a2, "slotID") != (id)2)
  {
    sub_1009675F0(a1, a2, 1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onCarrierBundleChangedNotifFromCT,InvalidSlot", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v11) = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,onCarrierBundleChangedNotifFromCT,InvalidSlot", &v11, v10);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onCarrierBundleChangedNotifFromCT(CTXPCServiceSubscriptionContext *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_10095EA28(uint64_t a1, void *a2)
{
  sub_10095EA30(*(_QWORD *)(a1 + 32), a2);
}

void sub_10095EA30(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#cb,onOperatorBundleChangedNotifFromCT,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#cb,onOperatorBundleChangedNotifFromCT,context,%{private}@", &v11, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onOperatorBundleChangedNotifFromCT(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (*(_BYTE *)(a1 + 120) || objc_msgSend(a2, "slotID") != (id)2)
  {
    sub_1009675F0(a1, a2, 2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onOperatorBundleChangedNotifFromCT,InvalidSlot", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v11) = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,onOperatorBundleChangedNotifFromCT,InvalidSlot", &v11, v10);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onOperatorBundleChangedNotifFromCT(CTXPCServiceSubscriptionContext *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

id sub_10095ED34(uint64_t a1)
{
  return sub_10095ED3C(*(_QWORD *)(a1 + 32));
}

id sub_10095ED3C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSArray *v4;
  id v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  __int16 v11;
  const __CFString *v12;
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryDefaultBundle", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#cb,queryDefaultBundle", &v11, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDefaultBundle()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v3 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1);
  v12 = CFSTR("LocationByCountry");
  v4 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1);
  v5 = objc_msgSend(objc_alloc((Class)CTBundle), "initWithBundleType:", 4);
  v6 = *(void **)(a1 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100969698;
  v10[3] = &unk_102160068;
  v10[4] = v4;
  v10[5] = a1;
  return objc_msgSend(v6, "copyCarrierBundleValue:keyHierarchy:bundleType:completion:", v3, v4, v5, v10);
}

void sub_10095EF70(uint64_t a1, void *a2, void *a3)
{
  sub_10095EF78(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_10095EF78(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  std::string *v9;
  NSObject *v10;
  const char *v11;
  uint64_t *v12;
  void **v13;
  const char *v14;
  std::string *v15;
  uint64_t v16;
  int v17;
  _BYTE v18[12];
  __int16 v19;
  void *v20;
  std::string buf;
  __int16 v22;
  char v23;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138478083;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2113;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,onRegistrationDisplayStatusChanged,context,%{private}@,status,%{private}@", (uint8_t *)&buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_DWORD *)v18 = 138478083;
    *(_QWORD *)&v18[4] = a2;
    v19 = 2113;
    v20 = a3;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,onRegistrationDisplayStatusChanged,context,%{private}@,status,%{private}@", v18, 22);
    v15 = (std::string *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onRegistrationDisplayStatusChanged(CTXPCServiceSubscriptionContext *, CTRegistrationDisplayStatus *)", "%s\n", v14);
    if (v15 != &buf)
      free(v15);
  }
  if ((sub_10125F338(a2, objc_msgSend(a3, "registrationDisplayStatus")) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 120) || objc_msgSend(a2, "slotID") != (id)2)
    {
      sub_1005A556C(&buf, a3);
      v17 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
      *(_QWORD *)v18 = &v17;
      v12 = sub_1009700C8(a1 + 208, &v17, (uint64_t)&unk_101B9EB60, (_DWORD **)v18);
      v13 = (void **)(v12 + 3);
      if (*((char *)v12 + 47) < 0)
        operator delete(*v13);
      *(_OWORD *)v13 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      v12[5] = buf.__r_.__value_.__r.__words[2];
      *((_WORD *)v12 + 24) = v22;
      *((_BYTE *)v12 + 50) = v23;
      objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kRegistrationDisplayStatusNotification"), sub_101260564(a1 + 208));
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onRegistrationDisplayStatusChanged,InvalidInstance", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
        *(_WORD *)v18 = 0;
        LODWORD(v16) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,onRegistrationDisplayStatusChanged,InvalidInstance", v18, v16);
        v9 = (std::string *)v8;
        sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onRegistrationDisplayStatusChanged(CTXPCServiceSubscriptionContext *, CTRegistrationDisplayStatus *)", "%s\n", v8);
LABEL_25:
        if (v9 != &buf)
          free(v9);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Warning,#ctcl,#cterror,isValidParamsDisplayStatus failed", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      *(_WORD *)v18 = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,#ctcl,#cterror,isValidParamsDisplayStatus failed", v18, v16);
      v9 = (std::string *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onRegistrationDisplayStatusChanged(CTXPCServiceSubscriptionContext *, CTRegistrationDisplayStatus *)", "%s\n", v11);
      goto LABEL_25;
    }
  }
}

void sub_10095F454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10095F478(uint64_t a1, void *a2, void *a3)
{
  sub_10095F480(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_10095F480(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  NSObject *v7;
  double v8;
  _BYTE *v9;
  _BYTE *v10;
  NSObject *v11;
  double v12;
  _BYTE *v13;
  _QWORD *v14;
  char v15;
  __int128 v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  _BYTE v21[12];
  __int16 v22;
  void *v23;
  _BYTE buf[32];
  char v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138478083;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2113;
    *(_QWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,onDataStatusChanged,context,%{private}@,status,%{private}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_DWORD *)v21 = 138478083;
    *(_QWORD *)&v21[4] = a2;
    v22 = 2113;
    v23 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,onDataStatusChanged,context,%{private}@,status,%{private}@", v21, 22);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onDataStatusChanged(CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if ((sub_10125FB88(a2, (uint64_t)a3) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 120) || objc_msgSend(a2, "slotID") != (id)2)
    {
      sub_1005A61A0((uint64_t)buf, a3);
      v20 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
      *(_QWORD *)v21 = &v20;
      v14 = sub_10071E124(a1 + 248, &v20, (uint64_t)&unk_101B9EB60, (_DWORD **)v21);
      v15 = v25;
      v16 = *(_OWORD *)&buf[16];
      *(_OWORD *)((char *)v14 + 20) = *(_OWORD *)buf;
      *(_OWORD *)((char *)v14 + 36) = v16;
      *((_BYTE *)v14 + 52) = v15;
      objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kDataStatusNotification"), sub_101260A38(a1 + 248));
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onDataStatusChanged,InvalidInstance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      *(_WORD *)v21 = 0;
      LODWORD(v19) = 2;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,onDataStatusChanged,InvalidInstance", v21, v19);
      v10 = v9;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onDataStatusChanged(CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n", v8);
LABEL_25:
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning,#ctcl,#cterror,isValidParamsDataStatus failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      *(_WORD *)v21 = 0;
      LODWORD(v19) = 2;
      v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,#ctcl,#cterror,isValidParamsDataStatus failed", v21, v19);
      v10 = v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onDataStatusChanged(CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n", v12);
      goto LABEL_25;
    }
  }
}

void sub_10095F92C(uint64_t a1)
{
  sub_10095F934(*(_QWORD *)(a1 + 32));
}

void sub_10095F934(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#sub,subscriptionInfoChanged", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#sub,subscriptionInfoChanged", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onSubscriptionInfoChanged()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100962598(a1);
}

id sub_10095FACC(uint64_t a1, void *a2)
{
  return sub_10095FAD4(*(_QWORD *)(a1 + 32), a2);
}

id sub_10095FAD4(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,querySubscriberMccAndMnc,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,querySubscriberMccAndMnc,context,%{private}@", &v11, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = a2;
  v6 = *(void **)(a1 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100966038;
  v10[3] = &unk_10215FFB0;
  v10[4] = a2;
  v10[5] = a1;
  return objc_msgSend(v6, "copyMobileSubscriberCountryCode:completion:", a2, v10);
}

void sub_10095FCC4(uint64_t a1, void *a2, void *a3)
{
  sub_10095FCCC(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_10095FCCC(uint64_t a1, void *a2, void *a3)
{
  int v5;
  int v6;
  __CFString **v7;
  NSObject *v8;
  const char *v9;
  __CFString *v10;
  id v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  NSNumber *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  uint8_t *v21;
  __CFString *v22;
  NSNumber *v23;
  int v24;
  _BYTE v25[5];
  char v26;
  __CFString *v27;
  uint8_t buf[4];
  _BYTE v29[5];
  char v30;
  __CFString *v31;

  if (!a3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021601E0);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#ci,onLinkQualityChanged ERROR: metric from notification is null", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021601E0);
    LOWORD(v24) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#ci,onLinkQualityChanged ERROR: metric from notification is null", &v24, 2);
LABEL_34:
    v21 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTEnhancedDataLinkQualityMetric *)", "%s\n", v9);
    if (v21 != buf)
      free(v21);
    return;
  }
  v5 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
  if (!v5)
  {
    v7 = &off_102145CF8;
LABEL_14:
    v10 = *v7;
    v11 = objc_msgSend(a3, "enhancedLinkQuality");
    v13 = sub_1012649DC(v11, v12);
    if (v13 == 1)
    {
      v14 = HIBYTE(v13);
      v15 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v13 >> 8));
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021601E0);
      v16 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 16909058;
        v29[0] = v14;
        *(_DWORD *)&v29[1] = 1107362050;
        v30 = 8;
        v31 = v10;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,#LQM onLinkQualityChanged lqm: %{public}hhd, type: %{public}hhd, key: %{public}@", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021601E0);
        v24 = 16909058;
        v25[0] = v14;
        *(_DWORD *)&v25[1] = 1107362050;
        v26 = 8;
        v27 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ctcl,#ci,#LQM onLinkQualityChanged lqm: %{public}hhd, type: %{public}hhd, key: %{public}@", &v24, 18);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTEnhancedDataLinkQualityMetric *)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v17 = *(void **)(a1 + 112);
      v22 = v10;
      v23 = v15;
      objc_msgSend(v17, "sendNotificationToClients:notificationData:", CFSTR("kLinkQualityNotification"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
    }
    return;
  }
  v6 = v5;
  if (v5 == 1)
  {
    v7 = &off_102145D00;
    goto LABEL_14;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v18 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,onLinkQualityChanged invalid slotdId %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v24 = 67240192;
    *(_DWORD *)v25 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,#ci,onLinkQualityChanged invalid slotdId %{public}d", &v24, 8);
    goto LABEL_34;
  }
}

void sub_10096017C(uint64_t a1, void *a2, void *a3)
{
  sub_100960184(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_100960184(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  unsigned int v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  const char *v18;
  char *v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  _BYTE v23[14];
  _BYTE buf[1638];

  if (*(_BYTE *)(a1 + 120) || objc_msgSend(a2, "slotID") != (id)2)
  {
    if (objc_msgSend(a2, "slotID"))
    {
      if (a3)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021601E0);
        v8 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = objc_msgSend(objc_msgSend(a3, "linkQuality"), "intValue");
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = objc_msgSend(a2, "slotID");
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,#vlqm, onVoiceLinkQualityChanged vlqm: %{public}d, slotID: %{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021601E0);
          v15 = qword_1022A0088;
          *(_DWORD *)v23 = 67240448;
          *(_DWORD *)&v23[4] = objc_msgSend(objc_msgSend(a3, "linkQuality"), "intValue");
          *(_WORD *)&v23[8] = 1026;
          *(_DWORD *)&v23[10] = objc_msgSend(a2, "slotID");
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "#ctcl,#ci,#vlqm, onVoiceLinkQualityChanged vlqm: %{public}d, slotID: %{public}d", v23, 14);
          v17 = (char *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onVoiceLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTVoiceLinkQualityMetric *)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
        v9 = objc_msgSend(objc_msgSend(a3, "linkQuality"), "intValue");
        *(_DWORD *)v23 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
        *(_QWORD *)buf = v23;
        *((_DWORD *)sub_10006A62C(a1 + 448, (int *)v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) = v9;
        v10 = sub_1012647D4((_QWORD *)(a1 + 448));
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021601E0);
        v11 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,#vlqm, onVoiceLinkQualityChanged voiceLqmInfo:%{public}@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021601E0);
          *(_DWORD *)v23 = 138543362;
          *(_QWORD *)&v23[4] = v10;
          LODWORD(v22) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ctcl,#ci,#vlqm, onVoiceLinkQualityChanged voiceLqmInfo:%{public}@", v23, v22);
          v19 = (char *)v18;
          sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onVoiceLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTVoiceLinkQualityMetric *)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kVoiceLinkQualityNotification"), v10);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021601E0);
        v14 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ctcl,#vlqm,onVoiceLinkQualityChanged ERROR: vlqm is null", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021601E0);
          *(_WORD *)v23 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#vlqm,onVoiceLinkQualityChanged ERROR: vlqm is null", v23, 2);
          v21 = (char *)v20;
          sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onVoiceLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTVoiceLinkQualityMetric *)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        *(_DWORD *)v23 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
        *(_QWORD *)buf = v23;
        *((_DWORD *)sub_10006A62C(a1 + 448, (int *)v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) = -1;
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021601E0);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ctcl,#vlqm,onVoiceLinkQualityChanged ERROR: unknown slotId", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021601E0);
        *(_WORD *)v23 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#vlqm,onVoiceLinkQualityChanged ERROR: unknown slotId", v23, 2, *(_QWORD *)v23);
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onVoiceLinkQualityChanged,InvalidInstance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      *(_WORD *)v23 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,onVoiceLinkQualityChanged,InvalidInstance", v23, 2, *(_QWORD *)v23);
LABEL_32:
      v13 = (char *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onVoiceLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTVoiceLinkQualityMetric *)", "%s\n", v7);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_1009608CC(uint64_t a1, void *a2, void *a3)
{
  sub_1009608D4(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_1009608D4(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  int v7;
  __CFString **v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  __CFString *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint8_t buf[4];
  _BYTE v26[18];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138478083;
    *(_QWORD *)v26 = a2;
    *(_WORD *)&v26[8] = 2113;
    *(_QWORD *)&v26[10] = objc_msgSend(a3, "description");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,onServingCellChanged context %{private}@, info %{private}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v13 = qword_1022A0078;
    v21 = 138478083;
    v22 = a2;
    v23 = 2113;
    v24 = objc_msgSend(a3, "description");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "#ctcl,#ci,onServingCellChanged context %{private}@, info %{private}@", &v21, 22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onServingCellChanged(CTXPCServiceSubscriptionContext *, NSDictionary *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v7 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
  if (!v7)
  {
    v8 = &off_102145CF8;
    if (a3)
      goto LABEL_9;
LABEL_11:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v26 = 0;
      *(_WORD *)&v26[4] = 2082;
      *(_QWORD *)&v26[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci,onServingCellChanged nil info dict!\"}", buf, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
    }
    v11 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v26 = 0;
      *(_WORD *)&v26[4] = 2082;
      *(_QWORD *)&v26[6] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ctcl,#cterror,#ci,onServingCellChanged nil info dict!", "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci,onServingCellChanged nil info dict!\"}", buf, 0x12u);
    }
    return;
  }
  if (v7 == 1)
  {
    v8 = &off_102145D00;
    if (a3)
    {
LABEL_9:
      v9 = *(void **)(a1 + 112);
      v19 = *v8;
      v20 = a3;
      objc_msgSend(v9, "sendNotificationToClients:notificationData:", CFSTR("kServingCellChangedNotification"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
      return;
    }
    goto LABEL_11;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,onServingCellChanged invalid slotdId", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    LOWORD(v21) = 0;
    LODWORD(v18) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,#ci,onServingCellChanged invalid slotdId", &v21, v18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onServingCellChanged(CTXPCServiceSubscriptionContext *, NSDictionary *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100960D68(uint64_t a1, void *a2)
{
  sub_100960D70(*(_QWORD *)(a1 + 32), a2);
}

void sub_100960D70(uint64_t a1, void *a2)
{
  NSObject *v4;
  int v5;
  __CFString **v6;
  __CFString *v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  __CFString *v17;
  id v18;
  int v19;
  void *v20;
  uint8_t buf[4];
  _QWORD v22[204];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v22[0] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,onServingNetworkChanged context %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v19 = 138477827;
    v20 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#ci,onServingNetworkChanged context %{private}@", &v19, 12);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onServingNetworkChanged(CTXPCServiceSubscriptionContext *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v5 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
  if (!v5)
  {
    v6 = &off_102145CF8;
LABEL_10:
    v7 = *v6;
    if (objc_msgSend(a2, "label"))
    {
      v8 = *(void **)(a1 + 112);
      v17 = v7;
      v18 = objc_msgSend(a2, "label");
      objc_msgSend(v8, "sendNotificationToClients:notificationData:", CFSTR("kServingNetworkChangedNotification"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289026;
        LODWORD(v22[0]) = 0;
        WORD2(v22[0]) = 2082;
        *(_QWORD *)((char *)v22 + 6) = "";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci,onServingNetworkChanged nil context label\"}", buf, 0x12u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
      }
      v13 = qword_1022A0078;
      if (os_signpost_enabled((os_log_t)qword_1022A0078))
      {
        *(_DWORD *)buf = 68289026;
        LODWORD(v22[0]) = 0;
        WORD2(v22[0]) = 2082;
        *(_QWORD *)((char *)v22 + 6) = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ctcl,#cterror,#ci,onServingNetworkChanged nil context label", "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci,onServingNetworkChanged nil context label\"}", buf, 0x12u);
      }
    }
    return;
  }
  if (v5 == 1)
  {
    v6 = &off_102145D00;
    goto LABEL_10;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,onServingNetworkChanged invalid slotdId", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    LOWORD(v19) = 0;
    LODWORD(v16) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,#ci,onServingNetworkChanged invalid slotdId", &v19, v16);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onServingNetworkChanged(CTXPCServiceSubscriptionContext *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_1009611E4(uint64_t a1, void *a2, void *a3)
{
  sub_1009611EC(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_1009611EC(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  CFDictionaryRef v7;
  const __CFDictionary *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478083;
    v20 = a2;
    v21 = 2113;
    v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ctcl,#supl,OnSuplSMSReceived context %{private}@, body %{private}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15 = 138478083;
    v16 = a2;
    v17 = 2113;
    v18 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#supl,OnSuplSMSReceived context %{private}@, body %{private}@", &v15, 22);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::OnSuplSMSReceived(CTXPCServiceSubscriptionContext *, NSData *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if ((sub_101260E60(a2, (uint64_t)a3) & 1) != 0)
  {
    v7 = sub_1012611B0(a2, a3);
    v8 = v7;
    objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kSuplInitPayloadNotification"), v7);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isSuplInfoValid failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v15) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,isSuplInfoValid failed", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::OnSuplSMSReceived(CTXPCServiceSubscriptionContext *, NSData *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_100961524(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
  sub_10096152C(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_10096152C(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
  NSObject *v12;
  CFDictionaryRef v13;
  const __CFDictionary *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290306;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 1026;
    v24 = objc_msgSend(a2, "slotID");
    v25 = 1026;
    v26 = a3;
    v27 = 1026;
    v28 = a4;
    v29 = 1026;
    v30 = a5;
    v31 = 1026;
    v32 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ctcl,onSmsSent\", \"ins\":%{public}d, \"success\":%{public}hhd, \"messageID\":%{public}d, \"sendError\":%{public}d, \"modemError\":%{public}d}", buf, 0x30u);
  }
  if ((sub_101261AE0(a2) & 1) != 0)
  {
    v13 = sub_101262538(a2, a3, a4, a5, a6);
    v14 = v13;
    objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kSmsSentNotification"), v13);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidSubscriptionContext failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v18[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,isValidSubscriptionContext failed", v18, 2);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSmsSent(CTXPCServiceSubscriptionContext *, BOOL, NSInteger, NSInteger, NSInteger)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_1009617DC(uint64_t a1, void *a2)
{
  sub_1009617E4(*(_QWORD *)(a1 + 32), a2);
}

void sub_1009617E4(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  CFDictionaryRef v8;
  const __CFDictionary *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint8_t buf[4];
  void *v16;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,onPrefDSChanged context %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v13 = 138477827;
    v14 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,onPrefDSChanged context %{private}@", &v13, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onPrefDataSimChanged(CTXPCServiceSubscriptionContext *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*(_BYTE *)(a1 + 120) || objc_msgSend(a2, "slotID") != (id)2)
  {
    v8 = sub_101261E0C(a2);
    v9 = v8;
    objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kPrefDataSimChangedNotification"), v8);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onPrefDataSimChanged,InvalidInstance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v13) = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,onPrefDataSimChanged,InvalidInstance", &v13, v12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onPrefDataSimChanged(CTXPCServiceSubscriptionContext *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

id sub_100961B00(uint64_t a1, uint64_t a2)
{
  return sub_100961B08(*(_QWORD *)(a1 + 32), a2);
}

id sub_100961B08(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[6];
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryPhoneNumberInfo,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = 138477827;
    v11 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryPhoneNumberInfo,context,%{private}@", &v10, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryPhoneNumberInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10096AFC0;
  v9[3] = &unk_1021600E0;
  v9[4] = a2;
  v9[5] = a1;
  return objc_msgSend(v5, "getPhoneNumberWithCompletion:completion:", a2, v9);
}

void sub_100961CF4(uint64_t a1)
{
  sub_100961CFC(*(_QWORD *)(a1 + 32));
}

void sub_100961CFC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl,TandemCapabilityChanged", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,TandemCapabilityChanged", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::tandemCapabilityChanged()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10096B7E8(a1);
}

id sub_100961E94(uint64_t a1)
{
  return sub_100961E9C(*(_QWORD *)(a1 + 32));
}

id sub_100961E9C(uint64_t a1)
{
  int v2;
  char v3;
  NSObject *v4;
  void *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[5];
  char v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v2 = _os_feature_enabled_impl("CoreTelephony", "Bifrost");
  v3 = v2;
  if (v2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryStewieSupport,querying", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryStewieSupport,querying", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryStewieSupport()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  v5 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10096D564;
  v9[3] = &unk_102160150;
  v9[4] = a1;
  v10 = v3;
  return objc_msgSend(v5, "getStewieSupportWithCompletion:", v9);
}

id sub_100962088(uint64_t a1, void *a2, void *a3)
{
  return sub_100962090(*(_QWORD *)(a1 + 32), a2, a3);
}

id sub_100962090(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  id result;
  const char *v8;
  uint8_t *v9;
  int v10;
  void *v11;
  uint8_t buf[4];
  void *v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,queryImsRegStatus,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = 138477827;
    v11 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryImsRegStatus,context,%{private}@", &v10, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryImsRegStatus(CTXPCServiceSubscriptionContext *, CTIMSRegistrationTransportInfo *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  result = objc_msgSend(a3, "transportType");
  if (!(_DWORD)result)
    return sub_10096DF7C(a1, a2);
  return result;
}

void sub_100962260(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl onCTConnectionInvalidatedNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl onCTConnectionInvalidatedNotification", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onCTConnectionInvalidatedNotification()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10095E03C(a1);
}

void sub_1009623F8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl onCTDaemonReadyNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl onCTDaemonReadyNotification", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onCTDaemonReadyNotification()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10095DA1C(a1);
  sub_100962598(a1);
}

void sub_100962598(uint64_t a1)
{
  NSObject *v2;
  unsigned __int8 *v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,queryCT", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,queryCT", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCT()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v3 = *(unsigned __int8 **)(a1 + 80);
  if (v3)
  {
    v4 = (_QWORD *)(a1 + 24);
    do
    {
      v5 = sub_1001987C8(v4, v3 + 16);
      if (v5)
      {
        v6 = *((_QWORD *)v5 + 8);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
      }
      v3 = *(unsigned __int8 **)v3;
    }
    while (v3);
  }
}

id sub_100962760(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  const char *v5;
  uint8_t *v6;
  _QWORD v7[5];
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#sub,querySubscriptionInfo", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#sub,querySubscriptionInfo", v8, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriptionInfo()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(void **)(a1 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10096292C;
  v7[3] = &unk_10215FEC8;
  v7[4] = a1;
  return objc_msgSend(v3, "getSubscriptionInfo:", v7);
}

id sub_10096292C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  NSObject *v5;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  void *v14;
  uint8_t buf[4];
  void *v16;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#sub,#cterror,querySubscriptionInfo,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = 138412290;
      v14 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#sub,#cterror,querySubscriptionInfo,%@", &v13, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::querySubscriptionInfo()_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    return objc_msgSend(*(id *)(v3 + 112), "sendNotificationToClients:notificationData:", CFSTR("kSubscriptionsInUseNotification"), 0);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ctcl,#sub,querySubscriptionInfo,SubscriptionInfo,%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = 138477827;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#sub,querySubscriptionInfo,SubscriptionInfo,%{private}@", &v13, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriptionInfo()_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return (id)sub_100962C48(v3, a2);
  }
}

uint64_t sub_100962C48(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  unsigned int v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  const char *v29;
  uint8_t *v30;
  id v31;
  void *v32;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int16 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  int v47;
  const __CFString *v48;
  id v49;
  _BYTE v50[128];
  int v51;
  unsigned int v52;
  __int16 v53;
  void *v54;
  uint8_t buf[8];
  __int16 v56;
  void *v57;
  _BYTE v58[128];

  memset(v46, 0, sizeof(v46));
  v47 = 1065353216;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v3 = objc_msgSend(a2, "subscriptions");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v42, v58, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v43;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v43 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v6);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
        v8 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v9 = objc_msgSend(v7, "slotID");
          *(_DWORD *)buf = 67174915;
          *(_DWORD *)&buf[4] = v9;
          v56 = 2113;
          v57 = v7;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#ctcl,#sub,subscriptions,ins,%{private}d,SubscriptionContext,%{private}@", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021601C0);
          v12 = qword_1022A0078;
          v13 = objc_msgSend(v7, "slotID");
          v51 = 67174915;
          v52 = v13;
          v53 = 2113;
          v54 = v7;
          LODWORD(v34) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "#ctcl,#sub,subscriptions,ins,%{private}d,SubscriptionContext,%{private}@", &v51, v34);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::processSubscriptionInfo(CTXPCServiceSubscriptionInfo *)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        if ((sub_101261AE0(v7) & 1) != 0)
        {
          sub_1005A788C((uint64_t)&v40, v7);
          v51 = sub_100099E54((uint64_t)objc_msgSend(v7, "slotID"));
          *(_QWORD *)buf = &v51;
          v10 = sub_10096FEA4((uint64_t)v46, &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          *((_WORD *)v10 + 10) = v40;
          *((_BYTE *)v10 + 22) = v41;
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021601C0);
          v11 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ctcl,#sub,#cterror,isValidSubscriptionContext failed", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021601C0);
            LOWORD(v51) = 0;
            LODWORD(v34) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#sub,#cterror,isValidSubscriptionContext failed", &v51, v34);
            v17 = (uint8_t *)v16;
            sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::processSubscriptionInfo(CTXPCServiceSubscriptionInfo *)", "%s\n", v16);
            if (v17 != buf)
              free(v17);
          }
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v18 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v42, v58, 16);
      v4 = v18;
    }
    while (v18);
  }
  objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kSubscriptionChangeNotification"), sub_101262118((uint64_t)v46));
  v19 = +[NSMutableArray array](NSMutableArray, "array");
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v20 = objc_msgSend(a2, "subscriptionsInUse");
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v36, v50, 16);
  if (v21)
  {
    v22 = *(_QWORD *)v37;
    do
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v37 != v22)
          objc_enumerationMutation(v20);
        v24 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)v23);
        objc_msgSend(v19, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100099E54((uint64_t)objc_msgSend(v24, "slotID"))));
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
        v25 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v26 = objc_msgSend(v24, "slotID");
          *(_DWORD *)buf = 67174915;
          *(_DWORD *)&buf[4] = v26;
          v56 = 2113;
          v57 = v24;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#ctcl,#sub,subscriptionsInUse,ins,%{private}d,SubscriptionContext,%{private}@", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021601C0);
          v27 = qword_1022A0078;
          v28 = objc_msgSend(v24, "slotID");
          v51 = 67174915;
          v52 = v28;
          v53 = 2113;
          v54 = v24;
          LODWORD(v34) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 2, "#ctcl,#sub,subscriptionsInUse,ins,%{private}d,SubscriptionContext,%{private}@", &v51, v34);
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::processSubscriptionInfo(CTXPCServiceSubscriptionInfo *)", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        v23 = (char *)v23 + 1;
      }
      while (v21 != v23);
      v31 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v36, v50, 16);
      v21 = v31;
    }
    while (v31);
  }
  v32 = *(void **)(a1 + 112);
  v48 = CFSTR("kSubscriptionsInUseKey");
  v49 = v19;
  objc_msgSend(v32, "sendNotificationToClients:notificationData:", CFSTR("kSubscriptionsInUseNotification"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
  return sub_100067AC4((uint64_t)v46);
}

void sub_1009632FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_100067AC4((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_100963354(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  int v5;
  const char *v6;
  uint8_t buf[4];
  const char *v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_100963580(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1));
    if (*(_BYTE *)(a1 + 120))
      sub_100963580(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v8 = "queryRegistrationDisplayStatusInfo";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v5 = 136315138;
      v6 = "queryRegistrationDisplayStatusInfo";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v5);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryRegistrationDisplayStatusInfo()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

id sub_100963580(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryRegistrationDisplayStatusInfo,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryRegistrationDisplayStatusInfo,context,%{private}@", &v11, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryRegistrationDisplayStatusInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = a2;
  v6 = *(void **)(a1 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100963770;
  v10[3] = &unk_10215FEF0;
  v10[4] = a2;
  v10[5] = a1;
  return objc_msgSend(v6, "copyRegistrationDisplayStatus:completion:", a2, v10);
}

void sub_100963770(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  void *v14;
  uint8_t buf[4];
  void *v16;

  if (!a2 || a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryRegistrationDisplayStatusInfo,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = 138412290;
      v14 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,queryRegistrationDisplayStatusInfo,%@", &v13, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryRegistrationDisplayStatusInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138477827;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,queryRegistrationDisplayStatusInfo,DisplayStatus,%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = 138477827;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryRegistrationDisplayStatusInfo,DisplayStatus,%{private}@", &v13, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryRegistrationDisplayStatusInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_10095EF78(v6, *(void **)(a1 + 32), a2);
  }

}

void sub_100963A90(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  int v5;
  const char *v6;
  uint8_t buf[4];
  const char *v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_100963CBC(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1));
    if (*(_BYTE *)(a1 + 120))
      sub_100963CBC(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v8 = "queryDataStatusInfo";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v5 = 136315138;
      v6 = "queryDataStatusInfo";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v5);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryDataStatusInfo()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

id sub_100963CBC(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryDataStatusInfo,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryDataStatusInfo,context,%{private}@", &v11, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDataStatusInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = a2;
  v6 = *(void **)(a1 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100963EAC;
  v10[3] = &unk_10215FF18;
  v10[4] = a2;
  v10[5] = a1;
  return objc_msgSend(v6, "getDataStatus:completion:", a2, v10);
}

void sub_100963EAC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  void *v14;
  uint8_t buf[4];
  void *v16;

  if (!a2 || a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryDataStatusInfo,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = 138412290;
      v14 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,queryDataStatusInfo,%@", &v13, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryDataStatusInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138477827;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,queryDataStatusInfo,DataStatus,%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = 138477827;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryDataStatusInfo,DataStatus,%{private}@", &v13, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDataStatusInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_10095F480(v6, *(void **)(a1 + 32), a2);
  }

}

void sub_1009641CC(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[6];
  int v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;

  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,queryCellInfo", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v13) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#ci,queryCellInfo", &v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCellInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v5 = a2;
    v6 = *(void **)(a1 + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100964500;
    v12[3] = &unk_10215FF40;
    v12[4] = a2;
    v12[5] = a1;
    objc_msgSend(v6, "copyCellInfo:completion:", a2, v12);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v16 = "queryCellInfo";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = 136315138;
      v14 = "queryCellInfo";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v13);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryCellInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_100964500(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,queryCellInfo response", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    LOWORD(v14) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#ci,queryCellInfo response", &v14, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCellInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v14 = 138412290;
      v15 = a3;
      LODWORD(v13) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,#ci,%@", &v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryCellInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    a2 = 0;
  }
  sub_100099AA8(v6, *(void **)(a1 + 32), a2);

}

void sub_10096480C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#ci,query cell info for ins 1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#ci,query cell info for ins 1", v9, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCellInfo()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_1009641CC(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1));
  if (*(_BYTE *)(a1 + 120))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ctcl,#ci,query cell info ins 2", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v9[0] = 0;
      LODWORD(v8) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#ci,query cell info ins 2", v9, v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCellInfo()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_1009641CC(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2));
  }
}

void sub_100964B10(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  const char *v16;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,querySimInfo", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v17) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#ci,querySimInfo", &v17, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v16 = 0;
    v5 = objc_msgSend(*(id *)(a1 + 16), "getPrivateNetworkSimInfoForContext:error:", a2, &v16);
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    if (v5)
    {
      objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(v5, "networkIdentifier"), CFSTR("kSimNidKey"));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(v5, "csgNetworkIdentifier"), CFSTR("kSimCsgIdKey"));
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v20 = v16;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,querySimInfo returned nil,%@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
        v17 = 138412290;
        v18 = v16;
        LODWORD(v15) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#ci,querySimInfo returned nil,%@", &v17, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
    sub_100964FD0(a1, a2, v6);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v20 = "querySimInfo";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v17 = 136315138;
      v18 = "querySimInfo";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v17);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::querySimInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_100964FD0(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  int v7;
  __CFString **v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  __CFString *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint8_t buf[4];
  _BYTE v26[18];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138478083;
    *(_QWORD *)v26 = a2;
    *(_WORD *)&v26[8] = 2113;
    *(_QWORD *)&v26[10] = objc_msgSend(a3, "description");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,onSimInfoChange context %{private}@, info %{private}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v13 = qword_1022A0078;
    v21 = 138478083;
    v22 = a2;
    v23 = 2113;
    v24 = objc_msgSend(a3, "description");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "#ctcl,#ci,onSimInfoChange context %{private}@, info %{private}@", &v21, 22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onSimInfoChange(CTXPCServiceSubscriptionContext *, NSDictionary *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v7 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
  if (!v7)
  {
    v8 = &off_102145CF8;
    if (a3)
      goto LABEL_9;
LABEL_11:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v26 = 0;
      *(_WORD *)&v26[4] = 2082;
      *(_QWORD *)&v26[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci, onSimInfoChange nil info dict!\"}", buf, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
    }
    v11 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v26 = 0;
      *(_WORD *)&v26[4] = 2082;
      *(_QWORD *)&v26[6] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ctcl,#cterror,#ci, onSimInfoChange nil info dict!", "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci, onSimInfoChange nil info dict!\"}", buf, 0x12u);
    }
    return;
  }
  if (v7 == 1)
  {
    v8 = &off_102145D00;
    if (a3)
    {
LABEL_9:
      v9 = *(void **)(a1 + 112);
      v19 = *v8;
      v20 = a3;
      objc_msgSend(v9, "sendNotificationToClients:notificationData:", CFSTR("kSimInfoChangedNotification"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
      return;
    }
    goto LABEL_11;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci, onSimInfoChange invalid slotdId", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    LOWORD(v21) = 0;
    LODWORD(v18) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,#ci, onSimInfoChange invalid slotdId", &v21, v18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSimInfoChange(CTXPCServiceSubscriptionContext *, NSDictionary *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_100965464(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#ci, query sim info for instance 1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#ci, query sim info for instance 1", v9, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimInfo()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100964B10(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1));
  if (*(_BYTE *)(a1 + 120))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ctcl,#ci, query sim info for instance 2", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v9[0] = 0;
      LODWORD(v8) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#ci, query sim info for instance 2", v9, v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimInfo()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_100964B10(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2));
  }
}

void sub_100965768(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[5];
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl queryEmergencyModeChanged", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl queryEmergencyModeChanged", &v10, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryEmergencyModeChanged()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    v3 = *(void **)(a1 + 16);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100965A90;
    v9[3] = &unk_10215FF60;
    v9[4] = a1;
    objc_msgSend(v3, "copyEmergencyMode:", v9);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v13 = "queryEmergencyModeChanged";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v10 = 136315138;
      v11 = "queryEmergencyModeChanged";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v10);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryEmergencyModeChanged()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100965A90(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (a4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = a4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#emg,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v11 = 138412290;
      v12 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,#emg,%@", &v11, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryEmergencyModeChanged()_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(v8 + 120) && objc_msgSend(a2, "slotID") == (id)2)
      sub_10190FD88();
    sub_10095E1F0(v8, (uint64_t)a2, a3);
  }
}

void sub_100965CA0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[5];
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#supl querySimStatusChanged", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#supl querySimStatusChanged", &v10, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimStatusChanged()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    v3 = *(void **)(a1 + 16);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100966B38;
    v9[3] = &unk_10215FFD0;
    v9[4] = a1;
    objc_msgSend(v3, "copyMobileEquipmentInfo:", v9);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v13 = "querySimStatusChanged";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v10 = 136315138;
      v11 = "querySimStatusChanged";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v10);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::querySimStatusChanged()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

id sub_100965FC8(uint64_t a1)
{
  id result;

  result = sub_10095FAD4(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1));
  if (*(_BYTE *)(a1 + 120))
    return sub_10095FAD4(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2));
  return result;
}

void sub_100966038(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  __CFString *v10;
  NSObject *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v6 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(v6 + 104), "silo");
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MCC failed", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MCC failed", v15, 2);
LABEL_29:
    v12 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v8);
    if (v12 != buf)
      free(v12);
LABEL_25:

    return;
  }
  if (!a2 || !-[__CFString length](a2, "length"))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MCC returned nil", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MCC returned nil", v15, 2);
    goto LABEL_29;
  }
  if ((unint64_t)-[__CFString length](a2, "length") >= 4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,querySubscriberMccAndMnc,MCC is invalid,replacing with -1", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,querySubscriberMccAndMnc,MCC is invalid,replacing with -1", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    a2 = CFSTR("-1");
  }
  v10 = a2;
  objc_msgSend(*(id *)(v6 + 16), "copyMobileSubscriberNetworkCode:completion:");
}

void sub_100966460(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  __CFString *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  const char *v22;
  char *v23;
  const char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[12];
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  _BYTE buf[12];
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;

  v6 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(v6 + 104), "silo");
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MNC failed,replacing with -1", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_26;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_WORD *)v29 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MNC failed,replacing with -1", v29, 2);
    goto LABEL_51;
  }
  if (!a2 || !-[__CFString length](a2, "length"))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MNC returned nil,replacing with -1", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_26;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_WORD *)v29 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MNC returned nil,replacing with -1", v29, 2);
    goto LABEL_51;
  }
  if ((unint64_t)-[__CFString length](a2, "length") < 4)
    goto LABEL_27;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,querySubscriberMccAndMnc,MNC is invalid,replacing with -1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_WORD *)v29 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,querySubscriberMccAndMnc,MNC is invalid,replacing with -1", v29, 2);
LABEL_51:
    v26 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v8);
    if (v26 != buf)
      free(v26);
  }
LABEL_26:
  a2 = CFSTR("-1");
LABEL_27:
  if ((sub_100099048(*(void **)(a1 + 32), *(void **)(a1 + 40), a2) & 1) != 0)
  {
    v11 = a2;
    sub_10009A960((uint64_t)buf, *(void **)(a1 + 40), a2);
    v28 = sub_100099E54((uint64_t)objc_msgSend(*(id *)(a1 + 32), "slotID"));
    *(_QWORD *)v29 = &v28;
    v12 = sub_1001E59F8(v6 + 288, &v28, (uint64_t)&unk_101B9EB60, (_DWORD **)v29);
    *(_QWORD *)((char *)v12 + 20) = *(_QWORD *)buf;
    *((_BYTE *)v12 + 28) = buf[8];
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
      v16 = -[__CFString UTF8String](a2, "UTF8String");
      *(_DWORD *)buf = 138478339;
      *(_QWORD *)&buf[4] = v14;
      v35 = 2082;
      v36 = v15;
      v37 = 2082;
      v38 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#ctcl,querySubscriberMccAndMnc,context,%{private}@,mcc,%{public}s,mnc,%{public}s", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v18 = qword_1022A0078;
      v19 = *(_QWORD *)(a1 + 32);
      v20 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
      v21 = -[__CFString UTF8String](a2, "UTF8String");
      *(_DWORD *)v29 = 138478339;
      *(_QWORD *)&v29[4] = v19;
      v30 = 2082;
      v31 = v20;
      v32 = 2082;
      v33 = v21;
      LODWORD(v27) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "#ctcl,querySubscriberMccAndMnc,context,%{private}@,mcc,%{public}s,mnc,%{public}s", v29, v27);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    objc_msgSend(*(id *)(v6 + 112), "sendNotificationToClients:notificationData:", CFSTR("kSubscriberMccAndMncNotification"), sub_10009AB40(v6 + 288));

  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,MCC and MNC invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      *(_WORD *)v29 = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,MCC and MNC invalid", v29, v27);
      v25 = (char *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }

}

void sub_100966B38(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138477827;
      v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#supl,#IMEI,%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v7 = 138477827;
      v8 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,#supl,#IMEI,%{private}@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::querySimStatusChanged()_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    sub_100966D18(*(_QWORD *)(a1 + 32), a2);
  }
}

uint64_t sub_100966D18(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  uint64_t *v11;
  void **v12;
  void **v13;
  void **v14;
  int v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  const char *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  int v32;
  _BYTE v33[128];
  _BYTE v34[12];
  __int128 buf;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 138477827;
    *(_QWORD *)((char *)&buf + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,onSetIDReturn info %{private}@", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_DWORD *)v34 = 138477827;
    *(_QWORD *)&v34[4] = a2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#ci,onSetIDReturn info %{private}@", v34, 12);
    v22 = (char *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onSetIDReturn(CTMobileEquipmentInfoList *)", "%s\n", v21);
    if (v22 != (char *)&buf)
      free(v22);
  }
  if (a2)
  {
    v25 = a1;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v5 = objc_msgSend(a2, "meInfoList");
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v28;
LABEL_9:
      v8 = 0;
      while (1)
      {
        if (*(_QWORD *)v28 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v8);
        if (!v9)
          break;
        v26 = 0;
        v10 = sub_100099E54((uint64_t)objc_msgSend(v9, "slotId"));
        v26 = v10;
        if (v10 != 255)
        {
          sub_1005A4E90((uint64_t)&buf, v10, objc_msgSend(v9, "IMSI"), objc_msgSend(v9, "IMEI"));
          *(_QWORD *)v34 = &v26;
          v11 = sub_100970464((uint64_t)v31, (int *)&v26, (uint64_t)&unk_101B9EB60, (_DWORD **)v34);
          v12 = (void **)(v11 + 3);
          if (*((char *)v11 + 47) < 0)
            operator delete(*v12);
          v11[5] = v36;
          *(_OWORD *)v12 = buf;
          HIBYTE(v36) = 0;
          LOBYTE(buf) = 0;
          v13 = (void **)(v11 + 6);
          if (*((char *)v11 + 71) < 0)
            operator delete(*v13);
          v11[8] = v38;
          *(_OWORD *)v13 = v37;
          HIBYTE(v38) = 0;
          LOBYTE(v37) = 0;
          v14 = (void **)(v11 + 9);
          if (*((char *)v11 + 95) < 0)
          {
            operator delete(*v14);
            v15 = SHIBYTE(v38);
            *(_OWORD *)v14 = v39;
            v11[11] = v40;
            HIBYTE(v40) = 0;
            LOBYTE(v39) = 0;
            if (v15 < 0)
              operator delete((void *)v37);
          }
          else
          {
            *(_OWORD *)v14 = v39;
            v11[11] = v40;
            HIBYTE(v40) = 0;
            LOBYTE(v39) = 0;
          }
          if (SHIBYTE(v36) < 0)
            operator delete((void *)buf);
        }
        if (v6 == (id)++v8)
        {
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
          if (v6)
            goto LABEL_9;
          goto LABEL_26;
        }
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "#ctcl,#supl,invalid setID", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
        *(_WORD *)v34 = 0;
        LODWORD(v24) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ctcl,#supl,invalid setID", v34, v24);
        v18 = (char *)v17;
        sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSetIDReturn(CTMobileEquipmentInfoList *)", "%s\n", v17);
        goto LABEL_48;
      }
    }
    else
    {
LABEL_26:
      objc_msgSend(*(id *)(v25 + 112), "sendNotificationToClients:notificationData:", CFSTR("kSimStatusChangeNotification"), sub_1012614F0((uint64_t)v31));
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,CTMobileEquipmentInfoList is invalid", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      *(_WORD *)v34 = 0;
      LODWORD(v24) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,#ci,CTMobileEquipmentInfoList is invalid", v34, v24);
      v18 = (char *)v23;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSetIDReturn(CTMobileEquipmentInfoList *)", "%s\n", v23);
LABEL_48:
      if (v18 != (char *)&buf)
        free(v18);
    }
  }
  return sub_10097039C((uint64_t)v31);
}

void sub_10096732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_10097039C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100967374(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  int v5;
  const char *v6;
  uint8_t buf[4];
  const char *v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_100967568(a1, 1);
    sub_100967568(a1, 2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v8 = "queryBundleInfo";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v5 = 136315138;
      v6 = "queryBundleInfo";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v5);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryBundleInfo()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_100967568(uint64_t a1, uint64_t a2)
{
  sub_1009675F0(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1), a2);
  if (*(_BYTE *)(a1 + 120))
    sub_1009675F0(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2), a2);
}

void sub_1009675F0(uint64_t a1, void *a2, uint64_t a3)
{
  int v6;
  int v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  NSArray *v19;
  id v20;
  uint64_t v21;
  void *i;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const char *v32;
  uint8_t *v33;
  unsigned int *v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int *v39[2];
  unsigned int *v40[2];
  unsigned int *v41;
  unsigned int *v42;
  int v43;
  _BYTE v44[128];
  _DWORD v45[2];
  __int16 v46;
  void *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  void *v51;

  v6 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
  v7 = sub_100599AB0(a3);
  v43 = sub_1001E24AC(v6, v7);
  sub_100970718(&v43, &v41);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109379;
    v49 = v7;
    v50 = 2113;
    v51 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleInfo,bundletype,%d,context,%{private}@", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v45[0] = 67109379;
    v45[1] = v7;
    v46 = 2113;
    v47 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#cb,queryBundleInfo,bundletype,%d,context,%{private}@", v45, 18);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleInfo(CTXPCServiceSubscriptionContext *, CTBundleType)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  v9 = (std::__shared_weak_count *)v42;
  v40[0] = v41;
  v40[1] = v42;
  if (v42)
  {
    v10 = (unint64_t *)(v42 + 2);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_100967A6C(a1, (uint64_t)a2, v40);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = (std::__shared_weak_count *)v42;
  v39[0] = v41;
  v39[1] = v42;
  if (v42)
  {
    v15 = (unint64_t *)(v42 + 2);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_100967B8C(a1, (uint64_t)a2, v39);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v19 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("Location"), CFSTR("SUPL"), CFSTR("LocationSecondaryOverlay"), 0);
  v20 = -[NSArray countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
  if (v20)
  {
    v21 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v20; i = (char *)i + 1)
      {
        if (*(_QWORD *)v36 != v21)
          objc_enumerationMutation(v19);
        v23 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
        v24 = (std::__shared_weak_count *)v42;
        v34[0] = v41;
        v34[1] = v42;
        if (v42)
        {
          v25 = (unint64_t *)(v42 + 2);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        sub_100967CAC(a1, a2, v23, v34);
        if (v24)
        {
          v27 = (unint64_t *)&v24->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      v20 = -[NSArray countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
    }
    while (v20);
  }
  v29 = (std::__shared_weak_count *)v42;
  if (v42)
  {
    v30 = (unint64_t *)(v42 + 2);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_100967A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_100261F44((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_100967A6C(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  id v6;
  int v7;
  id v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[7];
  std::__shared_weak_count *v18;

  v6 = objc_alloc((Class)CTBundle);
  v7 = sub_100599B00(**a3);
  v8 = objc_msgSend(v6, "initWithBundleType:", sub_100599AC8(v7));
  v9 = *(void **)(a1 + 16);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3321888768;
  v17[2] = sub_100967DEC;
  v17[3] = &unk_10215FFF8;
  v11 = (uint64_t)*a3;
  v10 = a3[1];
  v17[5] = a1;
  v17[6] = v11;
  v18 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 2);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v17[4] = a2;
  objc_msgSend(v9, "copyBundleIdentifier:bundleType:completion:", a2, v8, v17);
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_100967B78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100967B8C(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  id v6;
  int v7;
  id v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[7];
  std::__shared_weak_count *v18;

  v6 = objc_alloc((Class)CTBundle);
  v7 = sub_100599B00(**a3);
  v8 = objc_msgSend(v6, "initWithBundleType:", sub_100599AC8(v7));
  v9 = *(void **)(a1 + 16);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3321888768;
  v17[2] = sub_100968898;
  v17[3] = &unk_10215FFF8;
  v11 = (uint64_t)*a3;
  v10 = a3[1];
  v17[5] = a1;
  v17[6] = v11;
  v18 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 2);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v17[4] = a2;
  objc_msgSend(v9, "copyBundleVersion:bundleType:completion:", a2, v8, v17);
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_100967C98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100967CAC(uint64_t a1, void *a2, uint64_t a3, unsigned int **a4)
{
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v21[9];
  std::__shared_weak_count *v22;

  v8 = objc_alloc((Class)CTBundle);
  v9 = sub_100599B00(**a4);
  v10 = objc_msgSend(v8, "initWithBundleType:", sub_100599AC8(v9));
  v11 = a2;
  v12 = v10;
  v13 = *(void **)(a1 + 16);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3321888768;
  v21[2] = sub_100968EF8;
  v21[3] = &unk_102160030;
  v15 = (uint64_t)*a4;
  v14 = a4[1];
  v21[7] = a1;
  v21[8] = v15;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 2);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v21[4] = a2;
  v21[5] = a3;
  v21[6] = v10;
  objc_msgSend(v13, "copyCarrierBundleValueWithDefault:key:bundleType:completion:", a2, a3, v10, v21);
  v18 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_100967DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100967DEC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  int v16;
  unsigned int v17;
  NSObject *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string __str;
  int v40;
  int v41;
  __int16 v42;
  unsigned int v43;
  __int16 v44;
  void *v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  void *v51;

  v6 = *(_QWORD *)(a1 + 40);
  sub_1015A2E04(&__str, (char *)objc_msgSend(CFSTR("kBundleIDUnavailable"), "UTF8String"));
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v8 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v9 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      *(_DWORD *)buf = 67109635;
      v47 = v8;
      v48 = 1025;
      v49 = v9;
      v50 = 2112;
      v51 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,#cb,queryBundleIdRsp,bundletype,%d,ins,%{private}d,error,%@", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v10 = qword_1022A0078;
      v11 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v12 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      v40 = 67109635;
      v41 = v11;
      v42 = 1025;
      v43 = v12;
      v44 = 2112;
      v45 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#Warning,#ctcl,#cterror,#cb,queryBundleIdRsp,bundletype,%d,ins,%{private}d,error,%@", &v40, 24);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleId(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v13);
LABEL_10:
      if (v14 != buf)
        free(v14);
    }
  }
  else if (a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v16 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v17 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      *(_DWORD *)buf = 67109635;
      v47 = v16;
      v48 = 1025;
      v49 = v17;
      v50 = 2113;
      v51 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleIdRsp,bundletype,%d,ins,%{private}d,bundleID,%{private}@", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v28 = qword_1022A0078;
      v29 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v30 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      v40 = 67109635;
      v41 = v29;
      v42 = 1025;
      v43 = v30;
      v44 = 2113;
      v45 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 0, "#ctcl,#cb,queryBundleIdRsp,bundletype,%d,ins,%{private}d,bundleID,%{private}@", &v40, 24);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleId(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    std::string::assign(&__str, (const std::string::value_type *)objc_msgSend(a2, "UTF8String"));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v19 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v20 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      *(_DWORD *)buf = 67109377;
      v47 = v19;
      v48 = 1025;
      v49 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleIdRsp,bundletype,%d,ins,%{private}d,bundleID,nil", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v33 = qword_1022A0078;
      v34 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v35 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      v40 = 67109377;
      v41 = v34;
      v42 = 1025;
      v43 = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "#ctcl,#cb,queryBundleIdRsp,bundletype,%d,ins,%{private}d,bundleID,nil", &v40, 14);
      v14 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleId(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v36);
      goto LABEL_10;
    }
  }
  v21 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(v21 + 32) = 1;
  std::string::operator=((std::string *)(v21 + 8), &__str);
  v22 = *(std::__shared_weak_count **)(a1 + 56);
  v37 = *(_QWORD *)(a1 + 48);
  v38 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  sub_10096844C(v6, &v37);
  v25 = v38;
  if (v38)
  {
    v26 = (unint64_t *)&v38->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1009683F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10096844C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[8];
  __int16 v28;
  int v29;

  v3 = *a2;
  if (*(_BYTE *)(v3 + 32) && *(_BYTE *)(v3 + 64) && *(_BYTE *)(v3 + 88) && *(_BYTE *)(v3 + 112) && *(_BYTE *)(v3 + 136))
  {
    v5 = a1 + 488;
    *(_QWORD *)buf = v3;
    v6 = sub_10096E97C(a1 + 488, (int *)v3, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_100349198(v6 + 3, a2);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = sub_100599B00(*(unsigned int *)*a2);
      v9 = sub_100599AE0(*(_DWORD *)*a2);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v8;
      v28 = 1026;
      v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,#cb,sendBundleChangedNotifToClients,in response to queries for,bundletype,%{public}d,sim,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v18 = qword_1022A0078;
      v19 = sub_100599B00(*(unsigned int *)*a2);
      v20 = sub_100599AE0(*(_DWORD *)*a2);
      v23 = 67240448;
      v24 = v19;
      v25 = 1026;
      v26 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "#ctcl,#cb,sendBundleChangedNotifToClients,in response to queries for,bundletype,%{public}d,sim,%{public}d", &v23, 14);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendBundleChangedNotifToClients(std::shared_ptr<BundleInfo>)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kBundleChangeNotification"), sub_10125FF80(v5));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v11 = sub_100599B00(*(unsigned int *)*a2);
      v12 = sub_100599AE0(*(_DWORD *)*a2);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v11;
      v28 = 1026;
      v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ctcl,#cb,sendBundleChangedNotifToClients,still waiting for some queries to return for,bundletype,%{public}d,sim,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = qword_1022A0078;
      v14 = sub_100599B00(*(unsigned int *)*a2);
      v15 = sub_100599AE0(*(_DWORD *)*a2);
      v23 = 67240448;
      v24 = v14;
      v25 = 1026;
      v26 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "#ctcl,#cb,sendBundleChangedNotifToClients,still waiting for some queries to return for,bundletype,%{public}d,sim,%{public}d", &v23, 14);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendBundleChangedNotifToClients(std::shared_ptr<BundleInfo>)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

uint64_t sub_10096886C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100968890(uint64_t a1)
{
  return sub_100261F44(a1 + 48);
}

void sub_100968898(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  int v16;
  unsigned int v17;
  NSObject *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string __str;
  int v40;
  int v41;
  __int16 v42;
  unsigned int v43;
  __int16 v44;
  void *v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  void *v51;

  v6 = *(_QWORD *)(a1 + 40);
  sub_1015A2E04(&__str, (char *)objc_msgSend(CFSTR("kBundleVersionUnavailable"), "UTF8String"));
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v8 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v9 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      *(_DWORD *)buf = 67109635;
      v47 = v8;
      v48 = 1025;
      v49 = v9;
      v50 = 2112;
      v51 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,#cb,queryBundleVersionRsp,bundletype,%d,ins,%{private}d,error,%@", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v10 = qword_1022A0078;
      v11 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v12 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      v40 = 67109635;
      v41 = v11;
      v42 = 1025;
      v43 = v12;
      v44 = 2112;
      v45 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#Warning,#ctcl,#cterror,#cb,queryBundleVersionRsp,bundletype,%d,ins,%{private}d,error,%@", &v40, 24);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleVersion(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v13);
LABEL_10:
      if (v14 != buf)
        free(v14);
    }
  }
  else if (a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v16 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v17 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      *(_DWORD *)buf = 67109635;
      v47 = v16;
      v48 = 1025;
      v49 = v17;
      v50 = 2113;
      v51 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleVersionRsp,bundletype,%d,ins,%{private}d,bundleVersion,%{private}@", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v28 = qword_1022A0078;
      v29 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v30 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      v40 = 67109635;
      v41 = v29;
      v42 = 1025;
      v43 = v30;
      v44 = 2113;
      v45 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 0, "#ctcl,#cb,queryBundleVersionRsp,bundletype,%d,ins,%{private}d,bundleVersion,%{private}@", &v40, 24);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleVersion(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    std::string::assign(&__str, (const std::string::value_type *)objc_msgSend(a2, "UTF8String"));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v19 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v20 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      *(_DWORD *)buf = 67109377;
      v47 = v19;
      v48 = 1025;
      v49 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleVersionRsp,bundletype,%d,ins,%{private}d,bundleVersion,nil", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v33 = qword_1022A0078;
      v34 = sub_100599B00(**(unsigned int **)(a1 + 48));
      v35 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      v40 = 67109377;
      v41 = v34;
      v42 = 1025;
      v43 = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "#ctcl,#cb,queryBundleVersionRsp,bundletype,%d,ins,%{private}d,bundleVersion,nil", &v40, 14);
      v14 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleVersion(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v36);
      goto LABEL_10;
    }
  }
  v21 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(v21 + 64) = 1;
  std::string::operator=((std::string *)(v21 + 40), &__str);
  v22 = *(std::__shared_weak_count **)(a1 + 56);
  v37 = *(_QWORD *)(a1 + 48);
  v38 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  sub_10096844C(v6, &v37);
  v25 = v38;
  if (v38)
  {
    v26 = (unint64_t *)&v38->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_100968EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100968EF8(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  id v28;
  const char *v29;
  uint8_t *v30;
  id v31;
  NSObject *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  id v65;
  uint8_t v66[128];
  uint8_t buf[4];
  int v68;
  __int16 v69;
  unsigned int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  id v76;

  v48 = *(_QWORD *)(a1 + 56);
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = sub_100599B00(**(unsigned int **)(a1 + 64));
      v6 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 67109891;
      v68 = v5;
      v69 = 1025;
      v70 = v6;
      v71 = 2113;
      v72 = v7;
      v73 = 2112;
      v74 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,#cb,queryBundleInfoRsp,bundletype,%d,ins,%{private}d,dict,%{private}@,error,%@", buf, 0x22u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v42 = qword_1022A0078;
    v43 = sub_100599B00(**(unsigned int **)(a1 + 64));
    v44 = objc_msgSend(*(id *)(a1 + 32), "slotID");
    v45 = *(_QWORD *)(a1 + 40);
    v56 = 67109891;
    v57 = v43;
    v58 = 1025;
    v59 = v44;
    v60 = 2113;
    v61 = v45;
    v62 = 2112;
    v63 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "#Warning,#ctcl,#cterror,#cb,queryBundleInfoRsp,bundletype,%d,ins,%{private}d,dict,%{private}@,error,%@", &v56, 34);
    v41 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleInfo(CTXPCServiceSubscriptionContext *, NSString *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v46);
LABEL_47:
    if (v41 != buf)
      free(v41);
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v8 = a2;
  if (!a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v32 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v33 = sub_100599B00(**(unsigned int **)(a1 + 64));
      v34 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      v35 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 67109635;
      v68 = v33;
      v69 = 1025;
      v70 = v34;
      v71 = 2113;
      v72 = v35;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleInfoRsp,bundletype,%d,ins,%{private}d,dict,%{private}@,null", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v36 = qword_1022A0078;
    v37 = sub_100599B00(**(unsigned int **)(a1 + 64));
    v38 = objc_msgSend(*(id *)(a1 + 32), "slotID");
    v39 = *(_QWORD *)(a1 + 40);
    v56 = 67109635;
    v57 = v37;
    v58 = 1025;
    v59 = v38;
    v60 = 2113;
    v61 = v39;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 0, "#ctcl,#cb,queryBundleInfoRsp,bundletype,%d,ins,%{private}d,dict,%{private}@,null", &v56, 24);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleInfo(CTXPCServiceSubscriptionContext *, NSString *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v40);
    goto LABEL_47;
  }
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v15 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v52, v66, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v53;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v53 != v16)
          objc_enumerationMutation(v8);
        v18 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)v17);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
        v19 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v20 = sub_100599B00(**(unsigned int **)(a1 + 64));
          v21 = objc_msgSend(*(id *)(a1 + 32), "slotID");
          v22 = *(_QWORD *)(a1 + 40);
          v23 = objc_msgSend(v8, "objectForKey:", v18);
          *(_DWORD *)buf = 67241218;
          v68 = v20;
          v69 = 1026;
          v70 = v21;
          v71 = 2114;
          v72 = v22;
          v73 = 2114;
          v74 = v18;
          v75 = 2114;
          v76 = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleInfoRsp,bundletype,%{public}d,ins,%{public}d,dict,%{public}@,Key,%{public}@,Value,%{public}@", buf, 0x2Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021601C0);
          v24 = qword_1022A0078;
          v25 = sub_100599B00(**(unsigned int **)(a1 + 64));
          v26 = objc_msgSend(*(id *)(a1 + 32), "slotID");
          v27 = *(_QWORD *)(a1 + 40);
          v28 = objc_msgSend(v8, "objectForKey:", v18);
          v56 = 67241218;
          v57 = v25;
          v58 = 1026;
          v59 = v26;
          v60 = 2114;
          v61 = v27;
          v62 = 2114;
          v63 = v18;
          v64 = 2114;
          v65 = v28;
          LODWORD(v47) = 44;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "#ctcl,#cb,queryBundleInfoRsp,bundletype,%{public}d,ins,%{public}d,dict,%{public}@,Key,%{public}@,Value,%{public}@", &v56, v47);
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleInfo(CTXPCServiceSubscriptionContext *, NSString *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      v31 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v52, v66, 16);
      v15 = v31;
    }
    while (v31);
  }
LABEL_8:
  sub_10059A548(*(int **)(a1 + 64), *(CFTypeRef *)(a1 + 40), (const __CFDictionary *)v8);
  v9 = *(std::__shared_weak_count **)(a1 + 72);
  v50 = *(_QWORD *)(a1 + 64);
  v51 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_10096844C(v48, &v50);
  v12 = v51;
  if (v51)
  {
    v13 = (unint64_t *)&v51->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

}

void sub_100969650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10096966C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100969690(uint64_t a1)
{
  return sub_100261F44(a1 + 64);
}

id sub_100969698(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  CFPropertyListRef v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  _BYTE v22[24];
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138478083;
      v24 = v7;
      v25 = 2112;
      v26 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,#cb,queryDefaultBundle,dict,%{private}@,error,%@", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v17 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v22 = 138478083;
    *(_QWORD *)&v22[4] = v17;
    *(_WORD *)&v22[12] = 2112;
    *(_QWORD *)&v22[14] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,#cb,queryDefaultBundle,dict,%{private}@,error,%@", v22, 22, *(_OWORD *)v22, *(_QWORD *)&v22[16]);
LABEL_26:
    v18 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDefaultBundle()_block_invoke", "%s\n", v16);
    if (v18 != buf)
      free(v18);
LABEL_7:
    v8 = 0;
    goto LABEL_14;
  }
  if (!a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138477827;
      v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryDefaultBundle,dict,%{private}@,null", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v22 = 138477827;
    *(_QWORD *)&v22[4] = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#cb,queryDefaultBundle,dict,%{private}@,null", v22, 12, *(_OWORD *)v22, *(_QWORD *)&v22[16]);
    goto LABEL_26;
  }
  v8 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, a2, 2uLL);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138477827;
    v24 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryDefaultBundle,retrieved %{private}@ dict", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v19 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v22 = 138477827;
    *(_QWORD *)&v22[4] = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,#cb,queryDefaultBundle,retrieved %{private}@ dict", v22, 12);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDefaultBundle()_block_invoke", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
LABEL_14:
  v11 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v11, "setValue:forKey:", v8, CFSTR("LocationByCountry"));
  return objc_msgSend(*(id *)(v4 + 112), "sendNotificationToClients:notificationData:", CFSTR("kDefaultBundleChangeNotification"), v11);
}

void sub_100969B20(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;

  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021601E0);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl,#vlqm, queryVoiceLinkQuality", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021601E0);
      LOWORD(v8) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ctcl,#vlqm, queryVoiceLinkQuality", &v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryVoiceLinkQuality()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    sub_100969E60(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1));
    if (*(_BYTE *)(a1 + 120))
      sub_100969E60(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v11 = "queryVoiceLinkQuality";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v8 = 136315138;
      v9 = "queryVoiceLinkQuality";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryVoiceLinkQuality()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

id sub_100969E60(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021601E0);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#vlqm,queryVoiceLinkQualityForContext:%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021601E0);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ctcl,#vlqm,queryVoiceLinkQualityForContext:%{private}@", &v11, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryVoiceLinkQualityForContext(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = a2;
  v6 = *(void **)(a1 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10096A050;
  v10[3] = &unk_102160090;
  v10[4] = a2;
  v10[5] = a1;
  return objc_msgSend(v6, "getVoiceLinkQualityMetric:completion:", a2, v10);
}

void sub_10096A050(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int128 v9;
  uint8_t buf[4];
  uint64_t v11;

  if (a3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021601E0);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#vlqm,queryVoiceLinkQualityForContext,#cb,%@", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021601E0);
    LODWORD(v9) = 138412290;
    *(_QWORD *)((char *)&v9 + 4) = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,#vlqm,queryVoiceLinkQualityForContext,#cb,%@", &v9, 12, v9);
LABEL_21:
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryVoiceLinkQualityForContext(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
LABEL_7:

    return;
  }
  if (!a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021601E0);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#vlqm,queryVoiceLinkQualityForContext,#cb,nil", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021601E0);
    LOWORD(v9) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#vlqm,queryVoiceLinkQualityForContext,#cb,nil", &v9, 2, v9);
    goto LABEL_21;
  }
  sub_100960184(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), a2);

}

id sub_10096A320(uint64_t a1)
{
  id result;

  result = sub_10009A2E8(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1));
  if (*(_BYTE *)(a1 + 120))
    return sub_10009A2E8(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2));
  return result;
}

void sub_10096A390(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  int v5;
  const char *v6;
  uint8_t buf[4];
  const char *v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_10096A5BC(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1));
    if (*(_BYTE *)(a1 + 120))
      sub_10096A5BC(a1, objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v8 = "queryInHomeCountryInfo";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v5 = 136315138;
      v6 = "queryInHomeCountryInfo";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v5);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryInHomeCountryInfo()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

id sub_10096A5BC(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryInHomeCountryInfo,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryInHomeCountryInfo,context,%{private}@", &v11, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryInHomeCountryInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = a2;
  v6 = *(void **)(a1 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10096A7AC;
  v10[3] = &unk_1021600B8;
  v10[4] = a2;
  v10[5] = a1;
  return objc_msgSend(v6, "copyIsInHomeCountry:completion:", a2, v10);
}

void sub_10096A7AC(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryInHomeCountryInfo,isInHomeCountry,error,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = 138412290;
      v14 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,queryInHomeCountryInfo,isInHomeCountry,error,%@", &v13, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryInHomeCountryInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v16) = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ctcl,queryInHomeCountryInfo,isInHomeCountry,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v13 = 67109120;
      LODWORD(v14) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryInHomeCountryInfo,isInHomeCountry,%d", &v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryInHomeCountryInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_10096AAC4(v9, *(void **)(a1 + 32), a2);
  }

}

void sub_10096AAC4(uint64_t a1, void *a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  double v8;
  _BYTE *v9;
  _BYTE *v10;
  NSObject *v11;
  double v12;
  _BYTE *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  int v20;
  _BYTE buf[12];
  __int16 v22;
  int v23;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138478083;
    *(_QWORD *)&buf[4] = a2;
    v22 = 1024;
    v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,sendInHomeCountryNotifToClients,context,%{private}@,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v17 = 138478083;
    v18 = a2;
    v19 = 1024;
    v20 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,sendInHomeCountryNotifToClients,context,%{private}@,%d", &v17, 18);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendInHomeCountryNotifToClients(CTXPCServiceSubscriptionContext *, BOOL)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if ((sub_10125F874(a2) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 120) || objc_msgSend(a2, "slotID") != (id)2)
    {
      v17 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
      *(_QWORD *)buf = &v17;
      *((_BYTE *)sub_10096ED18(a1 + 168, &v17, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20) = a3;
      objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kInHomeCountryNotification"), sub_10125FFD0(a1 + 168));
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,sendInHomeCountryNotifToClients,InvalidInstance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v17) = 0;
      LODWORD(v16) = 2;
      v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,sendInHomeCountryNotifToClients,InvalidInstance", &v17, v16);
      v10 = v9;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::sendInHomeCountryNotifToClients(CTXPCServiceSubscriptionContext *, BOOL)", "%s\n", v8);
LABEL_25:
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning,#ctcl,#cterror,isValidParamsInHomeCountryStatus failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v17) = 0;
      LODWORD(v16) = 2;
      v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,#ctcl,#cterror,isValidParamsInHomeCountryStatus failed", &v17, v16);
      v10 = v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendInHomeCountryNotifToClients(CTXPCServiceSubscriptionContext *, BOOL)", "%s\n", v12);
      goto LABEL_25;
    }
  }
}

id sub_10096AF50(uint64_t a1)
{
  id result;

  result = sub_100961B08(a1, (uint64_t)objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1));
  if (*(_BYTE *)(a1 + 120))
    return sub_100961B08(a1, (uint64_t)objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2));
  return result;
}

void sub_10096AFC0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v6;
  std::string *v7;
  const std::string::value_type *v8;
  NSObject *v10;
  unsigned int v11;
  const std::string::value_type *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  char *v22;
  _BYTE v23[18];
  _BYTE buf[1638];

  v4 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#sub,#cterror,queryPhoneNumberInfoContext,%@", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_DWORD *)v23 = 138412290;
    *(_QWORD *)&v23[4] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#sub,#cterror,queryPhoneNumberInfoContext,%@", v23, 12, *(_OWORD *)v23);
LABEL_27:
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryPhoneNumberInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v17);
    if (v18 != buf)
      free(v18);
LABEL_7:
    *(_DWORD *)v23 = sub_100099E54((uint64_t)objc_msgSend(*(id *)(a1 + 32), "slotID"));
    *(_QWORD *)buf = v23;
    v7 = (std::string *)(sub_1009707B4(v4 + 128, (int *)v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 3);
    v8 = "";
    goto LABEL_15;
  }
  if (!a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v14 = objc_msgSend(*(id *)(a1 + 32), "slotID");
      *(_DWORD *)buf = 67174657;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#sub,queryPhoneNumberInfoContext,ins,%{private}d,PhoneNumberInfo,nil", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15 = qword_1022A0078;
    v16 = objc_msgSend(*(id *)(a1 + 32), "slotID");
    *(_DWORD *)v23 = 67174657;
    *(_DWORD *)&v23[4] = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#Warning,#ctcl,#sub,queryPhoneNumberInfoContext,ins,%{private}d,PhoneNumberInfo,nil", v23, 8, *(_OWORD *)v23);
    goto LABEL_27;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v11 = objc_msgSend(*(id *)(a1 + 32), "slotID");
    *(_DWORD *)buf = 67174915;
    *(_DWORD *)&buf[4] = v11;
    *(_WORD *)&buf[8] = 2113;
    *(_QWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ctcl,#sub,queryPhoneNumberInfoContext,ins,%{private}d,PhoneNumberInfo,%{private}@", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v19 = qword_1022A0078;
    v20 = objc_msgSend(*(id *)(a1 + 32), "slotID");
    *(_DWORD *)v23 = 67174915;
    *(_DWORD *)&v23[4] = v20;
    *(_WORD *)&v23[8] = 2113;
    *(_QWORD *)&v23[10] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "#ctcl,#sub,queryPhoneNumberInfoContext,ins,%{private}d,PhoneNumberInfo,%{private}@", v23, 18);
    v22 = (char *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryPhoneNumberInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v12 = (const std::string::value_type *)objc_msgSend(objc_msgSend(a2, "number"), "UTF8String");
  *(_DWORD *)v23 = sub_100099E54((uint64_t)objc_msgSend(*(id *)(a1 + 32), "slotID"));
  *(_QWORD *)buf = v23;
  v7 = (std::string *)(sub_1009707B4(v4 + 128, (int *)v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 3);
  v8 = v12;
LABEL_15:
  std::string::assign(v7, v8);
  sub_10096B4A4(v4);
}

void sub_10096B4A4(uint64_t a1)
{
  _QWORD *v2;
  const std::string *v3;
  const std::string *v4;
  NSObject *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  const char *v10;
  char *v11;
  std::string v12;
  std::string v13;
  int v14;
  std::string *v15;
  __int16 v16;
  std::string *v17;
  _BYTE buf[12];
  __int16 v19;
  std::string *v20;

  memset(&v13, 0, sizeof(v13));
  v2 = (_QWORD *)(a1 + 128);
  *(_DWORD *)buf = 0;
  if (sub_1001F8DEC((_QWORD *)(a1 + 128), (int *)buf))
  {
    LODWORD(v12.__r_.__value_.__l.__data_) = 0;
    *(_QWORD *)buf = &v12;
    v3 = (const std::string *)sub_1009707B4((uint64_t)v2, (int *)&v12, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    std::string::operator=(&v13, v3 + 1);
  }
  memset(&v12, 0, sizeof(v12));
  *(_DWORD *)buf = 1;
  if (sub_1001F8DEC(v2, (int *)buf))
  {
    v14 = 1;
    *(_QWORD *)buf = &v14;
    v4 = (const std::string *)sub_1009707B4((uint64_t)v2, &v14, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    std::string::operator=(&v12, v4 + 1);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
    v7 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v6;
    v19 = 2081;
    v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ctcl,sendPhoneNumberNotification,phoneNumberOne,%{private}s,phoneNumberTwo,%{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
    v9 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
    v14 = 136380931;
    v15 = v8;
    v16 = 2081;
    v17 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,sendPhoneNumberNotification,phoneNumberOne,%{private}s,phoneNumberTwo,%{private}s", &v14, 22);
    v11 = (char *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendPhoneNumberNotification()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kPhoneNumberStatusNotification"), sub_101262928(v2));
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_10096B7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_10096B7E8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,queryTandemCapability", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    LOWORD(v11) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,queryTandemCapability", &v11, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryTandemCapability()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v10 = 0;
  v3 = objc_msgSend(*(id *)(a1 + 16), "getDualSimCapability:", &v10);
  if (v10)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryTandemCapability,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v11 = 138412290;
      v12 = v10;
      LODWORD(v9) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,queryTandemCapability,%@", &v11, v9);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryTandemCapability()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    sub_10096BAE4(a1, (unint64_t)v3);
  }
}

void sub_10096BAE4(uint64_t a1, unint64_t a2)
{
  NSObject *v4;
  CFDictionaryRef v5;
  const __CFDictionary *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  uint8_t buf[4];
  unint64_t v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,sendTandemCapabilityNotifToClients,tandemCapability,%ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v12 = 134217984;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,sendTandemCapabilityNotifToClients,tandemCapability,%ld", &v12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendTandemCapabilityNotifToClients(CTDualSimCapability)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (sub_101263030(a2))
  {
    v5 = sub_101262DA0(a2);
    v6 = v5;
    objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kTandemCapabilityNotification"), v5);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning,#ctcl,#cterror,isTandemCapabilityInfoValid failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,#ctcl,#cterror,isTandemCapabilityInfoValid failed", &v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendTandemCapabilityNotifToClients(CTDualSimCapability)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

unsigned __int8 *sub_10096BDF8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  unsigned __int8 *result;
  unsigned __int8 *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2;
    if (*(char *)(a2 + 23) < 0)
      v5 = *(_QWORD *)a2;
    *(_DWORD *)buf = 136315138;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl onRegisterForNotification,notification,%s,", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8 = a2;
    if (*(char *)(a2 + 23) < 0)
      v8 = *(_QWORD *)a2;
    v11 = 136315138;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl onRegisterForNotification,notification,%s,", (const char *)&v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onRegisterForNotification(std::string)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  result = sub_1001987C8((_QWORD *)(a1 + 24), (unsigned __int8 *)a2);
  if (result)
  {
    v7 = result;
    sub_100311C38(a1 + 64, (unsigned __int8 *)a2, a2);
    result = (unsigned __int8 *)*((_QWORD *)v7 + 8);
    if (result)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

uint64_t *sub_10096BFFC(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *result;
  uint64_t *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t *v12;
  uint8_t buf[4];
  uint64_t *v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = (uint64_t *)a2;
    if ((char)a2[23] < 0)
      v5 = *(uint64_t **)a2;
    *(_DWORD *)buf = 136315138;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl onUnRegisterForNotification,notification,%s,", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8 = (uint64_t *)a2;
    if ((char)a2[23] < 0)
      v8 = *(uint64_t **)a2;
    v11 = 136315138;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl onUnRegisterForNotification,notification,%s,", (const char *)&v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onUnRegisterForNotification(std::string)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v6 = (_QWORD *)(a1 + 64);
  result = (uint64_t *)sub_1001986C8(v6, a2);
  if (result)
    return sub_10019C594(v6, a2);
  return result;
}

void sub_10096C1E8(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _QWORD v6[6];
  _WORD v7[8];
  uint8_t buf[1640];

  if (a2)
  {
    v2 = *(void **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10096C3B4;
    v6[3] = &unk_102160130;
    v6[4] = a2;
    v6[5] = a1;
    objc_msgSend(v2, "getCurrentDataSubscriptionContext:", v6);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#ctcl,null reply block, can't fetch APNs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,null reply block, can't fetch APNs", v7, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApn(CLUmtsApnBlockHandler)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_10096C3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[6];
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412546;
    v17 = a2;
    v18 = 2112;
    v19 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,getCurrentDataSubscriptionContext:context:%@,err:%@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v12 = 138412546;
    v13 = a2;
    v14 = 2112;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,getCurrentDataSubscriptionContext:context:%@,err:%@", &v12, 22);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApn(CLUmtsApnBlockHandler)_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (a2)
  {
    if (!a3)
    {
      v8 = *(void **)(v6 + 16);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10096C5D4;
      v11[3] = &unk_102160108;
      v11[4] = *(_QWORD *)(a1 + 32);
      v11[5] = v6;
      objc_msgSend(v8, "getConfiguredApns:completion:", a2, v11);
    }
  }
}

void sub_10096C5D4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  char v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,getConfiguredApns error:%@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v14 = 138412290;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,getConfiguredApns error:%@", &v14, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApn(CLUmtsApnBlockHandler)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (a2 && !a3 && objc_msgSend(a2, "count"))
  {
    objc_msgSend(*(id *)(v6 + 104), "silo");
    v8 = *(_QWORD *)(a1 + 32);
    sub_1012631E8(a2, &v12);
    v9 = sub_10096C808((uint64_t)&v12);
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
    if (v13 < 0)
      operator delete(*((void **)&v12 + 1));
  }
}

void sub_10096C7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10096C808(uint64_t a1)
{
  id v1;
  _QWORD v3[5];
  __int128 __p;
  uint64_t v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_100970A04;
  v3[3] = &unk_102160AD0;
  v3[4] = *(_QWORD *)a1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 24);
  }
  v1 = objc_msgSend(v3, "copy");
  if (SHIBYTE(v5) < 0)
    operator delete((void *)__p);
  return v1;
}

void sub_10096C8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10096C8D0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  uint8_t *v15;
  _QWORD v16[6];
  int v17;
  id v18;
  uint8_t buf[4];
  id v20;

  if (a2 && (a2 != 1 || (sub_1001DC538() & 1) == 0))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ctcl,invalid sim instance, can't fetch APNs", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,invalid sim instance, can't fetch APNs", &v17, 2);
LABEL_36:
    v15 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApnForInstance(CLTelephonyService_Type::SimInstance, CLUmtsApnBlockHandler)", "%s\n", v11);
    if (v15 != buf)
      free(v15);
    return;
  }
  if (a3)
  {
    if (a2)
      v6 = 2;
    else
      v6 = 1;
    v7 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", v6);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#ctcl,getCurrentDataSubscriptionContext:context:%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v17 = 138412290;
      v18 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,getCurrentDataSubscriptionContext:context:%@", &v17, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApnForInstance(CLTelephonyService_Type::SimInstance, CLUmtsApnBlockHandler)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    if (v7)
    {
      v9 = *(void **)(a1 + 16);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10096CD14;
      v16[3] = &unk_102160108;
      v16[4] = a3;
      v16[5] = a1;
      objc_msgSend(v9, "getConfiguredApns:completion:", v7, v16);
    }
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#ctcl,null reply block, can't fetch APNs", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,null reply block, can't fetch APNs", &v17, 2);
    goto LABEL_36;
  }
}

void sub_10096CD14(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint8_t *v11;
  __int128 v12;
  char v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,getConfiguredApns error:%@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v14 = 138412290;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,getConfiguredApns error:%@", &v14, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApnForInstance(CLTelephonyService_Type::SimInstance, CLUmtsApnBlockHandler)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (a2 && !a3 && objc_msgSend(a2, "count"))
  {
    objc_msgSend(*(id *)(v6 + 104), "silo");
    v8 = *(_QWORD *)(a1 + 32);
    sub_1012631E8(a2, &v12);
    v9 = sub_10096C808((uint64_t)&v12);
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
    if (v13 < 0)
      operator delete(*((void **)&v12 + 1));
  }
}

void sub_10096CF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_UNKNOWN **sub_10096CF48(uint64_t a1, void *a2, int a3)
{
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  _UNKNOWN **v10;
  _UNKNOWN **v11;
  NSObject *v12;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  __int16 v33;
  uint64_t v34;

  if (!a3 || a3 == 1 && (sub_1001DC538() & 1) != 0)
  {
    if (a3)
      v6 = 2;
    else
      v6 = 1;
    v7 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", v6);
    v22 = 0;
    if (objc_msgSend(a2, "isEqualToString:", CFSTR("RegistrationStatus")))
    {
      v8 = objc_msgSend(*(id *)(a1 + 16), "copyRegistrationStatus:error:", v7, &v22);
    }
    else if (objc_msgSend(a2, "isEqualToString:", CFSTR("RAT")))
    {
      v8 = objc_msgSend(*(id *)(a1 + 16), "copyRadioAccessTechnology:error:", v7, &v22);
    }
    else
    {
      if ((objc_msgSend(a2, "isEqualToString:", CFSTR("SignalStrength")) & 1) != 0)
      {
        v10 = &off_10221B8E8;
LABEL_19:
        if (v22)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021601C0);
          v12 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412802;
            v30 = a2;
            v31 = 2112;
            v32 = v7;
            v33 = 2112;
            v34 = v22;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,fetching %@:context:%@,err:%@", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021601C0);
            v23 = 138412802;
            v24 = a2;
            v25 = 2112;
            v26 = v7;
            v27 = 2112;
            v28 = v22;
            LODWORD(v21) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,fetching %@:context:%@,err:%@", &v23, v21);
            v18 = (uint8_t *)v17;
            sub_100512490("Generic", 1, 0, 0, "id CLCoreTelephonyClient::_getValueForSpecifiedOptionAndSim(NSString *, SimInstance)", "%s\n", v17);
            if (v18 != buf)
              free(v18);
          }
        }
        return v10;
      }
      if (objc_msgSend(a2, "isEqualToString:", CFSTR("ServingOperator")))
      {
        v11 = (_UNKNOWN **)objc_msgSend(*(id *)(a1 + 16), "getOperatorName:error:", v7, &v22);
        goto LABEL_18;
      }
      if (!objc_msgSend(a2, "isEqualToString:", CFSTR("ServingProvider")))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v30 = a2;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,Unknown option: %@, for fetching values from InUseSubscriptions", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021601C0);
          v23 = 138412290;
          v24 = a2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,Unknown option: %@, for fetching values from InUseSubscriptions", &v23, 12);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 0, "id CLCoreTelephonyClient::_getValueForSpecifiedOptionAndSim(NSString *, SimInstance)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
        v10 = 0;
        goto LABEL_19;
      }
      v8 = objc_msgSend(*(id *)(a1 + 16), "copyCarrierBundleValue:key:bundleType:error:", v7, CFSTR("CarrierName"), objc_msgSend(objc_alloc((Class)CTBundle), "initWithBundleType:", 1), &v22);
    }
    v11 = (_UNKNOWN **)v8;
LABEL_18:
    v10 = v11;
    goto LABEL_19;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v30 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,fetching %@:, invalid SIM instance", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v23 = 138412290;
    v24 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,fetching %@:, invalid SIM instance", &v23, 12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "id CLCoreTelephonyClient::_getValueForSpecifiedOptionAndSim(NSString *, SimInstance)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return 0;
}

_UNKNOWN **sub_10096D504(uint64_t a1, int a2)
{
  return sub_10096CF48(a1, CFSTR("RegistrationStatus"), a2);
}

_UNKNOWN **sub_10096D514(uint64_t a1, int a2)
{
  return sub_10096CF48(a1, CFSTR("RAT"), a2);
}

id sub_10096D524(uint64_t a1, int a2)
{
  return objc_msgSend(sub_10096CF48(a1, CFSTR("SignalStrength"), a2), "intValue");
}

_UNKNOWN **sub_10096D544(uint64_t a1, int a2)
{
  return sub_10096CF48(a1, CFSTR("ServingOperator"), a2);
}

_UNKNOWN **sub_10096D554(uint64_t a1, int a2)
{
  return sub_10096CF48(a1, CFSTR("ServingProvider"), a2);
}

id sub_10096D564(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v6;
  id v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  __int128 v15;
  uint8_t buf[4];
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138477827;
        v17 = a3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryStewieSupport,error,%{private}@", buf, 0xCu);
      }
      v7 = 0;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
        LODWORD(v15) = 138477827;
        *(_QWORD *)((char *)&v15 + 4) = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,queryStewieSupport,error,%{private}@", &v15, 12, v15);
LABEL_11:
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryStewieSupport()_block_invoke", "%s\n", v8);
        if (v9 != buf)
          free(v9);
        goto LABEL_33;
      }
      return objc_msgSend(*(id *)(v4 + 112), "sendNotificationToClients:notificationData:", CFSTR("kStewieSupportNotification"), sub_10126413C((uint64_t)v7));
    }
LABEL_33:
    v7 = 0;
    return objc_msgSend(*(id *)(v4 + 112), "sendNotificationToClients:notificationData:", CFSTR("kStewieSupportNotification"), sub_10126413C((uint64_t)v7));
  }
  if (a2)
  {
    v7 = objc_msgSend(a2, "hwSupport");
    if (*(_BYTE *)(a1 + 40))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v17) = (_DWORD)v7;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ctcl,queryStewieSupport,supported,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021601C0);
        LODWORD(v15) = 67240192;
        DWORD1(v15) = (_DWORD)v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ctcl,queryStewieSupport,supported,%{public}d", &v15, 8);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryStewieSupport()_block_invoke", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    return objc_msgSend(*(id *)(v4 + 112), "sendNotificationToClients:notificationData:", CFSTR("kStewieSupportNotification"), sub_10126413C((uint64_t)v7));
  }
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_33;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryStewieSupport,stewieSupport is nil", buf, 2u);
  }
  v7 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,queryStewieSupport,stewieSupport is nil", &v15, 2, v15);
    goto LABEL_11;
  }
  return objc_msgSend(*(id *)(v4 + 112), "sendNotificationToClients:notificationData:", CFSTR("kStewieSupportNotification"), sub_10126413C((uint64_t)v7));
}

id sub_10096D988(uint64_t a1)
{
  NSObject *v2;
  id result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl,queryImsRegStatus", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryImsRegStatus", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryImsRegStatus()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1);
  result = objc_msgSend(*(id *)(a1 + 16), "copyRegistrationIMSTransportInfo:completion:");
  if (*(_BYTE *)(a1 + 120))
  {
    objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2);
    return objc_msgSend(*(id *)(a1 + 16), "copyRegistrationIMSTransportInfo:completion:");
  }
  return result;
}

void sub_10096DBBC(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryImsRegStatus,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v7 = 138412290;
      v8 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,queryImsRegStatus,%@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryImsRegStatus()_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    sub_100962090(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), a2);
  }
}

void sub_10096DD9C(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryImsRegStatus,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v7 = 138412290;
      v8 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,queryImsRegStatus,%@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryImsRegStatus()_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    sub_100962090(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), a2);
  }
}

id sub_10096DF7C(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,sendImsRegChangeNotificationToClients,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,sendImsRegChangeNotificationToClients,context,%{private}@", &v11, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendImsRegChangeNotificationToClients(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = a2;
  v6 = *(void **)(a1 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10096E16C;
  v10[3] = &unk_1021601A0;
  v10[4] = a2;
  v10[5] = a1;
  return objc_msgSend(v6, "getIMSRegistrationStatus:completion:", a2, v10);
}

void sub_10096E16C(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  const char *v6;
  char *v7;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  _BYTE v17[10];
  _BYTE buf[1638];

  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,sendImsRegChangeNotificationToClients,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v16 = 138412290;
      *(_QWORD *)v17 = a3;
      LODWORD(v15) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,sendImsRegChangeNotificationToClients,%@", &v16, v15);
      v7 = (char *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::sendImsRegChangeNotificationToClients(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67174913;
      *(_DWORD *)&buf[4] = objc_msgSend(a2, "isRegisteredForVoice");
      *(_WORD *)&buf[8] = 1025;
      *(_DWORD *)&buf[10] = objc_msgSend(a2, "isRegisteredForSMS");
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ctcl,sendImsRegChangeNotificationToClients,isRegisteredForVoice %{private}d isRegisteredForSMS %{private}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v12 = qword_1022A0078;
      v16 = 67174913;
      *(_DWORD *)v17 = objc_msgSend(a2, "isRegisteredForVoice");
      *(_WORD *)&v17[4] = 1025;
      *(_DWORD *)&v17[6] = objc_msgSend(a2, "isRegisteredForSMS");
      LODWORD(v15) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "#ctcl,sendImsRegChangeNotificationToClients,isRegisteredForVoice %{private}d isRegisteredForSMS %{private}d", &v16, v15);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendImsRegChangeNotificationToClients(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_1005A7304((uint64_t)&v15 + 4, a2);
    v16 = sub_100099E54((uint64_t)objc_msgSend(*(id *)(a1 + 32), "slotID"));
    *(_QWORD *)buf = &v16;
    v11 = sub_100970A84(v9 + 408, &v16, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    *((_WORD *)v11 + 10) = WORD2(v15);
    objc_msgSend(*(id *)(v9 + 112), "sendNotificationToClients:notificationData:", CFSTR("kImsRegStatusNotification"), sub_1012646F8(v9 + 408));
  }

}

void sub_10096E924(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10096E950(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t *sub_10096E97C(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10096EBD8((uint64_t)v24, 0);
  return i;
}

void sub_10096EBC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10096EBD8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_10096EBD8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100261F44((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *sub_10096EC1C@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA8uLL);
  result = sub_10096EC74(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10096EC60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10096EC74(_QWORD *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102160210;
  sub_1005A93C8((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_10096ECB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10096ECC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102160210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10096ECD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102160210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10096ED0C(uint64_t a1)
{
  return sub_1005A94C0(a1 + 24);
}

_QWORD *sub_10096ED18(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_BYTE *)v11 + 20) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_10096EF24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10096EF38(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_10096F1D0(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_1004E69F0((uint64_t)v26, 0);
  return i;
}

void sub_10096F1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_10096F1D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[8] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10096F254(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_10096F270()
{
  operator delete();
}

_QWORD *sub_10096F284(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102160260;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F2B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102160260;
  a2[1] = v2;
  return result;
}

void sub_10096F2D4(uint64_t a1)
{
  sub_100965768(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F2DC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F318()
{
}

void sub_10096F328()
{
  operator delete();
}

_QWORD *sub_10096F33C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021602E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F370(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021602E0;
  a2[1] = v2;
  return result;
}

void sub_10096F38C(uint64_t a1)
{
  sub_100965CA0(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F394(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F3D0()
{
}

void sub_10096F3E0()
{
  operator delete();
}

_QWORD *sub_10096F3F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102160360;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F428(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102160360;
  a2[1] = v2;
  return result;
}

void sub_10096F444(uint64_t a1)
{
  sub_100967374(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F44C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F488()
{
}

void sub_10096F498()
{
  operator delete();
}

_QWORD *sub_10096F4AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021603E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F4E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021603E0;
  a2[1] = v2;
  return result;
}

id sub_10096F4FC(uint64_t a1)
{
  return sub_10095ED3C(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F504(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F540()
{
}

void sub_10096F550()
{
  operator delete();
}

_QWORD *sub_10096F564(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102160460;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F598(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102160460;
  a2[1] = v2;
  return result;
}

void sub_10096F5B4(uint64_t a1)
{
  sub_10096A390(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F5BC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F5F8()
{
}

void sub_10096F608()
{
  operator delete();
}

_QWORD *sub_10096F61C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021604E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F650(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021604E0;
  a2[1] = v2;
  return result;
}

void sub_10096F66C(uint64_t a1)
{
  sub_100963354(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F674(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F6B0()
{
}

void sub_10096F6C0()
{
  operator delete();
}

_QWORD *sub_10096F6D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102160560;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F708(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102160560;
  a2[1] = v2;
  return result;
}

void sub_10096F724(uint64_t a1)
{
  sub_10096480C(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F72C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F768()
{
}

void sub_10096F778()
{
  operator delete();
}

_QWORD *sub_10096F78C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021605E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F7C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021605E0;
  a2[1] = v2;
  return result;
}

void sub_10096F7DC(uint64_t a1)
{
  sub_100963A90(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F7E4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F820()
{
}

void sub_10096F830()
{
  operator delete();
}

_QWORD *sub_10096F844(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102160660;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F878(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102160660;
  a2[1] = v2;
  return result;
}

id sub_10096F894(uint64_t a1)
{
  return sub_100962760(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F89C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F8D8()
{
}

void sub_10096F8E8()
{
  operator delete();
}

_QWORD *sub_10096F8FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021606E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F930(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021606E0;
  a2[1] = v2;
  return result;
}

id sub_10096F94C(uint64_t a1)
{
  return sub_100965FC8(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096F954(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096F990()
{
}

void sub_10096F9A0()
{
  operator delete();
}

_QWORD *sub_10096F9B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102160760;
  result[1] = v3;
  return result;
}

uint64_t sub_10096F9E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102160760;
  a2[1] = v2;
  return result;
}

id sub_10096FA04(uint64_t a1)
{
  return sub_10096A320(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096FA0C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096FA48()
{
}

void sub_10096FA58()
{
  operator delete();
}

_QWORD *sub_10096FA6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021607E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10096FAA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021607E0;
  a2[1] = v2;
  return result;
}

id sub_10096FABC(uint64_t a1)
{
  return sub_10096AF50(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096FAC4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096FB00()
{
}

void sub_10096FB10()
{
  operator delete();
}

_QWORD *sub_10096FB24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102160860;
  result[1] = v3;
  return result;
}

uint64_t sub_10096FB58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102160860;
  a2[1] = v2;
  return result;
}

void sub_10096FB74(uint64_t a1)
{
  sub_100965464(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096FB7C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096FBB8()
{
}

void sub_10096FBC8()
{
  operator delete();
}

_QWORD *sub_10096FBDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021608E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10096FC10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021608E0;
  a2[1] = v2;
  return result;
}

void sub_10096FC2C(uint64_t a1)
{
  sub_100969B20(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096FC34(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096FC70()
{
}

void sub_10096FC80()
{
  operator delete();
}

_QWORD *sub_10096FC94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102160960;
  result[1] = v3;
  return result;
}

uint64_t sub_10096FCC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102160960;
  a2[1] = v2;
  return result;
}

void sub_10096FCE4(uint64_t a1)
{
  sub_10096B7E8(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096FCEC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096FD28()
{
}

void sub_10096FD38()
{
  operator delete();
}

_QWORD *sub_10096FD4C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021609E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10096FD80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021609E0;
  a2[1] = v2;
  return result;
}

id sub_10096FD9C(uint64_t a1)
{
  return sub_100961E9C(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096FDA4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096FDE0()
{
}

void sub_10096FDF0()
{
  operator delete();
}

_QWORD *sub_10096FE04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102160A60;
  result[1] = v3;
  return result;
}

uint64_t sub_10096FE38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102160A60;
  a2[1] = v2;
  return result;
}

id sub_10096FE54(uint64_t a1)
{
  return sub_10096D988(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10096FE5C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10096FE98()
{
}

_QWORD *sub_10096FEA4(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_WORD *)v11 + 10) = 0;
  *((_BYTE *)v11 + 22) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1009700B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1009700C8(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 <= v6)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      for (result = *v9; result; result = (uint64_t *)*result)
      {
        v11 = result[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v6)
            return result;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4)
            break;
        }
      }
    }
  }
  sub_1009702FC(a1, *a2, a4, (uint64_t)v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10012E444(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v20[0] = *v18;
    *v18 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20[0];
    }
  }
  result = (uint64_t *)v20[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_1009702D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_10055A1C0((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1009702FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = **a3;
  result = sub_1015A2E04(v8 + 3, "");
  *((_WORD *)v8 + 24) = 0;
  *((_BYTE *)v8 + 50) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100970380(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_10055A1C0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10097039C(uint64_t a1)
{
  void *v2;

  sub_1009703D4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1009703D4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100970410((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100970410(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t *sub_100970464(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x60uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((_QWORD *)v14 + 11) = 0;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1009706D4((uint64_t)v24, 0);
  return i;
}

void sub_1009706BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1009706D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1009706D4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100970410((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_100970718@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA8uLL);
  result = sub_10096EC74(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10097075C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100970770(char **a1, char *a2)
{
  char *v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      sub_1001DC534(v2 + 24);
    operator delete(v2);
  }
}

_QWORD *sub_1009707B4(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1009709E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_10055A1C0(v11, v10);
  _Unwind_Resume(a1);
}

char *sub_100970A04@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *((_QWORD *)result + 4);
  v2 = a2 + 1;
  if (result[63] < 0)
    return (char *)sub_100115CE4(v2, *((void **)result + 5), *((_QWORD *)result + 6));
  *(_OWORD *)v2 = *(_OWORD *)(result + 40);
  v2[2] = *((_QWORD *)result + 7);
  return result;
}

_QWORD *sub_100970A38(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_100970A70(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

_QWORD *sub_100970A84(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_WORD *)v11 + 10) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_100970C90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100970CA4(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100970E38((uint64_t)a1, "MobilityWalkingBoutHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102160B10;
  a1[9] = off_102160BF0;
  a1[43] = off_102160C40;
  sub_100E81598(a1 + 44, 0, 0);
  sub_100E81598(a1 + 46, 0, 0);
  sub_100E81598(a1 + 48, 0, 0);
  sub_100E81598(a1 + 50, 0, 0);
  sub_100E81598(a1 + 52, 0, 0);
  sub_100E81598(a1 + 54, 0, 0);
  sub_100E81598(a1 + 56, 0, 0);
  sub_100E81598(a1 + 58, 0, 0);
  sub_100E81598(a1 + 60, 0, 0);
  sub_100E81598(a1 + 62, 0, 0);
  sub_100E81598(a1 + 64, 0, 0);
  sub_100E81598(a1 + 66, 0, 0);
  sub_100E81598(a1 + 68, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100970E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100970E38(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_102160EA8;
  *(_QWORD *)(a1 + 72) = off_102160F50;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102160EA8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 72) = off_102160F50;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 264) = 12000;
  *(_QWORD *)(a1 + 272) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 280));
  *(_QWORD *)(a1 + 280) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_1009711F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[34] = off_10213DEB0;
  sub_100427950(v27);
  sub_100427A00(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100971294()
{
  JUMPOUT(0x100971274);
}

_QWORD *sub_10097129C(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102160F50;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102160EA8;
  a1[34] = off_10213DEB0;
  sub_100427950(a1 + 35);
  sub_100427A00(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_10097131C(uint64_t a1)
{
  return sub_10097129C((_QWORD *)(a1 - 72));
}

_QWORD *sub_100971324(uint64_t a1)
{
  return sub_10097129C((_QWORD *)(a1 - 344));
}

void sub_10097132C(_QWORD *a1)
{
  sub_10097129C(a1);
  operator delete();
}

void sub_100971350(uint64_t a1)
{
  sub_10097129C((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_100971378(uint64_t a1)
{
  sub_10097129C((_QWORD *)(a1 - 344));
  operator delete();
}

uint64_t sub_1009713A0(uint64_t *a1, uint64_t a2)
{
  double Current;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) != 1.79769313e308 || !sub_10008950C(a1 + 9))
    return -1;
  sub_10001E638(a1[10]);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100087AF4(a1 + 50, &v13);
  v5 = (sqlite3_stmt *)sub_100026CC8(v13);
  if (sub_1000890C4(v5, 1, Current - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
  {
    v6 = a1[10];
    v7 = (sqlite3_stmt *)sub_100026CC8(v13);
    sub_10023C9B0(v6, v7);
    v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    v8 = -1;
  }
  sub_10001E99C(a1[10]);
  v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = *(_QWORD *)(v9 + 88);
  sub_100053048(v9, v10);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return v8;
}

void sub_1009714A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009714CC(uint64_t a1, uint64_t a2)
{
  return sub_1009713A0((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_1009714D4(uint64_t a1, char **a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[40];
  uint64_t v22;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100087AF4((_QWORD *)(a1 + 416), &v22);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    *(_DWORD *)v21 = 0;
    memset(&v21[8], 0, 32);
    while (!sub_1009716C0(&v22, (uint64_t)v21))
    {
      v5 = (unint64_t)a2[1];
      v6 = (unint64_t)a2[2];
      if (v5 >= v6)
      {
        v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)*a2) >> 3);
        v10 = v9 + 1;
        if (v9 + 1 > 0x666666666666666)
          sub_100259694();
        v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)*a2) >> 3);
        if (2 * v11 > v10)
          v10 = 2 * v11;
        if (v11 >= 0x333333333333333)
          v12 = 0x666666666666666;
        else
          v12 = v10;
        if (v12)
          v13 = (char *)sub_100357184((uint64_t)(a2 + 2), v12);
        else
          v13 = 0;
        v14 = &v13[40 * v9];
        v15 = *(_OWORD *)&v21[16];
        *(_OWORD *)v14 = *(_OWORD *)v21;
        *((_OWORD *)v14 + 1) = v15;
        *((_QWORD *)v14 + 4) = *(_QWORD *)&v21[32];
        v17 = *a2;
        v16 = a2[1];
        v18 = v14;
        if (v16 != *a2)
        {
          do
          {
            v19 = *(_OWORD *)(v16 - 40);
            v20 = *(_OWORD *)(v16 - 24);
            *((_QWORD *)v18 - 1) = *((_QWORD *)v16 - 1);
            *(_OWORD *)(v18 - 24) = v20;
            *(_OWORD *)(v18 - 40) = v19;
            v18 -= 40;
            v16 -= 40;
          }
          while (v16 != v17);
          v16 = *a2;
        }
        v8 = v14 + 40;
        *a2 = v18;
        a2[1] = v14 + 40;
        a2[2] = &v13[40 * v12];
        if (v16)
          operator delete(v16);
      }
      else
      {
        v7 = *(_OWORD *)&v21[16];
        *(_OWORD *)v5 = *(_OWORD *)v21;
        *(_OWORD *)(v5 + 16) = v7;
        *(_QWORD *)(v5 + 32) = *(_QWORD *)&v21[32];
        v8 = (char *)(v5 + 40);
      }
      a2[1] = v8;
    }
    sub_10001E99C(*(_QWORD *)(a1 + 80));
    result = v22;
    v22 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100971694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009716C0(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  int v13;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 28) = sqlite3_column_int(v10, 4);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 32) = sqlite3_column_int(v11, 5);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v13 = sqlite3_column_int(v12, 6);
  result = 0;
  *(_DWORD *)(a2 + 36) = v13;
  return result;
}

uint64_t sub_1009717A0(uint64_t a1)
{
  uint64_t v1;
  sqlite3_stmt *v3;
  int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v8;

  if (!sub_10008950C(a1 + 72))
    return 0xFFFFFFFFLL;
  sub_100087AF4((_QWORD *)(a1 + 432), &v8);
  v3 = (sqlite3_stmt *)sub_100026CC8(v8);
  v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    v1 = sqlite3_column_int(v5, 0);
  }
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v4 != 100)
    return 0xFFFFFFFFLL;
  return v1;
}

void sub_100971830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100971858(uint64_t a1)
{
  return sub_1009717A0(a1 - 72);
}

uint64_t sub_100971860(uint64_t a1, int a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  NSObject *v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 352), &v11);
    v5 = (sqlite3_stmt *)sub_100026CC8(v11);
    if (sub_1000CD75C(v5, 1, a2))
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102160CF8);
      v6 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        v14 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Deleting boundary from db: id=%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102160CF8);
        v12[0] = 67240192;
        v12[1] = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "Deleting boundary from db: id=%{public}d", v12, 8);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLMobility::BoutBoundaryRecorderDb::deleteBoundary(int)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      v7 = *(_QWORD *)(a1 + 80);
      v8 = (sqlite3_stmt *)sub_100026CC8(v11);
      sub_10023C9B0(v7, v8);
    }
    result = v11;
    v11 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100971A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100971A9C(uint64_t a1, int a2)
{
  return sub_100971860(a1 - 344, a2);
}

uint64_t sub_100971AA4(uint64_t a1, char **a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v31;
  char *v32;
  uint64_t v33[3];
  __int16 v34;
  _OWORD buf[102];

  v9 = a1 + 112;
  v8 = *(_QWORD *)(a1 + 112);
  v10 = a1 + 72;
  v33[1] = a1 + 112;
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 112);
  v34 = 256;
  if ((sub_10008950C(v10) & 1) != 0)
  {
    a2[1] = *a2;
    sub_100087AF4((_QWORD *)(a1 + 448), v33);
    LODWORD(buf[0]) = 0;
    memset((char *)buf + 8, 0, 32);
    if (a4 >= a3)
    {
      v11 = (sqlite3_stmt *)sub_100026CC8(v33[0]);
      if (sub_1000890C4(v11, 1, a3))
      {
        v12 = (sqlite3_stmt *)sub_100026CC8(v33[0]);
        if (sub_1000890C4(v12, 2, a4))
        {
          while (!sub_1009716C0(v33, (uint64_t)buf))
          {
            v13 = (unint64_t)a2[1];
            v14 = (unint64_t)a2[2];
            if (v13 >= v14)
            {
              v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (_QWORD)*a2) >> 3);
              v17 = v16 + 1;
              if (v16 + 1 > 0x666666666666666)
                sub_100259694();
              v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (_QWORD)*a2) >> 3);
              if (2 * v18 > v17)
                v17 = 2 * v18;
              if (v18 >= 0x333333333333333)
                v19 = 0x666666666666666;
              else
                v19 = v17;
              if (v19)
                v20 = (char *)sub_100357184((uint64_t)(a2 + 2), v19);
              else
                v20 = 0;
              v21 = &v20[40 * v16];
              *(_OWORD *)v21 = buf[0];
              *((_OWORD *)v21 + 1) = buf[1];
              *((_QWORD *)v21 + 4) = *(_QWORD *)&buf[2];
              v23 = *a2;
              v22 = a2[1];
              v24 = v21;
              if (v22 != *a2)
              {
                do
                {
                  v25 = *(_OWORD *)(v22 - 40);
                  v26 = *(_OWORD *)(v22 - 24);
                  *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
                  *(_OWORD *)(v24 - 24) = v26;
                  *(_OWORD *)(v24 - 40) = v25;
                  v24 -= 40;
                  v22 -= 40;
                }
                while (v22 != v23);
                v22 = *a2;
              }
              v15 = v21 + 40;
              *a2 = v24;
              a2[1] = v21 + 40;
              a2[2] = &v20[40 * v19];
              if (v22)
                operator delete(v22);
            }
            else
            {
              *(_OWORD *)v13 = buf[0];
              *(_OWORD *)(v13 + 16) = buf[1];
              *(_QWORD *)(v13 + 32) = *(_QWORD *)&buf[2];
              v15 = (char *)(v13 + 40);
            }
            a2[1] = v15;
          }
        }
      }
    }
    v29 = v33[0];
    v33[0] = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v28 = 100;
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102160CF8);
    v27 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "MobilityWalkingBoutHistory not accessible", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102160CF8);
      LOWORD(v33[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "MobilityWalkingBoutHistory not accessible", v33, 2);
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "virtual CMError CLMobility::BoutBoundaryRecorderDb::queryBoundariesInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<BoutBoundary> &)", "%s\n", v31);
      if (v32 != (char *)buf)
        free(v32);
    }
    v28 = 109;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  return v28;
}

void sub_100971E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100971EA4(uint64_t a1, char **a2, double a3, double a4)
{
  return sub_100971AA4(a1 - 344, a2, a3, a4);
}

void sub_100971EAC(_QWORD *a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _BYTE v19[18];
  uint8_t buf[4];
  _BYTE v21[18];

  sub_10041B300(a1, a2, 0);
  v15 = 0;
  v16 = 0u;
  v17 = 0u;
  v4 = 0;
  if (sub_10051DBC4(a1, (uint64_t)&v15))
  {
    if (*(double *)&v16 == *(double *)(a2 + 8))
    {
      v4 = v15;
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102160CF8);
      v5 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)v21 = v4;
        *(_WORD *)&v21[4] = 2050;
        *(_QWORD *)&v21[6] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Wrote boundary to db: id=%{public}d, startTime=%{public}.2f", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102160CF8);
        v7 = *(_QWORD *)(a2 + 8);
        v18 = 67240448;
        *(_DWORD *)v19 = v4;
        *(_WORD *)&v19[4] = 2050;
        *(_QWORD *)&v19[6] = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "Wrote boundary to db: id=%{public}d, startTime=%{public}.2f", &v18, 18);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLMobility::BoutBoundaryRecorderDb::addBoundary(BoutBoundary &)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102160CF8);
      v10 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)v21 = v11;
        *(_WORD *)&v21[8] = 2050;
        *(_QWORD *)&v21[10] = v16;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Inserted boundary (startTime=%{public}f) is not the latest boundary (startTime=%{public}f)", buf, 0x16u);
      }
      v4 = 0;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102160CF8);
        v12 = *(_QWORD *)(a2 + 8);
        v18 = 134349312;
        *(_QWORD *)v19 = v12;
        *(_WORD *)&v19[8] = 2050;
        *(_QWORD *)&v19[10] = v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "Inserted boundary (startTime=%{public}f) is not the latest boundary (startTime=%{public}f)", &v18, 22);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMobility::BoutBoundaryRecorderDb::addBoundary(BoutBoundary &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
        v4 = 0;
      }
    }
  }
  *(_DWORD *)a2 = v4;
}

void sub_100972230(uint64_t a1, uint64_t a2)
{
  sub_100971EAC((_QWORD *)(a1 - 344), a2);
}

uint64_t sub_100972238(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v18;
  _WORD v19[8];
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  uint8_t buf[1640];

  v7 = a1 + 112;
  v6 = *(_QWORD *)(a1 + 112);
  v8 = a1 + 72;
  v23 = a1 + 112;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
  v24 = 256;
  if ((sub_10008950C(v8) & 1) == 0)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102160CF8);
    v10 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "MobilityWalkingBoutHistory not accessible", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_27;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102160CF8);
    LOWORD(v20) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "MobilityWalkingBoutHistory not accessible", &v20, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMobility::BoutBoundaryRecorderDb::getTimeRangeOfAllBoundaries(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v11);
    goto LABEL_34;
  }
  v20 = 0;
  v21 = 0u;
  v22 = 0u;
  v9 = sub_1009726E8(a1, (uint64_t)&v20);
  if (v9)
  {
    if (v9 == 1)
    {
      *a3 = 0;
      *a2 = 0;
LABEL_29:
      v16 = 1;
      goto LABEL_30;
    }
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102160CF8);
    v15 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "MobilityWalkingBoutHistory Encountered an error getting earliest record", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_27;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102160CF8);
    v19[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "MobilityWalkingBoutHistory Encountered an error getting earliest record", v19, 2);
    v12 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMobility::BoutBoundaryRecorderDb::getTimeRangeOfAllBoundaries(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v18);
LABEL_34:
    if (v12 != buf)
      free(v12);
    goto LABEL_27;
  }
  *a2 = v21;
  if (!sub_100972780(a1, (uint64_t)&v20))
  {
    *a3 = *((_QWORD *)&v21 + 1);
    goto LABEL_29;
  }
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_102160CF8);
  v13 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "MobilityWalkingBoutHistory Encountered an error getting latest record", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102160CF8);
    v19[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "MobilityWalkingBoutHistory Encountered an error getting latest record", v19, 2);
    v12 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMobility::BoutBoundaryRecorderDb::getTimeRangeOfAllBoundaries(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v14);
    goto LABEL_34;
  }
LABEL_27:
  v16 = 0;
LABEL_30:
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  return v16;
}

void sub_1009726B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009726E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 496), &v7);
  v4 = sub_1009716C0(&v7, a2);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_10097275C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100972780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 480), &v7);
  v4 = sub_1009716C0(&v7, a2);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_1009727F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100972818(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return sub_100972238(a1 - 344, a2, a3);
}

BOOL sub_100972824(uint64_t a1, uint64_t a2)
{
  return sub_10051DBC4((_QWORD *)(a1 - 344), a2);
}

uint64_t sub_10097282C(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100972990((uint64_t)a1);
    sub_100634364(a1[10], "MobilityWalkingBoutHistory", (const char **)&off_102160D18, (const std::string::value_type **)&off_1022A5D30, 0);
    a1[44] = sub_10063D314(a1[10], "DELETE FROM MobilityWalkingBoutHistory WHERE id = ?");
    a1[45] = v3;
    a1[46] = sub_10063D314(a1[10], "DELETE FROM MobilityWalkingBoutHistory WHERE startTime > ?");
    a1[47] = v4;
    a1[48] = sub_10063D314(a1[10], "DELETE FROM MobilityWalkingBoutHistory");
    a1[49] = v5;
    a1[50] = sub_10063D314(a1[10], "DELETE FROM MobilityWalkingBoutHistory WHERE startTime < ?");
    a1[51] = v6;
    a1[52] = sub_10063D314(a1[10], "SELECT * from MobilityWalkingBoutHistory ORDER BY startTime ASC");
    a1[53] = v7;
    a1[54] = sub_10063D314(a1[10], "SELECT COUNT(*) FROM MobilityWalkingBoutHistory");
    a1[55] = v8;
    a1[56] = sub_10063D314(a1[10], "SELECT * FROM MobilityWalkingBoutHistory WHERE startTime >= ? and endTime > 0 and endTime <= ? ORDER BY startTime ASC");
    a1[57] = v9;
    a1[58] = sub_10063D314(a1[10], "SELECT * FROM MobilityWalkingBoutHistory ORDER BY id DESC LIMIT 1");
    a1[59] = v10;
    a1[60] = sub_10063D314(a1[10], "SELECT * FROM MobilityWalkingBoutHistory ORDER BY endTime DESC LIMIT 1");
    a1[61] = v11;
    a1[62] = sub_10063D314(a1[10], "SELECT * FROM MobilityWalkingBoutHistory ORDER BY startTime ASC LIMIT 1");
    a1[63] = v12;
    a1[64] = sub_10063D314(a1[10], "INSERT INTO MobilityWalkingBoutHistory (startTime, endTime, stepCount, workoutType, terminationReason, boundaryType) VALUES (?, ?, ?, ?, ?, ?)");
    a1[65] = v13;
    a1[66] = sub_10063D314(a1[10], "UPDATE MobilityWalkingBoutHistory SET startTime = startTime + ?");
    a1[67] = v14;
    result = sub_10063D314(a1[10], "UPDATE MobilityWalkingBoutHistory SET startTime = ?, endTime = ?, stepCount = ?, workoutType = ?, terminationReason = ?, boundaryType = ? WHERE id = ?");
    a1[68] = result;
    a1[69] = v15;
  }
  return result;
}

BOOL sub_100972990(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "MobilityWalkingBoutHistory");
  if (result)
  {
    v3 = "workoutType";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "MobilityWalkingBoutHistory", (uint64_t)"workoutType", (uint64_t)&v3);
  }
  return result;
}

void sub_100972D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_100972DCC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  sqlite3_stmt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 384), &v7);
    v3 = *(_QWORD *)(a1 + 80);
    v4 = (sqlite3_stmt *)sub_100026CC8(v7);
    sub_10023C9B0(v3, v4);
    v5 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0)
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v6 = *(_QWORD *)(v5 + 88);
    sub_100053048(v5, v6);
    result = v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100972E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100972E74(uint64_t a1)
{
  return sub_100972DCC(a1 - 72);
}

uint64_t sub_100972E7C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100087AF4(a1 + 46, &v10);
    v5 = (sqlite3_stmt *)sub_100026CC8(v10);
    if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
    {
      v6 = a1[10];
      v7 = (sqlite3_stmt *)sub_100026CC8(v10);
      sub_10023C9B0(v6, v7);
    }
    v8 = a1[10];
    if (*(uint64_t *)(v8 + 88) <= 0)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = *(_QWORD *)(v8 + 88);
    sub_100053048(v8, v9);
    result = v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100972F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100972F58(uint64_t a1, double a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 528), &v8);
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    if (sub_1000890C4(v5, 1, a2))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v8);
      sub_10023C9B0(v6, v7);
    }
    result = v8;
    v8 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100972FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10097300C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  sqlite3_stmt *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 512), &v17);
    if (v17)
    {
      v5 = (sqlite3_stmt *)sub_100026CC8(v17);
      if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
      {
        v6 = (sqlite3_stmt *)sub_100026CC8(v17);
        if (sub_1000890C4(v6, 2, *(double *)(a2 + 16)))
        {
          v7 = (sqlite3_stmt *)sub_100026CC8(v17);
          if (sub_10023C77C(v7, 3, *(_DWORD *)(a2 + 24)))
          {
            v8 = (sqlite3_stmt *)sub_100026CC8(v17);
            if (sub_1000CD75C(v8, 4, *(_DWORD *)(a2 + 28)))
            {
              v9 = (sqlite3_stmt *)sub_100026CC8(v17);
              if (sub_1000CD75C(v9, 5, *(_DWORD *)(a2 + 32)))
              {
                v10 = (sqlite3_stmt *)sub_100026CC8(v17);
                if (sub_1000CD75C(v10, 6, *(_DWORD *)(a2 + 36)))
                {
                  v11 = *(_QWORD *)(a1 + 80);
                  v12 = (sqlite3_stmt *)sub_100026CC8(v17);
                  sub_10023C9B0(v11, v12);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102160CF8);
      v13 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "BoutBoundaryRecorderDb: unable to prepare insert #InvalidPreparedSQLStatement", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102160CF8);
        v16 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 17, "BoutBoundaryRecorderDb: unable to prepare insert #InvalidPreparedSQLStatement", &v16, 2);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMobility::BoutBoundaryRecorderDb::insertRecordUL(const BoutBoundary &, BOOL)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
    result = v17;
    v17 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100973278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009732A8()
{
  return 0;
}

uint64_t sub_1009732B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 464), &v7);
  v4 = sub_1009716C0(&v7, a2);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_100973324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100973348(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102160F90);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102160F90);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLMobility::BoutBoundary>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_1009744E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100974800(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10190FEF4(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100974B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100974BC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102160F90);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102160F90);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102160F90);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMobility::BoutBoundary>::setDatabaseAccessible() [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1009751B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1009751E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

id *sub_1009751F4(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  int v33;
  __int128 v34;
  __int128 v35;
  id v36[2];
  int v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  uint64_t v44;

  v36[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v36[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v36);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v33 = 0;
  v34 = 0u;
  v35 = 0u;
  v6 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102160F90);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102160F90);
        LOWORD(v37) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v37, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = *(double *)&v34;
    v9 = v7 - *(double *)&v34;
    if (v7 - *(double *)&v34 < 0.0)
      v9 = -(v7 - *(double *)&v34);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102160F90);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v42 = *(double *)&v34;
        v43 = 2050;
        v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102160F90);
        v24 = *((_QWORD *)a2 + 1);
        v37 = 134349312;
        v38 = *(double *)&v34;
        v39 = 2050;
        v40 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v37, 22);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = *(double *)&v34;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102160F90);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v42 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102160F90);
          v27 = *((double *)a2 + 1);
          v37 = 134217984;
          v38 = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v37));
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_102160F90);
        v18 = v32;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v42 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102160F90);
        v37 = 134217984;
        v38 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v37));
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, int *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, &v33, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v36);
}

void sub_100975944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100975970(uint64_t a1)
{
  return sub_100974BC0(a1 - 72);
}

void sub_100975978(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_1009759A4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_101910060(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100975CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100975D20(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019101CC(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100975F80(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101910338(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1009761B8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019104A4(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1009763E0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

char *sub_10097640C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *((_DWORD *)result + 2);
  v4 = *((_OWORD *)result + 1);
  v5 = result[56];
  v6 = *(_QWORD *)(result + 60);
  v7 = result[68];
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_DWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v8 = a2 + 32;
  if (result[55] < 0)
  {
    result = (char *)sub_100115CE4((_BYTE *)v8, *((void **)result + 4), *((_QWORD *)result + 5));
  }
  else
  {
    *(_OWORD *)v8 = *((_OWORD *)result + 2);
    *(_QWORD *)(v8 + 16) = *((_QWORD *)result + 6);
  }
  *(_BYTE *)(a2 + 56) = v5;
  *(_QWORD *)(a2 + 60) = v6;
  *(_BYTE *)(a2 + 68) = v7;
  return result;
}

uint64_t sub_100976498@<X0>(float32x4_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  void *p_p;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint32x4_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  uint64_t v35;
  unsigned __int8 v36;
  _QWORD v37[2];
  uint64_t v38;
  _QWORD v39[10];
  char v40;
  uint64_t v41;

  sub_100263E50((uint64_t)v37);
  *(_QWORD *)((char *)&v37[2] + *(_QWORD *)(v37[0] - 24)) = 4;
  v4 = sub_100263F7C(&v38, (uint64_t)"device identifier: ", 19);
  v5 = a1[3].i8[7];
  if (v5 >= 0)
    v6 = (uint64_t)&a1[2];
  else
    v6 = a1[2].i64[0];
  if (v5 >= 0)
    v7 = a1[3].u8[7];
  else
    v7 = a1[2].i64[1];
  v8 = sub_100263F7C(v4, v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)", device Type: ", 15);
  v10 = a1[3].i8[8];
  if (v10 > 2)
    v11 = "unknown";
  else
    v11 = off_102160FF0[v10];
  sub_1015A2E04(&__p, v11);
  if ((v36 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = v35;
  v14 = sub_100263F7C(v9, (uint64_t)p_p, v13);
  v15 = sub_100263F7C(v14, (uint64_t)", distance(m): ", 15);
  std::ostream::operator<<(v15, a1->f32[2]);
  if ((char)v36 < 0)
    operator delete(__p);
  v16 = (uint32x4_t)vceqq_f32(a1[1], (float32x4_t)NINearbyObjectDirectionNotAvailable);
  v16.i32[3] = v16.i32[2];
  if ((vminvq_u32(v16) & 0x80000000) != 0)
  {
    sub_100263F7C(&v38, (uint64_t)", AOA not available", 19);
  }
  else
  {
    v17 = sub_100263F7C(&v38, (uint64_t)", direction vector: ", 20);
    v18 = sub_100263F7C(v17, (uint64_t)"x: ", 3);
    v19 = (_QWORD *)std::ostream::operator<<(v18, a1[1].f32[0]);
    v20 = sub_100263F7C(v19, (uint64_t)", y:  ", 6);
    v21 = (_QWORD *)std::ostream::operator<<(v20, a1[1].f32[1]);
    v22 = sub_100263F7C(v21, (uint64_t)", z: ", 5);
    v23 = (_QWORD *)std::ostream::operator<<(v22, a1[1].f32[2]);
    v24 = sub_100263F7C(v23, (uint64_t)", azimuth: ", 11);
    v25 = (_QWORD *)std::ostream::operator<<(v24, a1[3].f32[3]);
    v26 = sub_100263F7C(v25, (uint64_t)", elevation: ", 13);
    std::ostream::operator<<(v26, a1[4].f32[0]);
  }
  v27 = sub_100263F7C(&v38, (uint64_t)", range quality: ", 17);
  v28 = a1[4].u8[4] - 1;
  if (v28 > 2)
    v29 = "unspecified";
  else
    v29 = off_102161008[(char)v28];
  sub_1015A2E04(&__p, v29);
  if ((v36 & 0x80u) == 0)
    v30 = &__p;
  else
    v30 = __p;
  if ((v36 & 0x80u) == 0)
    v31 = v36;
  else
    v31 = v35;
  sub_100263F7C(v27, (uint64_t)v30, v31);
  if ((char)v36 < 0)
    operator delete(__p);
  std::stringbuf::str(a2, v39);
  *(_QWORD *)((char *)v37
  v38 = v32;
  if (v40 < 0)
    operator delete((void *)v39[8]);
  std::streambuf::~streambuf(v39);
  return std::ios::~ios(&v41);
}

void sub_100976770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100976F2C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102160FB0);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLMicroLocationHomeNearbyRangeBridge: custom range timer expired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102160FB0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "CLMicroLocationHomeNearbyRangeBridge: custom range timer expired", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLHomeNearbyRangeBridge setRangingRateWithConfiguration:]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_1002A39C4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

id sub_100977960(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "startRanging");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  return result;
}

void sub_100977E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100978334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  sub_1009791F4((void ***)&a49);
  a49 = (uint64_t)&a36;
  sub_1009791F4((void ***)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_1009783C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v22[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333)
      sub_100259694();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x199999999999999)
      v15 = 0x333333333333333;
    else
      v15 = v13;
    v22[4] = v4;
    if (v15)
      v16 = (char *)sub_1002952D4(v4, v15);
    else
      v16 = 0;
    v17 = &v16[80 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[80 * v15];
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v17 = *(_OWORD *)a2;
    *((_OWORD *)v17 + 1) = v18;
    v19 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v17 + 6) = *(_QWORD *)(a2 + 48);
    *((_OWORD *)v17 + 2) = v19;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v20 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(v17 + 61) = *(_QWORD *)(a2 + 61);
    *((_QWORD *)v17 + 7) = v20;
    v22[2] = v17 + 80;
    sub_100979280(a1, v22);
    v11 = a1[1];
    sub_100979424((uint64_t)v22);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v7 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(v7 + 32) = v9;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(v7 + 61) = *(_QWORD *)(a2 + 61);
    *(_QWORD *)(v7 + 56) = v10;
    v11 = v7 + 80;
    a1[1] = v7 + 80;
  }
  a1[1] = v11;
  return v11 - 80;
}

void sub_100978518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100979424((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10097905C()
{
  CFStringRef v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  if (!objc_msgSend(+[CLMicroLocationEnvironment shared](CLMicroLocationEnvironment, "shared"), "isTestingEnvironment"))return (uint64_t)_objc_msgSend(+[NISession deviceCapabilities](NISession, "deviceCapabilities"), "supportsPreciseDistanceMeasurement");
  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementProcessingUwbRangeEnable", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1001E48E4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    return 1;
  else
    return v1 ^ 1u;
}

void sub_100979154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10097919C(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1009791C8(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_1009791F4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100979234((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100979234(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 80)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

uint64_t sub_100979280(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1009792F4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1009792F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 64) = v8;
      v9 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v9;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v10 = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 19) = *(_QWORD *)(a3 - 19);
      *(_QWORD *)(v7 - 24) = v10;
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1009793AC((uint64_t)v13);
  return v11;
}

uint64_t sub_1009793AC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1009793E0(a1);
  return a1;
}

void sub_1009793E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    v1 += 80;
  }
}

uint64_t sub_100979424(uint64_t a1)
{
  sub_100979458(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100979458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 80;
      *(_QWORD *)(a1 + 16) = v2 - 80;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_QWORD *sub_1009794AC(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100364E14(result, a4);
    result = (_QWORD *)sub_100979530((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100979510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1009791F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100979530(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a4;
  v16 = a4;
  v17 = a4;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 2;
    do
    {
      v7 = *(v6 - 1);
      *(_OWORD *)v4 = *(v6 - 2);
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (_BYTE *)(v4 + 32);
      if (*((char *)v6 + 23) < 0)
      {
        sub_100115CE4(v8, *(void **)v6, *((_QWORD *)v6 + 1));
        v10 = v17;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 48) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v8 = v9;
        v10 = v4;
      }
      v11 = v6 - 2;
      v12 = *((_QWORD *)v6 + 3);
      *(_QWORD *)(v4 + 61) = *(_QWORD *)((char *)v6 + 29);
      *(_QWORD *)(v4 + 56) = v12;
      v4 = v10 + 80;
      v17 = v10 + 80;
      v6 += 5;
    }
    while (v11 + 5 != a3);
  }
  v15 = 1;
  sub_100979610((uint64_t)v14);
  return v4;
}

void sub_1009795FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100979610((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100979610(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100979644(a1);
  return a1;
}

void sub_100979644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0)
      operator delete(*(void **)(v1 - 48));
    v1 -= 80;
  }
}

void sub_10097974C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (a2 == 4 || a3)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102161048);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLDeviceProximity,queryForProximityCallback,FaliedParamCheck", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102161048);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLDeviceProximity,queryForProximityCallback,FaliedParamCheck", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "-[CLDeviceProximityHelper queryForProximity:monitorInterval:withTimeout:]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (v3)
      sub_10097992C(v3, +[CLDeviceProximityHelper convertPocketStateToDeviceProximity:](CLDeviceProximityHelper, "convertPocketStateToDeviceProximity:", a2));
  }
}

void sub_10097992C(uint64_t a1, int a2)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102161048);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLDeviceProximity,proximityStateCallback,state,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102161048);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLDeviceProximity,proximityStateCallback,state,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceProximity::proximityStateCallback(const CLDeviceProximityState)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (*(_BYTE *)(a1 + 72))
  {
    objc_msgSend(*(id *)(a1 + 32), "setNextFireDelay:", 5.0);
    v5 = sub_1001FCBB4();
    sub_1000B5898(a1 + 40, a2, v5);
  }
}

uint64_t sub_100979B3C(uint64_t a1, void *a2, uint64_t a3)
{
  CLDeviceProximityHelper *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v12;
  __int16 v13;
  _QWORD v14[5];
  uint8_t buf[1640];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_101BE9220;
  *(_QWORD *)(a1 + 32) = objc_msgSend(objc_msgSend(a2, "silo"), "newTimer");
  sub_100270E34(a1 + 40, a3);
  *(_BYTE *)(a1 + 72) = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100979ED8;
  v14[3] = &unk_10212ECA0;
  v14[4] = a1;
  objc_msgSend(*(id *)(a1 + 32), "setHandler:", v14);
  if (+[CMPocketStateManager isPocketStateAvailable](CMPocketStateManager, "isPocketStateAvailable"))
  {
    v6 = [CLDeviceProximityHelper alloc];
    *(_QWORD *)(a1 + 8) = v6;
    if (v6)
      -[CLDeviceProximityHelper initWithOwnerClass:](v6, "initWithOwnerClass:", a1);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102161048);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLDeviceProximity,isPocketStateAvailable,1", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102161048);
      v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "CLDeviceProximity,isPocketStateAvailable,1", &v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CLDeviceProximity::CLDeviceProximity(id<CLIntersiloUniverse>, const CLDeviceProximityCallbackType)", "%s\n", v8);
LABEL_21:
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102161048);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLDeviceProximity,isPocketStateAvailable,0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102161048);
      v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "CLDeviceProximity,isPocketStateAvailable,0", &v13, 2);
      v9 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "CLDeviceProximity::CLDeviceProximity(id<CLIntersiloUniverse>, const CLDeviceProximityCallbackType)", "%s\n", v12);
      goto LABEL_21;
    }
  }
  return a1;
}

void sub_100979E98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 64);
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id sub_100979ED8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102161048);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLDeviceProximity,PeriodicCheck", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102161048);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLDeviceProximity,PeriodicCheck", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLDeviceProximity::CLDeviceProximity(id<CLIntersiloUniverse>, const CLDeviceProximityCallbackType)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(v1 + 8), "queryForProximity:monitorInterval:withTimeout:", objc_msgSend(objc_msgSend(*(id *)v1, "silo"), "queue"), *(double *)(v1 + 24), *(double *)(v1 + 16));
}

uint64_t sub_10097A088(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");

    *(_QWORD *)(a1 + 8) = 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = 0;
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 == (_QWORD *)(a1 + 40))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 40);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_10097A118(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

id sub_10097A224(__int128 *a1, void *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  return objc_msgSend(a2, "onResultAvailable:", &v3);
}

uint64_t sub_10097A50C(uint64_t a1, int a2, double a3)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *(_DWORD *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_102161068);
  v4 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SessionMetrics,Start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102161068);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "SessionMetrics,Start", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLStrideCalibrationSessionMetrics::CLStrideCalibrationSessionMetrics(CFTimeInterval, int32_t)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return a1;
}

void sub_10097AB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_101480AF4(&a37);
  _Unwind_Resume(a1);
}

void sub_10097B5B0(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10097B5DC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10097B608(uint64_t a1)
{
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_10097B6D4(id a1)
{
  qword_102305AD8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSeparationAlertsServiceSilo"));
}

void sub_10097B744(id a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _WORD v9[8];
  uint8_t buf[1640];

  sub_100197040();
  if ((sub_1000C4240() & 1) != 0 || (sub_100197040(), sub_100195F08()))
  {
    byte_102305AE8 = 1;
  }
  else
  {
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v2 = qword_1022A0148;
    if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#sa not supported on this platform because platform is not iPhone or Watch", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0140 != -1)
        dispatch_once(&qword_1022A0140, &stru_102161258);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0148, 0, "#sa not supported on this platform because platform is not iPhone or Watch", v9, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "+[CLSeparationAlertsService isSupported]_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  if (!objc_opt_class(SPOwnerSession, v1))
  {
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v3 = qword_1022A0148;
    if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sa not supported on this platform because SPOwner.framework is not present", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0140 != -1)
        dispatch_once(&qword_1022A0140, &stru_102161258);
      v9[0] = 0;
      LODWORD(v8) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0148, 0, "#sa not supported on this platform because SPOwner.framework is not present", v9, v8);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "+[CLSeparationAlertsService isSupported]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    byte_102305AE8 = 0;
  }
}

void sub_10097BF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10097BF20(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onStopLocationRequestTimerFire");
}

void sub_10097C260(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7[2];
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  uint64_t v21;

  v6 = *a2;
  sub_1001AF190((char *)v7, (__int128 *)a3);
  v21 = *(_QWORD *)(a3 + 184);
  objc_msgSend(a4, "onClientManagerNotification:data:", v6, v7);
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_10097C328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10097C444(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onGnssNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_10097C554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10097C8F8(uint64_t a1, unsigned int *a2, __int128 *a3, void *a4)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  v4 = *a2;
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  return objc_msgSend(a4, "onDaemonStatusNotification:data:", v4, &v6);
}

id sub_10097CAA8(uint64_t a1, unsigned int *a2, _QWORD *a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionManagerNotification:data:", *a2, *a3);
}

void sub_10097CBDC(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  _BYTE v7[8];
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  int v16;

  v6 = *a2;
  v7[0] = *(_BYTE *)a3;
  sub_100985590((uint64_t)&v8, a3 + 8);
  v15 = *(_QWORD *)(a3 + 112);
  v16 = *(_DWORD *)(a3 + 120);
  objc_msgSend(a4, "onBluetoothServiceNotification:data:", v6, v7);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
}

void sub_10097CC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100985540((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_10097CDA0(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[10];

  v4 = *a2;
  v5 = a3[7];
  v11[6] = a3[6];
  v11[7] = v5;
  v6 = a3[9];
  v11[8] = a3[8];
  v11[9] = v6;
  v7 = a3[3];
  v11[2] = a3[2];
  v11[3] = v7;
  v8 = a3[5];
  v11[4] = a3[4];
  v11[5] = v8;
  v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  return objc_msgSend(a4, "onMotionStateNotification:data:", v4, v11);
}

id sub_10097CF88(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  return _objc_msgSend(*(id *)(a1 + 32), "onVehicleStateNotification");
}

id sub_10097D6B0(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[12];

  v4 = *a2;
  v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return objc_msgSend(a4, "onCompanionNotification:data:", v4, v12);
}

id sub_10097E300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[32];

  if (a3)
  {
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v5 = qword_1022A0148;
    if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v22 = 68289539;
      *(_WORD *)v23 = 2082;
      *(_QWORD *)&v23[2] = "";
      *(_WORD *)&v23[10] = 2113;
      *(_QWORD *)&v23[12] = v6;
      *(_WORD *)&v23[20] = 2114;
      *(_QWORD *)&v23[22] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#sa #loi error fetching LOI\", \"visit\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
      if (qword_1022A0140 != -1)
        dispatch_once(&qword_1022A0140, &stru_102161258);
    }
    v7 = qword_1022A0148;
    if (!os_signpost_enabled((os_log_t)qword_1022A0148))
      return objc_msgSend(*(id *)(a1 + 40), "sendVisit:", *(_QWORD *)(a1 + 32), v22, *(_OWORD *)v23, *(_OWORD *)&v23[16]);
    v8 = *(_QWORD *)(a1 + 32);
    v22 = 68289539;
    *(_WORD *)v23 = 2082;
    *(_QWORD *)&v23[2] = "";
    *(_WORD *)&v23[10] = 2113;
    *(_QWORD *)&v23[12] = v8;
    *(_WORD *)&v23[20] = 2114;
    *(_QWORD *)&v23[22] = a3;
    v9 = "#sa #loi error fetching LOI";
    v10 = "{\"msg%{public}.0s\":\"#sa #loi error fetching LOI\", \"visit\":%{private, location:escape_only}@, \"error\":%"
          "{public, location:escape_only}@}";
    v11 = v7;
LABEL_9:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v9, v10, (uint8_t *)&v22, 0x26u);
    return objc_msgSend(*(id *)(a1 + 40), "sendVisit:", *(_QWORD *)(a1 + 32), v22, *(_OWORD *)v23, *(_OWORD *)&v23[16]);
  }
  if (!a2)
  {
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v16 = qword_1022A0148;
    if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_FAULT))
    {
      v17 = *(_QWORD *)(a1 + 32);
      v18 = *(_QWORD *)(a1 + 48);
      v22 = 68289539;
      *(_WORD *)v23 = 2082;
      *(_QWORD *)&v23[2] = "";
      *(_WORD *)&v23[10] = 2113;
      *(_QWORD *)&v23[12] = v17;
      *(_WORD *)&v23[20] = 2113;
      *(_QWORD *)&v23[22] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sa #loi received nil in return when fetching LOI\", \"visit\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
      if (qword_1022A0140 != -1)
        dispatch_once(&qword_1022A0140, &stru_102161258);
    }
    v19 = qword_1022A0148;
    if (!os_signpost_enabled((os_log_t)qword_1022A0148))
      return objc_msgSend(*(id *)(a1 + 40), "sendVisit:", *(_QWORD *)(a1 + 32), v22, *(_OWORD *)v23, *(_OWORD *)&v23[16]);
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 48);
    v22 = 68289539;
    *(_WORD *)v23 = 2082;
    *(_QWORD *)&v23[2] = "";
    *(_WORD *)&v23[10] = 2113;
    *(_QWORD *)&v23[12] = v20;
    *(_WORD *)&v23[20] = 2113;
    *(_QWORD *)&v23[22] = v21;
    v9 = "#sa #loi received nil in return when fetching LOI";
    v10 = "{\"msg%{public}.0s\":\"#sa #loi received nil in return when fetching LOI\", \"visit\":%{private, location:esca"
          "pe_only}@, \"loiIdentifier\":%{private, location:escape_only}@}";
    v11 = v19;
    goto LABEL_9;
  }
  if (qword_1022A0140 != -1)
    dispatch_once(&qword_1022A0140, &stru_102161258);
  v14 = qword_1022A0148;
  if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a1 + 48);
    v22 = 68289539;
    *(_WORD *)v23 = 2082;
    *(_QWORD *)&v23[2] = "";
    *(_WORD *)&v23[10] = 2113;
    *(_QWORD *)&v23[12] = a2;
    *(_WORD *)&v23[20] = 2113;
    *(_QWORD *)&v23[22] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa #loi received LOI\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
  }
  return objc_msgSend(*(id *)(a1 + 40), "ingestTAEventIfSAServiceRunning:", +[CLSeparationAlertsService convertRTLocationOfInterest:](CLSeparationAlertsService, "convertRTLocationOfInterest:", a2));
}

void sub_10097E724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  id *v9;
  char v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint8_t buf[4];
  _BYTE v37[28];

  if (qword_1022A0140 != -1)
    dispatch_once(&qword_1022A0140, &stru_102161258);
  v8 = qword_1022A0148;
  if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134284033;
    *(_QWORD *)v37 = a2;
    *(_WORD *)&v37[8] = 2049;
    *(_QWORD *)&v37[10] = a3;
    *(_WORD *)&v37[18] = 2049;
    *(_QWORD *)&v37[20] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#sa received vehicle state notification - state %{private}lu; hints %{private}lu; operator state %{private}lu",
      buf,
      0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v30 = 134284033;
    v31 = a2;
    v32 = 2049;
    v33 = a3;
    v34 = 2049;
    v35 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0148, 2, "#sa received vehicle state notification - state %{private}lu; hints %{private}lu; operator state %{private}lu",
      &v30,
      32);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "-[CLSeparationAlertsService onVehicleStateNotification]_block_invoke", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  if (a2 == 1)
  {
    v9 = (id *)(a1 + 32);
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "count"))
    {
      v24 = a3;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v11 = (void *)*((_QWORD *)*v9 + 23);
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v26;
        do
        {
          v15 = 0;
          do
          {
            if (*(_QWORD *)v26 != v14)
              objc_enumerationMutation(v11);
            v16 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v15);
            if (qword_1022A0140 != -1)
              dispatch_once(&qword_1022A0140, &stru_102161258);
            v17 = qword_1022A0148;
            if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEFAULT))
            {
              v18 = objc_msgSend(objc_msgSend(v16, "identifier"), "UUIDString");
              *(_DWORD *)buf = 68289283;
              *(_DWORD *)v37 = 0;
              *(_WORD *)&v37[4] = 2082;
              *(_QWORD *)&v37[6] = "";
              *(_WORD *)&v37[14] = 2113;
              *(_QWORD *)&v37[16] = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa feedback dialogue triggered end of travel\", \"device\":%{private, location:escape_only}@}", buf, 0x1Cu);
            }
            objc_msgSend(*v9, "showSAUserFeedbackDialogue:", v16);
            v15 = (char *)v15 + 1;
          }
          while (v13 != v15);
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        }
        while (v13);
      }
      objc_msgSend(*((id *)*v9 + 23), "removeAllObjects");
      if (qword_1022A0140 != -1)
        dispatch_once(&qword_1022A0140, &stru_102161258);
      a2 = 1;
      a3 = v24;
      v19 = qword_1022A0148;
      if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)v37 = 0;
        *(_WORD *)&v37[4] = 2082;
        *(_QWORD *)&v37[6] = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa dialogue queue emptied\"}", buf, 0x12u);
      }
    }
    v10 = 0;
    goto LABEL_26;
  }
  if (a2 == 2)
  {
    v9 = (id *)(a1 + 32);
    v10 = 1;
LABEL_26:
    *((_BYTE *)*v9 + 192) = v10;
    goto LABEL_28;
  }
  a2 = 0;
LABEL_28:
  if (a4 == 2)
    v20 = 2;
  else
    v20 = a4 == 1;
  v21 = objc_msgSend(objc_alloc((Class)TAVehicleStateNotification), "initWithVehicularState:andVehicularHints:andOperatorState:date:", a2, a3, v20, +[NSDate date](NSDate, "date"));
  objc_msgSend(*(id *)(a1 + 32), "ingestTAEventIfSAServiceRunning:", v21);

}

void sub_10097ECAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD block[7];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(NSObject **)(v2 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10097ED10;
  block[3] = &unk_102161180;
  block[5] = v2;
  block[6] = v3;
  block[4] = a2;
  dispatch_async(v4, block);
}

void sub_10097ED10(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v2 = qword_1022A0148;
    if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEFAULT))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "identifier");
      v4 = *(_QWORD *)(a1 + 48);
      v8 = 68289539;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2113;
      v13 = v3;
      v14 = 2050;
      v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa ingesting connection update\", \"UUID\":%{private, location:escape_only}@, \"state\":%{public}lu}", (uint8_t *)&v8, 0x26u);
    }
    v5 = objc_msgSend(objc_alloc((Class)SAConnectionEvent), "initWithDeviceUUID:state:date:", objc_msgSend(*(id *)(a1 + 32), "identifier"), *(_QWORD *)(a1 + 48), +[NSDate date](NSDate, "date"));
    objc_msgSend(*(id *)(a1 + 40), "ingestTAEventIfSAServiceRunning:", v5);

  }
  else
  {
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v6 = qword_1022A0148;
    if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#sa received nil beacon but got companion notification, ignoring\"}", (uint8_t *)&v8, 0x12u);
      if (qword_1022A0140 != -1)
        dispatch_once(&qword_1022A0140, &stru_102161258);
    }
    v7 = qword_1022A0148;
    if (os_signpost_enabled((os_log_t)qword_1022A0148))
    {
      v8 = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sa received nil beacon but got companion notification, ignoring", "{\"msg%{public}.0s\":\"#sa received nil beacon but got companion notification, ignoring\"}", (uint8_t *)&v8, 0x12u);
    }
  }
}

NSDictionary *__cdecl sub_100980020(id a1)
{
  return (NSDictionary *)&off_10221FE58;
}

NSDictionary *__cdecl sub_100980370(id a1)
{
  return (NSDictionary *)&off_10221FE80;
}

id sub_1009825B0(uint64_t a1, int a2, NSNumber *a3)
{
  char *v4;
  NSObject *v5;
  NSNumber *v6;
  uint64_t v7;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  NSObject *v15;
  NSNumber *v16;
  NSObject *v17;
  NSNumber *v18;
  NSObject *v19;
  NSNumber *v20;
  NSObject *v21;
  NSNumber *v22;
  NSNumber *v23;
  uint64_t v24;
  id result;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSString *v30;
  uint64_t v31;
  uint64_t v32;
  id obj;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  NSNumber *v51;
  __int16 v52;
  NSNumber *v53;
  _BYTE v54[128];

  v4 = "fication_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]";
  if (a2)
  {
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v5 = qword_1022A0148;
    if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(NSNumber **)(a1 + 32);
      *(_DWORD *)buf = 68289283;
      v47 = 0;
      v48 = 2082;
      v49 = "";
      v50 = 2113;
      v51 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa separation published\", \"count\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    v7 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(v7 + 192))
    {
      objc_msgSend(*(id *)(v7 + 184), "addObjectsFromArray:", *(_QWORD *)(a1 + 48));
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v9 = *(void **)(a1 + 48);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v42;
        v34 = 1;
        do
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            if (*(_QWORD *)v42 != v12)
              objc_enumerationMutation(v9);
            v14 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
            if (qword_1022A0140 != -1)
              dispatch_once(&qword_1022A0140, &stru_102161258);
            v15 = qword_1022A0148;
            if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEFAULT))
            {
              v16 = (NSNumber *)objc_msgSend(objc_msgSend(v14, "identifier"), "UUIDString");
              *(_DWORD *)buf = 68289283;
              v47 = 0;
              v48 = 2082;
              v49 = "";
              v50 = 2113;
              v51 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa feedback dialogue triggered in non-driving state\", \"device\":%{private, location:escape_only}@}", buf, 0x1Cu);
            }
            objc_msgSend(*(id *)(a1 + 40), "showSAUserFeedbackDialogue:", v14);
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
        }
        while (v11);
        v35 = -1;
        v4 = "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::"
             "notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T "
             "= CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, No"
             "tificationInfo_T = char, RegistrationInfo_T = char]"
           + 139;
        goto LABEL_31;
      }
    }
    v34 = 1;
    v35 = -1;
  }
  else
  {
    if (a3)
      v35 = (uint64_t)-[NSNumber code](a3, "code");
    else
      v35 = -1;
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v17 = qword_1022A0148;
    if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_FAULT))
    {
      v18 = *(NSNumber **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      v47 = 0;
      v48 = 2082;
      v49 = "";
      v50 = 2113;
      v51 = v18;
      v52 = 2114;
      v53 = a3;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sa separation published failed\", \"count\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A0140 != -1)
        dispatch_once(&qword_1022A0140, &stru_102161258);
    }
    v19 = qword_1022A0148;
    if (!os_signpost_enabled((os_log_t)qword_1022A0148))
    {
      v34 = 0;
      goto LABEL_34;
    }
    v20 = *(NSNumber **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    v47 = 0;
    v48 = 2082;
    v49 = "";
    v50 = 2113;
    v51 = v20;
    v52 = 2114;
    v53 = a3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sa separation published failed", "{\"msg%{public}.0s\":\"#sa separation published failed\", \"count\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    v34 = 0;
  }
LABEL_31:
  if (qword_1022A0140 != -1)
    dispatch_once(&qword_1022A0140, &stru_102161258);
LABEL_34:
  v21 = qword_1022A0148;
  if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEFAULT))
  {
    v22 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v35);
    v23 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v34);
    *(_DWORD *)buf = *((_QWORD *)v4 + 476);
    v47 = 0;
    v48 = 2082;
    v49 = "";
    v50 = 2113;
    v51 = v22;
    v52 = 2113;
    v53 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa analytics submitting spd success / failure analytics event\", \"error code\":%{private, location:escape_only}@, \"published\":%{private, location:escape_only}@}", buf, 0x26u);
  }
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v24 = a1;
  result = objc_msgSend(*(id *)(a1 + 48), "countByEnumeratingWithState:objects:count:", &v37, v45, 16, *(_QWORD *)(a1 + 48));
  if (result)
  {
    v26 = result;
    v27 = *(_QWORD *)v38;
    do
    {
      v28 = 0;
      do
      {
        if (*(_QWORD *)v38 != v27)
          objc_enumerationMutation(obj);
        v29 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v28);
        v30 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.separationalerts.spdsuccess");
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_100982B78;
        v36[3] = &unk_102161210;
        v31 = *(_QWORD *)(v24 + 56);
        v32 = *(_QWORD *)(v24 + 64);
        v36[4] = v29;
        v36[5] = v31;
        v36[6] = v32;
        v36[7] = v34;
        v36[8] = v35;
        AnalyticsSendEventLazy(v30, v36);
        v28 = (char *)v28 + 1;
      }
      while (v26 != v28);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      v26 = result;
    }
    while (result);
  }
  return result;
}

NSDictionary *sub_100982B78(uint64_t a1)
{
  _QWORD v3[7];
  _QWORD v4[7];

  v3[0] = CFSTR("deviceType");
  v4[0] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "deviceType"));
  v3[1] = CFSTR("productId");
  v4[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "productId"));
  v3[2] = CFSTR("vendorId");
  v4[2] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "vendorId"));
  v3[3] = CFSTR("eventType");
  v4[3] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 48));
  v3[4] = CFSTR("lastAlertType");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "intValue"));
  v3[5] = CFSTR("isPublished");
  v4[5] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56));
  v3[6] = CFSTR("errorNum");
  v4[6] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 7);
}

void sub_100985290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1009854E8(id a1)
{
  qword_1022A0148 = (uint64_t)os_log_create("com.apple.locationd.Position", "SeparationAlerts");
}

void sub_100985514(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100985540(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_100985590(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  v6 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100115CE4(v6, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v6 = v7;
  }
  v8 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

void sub_100985660(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100985694(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  const __CFString *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  uint8_t buf[8];
  _QWORD v21[2];

  v2 = qword_102305AB0;
  if (!qword_102305AB0)
    goto LABEL_12;
  v4 = &qword_102305AB0;
  do
  {
    v5 = *(_QWORD *)(v2 + 32);
    v6 = v5 >= a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = (uint64_t *)v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 != &qword_102305AB0 && v4[4] <= a1)
  {
    v10 = v4[5];
    switch(v10)
    {
      case 0:
        v11 = "None";
        goto LABEL_35;
      case 1:
        v11 = "Self Beaconing";
        goto LABEL_35;
      case 2:
        v11 = "Durian";
        goto LABEL_35;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_23;
      case 4:
        v11 = "Accessory";
        goto LABEL_35;
      case 8:
        v11 = "Watch";
        goto LABEL_35;
      default:
        if (v10 == 16)
        {
          v11 = "HELE";
LABEL_35:
          v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
        }
        else
        {
LABEL_23:
          if (qword_1022A0140 != -1)
            dispatch_once(&qword_1022A0140, &stru_102161258);
          v12 = qword_1022A0148;
          if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            LOWORD(v21[0]) = 2082;
            *(_QWORD *)((char *)v21 + 2) = "";
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#sa unknown device type for user feedback dialogue\"}", buf, 0x12u);
            if (qword_1022A0140 != -1)
              dispatch_once(&qword_1022A0140, &stru_102161258);
          }
          v13 = qword_1022A0148;
          if (os_signpost_enabled((os_log_t)qword_1022A0148))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            LOWORD(v21[0]) = 2082;
            *(_QWORD *)((char *)v21 + 2) = "";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sa unknown device type for user feedback dialogue", "{\"msg%{public}.0s\":\"#sa unknown device type for user feedback dialogue\"}", buf, 0x12u);
          }
          v14 = &stru_1021D8FB8;
        }
        v15 = a2 & 3;
        if ((a2 & 3) != 0)
        {
          if (v15 == 2)
          {
            sub_100985B14((uint64_t)&off_10221B948, (uint64_t)v14);
          }
          else if (v15 == 1)
          {
            sub_100985B14((uint64_t)&off_10221B930, (uint64_t)v14);
          }
        }
        else
        {
          sub_100985B14((uint64_t)&off_10221B960, (uint64_t)v14);
          sub_1001E4804(buf);
          v19 = 0;
          sub_10011B47C(*(uint64_t *)buf, "SeparationAlertsAllowUserFeedback", &v19);
          v16 = (std::__shared_weak_count *)v21[0];
          if (v21[0])
          {
            v17 = (unint64_t *)(v21[0] + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        sub_10008A9F0((uint64_t **)&qword_102305AA8, v4);
        operator delete(v4);
        break;
    }
  }
  else
  {
LABEL_12:
    if (qword_1022A0140 != -1)
      dispatch_once(&qword_1022A0140, &stru_102161258);
    v8 = qword_1022A0148;
    if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v21[0]) = 2082;
      *(_QWORD *)((char *)v21 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#sa CFUserNotification event delivery for unknown notification\"}", buf, 0x12u);
      if (qword_1022A0140 != -1)
        dispatch_once(&qword_1022A0140, &stru_102161258);
    }
    v9 = qword_1022A0148;
    if (os_signpost_enabled((os_log_t)qword_1022A0148))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v21[0]) = 2082;
      *(_QWORD *)((char *)v21 + 2) = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sa CFUserNotification event delivery for unknown notification", "{\"msg%{public}.0s\":\"#sa CFUserNotification event delivery for unknown notification\"}", buf, 0x12u);
    }
  }
}

void sub_100985AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100985B14(uint64_t a1, uint64_t a2)
{
  NSMutableDictionary *v4;
  NSObject *v5;
  _QWORD v7[5];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  NSMutableDictionary *v13;
  _QWORD v14[3];
  _QWORD v15[3];

  v14[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "ResponseCount");
  v15[0] = &off_10221B918;
  v14[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Response");
  v15[1] = a1;
  v14[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "deviceType");
  v15[2] = a2;
  v4 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 3));
  if (qword_1022A0140 != -1)
    dispatch_once(&qword_1022A0140, &stru_102161258);
  v5 = qword_1022A0148;
  if (os_log_type_enabled((os_log_t)qword_1022A0148, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2114;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSeparationAlerts: submitUserResponseEvent\", \"analyticsEvent\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100985CD0;
  v7[3] = &unk_10215F370;
  v7[4] = v4;
  return AnalyticsSendEventLazy(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.separationalerts.userfeedback"), v7);
}

uint64_t sub_100985CD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100985CD8()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BE9288;
      v1[3] = unk_101BE9298;
      v1[4] = xmmword_101BE92A8;
      v1[0] = xmmword_101BE9268;
      v1[1] = unk_101BE9278;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100985DAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100985DC4()
{
  qword_102305AB8 = 0;
  qword_102305AB0 = 0;
  qword_102305AA8 = (uint64_t)&qword_102305AB0;
  __cxa_atexit((void (*)(void *))sub_10097B608, &qword_102305AA8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102305AC0, "SeparationAlertsService");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305AC0, (void *)&_mh_execute_header);
}

void sub_100985E34(id a1)
{
  qword_1022A02B8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "QA");
}

id sub_100986018(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "timerFired:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_100986258(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  _QWORD *v15;
  __int16 v16;
  uint64_t v17;

  objc_msgSend(*(id *)(a1 + 24), "assertInside");
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021612F0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v15 = v3;
    v16 = 2048;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "timerFired, fIdentifier, %s, f, %p", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    v6 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *(_QWORD *)(a1 + 8);
    v10 = 136315394;
    v11 = v6;
    v12 = 2048;
    v13 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "timerFired, fIdentifier, %s, f, %p", (const char *)&v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLPersistentTimer::timerFired()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(a1, *(_QWORD *)(a1 + 16));
}

uint64_t sub_100986474(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7, double a8, double a9)
{
  __int128 v16;
  void *v17;
  CLPersistentTimerInternal *v18;
  void *v19;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)a2, *((_QWORD *)a2 + 1));
    v17 = *(void **)(a1 + 24);
  }
  else
  {
    v16 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v16;
    v17 = a5;
  }
  objc_msgSend(v17, "assertInside");
  v18 = [CLPersistentTimerInternal alloc];
  if (*((char *)a2 + 23) >= 0)
    v19 = a2;
  else
    v19 = *(void **)a2;
  *(_QWORD *)a1 = -[CLPersistentTimerInternal initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:](v18, "initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:", v19, a6, a1, a5, a7, a8, a9);
  return a1;
}

void sub_100986548(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100986568(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 24), "assertInside");
  objc_msgSend(*(id *)a1, "invalidate");

  *(_QWORD *)a1 = 0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

id sub_1009865BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 24), "assertInside");
  if (*(char *)(a1 + 55) < 0)
    return sub_100115CE4((_BYTE *)a2, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 48);
  return result;
}

void sub_100986614(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_100986640(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE *v15;
  char v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  _BYTE *v29;
  char v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v39;
  _WORD v40[8];
  uint8_t buf[8];
  std::__shared_weak_count *v42;

  *(_QWORD *)a1 = off_102161320;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = *a3;
  v6 = a3[1];
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 32) = *a4;
  v9 = a4[1];
  *(_QWORD *)(a1 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 48) = *a5;
  v12 = a5[1];
  *(_QWORD *)(a1 + 56) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 64) = 0;
  v15 = (_BYTE *)(a1 + 64);
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 88) = 0xFFFF00000000;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 112) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 128) = _Q1;
  *(_OWORD *)(a1 + 144) = _Q1;
  *(_OWORD *)(a1 + 160) = _Q1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 180) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 208) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 248) = 1;
  *(_QWORD *)(a1 + 256) = 0;
  sub_1001E4804(buf);
  v21 = sub_1001E4874(*(uint64_t *)buf, "StationaryLocationHarvest", (BOOL *)(a1 + 64));
  v22 = v21;
  v23 = v42;
  if (!v42)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (v25)
  {
LABEL_14:
    if ((v21 & 1) != 0)
      goto LABEL_15;
LABEL_26:
    *v15 = 0;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if ((v22 & 1) == 0)
    goto LABEL_26;
LABEL_15:
  if (*v15)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v26 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "StationaryLocationHarvest enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v40[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "StationaryLocationHarvest enabled", v40, 2);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "CLMonitorGps::CLMonitorGps(id<CLIntersiloUniverse>, std::shared_ptr<CLMonitorGpsInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLMonitorGpsInterface::GpsReceiver>)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
LABEL_27:
  sub_1001E4804(buf);
  v29 = (_BYTE *)(a1 + 65);
  v30 = sub_1001E4874(*(uint64_t *)buf, "IgnoreVehicularSpeed", (BOOL *)(a1 + 65));
  v31 = v30;
  v32 = v42;
  if (!v42)
    goto LABEL_31;
  v33 = (unint64_t *)&v42->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_31:
    if ((v30 & 1) != 0)
      goto LABEL_32;
LABEL_43:
    *v29 = 0;
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if ((v31 & 1) == 0)
    goto LABEL_43;
LABEL_32:
  if (*v29)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v35 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "ignore vehicular speed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v40[0] = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "ignore vehicular speed", v40, v39);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "CLMonitorGps::CLMonitorGps(id<CLIntersiloUniverse>, std::shared_ptr<CLMonitorGpsInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLMonitorGpsInterface::GpsReceiver>)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  return a1;
}

void sub_100986AFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100261F44(v3);
  sub_100261F44(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100986B48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100986B58(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v5;
  NSObject *v6;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((_DWORD)result && *(unsigned __int8 *)(a1 + 66) != a2)
  {
    if (a2)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v5 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HARVEST: starting gps harvesting.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021613C8);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "HARVEST: starting gps harvesting.", v16, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLMonitorGps::gpsHarvesting(BOOL)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), 4);
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), 4);
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v6 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HARVEST: stopping gps harvesting.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021613C8);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "HARVEST: stopping gps harvesting.", v16, 2);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLMonitorGps::gpsHarvesting(BOOL)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), 4);
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), 4);
      *(_DWORD *)(a1 + 92) = 0xFFFF;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 0;
      __asm { FMOV            V1.2D, #-1.0 }
      *(_OWORD *)(a1 + 112) = xmmword_101BAFC90;
      *(_OWORD *)(a1 + 128) = _Q1;
      *(_OWORD *)(a1 + 144) = _Q1;
      *(_OWORD *)(a1 + 160) = _Q1;
      *(_DWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 180) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 196) = 0;
      *(_QWORD *)(a1 + 188) = 0;
      *(_DWORD *)(a1 + 204) = 0;
      *(_QWORD *)(a1 + 208) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
      *(_QWORD *)(a1 + 220) = 0;
      *(_QWORD *)(a1 + 236) = 0;
      *(_QWORD *)(a1 + 228) = 0;
      *(_BYTE *)(a1 + 244) = 0;
    }
    *(_BYTE *)(a1 + 66) = a2;
  }
  return result;
}

uint64_t sub_100986EDC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100986EEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100986F00(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021613C8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "getting GPS notifications", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "getting GPS notifications", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMonitorGps::initHarvesting()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a1);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), 13);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), 47);
}

BOOL sub_1009870CC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 65) || *(_BYTE *)(a1 + 68) != 0;
}

uint64_t sub_1009870EC(uint64_t result, int a2)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (*(unsigned __int8 *)(result + 68) != a2)
  {
    v2 = result;
    *(_BYTE *)(result + 68) = a2;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v4 = *(unsigned __int8 *)(v2 + 68);
      v5[0] = 68289283;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1025;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"vehicular speed achieved\", \"vehicularSpeedAchieved\":%{private}hhd}", (uint8_t *)v5, 0x18u);
    }
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 40))(*(_QWORD *)(v2 + 32));
  }
  return result;
}

void sub_1009871F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v14;
  int v15;
  __n128 v16;
  int v17;
  double v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  double v29;
  NSObject *v30;
  __n128 v31;
  NSObject *v32;
  double v33;
  int v34;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  const char *v51;
  uint8_t *v52;
  double v53;
  int v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  const char *v61;
  uint8_t *v62;
  double v63;
  double v64;
  _BYTE v65[64];
  _BYTE v66[32];
  __int128 v67;
  __int128 v68;
  _BYTE v69[28];
  int v70;
  float v71;
  char v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  char v75;
  void *__p;
  char v77;
  std::__shared_weak_count *v78;
  id v79;
  int v80;
  _BYTE v81[28];
  __int16 v82;
  int v83;
  uint8_t buf[4];
  _BYTE v85[30];
  int v86;

  sub_10011D234((uint64_t)v65, a4);
  *(_BYTE *)(a1 + 248) = 1;
  if (v72)
  {
    *(_BYTE *)(a1 + 248) = 0;
    if ((_DWORD)a3 != 47)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v13 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Location is from test equipment, do not harvest", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021613C8);
        LOWORD(v80) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Location is from test equipment, do not harvest", &v80, 2);
        v12 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v14);
        goto LABEL_35;
      }
      goto LABEL_42;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Server side location can be harvested", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      LOWORD(v80) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Server side location can be harvested", &v80, 2);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
  }
  if ((sub_100182290((uint64_t)v65) & 1) != 0)
  {
    if ((_DWORD)a3 == 13)
    {
      *(_BYTE *)(a1 + 67) = v75;
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v8 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        if (*(_BYTE *)(a1 + 67))
          v9 = "enabled";
        else
          v9 = "disabled";
        *(float *)buf = 4.8149e-34;
        *(_QWORD *)v85 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Got GPS location simulation %s notification", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021613C8);
        if (*(_BYTE *)(a1 + 67))
          v50 = "enabled";
        else
          v50 = "disabled";
        v80 = 136315138;
        *(_QWORD *)v81 = v50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "Got GPS location simulation %s notification", (const char *)&v80);
        v52 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
      goto LABEL_42;
    }
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 160))(*(_QWORD *)(a1 + 32));
    v16.n128_u64[0] = *(_QWORD *)&v65[20];
    if (*(double *)&v65[20] >= 0.0)
      v17 = v15;
    else
      v17 = 0;
    if (v17 != 1)
      goto LABEL_42;
    v18 = (*(double (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32), v16);
    if (v18 - *(double *)&v66[12] > 5.0)
      goto LABEL_42;
    if (*(_DWORD *)&v69[4] != 1 && *(_DWORD *)&v69[8] != 1)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v28 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        *(float *)buf = 1.7163e-36;
        *(_DWORD *)v85 = 0;
        *(_WORD *)&v85[4] = 2082;
        *(_QWORD *)&v85[6] = "";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"We have no WGS84, anywhere! Only Chinese Stark\"}", buf, 0x12u);
      }
      goto LABEL_42;
    }
    v29 = *(double *)&v65[28];
    if (v70 == 2)
    {
      *(float *)buf = 0.0;
      if (sub_100208AC8((float *)buf, *(double *)&v65[4], *(double *)&v65[12]))
        v29 = v29 + v71 - *(float *)buf;
    }
    *(double *)&v65[28] = v29;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v30 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(float *)buf = 1.7164e-36;
      *(_DWORD *)v85 = 0;
      *(_WORD *)&v85[4] = 2082;
      *(_QWORD *)&v85[6] = "";
      *(_WORD *)&v85[14] = 1040;
      *(_DWORD *)&v85[16] = 156;
      *(_WORD *)&v85[20] = 2097;
      *(_QWORD *)&v85[22] = v65;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onGps\", \"location\":%{private, location:CLDaemonLocation}.*P}", buf, 0x22u);
    }
    if (a3 <= 0x2F && ((1 << a3) & 0x800000000011) != 0)
    {
      v31.n128_u64[0] = *(_QWORD *)&v66[12];
      if (*(double *)&v66[12] - *(double *)(a1 + 168) > 180.0)
      {
        if (*(double *)&v66[12] - *(double *)(a1 + 80) > 180.0)
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021613C8);
          v32 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
          {
            v33 = *(double *)&v66[12] - *(double *)(a1 + 80);
            v34 = *(_DWORD *)(a1 + 72);
            *(float *)buf = 3.8521e-34;
            *(double *)v85 = v33;
            *(_WORD *)&v85[8] = 1024;
            *(_DWORD *)&v85[10] = v34;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "GPS dropped out for %.3fs while warming - resetting count (from %d)", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_1021613C8);
            v53 = *(double *)&v66[12] - *(double *)(a1 + 80);
            v54 = *(_DWORD *)(a1 + 72);
            v80 = 134218240;
            *(double *)v81 = v53;
            *(_WORD *)&v81[8] = 1024;
            *(_DWORD *)&v81[10] = v54;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "GPS dropped out for %.3fs while warming - resetting count (from %d)", COERCE_DOUBLE(&v80), 18);
            v56 = (uint8_t *)v55;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v55);
            if (v56 != buf)
              free(v56);
          }
          *(_DWORD *)(a1 + 72) = 0;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 112))(a1, 0);
          v31.n128_u64[0] = *(_QWORD *)&v66[12];
        }
        *(_QWORD *)(a1 + 80) = v31.n128_u64[0];
        ++*(_DWORD *)(a1 + 72);
      }
      if (*(double *)(a1 + 96) == *(double *)&v65[4]
        && *(double *)(a1 + 104) == *(double *)&v65[12]
        && ((v35 = *(double *)(a1 + 112), v35 <= 50.0) || v35 <= *(double *)&v65[20]))
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021613C8);
        v43 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        {
          v44 = *(_QWORD *)(a1 + 96);
          v45 = *(_QWORD *)(a1 + 104);
          v46 = *(_QWORD *)(a1 + 112);
          v47 = *(_DWORD *)(a1 + 88);
          *(float *)buf = 3.8523e-34;
          *(_QWORD *)v85 = v44;
          *(_WORD *)&v85[8] = 2048;
          *(_QWORD *)&v85[10] = v45;
          *(_WORD *)&v85[18] = 2048;
          *(_QWORD *)&v85[20] = v46;
          *(_WORD *)&v85[28] = 1024;
          v86 = v47;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "location is clamped at <%+.8f,%+.8f> acc %.2f - count %d", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021613C8);
          v57 = *(_QWORD *)(a1 + 96);
          v58 = *(_QWORD *)(a1 + 104);
          v59 = *(_QWORD *)(a1 + 112);
          v60 = *(_DWORD *)(a1 + 88);
          v80 = 134218752;
          *(_QWORD *)v81 = v57;
          *(_WORD *)&v81[8] = 2048;
          *(_QWORD *)&v81[10] = v58;
          *(_WORD *)&v81[18] = 2048;
          *(_QWORD *)&v81[20] = v59;
          v82 = 1024;
          v83 = v60;
          LODWORD(v63) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "location is clamped at <%+.8f,%+.8f> acc %.2f - count %d", COERCE_DOUBLE(&v80), v63, v64, *(_DWORD *)v65);
          v62 = (uint8_t *)v61;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v61);
          if (v62 != buf)
            free(v62);
        }
        ++*(_DWORD *)(a1 + 88);
      }
      else
      {
        *(_DWORD *)(a1 + 88) = 0;
      }
      v31.n128_u64[0] = *(_QWORD *)&v65[44];
      (*(void (**)(uint64_t, BOOL, __n128))(*(_QWORD *)a1 + 112))(a1, *(double *)&v65[44] >= 6.7, v31);
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v65);
      if (((*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 32) + 184))(*(_QWORD *)(a1 + 32), v65) & 1) != 0)
      {
        v36 = *(_OWORD *)&v66[16];
        *(_OWORD *)(a1 + 156) = *(_OWORD *)v66;
        *(_OWORD *)(a1 + 172) = v36;
        v37 = *(_OWORD *)&v65[48];
        *(_OWORD *)(a1 + 124) = *(_OWORD *)&v65[32];
        *(_OWORD *)(a1 + 140) = v37;
        *(_OWORD *)(a1 + 232) = *(_OWORD *)&v69[12];
        v38 = *(_OWORD *)v69;
        v39 = v67;
        *(_OWORD *)(a1 + 204) = v68;
        *(_OWORD *)(a1 + 220) = v38;
        *(_OWORD *)(a1 + 188) = v39;
        v40 = *(_OWORD *)&v65[16];
        *(_OWORD *)(a1 + 92) = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 108) = v40;
        (*(void (**)(_QWORD, uint64_t, uint64_t, _BYTE *))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a2, a3, v65);
        goto LABEL_42;
      }
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v41 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "on gps notification. Pos harvesting not eligible", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021613C8);
        LOWORD(v80) = 0;
        LODWORD(v63) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "on gps notification. Pos harvesting not eligible", &v80, *(_QWORD *)&v63);
        v12 = (uint8_t *)v42;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v42);
LABEL_35:
        if (v12 != buf)
          free(v12);
      }
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v10 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(float *)buf = 1.5283e-36;
      *(_DWORD *)v85 = v67;
      *(_WORD *)&v85[4] = 2049;
      *(_QWORD *)&v85[6] = *(_QWORD *)&v65[4];
      *(_WORD *)&v85[14] = 2049;
      *(_QWORD *)&v85[16] = *(_QWORD *)&v65[12];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#Warning,invalid,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v80 = 67240705;
      *(_DWORD *)v81 = v67;
      *(_WORD *)&v81[4] = 2049;
      *(_QWORD *)&v81[6] = *(_QWORD *)&v65[4];
      *(_WORD *)&v81[14] = 2049;
      *(_QWORD *)&v81[16] = *(_QWORD *)&v65[12];
      LODWORD(v63) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "#Warning,invalid,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f", &v80, *(_QWORD *)&v63);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
      goto LABEL_35;
    }
  }
LABEL_42:

  v19 = v78;
  if (v78)
  {
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v77 < 0)
    operator delete(__p);
  v22 = v74;
  if (v74)
  {
    v23 = (unint64_t *)&v74->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v73;
  if (v73)
  {
    v26 = (unint64_t *)&v73->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_100988060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009880B0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021613C8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 248);
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Client side harvesting eligibility,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v5 = *(unsigned __int8 *)(a1 + 248);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Client side harvesting eligibility,%d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMonitorGps::isGpsForClientHarvestingEligible() const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return *(unsigned __int8 *)(a1 + 248);
}

id sub_100988264(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(a1 + 256) = result;
  return result;
}

id sub_100988294(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLAccessoryLocationProvider")), "syncgetConnectedAccessory");
}

_QWORD *sub_1009882B8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102161320;
  v2 = (uint64_t)(a1 + 2);
  sub_100261F44((uint64_t)(a1 + 6));
  sub_100261F44((uint64_t)(a1 + 4));
  sub_100261F44(v2);
  return a1;
}

void sub_100988300(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102161320;
  v2 = (uint64_t)(a1 + 2);
  sub_100261F44((uint64_t)(a1 + 6));
  sub_100261F44((uint64_t)(a1 + 4));
  sub_100261F44(v2);
  operator delete();
}

void sub_100988358(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1009884D0(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        *(_QWORD *)(a1 + 8) = v15;
        continue;
      case 2u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        break;
      case 3u:
        v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v24 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v24 = 0;
        }
        v26 = 16;
        goto LABEL_46;
      case 4u:
        v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v24 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v24 = 0;
        }
        v26 = 20;
LABEL_46:
        *(_DWORD *)(a1 + v26) = v24;
        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v21 = v20 + 1;
      if (v20 == -1 || v21 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
      v19 |= (unint64_t)(v22 & 0x7F) << v17;
      if ((v22 & 0x80) == 0)
        goto LABEL_37;
      v17 += 7;
      v10 = v18++ >= 9;
      if (v10)
      {
        LODWORD(v19) = 0;
        goto LABEL_39;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_37:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v19) = 0;
LABEL_39:
    *(_DWORD *)(a1 + 24) = v19;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100988BE0(uint64_t a1)
{
  __int128 v7;
  __int128 v9;

  *(_DWORD *)a1 = 0xFFFF;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v9 = _Q0;
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  sub_1002433B8(a1 + 160);
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0x10000000000000;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = v9;
  *(_QWORD *)(a1 + 240) = 0xBFF0000000000000;
  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  *(_OWORD *)(a1 + 248) = v7;
  *(_OWORD *)(a1 + 264) = v7;
  *(_DWORD *)a1 = 0xFFFF;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 36) = v9;
  *(_OWORD *)(a1 + 52) = v9;
  *(_OWORD *)(a1 + 68) = v9;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  return a1;
}

void sub_100988CF4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  NSObject *v36;
  const char *v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  double v49;
  uint8_t buf[4];
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  double v61;

  if (*a3 != 9)
  {
    if (*a3)
      return;
    v6 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a4 + 32);
    v8 = *(_OWORD *)(a4 + 48);
    v9 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = v8;
    v10 = *(_OWORD *)(a4 + 96);
    v11 = *(_OWORD *)(a4 + 112);
    v12 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 128) = v12;
    *(_OWORD *)(a1 + 96) = v10;
    v13 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    *(double *)(a1 + 76) = sub_100B30608(v13, buf);
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a4 + 772);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v14 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(a1 + 4);
      v16 = *(_QWORD *)(a1 + 12);
      v17 = *(_QWORD *)(a1 + 20);
      v18 = *(_QWORD *)(a1 + 76);
      v19 = *(_DWORD *)(a1 + 156);
      v20 = sub_100B303DC();
      v21 = sub_100B309E0(v20);
      *(_DWORD *)buf = 134284801;
      v51 = v15;
      v52 = 2049;
      v53 = v16;
      v54 = 2050;
      v55 = v17;
      v56 = 2050;
      v57 = v18;
      v58 = 1026;
      v59 = v19;
      v60 = 2050;
      v61 = v21;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#loiOverride received LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,timestamp,%{public}.3f,sourceAccuracy,%{public}d,propagation_us,%{public}.3f", buf, 0x3Au);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v22 = qword_1022A0178;
    v23 = *(_QWORD *)(a1 + 4);
    v24 = *(_QWORD *)(a1 + 12);
    v25 = *(_QWORD *)(a1 + 20);
    v26 = *(_QWORD *)(a1 + 76);
    v27 = *(_DWORD *)(a1 + 156);
    v28 = sub_100B303DC();
    v38 = 134284801;
    v39 = v23;
    v40 = 2049;
    v41 = v24;
    v42 = 2050;
    v43 = v25;
    v44 = 2050;
    v45 = v26;
    v46 = 1026;
    v47 = v27;
    v48 = 2050;
    v49 = sub_100B309E0(v28);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "#loiOverride received LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,timestamp,%{public}.3f,sourceAccuracy,%{public}d,propagation_us,%{public}.3f", &v38, 58);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLLoiLocationOverride::feedLoiLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v29);
    if (v30 == buf)
      return;
LABEL_21:
    free(v30);
    return;
  }
  *(_DWORD *)a1 = 0xFFFF;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021613E8);
  v36 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location is not valid anymore.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    LOWORD(v38) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride LOI location is not valid anymore.", &v38, 2);
    v30 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "void CLLoiLocationOverride::feedLoiLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v37);
    if (v30 != buf)
      goto LABEL_21;
  }
}

void sub_100989134(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  double v32;

  *(_BYTE *)(a1 + 200) = a2;
  if (a2)
  {
    v3 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    *(double *)(a1 + 208) = sub_100B30608(v3, buf);
  }
  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021613E8);
  v4 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 200))
      v5 = "YES";
    else
      v5 = "NO";
    v6 = *(_QWORD *)(a1 + 208);
    v7 = *(_QWORD *)(a1 + 76);
    v8 = sub_100B303DC();
    v9 = sub_100B309E0(v8);
    *(_DWORD *)buf = 136446978;
    v26 = v5;
    v27 = 2050;
    v28 = v6;
    v29 = 2050;
    v30 = v7;
    v31 = 2050;
    v32 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#loiOverride update WiFi association state,isWiFiAssociated,%{public}s,last association time,%{public}.3f,LOI location timestamp,%{public}.3f,propagation_us,%{public}.3f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v10 = qword_1022A0178;
    if (*(_BYTE *)(a1 + 200))
      v11 = "YES";
    else
      v11 = "NO";
    v12 = *(_QWORD *)(a1 + 208);
    v13 = *(_QWORD *)(a1 + 76);
    v14 = sub_100B303DC();
    v17 = 136446978;
    v18 = v11;
    v19 = 2050;
    v20 = v12;
    v21 = 2050;
    v22 = v13;
    v23 = 2050;
    v24 = sub_100B309E0(v14);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "#loiOverride update WiFi association state,isWiFiAssociated,%{public}s,last association time,%{public}.3f,LOI location timestamp,%{public}.3f,propagation_us,%{public}.3f", &v17, 42);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLLoiLocationOverride::updateWiFiAssociationState(BOOL)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

void sub_100989394(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  const char *v74;
  uint8_t *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  int v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint8_t buf[4];
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  const char *v104;
  __int16 v105;
  int v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  int v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;

  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021613E8);
  v6 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1 + 4);
    v8 = *(_QWORD *)(a1 + 12);
    v9 = *(_QWORD *)(a1 + 20);
    v10 = sub_10014D1E0(*(_DWORD *)(a1 + 96));
    v11 = *(_DWORD *)(a1 + 84);
    v12 = *(_QWORD *)(a1 + 76);
    v13 = *(_QWORD *)(a1 + 88);
    v14 = *(_DWORD *)(a1 + 128);
    v15 = *(_QWORD *)(a1 + 36);
    v16 = *(_QWORD *)(a1 + 28);
    *(_DWORD *)buf = 134285827;
    v98 = v7;
    v99 = 2049;
    v100 = v8;
    v101 = 2050;
    v102 = v9;
    v103 = 2082;
    v104 = v10;
    v105 = 1026;
    v106 = v11;
    v107 = 2050;
    v108 = v12;
    v109 = 2050;
    v110 = v13;
    v111 = 1026;
    v112 = v14;
    v113 = 2050;
    v114 = v15;
    v115 = 2049;
    v116 = v16;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf", buf, 0x5Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v44 = qword_1022A0178;
    v45 = *(_QWORD *)(a1 + 4);
    v46 = *(_QWORD *)(a1 + 12);
    v47 = *(_QWORD *)(a1 + 20);
    v48 = sub_10014D1E0(*(_DWORD *)(a1 + 96));
    v49 = *(_DWORD *)(a1 + 84);
    v50 = *(_QWORD *)(a1 + 76);
    v51 = *(_QWORD *)(a1 + 88);
    v52 = *(_DWORD *)(a1 + 128);
    v53 = *(_QWORD *)(a1 + 36);
    v54 = *(_QWORD *)(a1 + 28);
    v77 = 134285827;
    v78 = v45;
    v79 = 2049;
    v80 = v46;
    v81 = 2050;
    v82 = v47;
    v83 = 2082;
    v84 = v48;
    v85 = 1026;
    v86 = v49;
    v87 = 2050;
    v88 = v50;
    v89 = 2050;
    v90 = v51;
    v91 = 1026;
    v92 = v52;
    v93 = 2050;
    v94 = v53;
    v95 = 2049;
    v96 = v54;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 2, "#loiOverride LOI location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf", &v77, 94);
    v56 = (uint8_t *)v55;
    sub_100512490("Generic", 1, 0, 2, "const CLDaemonLocation CLLoiLocationOverride::fuseLocations(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021613E8);
  v17 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_QWORD *)(a2 + 4);
    v19 = *(_QWORD *)(a2 + 12);
    v20 = *(_QWORD *)(a2 + 20);
    v21 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
    v22 = *(_DWORD *)(a2 + 84);
    v23 = *(_QWORD *)(a2 + 76);
    v24 = *(_QWORD *)(a2 + 88);
    v25 = *(_DWORD *)(a2 + 128);
    v26 = *(_QWORD *)(a2 + 36);
    v27 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)buf = 134285827;
    v98 = v18;
    v99 = 2049;
    v100 = v19;
    v101 = 2050;
    v102 = v20;
    v103 = 2082;
    v104 = v21;
    v105 = 1026;
    v106 = v22;
    v107 = 2050;
    v108 = v23;
    v109 = 2050;
    v110 = v24;
    v111 = 1026;
    v112 = v25;
    v113 = 2050;
    v114 = v26;
    v115 = 2049;
    v116 = v27;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#loiOverride filtered location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf", buf, 0x5Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v57 = qword_1022A0178;
    v58 = *(_QWORD *)(a2 + 4);
    v59 = *(_QWORD *)(a2 + 12);
    v60 = *(_QWORD *)(a2 + 20);
    v61 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
    v62 = *(_DWORD *)(a2 + 84);
    v63 = *(_QWORD *)(a2 + 76);
    v64 = *(_QWORD *)(a2 + 88);
    v65 = *(_DWORD *)(a2 + 128);
    v66 = *(_QWORD *)(a2 + 36);
    v67 = *(_QWORD *)(a2 + 28);
    v77 = 134285827;
    v78 = v58;
    v79 = 2049;
    v80 = v59;
    v81 = 2050;
    v82 = v60;
    v83 = 2082;
    v84 = v61;
    v85 = 1026;
    v86 = v62;
    v87 = 2050;
    v88 = v63;
    v89 = 2050;
    v90 = v64;
    v91 = 1026;
    v92 = v65;
    v93 = 2050;
    v94 = v66;
    v95 = 2049;
    v96 = v67;
    LODWORD(v76) = 94;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v57, 2, "#loiOverride filtered location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf", &v77, v76);
    v69 = (uint8_t *)v68;
    sub_100512490("Generic", 1, 0, 2, "const CLDaemonLocation CLLoiLocationOverride::fuseLocations(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v68);
    if (v69 != buf)
      free(v69);
  }
  *(_DWORD *)a3 = 0xFFFF;
  *(_BYTE *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 4) = *(_OWORD *)(a1 + 4);
  v28 = *(_QWORD *)(a1 + 20);
  *(_QWORD *)(a3 + 20) = v28;
  *(_DWORD *)(a3 + 96) = 13;
  v29 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a3 + 84) = v29;
  v30 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  *(_DWORD *)(a3 + 128) = v30;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 44) = _Q0;
  *(_OWORD *)(a3 + 60) = _Q0;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  v36 = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a3 + 76) = v36;
  v37 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a3 + 88) = v37;
  *(_DWORD *)(a3 + 140) = *(_DWORD *)(a2 + 140);
  *(_OWORD *)(a3 + 100) = *(_OWORD *)(a1 + 4);
  *(_QWORD *)(a3 + 132) = *(_QWORD *)(a2 + 132);
  v38 = *(_QWORD *)(a2 + 36);
  *(_QWORD *)(a3 + 36) = v38;
  v39 = *(_QWORD *)(a2 + 28);
  *(_QWORD *)(a3 + 28) = v39;
  *(_QWORD *)(a3 + 144) = *(_QWORD *)(a2 + 144);
  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021613E8);
  v40 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
  {
    v41 = *(_QWORD *)(a3 + 4);
    v42 = *(_QWORD *)(a3 + 12);
    v43 = sub_10014D1E0(0xDu);
    *(_DWORD *)buf = 134285827;
    v98 = v41;
    v99 = 2049;
    v100 = v42;
    v101 = 2050;
    v102 = v28;
    v103 = 2082;
    v104 = v43;
    v105 = 1026;
    v106 = v29;
    v107 = 2050;
    v108 = v36;
    v109 = 2050;
    v110 = v37;
    v111 = 1026;
    v112 = v30;
    v113 = 2050;
    v114 = v38;
    v115 = 2049;
    v116 = v39;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#loiOverride Fused location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf", buf, 0x5Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v70 = qword_1022A0178;
    v71 = *(_QWORD *)(a3 + 4);
    v72 = *(_QWORD *)(a3 + 12);
    v73 = sub_10014D1E0(0xDu);
    v77 = 134285827;
    v78 = v71;
    v79 = 2049;
    v80 = v72;
    v81 = 2050;
    v82 = v28;
    v83 = 2082;
    v84 = v73;
    v85 = 1026;
    v86 = v29;
    v87 = 2050;
    v88 = v36;
    v89 = 2050;
    v90 = v37;
    v91 = 1026;
    v92 = v30;
    v93 = 2050;
    v94 = v38;
    v95 = 2049;
    v96 = v39;
    LODWORD(v76) = 94;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v70, 2, "#loiOverride Fused location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf", &v77, v76);
    v75 = (uint8_t *)v74;
    sub_100512490("Generic", 1, 0, 2, "const CLDaemonLocation CLLoiLocationOverride::fuseLocations(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v74);
    if (v75 != buf)
      free(v75);
  }
}

uint64_t sub_100989B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t result;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  double v29;

  v6 = hypot(*(long double *)(a2 + 20), *(long double *)(a3 + 20));
  v7 = sub_10011E634((double *)(a1 + 160), *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a3 + 4), *(double *)(a3 + 12), 0.0);
  *(double *)(a1 + 240) = v7;
  if (qword_1022A0170 != -1)
    dispatch_once(&qword_1022A0170, &stru_1021613E8);
  v8 = qword_1022A0178;
  if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    v27 = v6;
    v28 = 2050;
    v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#loiOverride totalUncertainty,%{public}.8lf,distanceBetweenLocations,%{public}.8lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v22 = 134349312;
    v23 = v6;
    v24 = 2050;
    v25 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride totalUncertainty,%{public}.8lf,distanceBetweenLocations,%{public}.8lf", &v22, 22);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (v7 >= v6)
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v11 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location is not sufficiently proximate, uncertainty bubbles don't touch.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021613E8);
      LOWORD(v22) = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride LOI location is not sufficiently proximate, uncertainty bubbles don't touch.", &v22, v21);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    result = 0;
    *(_DWORD *)(a1 + 268) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 268) = 1;
    if (v7 <= 50.0)
    {
      *(_DWORD *)(a1 + 264) = 1;
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021613E8);
      v12 = qword_1022A0178;
      if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location is sufficiently proximate.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0170 != -1)
          dispatch_once(&qword_1022A0170, &stru_1021613E8);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride LOI location is sufficiently proximate.", &v22, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      return 1;
    }
    else
    {
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021613E8);
      v9 = qword_1022A0178;
      if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location is not sufficiently proximate, does not meet distance threshold.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0170 != -1)
          dispatch_once(&qword_1022A0170, &stru_1021613E8);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride LOI location is not sufficiently proximate, does not meet distance threshold.", &v22, v21);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      result = 0;
      *(_DWORD *)(a1 + 264) = 0;
    }
  }
  return result;
}

__n128 sub_10098A124(uint64_t a1)
{
  __n128 result;

  *(_DWORD *)a1 = 0xFFFF;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 36) = result;
  *(__n128 *)(a1 + 52) = result;
  *(__n128 *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  return result;
}

void sub_10098A180(id a1)
{
  qword_1022A0178 = (uint64_t)os_log_create("com.apple.locationd.Position", "LoiPosition");
}

void sub_10098A1AC(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL4 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  __int128 v17;
  __int16 v18;
  std::string v19;
  uint8_t buf[8];
  std::__shared_weak_count *v21;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_DWORD *)(a1 + 128) = 1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 192) = _Q1;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = _Q1;
  *(_BYTE *)(a1 + 232) = 0;
  v17 = _Q1;
  *(_OWORD *)(a1 + 240) = _Q1;
  *(_BYTE *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_QWORD *)(a1 + 328) = 0x100000005;
  *(_QWORD *)(a1 + 336) = 0;
  sub_10055D44C(a1 + 344, "CLGnssOdometer", 1, 1);
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_BYTE *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 448) = 1;
  *(_BYTE *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 512) = v17;
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 544) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = v17;
  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_DWORD *)(a1 + 640) = 1065353216;
  *(_QWORD *)(a1 + 648) = 0x100000005;
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_WORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  *(_BYTE *)(a1 + 732) = 0;
  *(_DWORD *)(a1 + 736) = -1;
  *(_QWORD *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 756) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  memset(&v19, 0, sizeof(v19));
  sub_1001E4804(buf);
  v10 = sub_1000BCB64(*(uint64_t *)buf, "GPSOdometryType", &v19);
  v11 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    if (!std::string::compare(&v19, "SubSample"))
      operator new();
    if (!std::string::compare(&v19, "Smoother"))
      goto LABEL_19;
    if (!std::string::compare(&v19, "ModifiedSubsampler"))
      goto LABEL_26;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "GPSODOM,Invalid type for GPSOdometryType", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
    {
      if (!a3)
        goto LABEL_26;
LABEL_19:
      operator new();
    }
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v18 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GPSODOM,Invalid type for GPSOdometryType", &v18, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "CLGnssOdometer::CLGnssOdometer(id<CLIntersiloUniverse>, BOOL, RhythmicBatchedLocationCallback)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
    if ((a3 & 1) != 0)
      goto LABEL_19;
  }
  else if (a3 && (sub_1002416C0() & 1) != 0)
  {
    goto LABEL_19;
  }
LABEL_26:
  operator new();
}

void sub_10098B188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a21 < 0)
    operator delete(__p);
  v38 = v33[97];
  v33[97] = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  sub_100067A50((uint64_t)(v33 + 76));
  sub_10055D4D0(v36);
  sub_100067A50((uint64_t)(v33 + 36));
  sub_10098CC58(v35, 0);
  sub_1008599C4(v34, 0);
  v39 = v33[1];
  v33[1] = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *v33;
  *v33 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  _Unwind_Resume(a1);
}

void sub_10098B37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[24];

  sub_100270E34((uint64_t)v5, a3);
  sub_10098A1AC(a1, a2, 0);
}

void sub_10098B42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10098B46C(uint64_t a1, _DWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssOdometer::onStepCountNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102161428);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssOdometer::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102161428);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssOdometer::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10098BCF0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10098B624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10098B644(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssOdometer::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102161428);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssOdometer::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102161428);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssOdometer::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10098C60C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10098B7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10098B81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  char v9;
  _BOOL4 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  const char *v44;
  uint8_t *v45;
  __int16 v46;
  uint64_t v47;
  pthread_mutex_t *v48;
  __int16 v49;
  uint8_t buf[4];
  int v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  int v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  int v101;
  __int16 v102;
  _BOOL4 v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  int v111;

  v47 = a1 + 344;
  (*(void (**)(void))(*(_QWORD *)(a1 + 344) + 16))();
  v49 = 256;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = (_OWORD *)(a1 + 40);
    v8 = a1 + 360;
    v9 = *(_BYTE *)(a1 + 670);
    if (v9)
      v9 = *(_BYTE *)(a1 + 669) == 0;
    v10 = sub_10121AF28(v6, a2, a1 + 40, a3, (unint64_t *)(a1 + 768), *(unsigned __int8 *)(a1 + 664) != 0, a1 + 360, (int *)(a1 + 760), v9, a1 + 680);
    if (!v10)
      v8 = a2;
    v11 = *(_OWORD *)v8;
    v12 = *(_OWORD *)(v8 + 16);
    v13 = *(_OWORD *)(v8 + 48);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(a1 + 88) = v13;
    *v7 = v11;
    *(_OWORD *)(a1 + 56) = v12;
    v14 = *(_OWORD *)(v8 + 64);
    v15 = *(_OWORD *)(v8 + 80);
    v16 = *(_OWORD *)(v8 + 112);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(a1 + 152) = v16;
    *(_OWORD *)(a1 + 104) = v14;
    *(_OWORD *)(a1 + 120) = v15;
    v17 = *(_OWORD *)(v8 + 128);
    v18 = *(_OWORD *)(v8 + 144);
    v19 = *(_OWORD *)(v8 + 176);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 + 160);
    *(_OWORD *)(a1 + 216) = v19;
    *(_OWORD *)(a1 + 168) = v17;
    *(_OWORD *)(a1 + 184) = v18;
    v20 = *(_OWORD *)(v8 + 192);
    v21 = *(_OWORD *)(v8 + 208);
    v22 = *(_OWORD *)(v8 + 224);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(v8 + 240);
    *(_OWORD *)(a1 + 248) = v21;
    *(_OWORD *)(a1 + 264) = v22;
    *(_OWORD *)(a1 + 232) = v20;
    if (v7 != (_OWORD *)v8)
    {
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(v8 + 280);
      sub_100858F3C((_QWORD *)(a1 + 288), *(uint64_t **)(v8 + 264), 0);
    }
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v8 + 288);
    if (!*(_BYTE *)(a1 + 665))
      goto LABEL_14;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v23 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(_QWORD *)(a1 + 40);
      v25 = *(_QWORD *)(a1 + 48);
      v52 = 2082;
      v53 = "";
      v54 = 2082;
      v55 = "PerEpochData";
      v26 = *(_QWORD *)(a1 + 112);
      v27 = *(_QWORD *)(a1 + 120);
      v57 = v24;
      v59 = v25;
      v29 = *(_QWORD *)(a1 + 136);
      v28 = *(_QWORD *)(a1 + 144);
      v73 = v26;
      v75 = v27;
      v30 = *(_QWORD *)(a1 + 152);
      v31 = *(_QWORD *)(a1 + 160);
      v77 = v29;
      v32 = *(_QWORD *)(a1 + 168);
      v81 = v30;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 184);
      v83 = v31;
      v85 = v32;
      v33 = *(_QWORD *)(a1 + 192);
      v34 = *(_QWORD *)(a1 + 200);
      v89 = v30;
      v91 = v33;
      v35 = *(_QWORD *)(a1 + 216);
      v36 = *(_QWORD *)(a1 + 224);
      v93 = v34;
      LODWORD(v34) = *(_DWORD *)(a1 + 328);
      v97 = v35;
      v101 = v34;
      v37 = *(_QWORD *)(a2 + 232);
      v105 = *(_QWORD *)(a2 + 224);
      v38 = *(_QWORD *)(a1 + 64);
      v61 = *(_QWORD *)(a1 + 56);
      v39 = *(_QWORD *)(a1 + 72);
      v63 = v38;
      LODWORD(v38) = *(unsigned __int8 *)(a1 + 88);
      v65 = v39;
      v40 = *(_QWORD *)(a2 + 240);
      v67 = v38;
      v109 = v40;
      v41 = *(_QWORD *)(a1 + 104);
      v69 = *(_QWORD *)(a1 + 96);
      v71 = v41;
      v68 = 2049;
      v70 = 2049;
      v72 = 2049;
      v79 = v28;
      v87 = *(_DWORD *)(a1 + 180);
      v95 = *(unsigned __int8 *)(a1 + 208);
      v99 = v36;
      v103 = v10;
      v107 = v37;
      v56 = 2050;
      v58 = 2050;
      v60 = 2050;
      v62 = 2050;
      v64 = 2050;
      v74 = 2050;
      v76 = 2050;
      v78 = 2050;
      v80 = 2050;
      v82 = 2050;
      v84 = 2050;
      v90 = 2050;
      v92 = 2050;
      v96 = 2050;
      v98 = 2050;
      v104 = 2050;
      v106 = 2050;
      v108 = 2050;
      v66 = 1026;
      v86 = 1026;
      v88 = 1026;
      v94 = 1026;
      v100 = 1026;
      v102 = 1026;
      v110 = 1026;
      v111 = *(unsigned __int8 *)(a2 + 216);
      *(_DWORD *)buf = 68296451;
      v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GPSODOM\", \"event\":%{public, location:escape_only}s, \"gpsNs\":%{public}lld, \"cfTime\":\"%{public}f\", \"cfTimeGps\":\"%{public}f\", \"machTime\":\"%{public}f\", \"machContinuousTime\":\"%{public}f\", \"posValid\":%{public}hhd, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"altitude\":\"%{private}f\", \"undulation\":\"%{public}f\", \"hunc\":\"%{public}f\", \"vunc\":\"%{public}f\", \"semiMaj\":\"%{public}f\", \"semiMin\":\"%{public}f\", \"semiMajAz\":\"%{public}f\", \"reliability\":%{public}d, \"speedValid\":%{public}hhd, \"speed\":\"%{public}f\", \"speedUnc\":\"%{public}f\", \"courseValid\":%{public}hhd, \"course\":\"%{public}f\", \"courseUnc\":\"%{public}f\", \"gnssContent\":%{public}d, \"ravenPosUsed\":%{public}hhd, \"odometry\":\"%{public}f\", \"deltaDist\":\"%{public}f\", \"deltaDistUnc\":\"%{public}f\", \"odometryValid\":%{public}hhd}", buf, 0x118u);
      v42 = HIBYTE(v49);
      *(_BYTE *)(a1 + 664) = 0;
      if (!v42)
        return;
    }
    else
    {
LABEL_14:
      *(_BYTE *)(a1 + 664) = 0;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "GPSODOM,no odometer interface object", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102161408);
      v46 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,no odometer interface object", &v46, 2);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssOdometer::updateOdometer(GNSS::PerEpochData &, const CLMotionActivity &)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
  }
  if ((_BYTE)v49)
    pthread_mutex_unlock(v48);
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
}

void sub_10098BCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10098BCF0(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  if (*a3 == 4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a4;
      v8 = a4[1];
      v9 = a4[2];
      *(_DWORD *)buf = 134349569;
      v24 = v7;
      v25 = 2049;
      v26 = v8;
      v27 = 2049;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "GPSODOM,PATHSTR,timeStamp,%{public}.3lf,straightnessMetric,%{private}.3lf,confidence,%{private}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102161408);
      v12 = *a4;
      v13 = a4[1];
      v14 = a4[2];
      v17 = 134349569;
      v18 = v12;
      v19 = 2049;
      v20 = v13;
      v21 = 2049;
      v22 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,PATHSTR,timeStamp,%{public}.3lf,straightnessMetric,%{private}.3lf,confidence,%{private}.3lf", &v17, 32);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::onStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v10 = *(unsigned __int8 *)(a1 + 712);
    v11 = *((_OWORD *)a4 + 1);
    *(_OWORD *)(a1 + 680) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 696) = v11;
    if (!v10)
      *(_BYTE *)(a1 + 712) = 1;
  }
}

_QWORD *sub_10098BEFC(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (!*((_BYTE *)result + 720))
  {
    v1 = result;
    if (result[1])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102161408);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,registering path straightness metric", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102161408);
        v5[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,registering path straightness metric", v5, 2);
        v4 = (uint8_t *)v3;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::registerPathStraightnessNotifications()", "%s\n", v3);
        if (v4 != buf)
          free(v4);
      }
      result = objc_msgSend(*(id *)(v1[1] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1[1] + 8), 4, 0);
      *((_BYTE *)v1 + 720) = 1;
    }
  }
  return result;
}

_QWORD *sub_10098C0B8(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*((_BYTE *)result + 720))
  {
    v1 = result;
    if (result[1])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102161408);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,unregistering path straightness metric", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102161408);
        v5[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,unregistering path straightness metric", v5, 2);
        v4 = (uint8_t *)v3;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::unregisterPathStraightnessNotifications()", "%s\n", v3);
        if (v4 != buf)
          free(v4);
      }
      result = objc_msgSend(*(id *)(v1[1] + 16), "unregister:forNotification:", *(_QWORD *)(v1[1] + 8), 4);
      *((_BYTE *)v1 + 720) = 0;
    }
  }
  return result;
}

void sub_10098C26C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102161408);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "GPSODOM,instantiating fAssistanceMotion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,instantiating fAssistanceMotion", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::handleAssistanceMotion(GNSS::Context)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_10098C3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
    return;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 == 15)
  {
    v4 = 0;
    goto LABEL_6;
  }
  if (v3 == 13)
  {
    v4 = *(_QWORD *)(a2 + 112);
LABEL_6:
    *(_QWORD *)(a1 + 768) = v4;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102161408);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 768);
    *(_DWORD *)buf = 134217984;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GPSODOM,CMWorkoutType %ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v11 = *(_QWORD *)(a1 + 768);
    v14 = 134217984;
    v15 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM,CMWorkoutType %ld", &v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::handleCMWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v7 = *(_QWORD *)(a1 + 768);
  v9 = v7 == 15 || v7 == 17;
  *(_BYTE *)(a1 + 673) = v9;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    sub_10121C208(v10, *(unsigned __int8 *)(a1 + 669), *(unsigned __int8 *)(a1 + 666), *(unsigned __int8 *)(a1 + 670), *(unsigned __int8 *)(a1 + 667), *(unsigned __int8 *)(a1 + 671), *(unsigned __int8 *)(a1 + 668), *(unsigned __int8 *)(a1 + 672), v9);
}

void sub_10098C60C(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  NSObject *v5;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (*a3 == 15)
  {
    *(_BYTE *)(a1 + 672) = *a4;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int8 *)(a1 + 672);
      *(_DWORD *)buf = 67109120;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GPSODOM,Low Power Mode = %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102161408);
      v8 = *(unsigned __int8 *)(a1 + 672);
      v11[0] = 67109120;
      v11[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM,Low Power Mode = %d", v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      sub_10121C208(v7, *(unsigned __int8 *)(a1 + 669), *(unsigned __int8 *)(a1 + 666), *(unsigned __int8 *)(a1 + 670), *(unsigned __int8 *)(a1 + 667), *(unsigned __int8 *)(a1 + 671), *(unsigned __int8 *)(a1 + 668), *(unsigned __int8 *)(a1 + 672), *(_BYTE *)(a1 + 673));
  }
}

uint64_t sub_10098C800(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return sub_10121CAF8(result, a2);
  return result;
}

uint64_t sub_10098C810(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  _BYTE v13[32];
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  unint64_t v17;
  _BYTE v18[32];
  __int128 v19;
  _BYTE v20[32];
  _OWORD v21[2];
  uint64_t v22;
  int v23;
  __int128 v24;

  v3 = *(double *)(a2 + 184);
  *(_QWORD *)&v11 = (unint64_t)(v3 * 1000000000.0);
  *((_QWORD *)&v11 + 1) = *(_QWORD *)(a2 + 76);
  v12 = *(unint64_t *)&v3;
  v13[0] = 1;
  *(_OWORD *)&v13[8] = *(_OWORD *)(a2 + 4);
  *(double *)&v13[24] = *(double *)(a2 + 28) + *(float *)(a2 + 476);
  *(double *)&v14 = *(float *)(a2 + 476);
  DWORD2(v14) = *(_DWORD *)(a2 + 472);
  *(_QWORD *)&v15 = *(_QWORD *)(a2 + 20);
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(a2 + 36);
  v16 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 200));
  *(double *)&v17 = *(float *)(a2 + 208);
  v18[0] = 1;
  *(_OWORD *)&v18[8] = *(_OWORD *)(a2 + 44);
  v18[24] = 1;
  v19 = *(_OWORD *)(a2 + 60);
  v20[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v20[8] = _Q0;
  v20[24] = 0;
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v23 = 1065353216;
  v24 = 0x100000005uLL;
  v9 = a1 + 360;
  *(_OWORD *)(a1 + 552) = *(_OWORD *)v20;
  *(_OWORD *)(a1 + 568) = *(_OWORD *)&v20[16];
  *(_OWORD *)(a1 + 520) = *(_OWORD *)&v18[16];
  *(_OWORD *)(a1 + 536) = v19;
  *(_OWORD *)(a1 + 488) = v17;
  *(_OWORD *)(a1 + 504) = *(_OWORD *)v18;
  *(_OWORD *)(a1 + 360) = v11;
  *(_OWORD *)(a1 + 376) = v12;
  *(_OWORD *)(a1 + 392) = 0uLL;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)&v13[16];
  *(_OWORD *)(a1 + 440) = v14;
  *(_OWORD *)(a1 + 456) = v15;
  *(float64x2_t *)(a1 + 472) = v16;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)&v21[0];
  *(_OWORD *)(a1 + 584) = 0u;
  sub_10020B514(a1 + 608, (uint64_t *)v21 + 1);
  *(_OWORD *)(v9 + 288) = v24;
  result = sub_100067A50((uint64_t)v21 + 8);
  *(_BYTE *)(a1 + 664) = 1;
  return result;
}

uint64_t *sub_10098C984(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a1)
    objc_msgSend(*(id *)(*a1 + 16), "unregister:forNotification:", *(_QWORD *)(*a1 + 8), 41);
  v2 = a1[97];
  if (v2
    && (objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 15),
        v3 = a1[97],
        a1[97] = 0,
        v3))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = a1[97];
    a1[97] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    a1[97] = 0;
  }
  sub_100067A50((uint64_t)(a1 + 76));
  sub_10055D4D0(a1 + 43);
  sub_100067A50((uint64_t)(a1 + 36));
  sub_10098CC58(a1 + 4, 0);
  sub_1008599C4(a1 + 2, 0);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *a1;
  *a1 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_10098CA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    sub_10121CB08(v2, a2);
}

void sub_10098CA7C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102161408);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "GPSODOM,rhythmicGnssRegisteredClientStateChanged", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM,rhythmicGnssRegisteredClientStateChanged", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::rhythmicGnssRegisteredClientStateChanged(const BOOL, const CLRhythmicGnssWakeMode, const uint32_t)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_10098CC00(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10098CC2C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10098CC58(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10098CC94(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10098CC94(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100067A50(a1 + 568);
  v2 = *(_QWORD **)(a1 + 304);
  if (v2 == (_QWORD *)(a1 + 280))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 280);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_100008848(a1 + 240, *(_QWORD **)(a1 + 248));
  v4 = *(void **)(a1 + 216);
  if (v4)
  {
    *(_QWORD *)(a1 + 224) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 192);
  if (v5)
  {
    *(_QWORD *)(a1 + 200) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6)
    sub_10098CD60(a1 + 32, v6);
  sub_10098CDC0((uint64_t *)(a1 + 24), 0);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    sub_10098CDFC(a1 + 16, v7);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    sub_10098CE44(a1 + 8, v8);
  return a1;
}

void sub_10098CD60(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1006CEFD4((_QWORD *)(a2 + 1648));
    *(_QWORD *)a2 = off_102155C20;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    operator delete();
  }
}

uint64_t sub_10098CDC0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1017C3238();
    operator delete();
  }
  return result;
}

void sub_10098CDFC(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 104);
    if (v2)
    {
      *(_QWORD *)(a2 + 112) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_10098CE44(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 104);
    if (v2)
    {
      *(_QWORD *)(a2 + 112) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_10098CE90()
{
  operator delete();
}

_QWORD *sub_10098CEA4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102161458;
  result[1] = v3;
  return result;
}

uint64_t sub_10098CED8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102161458;
  a2[1] = v2;
  return result;
}

uint64_t sub_10098CEF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10098CF34()
{
}

void sub_10098CF44()
{
  operator delete();
}

_QWORD *sub_10098CF58(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021614D8;
  result[1] = v3;
  return result;
}

uint64_t sub_10098CF8C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021614D8;
  a2[1] = v2;
  return result;
}

void sub_10098CFA8(uint64_t a1, uint64_t a2)
{
  sub_10098C3F0(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10098CFB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10098CFEC()
{
}

void sub_10098CFF8()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BE9320;
      v1[3] = unk_101BE9330;
      v1[4] = xmmword_101BE9340;
      v1[0] = xmmword_101BE9300;
      v1[1] = unk_101BE9310;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10098D0CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10098D0E4()
{
  sub_1015A2E04(qword_102305B08, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305B08, (void *)&_mh_execute_header);
}

unint64_t sub_10098D12C(uint64_t a1, void *a2, unsigned int a3)
{
  CFAbsoluteTime Current;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  id v20;
  char *v21;
  char *i;
  __int128 v23;
  CLElevationGradeData *v24;
  char *v25;
  const char *v27;
  char *v28;
  double v29;
  double v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  double v35;
  __int16 v36;
  CFAbsoluteTime v37;
  _BYTE buf[1632];

  v31 = 0;
  v32 = 0;
  v33 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v30 = 0.0;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  sub_1001FD98C(*(uint64_t *)buf, "ElevationGradeRecordId", &v30);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v30 <= 0.0)
  {
    v17 = sub_1001FD94C();
    sub_1001FD98C(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampElevationGrade", &v30);
  }
  else
  {
    v11 = sub_1001FD94C();
    sub_10018A4CC(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampElevationGrade", &v30);
    v12 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 944))(v12);
    v13 = sub_100127B9C();
    sub_100081C10(v13, buf);
    sub_100525484(*(uint64_t *)buf, "ElevationGradeRecordId", 0xFFFFFFFFLL);
    v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (sub_100E6AE10(a1, a3 / 0x18uLL, &v31) != 100)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102161548);
    v18 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v30;
      *(_WORD *)&buf[12] = 2048;
      *(CFAbsoluteTime *)&buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLElevationGradeCompanionSyncManager: Failed to fetch database results for time range, startTime: %f, endTime: %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161548);
      v34 = 134218240;
      v35 = v30;
      v36 = 2048;
      v37 = Current;
      LODWORD(v29) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "CLElevationGradeCompanionSyncManager: Failed to fetch database results for time range, startTime: %f, endTime: %f", COERCE_DOUBLE(&v34), v29);
      v28 = (char *)v27;
      sub_100512490("Generic", 1, 0, 0, "size_t CLElevationGradeCompanionSyncManager::queryLatestRecords(NSMutableDictionary *, uint32_t)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
  *(_QWORD *)(a1 + 360) = 0xBFF0000000000000;
  v19 = v31;
  if (v31 == v32)
  {
    v25 = v31;
    if (!v31)
      return 0xAAAAAAAAAAAAAAABLL * ((v19 - v25) >> 3);
    goto LABEL_23;
  }
  *(_QWORD *)(a1 + 360) = *((_QWORD *)v32 - 2);
  v20 = +[NSMutableArray array](NSMutableArray, "array");
  v21 = v31;
  for (i = v32; v21 != i; v21 += 24)
  {
    v23 = *(_OWORD *)v21;
    *(_QWORD *)&buf[16] = *((_QWORD *)v21 + 2);
    *(_OWORD *)buf = v23;
    v24 = -[CLElevationGradeData initWithElevationGradeEntry:]([CLElevationGradeData alloc], "initWithElevationGradeEntry:", buf);
    objc_msgSend(v20, "addObject:", v24);

  }
  objc_msgSend(a2, "setObject:forKey:", v20, CFSTR("ElevationGradeKey"));
  v25 = v31;
  v19 = v32;
  if (v31)
  {
LABEL_23:
    v32 = v25;
    operator delete(v25);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v19 - v25) >> 3);
}

void sub_10098D510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10098D558(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  if (*(double *)(result + 360) > 0.0)
  {
    v1 = result;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102161548);
    v2 = (uint64_t *)(v1 + 360);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v4 = *v2;
      *(_DWORD *)buf = 134217984;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161548);
      v7 = *v2;
      v10 = 134217984;
      v11 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Saving last Cold Storage sync timestamp: %f", COERCE_DOUBLE(&v10));
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLElevationGradeCompanionSyncManager::saveCurrentSyncProgress()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v5 = sub_1001FD94C();
    sub_10018A4CC(v5, "CMHealthColdStorageWatchServiceLastSyncTimestampElevationGrade", v2);
    v6 = sub_1001FD94C();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 944))(v6);
  }
  return result;
}

void sub_10098D73C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10098D768(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_102161578;
  v5[7] = 0;
  v5[8] = 0;
  v5[9] = 0;
  sub_1011D4D78();
}

void sub_10098D824(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100261F44(v2);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_10098D85C(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNatalimetrySubscription::onNatalimetryUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102161600);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetrySubscription::onNatalimetryUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102161600);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetrySubscription::onNatalimetryUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10098FB6C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10098DA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10098DA38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_102161578;

  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_100261F44(a1 + 56);
  return sub_10002FA68(a1);
}

void sub_10098DAAC(uint64_t a1)
{
  sub_10098DA38(a1);
  operator delete();
}

_QWORD *sub_10098DAD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t (**v33)();
  _QWORD v34[2];
  uint64_t (***v35)();
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;

  v36[0] = off_102161670;
  v36[1] = sub_10098E11C;
  v36[2] = 0;
  v37 = v36;
  sub_1015A2E04(v38, "kCLConnectionMessageNatalimetryUpdate");
  sub_100990B44((uint64_t)&v39, (uint64_t)v36);
  v33 = off_102161720;
  v34[0] = sub_10098E3F4;
  v34[1] = 0;
  v35 = &v33;
  sub_1015A2E04(v40, "kCLConnectionMessageNatalimetryAvailable");
  sub_100990B44((uint64_t)&v41, (uint64_t)&v33);
  v31[0] = off_102161720;
  v31[1] = sub_10098E4F4;
  v31[2] = 0;
  v32 = v31;
  sub_1015A2E04(v42, "kCLConnectionMessageNatalimetryQuery");
  sub_100990B44((uint64_t)&v43, (uint64_t)v31);
  v29[0] = off_102161720;
  v29[1] = sub_10098EC6C;
  v29[2] = 0;
  v30 = v29;
  sub_1015A2E04(v44, "kCLConnectionMessageNatalimetryGetUserProfile");
  sub_100990B44((uint64_t)&v45, (uint64_t)v29);
  v27[0] = off_102161720;
  v27[1] = sub_10098EF3C;
  v27[2] = 0;
  v28 = v27;
  sub_1015A2E04(v46, "kCLConnectionMessageNatalimetrySetUserProfile");
  sub_100990B44((uint64_t)&v47, (uint64_t)v27);
  v25[0] = off_102161720;
  v25[1] = sub_10098F200;
  v25[2] = 0;
  v26 = v25;
  sub_1015A2E04(v48, "kCLConnectionMessageNatalimetryCalibrationPromptsNeeded");
  sub_100990B44((uint64_t)&v49, (uint64_t)v25);
  v23[0] = off_102161720;
  v23[1] = sub_10098F4E4;
  v23[2] = 0;
  v24 = v23;
  sub_1015A2E04(v50, "kCLConnectionMessageNatalimetryResetCalibration");
  sub_100990B44((uint64_t)&v51, (uint64_t)v23);
  v21[0] = off_102161720;
  v21[1] = sub_10098F764;
  v21[2] = 0;
  v22 = v21;
  sub_1015A2E04(v52, "kCLConnectionMessageWorkoutMetsQuery");
  sub_100990B44((uint64_t)&v53, (uint64_t)v21);
  sub_100991104(a1, (unsigned __int8 *)v38, 8);
  v2 = 56;
  do
  {
    v3 = (_QWORD *)v38[v2 - 1];
    if (&v36[v2] == v3)
    {
      v3 = &v36[v2];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v35)[v2]) < 0)
      operator delete((void *)v34[v2]);
    v2 -= 7;
  }
  while (v2 * 8);
  v5 = v22;
  if (v22 == v21)
  {
    v6 = 4;
    v5 = v21;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v22)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v24;
  if (v24 == v23)
  {
    v8 = 4;
    v7 = v23;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v24)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v26;
  if (v26 == v25)
  {
    v10 = 4;
    v9 = v25;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v26)
  {
    v10 = 5;
    goto LABEL_24;
  }
  v11 = v28;
  if (v28 == v27)
  {
    v12 = 4;
    v11 = v27;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  else if (v28)
  {
    v12 = 5;
    goto LABEL_29;
  }
  v13 = v30;
  if (v30 == v29)
  {
    v14 = 4;
    v13 = v29;
LABEL_34:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  else if (v30)
  {
    v14 = 5;
    goto LABEL_34;
  }
  v15 = v32;
  if (v32 == v31)
  {
    v16 = 4;
    v15 = v31;
LABEL_39:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  else if (v32)
  {
    v16 = 5;
    goto LABEL_39;
  }
  v17 = v35;
  if (v35 == &v33)
  {
    v18 = 4;
    v17 = &v33;
LABEL_44:
    (*v17)[v18]();
  }
  else if (v35)
  {
    v18 = 5;
    goto LABEL_44;
  }
  result = v37;
  if (v37 == v36)
  {
    v20 = 4;
    result = v36;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
  }
  else if (v37)
  {
    v20 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
  }
  return result;
}

void sub_10098DEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,char *a29,char a30,uint64_t a31,uint64_t a32,char *a33,char a34,uint64_t a35,uint64_t a36,char *a37,char a38,uint64_t a39,uint64_t a40,char *a41)
{
  uint64_t v41;
  uint64_t i;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;

  for (i = 392; i != -56; i -= 56)
    sub_1004E21A4(v41 + i);
  v44 = a13;
  if (a13 == &a10)
  {
    v45 = 4;
    v44 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_8:
  v46 = a17;
  if (a17 == &a14)
  {
    v47 = 4;
    v46 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_13:
  v48 = a21;
  if (a21 == &a18)
  {
    v49 = 4;
    v48 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_18;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_18:
  v50 = a25;
  if (a25 == &a22)
  {
    v51 = 4;
    v50 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_23;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_23:
  v52 = a29;
  if (a29 == &a26)
  {
    v53 = 4;
    v52 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_28;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_28:
  v54 = a33;
  if (a33 == &a30)
  {
    v55 = 4;
    v54 = &a30;
  }
  else
  {
    if (!a33)
      goto LABEL_33;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_33:
  v56 = a37;
  if (a37 == &a34)
  {
    v57 = 4;
    v56 = &a34;
  }
  else
  {
    if (!a37)
      goto LABEL_38;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_38:
  v58 = a41;
  if (a41 == &a38)
  {
    v59 = 4;
    v58 = &a38;
  }
  else
  {
    if (!a41)
      goto LABEL_43;
    v59 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v58 + 8 * v59))();
LABEL_43:
  _Unwind_Resume(a1);
}

void sub_10098E0F4()
{
  JUMPOUT(0x10098E034);
}

void sub_10098E100()
{
  JUMPOUT(0x10098E064);
}

void sub_10098E10C()
{
  JUMPOUT(0x10098E094);
}

void sub_10098E11C(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  NSNumber *v14;
  int v15[2];
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[8];
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102161640);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = a2;
    v21 = 2112;
    v22 = v6;
    v23 = 2048;
    v24 = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calorie subscription changed, %d, %@, %p", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102161640);
    v10 = *(_QWORD *)(a1 + 24);
    v15[0] = 67109634;
    v15[1] = a2;
    v16 = 2112;
    v17 = v10;
    v18 = 2048;
    v19 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "Calorie subscription changed, %d, %@, %p", v15, 28);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleRequestNatalimetryUpdate(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v15[0] = 0;
  if ((sub_100990224(a1, v15) & 1) != 0)
  {
    sub_1001A638C(a1);
    v7 = *(_QWORD *)(a1 + 72);
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(void **)(v7 + 16);
    if (a2)
      objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 0, 0);
    else
      objc_msgSend(v8, "unregister:forNotification:", v9, 0);
  }
  else
  {
    v13 = CMErrorMessage;
    v14 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15[0]);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
    sub_100990280(a1, buf);
  }

}

void sub_10098E3B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10098E3F4(uint64_t a1, _QWORD *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSNumber *v7;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v6 = CMAvailable;
  if (sub_100990320(a1))
    v5 = sub_1011C589C(*(_QWORD *)(a1 + 8));
  else
    v5 = 0;
  v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
  CLConnectionMessage::sendReply(*a2);

}

void sub_10098E4CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_10098E4F4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  void *Dictionary;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  CLConnectionMessage *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  int *v26;
  int *v27;
  id v28;
  id v29;
  NSObject *v30;
  CLConnectionMessage *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  id v36;
  void *__p;
  int *v38;
  uint64_t v39;
  id v40[2];
  unsigned int v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  NSNumber *v45;
  _DWORD v46[4];
  unsigned int v47;
  id v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _UNKNOWN **v55;
  uint8_t buf[4];
  int v57;
  uint64_t v58;
  NSNumber *v59;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v41 = 0;
  v5 = sub_100990224(a1, (int *)&v41);
  v6 = *a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    v8 = Dictionary;
    if (Dictionary
      && (v9 = CMNatalimetryRecordId, objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMNatalimetryRecordId)))
    {
      sub_100131938(v40, (uint64_t)"CLDaemonClient.NatalimetryQuery", 0);
      __p = 0;
      v38 = 0;
      v39 = 0;
      v47 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v9), "integerValue");
      v10 = CMNatalimetryNatalieDataStartDate;
      if (objc_msgSend(v8, "objectForKeyedSubscript:", CMNatalimetryNatalieDataStartDate))
        objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v10), "doubleValue");
      else
        v11 = 0;
      v49 = v11;
      v14 = CMNatalimetrySessionId;
      if (objc_msgSend(v8, "objectForKeyedSubscript:", CMNatalimetrySessionId))
        v15 = +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:](CMWorkout, "CLMotionActivityTypeFromCMWorkoutType:", objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v14), "integerValue"));
      else
        v15 = 2;
      v50 = v15;
      v16 = CMNatalimetryNatalieDataMets;
      if (objc_msgSend(v8, "objectForKeyedSubscript:", CMNatalimetryNatalieDataMets))
        objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v16), "doubleValue");
      else
        v17 = 0;
      v51 = v17;
      v18 = CMNatalimetryNatalieDataBasalNatalies;
      if (objc_msgSend(v8, "objectForKeyedSubscript:", CMNatalimetryNatalieDataBasalNatalies))
        objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v18), "doubleValue");
      else
        v19 = 0.0;
      v53 = (uint64_t)v19;
      v20 = CMNatalimetryNatalieDataNatalies;
      if (objc_msgSend(v8, "objectForKeyedSubscript:", CMNatalimetryNatalieDataNatalies))
        objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", v20), "doubleValue");
      else
        v21 = 0.0;
      v52 = (uint64_t)v21;
      v22 = CMNatalimetryNatalieDataSourceId;
      v23 = objc_msgSend(v8, "objectForKeyedSubscript:", CMNatalimetryNatalieDataSourceId);
      if (v23)
        v23 = objc_msgSend(v8, "objectForKeyedSubscript:", v22);
      v48 = v23;
      v24 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "syncgetQueryNatalieDataSince:records:", &v47, &__p);
      v41 = v24;
      if ((_DWORD)v24 == 100)
      {
        v36 = v4;
        v25 = objc_alloc_init((Class)NSMutableArray);
        v26 = (int *)__p;
        v27 = v38;
        if (__p != v38)
        {
          do
          {
            if (*((_QWORD *)v26 + 1))
              v28 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *((_QWORD *)v26 + 1));
            else
              v28 = 0;
            v29 = objc_msgSend(objc_alloc((Class)CMNatalieData), "initWithStartDate:recordId:activityType:mets:natalies:basalNatalies:sourceId:", *v26, +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", v26[6]), v28, *((double *)v26 + 2), *((double *)v26 + 4), (double)*((uint64_t *)v26 + 6), (double)*((uint64_t *)v26 + 7));
            objc_msgSend(v25, "addObject:", v29);

            v26 += 22;
          }
          while (v26 != v27);
        }
        v42 = CMNatalimetryNatalieDataArray;
        v43 = v25;
        v4 = v36;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1);

        CLConnectionMessage::sendReply(*a2);
      }
      else
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102161620);
        v30 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          v57 = (int)v24;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Error querying calorie data, %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_102161620);
          v46[0] = 67240192;
          v46[1] = (_DWORD)v24;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Error querying calorie data, %{public}d", v46, 8);
          v35 = (uint8_t *)v34;
          sub_100512490("Generic", 1, 0, 0, "void CLNatalimetrySubscription::handleMessageNatalimetryQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
        v31 = *a2;
        v44 = CMErrorMessage;
        v45 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v24);
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1);
        CLConnectionMessage::sendReply(v31);
      }
      if (__p)
      {
        v38 = (int *)__p;
        operator delete(__p);
      }
      sub_100131740(v40);
    }
    else
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v12 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Error in query request.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102161620);
        LOWORD(v47) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "Error in query request.", &v47, 2);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 0, "void CLNatalimetrySubscription::handleMessageNatalimetryQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v13 = *a2;
      v54 = CMErrorMessage;
      v55 = &off_10221B978;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1);
      CLConnectionMessage::sendReply(v13);
    }
  }
  else
  {
    v58 = CMErrorMessage;
    v59 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v41);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v59, &v58, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_10098EBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, id a16)
{
  if (__p)
    operator delete(__p);
  sub_100131740(&a16);

  _Unwind_Resume(a1);
}

void sub_10098EC6C(uint64_t a1, _QWORD *a2)
{
  id v4;
  NSMutableDictionary *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  NSMutableDictionary *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  NSMutableDictionary *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  _UNKNOWN **v25;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 5);
  if ((sub_10099054C(a1) & 1) != 0)
  {
    -[NSMutableDictionary addEntriesFromDictionary:](v5, "addEntriesFromDictionary:", objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "syncgetUserProfile"));
    sub_100197040();
    if (sub_10075D288())
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v6 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 138412802;
        v19 = v5;
        v20 = 2112;
        v21 = v7;
        v22 = 2048;
        v23 = a1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Getting user profile, %@, %@, %p", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102161620);
        v9 = *(_QWORD *)(a1 + 24);
        v12 = 138412802;
        v13 = v5;
        v14 = 2112;
        v15 = v9;
        v16 = 2048;
        v17 = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Getting user profile, %@, %@, %p", &v12, 32);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleMessageNatalimetryGetUserProfile(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    CLConnectionMessage::sendReply(*a2);
  }
  else
  {
    v8 = *a2;
    v24 = CMErrorMessage;
    v25 = &off_10221B990;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
    CLConnectionMessage::sendReply(v8);
  }

}

void sub_10098EF0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10098EF3C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  uint64_t Dictionary;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  _UNKNOWN **v26;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = sub_10099054C(a1);
  v6 = *a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = CLConnectionMessage::getDictionary(*a2);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "setUserProfileFromCMNatalimeter:", Dictionary);
    sub_100197040();
    if (sub_10075D288())
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v8 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 138478339;
        v20 = Dictionary;
        v21 = 2112;
        v22 = v9;
        v23 = 2048;
        v24 = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting user profile, %{private}@, %@, %p", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102161620);
        v10 = *(_QWORD *)(a1 + 24);
        v13 = 138478339;
        v14 = Dictionary;
        v15 = 2112;
        v16 = v10;
        v17 = 2048;
        v18 = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Setting user profile, %{private}@, %@, %p", &v13, 32);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleMessageNatalimetrySetUserProfile(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    CLConnectionMessage::sendReply(*a2);
  }
  else
  {
    v25 = CMErrorMessage;
    v26 = &off_10221B990;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_10098F1D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10098F200(uint64_t a1, uint64_t *a2)
{
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSNumber *v14;
  _DWORD v15[2];
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  _UNKNOWN **v23;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100990320(a1) & 1) != 0)
  {
    sub_100197040();
    if (sub_100195F08() && !sub_100FFB2DC(a1))
    {
      v6 = 0;
      v5 = 0;
    }
    else
    {
      v5 = sub_100990044(a1) ^ 1;
      v6 = 1;
    }
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102161620);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      v19 = v6;
      v20 = 2048;
      v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Calibration prompt, isConnectedToCompanion: %d, promptsNeeded: %ld.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v15[0] = 67109376;
      v15[1] = v6;
      v16 = 2048;
      v17 = v5;
      LODWORD(v12) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Calibration prompt, isConnectedToCompanion: %d, promptsNeeded: %ld.", v15, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleMessageNatalimetryCalibrationPromptsNeeded(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v9 = *a2;
    v13 = CMReturnCode;
    v14 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
    CLConnectionMessage::sendReply(v9);
  }
  else
  {
    v7 = *a2;
    v22 = CMErrorMessage;
    v23 = &off_10221B990;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
    CLConnectionMessage::sendReply(v7);
  }

}

void sub_10098F4B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10098F4E4(uint64_t a1, uint64_t *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint64_t v10;
  void *v11;
  uint8_t buf[1640];
  uint64_t v13;
  _UNKNOWN **v14;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100990320(a1) & 1) != 0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102161620);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Resetting calibration.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Resetting calibration.", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleMessageNatalimetryResetCalibration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLMotionSyncStore")), "resetStoredCalibrations");
    v6 = *a2;
    v10 = CMReturnCode;
    v11 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
  }
  else
  {
    v6 = *a2;
    v13 = CMErrorMessage;
    v14 = &off_10221B990;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
  }
  CLConnectionMessage::sendReply(v6);

}

void sub_10098F738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10098F764(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  uint64_t v10;
  void *v11;
  id v12;
  std::__shared_weak_count *v13;
  CLConnectionMessage *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CLConnectionMessage *v20;
  NSObject *v21;
  CLConnectionMessage *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  __int16 v28[8];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _UNKNOWN **v34;
  id buf[205];
  uint64_t v36;
  NSNumber *v37;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  if ((sub_100990224(a1, &v32) & 1) != 0)
  {
    v6 = objc_opt_class(NSUUID, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v8);
    v10 = CMWorkoutSessionIdKey;
    if (objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMWorkoutSessionIdKey))
    {
      sub_100131938(buf, (uint64_t)"CLDaemonClient.WorkoutMetsQueryForSessionId", 0);
      v11 = *(void **)(*(_QWORD *)(a1 + 72) + 16);
      v12 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", v10);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_100990760;
      v26[3] = &unk_1021615A0;
      v14 = *(CLConnectionMessage **)a2;
      v13 = *(std::__shared_weak_count **)(a2 + 8);
      v26[4] = &v29;
      v26[5] = v14;
      v27 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      objc_msgSend(v11, "queryWorkoutMets:withReply:", v12, v26);
      v17 = v27;
      if (v27)
      {
        v18 = (unint64_t *)&v27->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      sub_100131740(buf);
    }
    else
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v21 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "WorkoutMets,query,empty request", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102161620);
        v28[0] = 0;
        LODWORD(v25) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "WorkoutMets,query,empty request", v28, v25);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 0, "void CLNatalimetrySubscription::handleQueryWorkoutMetsForSessionId(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
        if (v24 != (uint8_t *)buf)
          free(v24);
      }
      v22 = *(CLConnectionMessage **)a2;
      v33 = CMErrorMessage;
      v34 = &off_10221B978;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
      CLConnectionMessage::sendReply(v22);
    }
  }
  else
  {
    v20 = *(CLConnectionMessage **)a2;
    v36 = CMErrorMessage;
    v37 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v30 + 6));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    CLConnectionMessage::sendReply(v20);
  }
  _Block_object_dispose(&v29, 8);

}

void sub_10098FB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_10098FB6C(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  id v20;
  int v21;
  id v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  if (!*a3)
  {
    if (*((_QWORD *)a4 + 1)
      && (v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *((_QWORD *)a4 + 1))) != 0)
    {
      v7 = v6;
      v8 = objc_msgSend(objc_alloc((Class)CMNatalieData), "initWithStartDate:recordId:activityType:mets:natalies:basalNatalies:sourceId:", *(int *)a4, +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", *((unsigned int *)a4 + 6)), v6, a4[2], a4[4], (double)*((uint64_t *)a4 + 6), (double)*((uint64_t *)a4 + 7));
      sub_100197040();
      if (sub_10075D288())
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102161620);
        v9 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
        {
          v10 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v8;
          v28 = 2112;
          v29 = v10;
          v30 = 2048;
          v31 = a1;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%@, %@, %p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_102161620);
          v16 = *(_QWORD *)(a1 + 24);
          v21 = 138412802;
          v22 = v8;
          v23 = 2112;
          v24 = v16;
          v25 = 2048;
          v26 = a1;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "%@, %@, %p", &v21, 32);
          v18 = (char *)v17;
          sub_100512490("Generic", 1, 0, 2, "void CLNatalimetrySubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
      }
      v19 = CMNatalimetryNatalieData;
      v20 = v8;
      *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);

      sub_10098FF9C(a1, buf);
    }
    else
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v11 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
      {
        v12 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v12;
        v28 = 2048;
        v29 = a1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Error in calorie update, %@, %p", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102161620);
        v13 = *(void **)(a1 + 24);
        v21 = 138412546;
        v22 = v13;
        v23 = 2048;
        v24 = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "Error in calorie update, %@, %p", &v21, 22);
        v15 = (char *)v14;
        sub_100512490("Generic", 1, 0, 0, "void CLNatalimetrySubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
  }
}

void sub_10098FF9C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102161790, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100990030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100990044(uint64_t a1)
{
  id v1;
  id v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLClientAuthorizationCache"));
  v2 = objc_msgSend(objc_msgSend(v1, "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle")), "isAuthorizedForServiceTypeMask:", 16);
  if ((v2 & 1) == 0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102161620);
    v3 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Motion calibration system service is disabled.", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLNatalimetrySubscription::isNatalimetryCalibrationAuthorized()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }

  return v2;
}

uint64_t sub_100990224(uint64_t a1, int *a2)
{
  uint64_t result;
  int v5;

  if (sub_100990320(a1))
  {
    if (!sub_1011C589C(*(_QWORD *)(a1 + 8)))
    {
      v5 = 104;
      goto LABEL_7;
    }
    if ((sub_1001BBC08(a1) & 1) != 0)
      return 1;
  }
  v5 = 105;
LABEL_7:
  result = 0;
  *a2 = v5;
  return result;
}

void sub_100990280(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_102161790, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10099030C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100990320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  _BYTE __p[12];
  __int16 v15;
  uint64_t v16;
  char v17;

  sub_1015A2E04(__p, "com.apple.locationd.natalimetry");
  v2 = sub_1002255E0(a1);
  v3 = v2;
  if (v17 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102161620);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)__p = 138412546;
    *(_QWORD *)&__p[4] = v5;
    v15 = 2048;
    v16 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client failed entitlement check for calorimetry, %@, %p", __p, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102161620);
    v7 = *(_QWORD *)(a1 + 24);
    v10 = 138412546;
    v11 = v7;
    v12 = 2048;
    v13 = a1;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Client failed entitlement check for calorimetry, %@, %p", &v10, 22);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNatalimetrySubscription::isEntitledForNatalimetry()", "%s\n", v8);
    if (v9 != __p)
      free(v9);
  }
  return v3;
}

void sub_100990528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10099054C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  _BYTE __p[12];
  char v13;

  sub_1015A2E04(__p, "com.apple.locationd.userprofile");
  v2 = sub_1002255E0(a1);
  v3 = v2;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102161620);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)__p = 138412290;
    *(_QWORD *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access user info spi", __p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102161620);
    v7 = *(_QWORD *)(a1 + 24);
    v10 = 138412290;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Client %@ does not have appropriate entitlement to access user info spi", &v10, 12);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNatalimetrySubscription::isEntitledForUserInfoAccess()", "%s\n", v8);
    if (v9 != __p)
      free(v9);
  }
  return v3;
}

void sub_10099073C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100990760(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  id v6;
  uint64_t v7;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSNumber *v24;
  uint8_t buf[4];
  id v26;

  if ((_DWORD)a3 == 100)
  {
    v21 = CMWorkoutMetsDataKey;
    v22 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102161620);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(a2, "description");
      *(_DWORD *)buf = 138412290;
      v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Workout Mets Query Result: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v13 = qword_10229FC98;
      v19 = 138412290;
      v20 = objc_msgSend(a2, "description");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "Workout Mets Query Result: %@", &v19, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleQueryWorkoutMetsForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v7 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102161620);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      *(_DWORD *)buf = 67240192;
      LODWORD(v26) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error querying workout mets, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102161620);
      v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v19 = 67240192;
      LODWORD(v20) = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Error querying workout mets, %{public}d", &v19, 8);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLNatalimetrySubscription::handleQueryWorkoutMetsForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v11 = *(_QWORD *)(a1 + 40);
    v23 = CMErrorMessage;
    v24 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
    v7 = v11;
  }
  return CLConnectionMessage::sendReply(v7);
}

void sub_100990B18(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100990B44(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100990BA8(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100990BD4(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_100990C00(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102161670;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100990C3C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102161670;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100990C60(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100990CB0(a1 + 8, a2, a3);
}

uint64_t sub_100990C68(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100990CA4()
{
}

void sub_100990CB0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100990D34(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100990D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100990D34(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021616E0);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021616E0);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_100990F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100990F38(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100990F64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102161720;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100990FA0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102161720;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100990FC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100991014(a1 + 8, a2, a3);
}

uint64_t sub_100990FCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100991008()
{
}

void sub_100991014(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1009910E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100991104(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_10099117C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100991168(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10099117C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_1009913FC(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_1009913E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009913FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100991470(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100991458(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100991470(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1009914C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009914E4()
{
  sub_1015A2E04(qword_102305B20, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305B20, (void *)&_mh_execute_header);
}

void sub_1009916FC(id a1)
{
  qword_102305B38 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMotionAlarmNotifierSilo"));
}

uint64_t sub_1009917B0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100995AC8;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102305B48 != -1)
    dispatch_once(&qword_102305B48, block);
  return qword_102311050;
}

void sub_1009919F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100991A08(uint64_t a1, __int128 *a2, uint64_t a3)
{
  NSString *v6;
  NSObject *v7;
  ClientRegistration *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *i;
  _BOOL8 result;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25[2];
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *__dst[2];
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *__p;
  char v52;
  _BYTE v53[128];
  int v54;
  NSString *v55;
  uint8_t buf[4];
  NSString *v57;

  if (!a2)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v14 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid name.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    LOWORD(v54) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid name.", &v54, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>, BOOL)", "%s\n", v15);
LABEL_65:
    if (v16 != buf)
      free(v16);
    return 0;
  }
  sub_1001AF190((char *)__dst, a2);
  v6 = sub_10092241C((uint64_t)__dst);
  if (v52 < 0)
    operator delete(__p);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(__dst[0]);
  if (-[NSString length](v6, "length"))
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v7 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v57 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Registering client: %{private}@.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v54 = 138477827;
      v55 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Registering client: %{private}@.", &v54, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>, BOOL)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v8 = objc_alloc_init(ClientRegistration);
    -[ClientRegistration setAdapter:](v8, "setAdapter:", a3);
    sub_1001AF190((char *)v25, a2);
    -[ClientRegistration setName:](v8, "setName:", v25);
    if (v38 < 0)
      operator delete(v37);
    if (v36 < 0)
      operator delete(v35);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    if (v30 < 0)
      operator delete(v29);
    if (v28 < 0)
      operator delete(v27);
    if (v26 < 0)
      operator delete(v25[0]);
    objc_msgSend(*(id *)(a1 + 136), "setObject:forKey:", v8, v6);

    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v9 = (void *)sub_100AB9F94(*(_QWORD *)(a1 + 112), v6);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v53, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v11)
            objc_enumerationMutation(v9);
          sub_100997640(a1, *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i));
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v53, 16);
      }
      while (v10);
    }
    return 1;
  }
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v17 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unable to create client bundle identifier.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    LOWORD(v54) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to create client bundle identifier.", &v54, 2);
    v16 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>, BOOL)", "%s\n", v20);
    goto LABEL_65;
  }
  return result;
}

void sub_100991FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009920E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1009920F4(uint64_t a1, __int128 *a2)
{
  NSString *v3;
  NSObject *v4;
  _BOOL8 result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  void *__dst[2];
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;
  int v27;
  NSString *v28;
  uint8_t buf[4];
  NSString *v30;

  if (!a2)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v6 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid name.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    LOWORD(v27) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid name.", &v27, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *, BOOL)", "%s\n", v7);
LABEL_44:
    if (v8 != buf)
      free(v8);
    return 0;
  }
  sub_1001AF190((char *)__dst, a2);
  v3 = sub_10092241C((uint64_t)__dst);
  if (v26 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(__dst[0]);
  if (-[NSString length](v3, "length"))
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v4 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v30 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unregistering client: %{private}@.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v27 = 138477827;
      v28 = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Unregistering client: %{private}@.", &v27, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *, BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    objc_msgSend(*(id *)(a1 + 136), "removeObjectForKey:", v3);
    return 1;
  }
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v9 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Unable to create client bundle identifier.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    LOWORD(v27) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to create client bundle identifier.", &v27, 2);
    v8 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *, BOOL)", "%s\n", v12);
    goto LABEL_44;
  }
  return result;
}

void sub_1009925A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009925E8(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  NSObject *v13;
  id v14;
  id v15;
  uint64_t result;
  int v17;
  id v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  unsigned int v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  const char *v44;
  uint8_t *v45;
  NSObject *v46;
  NSObject *v47;
  id v48;
  NSObject *v49;
  id v50;
  id v51;
  const char *v52;
  uint8_t *v53;
  uint64_t v54;
  id v55;
  id v56;
  const char *v57;
  uint8_t *v58;
  uint64_t v59;
  id v60;
  id v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  id v65;
  id v66;
  const char *v67;
  uint8_t *v68;
  const char *v69;
  uint8_t *v70;
  uint64_t v71;
  id v72;
  id v73;
  const char *v74;
  uint8_t *v75;
  uint64_t v76;
  id v77;
  const char *v78;
  uint8_t *v79;
  uint64_t v80;
  _QWORD v81[5];
  int v82;
  id v83;
  __int16 v84;
  id v85;
  uint8_t buf[4];
  id v87;
  __int16 v88;
  id v89;

  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v6 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478083;
    v87 = objc_msgSend(a2, "bundleId");
    v88 = 2113;
    v89 = objc_msgSend(a2, "name");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Registering alarm for client: %{private}@, name: %{private}@.", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v43 = qword_10229FDD8;
    v82 = 138478083;
    v83 = objc_msgSend(a2, "bundleId");
    v84 = 2113;
    v85 = objc_msgSend(a2, "name");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 0, "Registering alarm for client: %{private}@, name: %{private}@.", &v82, 22);
    v45 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v44);
    if (v45 != buf)
      free(v45);
  }
  if (!a2)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v20 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Invalid alarm to add!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      LOWORD(v82) = 0;
      LODWORD(v80) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid alarm to add!", &v82, v80);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    if (a3)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a3, 0, 107);
    return 0;
  }
  v7 = objc_msgSend(a2, "bundleId");
  if (!sub_100997BE0((uint64_t)v7, v7))
  {
    if (a3)
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 107);
    return 0;
  }
  v8 = (void *)sub_100AB93E0(*(_QWORD *)(a1 + 112), objc_msgSend(a2, "bundleId"), objc_msgSend(a2, "name"));
  if (!v8)
    goto LABEL_113;
  v9 = v8;
  v10 = objc_msgSend(v8, "duration");
  if (v10 == objc_msgSend(a2, "duration"))
  {
    v11 = objc_msgSend(v9, "type");
    if (v11 == objc_msgSend(a2, "type"))
    {
      v12 = objc_msgSend(v9, "repeats");
      if (v12 == objc_msgSend(a2, "repeats"))
      {
        if (a3)
          (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v9, 100);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v29 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
        {
          v30 = objc_msgSend(a2, "bundleId");
          v31 = objc_msgSend(a2, "name");
          *(_DWORD *)buf = 138478083;
          v87 = v30;
          v88 = 2113;
          v89 = v31;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Alarm already exists for client, firing: %{private}@, name: %{private}@.", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v64 = qword_10229FDD8;
          v65 = objc_msgSend(a2, "bundleId");
          v66 = objc_msgSend(a2, "name");
          v82 = 138478083;
          v83 = v65;
          v84 = 2113;
          v85 = v66;
          LODWORD(v80) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, 0, "Alarm already exists for client, firing: %{private}@, name: %{private}@.", &v82, v80);
          v68 = (uint8_t *)v67;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v67);
          if (v68 != buf)
            free(v68);
        }
        sub_100997640(a1, v9);
        return 1;
      }
    }
  }
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v13 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = objc_msgSend(a2, "bundleId");
    v15 = objc_msgSend(a2, "name");
    *(_DWORD *)buf = 138478083;
    v87 = v14;
    v88 = 2113;
    v89 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Updating alarm for client: %{private}@, name: %{private}@.", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v54 = qword_10229FDD8;
    v55 = objc_msgSend(a2, "bundleId");
    v56 = objc_msgSend(a2, "name");
    v82 = 138478083;
    v83 = v55;
    v84 = 2113;
    v85 = v56;
    LODWORD(v80) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 0, "Updating alarm for client: %{private}@, name: %{private}@.", &v82, v80);
    v58 = (uint8_t *)v57;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v57);
    if (v58 != buf)
      free(v58);
  }
  v81[0] = _NSConcreteStackBlock;
  v81[1] = 3221225472;
  v81[2] = sub_100997D84;
  v81[3] = &unk_1021618A0;
  v81[4] = a3;
  result = sub_100993548(a1, v9, (uint64_t)v81);
  if ((_DWORD)result)
  {
LABEL_113:
    if (!sub_100AB9188(*(_QWORD *)(a1 + 112), a2) || !objc_msgSend(a2, "alarmId"))
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v21 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
      {
        v22 = objc_msgSend(a2, "bundleId");
        v23 = objc_msgSend(a2, "name");
        *(_DWORD *)buf = 138478083;
        v87 = v22;
        v88 = 2113;
        v89 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to update or insert alarm for client: %{private}@ name: %{private}@.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v59 = qword_10229FDD8;
        v60 = objc_msgSend(a2, "bundleId");
        v61 = objc_msgSend(a2, "name");
        v82 = 138478083;
        v83 = v60;
        v84 = 2113;
        v85 = v61;
        LODWORD(v80) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 16, "Failed to update or insert alarm for client: %{private}@ name: %{private}@.", &v82, v80);
        v63 = (uint8_t *)v62;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v62);
        if (v63 != buf)
          free(v63);
      }
      goto LABEL_38;
    }
    if (objc_msgSend(a2, "type") == 15)
    {
      v17 = objc_msgSend(a2, "bundleId");
      objc_msgSend(a2, "name");
      v18 = objc_msgSend(a2, "alarmId");
      objc_msgSend(a2, "duration");
      objc_msgSend(a2, "repeats");
      sub_100997DA4(a1, v17, v19, (unint64_t)v18);
      goto LABEL_55;
    }
    if (objc_msgSend(a2, "type") == 19)
    {
      objc_msgSend(a2, "bundleId");
      objc_msgSend(a2, "name");
      v24 = objc_msgSend(a2, "alarmId");
      v25 = objc_msgSend(a2, "duration");
      v26 = objc_msgSend(a2, "repeats");
      sub_100998268(a1, v27, v28, (uint64_t)v24, v25, v26);
      goto LABEL_55;
    }
    if (objc_msgSend(a2, "type") == 22
      || objc_msgSend(a2, "type") == 23
      || objc_msgSend(a2, "type") == 24
      || objc_msgSend(a2, "type") == 25)
    {
      v32 = objc_msgSend(a2, "bundleId");
      objc_msgSend(a2, "name");
      v33 = objc_msgSend(a2, "alarmId");
      v34 = objc_msgSend(a2, "duration");
      v35 = objc_msgSend(a2, "type");
      if ((sub_100998564(a1, (uint64_t)v32, v36, (uint64_t)v33, v34, v35) & 1) != 0)
        goto LABEL_55;
      goto LABEL_66;
    }
    v37 = objc_msgSend(a2, "type");
    v38 = objc_msgSend(a2, "bundleId");
    objc_msgSend(a2, "name");
    v39 = objc_msgSend(a2, "alarmId");
    v40 = objc_msgSend(a2, "type");
    v42 = objc_msgSend(a2, "duration");
    if (v37 == 26)
    {
      if ((sub_100998A88(a1, v38, v41, (std::string::size_type)v39, (uint64_t)v40, v42) & 1) == 0)
        goto LABEL_66;
    }
    else if ((sub_100999210(a1, v38, v41, (std::string::size_type)v39, (uint64_t)v40, v42) & 1) == 0)
    {
LABEL_66:
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v46 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Alarm construction failed!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        LOWORD(v82) = 0;
        LODWORD(v80) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Alarm construction failed!", &v82, v80);
        v70 = (uint8_t *)v69;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v69);
        if (v70 != buf)
          free(v70);
      }
      if ((sub_100ABA3C0(*(_QWORD *)(a1 + 112), objc_msgSend(a2, "bundleId"), objc_msgSend(a2, "name")) & 1) == 0)
      {
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v47 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
        {
          v48 = objc_msgSend(a2, "alarmId");
          *(_DWORD *)buf = 134217984;
          v87 = v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Failed to remove alarm entry for id: %llu.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v76 = qword_10229FDD8;
          v77 = objc_msgSend(a2, "alarmId");
          v82 = 134217984;
          v83 = v77;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v76, 16, "Failed to remove alarm entry for id: %llu.", &v82);
          v79 = (uint8_t *)v78;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v78);
          if (v79 != buf)
            free(v79);
        }
      }
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v49 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
      {
        v50 = objc_msgSend(a2, "bundleId");
        v51 = objc_msgSend(a2, "name");
        *(_DWORD *)buf = 138478083;
        v87 = v50;
        v88 = 2113;
        v89 = v51;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Construction of alarm failed for client: %{private}@ name: %{private}@.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v71 = qword_10229FDD8;
        v72 = objc_msgSend(a2, "bundleId");
        v73 = objc_msgSend(a2, "name");
        v82 = 138478083;
        v83 = v72;
        v84 = 2113;
        v85 = v73;
        LODWORD(v80) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, 16, "Construction of alarm failed for client: %{private}@ name: %{private}@.", &v82, v80);
        v75 = (uint8_t *)v74;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v74);
        if (v75 != buf)
          free(v75);
      }
      objc_msgSend(a2, "setAlarmId:", 0);
LABEL_38:
      if (a3)
        (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 103);
      return 0;
    }
LABEL_55:
    if (a3)
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 100);
    return 1;
  }
  return result;
}

uint64_t sub_100993548(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  id v30;
  __int16 v31;
  id v32;
  uint8_t buf[4];
  id v34;
  __int16 v35;
  id v36;

  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v6 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478083;
    v34 = objc_msgSend(a2, "bundleId");
    v35 = 2113;
    v36 = objc_msgSend(a2, "name");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unregistering alarm for client: %{private}@, name: %{private}@.", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v19 = qword_10229FDD8;
    v29 = 138478083;
    v30 = objc_msgSend(a2, "bundleId");
    v31 = 2113;
    v32 = objc_msgSend(a2, "name");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "Unregistering alarm for client: %{private}@, name: %{private}@.", &v29, 22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (!a2)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v11 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid alarm to remove!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      LOWORD(v29) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid alarm to remove!", &v29, v28);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    if (a3)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a3, 0, 107);
    return 0;
  }
  v7 = (void *)sub_100AB93E0(*(_QWORD *)(a1 + 112), objc_msgSend(a2, "bundleId"), objc_msgSend(a2, "name"));
  if (!v7)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v12 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Unable to find alarm to remove!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      LOWORD(v29) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 1, "Unable to find alarm to remove!", &v29, v28);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    if (a3)
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 108);
    return 0;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "alarmId");
  if (objc_msgSend(v8, "type") == 15)
  {
    v10 = sub_100999AC0(a1, (unint64_t)v9);
  }
  else
  {
    v14 = objc_msgSend(v8, "type");
    if ((_DWORD)v14 == 19)
    {
      sub_100996E0C((uint64_t)v14, (uint64_t)v9);
      v15 = 1;
      goto LABEL_33;
    }
    if (objc_msgSend(v8, "type") == 22
      || objc_msgSend(v8, "type") == 23
      || objc_msgSend(v8, "type") == 24
      || objc_msgSend(v8, "type") == 25)
    {
      v10 = sub_100996FD8(a1, (uint64_t)v9);
    }
    else
    {
      v10 = sub_100999E20(a1, (uint64_t)v9);
    }
  }
  v15 = v10;
LABEL_33:
  sub_10099A158(a1, (uint64_t)v9);
  if ((sub_100ABA3C0(*(_QWORD *)(a1 + 112), objc_msgSend(v8, "bundleId"), objc_msgSend(v8, "name")) & 1) != 0)
  {
    if (v15)
    {
      objc_msgSend(v8, "setAlarmId:", 0);
      objc_msgSend(v8, "setState:", 12);
      v13 = 1;
      if (!a3)
        return v13;
      goto LABEL_43;
    }
  }
  else
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v16 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v34 = v9;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to remove activity alarm entry for id: %llu.", buf, 0xCu);
    }
    v13 = 0;
    if (!sub_1001BFF7C(115, 0))
    {
      if (!a3)
        return v13;
      goto LABEL_43;
    }
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v29 = 134217984;
    v30 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Failed to remove activity alarm entry for id: %llu.", &v29);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v13 = 0;
  if (!a3)
    return v13;
LABEL_43:
  if ((_DWORD)v13)
    v17 = 100;
  else
    v17 = 103;
  (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, v17);
  return v13;
}

uint64_t sub_100993CB0(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  unsigned int v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v20;
  uint64_t v21;
  id v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  uint64_t v46;
  int v47;
  id v48;
  __int16 v49;
  id v50;
  __int16 v51;
  id v52;
  __int16 v53;
  id v54;
  uint8_t buf[4];
  id v56;
  __int16 v57;
  id v58;
  __int16 v59;
  id v60;
  __int16 v61;
  id v62;

  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v6 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478083;
    v56 = objc_msgSend(a2, "bundleId");
    v57 = 2113;
    v58 = objc_msgSend(a2, "name");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Acknowledging alarm for client: %{private}@, name: %{private}@.", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v26 = qword_10229FDD8;
    v47 = 138478083;
    v48 = objc_msgSend(a2, "bundleId");
    v49 = 2113;
    v50 = objc_msgSend(a2, "name");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "Acknowledging alarm for client: %{private}@, name: %{private}@.", &v47, 22);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  if (!a2)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v16 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Invalid alarm to acknowledge!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      LOWORD(v47) = 0;
      LODWORD(v46) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid alarm to acknowledge!", &v47, v46);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    if (a3)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a3, 0, 107);
    return 0;
  }
  v7 = (void *)sub_100AB93E0(*(_QWORD *)(a1 + 112), objc_msgSend(a2, "bundleId"), objc_msgSend(a2, "name"));
  if (!v7)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v17 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unable to find alarm entry to acknowledge!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      LOWORD(v47) = 0;
      LODWORD(v46) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to find alarm entry to acknowledge!", &v47, v46);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    if (a3)
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 108);
    return 0;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "alarmId");
  v10 = objc_msgSend(v8, "state");
  if (v10 - 12 <= 0xFFFFFFF5)
  {
    v11 = v10;
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v12 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      v13 = sub_101464ABC(v11);
      v14 = objc_msgSend(v8, "bundleId");
      v15 = objc_msgSend(v8, "name");
      *(_DWORD *)buf = 138413059;
      v56 = (id)v13;
      v57 = 2113;
      v58 = v14;
      v59 = 2113;
      v60 = v15;
      v61 = 2048;
      v62 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Unable to acknowledge alarm in state: %@ for client: %{private}@ name: %{private}@, id: %llu.", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v33 = qword_10229FDD8;
      v34 = sub_101464ABC(v11);
      v35 = objc_msgSend(v8, "bundleId");
      v36 = objc_msgSend(v8, "name");
      v47 = 138413059;
      v48 = (id)v34;
      v49 = 2113;
      v50 = v35;
      v51 = 2113;
      v52 = v36;
      v53 = 2048;
      v54 = v9;
      LODWORD(v46) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 16, "Unable to acknowledge alarm in state: %@ for client: %{private}@ name: %{private}@, id: %llu.", &v47, v46);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    if (a3)
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, 108);
    return 0;
  }
  if ((objc_msgSend(v8, "repeats") & 1) != 0)
  {
    sub_10099A158(a1, (uint64_t)v9);
    if (objc_msgSend(v8, "type") != 15 && objc_msgSend(v8, "type") != 19)
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v25 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Preconditions have been violated and we have a repeating activity alarm!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        LOWORD(v47) = 0;
        LODWORD(v46) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 17, "Preconditions have been violated and we have a repeating activity alarm!", &v47, v46);
        v45 = (uint8_t *)v44;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v44);
        if (v45 != buf)
          free(v45);
      }
      if (a3)
        (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, 103);
      return 0;
    }
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v20 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      v21 = sub_101464ABC(1u);
      v22 = objc_msgSend(v8, "bundleId");
      *(_DWORD *)buf = 138412803;
      v56 = (id)v21;
      v57 = 2113;
      v58 = v22;
      v59 = 2048;
      v60 = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Setting alarm to %@ for client: %{private}@, id: %llu.", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v39 = qword_10229FDD8;
      v40 = sub_101464ABC(1u);
      v41 = objc_msgSend(v8, "bundleId");
      v47 = 138412803;
      v48 = (id)v40;
      v49 = 2113;
      v50 = v41;
      v51 = 2048;
      v52 = v9;
      LODWORD(v46) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 0, "Setting alarm to %@ for client: %{private}@, id: %llu.", &v47, v46);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    v18 = 1;
    objc_msgSend(v8, "setState:", 1);
    sub_100AB9188(*(_QWORD *)(a1 + 112), v8);
    if (a3)
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, 100);
  }
  else
  {
    v23 = sub_100993548(a1, v8, 0);
    if (a3)
    {
      if (v23)
        v24 = 100;
      else
        v24 = 103;
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, v24);
    }
    return 1;
  }
  return v18;
}

uint64_t sub_10099471C(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  _BOOL8 v7;
  id v8;
  id v9;
  uint64_t v10;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[5];
  int v15;
  void *v16;
  uint8_t buf[4];
  void *v18;

  if (!sub_100997BE0(a1, a2))
    return 0;
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v6 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138477827;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Application %{private}@ sending remote app launch.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v15 = 138477827;
    v16 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 1, "Application %{private}@ sending remote app launch.", &v15, 12);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::launchRemoteApplication(NSString *, CLMotionAlarmLaunchHandler)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v7 = *(_BYTE *)(a1 + 110) != 0;
  if (*(_BYTE *)(a1 + 110))
  {
    v8 = objc_msgSend(a2, "dataUsingEncoding:", 4);
    v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10099CE80;
    v14[3] = &unk_102155328;
    v14[4] = v8;
    objc_msgSend(v9, "doAsync:", v14);
    if (!a3)
      return 1;
    v10 = 100;
    goto LABEL_12;
  }
  if (!a3)
    return 0;
  v10 = 109;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v10);
  return v7;
}

void sub_1009949AC(uint64_t a1, xpc_activity_t activity, uint64_t a3)
{
  xpc_activity_state_t state;
  xpc_activity_state_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  xpc_activity_state_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  xpc_activity_state_t v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  void *__p[2];
  char v24;
  int v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;

  if (!activity)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v12 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Invalid alarm activity.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    LOWORD(v25) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid alarm activity.", &v25, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)", "%s\n", v13);
LABEL_45:
    if (v14 != buf)
      free(v14);
    return;
  }
  state = xpc_activity_get_state(activity);
  if (state == 4 || (v7 = state, state == 2))
  {
    v8 = *(_QWORD *)(a1 + 192);
    sub_1015A2E04(__p, "none");
    sub_10002B684(v8, (uint64_t *)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    if (!objc_msgSend(*(id *)(a1 + 152), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a3)))objc_msgSend(*(id *)(a1 + 152), "setObject:forKeyedSubscript:", activity, +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a3));
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v9 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Class A timer fired id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v25 = 134217984;
      v26 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Class A timer fired id: %llu.", &v25);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_10099BD68(a1, a3);
    if (!xpc_activity_set_state(activity, 5))
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v10 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_FAULT))
      {
        v11 = xpc_activity_get_state(activity);
        *(_DWORD *)buf = 134349056;
        v28 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Failed to mark activity as done. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v18 = qword_10229FDD8;
        v19 = xpc_activity_get_state(activity);
        v25 = 134349056;
        v26 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 17, "Failed to mark activity as done. Current state is %{public}ld", &v25, 12);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
    }
    sub_100E3E6F0(*(_QWORD *)(a1 + 192));
    return;
  }
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v15 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Unexpected activity state: %ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v25 = 134217984;
    v26 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unexpected activity state: %ld", &v25);
    v14 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)", "%s\n", v22);
    goto LABEL_45;
  }
}

void sub_100994FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100995014(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  id v15;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p[2];
  char v25;
  int v26;
  id v27;
  uint8_t v28[128];
  uint8_t buf[4];
  id v30;

  if (qword_10229FF50 != -1)
    dispatch_once(&qword_10229FF50, &stru_102161930);
  v2 = qword_10229FF58;
  if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMotionAlarmNotifier::onCardioChangeEvent triggered.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_102161930);
    LOWORD(v26) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 2, "CLMotionAlarmNotifier::onCardioChangeEvent triggered.", &v26, 2);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onCardioChangeEvent()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v3 = *(_QWORD *)(a1 + 192);
  sub_1015A2E04(__p, "none");
  sub_10002B684(v3, (uint64_t *)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = *(void **)(a1 + 160);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v21;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(v4);
        v8 = objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v7), "unsignedLongLongValue");
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v9 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v30 = v8;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CardioChange alarm fired: %llu.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v26 = 134217984;
          v27 = v8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "CardioChange alarm fired: %llu.", &v26);
          v14 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onCardioChangeEvent()", "%s\n", v13);
          if (v14 != buf)
            free(v14);
        }
        if (objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v8)))
        {
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v10 = qword_10229FDD8;
          if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CardioChange alarm is pending acknowledgment. Not firing alarm.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FDD0 != -1)
              dispatch_once(&qword_10229FDD0, &stru_102161910);
            LOWORD(v26) = 0;
            LODWORD(v19) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "CardioChange alarm is pending acknowledgment. Not firing alarm.", &v26, v19);
            v12 = (uint8_t *)v11;
            sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onCardioChangeEvent()", "%s\n", v11);
            if (v12 != buf)
              free(v12);
          }
        }
        else
        {
          sub_10099BD68(a1, (uint64_t)v8);
        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v15 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
      v5 = v15;
    }
    while (v15);
  }
  return sub_100E3E6F0(*(_QWORD *)(a1 + 192));
}

void sub_100995520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100995568(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  id v18;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *__p[2];
  char v28;
  int v29;
  id v30;
  uint8_t v31[128];
  uint8_t buf[4];
  id v33;

  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v4 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v33) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLMotionAlarmNotifier::fireEventAlarm triggered,type:%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v29 = 67109120;
    LODWORD(v30) = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "CLMotionAlarmNotifier::fireEventAlarm triggered,type:%d", &v29);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireEventAlarm(CMMotionAlarmType)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v5 = *(_QWORD *)(a1 + 192);
  sub_1015A2E04(__p, "none");
  sub_10002B684(v5, (uint64_t *)__p);
  if (v28 < 0)
    operator delete(__p[0]);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v6 = *(void **)(a1 + 120);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v24;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v24 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v9);
        v11 = objc_msgSend(v10, "unsignedLongLongValue");
        if (objc_msgSend(objc_msgSend(*(id *)(a1 + 120), "objectForKey:", v10), "trigger") == a2)
        {
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v12 = qword_10229FDD8;
          if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v33 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Event alarm fired: %llu.", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FDD0 != -1)
              dispatch_once(&qword_10229FDD0, &stru_102161910);
            v29 = 134217984;
            v30 = v11;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Event alarm fired: %llu.", &v29);
            v17 = (uint8_t *)v16;
            sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireEventAlarm(CMMotionAlarmType)", "%s\n", v16);
            if (v17 != buf)
              free(v17);
          }
          if (objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11)))
          {
            if (qword_10229FDD0 != -1)
              dispatch_once(&qword_10229FDD0, &stru_102161910);
            v13 = qword_10229FDD8;
            if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Event alarm is pending acknowledgment. Not firing alarm.", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FDD0 != -1)
                dispatch_once(&qword_10229FDD0, &stru_102161910);
              LOWORD(v29) = 0;
              LODWORD(v22) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Event alarm is pending acknowledgment. Not firing alarm.", &v29, v22);
              v15 = (uint8_t *)v14;
              sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireEventAlarm(CMMotionAlarmType)", "%s\n", v14);
              if (v15 != buf)
                free(v15);
            }
          }
          else
          {
            sub_10099BD68(a1, (uint64_t)v11);
          }
        }
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v18 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
      v7 = v18;
    }
    while (v18);
  }
  return sub_100E3E6F0(*(_QWORD *)(a1 + 192));
}

void sub_100995AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100995AC8()
{
  operator new();
}

void sub_100995B10()
{
  operator delete();
}

void sub_100995B34(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = sub_100995F20(a1, "CLMotionAlarmNotifier", a2);
  *(_QWORD *)v2 = off_1021617C8;
  *(_WORD *)(v2 + 109) = 0;
  operator new();
}

void sub_100995DFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD **v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = v1[28];
  v1[28] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1[27];
  v1[27] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[26];
  v1[26] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *v4;
  *v4 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v1[24];
  v1[24] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_10099F104(v3, *v5);
  v12 = *v2;
  *v2 = 0;
  if (v12)
    sub_10099F150((uint64_t)v2, v12);
  sub_10099671C((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100995F20(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102161960;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100995FA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100995FBC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionAlarmNotifier::onAppMonitorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021618F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10099CEC8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100996174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100996194(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionAlarmNotifier::onDataProtectionManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021618F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onDataProtectionManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onDataProtectionManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10099CF3C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10099634C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10099636C(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionAlarmNotifier::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021618F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 5)
    *(_BYTE *)(a4 + 110) = *a3;
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100996528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100996544(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionAlarmNotifier::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021618F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10099D15C((_QWORD *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1009966FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10099671C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102161960;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100996790(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1021617C8;
  sub_100996884(a1);
  v2 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_10099F104(a1 + 168, *(_QWORD **)(a1 + 176));
  v7 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v7)
    sub_10099F150(a1 + 112, v7);
  return sub_10099671C(a1);
}

void sub_100996860(uint64_t a1)
{
  sub_100996790(a1);
  operator delete();
}

void sub_100996884(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *k;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *m;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  void *n;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint8_t *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _WORD v60[8];
  _BYTE v61[128];
  _BYTE v62[128];
  _BYTE v63[128];
  _BYTE v64[128];
  uint8_t v65[128];
  uint8_t buf[1640];

  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v2 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Shutting down alarm notifier.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v60[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Shutting down alarm notifier.", v60, 2);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionAlarmNotifier::shutdown()", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v3 = objc_msgSend(*(id *)(a1 + 144), "allValues");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v57;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v57 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i), "invalidate");
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
    }
    while (v5);
  }

  *(_QWORD *)(a1 + 144) = 0;
  v8 = *(_QWORD **)(a1 + 168);
  v9 = (_QWORD *)(a1 + 176);
  if (v8 != (_QWORD *)(a1 + 176))
  {
    do
    {
      sub_10016E3C4(v8[5]);
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != v9);
  }
  sub_10099F104(a1 + 168, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = v9;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v13 = objc_msgSend(*(id *)(a1 + 152), "allKeys");
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v53;
    do
    {
      for (j = 0; j != v15; j = (char *)j + 1)
      {
        if (*(_QWORD *)v53 != v16)
          objc_enumerationMutation(v13);
        v18 = objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)j), "unsignedIntegerValue");
        sub_100996E0C((uint64_t)v18, (uint64_t)v18);
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
    }
    while (v15);
  }

  *(_QWORD *)(a1 + 152) = 0;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v19 = objc_msgSend(*(id *)(a1 + 120), "allValues");
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v48, v63, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v49;
    do
    {
      for (k = 0; k != v21; k = (char *)k + 1)
      {
        if (*(_QWORD *)v49 != v22)
          objc_enumerationMutation(v19);
        objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)k), "invalidate");
      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v48, v63, 16);
    }
    while (v21);
  }

  *(_QWORD *)(a1 + 120) = 0;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v24 = objc_msgSend(*(id *)(a1 + 128), "allKeys");
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v44, v62, 16);
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v45;
    do
    {
      for (m = 0; m != v26; m = (char *)m + 1)
      {
        if (*(_QWORD *)v45 != v27)
          objc_enumerationMutation(v24);
        sub_100996FD8(a1, (uint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)m), "unsignedLongLongValue"));
      }
      v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v44, v62, 16);
    }
    while (v26);
  }

  *(_QWORD *)(a1 + 128) = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v29 = objc_msgSend(*(id *)(a1 + 160), "allKeys");
  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v40, v61, 16);
  if (v30)
  {
    v31 = v30;
    v32 = *(_QWORD *)v41;
    do
    {
      for (n = 0; n != v31; n = (char *)n + 1)
      {
        if (*(_QWORD *)v41 != v32)
          objc_enumerationMutation(v29);
        sub_100997308(a1, (uint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)n), "unsignedLongLongValue"));
      }
      v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v40, v61, 16);
    }
    while (v31);
  }

  *(_QWORD *)(a1 + 160) = 0;
  v34 = *(int **)(a1 + 192);
  if (v34[2] <= 0)
  {
    *(_QWORD *)(a1 + 192) = 0;
    goto LABEL_52;
  }
  sub_100E3E6F0((uint64_t)v34);
  v34 = *(int **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v34)
LABEL_52:
    (*(void (**)(int *))(*(_QWORD *)v34 + 8))(v34);

  *(_QWORD *)(a1 + 136) = 0;
  v35 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v37)
    sub_10099F150(a1 + 112, v37);
  *(_BYTE *)(a1 + 108) = 1;
}

uint64_t sub_100996E0C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v3 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing Class A timer alarm for id: %llu.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v7 = 134217984;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Removing Class A timer alarm for id: %llu.", &v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeClassATimerAlarm(uint64_t)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  xpc_activity_unregister(-[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.locationd.MotionAlarm_%llu"), a2), "UTF8String"));
  return 1;
}

BOOL sub_100996FD8(uint64_t a1, uint64_t a2)
{
  NSNumber *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  v4 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a2);
  v5 = objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", v4);
  if (v5)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v6 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing workout event alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v13 = 134217984;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Removing workout event alarm for id: %llu.", &v13);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeWorkoutEventAlarm(uint64_t)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    objc_msgSend(*(id *)(a1 + 128), "removeObjectForKey:", v4);
  }
  else
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v7 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unable to find activity alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v13 = 134217984;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to find activity alarm for id: %llu.", &v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::removeWorkoutEventAlarm(uint64_t)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_100997308(uint64_t a1, uint64_t a2)
{
  NSNumber *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  v4 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a2);
  v5 = objc_msgSend(*(id *)(a1 + 160), "objectForKeyedSubscript:", v4);
  if (v5)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v6 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing CardioChange alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v13 = 134217984;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Removing CardioChange alarm for id: %llu.", &v13);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeCardioChangeAlarm(uint64_t)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    objc_msgSend(v5, "invalidate");
    objc_msgSend(*(id *)(a1 + 160), "removeObjectForKey:", v4);
  }
  else
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v7 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unable to find CardioChange alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v13 = 134217984;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to find CardioChange alarm for id: %llu.", &v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::removeCardioChangeAlarm(uint64_t)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return v5 != 0;
}

void sub_100997640(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  void *__p[2];
  char v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  if ((int)objc_msgSend(a2, "state") <= 11 && (int)objc_msgSend(a2, "state") > 1)
  {
    v8 = *(_QWORD *)(a1 + 192);
    sub_1015A2E04(__p, "none");
    sub_10002B684(v8, (uint64_t *)__p);
    if (v27 < 0)
      operator delete(__p[0]);
    v9 = objc_msgSend(*(id *)(a1 + 136), "objectForKey:", objc_msgSend(a2, "bundleId"));
    if (v9)
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v10 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = objc_msgSend(a2, "bundleId");
        v12 = sub_101464ABC(objc_msgSend(a2, "state"));
        *(_DWORD *)buf = 138412546;
        v33 = (uint64_t)v11;
        v34 = 2112;
        v35 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Firing alarm on client: %@, current state: %@.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v16 = qword_10229FDD8;
        v17 = objc_msgSend(a2, "bundleId");
        v18 = sub_101464ABC(objc_msgSend(a2, "state"));
        v28 = 138412546;
        v29 = (uint64_t)v17;
        v30 = 2112;
        v31 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "Firing alarm on client: %@, current state: %@.", &v28, 22);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      objc_msgSend(objc_msgSend(v9, "adapter"), "fireAlarm:error:", a2, 100);
    }
    else
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v13 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
      {
        v14 = objc_msgSend(a2, "bundleId");
        v15 = sub_101464ABC(objc_msgSend(a2, "state"));
        *(_DWORD *)buf = 138412546;
        v33 = (uint64_t)v14;
        v34 = 2112;
        v35 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Unable to fire alarm on client, client is not registered: %@, current state: %@.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v21 = qword_10229FDD8;
        v22 = objc_msgSend(a2, "bundleId");
        v23 = sub_101464ABC(objc_msgSend(a2, "state"));
        v28 = 138412546;
        v29 = (uint64_t)v22;
        v30 = 2112;
        v31 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "Unable to fire alarm on client, client is not registered: %@, current state: %@.", &v28, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
    }
    sub_100E3E6F0(*(_QWORD *)(a1 + 192));
  }
  else
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v4 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v33 = sub_101464ABC(objc_msgSend(a2, "state"));
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Will not fire due to invalid fire state, current state: %@.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v5 = qword_10229FDD8;
      v28 = 138412290;
      v29 = sub_101464ABC(objc_msgSend(a2, "state"));
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 1, "Will not fire due to invalid fire state, current state: %@.", &v28, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100997BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100997BE0(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = objc_msgSend(a2, "length");
  if (!v2)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v3 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid alarm bundle identifier!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid alarm bundle identifier!", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::isBundleValid(NSString *)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return v2 != 0;
}

uint64_t sub_100997D84(uint64_t result, uint64_t a2, int a3)
{
  if (a3 && a3 != 100)
  {
    result = *(_QWORD *)(result + 32);
    if (result)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100997DA4(uint64_t a1, int a2, int a3, unint64_t __val)
{
  _QWORD *v5;
  unint64_t v6;
  NSObject *v7;
  const char *v9;
  int *v10;
  std::string v11;
  int v12;
  unint64_t v13;
  int buf;
  uint8_t buf_4[8];

  v5 = *(_QWORD **)(a1 + 176);
  if (!v5)
  {
LABEL_6:
    std::to_string(&v11, __val);
    CFAbsoluteTimeGetCurrent();
    operator new();
  }
  while (1)
  {
    v6 = v5[4];
    if (v6 <= __val)
      break;
LABEL_5:
    v5 = (_QWORD *)*v5;
    if (!v5)
      goto LABEL_6;
  }
  if (v6 < __val)
  {
    ++v5;
    goto LABEL_5;
  }
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v7 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    buf = 134217984;
    *(_QWORD *)buf_4 = __val;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Time alarm already exists for id: %llu.", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v12 = 134217984;
    v13 = __val;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Time alarm already exists for id: %llu.", &v12);
    v10 = (int *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addTimeAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)", "%s\n", v9);
    if (v10 != &buf)
      free(v10);
  }
  return 1;
}

void sub_1009981F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_100694874(&a11, 0);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100998268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, BOOL a6)
{
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  xpc_object_t v13;
  id v14;
  _QWORD handler[6];
  int v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;

  if (objc_msgSend(*(id *)(a1 + 152), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4)))
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v10 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Class A timer alarm already exists for id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v17 = 134217984;
      v18 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Class A timer alarm already exists for id: %llu.", &v17);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addClassATimerAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v13 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_REPEATING, a6);
    xpc_dictionary_set_int64(v13, XPC_ACTIVITY_INTERVAL, a5);
    xpc_dictionary_set_int64(v13, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
    xpc_dictionary_set_int64(v13, XPC_ACTIVITY_DELAY, a5);
    xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_REQUIRES_CLASS_A, 1);
    xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLMotionAlarmNotifier"));
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10099A600;
    handler[3] = &unk_1021384B8;
    handler[4] = v14;
    handler[5] = a4;
    xpc_activity_register(-[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.locationd.MotionAlarm_%llu"), a4), "UTF8String"), v13, handler);
    xpc_release(v13);
  }
  return 1;
}

uint64_t sub_100998564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t result;
  const char *v15;
  uint8_t *v16;
  NSNumber *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;

  v10 = 0;
  v11 = 0;
  switch(a6)
  {
    case 22:
      goto LABEL_16;
    case 23:
      v10 = 0;
      goto LABEL_15;
    case 24:
      v11 = 0;
      v10 = 1;
      goto LABEL_16;
    case 25:
      v10 = 1;
LABEL_15:
      v11 = 1;
LABEL_16:
      v17 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4);
      if (objc_msgSend(*(id *)(a1 + 128), "objectForKeyedSubscript:", v17))
      {
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v18 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v33 = a4;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Workout alarm already exists for id: %llu.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v24 = 134217984;
          v25 = a4;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Workout alarm already exists for id: %llu.", &v24);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addWorkoutEventAlarm(NSString *, NSString *, uint64_t, uint32_t, CMMotionAlarmType)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
      }
      else
      {
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v21 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138478595;
          v33 = a2;
          v34 = 2048;
          v35 = a4;
          v36 = 2048;
          v37 = v11;
          v38 = 1024;
          v39 = a5;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Saving workout alarm for client: %{private}@, id: %llu, trigger: %ld duration: %u.", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v24 = 138478595;
          v25 = a2;
          v26 = 2048;
          v27 = a4;
          v28 = 2048;
          v29 = v11;
          v30 = 1024;
          v31 = a5;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Saving workout alarm for client: %{private}@, id: %llu, trigger: %ld duration: %u.", &v24, 38);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addWorkoutEventAlarm(NSString *, NSString *, uint64_t, uint32_t, CMMotionAlarmType)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        objc_msgSend(*(id *)(a1 + 128), "setObject:forKeyedSubscript:", -[CLWorkoutAlarm initWithType:dataCollection:]([CLWorkoutAlarm alloc], "initWithType:dataCollection:", v11, v10), v17);
      }
      result = 1;
      break;
    default:
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v12 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Unsupported Alarm Type", buf, 2u);
      }
      v13 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        LOWORD(v24) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unsupported Alarm Type", &v24, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addWorkoutEventAlarm(NSString *, NSString *, uint64_t, uint32_t, CMMotionAlarmType)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_100998A88(uint64_t a1, void *a2, uint64_t a3, std::string::size_type a4, uint64_t a5, unsigned int a6)
{
  NSNumber *v11;
  NSNumber *v12;
  NSObject *v13;
  _BOOL8 v14;
  NSObject *v15;
  CMActivityAlarmLocal *v16;
  id v17;
  CMActivityAlarmLocal *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v22;
  std::string *v23;
  const char *v24;
  std::string *v25;
  const char *v26;
  std::string *v27;
  const char *v28;
  std::string *v29;
  _QWORD v30[5];
  int v31;
  void *v32;
  __int16 v33;
  std::string::size_type v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unsigned int v38;
  _BYTE v39[12];
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *__p;
  char v52;
  std::string buf;
  int v54;
  __int16 v55;
  unsigned int v56;

  v11 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4);
  if (v11)
  {
    v12 = v11;
    if (objc_msgSend(*(id *)(a1 + 160), "objectForKeyedSubscript:", v11))
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v13 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a4;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CardioChange alarm already exists for id: %llu.", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        *(_DWORD *)v39 = 134217984;
        *(_QWORD *)&v39[4] = a4;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "CardioChange alarm already exists for id: %llu.", v39);
        v23 = (std::string *)v22;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", v22);
        if (v23 != &buf)
          free(v23);
      }
      return 1;
    }
    else
    {
      sub_1015A2E04(&buf, (char *)objc_msgSend(a2, "UTF8String"));
      sub_1001AE67C(&buf, (uint64_t)v39);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v16 = [CMActivityAlarmLocal alloc];
      v17 = objc_msgSend(*(id *)(a1 + 40), "queue");
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10099ADD0;
      v30[3] = &unk_102142BD0;
      v30[4] = a1;
      v18 = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:forClient:withHandler:](v16, "initWithTrigger:duration:onQueue:forClient:withHandler:", a5, v17, v39, v30, (double)a6);
      v14 = v18 != 0;
      if (v18)
      {
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v19 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138478595;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
          v54 = a5;
          v55 = 1024;
          v56 = a6;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Saving CardioChange alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.", (uint8_t *)&buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v31 = 138478595;
          v32 = a2;
          v33 = 2048;
          v34 = a4;
          v35 = 1024;
          v36 = a5;
          v37 = 1024;
          v38 = a6;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Saving CardioChange alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.", &v31, 34);
          v27 = (std::string *)v26;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", v26);
          if (v27 != &buf)
            free(v27);
        }
        objc_msgSend(*(id *)(a1 + 160), "setObject:forKeyedSubscript:", v18, v12);

      }
      else
      {
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v20 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138478083;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to create CardioChange alarm for client: %{private}@, id: %llu.", (uint8_t *)&buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v31 = 138478083;
          v32 = a2;
          v33 = 2048;
          v34 = a4;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Failed to create CardioChange alarm for client: %{private}@, id: %llu.", &v31, 22);
          v29 = (std::string *)v28;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", v28);
          if (v29 != &buf)
            free(v29);
        }
      }
      if (v52 < 0)
        operator delete(__p);
      if (v50 < 0)
        operator delete(v49);
      if (v48 < 0)
        operator delete(v47);
      if (v46 < 0)
        operator delete(v45);
      if (v44 < 0)
        operator delete(v43);
      if (v42 < 0)
        operator delete(v41);
      if (v40 < 0)
        operator delete(*(void **)v39);
    }
  }
  else
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v15 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Unable to create CardioChange alarm key.", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      *(_WORD *)v39 = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to create CardioChange alarm key.", v39, 2);
      v25 = (std::string *)v24;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", v24);
      if (v25 != &buf)
        free(v25);
    }
    return 0;
  }
  return v14;
}

void sub_1009991D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  sub_100010174((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100999210(uint64_t a1, void *a2, uint64_t a3, std::string::size_type a4, uint64_t a5, unsigned int a6)
{
  NSObject *v6;
  const char *v7;
  std::string *v8;
  NSNumber *v14;
  NSNumber *v15;
  NSObject *v16;
  _BOOL8 v17;
  NSObject *v18;
  CMActivityAlarmLocal *v20;
  id v21;
  CMActivityAlarmLocal *v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  std::string *v26;
  const char *v27;
  const char *v28;
  std::string *v29;
  const char *v30;
  std::string *v31;
  _QWORD v32[5];
  int v33;
  void *v34;
  __int16 v35;
  std::string::size_type v36;
  __int16 v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  _BYTE v41[12];
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *__p;
  char v54;
  std::string buf;
  int v56;
  __int16 v57;
  unsigned int v58;

  if (a5 >= 0x1C)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v6 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid trigger type!", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    *(_WORD *)v41 = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid trigger type!", v41, 2);
    v8 = (std::string *)v7;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", v7);
LABEL_60:
    if (v8 != &buf)
      free(v8);
    return 0;
  }
  v14 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4);
  if (!v14)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v18 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Unable to create activity alarm key.", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    *(_WORD *)v41 = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to create activity alarm key.", v41, 2);
    v8 = (std::string *)v27;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", v27);
    goto LABEL_60;
  }
  v15 = v14;
  if (objc_msgSend(*(id *)(a1 + 120), "objectForKeyedSubscript:", v14))
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v16 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a4;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Activity alarm already exists for id: %llu.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      *(_DWORD *)v41 = 134217984;
      *(_QWORD *)&v41[4] = a4;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Activity alarm already exists for id: %llu.", v41);
      v26 = (std::string *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", v25);
      if (v26 != &buf)
        free(v26);
    }
    return 1;
  }
  else
  {
    sub_1015A2E04(&buf, (char *)objc_msgSend(a2, "UTF8String"));
    sub_1001AE67C(&buf, (uint64_t)v41);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v20 = [CMActivityAlarmLocal alloc];
    v21 = objc_msgSend(*(id *)(a1 + 40), "queue");
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10099A7EC;
    v32[3] = &unk_102142BD0;
    v32[4] = a1;
    v22 = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:forClient:withHandler:](v20, "initWithTrigger:duration:onQueue:forClient:withHandler:", a5, v21, v41, v32, (double)a6);
    v17 = v22 != 0;
    if (v22)
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v23 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138478595;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        v56 = a5;
        v57 = 1024;
        v58 = a6;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Saving activity alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.", (uint8_t *)&buf, 0x22u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v33 = 138478595;
        v34 = a2;
        v35 = 2048;
        v36 = a4;
        v37 = 1024;
        v38 = a5;
        v39 = 1024;
        v40 = a6;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Saving activity alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.", &v33, 34);
        v29 = (std::string *)v28;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", v28);
        if (v29 != &buf)
          free(v29);
      }
      objc_msgSend(*(id *)(a1 + 120), "setObject:forKeyedSubscript:", v22, v15);

    }
    else
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v24 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138478083;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to create activity alarm for client: %{private}@, id: %llu.", (uint8_t *)&buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v33 = 138478083;
        v34 = a2;
        v35 = 2048;
        v36 = a4;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Failed to create activity alarm for client: %{private}@, id: %llu.", &v33, 22);
        v31 = (std::string *)v30;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", v30);
        if (v31 != &buf)
          free(v31);
      }
    }
    if (v54 < 0)
      operator delete(__p);
    if (v52 < 0)
      operator delete(v51);
    if (v50 < 0)
      operator delete(v49);
    if (v48 < 0)
      operator delete(v47);
    if (v46 < 0)
      operator delete(v45);
    if (v44 < 0)
      operator delete(v43);
    if (v42 < 0)
      operator delete(*(void **)v41);
  }
  return v17;
}

void sub_100999A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  sub_100010174((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100999AC0(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t result;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  unint64_t v20;
  uint8_t buf[4];
  unint64_t v22;

  v5 = *(_QWORD **)(a1 + 176);
  v3 = (uint64_t *)(a1 + 176);
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = (uint64_t **)(v3 - 1);
  v7 = v3;
  do
  {
    v8 = v4[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v3 && v7[4] <= a2)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v14 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Removing persistent alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v19 = 134217984;
      v20 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Removing persistent alarm for id: %llu.", &v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeTimeAlarm(uint64_t)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    sub_10016E3C4(v7[5]);
    sub_10099F26C(v6, v7);
    return 1;
  }
  else
  {
LABEL_12:
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v11 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unable to find persistent alarm for id: %llu.", buf, 0xCu);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v19 = 134217984;
      v20 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to find persistent alarm for id: %llu.", &v19);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::removeTimeAlarm(uint64_t)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
      return 0;
    }
  }
  return result;
}

BOOL sub_100999E20(uint64_t a1, uint64_t a2)
{
  NSNumber *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  v4 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a2);
  v5 = objc_msgSend(*(id *)(a1 + 120), "objectForKeyedSubscript:", v4);
  if (v5)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v6 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing activity alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v13 = 134217984;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Removing activity alarm for id: %llu.", &v13);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeActivityAlarm(uint64_t)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    objc_msgSend(v5, "invalidate");
    objc_msgSend(*(id *)(a1 + 120), "removeObjectForKey:", v4);
  }
  else
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v7 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unable to find activity alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v13 = 134217984;
      v14 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to find activity alarm for id: %llu.", &v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::removeActivityAlarm(uint64_t)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_10099A158(uint64_t a1, uint64_t a2)
{
  NSNumber *v3;
  id v4;
  id v5;

  v3 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a2);
  v4 = objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", v3);
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "invalidate");
    objc_msgSend(*(id *)(a1 + 144), "removeObjectForKey:", v3);
  }
  return v5 != 0;
}

uint64_t sub_10099A1C0(uint64_t a1, void *a2)
{
  NSObject *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *i;
  const char *v12;
  uint8_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  int v19;
  void *v20;
  uint8_t buf[4];
  void *v22;

  if (!sub_100997BE0(a1, a2))
    return 0;
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v4 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing all alarms for client: %{private}@.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v19 = 138477827;
    v20 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Removing all alarms for client: %{private}@.", &v19, 12);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeAllAlarmsForBundle(NSString *)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v5 = (void *)sub_100AB9F94(*(_QWORD *)(a1 + 112), a2);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v6)
    return 1;
  v7 = v6;
  v8 = *(_QWORD *)v15;
  LODWORD(v9) = 1;
  do
  {
    for (i = 0; i != v7; i = (char *)i + 1)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      v9 = v9 & sub_100993548(a1, *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i), 0);
    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  }
  while (v7);
  return v9;
}

void sub_10099A430(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLMotionAlarmNotifier::onPersistentTimerFired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021618F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onPersistentTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onPersistentTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_10099BF58(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_10099A5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10099A600(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  xpc_activity_state_t v8;
  uint8_t buf[4];
  xpc_activity_state_t state;

  objc_msgSend(*(id *)(a1 + 32), "onClassATimerActivity:withAlarmId:", a2, *(_QWORD *)(a1 + 40));
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v3 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v4 = qword_10229FDD8;
      v7 = 134349056;
      v8 = xpc_activity_get_state(a2);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 17, "Failed to mark activity as Continue. Current state is %{public}ld", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addClassATimerAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_10099A7EC(uint64_t a1, uint64_t a2)
{
  sub_10099A7F4(*(_QWORD *)(a1 + 32), a2);
}

void sub_10099A7F4(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  uint8_t *v17;
  void *__p[2];
  char v19;
  int v20;
  id v21;
  uint8_t buf[4];
  id v23;

  if (a2)
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 120), "allKeysForObject:", a2), "firstObject");
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 192);
      sub_1015A2E04(__p, "none");
      sub_10002B684(v5, (uint64_t *)__p);
      if (v19 < 0)
        operator delete(__p[0]);
      v6 = objc_msgSend(v4, "unsignedLongLongValue");
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v7 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v23 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Activity alarm timer fired: %llu.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v20 = 134217984;
        v21 = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Activity alarm timer fired: %llu.", &v20);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v6)))
      {
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v8 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Activity alarm is pending acknowledgment. Not firing alarm.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          LOWORD(v20) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Activity alarm is pending acknowledgment. Not firing alarm.", &v20, 2);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
      }
      else
      {
        sub_10099BD68(a1, (uint64_t)v6);
      }
      sub_100E3E6F0(*(_QWORD *)(a1 + 192));
      return;
    }
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v14 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid alarm identifier.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      LOWORD(v20) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid alarm identifier.", &v20, 2);
      v13 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)", "%s\n", v15);
LABEL_36:
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v11 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid alarm timer.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      LOWORD(v20) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid alarm timer.", &v20, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)", "%s\n", v12);
      goto LABEL_36;
    }
  }
}

void sub_10099ADAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10099ADD0(uint64_t a1)
{
  return sub_100995014(*(_QWORD *)(a1 + 32));
}

void sub_10099ADD8()
{
  operator new();
}

void sub_10099B5DC()
{
  operator delete();
}

void sub_10099B608(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  id v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  void *__p[2];
  char v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;

  v4 = objc_msgSend(a2, "bundleId");
  if ((sub_10099C770(a1, v4) & 1) != 0)
  {
    if ((int)objc_msgSend(a2, "state") > 11 || (int)objc_msgSend(a2, "state") <= 0)
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v12 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v37 = sub_101464ABC(objc_msgSend(a2, "state"));
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Invalid fire state: %@.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v15 = qword_10229FDD8;
        v32 = 138412290;
        v33 = sub_101464ABC(objc_msgSend(a2, "state"));
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 16, "Invalid fire state: %@.", &v32, 12);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 192);
      sub_1015A2E04(__p, "none");
      sub_10002B684(v5, (uint64_t *)__p);
      if (v31 < 0)
        operator delete(__p[0]);
      v6 = objc_msgSend(a2, "state");
      v7 = v6;
      sub_10099C590((uint64_t)v6, a2);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v8 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = sub_101464ABC(v7);
        v10 = sub_101464ABC(objc_msgSend(a2, "state"));
        *(_DWORD *)buf = 138412546;
        v37 = v9;
        v38 = 2112;
        v39 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Previous alarm state: %@, current state: %@.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v18 = qword_10229FDD8;
        v19 = sub_101464ABC(v7);
        v20 = sub_101464ABC(objc_msgSend(a2, "state"));
        v32 = 138412546;
        v33 = v19;
        v34 = 2112;
        v35 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "Previous alarm state: %@, current state: %@.", &v32, 22);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      if ((int)objc_msgSend(a2, "state") < 12)
      {
        if ((sub_100AB9188(*(_QWORD *)(a1 + 112), a2) & 1) == 0)
        {
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v13 = qword_10229FDD8;
          if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_FAULT))
          {
            v14 = objc_msgSend(a2, "alarmId");
            *(_DWORD *)buf = 134217984;
            v37 = (uint64_t)v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Failed to update state for the alarm: %llu!", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FDD0 != -1)
              dispatch_once(&qword_10229FDD0, &stru_102161910);
            v25 = qword_10229FDD8;
            v26 = objc_msgSend(a2, "alarmId");
            v32 = 134217984;
            v33 = (uint64_t)v26;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 17, "Failed to update state for the alarm: %llu!", &v32);
            v28 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
        }
        sub_10099C9A0(a1, v4);
        sub_100997640(a1, a2);
        if (objc_msgSend(a2, "type") != 19)
          sub_10099CBA8(a1, a2);
        sub_100E3E6F0(*(_QWORD *)(a1 + 192));
      }
      else
      {
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v11 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138477827;
          v37 = (uint64_t)v4;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Maximum launch attempts reached for: %{private}@.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          v32 = 138477827;
          v33 = (uint64_t)v4;
          LODWORD(v29) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Maximum launch attempts reached for: %{private}@.", &v32, v29);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        sub_100993548(a1, a2, 0);
        sub_100E3E6F0(*(_QWORD *)(a1 + 192));
      }
    }
  }
  else
  {
    sub_10099A1C0(a1, v4);
  }
}

void sub_10099BD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10099BD68(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v4 = (void *)sub_100ABA2EC(*(_QWORD *)(a1 + 112));
  if (v4)
  {
    sub_10099B608(a1, v4);
  }
  else
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v5 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to find alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v8 = 134217984;
      v9 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unable to find alarm for id: %llu.", &v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::fireAlarmWithRetry(uint64_t)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_10099BF58(uint64_t a1, uint64_t a2)
{
  std::string::size_type size;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  void *__p[2];
  char v19;
  std::string __str;
  int v21;
  unint64_t v22;
  uint8_t buf[4];
  unint64_t v24;

  if (a2)
  {
    sub_1009865BC(a2, (uint64_t)&__str);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      v4 = *(_QWORD *)(a1 + 192);
      sub_1015A2E04(__p, "none");
      sub_10002B684(v4, (uint64_t *)__p);
      if (v19 < 0)
        operator delete(__p[0]);
      v5 = std::stoull(&__str, 0, 10);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v6 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v24 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Persistent timer fired id: %llu.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v21 = 134217984;
        v22 = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Persistent timer fired id: %llu.", &v21);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v5)))
      {
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        v7 = qword_10229FDD8;
        if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Persistent timer is pending acknowledgment. Not firing alarm.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDD0 != -1)
            dispatch_once(&qword_10229FDD0, &stru_102161910);
          LOWORD(v21) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Persistent timer is pending acknowledgment. Not firing alarm.", &v21, 2);
          v9 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)", "%s\n", v8);
          if (v9 != buf)
            free(v9);
        }
      }
      else
      {
        sub_10099BD68(a1, v5);
      }
      sub_100E3E6F0(*(_QWORD *)(a1 + 192));
    }
    else
    {
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v13 = qword_10229FDD8;
      if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unexpected alarm identifier.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDD0 != -1)
          dispatch_once(&qword_10229FDD0, &stru_102161910);
        LOWORD(v21) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Unexpected alarm identifier.", &v21, 2);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v10 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Invalid alarm timer.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 16, "Invalid alarm timer.", &__str, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_10099C544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10099C590(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  id v12;
  uint8_t buf[4];
  id v14;

  v3 = objc_msgSend(a2, "state");
  v4 = v3 + 1;
  if (v3 == 12)
  {
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v5 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v14 = objc_msgSend(a2, "alarmId");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Alarm state is rolling over for alarm: %llu.", buf, 0xCu);
    }
    v6 = sub_1001BFF7C(115, 0);
    v4 = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      v8 = qword_10229FDD8;
      v11 = 134217984;
      v12 = objc_msgSend(a2, "alarmId");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 17, "Alarm state is rolling over for alarm: %llu.", &v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::incrementState(CMMotionAlarm *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
      v4 = 0;
    }
  }
  return objc_msgSend(a2, "setState:", v4);
}

uint64_t sub_10099C770(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  unsigned int v6;
  id v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v12;
  void *v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  int v19;

  if ((objc_msgSend(a2, "hasPrefix:", CFSTR("/")) & 1) != 0)
    return 1;
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLAppMonitor"));
  v6 = objc_msgSend(objc_msgSend(a2, "pathExtension"), "isEqualToString:", CFSTR("watchkitextension"));
  v7 = a2;
  if (v6)
    v7 = objc_msgSend(a2, "stringByDeletingPathExtension", a2);
  v4 = objc_msgSend(v5, "syncgetIsApplicationInstalledLocally:", v7);
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v8 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478083;
    v17 = a2;
    v18 = 1024;
    v19 = (int)v4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Application %{private}@ installed: %d.", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v12 = 138478083;
    v13 = a2;
    v14 = 1024;
    v15 = (int)v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Application %{private}@ installed: %d.", &v12, 18);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::isApplicationInstalled(NSString *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return (uint64_t)v4;
}

uint64_t sub_10099C9A0(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  unsigned int v6;
  id v7;
  const char *v9;
  uint8_t *v10;
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v4 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Launching application: %{private}@.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Launching application: %{private}@.", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::launchApplication(NSString *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLApplicationLifecycleManager"));
  v6 = objc_msgSend(objc_msgSend(a2, "pathExtension"), "isEqualToString:", CFSTR("watchkitextension"));
  v7 = a2;
  if (v6)
    v7 = objc_msgSend(a2, "stringByDeletingPathExtension", a2);
  objc_msgSend(v5, "launchApplication:requiringAuthForServiceMask:", v7, 0);
  objc_msgSend(v5, "launchDaemon:", a2);
  return 1;
}

void sub_10099CBA8(uint64_t a1, void *a2)
{
  id v4;
  NSNumber *v5;
  id v6;
  unsigned int v7;
  _QWORD v8[6];

  v4 = objc_msgSend(a2, "alarmId");
  v5 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(a2, "alarmId"));
  v6 = objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", v5);
  if (!v6)
  {
    v6 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
    objc_msgSend(*(id *)(a1 + 144), "setObject:forKeyedSubscript:", v6, v5);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10099CCC0;
  v8[3] = &unk_102143528;
  v8[4] = a1;
  v8[5] = v4;
  objc_msgSend(v6, "setHandler:", v8);
  if (objc_msgSend(a2, "duration") < 0x3D)
    v7 = 60;
  else
    v7 = objc_msgSend(a2, "duration");
  objc_msgSend(v6, "setNextFireDelay:", (double)((objc_msgSend(a2, "state") - 1) * v7));

}

uint64_t sub_10099CCC0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_10229FDD0 != -1)
    dispatch_once(&qword_10229FDD0, &stru_102161910);
  v3 = qword_10229FDD8;
  if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134217984;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Re-firing alarm: %llu.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v6 = *(_QWORD *)(a1 + 40);
    v9 = 134217984;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Re-firing alarm: %llu.", &v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::setupRetryTimerForAlarm(CMMotionAlarm *)_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_10099BD68(v2, *(_QWORD *)(a1 + 40));
}

id sub_10099CE80(uint64_t a1, uint64_t a2)
{
  return sub_10061F764(120.0, a2, 19, *(void **)(a1 + 32), 300, 0, 0, 0, 0, 0);
}

id sub_10099CEC8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = objc_msgSend(*(id *)(a1 + 32), "silo");
  if (*a3 == 8)
  {
    v10 = *(_QWORD *)(a4 + 8);
    v9 = a4 + 8;
    v8 = v10;
    if (*(char *)(v9 + 23) >= 0)
      v11 = v9;
    else
      v11 = v8;
    return (id)sub_10099A1C0(a1, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
  }
  return result;
}

void sub_10099CF3C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;

  objc_msgSend(*(id *)(a1 + 32), "silo");
  if (*a3 == 1)
  {
    v7 = *(unsigned __int8 *)(a4 + 4);
    *(_BYTE *)(a1 + 109) = v7;
    if (v7)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 208) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8), 1);
      sub_10099ADD8();
    }
    if (qword_10229FDD0 != -1)
      dispatch_once(&qword_10229FDD0, &stru_102161910);
    v8 = qword_10229FDD8;
    if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 109))
        v9 = "Yes";
      else
        v9 = "No";
      *(_DWORD *)buf = 136380675;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device unlocked since boot: %{private}s.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDD0 != -1)
        dispatch_once(&qword_10229FDD0, &stru_102161910);
      if (*(_BYTE *)(a1 + 109))
        v10 = "Yes";
      else
        v10 = "No";
      v13 = 136380675;
      v14 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Device unlocked since boot: %{private}s.", &v13, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onDataProtectionManagerNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

_QWORD *sub_10099D15C(_QWORD *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  id v5;
  unint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  unsigned __int8 v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  __int16 v22;
  void *__p[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[1632];
  _BYTE v30[128];

  if (*a3 == 2)
  {
    v4 = (uint64_t)result;
    v5 = *(id *)(a4 + 16);
    v6 = *(_QWORD *)(a4 + 112);
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v7 = (void *)result[16];
    result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    v8 = result;
    if (result)
    {
      v9 = *(_QWORD *)v26;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v26 != v9)
            objc_enumerationMutation(v7);
          v11 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v10);
          v12 = objc_msgSend(*(id *)(v4 + 128), "objectForKey:", v11);
          if (objc_msgSend(v12, "eventType") == v5)
          {
            v13 = objc_msgSend(v12, "eligibleForDataCollection");
            if (v6 <= 0x18 && ((1 << v6) & 0x10F803E) != 0)
            {
              if ((v13 & 1) == 0)
                goto LABEL_30;
            }
            else if ((v13 & 1) != 0)
            {
              goto LABEL_30;
            }
            v14 = *(_QWORD *)(v4 + 192);
            sub_1015A2E04(__p, "none");
            sub_10002B684(v14, (uint64_t *)__p);
            if (v24 < 0)
              operator delete(__p[0]);
            if (objc_msgSend(*(id *)(v4 + 144), "objectForKeyedSubscript:", v11))
            {
              if (qword_10229FDD0 != -1)
                dispatch_once(&qword_10229FDD0, &stru_102161910);
              v15 = qword_10229FDD8;
              if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Workout alarm is pending acknowledgment. Not firing alarm.", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FDD0 != -1)
                  dispatch_once(&qword_10229FDD0, &stru_102161910);
                v22 = 0;
                LODWORD(v21) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 2, "Workout alarm is pending acknowledgment. Not firing alarm.", &v22, v21);
                v17 = (uint8_t *)v16;
                sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v16);
                if (v17 != buf)
                  free(v17);
              }
            }
            else
            {
              if (qword_10229FDD0 != -1)
                dispatch_once(&qword_10229FDD0, &stru_102161910);
              v18 = qword_10229FDD8;
              if (os_log_type_enabled((os_log_t)qword_10229FDD8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Firing workout alarm with with event type", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FDD0 != -1)
                  dispatch_once(&qword_10229FDD0, &stru_102161910);
                v22 = 0;
                LODWORD(v21) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDD8, 0, "Firing workout alarm with with event type", &v22, v21);
                v20 = (uint8_t *)v19;
                sub_100512490("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v19);
                if (v20 != buf)
                  free(v20);
              }
              sub_10099BD68(v4, (uint64_t)objc_msgSend(v11, "unsignedLongLongValue"));
            }
            sub_100E3E6F0(*(_QWORD *)(v4 + 192));
          }
LABEL_30:
          v10 = (_QWORD *)((char *)v10 + 1);
        }
        while (v8 != v10);
        result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
        v8 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_10099D574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10099D598@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_10099D610()
{
  return 1;
}

uint64_t sub_10099D618()
{
  return 1;
}

void sub_10099D620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021618F0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021618F0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10099D894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A5F80);
}

uint64_t sub_10099D8A8(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10099F2D4();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A5F81;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021618F0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_10099DD04(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021618F0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10099DF84(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021618F0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021618F0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10099E30C(uint64_t a1, int *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _BYTE *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_BYTE **)(v7 + 64);
  if (!v11)
    return 0;
  *a3 = *v11;
  return 1;
}

uint64_t sub_10099E36C(uint64_t a1, int *a2, char *a3)
{
  _QWORD *v6;
  char v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_102161A60;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  *((_BYTE *)v6 + 24) = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_10099E440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10099E454(uint64_t a1, signed __int32 *a2, _BYTE *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_102161A60;
      v24[1] = 0;
      *((_BYTE *)v24 + 24) = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10099FCD0();
    os_activity_scope_leave(&state);
  }
}

void sub_10099EA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10099EAD8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021618F0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::listClients() [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021618F0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021618F0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::listClients() [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021618F0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021618F0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::listClients() [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10099F080(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10099F0AC(id a1)
{
  qword_10229FDD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionAlarm");
}

void sub_10099F0D8(id a1)
{
  qword_10229FF58 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

void sub_10099F104(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10099F104(a1, *a2);
    sub_10099F104(a1, a2[1]);
    sub_100694874(a2 + 5, 0);
    operator delete(a2);
  }
}

void sub_10099F150(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
    operator delete();
  }
}

uint64_t *sub_10099F1B0(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    v11 = *a3;
    v12 = a3[1];
    a3[1] = 0;
    v10[4] = v11;
    v10[5] = v12;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *sub_10099F26C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = sub_10008A9F0(a1, a2);
  sub_100694874(a2 + 5, 0);
  operator delete(a2);
  return v3;
}

void sub_10099F2A8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10099F2D4()
{
  operator new();
}

_BYTE *sub_10099F364(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10099F460(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_10099F440(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_10099F460(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10099F4D8(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_10099F860(a1);
  else
    return 0;
}

id sub_10099F4D8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_10099FC0C((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102161A30);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BE9B06 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102161A30);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102161A30);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BE9B06 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102161A30);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionAlarm_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10099F860(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102161A30);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE9B06 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102161A30);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102161A30);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE9B06 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102161A30);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionAlarm_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10099FC0C(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B9A8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1)
      sub_101910DA0();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_10099FC80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102161A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10099FC94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102161A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10099FCD0()
{
  operator new();
}

void sub_10099FD60(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_10099F460(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10099F364(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021618F0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021618F0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_1009A0134(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_1009A0154()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BE9A68;
      v1[3] = unk_101BE9A78;
      v1[4] = xmmword_101BE9A88;
      v1[0] = xmmword_101BE9A48;
      v1[1] = unk_101BE9A58;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1009A0228(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1009A0240(uint64_t a1, char *a2, uint64_t *a3, double a4)
{
  char *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  double v12;
  uint8_t buf[1640];

  v12 = a4;
  sub_10067D0DC(a1, a3, &v12);
  *(_QWORD *)a1 = off_102161AB0;
  sub_1015A2E04((_QWORD *)(a1 + 232), a2);
  sub_100E81598((_QWORD *)(a1 + 256), a1 + 64, 0);
  if (sub_1000CC4F4(a1 + 64))
  {
    v6 = (char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0)
      v6 = *(char **)(a1 + 232);
    sub_100634364(a1 + 64, v6, (const char **)&qword_102305B50, 0, 0);
    sub_10067D20C(a1);
    sub_1009A0498();
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102161AE0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Database is not valid; not initializing",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102161AE0);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Database is not valid; not initializing",
        &v11,
        2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CLCdmaCellLocationDatabase::CLCdmaCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return a1;
}

void sub_1009A0460(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 255) < 0)
    operator delete(*v2);
  sub_10067D1C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009A0498()
{
  uint64_t v0;
  _QWORD v2[3];
  _QWORD v3[10];
  char v4;
  uint64_t v5;

  sub_100263E50((uint64_t)v2);
  *(_QWORD *)((char *)v2
  v2[2] = v0;
  if (v4 < 0)
    operator delete((void *)v3[8]);
  std::streambuf::~streambuf(v3);
  return std::ios::~ios(&v5);
}

uint64_t sub_1009A052C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_102161AB0;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102161AE0);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Delete CLCdmaCellLocationDatabase", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102161AE0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Delete CLCdmaCellLocationDatabase", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual CLCdmaCellLocationDatabase::~CLCdmaCellLocationDatabase()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  sub_10067D1C4(a1);
  return a1;
}

void sub_1009A06E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1009A06F4(uint64_t a1)
{
  sub_1009A052C(a1);
  operator delete();
}

char *sub_1009A0718@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 29), *((_QWORD *)result + 30));
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 31);
  return result;
}

void sub_1009A0744(uint64_t a1)
{
  sub_1009A07BC(a1);
}

void sub_1009A07BC(uint64_t a1)
{
  _QWORD *v2;
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *p_p;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  void *__p;
  char v30;

  sub_100263E50((uint64_t)&v26);
  v2 = sub_100263F7C(&v27, (uint64_t)"SELECT ", 7);
  v3 = strlen("ROWID");
  v4 = sub_100263F7C(v2, (uint64_t)"ROWID", v3);
  v5 = sub_100263F7C(v4, (uint64_t)" FROM ", 6);
  v6 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v6 = *(const char **)v6;
  v7 = strlen(v6);
  v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)" WHERE ", 7);
  v10 = sub_100263F7C(v9, (uint64_t)"MCC", 3);
  v11 = sub_100263F7C(v10, (uint64_t)"=? AND ", 7);
  v12 = sub_100263F7C(v11, (uint64_t)"SID", 3);
  v13 = sub_100263F7C(v12, (uint64_t)"=? AND ", 7);
  v14 = sub_100263F7C(v13, (uint64_t)"NID", 3);
  v15 = sub_100263F7C(v14, (uint64_t)"=? AND ", 7);
  v16 = sub_100263F7C(v15, (uint64_t)"BSID", 4);
  v17 = sub_100263F7C(v16, (uint64_t)"=? AND ", 7);
  v18 = sub_100263F7C(v17, (uint64_t)"ZONEID", 6);
  v19 = sub_100263F7C(v18, (uint64_t)"=? AND ", 7);
  v20 = sub_100263F7C(v19, (uint64_t)"BANDCLASS", 9);
  v21 = sub_100263F7C(v20, (uint64_t)"=? AND ", 7);
  v22 = sub_100263F7C(v21, (uint64_t)"CHANNEL", 7);
  v23 = sub_100263F7C(v22, (uint64_t)"=? AND ", 7);
  v24 = sub_100263F7C(v23, (uint64_t)"PNOFFSET", 8);
  sub_100263F7C(v24, (uint64_t)"=?", 2);
  std::stringbuf::str(&__p, v28);
  if (v30 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1 + 64, p_p);
}

void sub_1009A0D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1009A0DE8(uint64_t a1, int *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *p_p;
  uint64_t v28;
  uint64_t v29;
  sqlite3_stmt *v30;
  sqlite3_stmt *v31;
  sqlite3_stmt *v32;
  sqlite3_stmt *v33;
  sqlite3_stmt *v34;
  sqlite3_stmt *v35;
  sqlite3_stmt *v36;
  sqlite3_stmt *v37;
  sqlite3_stmt *v38;
  uint64_t v39;
  NSObject *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  const char *v63;
  void **v64;
  const char *v65;
  void **v66;
  uint64_t v67;
  sqlite3_int64 v68;
  void *__p;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  __int128 v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  void *v99;
  char v100;
  _BYTE v101[152];

  v68 = 0;
  v6 = (_QWORD *)(a1 + 256);
  if (sub_100E815A0((_QWORD *)(a1 + 256)))
  {
LABEL_13:
    sub_100087AF4(v6, &v67);
    v30 = (sqlite3_stmt *)sub_100026CC8(v67);
    if (sub_1000CD75C(v30, 1, *a2)
      && (v31 = (sqlite3_stmt *)sub_100026CC8(v67), sub_1000CD75C(v31, 2, a2[8]))
      && (v32 = (sqlite3_stmt *)sub_100026CC8(v67), sub_1000CD75C(v32, 3, a2[9]))
      && (v33 = (sqlite3_stmt *)sub_100026CC8(v67), sub_1000CD75C(v33, 4, a2[11]))
      && (v34 = (sqlite3_stmt *)sub_100026CC8(v67), sub_1000CD75C(v34, 5, a2[10]))
      && (v35 = (sqlite3_stmt *)sub_100026CC8(v67), sub_1000CD75C(v35, 6, a2[12]))
      && (v36 = (sqlite3_stmt *)sub_100026CC8(v67), sub_1000CD75C(v36, 7, a2[13]))
      && (v37 = (sqlite3_stmt *)sub_100026CC8(v67), sub_1000CD75C(v37, 8, a2[14])))
    {
      v38 = (sqlite3_stmt *)sub_100026CC8(v67);
      sub_10023C9B0(a1 + 64, v38);
      v68 = sub_10063E99C(a1 + 64);
      v39 = sub_10067E190((_QWORD *)a1, &v68, a3);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102161AE0);
      v40 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v41 = *a2;
        v42 = a2[58];
        v43 = a2[8];
        v44 = a2[9];
        v46 = a2[10];
        v45 = a2[11];
        v47 = a2[12];
        v48 = a2[13];
        v49 = a2[14];
        LODWORD(__p) = 67111168;
        HIDWORD(__p) = v41;
        v70 = 1024;
        v71 = v42;
        v72 = 1024;
        v73 = v43;
        v74 = 1024;
        v75 = v44;
        v76 = 1024;
        v77 = v45;
        v78 = 1024;
        v79 = v46;
        v80 = 1024;
        v81 = v47;
        v82 = 1024;
        v83 = v48;
        v84 = 1024;
        v85 = v49;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "SET could not bind %d %d %d %d %d %d %d %d %d", (uint8_t *)&__p, 0x38u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102161AE0);
        v54 = *a2;
        v55 = a2[58];
        v56 = a2[8];
        v57 = a2[9];
        v59 = a2[10];
        v58 = a2[11];
        v60 = a2[12];
        v61 = a2[13];
        v62 = a2[14];
        LODWORD(v86) = 67111168;
        HIDWORD(v86) = v54;
        v87 = 1024;
        v88 = v55;
        v89 = 1024;
        LODWORD(v90) = v56;
        WORD2(v90) = 1024;
        *(_DWORD *)((char *)&v90 + 6) = v57;
        WORD5(v90) = 1024;
        HIDWORD(v90) = v58;
        v91 = 1024;
        v92 = v59;
        v93 = 1024;
        v94 = v60;
        v95 = 1024;
        v96 = v61;
        v97 = 1024;
        v98 = v62;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A02D8, 17, "SET could not bind %d %d %d %d %d %d %d %d %d", &v86, 56, v67, v68);
        v64 = (void **)v63;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLCdmaCellLocationDatabase::setLocation(const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &)", "%s\n", v63);
        if (v64 != &__p)
          free(v64);
      }
      v39 = 0;
    }
    v50 = v67;
    v67 = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    return v39;
  }
  sub_100263E50((uint64_t)&v86);
  v7 = sub_100263F7C(&v90, (uint64_t)"INSERT OR REPLACE INTO ", 23);
  v8 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v8 = *(const char **)v8;
  v9 = strlen(v8);
  v10 = sub_100263F7C(v7, (uint64_t)v8, v9);
  v11 = sub_100263F7C(v10, (uint64_t)" (", 2);
  v12 = sub_100263F7C(v11, (uint64_t)"MCC", 3);
  v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
  v14 = sub_100263F7C(v13, (uint64_t)"SID", 3);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"NID", 3);
  v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
  v18 = sub_100263F7C(v17, (uint64_t)"BSID", 4);
  v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
  v20 = sub_100263F7C(v19, (uint64_t)"ZONEID", 6);
  v21 = sub_100263F7C(v20, (uint64_t)", ", 2);
  v22 = sub_100263F7C(v21, (uint64_t)"BANDCLASS", 9);
  v23 = sub_100263F7C(v22, (uint64_t)", ", 2);
  v24 = sub_100263F7C(v23, (uint64_t)"CHANNEL", 7);
  v25 = sub_100263F7C(v24, (uint64_t)", ", 2);
  v26 = sub_100263F7C(v25, (uint64_t)"PNOFFSET", 8);
  sub_100263F7C(v26, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?, ?, ?)", 33);
  std::stringbuf::str(&__p, (char *)&v90 + 8);
  if ((v75 & 0x8000) == 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  *(_QWORD *)(a1 + 256) = sub_10063D314(a1 + 64, p_p);
  *(_QWORD *)(a1 + 264) = v28;
  if (SBYTE1(v75) < 0)
    operator delete(__p);
  if (sub_100E815A0(v6))
  {
    *(uint64_t *)((char *)&v86
    *(_QWORD *)&v90 = v29;
    if (v100 < 0)
      operator delete(v99);
    std::streambuf::~streambuf((char *)&v90 + 8);
    std::ios::~ios(v101);
    goto LABEL_13;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102161AE0);
  v51 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "Could not prepare cached insert statement", (uint8_t *)&__p, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102161AE0);
    LOWORD(v67) = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not prepare cached insert statement", &v67, 2);
    v66 = (void **)v65;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCdmaCellLocationDatabase::setLocation(const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &)", "%s\n", v65);
    if (v66 != &__p)
      free(v66);
  }
  *(uint64_t *)((char *)&v86
  *(_QWORD *)&v90 = v52;
  if (v100 < 0)
    operator delete(v99);
  std::streambuf::~streambuf((char *)&v90 + 8);
  std::ios::~ios(v101);
  return 0;
}

void sub_1009A153C(_Unwind_Exception *a1)
{
  sub_1018B38B4((uint64_t)&STACK[0x680]);
  _Unwind_Resume(a1);
}

void sub_1009A159C(uint64_t a1)
{
  sub_1009A07BC(a1);
}

void sub_1009A15DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  size_t v23;
  _QWORD *v24;
  char *p_p;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  void *__p;
  char v30;

  sub_100263E50((uint64_t)&v26);
  v2 = sub_100263F7C(&v27, (uint64_t)"SELECT ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"MCC", 3);
  v4 = sub_100263F7C(v3, (uint64_t)", ", 2);
  v5 = sub_100263F7C(v4, (uint64_t)"SID", 3);
  v6 = sub_100263F7C(v5, (uint64_t)", ", 2);
  v7 = sub_100263F7C(v6, (uint64_t)"NID", 3);
  v8 = sub_100263F7C(v7, (uint64_t)", ", 2);
  v9 = sub_100263F7C(v8, (uint64_t)"BSID", 4);
  v10 = sub_100263F7C(v9, (uint64_t)", ", 2);
  v11 = sub_100263F7C(v10, (uint64_t)"ZONEID", 6);
  v12 = sub_100263F7C(v11, (uint64_t)", ", 2);
  v13 = sub_100263F7C(v12, (uint64_t)"BANDCLASS", 9);
  v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
  v15 = sub_100263F7C(v14, (uint64_t)"CHANNEL", 7);
  v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
  v17 = sub_100263F7C(v16, (uint64_t)"PNOFFSET", 8);
  v18 = sub_100263F7C(v17, (uint64_t)" FROM ", 6);
  v19 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v19 = *(const char **)v19;
  v20 = strlen(v19);
  v21 = sub_100263F7C(v18, (uint64_t)v19, v20);
  v22 = sub_100263F7C(v21, (uint64_t)" WHERE ", 7);
  v23 = strlen("ROWID");
  v24 = sub_100263F7C(v22, (uint64_t)"ROWID", v23);
  sub_100263F7C(v24, (uint64_t)"=?", 2);
  std::stringbuf::str(&__p, v28);
  if (v30 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1 + 64, p_p);
}

void sub_1009A1C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1009A1CA0(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  void *v14;
  _BYTE *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  std::string __p;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;

  sub_1001C4198((uint64_t)&v13);
  *(_DWORD *)a1 = v13;
  if (&v13 != (int *)a1)
    sub_1002A3054((char *)(a1 + 8), (char *)v14, (uint64_t)v15, (v15 - (_BYTE *)v14) >> 2);
  v2 = v27[0];
  *(_OWORD *)(a1 + 192) = v26;
  *(_OWORD *)(a1 + 208) = v2;
  *(_OWORD *)(a1 + 220) = *(_OWORD *)((char *)v27 + 12);
  v3 = v23;
  *(_OWORD *)(a1 + 128) = v22;
  *(_OWORD *)(a1 + 144) = v3;
  v4 = v25;
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v4;
  v5 = v19;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v5;
  v6 = v21;
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v6;
  v7 = v17;
  *(_OWORD *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 48) = v7;
  std::string::operator=((std::string *)(a1 + 240), &__p);
  *(_DWORD *)(a1 + 424) = v39;
  v8 = v38;
  *(_OWORD *)(a1 + 392) = v37;
  *(_OWORD *)(a1 + 408) = v8;
  v9 = v34;
  *(_OWORD *)(a1 + 328) = v33;
  *(_OWORD *)(a1 + 344) = v9;
  v10 = v36;
  *(_OWORD *)(a1 + 360) = v35;
  *(_OWORD *)(a1 + 376) = v10;
  v11 = v30;
  *(_OWORD *)(a1 + 264) = v29;
  *(_OWORD *)(a1 + 280) = v11;
  v12 = v32;
  *(_OWORD *)(a1 + 296) = v31;
  *(_OWORD *)(a1 + 312) = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
}

void sub_1009A1D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100664030((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1009A1DB0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1009A1DDC()
{
  qword_102305B50 = (uint64_t)"MCC";
  dword_102305B58 = 1;
  word_102305B5C = 1;
  byte_102305B60 = 0;
  byte_102305B78 = 0;
  qword_102305B80 = (uint64_t)"SID";
  dword_102305B88 = 1;
  word_102305B8C = 1;
  byte_102305B90 = 0;
  byte_102305BA8 = 0;
  qword_102305BB0 = (uint64_t)"NID";
  dword_102305BB8 = 1;
  word_102305BBC = 1;
  byte_102305BC0 = 0;
  byte_102305BD8 = 0;
  qword_102305BE0 = (uint64_t)"BSID";
  dword_102305BE8 = 1;
  word_102305BEC = 1;
  byte_102305BF0 = 0;
  byte_102305C08 = 0;
  qword_102305C10 = (uint64_t)"ZONEID";
  dword_102305C18 = 1;
  word_102305C1C = 1;
  byte_102305C20 = 0;
  byte_102305C38 = 0;
  qword_102305C40 = (uint64_t)"BANDCLASS";
  dword_102305C48 = 1;
  word_102305C4C = 1;
  byte_102305C50 = 0;
  byte_102305C68 = 0;
  qword_102305C70 = (uint64_t)"CHANNEL";
  dword_102305C78 = 1;
  word_102305C7C = 1;
  byte_102305C80 = 0;
  byte_102305C98 = 0;
  qword_102305CA0 = (uint64_t)"PNOFFSET";
  dword_102305CA8 = 1;
  word_102305CAC = 1;
  byte_102305CB0 = 0;
  byte_102305CC8 = 0;
  qword_102305CD0 = (uint64_t)"Timestamp";
  dword_102305CD8 = 2;
  word_102305CDC = 0;
  byte_102305CE0 = 0;
  byte_102305CF8 = 0;
  qword_102305D00 = (uint64_t)"Latitude";
  dword_102305D08 = 2;
  word_102305D0C = 0;
  byte_102305D10 = 0;
  byte_102305D28 = 0;
  qword_102305D30 = (uint64_t)"Longitude";
  dword_102305D38 = 2;
  word_102305D3C = 0;
  byte_102305D40 = 0;
  byte_102305D58 = 0;
  qword_102305D60 = (uint64_t)"HorizontalAccuracy";
  dword_102305D68 = 2;
  word_102305D6C = 0;
  byte_102305D70 = 0;
  byte_102305D88 = 0;
  qword_102305D90 = (uint64_t)"Altitude";
  dword_102305D98 = 2;
  word_102305D9C = 0;
  byte_102305DA0 = 0;
  byte_102305DB8 = 0;
  qword_102305DC0 = (uint64_t)"VerticalAccuracy";
  dword_102305DC8 = 2;
  word_102305DCC = 0;
  byte_102305DD0 = 0;
  byte_102305DE8 = 0;
  qword_102305DF0 = (uint64_t)"Speed";
  dword_102305DF8 = 2;
  word_102305DFC = 0;
  byte_102305E00 = 0;
  byte_102305E18 = 0;
  qword_102305E20 = (uint64_t)"Course";
  dword_102305E28 = 2;
  word_102305E2C = 0;
  byte_102305E30 = 0;
  byte_102305E48 = 0;
  qword_102305E50 = (uint64_t)"Confidence";
  dword_102305E58 = 1;
  word_102305E5C = 0;
  byte_102305E60 = 0;
  byte_102305E78 = 0;
  qword_102305E80 = 0;
  dword_102305E88 = 5;
  word_102305E8C = 0;
  byte_102305E90 = 0;
  byte_102305EA8 = 0;
}

void sub_1009A2008(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1009A21F0()
{
  sub_100034200();
}

id sub_1009A2A30(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count");
  if (!result)
    return objc_msgSend(*(id *)(a1 + 32), "toggleVehicleStateListener:", 0);
  return result;
}

void sub_1009A33E8(id a1)
{
  qword_10229FEE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DistributedSensing");
}

BOOL sub_1009A3604(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  int v12;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v8 = v7 + 1;
        if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
        v6 |= (unint64_t)(v9 & 0x7F) << v4;
        if ((v9 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v11 = OBJC_IVAR___PBDataReader__error;
          v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v11 = OBJC_IVAR___PBDataReader__error;
      v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v12 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v14 = v6 >> 3;
      if ((v6 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v16 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v16 = 0;
        }
        v19 = &OBJC_IVAR___ALCLRowingModel__strokeFrequency;
        goto LABEL_37;
      }
      if ((_DWORD)v14 == 2)
        break;
      if ((_DWORD)v14 == 1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 <= 0xFFFFFFFFFFFFFFFBLL && v15 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v16 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v16 = 0;
        }
        v19 = &OBJC_IVAR___ALCLRowingModel__strokePower;
LABEL_37:
        *(_DWORD *)(a1 + *v19) = v16;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_38:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    *(_BYTE *)(a1 + 20) |= 1u;
    v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
    if (v18 <= 0xFFFFFFFFFFFFFFFBLL && v18 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      v16 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 4;
    }
    else
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      v16 = 0;
    }
    v19 = &OBJC_IVAR___ALCLRowingModel__strokeAmp;
    goto LABEL_37;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1009A3D2C()
{
  uint64_t result;

  if (qword_102311058)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311058 + 8))(qword_102311058);
  if (qword_102311060)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311060 + 8))(qword_102311060);
  if (qword_102311068)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311068 + 8))(qword_102311068);
  if (qword_102311070)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311070 + 8))(qword_102311070);
  if (qword_102311078)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311078 + 8))(qword_102311078);
  if (qword_102311080)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311080 + 8))(qword_102311080);
  if (qword_102311088)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311088 + 8))(qword_102311088);
  if (qword_102311090)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311090 + 8))(qword_102311090);
  if (qword_102311098)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311098 + 8))(qword_102311098);
  if (qword_1023110A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023110A0 + 8))(qword_1023110A0);
  if (qword_1023110A8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023110A8 + 8))(qword_1023110A8);
  if (qword_1023110B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023110B0 + 8))(qword_1023110B0);
  if (qword_1023110B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023110B8 + 8))(qword_1023110B8);
  if (qword_1023110C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023110C0 + 8))(qword_1023110C0);
  if (qword_1023110C8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023110C8 + 8))(qword_1023110C8);
  if (qword_1023110D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023110D0 + 8))(qword_1023110D0);
  if (qword_1023110D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023110D8 + 8))(qword_1023110D8);
  if (qword_1023110E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023110E0 + 8))(qword_1023110E0);
  result = qword_1023110E8;
  if (qword_1023110E8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1023110E8 + 8))(qword_1023110E8);
  return result;
}

void sub_1009A3F08(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if ((byte_102305EB0 & 1) == 0)
  {
    byte_102305EB0 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", a4);
    sub_10043FA90(v4, v5, v6, v7);
    operator new();
  }
}

uint64_t sub_1009A4510(uint64_t result)
{
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_102161B70;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

double sub_1009A4528(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102161BE8;
  *(_QWORD *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_1009A455C(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)result = &off_102161C60;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009A4574(uint64_t result)
{
  *(_QWORD *)result = &off_102161CD8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1009A458C(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102161D50;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_QWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1009A45B0(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_102161DC8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009A45C8(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_102161E40;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

_QWORD *sub_1009A45E0(_QWORD *result)
{
  *result = off_102161EB8;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0;
  result[5] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_1009A4600(_QWORD *result)
{
  *result = off_102161F30;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_1009A4614(_QWORD *result)
{
  result[3] = 0;
  *result = &off_102161FA8;
  result[1] = 0;
  *(_QWORD *)((char *)result + 14) = 0;
  return result;
}

uint64_t sub_1009A462C(uint64_t result)
{
  *(_QWORD *)result = off_102162020;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009A4650(uint64_t result)
{
  *(_QWORD *)result = off_102162098;
  *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

_QWORD *sub_1009A4668(_QWORD *result)
{
  *result = &off_102162110;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_1009A467C(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102162188;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_1009A46A0(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)result = off_102162200;
  *(_QWORD *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009A46C0(uint64_t result)
{
  *(_QWORD *)result = off_102162278;
  *(_QWORD *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009A46E4(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1021622F0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

_QWORD *sub_1009A4708(_QWORD *result)
{
  *result = off_102162368;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = 0;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0;
  return result;
}

_QWORD *sub_1009A4728(_QWORD *result)
{
  *result = &off_1021623E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1009A473C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  _BYTE v16[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 655);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v8 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 24) |= 1u;
    *(_BYTE *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(a1 + 24) |= 2u;
  *(_BYTE *)(a1 + 9) = v9;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_BYTE *)(a2 + 10);
  *(_DWORD *)(a1 + 24) |= 4u;
  *(_BYTE *)(a1 + 10) = v10;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  v11 = *(_BYTE *)(a2 + 11);
  *(_DWORD *)(a1 + 24) |= 8u;
  *(_BYTE *)(a1 + 11) = v11;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_21:
    v13 = *(_BYTE *)(a2 + 13);
    *(_DWORD *)(a1 + 24) |= 0x20u;
    *(_BYTE *)(a1 + 13) = v13;
    v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_20:
  v12 = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 24) |= 0x10u;
  *(_BYTE *)(a1 + 12) = v12;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x20) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_22:
  v14 = *(_BYTE *)(a2 + 14);
  *(_DWORD *)(a1 + 24) |= 0x40u;
  *(_BYTE *)(a1 + 14) = v14;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_BYTE *)(a2 + 15);
    *(_DWORD *)(a1 + 24) |= 0x80u;
    *(_BYTE *)(a1 + 15) = v6;
    v5 = *(_DWORD *)(a2 + 24);
  }
LABEL_13:
  if ((v5 & 0x100) != 0)
  {
    v7 = *(_BYTE *)(a2 + 16);
    *(_DWORD *)(a1 + 24) |= 0x100u;
    *(_BYTE *)(a1 + 16) = v7;
  }
}

void sub_1009A48CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009A48E4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161B70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009A48F4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161B70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1009A4924()
{
  operator new();
}

uint64_t sub_1009A4960(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 24);
  if ((_BYTE)v1)
    *(_QWORD *)(result + 8) = 0;
  if ((v1 & 0xFF00) != 0)
    *(_BYTE *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009A4984(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned int v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  uint64_t result;
  unsigned int v37;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v37 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_33:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 24) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_36;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
        if ((_DWORD)result)
        {
          v10 = v37;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_33;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_36:
        v37 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v20 = v37;
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v20 = *v12;
          v21 = v12 + 1;
          *((_QWORD *)this + 1) = v21;
        }
        *(_BYTE *)(a1 + 9) = v20 != 0;
        *(_DWORD *)(a1 + 24) |= 2u;
        if ((unint64_t)v21 >= v8 || *v21 != 24)
          continue;
        v13 = v21 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_44:
        v37 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v22 = v37;
          v23 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v22 = *v13;
          v23 = v13 + 1;
          *((_QWORD *)this + 1) = v23;
        }
        *(_BYTE *)(a1 + 10) = v22 != 0;
        *(_DWORD *)(a1 + 24) |= 4u;
        if ((unint64_t)v23 >= v8 || *v23 != 32)
          continue;
        v14 = v23 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_52:
        v37 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v24 = v37;
          v25 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v24 = *v14;
          v25 = v14 + 1;
          *((_QWORD *)this + 1) = v25;
        }
        *(_BYTE *)(a1 + 11) = v24 != 0;
        *(_DWORD *)(a1 + 24) |= 8u;
        if ((unint64_t)v25 >= v8 || *v25 != 40)
          continue;
        v15 = v25 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_60:
        v37 = 0;
        if ((unint64_t)v15 >= v8 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v26 = v37;
          v27 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v26 = *v15;
          v27 = v15 + 1;
          *((_QWORD *)this + 1) = v27;
        }
        *(_BYTE *)(a1 + 12) = v26 != 0;
        *(_DWORD *)(a1 + 24) |= 0x10u;
        if ((unint64_t)v27 >= v8 || *v27 != 48)
          continue;
        v16 = v27 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_68:
        v37 = 0;
        if ((unint64_t)v16 >= v8 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v28 = v37;
          v29 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v28 = *v16;
          v29 = v16 + 1;
          *((_QWORD *)this + 1) = v29;
        }
        *(_BYTE *)(a1 + 13) = v28 != 0;
        *(_DWORD *)(a1 + 24) |= 0x20u;
        if ((unint64_t)v29 >= v8 || *v29 != 56)
          continue;
        v17 = v29 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_76:
        v37 = 0;
        if ((unint64_t)v17 >= v8 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v30 = v37;
          v31 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v30 = *v17;
          v31 = v17 + 1;
          *((_QWORD *)this + 1) = v31;
        }
        *(_BYTE *)(a1 + 14) = v30 != 0;
        *(_DWORD *)(a1 + 24) |= 0x40u;
        if ((unint64_t)v31 >= v8 || *v31 != 64)
          continue;
        v18 = v31 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_84:
        v37 = 0;
        if ((unint64_t)v18 >= v8 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v32 = v37;
          v33 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v32 = *v18;
          v33 = v18 + 1;
          *((_QWORD *)this + 1) = v33;
        }
        *(_BYTE *)(a1 + 15) = v32 != 0;
        *(_DWORD *)(a1 + 24) |= 0x80u;
        if ((unint64_t)v33 >= v8 || *v33 != 72)
          continue;
        v19 = v33 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_92:
        v37 = 0;
        if ((unint64_t)v19 >= v8 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v34 = v37;
          v35 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v34 = *v19;
          v35 = (unsigned __int8 *)(v19 + 1);
          *((_QWORD *)this + 1) = v35;
        }
        *(_BYTE *)(a1 + 16) = v34 != 0;
        *(_DWORD *)(a1 + 24) |= 0x100u;
        if (v35 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_44;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_52;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v15 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_60;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v16 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_68;
      case 7u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v17 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_76;
      case 8u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v18 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_84;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v19 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_92;
      default:
        v7 = TagFallback & 7;
LABEL_27:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1009A4ED8(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 13), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 14), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 16), a2, a4);
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 15), a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 0x100) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 16), a2, a4);
  return result;
}

uint64_t sub_1009A4FF8(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v1)
  {
    v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0)
      v2 += 2;
    if ((v1 & 4) != 0)
      v2 += 2;
    if ((v1 & 8) != 0)
      v2 += 2;
    if ((v1 & 0x10) != 0)
      v2 += 2;
    if ((v1 & 0x20) != 0)
      v2 += 2;
    if ((v1 & 0x40) != 0)
      v2 += 2;
    if ((v1 & 0x80) != 0)
      v2 += 2;
  }
  else
  {
    v2 = 0;
  }
  if ((v1 & 0x100) != 0)
    v3 = v2 + 2;
  else
    v3 = v2;
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_1009A507C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A473C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A50C8()
{
  return 1;
}

_QWORD *sub_1009A50D0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.FenceMonitorOptions");
}

void sub_1009A50E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  char v19;
  char v20;
  _BYTE v21[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v21, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 1184);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v20, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  v5 = *(_DWORD *)(a2 + 80);
  if (!(_BYTE)v5)
    goto LABEL_30;
  if ((v5 & 1) != 0)
  {
    v6 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 80) |= 1u;
    v7 = *(std::string **)(a1 + 8);
    if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v7, v6);
    v5 = *(_DWORD *)(a2 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v8 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 80) |= 2u;
  v9 = *(std::string **)(a1 + 16);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v9, v8);
  v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 80) |= 4u;
  *(_QWORD *)(a1 + 24) = v10;
  v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 80) |= 8u;
  *(_QWORD *)(a1 + 32) = v11;
  v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_22:
    v13 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 80) |= 0x20u;
    *(_QWORD *)(a1 + 48) = v13;
    v5 = *(_DWORD *)(a2 + 80);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_30;
      goto LABEL_28;
    }
    goto LABEL_23;
  }
LABEL_21:
  v12 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 80) |= 0x10u;
  *(_QWORD *)(a1 + 40) = v12;
  v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 0x20) != 0)
    goto LABEL_22;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_23:
  *(_DWORD *)(a1 + 80) |= 0x40u;
  v14 = *(_QWORD *)(a1 + 56);
  if (!v14)
    operator new();
  v15 = *(_QWORD *)(a2 + 56);
  if (!v15)
    v15 = *(_QWORD *)(qword_102311060 + 56);
  sub_1009A473C(v14, v15);
  v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 0x80) != 0)
  {
LABEL_28:
    v16 = *(_DWORD *)(a2 + 64);
    if (v16 >= 3)
      sub_101910F38();
    *(_DWORD *)(a1 + 80) |= 0x80u;
    *(_DWORD *)(a1 + 64) = v16;
    v5 = *(_DWORD *)(a2 + 80);
  }
LABEL_30:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      v17 = *(_DWORD *)(a2 + 68);
      if (v17 >= 5)
        sub_101910F10();
      *(_DWORD *)(a1 + 80) |= 0x100u;
      *(_DWORD *)(a1 + 68) = v17;
      v5 = *(_DWORD *)(a2 + 80);
    }
    if ((v5 & 0x200) != 0)
    {
      v18 = *(_BYTE *)(a2 + 72);
      *(_DWORD *)(a1 + 80) |= 0x200u;
      *(_BYTE *)(a1 + 72) = v18;
      v5 = *(_DWORD *)(a2 + 80);
    }
    if ((v5 & 0x400) != 0)
    {
      v19 = *(_BYTE *)(a2 + 73);
      *(_DWORD *)(a1 + 80) |= 0x400u;
      *(_BYTE *)(a1 + 73) = v19;
    }
  }
}

void sub_1009A5388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009A53A0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;

  v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  if ((_QWORD *)qword_102311060 != result)
  {
    result = (_QWORD *)result[7];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1009A546C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161BE8;
  sub_1009A53A0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009A549C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161BE8;
  sub_1009A53A0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1009A54E0()
{
  operator new();
}

uint64_t sub_1009A5538(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = *(_DWORD *)(result + 80);
  if ((_BYTE)v1)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(result + 80) & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    v1 = *(_DWORD *)(result + 80);
    if ((v1 & 0x40) != 0)
    {
      v4 = *(_QWORD *)(result + 56);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 24);
        if ((_BYTE)v5)
          *(_QWORD *)(v4 + 8) = 0;
        if ((v5 & 0xFF00) != 0)
          *(_BYTE *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v1 = *(_DWORD *)(result + 80);
      }
    }
    *(_DWORD *)(result + 64) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_DWORD *)(result + 68) = 0;
    *(_WORD *)(result + 72) = 0;
  }
  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_1009A560C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  void *v8;
  uint64_t result;
  _BYTE *v10;
  void *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned int v43[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_56;
        *(_DWORD *)(a1 + 80) |= 1u;
        v8 = *(void **)(a1 + 8);
        if (v8 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v8);
        if ((_DWORD)result)
        {
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 18)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_56;
LABEL_16:
        *(_DWORD *)(a1 + 80) |= 2u;
        v11 = *(void **)(a1 + 16);
        if (v11 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v11);
        if ((_DWORD)result)
        {
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 25)
          {
            *((_QWORD *)this + 1) = v12 + 1;
            goto LABEL_23;
          }
          continue;
        }
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_56;
LABEL_23:
        *(_QWORD *)v43 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v43) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v43;
        *(_DWORD *)(a1 + 80) |= 4u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 33)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
        goto LABEL_28;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_56;
LABEL_28:
        *(_QWORD *)v43 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v43) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)v43;
        *(_DWORD *)(a1 + 80) |= 8u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 41)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_33:
        *(_QWORD *)v43 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v43) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v43;
        *(_DWORD *)(a1 + 80) |= 0x10u;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 49)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_38:
        *(_QWORD *)v43 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v43) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)v43;
        v16 = *(_DWORD *)(a1 + 80) | 0x20;
        *(_DWORD *)(a1 + 80) = v16;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 58)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_44:
        *(_DWORD *)(a1 + 80) = v16 | 0x40;
        v18 = *(_QWORD *)(a1 + 56);
        if (!v18)
          operator new();
        v43[0] = 0;
        v19 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43))return 0;
        }
        else
        {
          v43[0] = *v19;
          *((_QWORD *)this + 1) = v19 + 1;
        }
        v27 = *((_DWORD *)this + 14);
        v28 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v27 + 1;
        if (v27 < v28)
        {
          v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43[0]);
          if (sub_1009A4984(v18, this, v30))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
              v31 = *((_DWORD *)this + 14);
              v32 = __OFSUB__(v31, 1);
              v33 = v31 - 1;
              if (v33 < 0 == v32)
                *((_DWORD *)this + 14) = v33;
              v34 = (_BYTE *)*((_QWORD *)this + 1);
              v20 = *((_QWORD *)this + 2);
              if ((unint64_t)v34 < v20 && *v34 == 64)
              {
                v21 = v34 + 1;
                *((_QWORD *)this + 1) = v21;
LABEL_69:
                v43[0] = 0;
                if ((unint64_t)v21 >= v20 || *v21 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
                  if (!(_DWORD)result)
                    return result;
                  v35 = v43[0];
                }
                else
                {
                  v35 = *v21;
                  *((_QWORD *)this + 1) = v21 + 1;
                }
                if (v35 <= 2)
                {
                  *(_DWORD *)(a1 + 80) |= 0x80u;
                  *(_DWORD *)(a1 + 64) = v35;
                }
                v36 = (_BYTE *)*((_QWORD *)this + 1);
                v22 = *((_QWORD *)this + 2);
                if ((unint64_t)v36 < v22 && *v36 == 72)
                {
                  v23 = v36 + 1;
                  *((_QWORD *)this + 1) = v23;
LABEL_79:
                  v43[0] = 0;
                  if ((unint64_t)v23 >= v22 || *v23 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
                    if (!(_DWORD)result)
                      return result;
                    v37 = v43[0];
                  }
                  else
                  {
                    v37 = *v23;
                    *((_QWORD *)this + 1) = v23 + 1;
                  }
                  if (v37 <= 4)
                  {
                    *(_DWORD *)(a1 + 80) |= 0x100u;
                    *(_DWORD *)(a1 + 68) = v37;
                  }
                  v38 = (_BYTE *)*((_QWORD *)this + 1);
                  v24 = *((_QWORD *)this + 2);
                  if ((unint64_t)v38 < v24 && *v38 == 80)
                  {
                    v25 = v38 + 1;
                    *((_QWORD *)this + 1) = v25;
LABEL_89:
                    v43[0] = 0;
                    if ((unint64_t)v25 >= v24 || *v25 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
                      if (!(_DWORD)result)
                        return result;
                      v39 = v43[0];
                      v40 = (_BYTE *)*((_QWORD *)this + 1);
                      v24 = *((_QWORD *)this + 2);
                    }
                    else
                    {
                      v39 = *v25;
                      v40 = v25 + 1;
                      *((_QWORD *)this + 1) = v40;
                    }
                    *(_BYTE *)(a1 + 72) = v39 != 0;
                    *(_DWORD *)(a1 + 80) |= 0x200u;
                    if ((unint64_t)v40 < v24 && *v40 == 88)
                    {
                      v26 = v40 + 1;
                      *((_QWORD *)this + 1) = v26;
LABEL_97:
                      v43[0] = 0;
                      if ((unint64_t)v26 >= v24 || *v26 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
                        if (!(_DWORD)result)
                          return result;
                        v41 = v43[0];
                        v42 = (unsigned __int8 *)*((_QWORD *)this + 1);
                        v24 = *((_QWORD *)this + 2);
                      }
                      else
                      {
                        v41 = *v26;
                        v42 = (unsigned __int8 *)(v26 + 1);
                        *((_QWORD *)this + 1) = v42;
                      }
                      *(_BYTE *)(a1 + 73) = v41 != 0;
                      *(_DWORD *)(a1 + 80) |= 0x400u;
                      if (v42 == (unsigned __int8 *)v24
                        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                      {
                        *((_DWORD *)this + 8) = 0;
                        result = 1;
                        *((_BYTE *)this + 36) = 1;
                        return result;
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_33;
        goto LABEL_56;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_38;
        goto LABEL_56;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_56;
        v16 = *(_DWORD *)(a1 + 80);
        goto LABEL_44;
      case 8u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v21 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_69;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v23 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_79;
      case 0xAu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v25 = (char *)*((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        goto LABEL_89;
      case 0xBu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_56;
        v26 = (char *)*((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        goto LABEL_97;
      default:
        v7 = TagFallback & 7;
LABEL_56:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1009A5C5C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 80);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(result + 8), a2);
    v6 = *(_DWORD *)(v5 + 80);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 16), a2);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(double *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 48), a3);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_19:
  v7 = *(_QWORD *)(v5 + 56);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311060 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 64), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 68), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned __int8 *)(v5 + 73), (BOOL)a2, a4);
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 72), (BOOL)a2, a4);
  if ((*(_DWORD *)(v5 + 80) & 0x400) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned __int8 *)(v5 + 73), (BOOL)a2, a4);
  return result;
}

uint64_t sub_1009A5DC4(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  unsigned int v28;

  v3 = *(_DWORD *)(a1 + 80);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_47;
  }
  if ((v3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v12 + 1;
      v3 = *(_DWORD *)(a1 + 80);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 2;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = v11 + v7;
    if ((v3 & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v4 = 0;
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = v14;
    v16 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = v16;
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v16 = *(_QWORD *)(v13 + 8);
      v3 = *(_DWORD *)(a1 + 80);
      v15 = *(_BYTE *)(v13 + 23);
    }
    else
    {
      v18 = 1;
    }
    if (v15 < 0)
      v14 = v16;
    v4 += v18 + v14 + 1;
  }
LABEL_24:
  v19 = v4 + 9;
  if ((v3 & 4) == 0)
    v19 = v4;
  if ((v3 & 8) != 0)
    v19 += 9;
  if ((v3 & 0x10) != 0)
    v19 += 9;
  if ((v3 & 0x20) != 0)
    v5 = v19 + 9;
  else
    v5 = v19;
  if ((v3 & 0x40) != 0)
  {
    v20 = *(_QWORD *)(a1 + 56);
    if (!v20)
      v20 = *(_QWORD *)(qword_102311060 + 56);
    v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A4FF8(v20);
    v22 = (int)v21;
    if (v21 >= 0x80)
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
    else
      v23 = 1;
    v5 = (v5 + v22 + v23 + 1);
    v3 = *(_DWORD *)(a1 + 80);
  }
  if ((v3 & 0x80) != 0)
  {
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v24 & 0x80000000) != 0)
    {
      v25 = 11;
    }
    else if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 1;
      v3 = *(_DWORD *)(a1 + 80);
    }
    else
    {
      v25 = 2;
    }
    v5 = (v25 + v5);
  }
LABEL_47:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 68);
      if ((v26 & 0x80000000) != 0)
      {
        v27 = 11;
      }
      else if (v26 >= 0x80)
      {
        v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2) + 1;
        v3 = *(_DWORD *)(a1 + 80);
      }
      else
      {
        v27 = 2;
      }
      LODWORD(v5) = v27 + v5;
    }
    v28 = v5 + 2;
    if ((v3 & 0x200) == 0)
      v28 = v5;
    if ((v3 & 0x400) != 0)
      v5 = v28 + 2;
    else
      v5 = v28;
  }
  *(_DWORD *)(a1 + 76) = v5;
  return v5;
}

void sub_1009A5FBC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A50E0(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A6008()
{
  return 1;
}

_QWORD *sub_1009A6010@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.Fence");
}

void sub_1009A6020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 1430);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_BYTE *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_BYTE *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311068 + 8);
      sub_1009A50E0(v7, v8);
    }
  }
}

void sub_1009A612C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009A6144(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102161C60;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311068 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009A6198(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009A6144(a1);
  operator delete();
}

uint64_t sub_1009A61BC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311068;
  if (!qword_102311068)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_102311068;
  }
  return result;
}

void sub_1009A61E8()
{
  operator new();
}

uint64_t sub_1009A6224(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 24);
  if (v2)
  {
    *(_BYTE *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        result = sub_1009A5538(result);
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1009A6260(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  unsigned int v24;

  while (1)
  {
    do
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 == 1)
          break;
        if (TagFallback >> 3 == 2)
        {
          v7 = TagFallback & 7;
          if (v7 == 2)
          {
            v8 = *(_DWORD *)(a1 + 24);
            goto LABEL_23;
          }
        }
        else
        {
          v7 = TagFallback & 7;
        }
LABEL_15:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
      }
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v23 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if (!(_DWORD)result)
          return result;
        v11 = v23;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_BYTE *)(a1 + 16) = v11 != 0;
      v8 = *(_DWORD *)(a1 + 24) | 1;
      *(_DWORD *)(a1 + 24) = v8;
    }
    while ((unint64_t)v12 >= v9 || *v12 != 18);
    *((_QWORD *)this + 1) = v12 + 1;
LABEL_23:
    *(_DWORD *)(a1 + 24) = v8 | 2;
    v14 = *(_QWORD *)(a1 + 8);
    if (!v14)
      operator new();
    v24 = 0;
    v15 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24))
        return 0;
    }
    else
    {
      v24 = *v15;
      *((_QWORD *)this + 1) = v15 + 1;
    }
    v16 = *((_DWORD *)this + 14);
    v17 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v16 + 1;
    if (v16 >= v17)
      return 0;
    v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v24);
    if (!sub_1009A560C(v14, this, v19) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
    v20 = *((_DWORD *)this + 14);
    v21 = __OFSUB__(v20, 1);
    v22 = v20 - 1;
    if (v22 < 0 == v21)
      *((_DWORD *)this + 14) = v22;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1009A64CC(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 16), (BOOL)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0)
      return result;
  }
  else if ((v6 & 2) == 0)
  {
    return result;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311068 + 8);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t sub_1009A6538(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  unsigned int v7;
  int v8;
  int v9;

  v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    v4 = 2 * (v3 & 1u);
    if ((v3 & 2) != 0)
    {
      v5 = *(_QWORD *)(a1 + 8);
      if (!v5)
        v5 = *(_QWORD *)(qword_102311068 + 8);
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A5DC4(v5, a2);
      v8 = (int)v6;
      if (v6 >= 0x80)
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, v7);
      else
        v9 = 1;
      v4 = (v4 | 1) + v8 + v9;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1009A65C0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A6020(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A660C()
{
  return 1;
}

_QWORD *sub_1009A6614@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.FenceMonitorUpdate");
}

void sub_1009A6624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 1711);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 8)
        sub_101910FB0();
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 32) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311070 + 8);
      sub_1009A50E0(v7, v8);
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(_DWORD *)(a2 + 20);
      if (v9 >= 5)
        sub_101910F88();
      *(_DWORD *)(a1 + 32) |= 4u;
      *(_DWORD *)(a1 + 20) = v9;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 8) != 0)
    {
      v10 = *(_DWORD *)(a2 + 24);
      if (v10 >= 5)
        sub_101910F60();
      *(_DWORD *)(a1 + 32) |= 8u;
      *(_DWORD *)(a1 + 24) = v10;
    }
  }
}

void sub_1009A678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009A67A4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102161CD8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311070 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009A67F8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009A67A4(a1);
  operator delete();
}

uint64_t sub_1009A681C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311070;
  if (!qword_102311070)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_102311070;
  }
  return result;
}

void sub_1009A6848()
{
  operator new();
}

uint64_t sub_1009A6884(uint64_t result)
{
  _DWORD *v1;
  char v2;

  v1 = (_DWORD *)result;
  v2 = *(_BYTE *)(result + 32);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        result = sub_1009A5538(result);
    }
    v1[5] = 0;
    v1[6] = 0;
  }
  v1[8] = 0;
  return result;
}

uint64_t sub_1009A68C4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t result;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v29 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!(_DWORD)result)
            return result;
          v9 = v29;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 <= 7)
        {
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 18)
        {
          *((_QWORD *)this + 1) = v15 + 1;
          goto LABEL_28;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
LABEL_28:
        *(_DWORD *)(a1 + 32) |= 2u;
        v16 = *(_QWORD *)(a1 + 8);
        if (!v16)
          operator new();
        v29 = 0;
        v17 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29))return 0;
        }
        else
        {
          v29 = *v17;
          *((_QWORD *)this + 1) = v17 + 1;
        }
        v18 = *((_DWORD *)this + 14);
        v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 < v19)
        {
          v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
          if (sub_1009A560C(v16, this, v21))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
              v22 = *((_DWORD *)this + 14);
              v23 = __OFSUB__(v22, 1);
              v24 = v22 - 1;
              if (v24 < 0 == v23)
                *((_DWORD *)this + 14) = v24;
              v25 = (_BYTE *)*((_QWORD *)this + 1);
              v10 = *((_QWORD *)this + 2);
              if ((unint64_t)v25 < v10 && *v25 == 24)
              {
                v11 = v25 + 1;
                *((_QWORD *)this + 1) = v11;
LABEL_42:
                v29 = 0;
                if ((unint64_t)v11 >= v10 || *v11 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
                  if (!(_DWORD)result)
                    return result;
                  v26 = v29;
                }
                else
                {
                  v26 = *v11;
                  *((_QWORD *)this + 1) = v11 + 1;
                }
                if (v26 <= 4)
                {
                  *(_DWORD *)(a1 + 32) |= 4u;
                  *(_DWORD *)(a1 + 20) = v26;
                }
                v27 = (_BYTE *)*((_QWORD *)this + 1);
                v12 = *((_QWORD *)this + 2);
                if ((unint64_t)v27 < v12 && *v27 == 32)
                {
                  v13 = v27 + 1;
                  *((_QWORD *)this + 1) = v13;
LABEL_52:
                  v29 = 0;
                  if ((unint64_t)v13 >= v12 || *v13 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
                    if (!(_DWORD)result)
                      return result;
                    v28 = v29;
                  }
                  else
                  {
                    v28 = *v13;
                    *((_QWORD *)this + 1) = v13 + 1;
                  }
                  if (v28 <= 4)
                  {
                    *(_DWORD *)(a1 + 32) |= 8u;
                    *(_DWORD *)(a1 + 24) = v28;
                  }
                  if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + 8) = 0;
                    result = 1;
                    *((_BYTE *)this + 36) = 1;
                    return result;
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_42;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_52;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1009A6C50(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311070 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 24), (int)a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 24), (int)a2, a4);
  return result;
}

uint64_t sub_1009A6CF4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_34;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_102311070 + 8);
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A5DC4(v6, a2);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  else
    v9 = 1;
  v4 = (v4 + v8 + v9 + 1);
  v3 = *(_DWORD *)(a1 + 32);
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_34;
    goto LABEL_28;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = 11;
  }
  else if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v11 = 2;
  }
  v4 = (v11 + v4);
  if ((v3 & 8) != 0)
  {
LABEL_28:
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v12 & 0x80000000) != 0)
    {
      v13 = 11;
    }
    else if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    }
    else
    {
      v13 = 2;
    }
    v4 = (v13 + v4);
  }
LABEL_34:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_1009A6E28(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A6624(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A6E74()
{
  return 1;
}

_QWORD *sub_1009A6E7C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.FenceNotificationEvent");
}

void sub_1009A6E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 2039);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_14;
      }
    }
    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
LABEL_14:
    v9 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_BYTE *)(a1 + 24) = v9;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
LABEL_15:
    v10 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_DWORD *)(a1 + 28) = v10;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        return;
      goto LABEL_10;
    }
LABEL_16:
    v11 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v11;
    if ((*(_DWORD *)(a2 + 44) & 0x20) == 0)
      return;
LABEL_10:
    v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v6;
  }
}

void sub_1009A6FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009A6FD4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161D50;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009A6FE4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161D50;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1009A7014(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311078;
  if (!qword_102311078)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_102311078;
  }
  return result;
}

void sub_1009A7040()
{
  operator new();
}

uint64_t sub_1009A7088(uint64_t result)
{
  if (*(_BYTE *)(result + 44))
  {
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 28) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1009A70A8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t result;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_28;
        *(_QWORD *)v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v24) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v24;
        *(_DWORD *)(a1 + 44) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 17)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_28;
LABEL_14:
        *(_QWORD *)v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v24) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v24;
        *(_DWORD *)(a1 + 44) |= 2u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 != 24)
          continue;
        v11 = v10 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_20:
        v24[0] = 0;
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result)
            return result;
          v12 = v24[0];
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v12 = *v11;
          v13 = v11 + 1;
          *((_QWORD *)this + 1) = v13;
        }
        *(_BYTE *)(a1 + 24) = v12 != 0;
        *(_DWORD *)(a1 + 44) |= 4u;
        if ((unint64_t)v13 >= v9 || *v13 != 32)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_37:
        v24[0] = 0;
        if ((unint64_t)v14 >= v9 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result)
            return result;
          v18 = v24[0];
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v18 = *v14;
          v19 = v14 + 1;
          *((_QWORD *)this + 1) = v19;
        }
        *(_DWORD *)(a1 + 28) = v18;
        *(_DWORD *)(a1 + 44) |= 8u;
        if ((unint64_t)v19 >= v9 || *v19 != 40)
          continue;
        v15 = v19 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_45:
        v24[0] = 0;
        if ((unint64_t)v15 >= v9 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result)
            return result;
          v20 = v24[0];
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v20 = *v15;
          v21 = v15 + 1;
          *((_QWORD *)this + 1) = v21;
        }
        *(_DWORD *)(a1 + 32) = v20;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        if ((unint64_t)v21 >= v9 || *v21 != 48)
          continue;
        v16 = v21 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_53:
        v24[0] = 0;
        if ((unint64_t)v16 >= v9 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result)
            return result;
          v22 = v24[0];
          v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v22 = *v16;
          v23 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)this + 1) = v23;
        }
        *(_DWORD *)(a1 + 36) = v22;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        if (v23 != (unsigned __int8 *)v9 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v11 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_20;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v14 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_37;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v15 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_45;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v16 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_53;
      default:
        v7 = TagFallback & 7;
LABEL_28:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1009A7414(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 28), a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 36), a2, a4);
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 32), a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 36), a2, a4);
  return result;
}

uint64_t sub_1009A74E0(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;

  v3 = *(unsigned __int8 *)(a1 + 44);
  if (!*(_BYTE *)(a1 + 44))
  {
    v5 = 0;
    goto LABEL_30;
  }
  v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0)
    v4 += 9;
  if ((v3 & 4) != 0)
    v5 = v4 + 2;
  else
    v5 = v4;
  if ((v3 & 8) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      v7 = 2;
    }
    v5 = (v7 + v5);
    if ((v3 & 0x10) == 0)
    {
LABEL_9:
      if ((v3 & 0x20) == 0)
        goto LABEL_30;
      goto LABEL_24;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if ((v8 & 0x80000000) != 0)
  {
    v9 = 11;
  }
  else if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    v9 = 2;
  }
  v5 = (v9 + v5);
  if ((v3 & 0x20) != 0)
  {
LABEL_24:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v10 & 0x80000000) != 0)
    {
      v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    }
    else
    {
      v11 = 2;
    }
    v5 = (v11 + v5);
  }
LABEL_30:
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

void sub_1009A75DC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A6E8C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A7628()
{
  return 1;
}

_QWORD *sub_1009A7630@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.MicroLocationEvent");
}

void sub_1009A7640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 2268);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 5)
        sub_101910FD8();
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311080 + 8);
      sub_1009A50E0(v7, v8);
    }
  }
}

void sub_1009A7758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009A7770(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102161DC8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311080 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009A77C4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009A7770(a1);
  operator delete();
}

uint64_t sub_1009A77E8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311080;
  if (!qword_102311080)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_102311080;
  }
  return result;
}

void sub_1009A7814()
{
  operator new();
}

uint64_t sub_1009A7850(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 24);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        result = sub_1009A5538(result);
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1009A788C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_15;
        v21 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!(_DWORD)result)
            return result;
          v9 = v21;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 <= 4)
        {
          *(_DWORD *)(a1 + 24) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 18)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_15;
      }
      v7 = TagFallback & 7;
      if (v7 == 2)
        break;
LABEL_15:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_25:
    *(_DWORD *)(a1 + 24) |= 2u;
    v12 = *(_QWORD *)(a1 + 8);
    if (!v12)
      operator new();
    v22 = 0;
    v13 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22))
        return 0;
    }
    else
    {
      v22 = *v13;
      *((_QWORD *)this + 1) = v13 + 1;
    }
    v14 = *((_DWORD *)this + 14);
    v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15)
      return 0;
    v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    if (!sub_1009A560C(v12, this, v17) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    v18 = *((_DWORD *)this + 14);
    v19 = __OFSUB__(v18, 1);
    v20 = v18 - 1;
    if (v20 < 0 == v19)
      *((_DWORD *)this + 14) = v20;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1009A7AF8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0)
      return result;
  }
  else if ((v6 & 2) == 0)
  {
    return result;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311080 + 8);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t sub_1009A7B64(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        goto LABEL_19;
    }
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311080 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A5DC4(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1009A7C28(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A7640(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A7C74()
{
  return 1;
}

_QWORD *sub_1009A7C7C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.FenceSetLocationType");
}

void sub_1009A7C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 2481);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 2)
        sub_101911000();
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311088 + 8);
      sub_1009A50E0(v7, v8);
    }
  }
}

void sub_1009A7DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009A7DBC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102161E40;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311088 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009A7E10(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009A7DBC(a1);
  operator delete();
}

uint64_t sub_1009A7E34(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311088;
  if (!qword_102311088)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_102311088;
  }
  return result;
}

void sub_1009A7E60()
{
  operator new();
}

uint64_t sub_1009A7E9C(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 24);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        result = sub_1009A5538(result);
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1009A7ED8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_15;
        v21 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!(_DWORD)result)
            return result;
          v9 = v21;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 <= 1)
        {
          *(_DWORD *)(a1 + 24) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 18)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_15;
      }
      v7 = TagFallback & 7;
      if (v7 == 2)
        break;
LABEL_15:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_25:
    *(_DWORD *)(a1 + 24) |= 2u;
    v12 = *(_QWORD *)(a1 + 8);
    if (!v12)
      operator new();
    v22 = 0;
    v13 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22))
        return 0;
    }
    else
    {
      v22 = *v13;
      *((_QWORD *)this + 1) = v13 + 1;
    }
    v14 = *((_DWORD *)this + 14);
    v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15)
      return 0;
    v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    if (!sub_1009A560C(v12, this, v17) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    v18 = *((_DWORD *)this + 14);
    v19 = __OFSUB__(v18, 1);
    v20 = v18 - 1;
    if (v20 < 0 == v19)
      *((_DWORD *)this + 14) = v20;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1009A8144(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0)
      return result;
  }
  else if ((v6 & 2) == 0)
  {
    return result;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311088 + 8);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t sub_1009A81B0(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        goto LABEL_19;
    }
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311088 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A5DC4(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1009A8274(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A7C8C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A82C0()
{
  return 1;
}

_QWORD *sub_1009A82C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.FenceSetLoiNotFound");
}

double sub_1009A82D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  const std::string *v7;
  std::string *v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 2745);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v6 = *(_DWORD *)(a2 + 44);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_14;
      }
    }
    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 44);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        return result;
      goto LABEL_8;
    }
LABEL_14:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0)
      return result;
LABEL_8:
    result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(double *)(a1 + 32) = result;
  }
  return result;
}

void sub_1009A840C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009A8424(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161EB8;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009A8454(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161EB8;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1009A8498()
{
  operator new();
}

uint64_t sub_1009A84DC(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 44))
  {
    if ((*(_BYTE *)(result + 44) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(_BYTE **)v1 = 0;
          *(_QWORD *)(v1 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v1 = 0;
          *(_BYTE *)(v1 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1009A852C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  void *v8;
  uint64_t result;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_31;
        *(_DWORD *)(a1 + 44) |= 1u;
        v8 = *(void **)(a1 + 8);
        if (v8 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v8);
        if ((_DWORD)result)
        {
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 17)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_31;
LABEL_16:
        v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 44) |= 2u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 != 25)
          continue;
        *((_QWORD *)this + 1) = v11 + 1;
        goto LABEL_21;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_31;
LABEL_21:
        v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 24) = v13;
        *(_DWORD *)(a1 + 44) |= 4u;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 != 33)
          continue;
        *((_QWORD *)this + 1) = v12 + 1;
LABEL_26:
        v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 32) = v13;
        *(_DWORD *)(a1 + 44) |= 8u;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_26;
        goto LABEL_31;
      default:
        v7 = TagFallback & 7;
LABEL_31:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
    return result;
  }
}

uint64_t sub_1009A878C(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  int v3;
  uint64_t v4;
  int v5;

  v3 = a2;
  v4 = result;
  v5 = *(_DWORD *)(result + 44);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(result + 8), a2);
    v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v3, *(double *)(v4 + 16), a3);
  v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v3, *(double *)(v4 + 32), a3);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v3, *(double *)(v4 + 24), a3);
  if ((*(_DWORD *)(v4 + 44) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v3, *(double *)(v4 + 32), a3);
  return result;
}

uint64_t sub_1009A8820(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v6 + 23);
      else
        v10 = v9;
      if (v10 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
        v7 = *(unsigned __int8 *)(v6 + 23);
        v9 = *(_QWORD *)(v6 + 8);
        v11 = v12 + 1;
        v3 = *(_DWORD *)(a1 + 44);
        v8 = *(_BYTE *)(v6 + 23);
      }
      else
      {
        v11 = 2;
      }
      if (v8 < 0)
        v7 = v9;
      v4 = v11 + v7;
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

double sub_1009A88D0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1009A82D8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A891C()
{
  return 1;
}

_QWORD *sub_1009A8924@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.LocationOfInterest");
}

void sub_1009A8934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 2971);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_102311098 + 8);
      sub_1009A82D8(v6, v7);
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311098 + 16);
      sub_1009A50E0(v8, v9);
    }
  }
}

void sub_1009A8A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009A8AA8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311098 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1009A8B04(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161F30;
  sub_1009A8AA8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009A8B34(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102161F30;
  sub_1009A8AA8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1009A8B78(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311098;
  if (!qword_102311098)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_102311098;
  }
  return result;
}

void sub_1009A8BA4()
{
  operator new();
}

uint64_t sub_1009A8BDC(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 28);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_1009A84DC(result);
        v2 = *(_DWORD *)(v1 + 28);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
        result = sub_1009A5538(result);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_1009A8C28(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
        *(_DWORD *)(a1 + 28) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v27 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0;
        }
        else
        {
          v27 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)this + 14);
        v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_1009A852C(v8, this, v13) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        v14 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)this + 14) = v16;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 18)
        {
          *((_QWORD *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_17;
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      v18 = *(_QWORD *)(a1 + 16);
      if (!v18)
        operator new();
      v28 = 0;
      v19 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0;
      }
      else
      {
        v28 = *v19;
        *((_QWORD *)this + 1) = v19 + 1;
      }
      v20 = *((_DWORD *)this + 14);
      v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21)
        return 0;
      v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      if (!sub_1009A560C(v18, this, v23) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      v24 = *((_DWORD *)this + 14);
      v15 = __OFSUB__(v24, 1);
      v25 = v24 - 1;
      if (v25 < 0 == v15)
        *((_DWORD *)this + 14) = v25;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1009A8F28(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311098 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311098 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t sub_1009A8FA4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_BYTE *)(a1 + 28))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    v4 = *(_QWORD *)(qword_102311098 + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A8820(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 28) & 2) != 0)
  {
LABEL_12:
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102311098 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A5DC4(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v3 = (v3 + v11 + v12 + 1);
  }
LABEL_18:
  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

void sub_1009A9074(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A8934(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A90C0()
{
  return 1;
}

_QWORD *sub_1009A90C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.FenceSetLoi");
}

void sub_1009A90D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  char v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 3242);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_1023110A0 + 8);
      sub_1009A50E0(v6, v7);
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 >= 5)
        sub_101911028();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(_BYTE *)(a2 + 20);
      *(_DWORD *)(a1 + 28) |= 4u;
      *(_BYTE *)(a1 + 20) = v9;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 8) != 0)
    {
      v10 = *(_BYTE *)(a2 + 21);
      *(_DWORD *)(a1 + 28) |= 8u;
      *(_BYTE *)(a1 + 21) = v10;
    }
  }
}

void sub_1009A9228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009A9240(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102161FA8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023110A0 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009A9294(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009A9240(a1);
  operator delete();
}

uint64_t sub_1009A92B8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023110A0;
  if (!qword_1023110A0)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_1023110A0;
  }
  return result;
}

void sub_1009A92E4()
{
  operator new();
}

uint64_t sub_1009A9320(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        result = sub_1009A5538(result);
    }
    *(_DWORD *)(v1 + 16) = 0;
    *(_WORD *)(v1 + 20) = 0;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_1009A9360(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t result;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned int v30;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        *(_DWORD *)(a1 + 28) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v30 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30))return 0;
        }
        else
        {
          v30 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v15 = *((_DWORD *)this + 14);
        v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16)
          return 0;
        v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30);
        if (!sub_1009A560C(v8, this, v18) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        v19 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v19, 1);
        v21 = v19 - 1;
        if (v21 < 0 == v20)
          *((_DWORD *)this + 14) = v21;
        v22 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v22 >= v10 || *v22 != 16)
          continue;
        v11 = v22 + 1;
        *((_QWORD *)this + 1) = v11;
        goto LABEL_32;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_32:
        v30 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!(_DWORD)result)
            return result;
          v23 = v30;
        }
        else
        {
          v23 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v23 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 16) = v23;
        }
        v25 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v25 >= v12 || *v25 != 24)
          continue;
        v13 = v25 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_42:
        v30 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!(_DWORD)result)
            return result;
          v26 = v30;
          v27 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          v26 = *v13;
          v27 = v13 + 1;
          *((_QWORD *)this + 1) = v27;
        }
        *(_BYTE *)(a1 + 20) = v26 != 0;
        *(_DWORD *)(a1 + 28) |= 4u;
        if ((unint64_t)v27 >= v12 || *v27 != 32)
          continue;
        v14 = v27 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_50:
        v30 = 0;
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!(_DWORD)result)
            return result;
          v28 = v30;
          v29 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          v28 = *v14;
          v29 = (unsigned __int8 *)(v14 + 1);
          *((_QWORD *)this + 1) = v29;
        }
        *(_BYTE *)(a1 + 21) = v28 != 0;
        *(_DWORD *)(a1 + 28) |= 8u;
        if (v29 != (unsigned __int8 *)v12 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_42;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_50;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1009A96EC(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_1023110A0 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 21), (BOOL)a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), (BOOL)a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 21), (BOOL)a2, a4);
  return result;
}

uint64_t sub_1009A9790(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  unsigned int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_23;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_1023110A0 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A5DC4(v6, a2);
    v8 = (int)v7;
    if (v7 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    else
      v9 = 1;
    v4 = v8 + v9 + 1;
    v3 = *(_DWORD *)(a1 + 28);
    if ((v3 & 2) == 0)
      goto LABEL_18;
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_18;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = 11;
  }
  else if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v11 = 2;
  }
  v4 += v11;
LABEL_18:
  v12 = v4 + 2;
  if ((v3 & 4) == 0)
    v12 = v4;
  if ((v3 & 8) != 0)
    result = v12 + 2;
  else
    result = v12;
LABEL_23:
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void sub_1009A985C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A90D8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A98A8()
{
  return 1;
}

_QWORD *sub_1009A98B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.FenceUpdateStatusForHandoff");
}

void sub_1009A98C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  char v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 3519);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 >= 6)
        sub_101911050();
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_BYTE *)(a2 + 12);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_BYTE *)(a1 + 12) = v8;
      v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0)
          return;
        goto LABEL_10;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }
    v9 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 4u;
    v10 = *(std::string **)(a1 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, v9);
    if ((*(_DWORD *)(a2 + 28) & 8) != 0)
    {
LABEL_10:
      v7 = *(_BYTE *)(a2 + 13);
      *(_DWORD *)(a1 + 28) |= 8u;
      *(_BYTE *)(a1 + 13) = v7;
    }
  }
}

void sub_1009A99FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009A9A14(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162020;
  sub_1000257AC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009A9A44(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162020;
  sub_1000257AC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1009A9A88(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023110A8;
  if (!qword_1023110A8)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_1023110A8;
  }
  return result;
}

void sub_1009A9AB4()
{
  operator new();
}

uint64_t sub_1009A9AFC(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 12) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(result + 13) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1009A9B50(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v25 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
          goto LABEL_23;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
        if ((_DWORD)result)
        {
          v9 = v25;
LABEL_23:
          if (v9 <= 5)
          {
            *(_DWORD *)(a1 + 28) |= 1u;
            *(_DWORD *)(a1 + 8) = v9;
          }
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v15 < v10 && *v15 == 16)
          {
            v11 = v15 + 1;
            *((_QWORD *)this + 1) = v11;
            goto LABEL_28;
          }
          continue;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_28:
        v24 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
          if (!(_DWORD)result)
            return result;
          v16 = v24;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v16 = *v11;
          v17 = v11 + 1;
          *((_QWORD *)this + 1) = v17;
        }
        *(_BYTE *)(a1 + 12) = v16 != 0;
        v12 = *(_DWORD *)(a1 + 28) | 2;
        *(_DWORD *)(a1 + 28) = v12;
        if ((unint64_t)v17 >= v10 || *v17 != 26)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_36:
        *(_DWORD *)(a1 + 28) = v12 | 4;
        v18 = *(void **)(a1 + 16);
        if (v18 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v19 >= v13 || *v19 != 32)
          continue;
        v14 = v19 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_42:
        v23 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
          if (!(_DWORD)result)
            return result;
          v20 = v23;
          v21 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          v20 = *v14;
          v21 = (unsigned __int8 *)(v14 + 1);
          *((_QWORD *)this + 1) = v21;
        }
        *(_BYTE *)(a1 + 13) = v20 != 0;
        *(_DWORD *)(a1 + 28) |= 8u;
        if (v21 != (unsigned __int8 *)v13 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
        v12 = *(_DWORD *)(a1 + 28);
        goto LABEL_36;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_42;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_1009A9E28(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 13), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
  if ((*(_DWORD *)(v5 + 28) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 13), a2, a4);
  return result;
}

uint64_t sub_1009A9EBC(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v7 = v4 + 2;
    else
      v7 = v4;
    if ((v3 & 4) != 0)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(unsigned __int8 *)(v8 + 23);
      v10 = v9;
      v11 = *(_QWORD *)(v8 + 8);
      if ((v9 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(v8 + 23);
      else
        v12 = v11;
      if (v12 >= 0x80)
      {
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
        v9 = *(unsigned __int8 *)(v8 + 23);
        v11 = *(_QWORD *)(v8 + 8);
        v3 = *(_DWORD *)(a1 + 28);
        v10 = *(_BYTE *)(v8 + 23);
      }
      else
      {
        v13 = 1;
      }
      if (v10 < 0)
        v9 = v11;
      v7 += v13 + v9 + 1;
    }
    if ((v3 & 8) != 0)
      result = v7 + 2;
    else
      result = v7;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void sub_1009A9F9C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A98C0(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009A9FE8()
{
  return 1;
}

_QWORD *sub_1009A9FF0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.LocationRequest");
}

void sub_1009AA000(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 3725);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v6 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v6;
      v5 = *((_DWORD *)a2 + 4);
    }
    if ((v5 & 2) != 0)
    {
      v7 = a2[9];
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_BYTE *)(a1 + 9) = v7;
    }
  }
}

void sub_1009AA0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009AA0C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162098;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009AA0D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162098;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1009AA100()
{
  operator new();
}

uint64_t sub_1009AA13C(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1009AA150(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v17 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
        if (!(_DWORD)result)
          return result;
        v11 = v17;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_BYTE *)(a1 + 8) = v11 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)this + 1) = v9;
LABEL_23:
        v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v9;
          v14 = (unsigned __int8 *)(v9 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_BYTE *)(a1 + 9) = v13 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1009AA304(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  return result;
}

uint64_t sub_1009AA35C(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = 2 * (*(_DWORD *)(a1 + 16) & 1);
  if ((*(_DWORD *)(a1 + 16) & 2) != 0)
    v1 += 2;
  if (*(_DWORD *)(a1 + 16))
    v2 = v1;
  else
    v2 = 0;
  *(_DWORD *)(a1 + 12) = v2;
  return v2;
}

void sub_1009AA384(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009AA000(a1, lpsrc);
}

uint64_t sub_1009AA3D0()
{
  return 1;
}

_QWORD *sub_1009AA3D8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.ScenarioTriggerOptions");
}

void sub_1009AA3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 3972);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 3)
        sub_1019110A0();
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_BYTE **)(a2 + 8);
      if (!v8)
        v8 = *(_BYTE **)(qword_1023110B8 + 8);
      sub_1009AA000(v7, v8);
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(_DWORD *)(a2 + 20);
      if (v9 >= 3)
        sub_101911078();
      *(_DWORD *)(a1 + 28) |= 4u;
      *(_DWORD *)(a1 + 20) = v9;
    }
  }
}

void sub_1009AA50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009AA524(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102162110;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023110B8 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009AA578(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009AA524(a1);
  operator delete();
}

uint64_t sub_1009AA59C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023110B8;
  if (!qword_1023110B8)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_1023110B8;
  }
  return result;
}

void sub_1009AA5C8()
{
  operator new();
}

uint64_t sub_1009AA600(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16))
          *(_WORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
    *(_DWORD *)(result + 20) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1009AA634(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  uint64_t result;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v27 = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result)
            return result;
          v12 = v27;
        }
        else
        {
          v12 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v12 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 1u;
          *(_DWORD *)(a1 + 16) = v12;
        }
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 < *((_QWORD *)this + 2) && *v14 == 18)
        {
          *((_QWORD *)this + 1) = v14 + 1;
          goto LABEL_28;
        }
      }
      if (v7 == 2)
        break;
      if (v7 == 3)
      {
        v8 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          goto LABEL_42;
        }
      }
      else
      {
        v8 = TagFallback & 7;
      }
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
    v8 = TagFallback & 7;
    if (v8 != 2)
      goto LABEL_18;
LABEL_28:
    *(_DWORD *)(a1 + 28) |= 2u;
    v15 = *(_QWORD *)(a1 + 8);
    if (!v15)
      operator new();
    v28 = 0;
    v16 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v16;
      *((_QWORD *)this + 1) = v16 + 1;
    }
    v17 = *((_DWORD *)this + 14);
    v18 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v17 + 1;
    if (v17 >= v18)
      return 0;
    v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_1009AA150(v15, this, v20) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
    v21 = *((_DWORD *)this + 14);
    v22 = __OFSUB__(v21, 1);
    v23 = v21 - 1;
    if (v23 < 0 == v22)
      *((_DWORD *)this + 14) = v23;
    v24 = (_BYTE *)*((_QWORD *)this + 1);
    v9 = *((_QWORD *)this + 2);
    if ((unint64_t)v24 < v9 && *v24 == 24)
    {
      v10 = v24 + 1;
      *((_QWORD *)this + 1) = v10;
LABEL_42:
      v26 = 0;
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
        if (!(_DWORD)result)
          return result;
        v25 = v26;
      }
      else
      {
        v25 = *v10;
        *((_QWORD *)this + 1) = v10 + 1;
      }
      if (v25 <= 2)
      {
        *(_DWORD *)(a1 + 28) |= 4u;
        *(_DWORD *)(a1 + 20) = v25;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t sub_1009AA90C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023110B8 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
  return result;
}

uint64_t sub_1009AA994(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_28;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_21;
LABEL_13:
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_1023110B8 + 8);
    v7 = 2 * (*(_DWORD *)(v6 + 16) & 1);
    if ((*(_DWORD *)(v6 + 16) & 2) != 0)
      v7 += 2;
    if (*(_DWORD *)(v6 + 16))
      v8 = v7;
    else
      v8 = 0;
    *(_DWORD *)(v6 + 12) = v8;
    v4 = (v4 + v8 + 2);
    v3 = *(_DWORD *)(a1 + 28);
    goto LABEL_21;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v5 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_21;
      goto LABEL_13;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    }
    else
    {
      v10 = 2;
    }
    v4 = (v10 + v4);
  }
LABEL_28:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_1009AAA80(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009AA3E8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009AAACC()
{
  return 1;
}

_QWORD *sub_1009AAAD4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.ScenarioTrigger");
}

void sub_1009AAAE4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v16[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 4175);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        sub_1002318FC();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_10046A86C(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), *(_DWORD *)(a2 + 40) + a1[10]);
  if (*(int *)(a2 + 40) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v10);
      v12 = a1[11];
      v13 = (int)a1[10];
      if ((int)v13 >= v12)
      {
        if (v12 == a1[12])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), v12 + 1);
          v12 = a1[11];
        }
        a1[11] = v12 + 1;
        sub_1002318FC();
      }
      v14 = *((_QWORD *)a1 + 4);
      a1[10] = v13 + 1;
      sub_10046A86C(*(_QWORD *)(v14 + 8 * v13), v11);
      ++v10;
    }
    while (v10 < *(int *)(a2 + 40));
  }
}

void sub_1009AACB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009AACC8(uint64_t *a1)
{
  *a1 = (uint64_t)off_102162188;
  sub_10010C59C(a1 + 4);
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_1009AAD0C(uint64_t *a1)
{
  sub_1009AACC8(a1);
  operator delete();
}

uint64_t sub_1009AAD30(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023110C0;
  if (!qword_1023110C0)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_1023110C0;
  }
  return result;
}

void sub_1009AAD5C()
{
  operator new();
}

uint64_t sub_1009AADA4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 40) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 40));
  }
  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 60) = 0;
  return result;
}

uint64_t sub_1009AAE34(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  _BYTE *v35;
  uint64_t result;
  unsigned int v37;
  unsigned int v38;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        v7 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_30;
        while (1)
        {
          v10 = a1[5];
          v11 = a1[4];
          if ((int)v11 >= v10)
          {
            if (v10 == a1[6])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v10 + 1);
              v10 = a1[5];
            }
            a1[5] = v10 + 1;
            sub_1002318FC();
          }
          v12 = *((_QWORD *)a1 + 1);
          a1[4] = v11 + 1;
          v13 = *(_QWORD *)(v12 + 8 * v11);
          v37 = 0;
          v14 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37))return 0;
          }
          else
          {
            v37 = *v14;
            *((_QWORD *)this + 1) = v14 + 1;
          }
          v15 = *((_DWORD *)this + 14);
          v16 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v15 + 1;
          if (v15 >= v16)
            return 0;
          v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37);
          if (!sub_10046AB80(v13, this, v18) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
          v19 = *((_DWORD *)this + 14);
          v20 = __OFSUB__(v19, 1);
          v21 = v19 - 1;
          if (v21 < 0 == v20)
            *((_DWORD *)this + 14) = v21;
          v22 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v22 >= *((_QWORD *)this + 2))
            break;
          v23 = *v22;
          if (v23 != 10)
          {
            if (v23 != 18)
              goto LABEL_2;
            goto LABEL_34;
          }
          *((_QWORD *)this + 1) = v22 + 1;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_30;
      while (1)
      {
        v24 = a1[11];
        v25 = a1[10];
        if ((int)v25 >= v24)
        {
          if (v24 == a1[12])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v24 + 1);
            v24 = a1[11];
          }
          a1[11] = v24 + 1;
          sub_1002318FC();
        }
        v26 = *((_QWORD *)a1 + 4);
        a1[10] = v25 + 1;
        v27 = *(_QWORD *)(v26 + 8 * v25);
        v38 = 0;
        v28 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v38))return 0;
        }
        else
        {
          v38 = *v28;
          *((_QWORD *)this + 1) = v28 + 1;
        }
        v29 = *((_DWORD *)this + 14);
        v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 >= v30)
          return 0;
        v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v38);
        if (!sub_10046AB80(v27, this, v32) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
        v33 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v33, 1);
        v34 = v33 - 1;
        if (v34 < 0 == v20)
          *((_DWORD *)this + 14) = v34;
        v22 = (_BYTE *)*((_QWORD *)this + 1);
        v35 = (_BYTE *)*((_QWORD *)this + 2);
        if (v22 >= v35 || *v22 != 18)
          break;
LABEL_34:
        *((_QWORD *)this + 1) = v22 + 1;
      }
      if (v22 == v35 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v9 = TagFallback & 7;
LABEL_30:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1009AB178(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  return result;
}

uint64_t sub_1009AB208(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100214950(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4), a2);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      else
        v7 = 1;
      v3 += v6 + v7;
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  v8 = *(_DWORD *)(a1 + 40);
  v9 = (v8 + v3);
  if (v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100214950(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10), a2);
      v12 = (int)v11;
      if (v11 >= 0x80)
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
      else
        v13 = 1;
      v9 = (v12 + v9 + v13);
      ++v10;
    }
    while (v10 < *(int *)(a1 + 40));
  }
  *(_DWORD *)(a1 + 56) = v9;
  return v9;
}

void sub_1009AB2D8(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009AAAE4(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009AB324()
{
  return 1;
}

_QWORD *sub_1009AB32C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.EntryExitScanNetworks");
}

void sub_1009AB33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  const std::string *v7;
  std::string *v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 4375);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_BYTE *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_BYTE *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
    }
  }
}

void sub_1009AB420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009AB438(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162200;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009AB468(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162200;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1009AB4AC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023110C8;
  if (!qword_1023110C8)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_1023110C8;
  }
  return result;
}

void sub_1009AB4D8()
{
  operator new();
}

uint64_t sub_1009AB51C(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 24);
  if (v1)
  {
    *(_BYTE *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009AB568(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  void *v13;
  uint64_t result;
  unsigned int v15;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_15;
        v15 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
          if (!(_DWORD)result)
            return result;
          v11 = v15;
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v11 = *v10;
          v12 = v10 + 1;
          *((_QWORD *)this + 1) = v12;
        }
        *(_BYTE *)(a1 + 16) = v11 != 0;
        v8 = *(_DWORD *)(a1 + 24) | 1;
        *(_DWORD *)(a1 + 24) = v8;
        if ((unint64_t)v12 < v9 && *v12 == 18)
        {
          *((_QWORD *)this + 1) = v12 + 1;
          goto LABEL_23;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_15;
      v8 = *(_DWORD *)(a1 + 24);
LABEL_23:
      *(_DWORD *)(a1 + 24) = v8 | 2;
      v13 = *(void **)(a1 + 8);
      if (v13 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v7 = TagFallback & 7;
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1009AB728(uint64_t result, _BOOL8 a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  return result;
}

uint64_t sub_1009AB780(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    v4 = 2 * (v3 & 1u);
    if ((v3 & 2) != 0)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = v6;
      v8 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(v5 + 23);
      else
        v9 = v8;
      if (v9 >= 0x80)
      {
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9, a2);
        v6 = *(unsigned __int8 *)(v5 + 23);
        v8 = *(_QWORD *)(v5 + 8);
        v7 = *(_BYTE *)(v5 + 23);
      }
      else
      {
        v10 = 1;
      }
      if (v7 < 0)
        v6 = v8;
      v4 = (v4 | 1) + v10 + v6;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1009AB818(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009AB33C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009AB864()
{
  return 1;
}

_QWORD *sub_1009AB86C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.PowerAssertionEvent");
}

float sub_1009AB87C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  char v7;
  const std::string *v8;
  std::string *v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 4610);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v8 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      v9 = *(std::string **)(a1 + 8);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v9, v8);
      v6 = *(_DWORD *)(a2 + 28);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 2u;
    *(float *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 28) & 4) == 0)
      return result;
LABEL_7:
    v7 = *(_BYTE *)(a2 + 20);
    *(_DWORD *)(a1 + 28) |= 4u;
    *(_BYTE *)(a1 + 20) = v7;
  }
  return result;
}

void sub_1009AB990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009AB9A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162278;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009AB9D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162278;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1009ABA1C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023110D0;
  if (!qword_1023110D0)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_1023110D0;
  }
  return result;
}

void sub_1009ABA48()
{
  operator new();
}

uint64_t sub_1009ABA90(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(_BYTE **)v1 = 0;
          *(_QWORD *)(v1 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v1 = 0;
          *(_BYTE *)(v1 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 20) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1009ABAE0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  void *v11;
  uint64_t result;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_27;
        *(_DWORD *)(a1 + 28) |= 1u;
        v11 = *(void **)(a1 + 8);
        if (v11 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v11);
        if (!(_DWORD)result)
          return result;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 < *((_QWORD *)this + 2) && *v13 == 21)
        {
          *((_QWORD *)this + 1) = v13 + 1;
          goto LABEL_19;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 5)
        goto LABEL_27;
LABEL_19:
      v18 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v18) & 1) == 0)
        return 0;
      *(_DWORD *)(a1 + 16) = v18;
      *(_DWORD *)(a1 + 28) |= 2u;
      v14 = (_BYTE *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v14 < v9 && *v14 == 24)
      {
        v10 = v14 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_23:
        v17 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
          if (!(_DWORD)result)
            return result;
          v15 = v17;
          v16 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v10;
          v16 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)this + 1) = v16;
        }
        *(_BYTE *)(a1 + 20) = v15 != 0;
        *(_DWORD *)(a1 + 28) |= 4u;
        if (v16 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_27:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_1009ABD00(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(result + 8), a2);
    v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), v4, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(float *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 28) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), v4, a4);
  return result;
}

uint64_t sub_1009ABD78(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v6 + 23);
      else
        v10 = v9;
      if (v10 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
        v7 = *(unsigned __int8 *)(v6 + 23);
        v9 = *(_QWORD *)(v6 + 8);
        v11 = v12 + 1;
        v3 = *(_DWORD *)(a1 + 28);
        v8 = *(_BYTE *)(v6 + 23);
      }
      else
      {
        v11 = 2;
      }
      if (v8 < 0)
        v7 = v9;
      v4 = v11 + v7;
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 5;
    if ((v3 & 4) != 0)
      result = v4 + 2;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

float sub_1009ABE1C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1009AB87C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009ABE68()
{
  return 1;
}

_QWORD *sub_1009ABE70@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.TriggerReceived");
}

void sub_1009ABE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 4883);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 32);
      if (v6 >= 0x13)
        sub_1019110C8();
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0)
          return;
LABEL_13:
        v9 = *(const std::string **)(a2 + 24);
        *(_DWORD *)(a1 + 40) |= 8u;
        v10 = *(std::string **)(a1 + 24);
        if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        std::string::operator=(v10, v9);
        return;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_QWORD *)(a1 + 16) = v8;
    if ((*(_DWORD *)(a2 + 40) & 8) == 0)
      return;
    goto LABEL_13;
  }
}

void sub_1009ABFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009ABFCC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021622F0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009ABFFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021622F0;
  sub_1002BEE54((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1009AC040(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023110D8;
  if (!qword_1023110D8)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_1023110D8;
  }
  return result;
}

void sub_1009AC06C()
{
  operator new();
}

uint64_t sub_1009AC0B4(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1009AC104(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  void *v15;
  unsigned int v16[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v16[0] = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v16);
          if (!(_DWORD)result)
            return result;
          v9 = v16[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 <= 0x12)
        {
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 32) = v9;
        }
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 17)
        {
          *((_QWORD *)this + 1) = v12 + 1;
          goto LABEL_28;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_18;
LABEL_28:
        *(_QWORD *)v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v16;
        *(_DWORD *)(a1 + 40) |= 2u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 25)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_32:
        *(_QWORD *)v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) != 0)
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)v16;
          v10 = *(_DWORD *)(a1 + 40) | 4;
          *(_DWORD *)(a1 + 40) = v10;
          v14 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v14 < *((_QWORD *)this + 2) && *v14 == 34)
          {
            *((_QWORD *)this + 1) = v14 + 1;
LABEL_36:
            *(_DWORD *)(a1 + 40) = v10 | 8;
            v15 = *(void **)(a1 + 24);
            if (v15 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
              operator new();
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v15);
            if (!(_DWORD)result)
              return result;
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_32;
        goto LABEL_18;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_18;
        v10 = *(_DWORD *)(a1 + 40);
        goto LABEL_36;
      default:
        v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1009AC38C(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  return result;
}

uint64_t sub_1009AC420(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 8) != 0)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v9 = v8;
      v10 = *(_QWORD *)(v7 + 8);
      if ((v8 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v7 + 23);
      else
        v11 = v10;
      if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
        v8 = *(unsigned __int8 *)(v7 + 23);
        v10 = *(_QWORD *)(v7 + 8);
        v9 = *(_BYTE *)(v7 + 23);
      }
      else
      {
        v12 = 1;
      }
      if (v9 < 0)
        v8 = v10;
      v5 = (v5 + v12 + v8 + 1);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_1009AC500(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009ABE80(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009AC54C()
{
  return 1;
}

_QWORD *sub_1009AC554@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.MotionAlarmEvent");
}

void sub_1009AC564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  int v9;
  const std::string *v10;
  std::string *v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 5168);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 4)
        sub_1019110F0();
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 2u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0)
          return;
LABEL_15:
        v10 = *(const std::string **)(a2 + 24);
        *(_DWORD *)(a1 + 36) |= 8u;
        v11 = *(std::string **)(a1 + 24);
        if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        std::string::operator=(v11, v10);
        return;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }
    v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 20) = v9;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0)
      return;
    goto LABEL_15;
  }
}

void sub_1009AC6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009AC6F4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162368;
  sub_1002D5368((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009AC724(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102162368;
  sub_1002D5368((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1009AC768(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023110E0;
  if (!qword_1023110E0)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_1023110E0;
  }
  return result;
}

void sub_1009AC794()
{
  operator new();
}

uint64_t sub_1009AC7D8(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(result + 36);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 20) = 0;
    if ((*(_BYTE *)(result + 36) & 8) != 0)
    {
      v3 = *(_QWORD *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1009AC85C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _BYTE *v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v17 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
          if (!(_DWORD)result)
            return result;
          v9 = v17;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 <= 3)
        {
          *(_DWORD *)(a1 + 36) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 18)
        {
          *((_QWORD *)this + 1) = v12 + 1;
          goto LABEL_28;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_18;
LABEL_28:
        *(_DWORD *)(a1 + 36) |= 2u;
        v13 = *(void **)(a1 + 8);
        if (v13 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
        if (!(_DWORD)result)
          return result;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 29)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_34:
        v18 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v18) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v18;
          v10 = *(_DWORD *)(a1 + 36) | 4;
          *(_DWORD *)(a1 + 36) = v10;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 34)
          {
            *((_QWORD *)this + 1) = v15 + 1;
LABEL_38:
            *(_DWORD *)(a1 + 36) = v10 | 8;
            v16 = *(void **)(a1 + 24);
            if (v16 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
              operator new();
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
            if (!(_DWORD)result)
              return result;
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_34;
        goto LABEL_18;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_18;
        v10 = *(_DWORD *)(a1 + 36);
        goto LABEL_38;
      default:
        v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1009ACB08(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 24), a2);
  return result;
}

uint64_t sub_1009ACB9C(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_35;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    LODWORD(v4) = 0;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0)
      goto LABEL_22;
LABEL_13:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v3 = *(_DWORD *)(a1 + 36);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    LODWORD(v4) = v4 + v11 + v7 + 1;
    goto LABEL_22;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v5 & 0x80000000) != 0)
  {
    LODWORD(v4) = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      LODWORD(v4) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 36);
      if ((v3 & 2) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    LODWORD(v4) = 2;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
LABEL_22:
  if ((v3 & 4) != 0)
    v4 = (v4 + 5);
  else
    v4 = v4;
  if ((v3 & 8) != 0)
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v4 = (v4 + v17 + v13 + 1);
  }
LABEL_35:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_1009ACCD4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009AC564(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009ACD20()
{
  return 1;
}

_QWORD *sub_1009ACD28@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.FenceMonitorTimerEvent");
}

void sub_1009ACD38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", 5423);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 >= 5)
        sub_101911140();
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 6)
        sub_101911118();
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_1023110E8 + 16);
      sub_1009A50E0(v8, v9);
    }
  }
}

void sub_1009ACE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009ACE90(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021623E0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023110E8 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009ACEE4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009ACE90(a1);
  operator delete();
}

uint64_t sub_1009ACF08(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023110E8;
  if (!qword_1023110E8)
  {
    sub_1009A3F08(0, a2, a3, a4);
    return qword_1023110E8;
  }
  return result;
}

void sub_1009ACF34()
{
  operator new();
}

uint64_t sub_1009ACF6C(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 28);
  if (v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
        result = sub_1009A5538(result);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_1009ACFA8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  uint64_t result;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v27 = 0;
          v9 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
            if (!(_DWORD)result)
              return result;
            v10 = v27;
          }
          else
          {
            v10 = *v9;
            *((_QWORD *)this + 1) = v9 + 1;
          }
          if (v10 <= 4)
          {
            *(_DWORD *)(a1 + 28) |= 1u;
            *(_DWORD *)(a1 + 8) = v10;
          }
          v14 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          if ((unint64_t)v14 < v11 && *v14 == 16)
          {
            v12 = v14 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_28;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
LABEL_28:
        v26 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!(_DWORD)result)
            return result;
          v15 = v26;
        }
        else
        {
          v15 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (v15 <= 5)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_38;
        }
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_18;
      }
      v8 = TagFallback & 7;
      if (v8 == 2)
        break;
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_38:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v28 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))
        return 0;
    }
    else
    {
      v28 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_1009A560C(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1009AD29C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return result;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023110E8 + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_1009AD324(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_1023110E8 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A5DC4(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_1009AD41C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009ACD38(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009AD468()
{
  return 1;
}

_QWORD *sub_1009AD470@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RegionMonitoring.ConvergingStateEvent");
}

void sub_1009AD528(id a1)
{
  qword_102305EB8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSimulatedLocationProviderSilo"));
}

uint64_t sub_1009AD5DC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1009AD7A4;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102305ED8 != -1)
    dispatch_once(&qword_102305ED8, block);
  return qword_1023110F0;
}

void sub_1009AD77C(id a1)
{
  sub_100197040();
  if ((sub_1001B796C() & 0x2000) != 0)
    byte_102305EC8 = 1;
}

void sub_1009AD7A4()
{
  operator new();
}

void sub_1009AD800()
{
  operator delete();
}

void sub_1009AD828(uint64_t a1)
{
  sub_1006DB4AC(a1);
  operator delete();
}

uint64_t sub_1009AD850(char *a1, int a2)
{
  int v5;
  int v6;

  sub_1006DC0B4(a1, a2);
  if (a2)
  {
    v6 = 9;
    return (*(uint64_t (**)(char *, int *))(*(_QWORD *)a1 + 120))(a1, &v6);
  }
  else
  {
    v5 = 9;
    return (*(uint64_t (**)(char *, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v5, 1, 0xFFFFFFFFLL);
  }
}

void sub_1009AD8C0()
{
  operator new();
}

void sub_1009AD968(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1009AD9A4()
{
  operator new();
}

void sub_1009ADA54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

id sub_1009ADA90(uint64_t a1)
{
  return objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLSimulatedLocationProvider")), "syncgetDoSync:", a1);
}

void sub_1009ADAC8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

id sub_1009ADAF4(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  const void **v20;
  const void **v21;
  int v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  double v27;
  id v28;
  double v29;
  id v30;
  id v31;
  id v32;
  id v33;
  NSArray *v34;
  id v35;
  const void **v36;
  id v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40;
  _QWORD *v42;
  void *v43;
  const void **v44;

  if (!objc_opt_class(BMLocationMicroLocationVisit, a2))
    return 0;
  v3 = +[NSMutableArray array](NSMutableArray, "array");
  v4 = v3;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = (_QWORD *)(a1 + 16);
  if (v5 != (_QWORD *)(a1 + 16))
  {
    v7 = byte_102310487;
    v8 = *((_QWORD *)&xmmword_102310470 + 1);
    v42 = v6;
    v43 = v3;
    while (1)
    {
      v9 = (const void **)(v5 + 4);
      v10 = *((unsigned __int8 *)v5 + 55);
      v11 = v5[5];
      if ((v10 & 0x80u) == 0)
        v12 = *((unsigned __int8 *)v5 + 55);
      else
        v12 = v5[5];
      if ((v7 & 0x80u) == 0)
        v13 = v7;
      else
        v13 = v8;
      if (v12 == v13)
      {
        if ((v7 & 0x80u) == 0)
          v14 = &xmmword_102310470;
        else
          v14 = (__int128 *)xmmword_102310470;
        if ((v10 & 0x80) != 0)
        {
          v17 = memcmp(*v9, v14, v11);
          v9 = (const void **)(v5 + 4);
          if (!v17)
            goto LABEL_34;
        }
        else
        {
          if (!*((_BYTE *)v5 + 55))
            goto LABEL_34;
          v15 = (unsigned __int8 *)(v5 + 4);
          v16 = *((unsigned __int8 *)v5 + 55);
          while (*v15 == *(unsigned __int8 *)v14)
          {
            ++v15;
            v14 = (__int128 *)((char *)v14 + 1);
            if (!--v16)
              goto LABEL_34;
          }
        }
      }
      v18 = byte_1023104B7;
      if (byte_1023104B7 < 0)
        v18 = qword_1023104A8;
      if (v12 != v18)
        goto LABEL_47;
      v19 = byte_1023104B7 >= 0 ? &qword_1023104A0 : (uint64_t *)qword_1023104A0;
      if ((v10 & 0x80) == 0)
        break;
      v21 = v9;
      v22 = memcmp(*v9, v19, v11);
      v9 = v21;
      if (!v22)
        goto LABEL_34;
LABEL_47:
      v38 = (_QWORD *)v5[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v5[2];
          v40 = *v39 == (_QWORD)v5;
          v5 = v39;
        }
        while (!v40);
      }
      v5 = v39;
      if (v39 == v6)
        return v4;
    }
    if ((_DWORD)v10)
    {
      v20 = v9;
      while (*(unsigned __int8 *)v20 == *(unsigned __int8 *)v19)
      {
        v20 = (const void **)((char *)v20 + 1);
        v19 = (uint64_t *)((char *)v19 + 1);
        if (!--v10)
          goto LABEL_34;
      }
      goto LABEL_47;
    }
LABEL_34:
    if (v5[8] == v5[7])
      sub_101911334();
    v44 = v9;
    v23 = +[NSMutableArray array](NSMutableArray, "array");
    v25 = v5[7];
    v24 = v5[8];
    if (v25 == v24)
    {
      v26 = 0;
      v29 = 0.0;
    }
    else
    {
      v26 = 0;
      v27 = 0.0;
      do
      {
        v28 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v25);
        v29 = *(double *)(v25 + 16);
        v30 = objc_msgSend(objc_alloc((Class)BMLocationMicroLocationVisitProbabilityPerLocation), "initWithMicroLocationIdentifier:probability:", objc_msgSend(v28, "UUIDString"), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v29));
        objc_msgSend(v23, "addObject:", v30);

        if (v29 <= v27)
        {
          v29 = v27;
        }
        else
        {

          v26 = v28;
          v27 = v29;
        }

        v25 += 32;
      }
      while (v25 != v24);
    }
    v31 = objc_msgSend(objc_alloc((Class)BMLocationMicroLocationVisitNumDevicesPerTechnology), "initWithTechnology:numDevices:", CFSTR("numberOfWifiDevices"), +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v5[10]));
    v32 = objc_msgSend(objc_alloc((Class)BMLocationMicroLocationVisitNumDevicesPerTechnology), "initWithTechnology:numDevices:", CFSTR("numberOfBleDevices"), +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v5[11]));
    v33 = objc_msgSend(objc_alloc((Class)BMLocationMicroLocationVisitNumDevicesPerTechnology), "initWithTechnology:numDevices:", CFSTR("numberOfUwbDevices"), +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v5[12]));
    v34 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v31, v32, v33, 0);

    v35 = objc_alloc((Class)BMLocationMicroLocationVisit);
    if (*((char *)v5 + 55) < 0)
      v36 = (const void **)*v44;
    else
      v36 = v44;
    v37 = objc_msgSend(v35, "initWithDomain:maxProbabilityMicroLocationIdentifier:maxProbability:probabilityVector:isStable:numDevicesVector:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v36), objc_msgSend(v26, "UUIDString"), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v29), v23, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v5 + 104)), v34);
    v4 = v43;
    objc_msgSend(v43, "addObject:", v37);

    v7 = byte_102310487;
    v8 = *((_QWORD *)&xmmword_102310470 + 1);
    v6 = v42;
    goto LABEL_47;
  }
  return v4;
}

void sub_1009ADF40(double *a1, uint64_t a2)
{
  id v3;
  double *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  __int128 *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  double v15;
  id v16;
  double v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSArray *v22;
  id v23;
  void **v24;
  id v25;
  double *v26;
  double *v27;
  BOOL v28;
  void *v29;
  void *__p[2];
  uint64_t v31;
  void *v32[2];
  char v33;

  if (objc_opt_class(BMMicroLocationRestrictedLocalizationEvent, a2))
  {
    v3 = +[NSMutableArray array](NSMutableArray, "array");
    v4 = (double *)*((_QWORD *)a1 + 1);
    if (v4 != a1 + 2)
    {
      v29 = v3;
      v5 = *a1;
      do
      {
        v6 = *((unsigned __int8 *)v4 + 55);
        if ((v6 & 0x80u) == 0)
          v7 = *((unsigned __int8 *)v4 + 55);
        else
          v7 = *((_QWORD *)v4 + 5);
        v8 = byte_10231049F;
        if (byte_10231049F < 0)
          v8 = *((_QWORD *)&xmmword_102310488 + 1);
        if (v7 != v8)
          goto LABEL_34;
        v9 = (const void **)(v4 + 4);
        if (byte_10231049F >= 0)
          v10 = &xmmword_102310488;
        else
          v10 = (__int128 *)xmmword_102310488;
        if ((v6 & 0x80) != 0)
        {
          if (memcmp(*v9, v10, *((_QWORD *)v4 + 5)))
            goto LABEL_34;
        }
        else if (*((_BYTE *)v4 + 55))
        {
          while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v10)
          {
            v9 = (const void **)((char *)v9 + 1);
            v10 = (__int128 *)((char *)v10 + 1);
            if (!--v6)
              goto LABEL_19;
          }
          goto LABEL_34;
        }
LABEL_19:
        __p[0] = 0;
        __p[1] = 0;
        v31 = 0;
        sub_10029F7B8((char *)v4 + 112, (uint64_t)__p, (uint64_t)v32);
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        if (*((_QWORD *)v4 + 8) == *((_QWORD *)v4 + 7))
        {
          sub_1019114C4();
          abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationPublishHelper.mm", 88, "biomeRestrictedEventsFromLocalizationResultMeasurement");
          __break(1u);
          return;
        }
        v11 = +[NSMutableArray array](NSMutableArray, "array");
        v12 = *((_QWORD *)v4 + 7);
        v13 = *((_QWORD *)v4 + 8);
        if (v12 == v13)
        {
          v14 = 0;
          v15 = 0.0;
        }
        else
        {
          v14 = 0;
          v15 = 0.0;
          do
          {
            v16 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v12);
            v17 = *(double *)(v12 + 16);
            v18 = objc_msgSend(objc_alloc((Class)BMMicroLocationProbabilityPerLabel), "initWithLabelIdentifier:probability:", v16, v17);
            objc_msgSend(v11, "addObject:", v18);

            if (v17 > v15)
            {

              v14 = v16;
              v15 = v17;
            }

            v12 += 32;
          }
          while (v12 != v13);
        }
        v19 = objc_msgSend(objc_alloc((Class)BMMicroLocationNumDevicesPerTechnology), "initWithTechnology:numDevices:", CFSTR("numberOfWifiDevices"), *((unsigned int *)v4 + 20));
        v20 = objc_msgSend(objc_alloc((Class)BMMicroLocationNumDevicesPerTechnology), "initWithTechnology:numDevices:", CFSTR("numberOfBleDevices"), *((unsigned int *)v4 + 22));
        v21 = objc_msgSend(objc_alloc((Class)BMMicroLocationNumDevicesPerTechnology), "initWithTechnology:numDevices:", CFSTR("numberOfUwbDevices"), *((unsigned int *)v4 + 24));
        v22 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v19, v20, v21, 0);

        v23 = objc_alloc((Class)BMMicroLocationRestrictedLocalizationEvent);
        if (v33 >= 0)
          v24 = v32;
        else
          v24 = (void **)v32[0];
        v25 = objc_msgSend(v23, "initWithAbsoluteTimeStamp:clientBundleIdentifier:maxProbabilityLabelIdentifier:maxProbability:probabilityVector:numDevicesVector:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24), v14, v11, v22, v5, v15);
        objc_msgSend(v29, "addObject:", v25);

        if (v33 < 0)
          operator delete(v32[0]);
LABEL_34:
        v26 = (double *)*((_QWORD *)v4 + 1);
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = *(double **)v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (double *)*((_QWORD *)v4 + 2);
            v28 = *(_QWORD *)v27 == (_QWORD)v4;
            v4 = v27;
          }
          while (!v28);
        }
        v4 = v27;
      }
      while (v27 != a1 + 2);
    }
  }
}

void sub_1009AE290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1009AE2E0(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t **sub_1009AE30C@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = *result;
  v4 = result[1];
  while (v3 != v4)
  {
    v5 = *v3;
    result = (uint64_t **)sub_1000AF824(a2, &v5, &v5);
    v3 += 11;
  }
  return result;
}

void sub_1009AE374(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

void sub_1009AE388()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1009AE424(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1009AE43C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1009AE4C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_1009AE4E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;

  v2 = 0;
  result = 0;
  v4 = *(_DWORD *)(a1 + 8);
  do
  {
    if (v4)
    {
      --v4;
      v5 = *(unsigned __int8 *)(a1 + 12);
    }
    else
    {
      v6 = (unsigned __int8 *)(*(_QWORD *)a1)++;
      v5 = *v6;
      *(_BYTE *)(a1 + 12) = v5;
      v4 = 7;
    }
    *(_DWORD *)(a1 + 8) = v4;
    result |= (unint64_t)((v5 >> v4) & 1) << v2++;
  }
  while (v2 != 64);
  return result;
}

uint64_t sub_1009AE53C(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;

  if (!a2)
    return 0;
  v2 = result;
  v3 = 0;
  LODWORD(result) = 0;
  v4 = *(_DWORD *)(v2 + 8);
  do
  {
    if (v4)
    {
      --v4;
      v5 = *(unsigned __int8 *)(v2 + 12);
    }
    else
    {
      v6 = (unsigned __int8 *)(*(_QWORD *)v2)++;
      v5 = *v6;
      *(_BYTE *)(v2 + 12) = v5;
      v4 = 7;
    }
    *(_DWORD *)(v2 + 8) = v4;
    result = (((v5 >> v4) & 1) << v3++) | result;
  }
  while (a2 != v3);
  return result;
}

uint64_t sub_1009AE5A4(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;
  uint64_t v5;

  v2 = sub_1009AE53C(a1, 4);
  v3 = ((v2 << 28 >> 31) & 0xFFFFFFF0) + v2;
  if (v3 == -8)
  {
    result = sub_1009AE4E0(a1);
    v5 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    result = v5 + v3 + *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = result - v5;
  return result;
}

float sub_1009AE600@<S0>(int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  float result;
  int32x2_t v9;
  int v10;

  v6 = *a1;
  v7 = sub_1009AE5A4((uint64_t)a1);
  sub_1009AE6C0((uint64_t)a1, (uint64_t)&v9, (uint64_t)(a1 + 8));
  *a2 = *a1 - v6;
  *(float32x2_t *)a3 = vmul_f32(vcvt_f32_s32(v9), (float32x2_t)vdup_n_s32(0x39800000u));
  result = (float)v10 * 0.00024414;
  *(float *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 12) = v7;
  return result;
}

uint64_t sub_1009AE6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  int v9;
  int v10;

  v6 = 0;
  v7 = byte_101BEA30B[(int)sub_1009AE53C(a1, 3)];
  do
  {
    result = sub_1009AE53C(a1, v7);
    if ((result & (1 << (v7 - 1))) != 0)
      v9 = -1 << v7;
    else
      v9 = 0;
    v10 = *(_DWORD *)(a3 + v6) + result + v9;
    *(_DWORD *)(a2 + v6) = v10;
    *(_DWORD *)(a3 + v6) = v10;
    v6 += 4;
  }
  while (v6 != 12);
  return result;
}

uint64_t sub_1009AE75C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

float32x4_t sub_1009AE774@<Q0>(int *a1@<X0>, _DWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  int v6;
  uint64_t v7;
  float32x4_t result;
  int32x4_t v9;

  v6 = *a1;
  v7 = sub_1009AE5A4((uint64_t)a1);
  sub_1009AE820((uint64_t)a1, (uint64_t)&v9, (uint64_t)(a1 + 8));
  *a2 = *a1 - v6;
  result = vmulq_f32(vcvtq_f32_s32(v9), (float32x4_t)vdupq_n_s32(0x3D800000u));
  *a3 = result;
  a3[1].i64[0] = v7;
  return result;
}

uint64_t sub_1009AE820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  int v9;
  int v10;

  v6 = 0;
  v7 = byte_101BEA313[(int)sub_1009AE53C(a1, 3)];
  do
  {
    result = sub_1009AE53C(a1, v7);
    if ((result & (1 << (v7 - 1))) != 0)
      v9 = -1 << v7;
    else
      v9 = 0;
    v10 = *(_DWORD *)(a3 + v6) + result + v9;
    *(_DWORD *)(a2 + v6) = v10;
    *(_DWORD *)(a3 + v6) = v10;
    v6 += 4;
  }
  while (v6 != 16);
  return result;
}

double sub_1009AE8BC(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t sub_1009AE8D0(uint64_t result, double a2)
{
  *(double *)(result + 752) = a2;
  *(_BYTE *)(result + 760) = 1;
  return result;
}

void sub_1009AE8E0(uint64_t a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 760))
  {
    *(double *)(a1 + 768) = *(double *)(a1 + 768) + a2 - *(double *)(a1 + 752);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102162830);
    v3 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "converging state, tried to mark gnss ended, but never started", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102162830);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "converging state, tried to mark gnss ended, but never started", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLFenceConvergenceAttempt::markGnssEnded(CFAbsoluteTime)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  if (*(_BYTE *)(a1 + 760))
    *(_BYTE *)(a1 + 760) = 0;
}

double sub_1009AEA9C(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 760))
    return *(double *)(a1 + 768) + a2 - *(double *)(a1 + 752);
  else
    return *(double *)(a1 + 768);
}

double sub_1009AEAC0(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

BOOL sub_1009AEAE8(int *a1)
{
  return *((_QWORD *)a1 + 8) < (unint64_t)*a1;
}

_QWORD *sub_1009AEAFC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = result[8];
  if (v2
    && (v3 = v2 + result[7] - 1,
        v4 = *(_QWORD *)(result[4] + ((v3 >> 5) & 0x7FFFFFFFFFFFFF8)),
        v5 = *(_QWORD *)(v4 + 16 * v3),
        !*(_BYTE *)(v5 + 24)))
  {
    v6 = *(_QWORD *)(v4 + 16 * v3 + 8);
    *a2 = v5;
    a2[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

BOOL sub_1009AEB64(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[8];
  return v1
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[4] + (((unint64_t)(v1 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (v1 + *((_BYTE *)a1 + 56) - 1))
                  + 24) == 0;
}

void sub_1009AEBAC(uint64_t a1, double a2)
{
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  if (*(_QWORD *)(a1 + 64))
  {
    v4 = (int64x2_t *)(a1 + 24);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + ((*(_QWORD *)(a1 + 56) >> 5) & 0x7FFFFFFFFFFFFF8));
      v6 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(v5 + 16 * v6);
      if (a2 - *(double *)(v7 + 8) <= *(double *)(a1 + 8))
        break;
      v8 = *(std::__shared_weak_count **)(v5 + 16 * v6 + 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102162830);
      v11 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        if (*(_BYTE *)(v7 + 24))
          v12 = *(_QWORD *)(v7 + 16);
        else
          v12 = 0;
        v13 = *(_QWORD *)(v7 + 8);
        *(_DWORD *)buf = 134218240;
        v26 = v13;
        v27 = 2048;
        v28 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "converging state, pruning previous attempt, startTime, %f, endTime, %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102162830);
        v16 = *(_QWORD *)(v7 + 8);
        if (*(_BYTE *)(v7 + 24))
          v17 = *(_QWORD *)(v7 + 16);
        else
          v17 = 0;
        v21 = 134218240;
        v22 = v16;
        v23 = 2048;
        v24 = v17;
        LODWORD(v20) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "converging state, pruning previous attempt, startTime, %f, endTime, %f", COERCE_DOUBLE(&v21), v20);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceConvergenceStateBudget::pruneAttemptsPredatingTime(CFAbsoluteTime)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      sub_10017F858(v4);
      if (v8)
      {
        v14 = (unint64_t *)&v8->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    while (*(_QWORD *)(a1 + 64));
  }
}

void sub_1009AEE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1009AEE84(_QWORD *a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = a1[8];
  if (v1)
  {
    v2 = *(uint64_t **)(*(_QWORD *)(a1[4] + (((v1 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v1 + *((_BYTE *)a1 + 56) - 1));
    if (!*((_BYTE *)v2 + 24))
    {
      v3 = *v2;
      v1 = *v2 & 0xFFFFFFFFFFFFFF00;
      v3 = v3;
      return v3 | v1;
    }
    v1 = 0;
  }
  v3 = 0;
  return v3 | v1;
}

BOOL sub_1009AEEE4(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2
    && (v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                   + (((unint64_t)(v2 + *(_QWORD *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v2 + *(_BYTE *)(a1 + 56) - 1)),
        !*(_BYTE *)(v3 + 24)))
  {
    return a2 - *(double *)(v3 + 8) > *(double *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

double sub_1009AEF3C(uint64_t a1, double result)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                               + (((unint64_t)(v2 + *(_QWORD *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v2 + *(_BYTE *)(a1 + 56) - 1));
    if (!*(_BYTE *)(v3 + 24))
      return *(double *)(a1 + 16) - (result - *(double *)(v3 + 8));
  }
  return result;
}

BOOL sub_1009AEF9C(_QWORD *a1, uint64_t *a2, uint64_t *a3, double a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  NSObject *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  const char *v25;
  __int128 v26;
  double v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t *v31;
  __int16 v32;
  uint64_t *v33;
  __int16 v34;
  uint64_t v35;
  _BYTE buf[12];
  __int16 v37;
  uint64_t *v38;
  __int16 v39;
  uint64_t *v40;
  __int16 v41;
  uint64_t v42;

  v27 = a4;
  v4 = a1[8];
  v5 = *(int *)a1;
  if (v4 < v5)
  {
    v9 = a1[9];
    a1[9] = v9 + 1;
    *(_QWORD *)buf = v9;
    sub_1009AF64C(buf, (uint64_t *)&v27, &v26);
    sub_1009AF288(a1 + 3, &v26);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102162830);
    v10 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = (uint64_t *)*a2;
      if (*((char *)a3 + 23) >= 0)
        v12 = a3;
      else
        v12 = (uint64_t *)*a3;
      v14 = *(_QWORD *)v26;
      v13 = *(_QWORD *)(v26 + 8);
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = v14;
      v37 = 2080;
      v38 = v11;
      v39 = 2080;
      v40 = v12;
      v41 = 2048;
      v42 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "converging state, starting new attempt, id, %zu, fence, %s/%s, startTime, %f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102162830);
      if (*((char *)a2 + 23) >= 0)
        v19 = a2;
      else
        v19 = (uint64_t *)*a2;
      if (*((char *)a3 + 23) >= 0)
        v20 = a3;
      else
        v20 = (uint64_t *)*a3;
      v22 = *(_QWORD *)v26;
      v21 = *(_QWORD *)(v26 + 8);
      v28 = 134218754;
      v29 = v22;
      v30 = 2080;
      v31 = v19;
      v32 = 2080;
      v33 = v20;
      v34 = 2048;
      v35 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, starting new attempt, id, %zu, fence, %s/%s, startTime, %f", (size_t)&v28, 42, v25, *(double *)&v26);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceConvergenceStateBudget::startNewAttempt(CFAbsoluteTime, const std::string &, const std::string &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  return v4 < v5;
}

void sub_1009AF268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009AF288(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1009AF8F8(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void sub_1009AF32C(_QWORD *a1, double a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  double v20;
  double v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  v3 = *(_OWORD *)(*(_QWORD *)(a1[4] + (((unint64_t)(a1[8] + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (*((_BYTE *)a1 + 64) + *((_BYTE *)a1 + 56) - 1));
  v21 = *(double *)(*(_QWORD *)(a1[4] + (((unint64_t)(a1[8] + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (*((_BYTE *)a1 + 64) + *((_BYTE *)a1 + 56) - 1));
  v4 = *(std::__shared_weak_count **)(*(_QWORD *)(a1[4]
                                                + (((unint64_t)(a1[8] + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * (*((_BYTE *)a1 + 64) + *((_BYTE *)a1 + 56) - 1)
                                    + 8);
  if (*((_QWORD *)&v3 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (uint64_t *)v3;
  *(double *)(v3 + 16) = a2;
  *(_BYTE *)(v3 + 24) = 1;
  *(double *)(v3 + 128) = *(double *)(v3 + 248) - *(double *)(v3 + 404);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102162830);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    if (!*((_BYTE *)v7 + 24))
      sub_10028DF3C();
    v10 = *v7;
    v9 = v7[1];
    v11 = v7[2];
    *(_DWORD *)buf = 134218496;
    v29 = v10;
    v30 = 2048;
    v31 = v9;
    v32 = 2048;
    v33 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "converging state, ending current attempt, id, %zu, startTime, %f, endTime, %f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102162830);
    if (!*((_BYTE *)v7 + 24))
      sub_10028DF3C();
    v16 = *v7;
    v15 = v7[1];
    v17 = v7[2];
    v22 = 134218496;
    v23 = v16;
    v24 = 2048;
    v25 = v15;
    v26 = 2048;
    v27 = v17;
    LODWORD(v20) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, ending current attempt, id, %zu, startTime, %f, endTime, %f", (size_t)&v22, v20, v21);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceConvergenceStateBudget::endCurrentAttempt(CFAbsoluteTime)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  *((double *)v7 + 8) = a2 - *((double *)v7 + 1);
  if (*((_BYTE *)v7 + 760))
    v12 = *((double *)v7 + 96) + a2 - *((double *)v7 + 94);
  else
    v12 = *((double *)v7 + 96);
  *((double *)v7 + 11) = v12;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1009AF600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009AF620(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

_QWORD *sub_1009AF64C@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x320uLL);
  result = sub_1009AF6AC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1009AF698(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009AF6AC(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = off_102162860;
  a1[1] = 0;
  sub_1009AF780((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1009AF6FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1009AF710(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102162860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009AF724(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102162860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1009AF758(uint64_t a1)
{
  char v1;

  sub_1009AF878((uint64_t)&v1, a1 + 24);
}

char *sub_1009AF780(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  char *result;

  v5 = *a4;
  *(_QWORD *)a2 = *a3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_BYTE *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 156) = 0u;
  *(_OWORD *)(a2 + 188) = xmmword_101C17488;
  *(_OWORD *)(a2 + 172) = xmmword_101C17478;
  *(_OWORD *)(a2 + 252) = xmmword_101C174C8;
  *(_OWORD *)(a2 + 236) = xmmword_101C174B8;
  *(_OWORD *)(a2 + 220) = xmmword_101C174A8;
  *(_OWORD *)(a2 + 204) = xmmword_101C17498;
  *(_OWORD *)(a2 + 312) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a2 + 300) = xmmword_101C174F8;
  *(_OWORD *)(a2 + 284) = xmmword_101C174E8;
  *(_OWORD *)(a2 + 268) = xmmword_101C174D8;
  *(_OWORD *)(a2 + 424) = xmmword_101C174D8;
  *(_OWORD *)(a2 + 440) = xmmword_101C174E8;
  *(_OWORD *)(a2 + 456) = xmmword_101C174F8;
  *(_OWORD *)(a2 + 468) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a2 + 360) = xmmword_101C17498;
  *(_OWORD *)(a2 + 376) = xmmword_101C174A8;
  *(_OWORD *)(a2 + 392) = xmmword_101C174B8;
  *(_OWORD *)(a2 + 408) = xmmword_101C174C8;
  *(_OWORD *)(a2 + 328) = xmmword_101C17478;
  *(_OWORD *)(a2 + 344) = xmmword_101C17488;
  result = sub_1001157C0((char *)(a2 + 488));
  *(_DWORD *)(a2 + 736) = 0;
  *(_QWORD *)(a2 + 744) = 0;
  *(_BYTE *)(a2 + 752) = 0;
  *(_BYTE *)(a2 + 760) = 0;
  *(_QWORD *)(a2 + 768) = 0;
  return result;
}

void sub_1009AF878(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 712);
  if (v3)
  {
    *(_QWORD *)(a2 + 720) = v3;
    operator delete(v3);
  }

  if (*(char *)(a2 + 703) < 0)
    operator delete(*(void **)(a2 + 680));
  if (*(char *)(a2 + 559) < 0)
    operator delete(*(void **)(a2 + 536));
  if (*(char *)(a2 + 535) < 0)
    operator delete(*(void **)(a2 + 512));
  if (*(char *)(a2 + 511) < 0)
    operator delete(*(void **)(a2 + 488));
}

void sub_1009AF8F8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1009AFBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1009AFCB0(id a1)
{
  qword_102305F38 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLFitnessDailyAnalyticsAggregatorSilo"));
}

id sub_1009B0690(uint64_t a1, void *a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1009BA7B4;
  v3[3] = &unk_10212BB58;
  v3[4] = a2;
  return objc_msgSend(objc_msgSend(objc_msgSend(a2, "universe"), "silo"), "async:", v3);
}

id sub_1009B06F8(uint64_t a1, unsigned int *a2, _QWORD *a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionNotification:data:", *a2, *a3);
}

id sub_1009B070C(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[12];

  v4 = *a2;
  v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return objc_msgSend(a4, "onCompanionNotification:data:", v4, v12);
}

id sub_1009B0768(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5;
  _BYTE __dst[1424];

  v5 = *a2;
  memcpy(__dst, __src, sizeof(__dst));
  return objc_msgSend(a4, "onNatalimetryNotification:data:", v5, __dst);
}

id sub_1009B07E4(uint64_t a1, unsigned int *a2, unsigned int *a3, void *a4)
{
  return _objc_msgSend(a4, "onFitnessTrackingNotification:data:", *a2, *a3);
}

void sub_1009B1004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1009B1018(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "storeCache:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_1009B23D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1009B23E4(uint64_t a1)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a1 + 32);
  if (v2[21])
  {
    objc_msgSend(v2, "resetQueryState");
    v2 = *(_DWORD **)(a1 + 32);
  }
  v2[21] = 1;
  return _objc_msgSend(*(id *)(a1 + 32), "runQueries");
}

id sub_1009B2884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  void ***v9;
  void **v11;
  uint64_t v12;
  id (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  id (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  if (a4)
  {
    v17 = _NSConcreteStackBlock;
    v18 = 3221225472;
    v19 = sub_1009B2938;
    v20 = &unk_10212BB30;
    v8 = *(_QWORD *)(a1 + 32);
    v21 = a4;
    v22 = v8;
    v9 = &v17;
  }
  else
  {
    v11 = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_1009B2B0C;
    v14 = &unk_10212BB30;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = a3;
    v9 = &v11;
  }
  return objc_msgSend(v7, "async:", v9, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
}

id sub_1009B2938(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v2 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "code");
      *(_DWORD *)buf = 134349056;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, querySources encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v5 = qword_10229FF18;
      v6 = objc_msgSend(*(id *)(a1 + 32), "code");
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "CLFitnessDailyAnalyticsAggregator, querySources encountered error, %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator querySources]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "resetQueryState");
}

id sub_1009B2B0C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[1632];
  _BYTE v23[128];

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128) = objc_alloc_init((Class)NSMutableSet);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136) = objc_alloc_init((Class)NSMutableSet);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144) = objc_alloc_init((Class)NSMutableSet);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152) = objc_alloc_init((Class)NSMutableSet);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v2 = *(void **)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        if (!objc_msgSend(objc_msgSend(v7, "_productType"), "hasPrefix:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112)))
        {
          v10 = objc_msgSend(objc_msgSend(v7, "_productType"), "hasPrefix:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120));
          v9 = 152;
          if (!v10)
            continue;
LABEL_12:
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + v9), "addObject:", v7);
          continue;
        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "addObject:", v7);
        if (objc_msgSend(v7, "_hasFirstPartyBundleID"))
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "addObject:", v7);
        v8 = objc_msgSend(objc_msgSend(v7, "bundleIdentifier"), "isEqual:", CFSTR("com.apple.Fitness"));
        v9 = 144;
        if ((v8 & 1) != 0)
          goto LABEL_12;
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    }
    while (v4);
  }
  v11 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "count");
  v12 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "count");
  if (v11 | v12)
  {
    if (v12)
    {
      sub_100197040();
      if (sub_100195F08())
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 160) = 2;
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 164) = 2;
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168) = 2;
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 172) = 2;
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 176) = 2;
      }
    }
    if (v11)
    {
      sub_100197040();
      if (sub_100195F08())
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 180) = 2;
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 184) = 2;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 188) = 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 192) = 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 196) = 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 200) = 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 204) = 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 208) = 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 212) = 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 216) = 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 220) = 2;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 224) = 2;
    }
    return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
  }
  else
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v14 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, #Warning No step count / workouts", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 2, "CLFitnessDailyAnalyticsAggregator, #Warning No step count / workouts", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator querySources]_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    return objc_msgSend(*(id *)(a1 + 32), "resetQueryState");
  }
}

id sub_1009B36C0(uint64_t a1, double **a2)
{
  double *v3;
  double v4;
  double v5;
  id v6;
  NSObject *v7;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  int v13;
  id v14;
  __int16 v15;
  double v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  double v20;

  v3 = *a2;
  v4 = 0.0;
  while (v3 != a2[1])
  {
    v5 = *v3++;
    v4 = v4 + v5;
  }
  v6 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v6);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v7 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v18 = objc_msgSend(v6, "UTF8String");
    v19 = 2048;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionStepCount, day, %s, steps, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v9 = qword_10229FF18;
    v13 = 136315394;
    v14 = objc_msgSend(v6, "UTF8String");
    v15 = 2048;
    v16 = v4;
    LODWORD(v12) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "CLFitnessDailyAnalyticsAggregator, queryCompanionStepCount, day, %s, steps, %f", (const char *)&v13, v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionStepCount]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v6), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v4), CFSTR("kCompanionStepsKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 176);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B3A00(uint64_t a1, uint64_t a2, double a3)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  id v11;
  NSObject *v12;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  int v18;
  id v19;
  __int16 v20;
  double v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  id v25;
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;

  v4 = *(double **)a2;
  v5 = 0;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    v7 = v6 >> 3;
    if (v7 <= 1)
      v7 = 1;
    v8 = 0.0;
    a3 = 30.0;
    do
    {
      v9 = *v4++;
      v10 = v9;
      if (v9 < 30.0)
        v5 = v5;
      else
        v5 = (v5 + 1);
      v8 = v8 + v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = 0.0;
  }
  v11 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40), a3);
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v11);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v12 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v25 = objc_msgSend(v11, "UTF8String");
    v26 = 2048;
    v27 = v8;
    v28 = 1024;
    v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryStepCount, day, %s, steps, %f, hours, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v14 = qword_10229FF18;
    v18 = 136315650;
    v19 = objc_msgSend(v11, "UTF8String");
    v20 = 2048;
    v21 = v8;
    v22 = 1024;
    v23 = v5;
    LODWORD(v17) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "CLFitnessDailyAnalyticsAggregator, queryStepCount, day, %s, steps, %f, hours, %d", (const char *)&v18, v17);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryStepCount]_block_invoke", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v11), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8), CFSTR("kStepsKey"));
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v11), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5), CFSTR("kHoursActiveKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 188);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

void sub_1009B3E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Block_object_dispose(&a20, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1009B3EC4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  __int128 v17;
  _QWORD v18[5];
  _QWORD v19[6];
  _QWORD v20[5];

  if (objc_msgSend(a4, "code") == (id)11)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1009B4020;
    v20[3] = &unk_102162918;
    v20[4] = *(_QWORD *)(a1 + 56);
    v8 = (void ***)v20;
  }
  else if (a4)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1009B4094;
    v19[3] = &unk_10212BB30;
    v9 = *(_QWORD *)(a1 + 32);
    v19[4] = a4;
    v19[5] = v9;
    v8 = (void ***)v19;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1009B4268;
    v18[3] = &unk_102162940;
    v18[4] = *(_QWORD *)(a1 + 64);
    objc_msgSend(a3, "enumerateStatisticsFromDate:toDate:withBlock:", v10, v11, v18);
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v13 = _NSConcreteStackBlock;
    v14 = 3221225472;
    v15 = sub_1009B438C;
    v16 = &unk_102162968;
    v17 = *(_OWORD *)(a1 + 56);
    v8 = &v13;
  }
  return objc_msgSend(v7, "async:", v8, v13, v14, v15, v16, v17);
}

void sub_1009B4020(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *__p;
  void *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = operator new(8uLL);
  __p = v2;
  *v2 = 0;
  v4 = v2 + 1;
  v5 = v2 + 1;
  (*(void (**)(uint64_t, void **))(v1 + 16))(v1, &__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1009B4078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1009B4094(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v2 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "code");
      *(_DWORD *)buf = 134349056;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryStepCount encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v5 = qword_10229FF18;
      v6 = objc_msgSend(*(id *)(a1 + 32), "code");
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "CLFitnessDailyAnalyticsAggregator, queryStepCount encountered error, %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryStepCount:endDate:sources:stepCountHandler:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "resetQueryState");
}

void sub_1009B4268(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = objc_msgSend(a2, "sumQuantity");
  if (a2)
  {
    objc_msgSend(v4, "doubleValueForUnit:", +[HKUnit countUnit](HKUnit, "countUnit"));
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v8 = (char *)v7[7];
  v9 = v7[8];
  if ((unint64_t)v8 >= v9)
  {
    v11 = (char *)v7[6];
    v12 = (v8 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_100259694();
    v13 = v9 - (_QWORD)v11;
    v14 = (uint64_t)(v9 - (_QWORD)v11) >> 2;
    if (v14 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      v16 = (char *)sub_10025E6A0((uint64_t)(v7 + 8), v15);
      v11 = (char *)v7[6];
      v8 = (char *)v7[7];
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v6;
    v10 = v17 + 8;
    while (v8 != v11)
    {
      v19 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v17 - 1) = v19;
      v17 -= 8;
    }
    v7[6] = v17;
    v7[7] = v10;
    v7[8] = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_QWORD *)v8 = v6;
    v10 = v8 + 8;
  }
  v7[7] = v10;
}

void sub_1009B438C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = 0;
  v5 = 0;
  __p = 0;
  sub_10025EA00(&__p, *(const void **)(v2 + 48), *(_QWORD *)(v2 + 56), (uint64_t)(*(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48)) >> 3);
  (*(void (**)(uint64_t, void **))(v1 + 16))(v1, &__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1009B43F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1009B44E0(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  uint64_t v17;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v15 = objc_msgSend(v4, "UTF8String");
    v16 = 2048;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryFlightsClimbed, day, %s, count, %zu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v10 = 136315394;
    v11 = objc_msgSend(v4, "UTF8String");
    v12 = 2048;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryFlightsClimbed, day, %s, count, %zu", (const char *)&v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryFlightsClimbed]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kFlightsClimbedKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 192);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B480C(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  uint64_t v17;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v15 = objc_msgSend(v4, "UTF8String");
    v16 = 2048;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionFlightsClimbed, day, %s, count, %zu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v10 = 136315394;
    v11 = objc_msgSend(v4, "UTF8String");
    v12 = 2048;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryCompanionFlightsClimbed, day, %s, count, %zu", (const char *)&v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionFlightsClimbed]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kCompanionFlightsClimbedKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B4BB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[5];

  if (objc_msgSend(a4, "code") == (id)11)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1009B4CC4;
    v14[3] = &unk_102162918;
    v14[4] = *(_QWORD *)(a1 + 40);
    v8 = v14;
  }
  else
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009B4CD4;
      v13[3] = &unk_10212BB30;
      v9 = *(_QWORD *)(a1 + 32);
      v13[4] = a4;
      v13[5] = v9;
      v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009B4EA8;
      v12[3] = &unk_1021629E0;
      v10 = *(_QWORD *)(a1 + 40);
      v12[4] = a3;
      v12[5] = v10;
      v8 = v12;
    }
  }
  return objc_msgSend(v7, "async:", v8);
}

uint64_t sub_1009B4CC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1009B4CD4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v2 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "code");
      *(_DWORD *)buf = 134349056;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryFlightsClimbed encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v5 = qword_10229FF18;
      v6 = objc_msgSend(*(id *)(a1 + 32), "code");
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "CLFitnessDailyAnalyticsAggregator, queryFlightsClimbed encountered error, %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryFlightsClimbed:endDate:sources:flightsClimbedHandler:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "resetQueryState");
}

uint64_t sub_1009B4EA8(uint64_t a1)
{
  uint64_t v1;
  double v2;

  v1 = *(_QWORD *)(a1 + 40);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sumQuantity"), "doubleValueForUnit:", +[HKUnit countUnit](HKUnit, "countUnit"));
  return (*(uint64_t (**)(uint64_t, unint64_t))(v1 + 16))(v1, (unint64_t)v2);
}

id sub_1009B4FD0(uint64_t a1, double a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  id v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  double v18;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v16 = objc_msgSend(v4, "UTF8String");
    v17 = 2048;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryActiveCalories, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v11 = 136315394;
    v12 = objc_msgSend(v4, "UTF8String");
    v13 = 2048;
    v14 = a2;
    LODWORD(v10) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryActiveCalories, day, %s, calories, %f", (const char *)&v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryActiveCalories]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kActiveCaloriesKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 200);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B5308(uint64_t a1, double a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  id v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  double v18;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v16 = objc_msgSend(v4, "UTF8String");
    v17 = 2048;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionActiveCalories, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v11 = 136315394;
    v12 = objc_msgSend(v4, "UTF8String");
    v13 = 2048;
    v14 = a2;
    LODWORD(v10) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryCompanionActiveCalories, day, %s, calories, %f", (const char *)&v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionActiveCalories]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kCompanionActiveCaloriesKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 160);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B5640(uint64_t a1, double a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  id v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  double v18;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v16 = objc_msgSend(v4, "UTF8String");
    v17 = 2048;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryBasalCalories, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v11 = 136315394;
    v12 = objc_msgSend(v4, "UTF8String");
    v13 = 2048;
    v14 = a2;
    LODWORD(v10) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryBasalCalories, day, %s, calories, %f", (const char *)&v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryBasalCalories]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kBasalCaloriesKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 204);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B5978(uint64_t a1, double a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  id v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  double v18;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v16 = objc_msgSend(v4, "UTF8String");
    v17 = 2048;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionBasalCalories, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v11 = 136315394;
    v12 = objc_msgSend(v4, "UTF8String");
    v13 = 2048;
    v14 = a2;
    LODWORD(v10) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryCompanionBasalCalories, day, %s, calories, %f", (const char *)&v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionBasalCalories]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kCompanionBasalCaloriesKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 164);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B5D20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[5];

  if (objc_msgSend(a4, "code") == (id)11)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1009B5E2C;
    v14[3] = &unk_102162918;
    v14[4] = *(_QWORD *)(a1 + 40);
    v8 = v14;
  }
  else
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009B5E3C;
      v13[3] = &unk_10212BB30;
      v9 = *(_QWORD *)(a1 + 32);
      v13[4] = a4;
      v13[5] = v9;
      v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009B6010;
      v12[3] = &unk_1021629E0;
      v10 = *(_QWORD *)(a1 + 40);
      v12[4] = a3;
      v12[5] = v10;
      v8 = v12;
    }
  }
  return objc_msgSend(v7, "async:", v8);
}

uint64_t sub_1009B5E2C(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 32) + 16))(0.0);
}

id sub_1009B5E3C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v2 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "code");
      *(_DWORD *)buf = 134349056;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryCalories encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v5 = qword_10229FF18;
      v6 = objc_msgSend(*(id *)(a1 + 32), "code");
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "CLFitnessDailyAnalyticsAggregator, queryCalories encountered error, %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryCalories:endDate:hkIdentifier:sources:caloriesHandler:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "resetQueryState");
}

uint64_t sub_1009B6010(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sumQuantity"), "doubleValueForUnit:", +[HKUnit kilocalorieUnit](HKUnit, "kilocalorieUnit"));
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v1);
}

id sub_1009B6128(uint64_t a1, double a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  id v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  double v18;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v16 = objc_msgSend(v4, "UTF8String");
    v17 = 2048;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryPedDistance, day, %s, distance, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v11 = 136315394;
    v12 = objc_msgSend(v4, "UTF8String");
    v13 = 2048;
    v14 = a2;
    LODWORD(v10) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryPedDistance, day, %s, distance, %f", (const char *)&v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryPedDistance]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kPedDistanceKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 208);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B6454(uint64_t a1, double a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  id v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  double v18;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v16 = objc_msgSend(v4, "UTF8String");
    v17 = 2048;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionPedDistance, day, %s, distance, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v11 = 136315394;
    v12 = objc_msgSend(v4, "UTF8String");
    v13 = 2048;
    v14 = a2;
    LODWORD(v10) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryCompanionPedDistance, day, %s, distance, %f", (const char *)&v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionPedDistance]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kCompanionPedDistanceKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 172);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B6800(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[5];

  if (objc_msgSend(a4, "code") == (id)11)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1009B690C;
    v14[3] = &unk_102162918;
    v14[4] = *(_QWORD *)(a1 + 40);
    v8 = v14;
  }
  else
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009B691C;
      v13[3] = &unk_10212BB30;
      v9 = *(_QWORD *)(a1 + 32);
      v13[4] = a4;
      v13[5] = v9;
      v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009B6AF0;
      v12[3] = &unk_1021629E0;
      v10 = *(_QWORD *)(a1 + 40);
      v12[4] = a3;
      v12[5] = v10;
      v8 = v12;
    }
  }
  return objc_msgSend(v7, "async:", v8);
}

uint64_t sub_1009B690C(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 32) + 16))(0.0);
}

id sub_1009B691C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v2 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "code");
      *(_DWORD *)buf = 134349056;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryPedDistance encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v5 = qword_10229FF18;
      v6 = objc_msgSend(*(id *)(a1 + 32), "code");
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "CLFitnessDailyAnalyticsAggregator, queryPedDistance encountered error, %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryPedDistance:endDate:sources:distanceHandler:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "resetQueryState");
}

uint64_t sub_1009B6AF0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sumQuantity"), "doubleValueForUnit:", +[HKUnit meterUnit](HKUnit, "meterUnit"));
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v1);
}

id sub_1009B6C08(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id v8;
  NSObject *v9;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  int v15;
  id v16;
  __int16 v17;
  double v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  double v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;

  v8 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v8);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v9 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v24 = objc_msgSend(v8, "UTF8String");
    v25 = 2048;
    v26 = a3;
    v27 = 2048;
    v28 = a2;
    v29 = 2048;
    v30 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromAllWorkouts, day, %s, calories, %f, nonPedWorkoutCount, %zu, nonPedWorkoutTime(seconds), %f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v11 = qword_10229FF18;
    v15 = 136315906;
    v16 = objc_msgSend(v8, "UTF8String");
    v17 = 2048;
    v18 = a3;
    v19 = 2048;
    v20 = a2;
    v21 = 2048;
    v22 = a4;
    LODWORD(v14) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromAllWorkouts, day, %s, calories, %f, nonPedWorkoutCount, %zu, nonPedWorkoutTime(seconds), %f", (const char *)&v15, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCaloriesFromAllWorkouts]_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3), CFSTR("kCaloriesFromAllWorkoutsKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 212);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B6F64(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id v8;
  NSObject *v9;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  int v15;
  id v16;
  __int16 v17;
  double v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  double v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;

  v8 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v8);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v9 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v24 = objc_msgSend(v8, "UTF8String");
    v25 = 2048;
    v26 = a3;
    v27 = 2048;
    v28 = a2;
    v29 = 2048;
    v30 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromFirstPartyWorkouts, day, %s, calories, %f, nonPedWorkoutCount, %zu, nonPedWorkoutTime(seconds), %f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v11 = qword_10229FF18;
    v15 = 136315906;
    v16 = objc_msgSend(v8, "UTF8String");
    v17 = 2048;
    v18 = a3;
    v19 = 2048;
    v20 = a2;
    v21 = 2048;
    v22 = a4;
    LODWORD(v14) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromFirstPartyWorkouts, day, %s, calories, %f, nonPedWorkoutCount, %zu, nonPedWorkoutTime(seconds), %f", (const char *)&v15, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCaloriesFromFirstPartyWorkouts]_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3), CFSTR("kCaloriesFromFirstPartyWorkoutsKey"));
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kNonPedWorkoutsKey"));
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (int)(a4 / 60.0)), CFSTR("kNonPedWorkoutMinutesKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 216);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B732C(uint64_t a1, double a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  id v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  double v18;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v16 = objc_msgSend(v4, "UTF8String");
    v17 = 2048;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromFitnessPlusWorkouts, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v11 = 136315394;
    v12 = objc_msgSend(v4, "UTF8String");
    v13 = 2048;
    v14 = a2;
    LODWORD(v10) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromFitnessPlusWorkouts, day, %s, calories, %f", (const char *)&v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCaloriesFromFitnessPlusWorkouts]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kCaloriesFromFitnessPlusWorkoutsKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 220);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

void sub_1009B76D0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  void *i;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  _QWORD v25[8];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[6];
  _QWORD v31[5];
  _BYTE v32[128];

  if (objc_msgSend(a4, "code") == (id)11)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1009B7968;
    v31[3] = &unk_102162918;
    v31[4] = *(_QWORD *)(a1 + 40);
    v8 = v31;
LABEL_5:
    objc_msgSend(v7, "async:", v8);
    return;
  }
  if (a4)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1009B7980;
    v30[3] = &unk_10212BB30;
    v9 = *(_QWORD *)(a1 + 32);
    v30[4] = a4;
    v30[5] = v9;
    v8 = v30;
    goto LABEL_5;
  }
  v10 = a3;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = *(_QWORD *)v27;
    v15 = 0.0;
    v16 = 0.0;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v14)
          objc_enumerationMutation(v10);
        v18 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        objc_msgSend(objc_msgSend(v18, "totalEnergyBurned"), "doubleValueForUnit:", +[HKUnit kilocalorieUnit](HKUnit, "kilocalorieUnit"));
        v20 = v19;
        if (objc_msgSend(v18, "workoutActivityType") != (id)37 && objc_msgSend(v18, "workoutActivityType") != (id)52)
        {
          ++v13;
          objc_msgSend(objc_msgSend(v18, "endDate"), "timeIntervalSinceReferenceDate");
          v22 = v21;
          objc_msgSend(objc_msgSend(v18, "startDate"), "timeIntervalSinceReferenceDate");
          v16 = v16 + v22 - v23;
        }
        v15 = v15 + v20;
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
    }
    while (v12);
  }
  else
  {
    v13 = 0;
    v15 = 0.0;
    v16 = 0.0;
  }
  v24 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1009B7B54;
  v25[3] = &unk_102162A80;
  v25[4] = *(_QWORD *)(a1 + 40);
  *(double *)&v25[5] = v15;
  v25[6] = v13;
  *(double *)&v25[7] = v16;
  objc_msgSend(v24, "async:", v25);

}

uint64_t sub_1009B7968(uint64_t a1)
{
  return (*(uint64_t (**)(double, double))(*(_QWORD *)(a1 + 32) + 16))(0.0, 0.0);
}

id sub_1009B7980(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v2 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "code");
      *(_DWORD *)buf = 134349056;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromWorkouts encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v5 = qword_10229FF18;
      v6 = objc_msgSend(*(id *)(a1 + 32), "code");
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromWorkouts encountered error, %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryCaloriesFromWorkouts:endDate:sources:workoutsHandler:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "resetQueryState");
}

uint64_t sub_1009B7B54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(double *)(a1 + 40), *(double *)(a1 + 56));
}

id sub_1009B7C44(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  uint64_t v17;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v15 = objc_msgSend(v4, "UTF8String");
    v16 = 2048;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryExerciseMinutes, day, %s, exerciseMinutes, %zu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v10 = 136315394;
    v11 = objc_msgSend(v4, "UTF8String");
    v12 = 2048;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryExerciseMinutes, day, %s, exerciseMinutes, %zu", (const char *)&v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryExerciseMinutes]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kExerciseMinutesKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 224);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B7FF0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[5];

  if (objc_msgSend(a4, "code") == (id)11)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1009B80FC;
    v14[3] = &unk_102162918;
    v14[4] = *(_QWORD *)(a1 + 40);
    v8 = v14;
  }
  else
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009B810C;
      v13[3] = &unk_10212BB30;
      v9 = *(_QWORD *)(a1 + 32);
      v13[4] = a4;
      v13[5] = v9;
      v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009B82E0;
      v12[3] = &unk_1021629E0;
      v10 = *(_QWORD *)(a1 + 40);
      v12[4] = a3;
      v12[5] = v10;
      v8 = v12;
    }
  }
  return objc_msgSend(v7, "async:", v8);
}

uint64_t sub_1009B80FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1009B810C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v2 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "code");
      *(_DWORD *)buf = 134349056;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryExerciseMinutes encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v5 = qword_10229FF18;
      v6 = objc_msgSend(*(id *)(a1 + 32), "code");
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "CLFitnessDailyAnalyticsAggregator, queryExerciseMinutes encountered error, %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryExerciseMinutes:endDate:sources:exerciseMinutesHandler:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "resetQueryState");
}

uint64_t sub_1009B82E0(uint64_t a1)
{
  uint64_t v1;
  double v2;

  v1 = *(_QWORD *)(a1 + 40);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sumQuantity"), "doubleValueForUnit:", +[HKUnit minuteUnit](HKUnit, "minuteUnit"));
  return (*(uint64_t (**)(uint64_t, unint64_t))(v1 + 16))(v1, (unint64_t)v2);
}

id sub_1009B83FC(uint64_t a1, unint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  id v11;
  __int16 v12;
  unint64_t v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  unint64_t v17;

  v4 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v15 = objc_msgSend(v4, "UTF8String");
    v16 = 2048;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylight, day, %s, timeInDaylight, %zu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v10 = 136315394;
    v11 = objc_msgSend(v4, "UTF8String");
    v12 = 2048;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylight, day, %s, timeInDaylight, %zu", (const char *)&v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryTimeInDaylight]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (unint64_t)sub_1011A2E30(0xAu, (double)a2)), CFSTR("kTimeInDaylightKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 180);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B87B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[5];

  if (objc_msgSend(a4, "code") == (id)11)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1009B88C0;
    v14[3] = &unk_102162918;
    v14[4] = *(_QWORD *)(a1 + 40);
    v8 = v14;
  }
  else
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009B88D0;
      v13[3] = &unk_10212BB30;
      v9 = *(_QWORD *)(a1 + 32);
      v13[4] = a4;
      v13[5] = v9;
      v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009B8AA4;
      v12[3] = &unk_1021629E0;
      v10 = *(_QWORD *)(a1 + 40);
      v12[4] = a3;
      v12[5] = v10;
      v8 = v12;
    }
  }
  return objc_msgSend(v7, "async:", v8);
}

uint64_t sub_1009B88C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1009B88D0(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v2 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "code");
      *(_DWORD *)buf = 134349056;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylight encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v5 = qword_10229FF18;
      v6 = objc_msgSend(*(id *)(a1 + 32), "code");
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylight encountered error, %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryTimeInDaylight:endDate:sources:timeInDaylightHandler:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "resetQueryState");
}

uint64_t sub_1009B8AA4(uint64_t a1)
{
  uint64_t v1;
  double v2;

  v1 = *(_QWORD *)(a1 + 40);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sumQuantity"), "doubleValueForUnit:", +[HKUnit minuteUnit](HKUnit, "minuteUnit"));
  return (*(uint64_t (**)(uint64_t, unint64_t))(v1 + 16))(v1, (unint64_t)v2);
}

id sub_1009B8BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  NSObject *v9;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  id v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  v8 = objc_msgSend(*(id *)(a1 + 32), "NSDateToNSStringKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v8);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v9 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v23 = objc_msgSend(v8, "UTF8String");
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = a3;
    v28 = 2048;
    v29 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylightMetadata, day, %s, ambientLightIntensityMin, %zu, ambientLightIntensityMedian, %zu, ambientLightIntensityMax, %zu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v11 = qword_10229FF18;
    v14 = 136315906;
    v15 = objc_msgSend(v8, "UTF8String");
    v16 = 2048;
    v17 = a2;
    v18 = 2048;
    v19 = a3;
    v20 = 2048;
    v21 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylightMetadata, day, %s, ambientLightIntensityMin, %zu, ambientLightIntensityMedian, %zu, ambientLightIntensityMax, %zu", (const char *)&v14, 42);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryTimeInDaylightMetadata]_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kAmbientLightIntensityMinKey"));
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3), CFSTR("kAmbientLightIntensityMedianKey"));
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a4), CFSTR("kAmbientLightIntensityMaxKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 184);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

void sub_1009B9000(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  double v14;
  int v15;
  id v16;
  _QWORD v17[5];
  __int128 v18;
  uint64_t v19;
  void *__p;
  void *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  _QWORD v31[6];
  _QWORD v32[5];
  _BYTE v33[128];

  if (objc_msgSend(a4, "code") == (id)11)
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1009B9324;
    v32[3] = &unk_102162918;
    v32[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v7, "async:", v32);
  }
  else if (a4)
  {
    v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1009B933C;
    v31[3] = &unk_10212BB30;
    v9 = *(_QWORD *)(a1 + 32);
    v31[4] = a4;
    v31[5] = v9;
    objc_msgSend(v8, "async:", v31);
  }
  else
  {
    v10 = a3;
    sub_1009BA7BC((uint64_t)&v27, 500, -250, 65750);
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v12)
            objc_enumerationMutation(v10);
          objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i), "metadata"), "objectForKeyedSubscript:", HKMetadataKeyMaximumLightIntensity), "doubleValueForUnit:", +[HKUnit luxUnit](HKUnit, "luxUnit"));
          v15 = (int)v14;
          if (SDWORD1(v27) > (int)v14)
            v15 = DWORD1(v27);
          if (v15 >= SDWORD2(v27))
            v15 = DWORD2(v27);
          ++*((_DWORD *)v29 + (v15 - DWORD1(v27)) / (int)v27);
        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
      }
      while (v11);
    }
    v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3321888768;
    v17[2] = sub_1009B9510;
    v17[3] = &unk_102162AF8;
    v18 = v27;
    v19 = v28;
    __p = 0;
    v21 = 0;
    v22 = 0;
    sub_10027205C(&__p, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 2);
    v17[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v16, "async:", v17);

    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
  }
}

void sub_1009B92D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009B9324(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1009B933C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)6)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v2 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "code");
      *(_DWORD *)buf = 134349056;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylightMetadata encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102162B78);
      v5 = qword_10229FF18;
      v6 = objc_msgSend(*(id *)(a1 + 32), "code");
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylightMetadata encountered error, %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryTimeInDaylightMetadata:endDate:sources:timeInDaylightMetadataHandler:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "resetQueryState");
}

uint64_t sub_1009B9510(_QWORD *a1)
{
  int *v1;
  int *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)a1[8];
  v2 = (int *)a1[9];
  if (v1 == v2)
    goto LABEL_6;
  v3 = 0;
  v4 = (uint64_t)(a1 + 5);
  do
  {
    v5 = *v1++;
    v3 += v5;
  }
  while (v1 != v2);
  if (v3 < 1)
  {
LABEL_6:
    v11 = a1[4];
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16);
    v12 = 0;
    v13 = 0;
    v9 = 0;
  }
  else
  {
    v6 = a1[4];
    v7 = (int)sub_1009B95AC((uint64_t)(a1 + 5));
    v8 = (int)sub_1009B962C(v4);
    v9 = (int)sub_1009B96E4(v4);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16);
    v11 = v6;
    v12 = v7;
    v13 = v8;
  }
  return v10(v11, v12, v13, v9);
}

uint64_t sub_1009B95AC(uint64_t a1)
{
  char *v1;
  char *v2;
  int v3;
  int *v4;
  int v5;
  char *v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v1 = *(char **)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  if (v1 == v2)
    return 0x80000000;
  v3 = 0;
  v4 = *(int **)(a1 + 24);
  do
  {
    v5 = *v4++;
    v3 += v5;
  }
  while (v4 != (int *)v2);
  if (v3 < 1)
    return 0x80000000;
  v6 = *(char **)(a1 + 24);
  while (!*(_DWORD *)v6)
  {
    v6 += 4;
    if (v6 == v2)
    {
      v6 = *(char **)(a1 + 32);
      break;
    }
  }
  v7 = (unint64_t)(v6 - v1) >> 2;
  v8 = *(_DWORD *)a1;
  if (*(int *)a1 >= 0)
    v9 = *(_DWORD *)a1;
  else
    v9 = v8 + 1;
  v10 = *(_DWORD *)(a1 + 4) + (v9 >> 1) + v8 * v7;
  v11 = *(_DWORD *)(a1 + 8) - (v9 >> 1);
  if (v11 >= v10)
    return v10;
  else
    return v11;
}

uint64_t sub_1009B962C(uint64_t a1)
{
  int *v1;
  int *v2;
  int v3;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  unint64_t v16;
  int v17;
  int v18;
  int v19;

  v1 = *(int **)(a1 + 24);
  v2 = *(int **)(a1 + 32);
  if (v1 == v2)
    return 0x80000000;
  v3 = 0;
  v4 = *(int **)(a1 + 24);
  do
  {
    v5 = *v4++;
    v3 += v5;
  }
  while (v4 != v2);
  if (v3 < 1)
    return 0x80000000;
  v6 = 0;
  v7 = *(int **)(a1 + 24);
  do
  {
    v8 = *v7++;
    v6 += v8;
  }
  while (v7 != v2);
  v9 = v6 + 2;
  if (v6 >= -1)
    v9 = v6 + 1;
  v10 = v9 >> 1;
  v11 = *v1;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
    v13 = v11 < v10;
  else
    v13 = 0;
  if (v13)
  {
    v16 = 1;
    do
    {
      v17 = v16 + 1;
      if (v12 <= v16)
        break;
      v11 += v1[v16++];
    }
    while (v11 < v10);
    v14 = v17 - 1;
  }
  else
  {
    v14 = 0;
  }
  v18 = *(_DWORD *)(a1 + 4) + *(_DWORD *)a1 * v14;
  if (*(int *)a1 >= 0)
    v19 = *(_DWORD *)a1;
  else
    v19 = *(_DWORD *)a1 + 1;
  return (v18 + (v19 >> 1));
}

uint64_t sub_1009B96E4(uint64_t a1)
{
  char *v1;
  char *v2;
  int v3;
  int *v4;
  int v5;
  char *v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = *(char **)(a1 + 24);
  v1 = *(char **)(a1 + 32);
  if (v2 == v1)
    return 0x80000000;
  v3 = 0;
  v4 = *(int **)(a1 + 24);
  do
  {
    v5 = *v4++;
    v3 += v5;
  }
  while (v4 != (int *)v1);
  if (v3 < 1)
    return 0x80000000;
  v6 = *(char **)(a1 + 32);
  while (v6 != v2)
  {
    v7 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    if (v7)
    {
      v2 = v6 + 4;
      break;
    }
  }
  v8 = (unint64_t)(v1 - v2) >> 2;
  v9 = *(_DWORD *)a1;
  if (*(int *)a1 >= 0)
    v10 = *(_DWORD *)a1;
  else
    v10 = v9 + 1;
  v11 = *(_DWORD *)(a1 + 8) - (v10 >> 1);
  v12 = v11 + v9 - v9 * v8;
  if (v11 >= v12)
    return v12;
  else
    return v11;
}

_QWORD *sub_1009B9760(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_OWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  v4 = (_QWORD *)(a1 + 64);
  *(v4 - 1) = v3;
  *(_OWORD *)(v4 - 3) = v2;
  v4[1] = 0;
  v4[2] = 0;
  return sub_10027205C(v4, *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 2);
}

void sub_1009B978C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

id sub_1009B985C(uint64_t a1, double a2)
{
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  id v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  double v18;

  v4 = objc_msgSend(*(id *)(a1 + 32), "CFAbsoluteTimeToNSStringKey:", *(double *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "initDataDictForDay:", v4);
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102162B78);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v16 = objc_msgSend(v4, "UTF8String");
    v17 = 2048;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryTimeNonStatic, day, %s, duration, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102162B78);
    v7 = qword_10229FF18;
    v11 = 136315394;
    v12 = objc_msgSend(v4, "UTF8String");
    v13 = 2048;
    v14 = a2;
    LODWORD(v10) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLFitnessDailyAnalyticsAggregator, queryTimeNonStatic, day, %s, duration, %f", (const char *)&v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryTimeNonStatic]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4), "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2), CFSTR("kTimeNonStaticKey"));
  --*(_DWORD *)(*(_QWORD *)(a1 + 32) + 196);
  return objc_msgSend(*(id *)(a1 + 32), "runNextPendingQuery");
}

id sub_1009B9B2C(uint64_t a1, void *a2)
{
  double v4;
  double v5;
  double v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  _QWORD v18[6];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  if (objc_msgSend(a2, "count"))
  {
    objc_msgSend(objc_msgSend(objc_msgSend(a2, "firstObject"), "startDate"), "timeIntervalSinceReferenceDate");
    v5 = 0.0;
    v6 = v4 - *(double *)(a1 + 48) + 0.0;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v9)
            objc_enumerationMutation(a2);
          v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
          objc_msgSend(objc_msgSend(v11, "startDate"), "timeIntervalSinceReferenceDate");
          v13 = v12;
          if (objc_msgSend(v11, "stationary"))
          {
            if (v5 == 0.0)
              v5 = v13;
          }
          else if (v5 != 0.0)
          {
            v6 = v6 + v13 - v5;
            v5 = 0.0;
          }
        }
        v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v8);
    }
    if (objc_msgSend(objc_msgSend(a2, "lastObject"), "stationary"))
    {
      v14 = *(double *)(a1 + 56);
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "lastObject"), "startDate"), "timeIntervalSinceReferenceDate");
      v6 = v6 + v14 - v15;
    }
  }
  else
  {
    v6 = 86400.0;
  }
  v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1009B9D10;
  v18[3] = &unk_1021380D0;
  v18[4] = *(_QWORD *)(a1 + 40);
  *(double *)&v18[5] = v6;
  return objc_msgSend(v16, "async:", v18);
}

uint64_t sub_1009B9D10(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 86400.0 - *(double *)(a1 + 40));
}

uint64_t sub_1009BA2A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1009BA580(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_1009BA6F8(id a1)
{
  qword_10229FF18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fitness");
}

Class sub_1009BA724()
{
  Class result;

  if (qword_102305F50 != -1)
    dispatch_once(&qword_102305F50, &stru_102162B98);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_102305F48 = (uint64_t)result;
  off_1022A6168 = sub_1009BA780;
  return result;
}

uint64_t sub_1009BA780()
{
  return qword_102305F48;
}

void sub_1009BA78C(id a1)
{
  qword_102305F58 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

id sub_1009BA7B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onDataCollectionChangedNotification");
}

uint64_t sub_1009BA7BC(uint64_t a1, int a2, int a3, int a4)
{
  unint64_t v5;
  int v7;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  v5 = (a4 - a3) / a2 + 1;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = 0;
  sub_1004AF5E4((char **)(a1 + 24), v5, &v7);
  return a1;
}

void sub_1009BA824(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009BA840()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BEA3C0;
      v1[3] = unk_101BEA3D0;
      v1[4] = xmmword_101BEA3E0;
      v1[0] = xmmword_101BEA3A0;
      v1[1] = unk_101BEA3B0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1009BA914(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1009BA92C()
{
  _OWORD *v0;
  _QWORD v2[25];

  sub_1015A2E04(qword_102305EE0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102305EE0, (void *)&_mh_execute_header);
  v2[0] = CFSTR("kActiveCaloriesKey");
  v2[1] = CFSTR("kBasalCaloriesKey");
  v2[2] = CFSTR("kFlightsClimbedKey");
  v2[3] = CFSTR("kPedDistanceKey");
  v2[4] = CFSTR("kStepsKey");
  v2[5] = CFSTR("kExerciseMinutesKey");
  v2[6] = CFSTR("kCaloriesFromAllWorkoutsKey");
  v2[7] = CFSTR("kCaloriesFromFirstPartyWorkoutsKey");
  v2[8] = CFSTR("kCaloriesFromFitnessPlusWorkoutsKey");
  v2[9] = CFSTR("kNonPedWorkoutsKey");
  v2[10] = CFSTR("kNonPedWorkoutMinutesKey");
  v2[11] = CFSTR("kAgeBinKey");
  v2[12] = CFSTR("kGenderKey");
  v2[13] = CFSTR("kWeightKGKey");
  v2[14] = CFSTR("kTimeNonStaticKey");
  v2[15] = CFSTR("kCompanionActiveCaloriesKey");
  v2[16] = CFSTR("kCompanionBasalCaloriesKey");
  v2[17] = CFSTR("kCompanionFlightsClimbedKey");
  v2[18] = CFSTR("kCompanionPedDistanceKey");
  v2[19] = CFSTR("kCompanionStepsKey");
  v2[20] = CFSTR("kTimeInDaylightKey");
  v2[21] = CFSTR("kAmbientLightIntensityMinKey");
  v2[22] = CFSTR("kAmbientLightIntensityMedianKey");
  v2[23] = CFSTR("kAmbientLightIntensityMaxKey");
  v2[24] = CFSTR("kLocalDaytimeDurationKey");
  qword_102305EF8 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v2, 25);
  v2[0] = CFSTR("kPhoneFitnessModeKey");
  qword_102305F00 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v2, 1);
  sub_1018BEA14(byte_102305F08, "FitnessDailyAnalyticsAggregatorQueryTimerFireInterval", &qword_101BEA3F8, 0);
  qword_102305F20 = 0;
  qword_102305F28 = 0;
  qword_102305F30 = 0;
  v0 = operator new(0x10uLL);
  qword_102305F20 = (uint64_t)v0;
  *v0 = xmmword_101BEA390;
  qword_102305F28 = (uint64_t)(v0 + 1);
  qword_102305F30 = (uint64_t)(v0 + 1);
  return __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102305F20, (void *)&_mh_execute_header);
}

void sub_1009BAB4C()
{
  operator new[]();
}

uint64_t sub_1009BABF8(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  result = *(_QWORD *)(a1 + 40);
  if (result)
    operator delete[]();
  return result;
}

void sub_1009BAC4C(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)a1 = off_102162BC8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  is_mul_ok(a3, 0x50uLL);
  operator new[]();
}

_QWORD *sub_1009BAD18(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *result = off_102162BC8;
  v1 = result[2];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = 80 * v2;
      do
      {
        sub_1000F34E0((_QWORD *)(v1 + v3 - 24));
        sub_100008848(v1 + v3 - 48, *(_QWORD **)(v1 + v3 - 40));
        v3 -= 80;
      }
      while (v3);
    }
    operator delete[]();
  }
  return result;
}

void sub_1009BADAC(_QWORD *a1)
{
  sub_1009BAD18(a1);
  operator delete();
}

void sub_1009BADD0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD v9[7];
  int v10;

  v8 = sub_100127B9C();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1009BAE4C;
  v9[3] = &unk_102146A50;
  v10 = a2;
  v9[4] = a1;
  v9[5] = a3;
  v9[6] = a4;
  sub_1000A50A8(v8, (uint64_t)v9);
}

void sub_1009BAE4C(uint64_t a1)
{
  sub_1009BAE60(*(_QWORD **)(a1 + 32), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(double **)(a1 + 48));
}

void sub_1009BAE60(_QWORD *a1, uint64_t a2, unint64_t a3, double *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  _QWORD *v12;
  _QWORD *v13;
  double v14;
  double *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  const void *v35;
  _BYTE v36[22];
  _BYTE buf[1628];

  v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 24))(a3);
  v9 = a1[2];
  v10 = v9 + 80 * (int)a2;
  v13 = *(_QWORD **)(v10 + 40);
  v11 = (double *)(v10 + 40);
  v12 = v13;
  if (!v13)
    goto LABEL_12;
  v14 = *a4;
  v15 = v11;
  do
  {
    v16 = v12[4];
    v17 = v16 >= a3;
    if (v16 >= a3)
      v18 = v12;
    else
      v18 = v12 + 1;
    if (v17)
      v15 = (double *)v12;
    v12 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 != v11 && *((_QWORD *)v15 + 4) <= a3)
  {
    v15[6] = v14;
    v15[7] = v14 * (double)v8;
    if (*(double *)(v9 + 80 * (int)a2 + 16) <= 0.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102162C30);
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        v21 = *((_QWORD *)v15 + 6);
        v22 = *(_QWORD *)(a1[2] + 80 * (int)a2 + 16);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "CLMotionNotifier::setUpdateIntervalPrivate RequestedUpdateInterval:%f, UpdateInterval:%f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102162C30);
        v31 = *((_QWORD *)v15 + 6);
        v32 = *(_QWORD *)(a1[2] + 80 * (int)a2 + 16);
        *(_DWORD *)v36 = 134218240;
        *(_QWORD *)&v36[4] = v31;
        *(_WORD *)&v36[12] = 2048;
        *(_QWORD *)&v36[14] = v32;
        LODWORD(v35) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "CLMotionNotifier::setUpdateIntervalPrivate RequestedUpdateInterval:%f, UpdateInterval:%f", COERCE_DOUBLE(v36), *(double *)&v35);
        v34 = (char *)v33;
        sub_100512490("Generic", 1, 0, 0, "void CLMotionNotifier::setUpdateIntervalPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
    }
    v23 = (double *)(a1[2] + 80 * (int)a2);
    *((_DWORD *)v15 + 11) = llround(v15[6] / v23[2]);
    v24 = sub_10023D16C((uint64_t)a1, a2);
    *(double *)buf = v24;
    if (v24 != *v23)
    {
      *v23 = v24;
      *(double *)(a1[2] + 80 * (int)a2 + 16) = (*(double (**)(_QWORD *, uint64_t, _BYTE *))(*a1 + 16))(a1, a2, buf);
      sub_1000A61A0((uint64_t)a1, a2);
    }
    v25 = sub_10023D200((uint64_t)a1, a2);
    *(double *)v36 = v25;
    v26 = a1[2] + 80 * (int)a2;
    v28 = *(double *)(v26 + 8);
    v27 = (double *)(v26 + 8);
    if (v25 != v28)
    {
      *v27 = v25;
      *(double *)(a1[2] + 80 * (int)a2 + 24) = (*(double (**)(_QWORD *, uint64_t, _BYTE *))(*a1 + 24))(a1, a2, v36);
    }
  }
  else
  {
LABEL_12:
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102162C30);
    v19 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = a3;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Unknown (notification,dispatcher) pair: (%d, %p)", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102162C30);
      *(_DWORD *)v36 = 67109376;
      *(_DWORD *)&v36[4] = a2;
      *(_WORD *)&v36[8] = 2048;
      *(_QWORD *)&v36[10] = a3;
      LODWORD(v35) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Unknown (notification,dispatcher) pair: (%d, %p)", v36, v35);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionNotifier::setUpdateIntervalPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
}

uint64_t sub_1009BB308(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (*(_DWORD *)(a1 + 24) > a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * a2 + 48);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102162C30);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102162C30);
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Unknown notification %d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "ssize_t CLMotionNotifier::numberOfClients(int)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return -1;
}

uint64_t sub_1009BB4D4(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (*(_DWORD *)(a1 + 24) > a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * a2 + 72);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102162C30);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102162C30);
    v6[0] = 67109120;
    v6[1] = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Unknown notification %d", v6);
    sub_100512490("Generic", 1, 0, 0, "ssize_t CLMotionNotifier::numberOfSpectators(int)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  return -1;
}

double sub_1009BB6A0(uint64_t a1, int a2)
{
  double v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*(_DWORD *)(a1 + 24) > a2)
    return *(double *)(*(_QWORD *)(a1 + 16) + 80 * a2);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102162C30);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  v3 = -1.0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102162C30);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Unknown notification %d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "CFTimeInterval CLMotionNotifier::minimumUpdateInterval(int)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return v3;
}

void sub_1009BB878(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1009BB948(id a1)
{
  qword_102305F60 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLAuthSyncManagerSilo"));
}

void sub_1009BB9B8(id a1)
{
  uint64_t v1;

  if (objc_opt_class(IDSService, v1))
  {
    sub_100197040();
    if (sub_10019DF90() || (sub_100197040(), sub_100195F08()))
    {
      if (qword_102305F88 != -1)
        dispatch_once(&qword_102305F88, &stru_102162F30);
      if (qword_102305F90)
        byte_102305F70 = 1;
    }
  }
}

void sub_1009BBC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if (a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
    }
    v5 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync IDS service failed to initialize", "{\"msg%{public}.0s\":\"#authsync IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setIdsService:", a2);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync IDS became available so resuming silo\"}", (uint8_t *)&v8, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 40), "resume");
  }
}

id sub_1009BC41C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "refreshSettings");
}

id sub_1009BC424(uint64_t a1, void *a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1009CB18C;
  v3[3] = &unk_10212BB58;
  v3[4] = a2;
  return objc_msgSend(objc_msgSend(objc_msgSend(a2, "universe"), "silo"), "async:", v3);
}

void sub_1009BD298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1009BD2C0(uint64_t a1, id a2)
{
  NSObject *v4;
  id v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  id v10;

  if (objc_msgSend(objc_msgSend((Class)off_1022A6260[0](), "sharedInstance"), "getActivePairedDevice") != a2)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(a2, "valueForProperty:", off_1022A6268[0]());
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 40), "stringByAppendingPathComponent:", CFSTR("CoreLocation"));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 40), "stringByAppendingPathComponent:", CFSTR("AUTH"));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 40), "stringByAppendingPathComponent:", CFSTR("ReunionSyncList"));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) = objc_msgSend(a2, "valueForProperty:", off_1022A6270[0]());
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "reunionSyncListPaths"), "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "UTF8String");
      v6[0] = 68289282;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2082;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Adding to the list of reunionSyncLists\", \"reunionSyncListPath\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
    }
  }
}

id sub_1009BD4A4(uint64_t a1, void *a2, uint64_t a3)
{
  NSArray *v6;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  id v17;

  v6 = +[NSArray arrayWithContentsOfFile:](NSArray, "arrayWithContentsOfFile:", a2);
  if (!v6)
  {
    v6 = +[NSArray array](NSArray, "array");
    if (-[NSArray writeToFile:atomically:](v6, "writeToFile:atomically:", a2, 1))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2082;
        v17 = objc_msgSend(a2, "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync ReunionSyncList created\", \"reunionSyncListPath\":%{public, location:escape_only}s}", (uint8_t *)&v12, 0x1Cu);
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v12 = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2082;
        v17 = objc_msgSend(a2, "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#authsync ReunionSyncList creation failed\", \"reunionSyncListPath\":%{public, location:escape_only}s}", (uint8_t *)&v12, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102162F50);
      }
      v10 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v11 = objc_msgSend(a2, "UTF8String");
        v12 = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2082;
        v17 = v11;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync ReunionSyncList creation failed", "{\"msg%{public}.0s\":\"#authsync ReunionSyncList creation failed\", \"reunionSyncListPath\":%{public, location:escape_only}s}", (uint8_t *)&v12, 0x1Cu);
      }
    }
  }
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "reunionSyncLists"), "setObject:forKey:", +[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v6), a3);
}

void sub_1009BDC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

id sub_1009BDC74(uint64_t a1)
{
  id result;

  result = sub_1007DAC08(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

id sub_1009BE15C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", sub_1007DB094(a2, *(void **)(a1 + 40), (char)objc_msgSend(*(id *)(a1 + 48), "isWatchBuildVersionPriorTo:", 196608), *(_BYTE *)(a1 + 56), 1));
}

void sub_1009C09BC(id a1, void *a2)
{
  sub_1007DFC84((uint64_t)a2);
}

void sub_1009C09C4(id a1, void *a2)
{
  sub_1007DFC84((uint64_t)a2);
}

void sub_1009C09CC(id a1, void *a2)
{
  sub_1007DFC84((uint64_t)a2);
}

void sub_1009C09D4(id a1, void *a2)
{
  sub_1007DFC84((uint64_t)a2);
}

void sub_1009C1688(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  if (-[NSString isEqualToString:](a2, "isEqualToString:", CFSTR("RESET"), a4))
    byte_102305F81 = 1;
}

id sub_1009C1A30(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", sub_1007DE9DC(a2));
}

void sub_1009C1A5C(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  objc_msgSend(a2, "setClientKey:", objc_msgSend(*(id *)(a1 + 32), "getTranslatedGizmoKeyForCompanionClient:", objc_msgSend(a2, "clientKey")));
  if ((objc_msgSend(*(id *)(a1 + 32), "isWatchBuildVersionPriorTo:", 0x40000) & 1) == 0
    && objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", &stru_1021D8FB8))
  {
    objc_msgSend(*(id *)(a1 + 40), "addIndex:", a3);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 68289026;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removing LS as an add message from the full sync queue\"}", (uint8_t *)v7, 0x12u);
    }
  }
}

void sub_1009C1EBC(id a1, CLCompanionSyncAuthObject *a2, unint64_t a3, BOOL *a4)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;

  if (-[CLCompanionSyncAuthObject hasCorrectiveCompensationMask](a2, "hasCorrectiveCompensationMask", a3, a4))
  {
    if (-[CLCompanionSyncAuthObject correctiveCompensationMask](a2, "correctiveCompensationMask") == 2)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
      v5 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 68289794;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2082;
        v16 = -[NSString UTF8String](-[CLCompanionSyncAuthObject clientKey](a2, "clientKey"), "UTF8String");
        v17 = 1026;
        v18 = -[CLCompanionSyncAuthObject correctiveCompensationMask](a2, "correctiveCompensationMask");
        v19 = 1026;
        v20 = 1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync translating corrective compenesation\", \"Client\":%{public, location:escape_only}s, \"CorrectiveCompensationMask\":%{public}u, \"AuthorizationMask\":%{public}u}", (uint8_t *)&v11, 0x28u);
      }
      -[CLCompanionSyncAuthObject setAuthMask:](a2, "setAuthMask:", 1);
      return;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 68289794;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = -[NSString UTF8String](-[CLCompanionSyncAuthObject clientKey](a2, "clientKey"), "UTF8String");
      v17 = 1026;
      v18 = -[CLCompanionSyncAuthObject correctiveCompensationMask](a2, "correctiveCompensationMask");
      v19 = 1026;
      v20 = -[CLCompanionSyncAuthObject authMask](a2, "authMask");
      v7 = "{\"msg%{public}.0s\":\"#authsync corrective compensation translation is off\", \"Client\":%{public, location:"
           "escape_only}s, \"CorrectiveCompensationMask\":%{public}u, \"AuthorizationMask\":%{public}u}";
      v8 = v10;
      v9 = 40;
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = -[NSString UTF8String](-[CLCompanionSyncAuthObject clientKey](a2, "clientKey"), "UTF8String");
      v7 = "{\"msg%{public}.0s\":\"#authsync no valid corrective compensation mask\", \"Client\":%{public, location:escape_only}s}";
      v8 = v6;
      v9 = 28;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
    }
  }
}

void sub_1009C2320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1009C2338(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "hasNotification");
  if ((_DWORD)result)
  {
    result = objc_msgSend(a2, "notification");
    if (!(_DWORD)result)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

id sub_1009C2D60(uint64_t a1)
{
  NSObject *v2;
  double v3;
  uint64_t v4;
  unsigned int v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unsigned int v13;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102162F50);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "syncSessionRetryInterval");
    v4 = (uint64_t)v3;
    v5 = objc_msgSend(*(id *)(a1 + 32), "numberOfConsecutiveSyncSessionRetries");
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v4;
    v12 = 1026;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Retrying sync session\", \"retryInterval\":%{public}ld, \"retryCount\":%{public}d}", (uint8_t *)v7, 0x22u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "watchNeedsFullSync:", CFSTR("SyncSessionRetry"));
}

id sub_1009C2E7C(uint64_t a1)
{
  NSObject *v2;
  double v3;
  uint64_t v4;
  unsigned int v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unsigned int v13;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102162F50);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "syncSessionRetryInterval");
    v4 = (uint64_t)v3;
    v5 = objc_msgSend(*(id *)(a1 + 32), "numberOfConsecutiveSyncSessionRetries");
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v4;
    v12 = 1026;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Retrying sync session\", \"retryInterval\":%{public}ld, \"retryCount\":%{public}d}", (uint8_t *)v7, 0x22u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "watchNeedsDeltaSync:", CFSTR("FailedDeltaSyncSession"));
}

void sub_1009C4D28(id a1, void *a2)
{
  sub_1007DFE24((uint64_t)a2);
}

void sub_1009C4D30(id a1, void *a2)
{
  sub_1007DFFC8(a2, 0);
}

uint64_t sub_1009C4D3C(uint64_t a1, uint64_t a2)
{
  return sub_1007DFFC8(a2, objc_msgSend(*(id *)(a1 + 32), "authMask"));
}

void sub_1009C4D68(uint64_t a1, void *a2)
{
  void *__p[2];
  char v5;

  sub_1015A2E04(__p, *(char **)(a1 + 40));
  sub_1007DC1D8((uint64_t)a2, (uint64_t)__p, 0, *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 52), *(_BYTE *)(a1 + 60), *(_WORD *)(a1 + 61), 1u);
  if (v5 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, *(char **)(a1 + 40));
  sub_1007DCD0C(a2, (uint64_t)__p, objc_msgSend(*(id *)(a1 + 32), "interestZones"));
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1009C4E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1009C5100(id a1, void *a2)
{
  sub_1007DFE24((uint64_t)a2);
}

void sub_1009C5108(uint64_t a1, void *a2)
{
  void *__p[2];
  char v5;

  sub_1015A2E04(__p, *(char **)(a1 + 40));
  sub_1007DC1D8((uint64_t)a2, (uint64_t)__p, 0, *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 52), *(_BYTE *)(a1 + 60), *(_WORD *)(a1 + 61), 2u);
  if (v5 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, *(char **)(a1 + 40));
  sub_1007DCD0C(a2, (uint64_t)__p, objc_msgSend(*(id *)(a1 + 32), "interestZones"));
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1009C51A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1009C5310(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v4;

  sub_1015A2E04(__p, *(char **)(a1 + 32));
  sub_1007DD4CC(a2, (uint64_t *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1009C535C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1009C5648(uint64_t a1, void *a2, uint64_t a3)
{
  id result;
  NSObject *v6;
  id v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;

  result = objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 32), "clientKey"));
  if ((_DWORD)result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = objc_msgSend(*(id *)(a1 + 32), "clientKey");
      v8[0] = 68289282;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removed duplicate from deltaSyncObjectsInCompanionQueue\", \"clientKey\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
    return objc_msgSend(*(id *)(a1 + 40), "addIndex:", a3);
  }
  return result;
}

id sub_1009C5954(uint64_t a1, void *a2, uint64_t a3)
{
  id result;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;

  result = objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 32), "clientKey"));
  if ((_DWORD)result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 68289282;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = objc_msgSend(a2, "clientKey");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removed duplicate from notificationsInCompanionQueue\", \"clientKey\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
    return objc_msgSend(*(id *)(a1 + 40), "addIndex:", a3);
  }
  return result;
}

id sub_1009C5CAC(uint64_t a1, void *a2, uint64_t a3)
{
  id result;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;

  result = objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 32), "clientKey"));
  if ((_DWORD)result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 68289282;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = objc_msgSend(a2, "clientKey");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removed duplicate from deltaSyncObjectsInCompanionQueue\", \"clientKey\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
    return objc_msgSend(*(id *)(a1 + 40), "addIndex:", a3);
  }
  return result;
}

id sub_1009C5FF0(uint64_t a1, void *a2, uint64_t a3)
{
  id result;
  NSObject *v6;
  id v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;

  result = objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 32), "clientKey"));
  if ((_DWORD)result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = objc_msgSend(*(id *)(a1 + 32), "clientKey");
      v8[0] = 68289282;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removed duplicate from deltaSyncObjectsInCompanionQueue\", \"clientKey\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
    return objc_msgSend(*(id *)(a1 + 40), "addIndex:", a3);
  }
  return result;
}

void sub_1009C6AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1009C7C68(id *result)
{
  id *v1;

  if ((byte_102305F80 & 1) == 0)
  {
    v1 = result;
    byte_102305F80 = 1;
    objc_msgSend(result[4], "prepareToDoMigrationSync");
    return (id *)objc_msgSend(v1[4], "sendNotification:", 2);
  }
  return result;
}

id sub_1009C7CB4(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "hasNotification");
  if ((_DWORD)result)
  {
    result = objc_msgSend(a2, "notification");
    if ((_DWORD)result == 2)
      return objc_msgSend(*(id *)(a1 + 32), "setReason:", CFSTR("SYSessionReasonMigrationSync-ResetVersionNumbers-DeltaSync-FromCompanion"));
  }
  return result;
}

void sub_1009C8804(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

id sub_1009C886C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  NSObject *v8;
  id result;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2114;
      v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Message enqueued\", \"fullSyncMessage\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x1Cu);
    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "fullSyncObjectsInGizmoQueue"), "addObject:", a2);
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addIndex:", a3);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v12 = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v12, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
    }
    v11 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v12 = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync Message enqueue failed", "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v12, 0x12u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    result = objc_msgSend(*(id *)(a1 + 32), "setShouldSendMoreDataInCurrentSyncSession:", 1);
    *a4 = 1;
  }
  return result;
}

id sub_1009C8ACC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  NSObject *v8;
  id result;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2114;
      v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Message enqueued\", \"notificationMessage\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x1Cu);
    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "notificationsInGizmoQueue"), "addObject:", a2);
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addIndex:", a3);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v12 = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v12, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
    }
    v11 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v12 = 68289026;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync Message enqueue failed", "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v12, 0x12u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    result = objc_msgSend(*(id *)(a1 + 32), "setShouldSendMoreDataInCurrentSyncSession:", 1);
    *a4 = 1;
  }
  return result;
}

void sub_1009C8D2C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "deltaSyncObjectsInGizmoQueue"), "addObject:", a2);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addIndex:", a3);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2114;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Message enqueued\", \"deltaSyncMessage\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v11 = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v11, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
    }
    v10 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v11 = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync Message enqueue failed", "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v11, 0x12u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    objc_msgSend(*(id *)(a1 + 32), "setShouldSendMoreDataInCurrentSyncSession:", 1);
    *a4 = 1;
  }
}

id sub_1009C8F98(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  NSObject *v8;
  NSObject *v9;
  id result;
  NSObject *v11;
  NSObject *v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102162F50);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 68289282;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = objc_msgSend(a2, "description");
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Sending notifications\", \"notification.description\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x1Cu);
  }
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 68289282;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Message enqueued\", \"notificationMessage\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x1Cu);
    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "notificationsInGizmoQueue"), "addObject:", a2);
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addIndex:", a3);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v13 = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v13, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
    }
    v12 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v13 = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync Message enqueue failed", "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v13, 0x12u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    result = objc_msgSend(*(id *)(a1 + 32), "setShouldSendMoreDataInCurrentSyncSession:", 1);
    *a4 = 1;
  }
  return result;
}

void sub_1009C9C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1009C9C20(uint64_t a1, _QWORD *a2)
{
  return sub_1007DB3EC(a2, objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "fullSyncClientsList"), "copy"), (int)objc_msgSend(*(id *)(a1 + 32), "shouldResetAuthDbOnFullSync"));
}

id sub_1009CA078(uint64_t a1)
{
  NSObject *v2;
  id v4;
  void *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  objc_msgSend(*(id *)(a1 + 32), "setSyncRestriction:", objc_msgSend(*(id *)(a1 + 40), "syncRestriction"));
  objc_msgSend(*(id *)(a1 + 32), "setActiveWatchSyncSession:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "updateActivePairedDeviceInfo");
  objc_msgSend(*(id *)(a1 + 32), "setPairedSyncSessionActive:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setIsQuickSwitchInProgress:", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeWatchSyncSession"), "syncSessionType") == (id)1);
  if (objc_msgSend(*(id *)(a1 + 32), "isQuickSwitchInProgress"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 68289026;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Quick switch - PS\"}", (uint8_t *)v6, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 32), "setShouldConfirmHandlingQuickSwitchNotification:", 1);
    objc_msgSend(*(id *)(a1 + 32), "setRecoverySyncInProgress:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setResetRecoveryMode:", 0);
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "authSyncStoreState"), "objectForKey:", CFSTR("kCLHandledQuickSwitchNotification")))
    {
      if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "authSyncStoreState"), "objectForKey:", CFSTR("kCLHandledQuickSwitchNotification")), "BOOLValue"))
      {
        objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "authSyncStoreState"), "setObject:forKey:", &__kCFBooleanFalse, CFSTR("kCLHandledQuickSwitchNotification"));
        objc_msgSend(*(id *)(a1 + 32), "updateSyncStoreState:", CFSTR("QuickSwitch-PS"));
      }
    }
    return objc_msgSend(*(id *)(a1 + 32), "handleQuickSwitch");
  }
  else
  {
    v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeWatchSyncSession"), "syncSessionType");
    v5 = *(void **)(a1 + 32);
    if (v4 == (id)2)
      return objc_msgSend(v5, "watchMigrationDidStart");
    else
      return objc_msgSend(v5, "watchNeedsFullSync:", CFSTR("Recovery-PairingInPairedSync"));
  }
}

id sub_1009CA434(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setSyncRestriction:", objc_msgSend(*(id *)(a1 + 40), "syncRestriction"));
  objc_msgSend(*(id *)(a1 + 32), "setActiveWatchSyncSession:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setPairedSyncSessionActive:", 0);
}

id sub_1009CA4E0(uint64_t a1)
{
  NSObject *v2;
  id v3;
  unsigned int v4;
  id result;
  id v6;
  _QWORD v7[5];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  unsigned int v15;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102162F50);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "syncRestriction");
    v3 = objc_msgSend(*(id *)(a1 + 32), "syncRestriction");
    v4 = objc_msgSend(*(id *)(a1 + 40), "isPairedSyncSessionActive");
    *(_DWORD *)buf = 68289538;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = v3;
    v14 = 1026;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Sync coordinator changed restriction\", \"syncRestriction\":%{public, location:PSYSyncRestriction}lld, \"isPairedSyncSessionActive\":%{public}hhd}", buf, 0x22u);
  }
  objc_msgSend(*(id *)(a1 + 40), "setSyncRestriction:", objc_msgSend(*(id *)(a1 + 32), "syncRestriction"));
  result = objc_msgSend(*(id *)(a1 + 40), "syncRestriction");
  if (!result)
  {
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "universe"), "silo");
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1009CA660;
    v7[3] = &unk_10212BB58;
    v7[4] = *(_QWORD *)(a1 + 40);
    return objc_msgSend(v6, "afterInterval:async:", v7, 1.0);
  }
  return result;
}

id sub_1009CA660(uint64_t a1)
{
  id result;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  result = objc_msgSend(*(id *)(a1 + 32), "activeWatchSyncSession");
  if (!result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102162F50);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 68289026;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Checking sync store state after restriction change to PSYSyncRestrictionNone\"}", (uint8_t *)v4, 0x12u);
    }
    return objc_msgSend(*(id *)(a1 + 32), "checkSyncStoreStateAftreRestrictionChange");
  }
  return result;
}

void sub_1009CAF1C(id a1)
{
  qword_102305F90 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync", 2);
}

void sub_1009CAF44(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1009CAF70()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102305F88 != -1)
    dispatch_once(&qword_102305F88, &stru_102162F30);
  v0 = (uint64_t *)dlsym((void *)qword_102305F90, "SYServiceOptionDiskBufferProtectionClass");
  if (v0)
  {
    result = *v0;
    qword_102305F98 = result;
  }
  else
  {
    result = qword_102305F98;
  }
  off_1022A6230[0] = sub_1009CAFE8;
  return result;
}

uint64_t sub_1009CAFE8()
{
  return qword_102305F98;
}

Class sub_1009CAFF4()
{
  Class result;

  if (qword_102305F88 != -1)
    dispatch_once(&qword_102305F88, &stru_102162F30);
  result = objc_getClass("SYService");
  qword_102305FA0 = (uint64_t)result;
  off_1022A6238[0] = sub_1009CB050;
  return result;
}

uint64_t sub_1009CB050()
{
  return qword_102305FA0;
}

uint64_t sub_1009CB05C()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  v0 = (uint64_t *)dlsym((void *)qword_102305FB8, "NRPairedDeviceRegistryDeviceDidPairNotification");
  if (v0)
  {
    result = *v0;
    qword_102305FA8 = result;
  }
  else
  {
    result = qword_102305FA8;
  }
  off_1022A6240[0] = sub_1009CB0D4;
  return result;
}

uint64_t sub_1009CB0D4()
{
  return qword_102305FA8;
}

void sub_1009CB0E0(id a1)
{
  qword_102305FB8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_1009CB108()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  v0 = (uint64_t *)dlsym((void *)qword_102305FB8, "NRPairedDeviceRegistryDeviceDidUnpairNotification");
  if (v0)
  {
    result = *v0;
    qword_102305FC0 = result;
  }
  else
  {
    result = qword_102305FC0;
  }
  off_1022A6248[0] = sub_1009CB180;
  return result;
}

uint64_t sub_1009CB180()
{
  return qword_102305FC0;
}

id sub_1009CB18C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "deviceDidChangeCapabilitiesDarwinNotification");
}

uint64_t sub_1009CB194()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  v0 = (uint64_t *)dlsym((void *)qword_102305FB8, "NRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotification");
  if (v0)
  {
    result = *v0;
    qword_102305FC8 = result;
  }
  else
  {
    result = qword_102305FC8;
  }
  off_1022A6250[0] = sub_1009CB20C;
  return result;
}

uint64_t sub_1009CB20C()
{
  return qword_102305FC8;
}

Class sub_1009CB218()
{
  Class result;

  if (qword_102305FD8 != -1)
    dispatch_once(&qword_102305FD8, &stru_102162F90);
  result = objc_getClass("PSYSyncCoordinator");
  qword_102305FD0 = (uint64_t)result;
  off_1022A6258[0] = sub_1009CB274;
  return result;
}

uint64_t sub_1009CB274()
{
  return qword_102305FD0;
}

void sub_1009CB280(id a1)
{
  qword_102305FE0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PairedSync.framework/PairedSync", 2);
}

Class sub_1009CB2A8()
{
  Class result;

  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_102305FE8 = (uint64_t)result;
  off_1022A6260[0] = sub_1009CB304;
  return result;
}

uint64_t sub_1009CB304()
{
  return qword_102305FE8;
}

uint64_t sub_1009CB310()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  v0 = (uint64_t *)dlsym((void *)qword_102305FB8, "NRDevicePropertyLocalPairingDataStorePath");
  if (v0)
  {
    result = *v0;
    qword_102305FF0 = result;
  }
  else
  {
    result = qword_102305FF0;
  }
  off_1022A6268[0] = sub_1009CB388;
  return result;
}

uint64_t sub_1009CB388()
{
  return qword_102305FF0;
}

uint64_t sub_1009CB394()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  v0 = (uint64_t *)dlsym((void *)qword_102305FB8, "NRDevicePropertyPairingID");
  if (v0)
  {
    result = *v0;
    qword_102305FF8 = result;
  }
  else
  {
    result = qword_102305FF8;
  }
  off_1022A6270[0] = sub_1009CB40C;
  return result;
}

uint64_t sub_1009CB40C()
{
  return qword_102305FF8;
}

uint64_t sub_1009CB418()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  v0 = (uint64_t *)dlsym((void *)qword_102305FB8, "_NRDevicePropertyBluetoothIdentifier");
  if (v0)
  {
    result = *v0;
    qword_102306000 = result;
  }
  else
  {
    result = qword_102306000;
  }
  off_1022A6278[0] = sub_1009CB490;
  return result;
}

uint64_t sub_1009CB490()
{
  return qword_102306000;
}

uint64_t sub_1009CB49C()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  v0 = (uint64_t *)dlsym((void *)qword_102305FB8, "NRDevicePropertySystemBuildVersion");
  if (v0)
  {
    result = *v0;
    qword_102306008 = result;
  }
  else
  {
    result = qword_102306008;
  }
  off_1022A6280[0] = sub_1009CB514;
  return result;
}

uint64_t sub_1009CB514()
{
  return qword_102306008;
}

uint64_t sub_1009CB520()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  v0 = (uint64_t *)dlsym((void *)qword_102305FB8, "NRDevicePropertyName");
  if (v0)
  {
    result = *v0;
    qword_102306010 = result;
  }
  else
  {
    result = qword_102306010;
  }
  off_1022A6288[0] = sub_1009CB598;
  return result;
}

uint64_t sub_1009CB598()
{
  return qword_102306010;
}

uint64_t sub_1009CB5A4(uint64_t a1)
{
  if (qword_102305FB0 != -1)
    dispatch_once(&qword_102305FB0, &stru_102162F70);
  off_1022A6290 = (uint64_t (*)())dlsym((void *)qword_102305FB8, "NRWatchOSVersionForRemoteDevice");
  return ((uint64_t (*)(uint64_t))off_1022A6290)(a1);
}

__n128 sub_1009CB60C(uint64_t a1)
{
  __n128 result;

  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 8) = result;
  *(_BYTE *)a1 = 0;
  return result;
}

void sub_1009CB61C(uint64_t a1, double a2, double a3)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  double v9;
  __int16 v10;
  double v11;
  __int16 v12;
  double v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  double v19;

  if (a2 > a3 && a2 > 0.0 && a3 > 0.0)
  {
    *(double *)(a1 + 8) = a2;
    *(double *)(a1 + 16) = a3;
    *(_BYTE *)a1 = 1;
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_102162FB0);
    v5 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134284033;
      v15 = a2;
      v16 = 2049;
      v17 = a3;
      v18 = 2049;
      v19 = a2 - a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#VDR, CLGPSMachContConversion update with timestamp_gps_s, %{private}.3f, mach_continuous_s, %{private}.3f, GPSMachContDelta, %{private}.3f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_102162FB0);
      v8 = 134284033;
      v9 = a2;
      v10 = 2049;
      v11 = a3;
      v12 = 2049;
      v13 = a2 - a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR, CLGPSMachContConversion update with timestamp_gps_s, %{private}.3f, mach_continuous_s, %{private}.3f, GPSMachContDelta, %{private}.3f", &v8, 32);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLGPSMachContConversion::Update(const double, const double)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

BOOL sub_1009CB81C(uint64_t a1, double *a2, double a3)
{
  *a2 = *(double *)(a1 + 8) - *(double *)(a1 + 16) + a3;
  return *(_BYTE *)a1 && vabdd_f64(a3, *(double *)(a1 + 16)) < 20000.0;
}

void sub_1009CB858(id a1)
{
  qword_1022A01A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_1009CB884(uint64_t a1, int a2, uint64_t a3, char a4)
{
  _QWORD *v6;

  v6 = (_QWORD *)sub_1009CB974(a1, "CLWalkingSpeedCalRecorderDb", a2, a3, 1, 2.56);
  *v6 = off_102162FE0;
  v6[9] = off_1021630A0;
  v6[44] = off_1021630F0;
  sub_100E81598(v6 + 45, 0, 0);
  sub_100E81598((_QWORD *)(a1 + 376), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 392), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 408), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 424), 0, 0);
  *(_BYTE *)(a1 + 440) = a4;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  *(_QWORD *)(a1 + 160) = -[CLWalkingSpeedCalCloudKitDelegate initWithWalkingSpeedCalRecorderDb:]([CLWalkingSpeedCalCloudKitDelegate alloc], "initWithWalkingSpeedCalRecorderDb:", a1);
  return a1;
}

void sub_1009CB960(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1009CBDDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009CB974(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021631C0;
  *(_QWORD *)(a1 + 72) = off_102163268;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021631C0;
  *(_QWORD *)(a1 + 72) = off_102163268;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 12000;
  *(_QWORD *)(a1 + 280) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 288));
  *(_QWORD *)(a1 + 288) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1009CBD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[35] = off_102138DA8;
  sub_100427950(v27);
  sub_10081FB1C(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1009CBDD4()
{
  JUMPOUT(0x1009CBDB4);
}

_QWORD *sub_1009CBDDC(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102163268;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021631C0;
  a1[35] = off_102138DA8;
  sub_100427950(a1 + 36);
  sub_10081FB1C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1009CBE58(_QWORD *a1)
{
  void *v2;

  *a1 = off_102162FE0;
  a1[9] = off_1021630A0;
  a1[44] = off_1021630F0;
  v2 = (void *)a1[20];
  if (v2)
  {

    a1[20] = 0;
  }
  return sub_1009CBDDC(a1);
}

_QWORD *sub_1009CBEAC(uint64_t a1)
{
  return sub_1009CBE58((_QWORD *)(a1 - 72));
}

_QWORD *sub_1009CBEB4(uint64_t a1)
{
  return sub_1009CBE58((_QWORD *)(a1 - 352));
}

void sub_1009CBEBC(_QWORD *a1)
{
  sub_1009CBE58(a1);
  operator delete();
}

void sub_1009CBEE0(uint64_t a1)
{
  sub_1009CBE58((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_1009CBF08(uint64_t a1)
{
  sub_1009CBE58((_QWORD *)(a1 - 352));
  operator delete();
}

uint64_t sub_1009CBF30(uint64_t a1)
{
  uint64_t v1;
  sqlite3_stmt *v3;
  int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v8;

  if (!sub_10008950C(a1 + 72))
    return 0xFFFFFFFFLL;
  sub_100087AF4((_QWORD *)(a1 + 408), &v8);
  v3 = (sqlite3_stmt *)sub_100026CC8(v8);
  v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    v1 = sqlite3_column_int(v5, 0);
  }
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v4 != 100)
    return 0xFFFFFFFFLL;
  return v1;
}

void sub_1009CBFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009CBFE8(uint64_t a1)
{
  return sub_1009CBF30(a1 - 72);
}

uint64_t sub_1009CBFF0(_DWORD *a1)
{
  uint64_t result;

  LODWORD(result) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 152))(a1);
  a1[33] = result;
  return (int)result;
}

uint64_t sub_1009CC020(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 72;
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 72) + 152))(a1 - 72);
  *(_DWORD *)(v1 + 132) = result;
  return (int)result;
}

_QWORD *sub_1009CC054@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "WalkingSpeedStrideCal");
}

_QWORD *sub_1009CC064@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "WalkingSpeedStrideCal");
}

uint64_t sub_1009CC074(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_1009CC084(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 - 352) + 120))(a1 - 352, a2, 0);
}

uint64_t sub_1009CC098(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  pthread_mutex_t *v37;
  __int16 v38;
  uint8_t buf[8];
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v9 = *(_QWORD *)(a1 + 112);
  v8 = a1 + 112;
  v10 = v8 - 40;
  v36 = v8;
  (*(void (**)(void))(v9 + 16))();
  v38 = 256;
  if ((sub_10008950C(v10) & 1) == 0)
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102163190);
    v29 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Database not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102163190);
      LOWORD(v35) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Database not accessible", &v35, 2);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 2, "virtual CMError CLWalkingSpeedCalRecorderDb::queryCalsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<WalkingSpeedStrideCal> &) const", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    v30 = 109;
    goto LABEL_32;
  }
  sub_100087AF4((_QWORD *)(a1 + 424), &v35);
  *(_DWORD *)buf = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  if (a4 >= a3)
  {
    v11 = (sqlite3_stmt *)sub_100026CC8(v35);
    if (sub_1000890C4(v11, 1, a3))
    {
      v12 = (sqlite3_stmt *)sub_100026CC8(v35);
      if (sub_1000890C4(v12, 2, a4))
      {
        while (!sub_1009CC49C(&v35, (uint64_t)buf))
        {
          v13 = v40;
          v14 = v41;
          v15 = v42;
          v17 = *(_OWORD **)(a2 + 8);
          v16 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v17 >= v16)
          {
            v19 = *(_OWORD **)a2;
            v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *(_QWORD *)a2) >> 4);
            v21 = v20 + 1;
            if (v20 + 1 > 0x555555555555555)
              sub_100259694();
            v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)v19) >> 4);
            if (2 * v22 > v21)
              v21 = 2 * v22;
            if (v22 >= 0x2AAAAAAAAAAAAAALL)
              v23 = 0x555555555555555;
            else
              v23 = v21;
            if (v23)
            {
              v24 = (char *)sub_100313718(a2 + 16, v23);
              v19 = *(_OWORD **)a2;
              v17 = *(_OWORD **)(a2 + 8);
            }
            else
            {
              v24 = 0;
            }
            v25 = &v24[48 * v20];
            *(_OWORD *)v25 = v13;
            *((_OWORD *)v25 + 1) = v14;
            *((_OWORD *)v25 + 2) = v15;
            v26 = v25;
            if (v17 != v19)
            {
              do
              {
                v27 = *(v17 - 3);
                v28 = *(v17 - 1);
                *((_OWORD *)v26 - 2) = *(v17 - 2);
                *((_OWORD *)v26 - 1) = v28;
                *((_OWORD *)v26 - 3) = v27;
                v26 -= 48;
                v17 -= 3;
              }
              while (v17 != v19);
              v19 = *(_OWORD **)a2;
            }
            v18 = v25 + 48;
            *(_QWORD *)a2 = v26;
            *(_QWORD *)(a2 + 8) = v25 + 48;
            *(_QWORD *)(a2 + 16) = &v24[48 * v23];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v17 = v40;
            v17[1] = v14;
            v18 = v17 + 3;
            v17[2] = v15;
          }
          *(_QWORD *)(a2 + 8) = v18;
        }
      }
    }
  }
  v31 = v35;
  v35 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v30 = 100;
  if (HIBYTE(v38))
  {
LABEL_32:
    if ((_BYTE)v38)
      pthread_mutex_unlock(v37);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  }
  return v30;
}

void sub_1009CC44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009CC49C(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_1009CCED4(a1, a2);
  return 0;
}

uint64_t sub_1009CC4F8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return sub_1009CC098(a1 - 352, a2, a3, a4);
}

BOOL sub_1009CC500(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  id v6;
  int v7;
  CLSerializableWalkingSpeedStrideCal *v8;
  NSData *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  NSArray *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[3];
  int v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;

  if (!a3)
    return 0;
  v6 = objc_alloc_init((Class)NSMutableArray);
  memset(v18, 0, sizeof(v18));
  v7 = sub_100427DA8(a1, a2, (uint64_t)v18);
  if (!v7)
  {
    do
    {
      v17 = 0;
      v8 = -[CLSerializableWalkingSpeedStrideCal initWithWalkingSpeedStrideCal:]([CLSerializableWalkingSpeedStrideCal alloc], "initWithWalkingSpeedStrideCal:", v18);
      v9 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v8, 1, &v17);
      if (v17)
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102163190);
        v10 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v22 = v17;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to serialize walking speed stride cal: %@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FEA0 != -1)
            dispatch_once(&qword_10229FEA0, &stru_102163190);
          v19 = 138412290;
          v20 = v17;
          LODWORD(v16) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 16, "Unable to serialize walking speed stride cal: %@", &v19, v16);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLWalkingSpeedCalRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArray<NSData *> **)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
      }
      else
      {
        objc_msgSend(v6, "addObject:", v9);
      }

      v13 = sub_100427DA8(a1, a2, (uint64_t)v18);
    }
    while (!v13);
    v7 = v13;
  }
  v15 = (NSArray *)objc_msgSend(v6, "count");
  if (v15)
    v15 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v6);
  *a3 = v15;

  return v7 == 1;
}

BOOL sub_1009CC7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v10 = 0;
  v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(CLSerializableWalkingSpeedStrideCal, a2), a2, &v10);
  v5 = v10;
  if (v10)
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102163190);
    v6 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to deserialize walking speed stride cal: %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102163190);
      v11 = 138412290;
      v12 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 16, "Unable to deserialize walking speed stride cal: %@", &v11, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWalkingSpeedCalRecorderDb::dataBlobToEntry(NSData *, WalkingSpeedStrideCal &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    objc_msgSend(v4, "getWalkingSpeedStrideCal:", a3);
  }
  return v5 == 0;
}

void sub_1009CC998(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    sub_100634364(*(_QWORD *)(a1 + 80), "WalkingSpeedStrideCal", (const char **)&qword_102306018, (const std::string::value_type **)&qword_102306198, 0);
    *(_QWORD *)(a1 + 360) = sub_10063D314(*(_QWORD *)(a1 + 80), "INSERT INTO WalkingSpeedStrideCal (startTime, endTime, cadenceWatch, cadenceGaitCycle, meanWalkingSpeed, gaitCycleYield) VALUES (?, ?, ?, ?, ?, ?)");
    *(_QWORD *)(a1 + 368) = v2;
    *(_QWORD *)(a1 + 376) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM WalkingSpeedStrideCal WHERE id <= ?");
    *(_QWORD *)(a1 + 384) = v3;
    *(_QWORD *)(a1 + 392) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM WalkingSpeedStrideCal ORDER BY startTime DESC LIMIT 1");
    *(_QWORD *)(a1 + 400) = v4;
    *(_QWORD *)(a1 + 408) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM WalkingSpeedStrideCal");
    *(_QWORD *)(a1 + 416) = v5;
    *(_QWORD *)(a1 + 424) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM WalkingSpeedStrideCal WHERE startTime BETWEEN ? and ? ORDER BY startTime DESC");
    *(_QWORD *)(a1 + 432) = v6;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  }
  else
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102163190);
    v7 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102163190);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Device is locked and we are unable to open the database", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLWalkingSpeedCalRecorderDb::prepareSQLStatements()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

uint64_t sub_1009CCBCC(uint64_t a1, double *a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  sqlite3_stmt *v12;
  int v13;
  sqlite3_stmt *v14;
  uint64_t v15;
  sqlite3_stmt *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    sub_100087AF4((_QWORD *)(a1 + 360), &v21);
    v5 = (sqlite3_stmt *)sub_100026CC8(v21);
    if (sub_1000890C4(v5, 1, *a2))
    {
      v6 = (sqlite3_stmt *)sub_100026CC8(v21);
      if (sub_1000890C4(v6, 2, a2[1]))
      {
        v7 = (sqlite3_stmt *)sub_100026CC8(v21);
        if (sub_1000890C4(v7, 3, a2[2]))
        {
          v8 = (sqlite3_stmt *)sub_100026CC8(v21);
          if (sub_1000890C4(v8, 4, a2[3]))
          {
            v9 = (sqlite3_stmt *)sub_100026CC8(v21);
            if (sub_1000890C4(v9, 5, a2[4]))
            {
              v10 = (sqlite3_stmt *)sub_100026CC8(v21);
              if (sub_1000890C4(v10, 6, a2[5]))
              {
                v11 = *(_QWORD *)(a1 + 80);
                v12 = (sqlite3_stmt *)sub_100026CC8(v21);
                sub_10023C9B0(v11, v12);
                ++*(_DWORD *)(a1 + 132);
              }
            }
          }
        }
      }
    }
    if (!*(_BYTE *)(a1 + 440))
    {
      v13 = sub_10063E99C(*(_QWORD *)(a1 + 80));
      sub_100087AF4((_QWORD *)(a1 + 376), &v20);
      v14 = (sqlite3_stmt *)sub_100026CC8(v20);
      if (sub_1000CD75C(v14, 1, v13 - 100))
      {
        v15 = *(_QWORD *)(a1 + 80);
        v16 = (sqlite3_stmt *)sub_100026CC8(v20);
        sub_10023C9B0(v15, v16);
        *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      }
      v17 = v20;
      v20 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    sub_10001E99C(*(_QWORD *)(a1 + 80));
    v18 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v18 + 88) <= 0)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = *(_QWORD *)(v18 + 88);
    sub_100053048(v18, v19);
    result = v21;
    v21 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1009CCD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009CCDC8(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 392), &v12);
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v4 = sub_1009CC49C(&v12, (uint64_t)&v8);
  if (!(_DWORD)v4)
  {
    v5 = v10;
    *a2 = v9;
    a2[1] = v5;
    a2[2] = v11;
  }
  v6 = v12;
  v12 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

void sub_1009CCE64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

double sub_1009CCE88(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  __int128 v4;
  double result;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  sub_1009CCED4(a2, (uint64_t)v6);
  v4 = v8;
  *a3 = v7;
  a3[1] = v4;
  result = *(double *)&v9;
  a3[2] = v9;
  return result;
}

void sub_1009CCED4(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 3);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 6);
}

uint64_t sub_1009CCF80(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_101911810(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1009CD288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_1018B38B4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1009CD2F0(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10191197C(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_1009CD63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1009CD6A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021632A8);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021632A8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021632A8);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1009CDC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1009CDCBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

id *sub_1009CDCD0(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  double v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  _OWORD v33[3];
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;

  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0;
  if (*(double *)(a1 + 224) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v34);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  memset(v33, 0, sizeof(v33));
  v6 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 104))(a1, v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021632A8);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021632A8);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v35, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)a2;
    v8 = *(double *)v33;
    v9 = *(double *)a2 - *(double *)v33;
    if (v9 < 0.0)
      v9 = -v9;
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021632A8);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(double *)a2;
        *(_DWORD *)buf = 134349312;
        v40 = *(double *)v33;
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021632A8);
        v24 = *(double *)a2;
        v35 = 134349312;
        v36 = *(double *)v33;
        v37 = 2050;
        v38 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v35, 22);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)a2;
      v8 = *(double *)v33;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021632A8);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)a2;
          *(_DWORD *)buf = 134217984;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021632A8);
          v27 = *(double *)a2;
          v35 = 134217984;
          v36 = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v35));
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021632A8);
        v18 = v32;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021632A8);
        v35 = 134217984;
        v36 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v35));
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _OWORD *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v33, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v34);
}

void sub_1009CE420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009CE44C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101911AE8(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1009CE6AC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101911C54(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1009CE8E4(uint64_t a1)
{
  return sub_1009CD6A4(a1 - 72);
}

void sub_1009CE8EC(id a1)
{
  qword_10229FEA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

uint64_t sub_1009CE918(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101911DC0(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1009CEB40(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1009CEB6C()
{
  qword_102306018 = (uint64_t)"id";
  dword_102306020 = 1;
  word_102306024 = 257;
  byte_102306028 = 0;
  byte_102306040 = 0;
  qword_102306048 = (uint64_t)"startTime";
  dword_102306050 = 2;
  word_102306054 = 0;
  byte_102306058 = 0;
  byte_102306070 = 0;
  qword_102306078 = (uint64_t)"endTime";
  dword_102306080 = 2;
  word_102306084 = 0;
  byte_102306088 = 0;
  byte_1023060A0 = 0;
  qword_1023060A8 = (uint64_t)"cadenceWatch";
  dword_1023060B0 = 2;
  word_1023060B4 = 0;
  byte_1023060B8 = 0;
  byte_1023060D0 = 0;
  qword_1023060D8 = (uint64_t)"cadenceGaitCycle";
  dword_1023060E0 = 2;
  word_1023060E4 = 0;
  byte_1023060E8 = 0;
  byte_102306100 = 0;
  qword_102306108 = (uint64_t)"meanWalkingSpeed";
  dword_102306110 = 2;
  word_102306114 = 0;
  byte_102306118 = 0;
  byte_102306130 = 0;
  qword_102306138 = (uint64_t)"gaitCycleYield";
  dword_102306140 = 2;
  word_102306144 = 0;
  byte_102306148 = 0;
  byte_102306160 = 0;
  qword_102306168 = 0;
  dword_102306170 = 5;
  word_102306174 = 0;
  byte_102306178 = 0;
  byte_102306190 = 0;
  qword_102306198 = (uint64_t)"startTime";
  unk_1023061A0 = 0;
}

void sub_1009CEC6C()
{
  operator new();
}

uint64_t sub_1009CEFCC(uint64_t a1)
{
  void *v2;
  const char **v3;
  BOOL v4;
  std::__shared_weak_count *info;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  int v9;
  NSObject *v10;
  const char *v11;
  CFRunLoopObserverContext *v12;
  int v13;
  int priority_max;
  _opaque_pthread_t *v15;
  _opaque_pthread_t *v16;
  __CFRunLoopSource *v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  __CFRunLoopObserver *v21;
  __CFRunLoopObserver *v22;
  CFMutableArrayRef Mutable;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v25;
  NSObject *v26;
  const char *v28;
  CFRunLoopObserverContext *v29;
  const char *v30;
  CFRunLoopObserverContext *v31;
  const char *v32;
  CFRunLoopObserverContext *v33;
  uint64_t v34;
  int v35[3];
  int v36;
  _DWORD v37[4];
  CFRunLoopSourceContext context;
  CFRunLoopObserverContext buf[40];

  v2 = objc_autoreleasePoolPush();
  v3 = (const char **)_CFGetProgname();
  v4 = strcmp(*v3, "locationd") == 0;
  *(_BYTE *)(qword_1023110F8 + 16) = v4;
  pthread_setname_np("com.apple.CoreMotion.MotionThread");
  if (!*(_BYTE *)(qword_1023110F8 + 16))
    operator new();
  sub_1001E4804(buf);
  sub_1002B7674(qword_1023110F8 + 24, (__int128 *)&buf[0].version);
  info = (std::__shared_weak_count *)buf[0].info;
  if (buf[0].info)
  {
    v6 = (unint64_t *)((char *)buf[0].info + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))info->__on_zero_shared)(info);
      std::__shared_weak_count::__release_weak(info);
    }
  }
  v36 = 0;
  if ((sub_1001E4B84(*(_QWORD *)(qword_1023110F8 + 24), "MotionThreadPriority", &v36) & 1) == 0)
    v36 = -1;
  v35[0] = 0;
  v8 = pthread_self();
  v9 = pthread_getschedparam(v8, v35, (sched_param *)&v35[1]);
  if (v9)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102163388);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0].version) = 67240192;
      HIDWORD(buf[0].version) = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Could not get scheduling parameters for motion thread, error = %{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102163388);
      LODWORD(context.version) = 67240192;
      HIDWORD(context.version) = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not get scheduling parameters for motion thread, error = %{public}d", &context, 8, *(_QWORD *)v35);
      v12 = (CFRunLoopObserverContext *)v11;
      sub_100512490("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v13 = v36;
    if (v36 <= 0)
    {
      priority_max = sched_get_priority_max(v35[0]);
      v13 = v35[1];
      if (priority_max > v35[1])
        v13 = priority_max;
    }
    v35[1] = v13;
    v15 = pthread_self();
    pthread_setschedparam(v15, v35[0], (const sched_param *)&v35[1]);
    v16 = pthread_self();
    pthread_getschedparam(v16, v35, (sched_param *)&v35[1]);
  }
  *(_QWORD *)qword_1023110F8 = CFRunLoopGetCurrent();
  sub_1009CFC54(a1);
  pthread_dependency_fulfill_np(a1, 0);
  memset(&context, 0, sizeof(context));
  v17 = CFRunLoopSourceCreate(kCFAllocatorDefault, 0, &context);
  if (!v17)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102163388);
    v18 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0].version) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "could not create runloop source", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102163388);
      LOWORD(v37[0]) = 0;
      LODWORD(v34) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not create runloop source", v37, v34);
      v33 = (CFRunLoopObserverContext *)v32;
      sub_100512490("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  CFRunLoopAddSource(*(CFRunLoopRef *)qword_1023110F8, v17, kCFRunLoopCommonModes);
  v19 = _CFRunLoopSetPerCalloutAutoreleasepoolEnabled(1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021633A8);
  v20 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].version) = 67174657;
    HIDWORD(buf[0].version) = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "_CFRunLoopSetPerCalloutAutoreleasepoolEnabled() returned a value of, %{private}d.", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021633A8);
    v37[0] = 67174657;
    v37[1] = v19;
    LODWORD(v34) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "_CFRunLoopSetPerCalloutAutoreleasepoolEnabled() returned a value of, %{private}d.", v37, v34);
    v29 = (CFRunLoopObserverContext *)v28;
    sub_100512490("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  if (v19)
  {
    v21 = 0;
    v22 = 0;
    Mutable = 0;
  }
  else
  {
    Mutable = CFArrayCreateMutable(0, 0, 0);
    buf[0].version = 0;
    buf[0].info = Mutable;
    buf[0].retain = (const void *(__cdecl *)(const void *))&_CFRetain;
    buf[0].release = (void (__cdecl *)(const void *))&_CFRelease;
    buf[0].copyDescription = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
    v22 = CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)sub_1009CF95C, buf);
    v21 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)sub_1009CF95C, buf);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_1023110F8, v22, kCFRunLoopCommonModes);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_1023110F8, v21, kCFRunLoopCommonModes);
  }
  *(_QWORD *)(qword_1023110F8 + 40) = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v25 = CFRunLoopTimerCreateWithHandler(kCFAllocatorDefault, Current + 1.0, 5.0, 0, 0, &stru_102163328);
  CFRunLoopAddTimer(*(CFRunLoopRef *)qword_1023110F8, v25, kCFRunLoopCommonModes);
  objc_autoreleasePoolPop(v2);
  CFRunLoopRun();
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102163388);
  v26 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf[0].version) = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Motion thread exiting", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102163388);
    LOWORD(context.version) = 0;
    LODWORD(v34) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Motion thread exiting", &context, v34);
    v31 = (CFRunLoopObserverContext *)v30;
    sub_100512490("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  if (v25)
  {
    CFRunLoopRemoveTimer(*(CFRunLoopRef *)qword_1023110F8, v25, kCFRunLoopCommonModes);
    CFRelease(v25);
  }
  if (v21)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_1023110F8, v21, kCFRunLoopCommonModes);
    CFRelease(v21);
  }
  if (v22)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_1023110F8, v22, kCFRunLoopCommonModes);
    CFRelease(v22);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v17)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)qword_1023110F8, v17, kCFRunLoopCommonModes);
    CFRelease(v17);
  }
  return 0;
}

void sub_1009CF8DC()
{
  operator delete();
}

void sub_1009CF90C(id a1)
{
  qword_1023061B8 = (uint64_t)+[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", +[CLSilo main](CLSilo, "main"));
}

uint64_t sub_1009CF94C()
{
  return *(unsigned __int8 *)(qword_1023110F8 + 16);
}

void sub_1009CF95C(int a1, uint64_t a2, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v6;
  const void *ValueAtIndex;
  const void *v8;

  if (a2 == 1)
    goto LABEL_6;
  if (a2 == 128 || a2 == 32)
  {
    Count = CFArrayGetCount(theArray);
    if (Count <= 0)
      sub_1019120F8();
    v6 = Count - 1;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
    NSPopAutoreleasePool(ValueAtIndex);
    CFArrayRemoveValueAtIndex(theArray, v6);
    if (a2 == 32)
    {
LABEL_6:
      v8 = (const void *)NSPushAutoreleasePool(0);
      CFArrayAppendValue(theArray, v8);
    }
  }
}

void sub_1009CF9F8(id a1)
{
  NSObject *v1;
  int v2;
  id v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021633A8);
  v1 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v2 = *(_DWORD *)(qword_1023110F8 + 48);
    *(_DWORD *)buf = 67109120;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Motion thread deadlock watchdog after %d petting", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021633A8);
    v4 = *(_DWORD *)(qword_1023110F8 + 48);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "Motion thread deadlock watchdog after %d petting", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (&_ADClientAddValueForScalarKey)
  {
    ADClientAddValueForScalarKey(CFSTR("com.apple.CoreMotion.ThreadDeadlockCount"), 1);
    v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@.%@"), CFSTR("com.apple.CoreMotion.ThreadDeadlockCount"), -[NSProcessInfo processName](+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"), "processName"));
    ADClientAddValueForScalarKey(v3, 1);

  }
}

uint64_t sub_1009CFC10()
{
  return *(_QWORD *)_CFGetProgname();
}

void sub_1009CFC28(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1009CFC54(uint64_t a1)
{
  dispatch_once_t *v2;
  _QWORD block[5];

  if (!*(_BYTE *)(a1 + 32))
  {
    v2 = *(dispatch_once_t **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1009CFCD4;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    if (*v2 != -1)
      dispatch_once(v2, block);
    *(_BYTE *)(a1 + 32) = 1;
  }
}

uint64_t sub_1009CFCD4()
{
  return pthread_dependency_init_np();
}

void sub_1009CFCE8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1009CFD14(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1009CFD2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1009CFDAC(id a1)
{
  qword_1023061D0 = objc_alloc_init(CLLocationPushRegistrar);
}

void sub_1009CFEF8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102163478);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Location Push Registrar XPC invalidation handler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102163478);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "Location Push Registrar XPC invalidation handler", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "-[CLLocationPushRegistrar connect]_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = 0;
}

void sub_1009D009C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102163478);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Location Push Registrar XPC interruption handler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102163478);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 16, "Location Push Registrar XPC interruption handler", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 0, "-[CLLocationPushRegistrar connect]_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = 0;
}

uint64_t sub_1009D02C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1009D0364(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1009D0380(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

unint64_t sub_1009D03AC()
{
  unint64_t result;

  result = sub_1010649A8();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_1009D03F4()
{
  operator delete();
}

uint64_t sub_1009D0418()
{
  if (qword_1023061D8 != -1)
    dispatch_once(&qword_1023061D8, &stru_102163498);
  return qword_102311100;
}

uint64_t sub_1009D045C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];

  v2 = sub_1010645AC(a1);
  *(_QWORD *)v2 = off_1021634C8;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  v3 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1009D04F0;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  sub_1000A50A8(v3, (uint64_t)v5);
  return a1;
}

void sub_1009D04DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1009D0518(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1009D04F0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_101064664(v1);
  return sub_101064A68(v1);
}

_QWORD *sub_1009D0518(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_102163560;
  v2 = (uint64_t)(a1 + 1);
  sub_10051CFC0(a1 + 3, 0);
  sub_100261F44(v2);
  return a1;
}

uint64_t sub_1009D0560(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 1;
  v4 = sub_100127B9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1009D061C;
  v7[3] = &unk_1021634F0;
  v8 = a2;
  v7[4] = &v9;
  v7[5] = a1;
  sub_1000A50A8(v4, (uint64_t)v7);
  v5 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1009D0604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1009D061C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BOOL4 v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  _BOOL4 v41;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(v2 + 52);
  if (*(_BYTE *)(a1 + 48))
  {
    if (v3 != -1)
    {
      v4 = v3 + 1;
LABEL_6:
      *(_DWORD *)(v2 + 52) = v4;
      goto LABEL_20;
    }
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v5 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLSPUMagicMountControl] Invalid client count. Not increasing.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_102163580);
      LOWORD(v31) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 16, "[CLSPUMagicMountControl] Invalid client count. Not increasing.", &v31, v30, v31);
LABEL_75:
      v29 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v6);
      if (v29 != buf)
        free(v29);
    }
  }
  else
  {
    if (v3)
    {
      v4 = v3 - 1;
      goto LABEL_6;
    }
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v7 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLSPUMagicMountControl] Invalid client count. Not decreasing.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_102163580);
      LOWORD(v31) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 16, "[CLSPUMagicMountControl] Invalid client count. Not decreasing.", &v31, v30, v31);
      goto LABEL_75;
    }
  }
LABEL_20:
  v8 = *(_DWORD *)(v2 + 52) != 0;
  v9 = *(unsigned __int8 *)(v2 + 40);
  if (qword_10229FD10 != -1)
    dispatch_once(&qword_10229FD10, &stru_102163580);
  v10 = qword_10229FD18;
  if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_DWORD *)(v2 + 52);
    v12 = *(unsigned __int8 *)(v2 + 40);
    *(_DWORD *)buf = 67240704;
    v37 = v11;
    v38 = 1026;
    v39 = v12;
    v40 = 1026;
    v41 = v9 != v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[CLSPUMagicMountControl] Number of clients,%{public}u, enabled,%{public}d, shouldConfigure,%{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v17 = *(_DWORD *)(v2 + 52);
    v18 = *(unsigned __int8 *)(v2 + 40);
    LODWORD(v31) = 67240704;
    HIDWORD(v31) = v17;
    v32 = 1026;
    v33 = v18;
    v34 = 1026;
    v35 = v9 != v8;
    LODWORD(v30) = 20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 0, "[CLSPUMagicMountControl] Number of clients,%{public}u, enabled,%{public}d, shouldConfigure,%{public}d", &v31, v30);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  if (sub_1009D0F50(v2) && !sub_1009D12AC(v2))
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v13 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[CLMagicMountControl] APWakesAllowed command failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_102163580);
      LOWORD(v31) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 16, "[CLMagicMountControl] APWakesAllowed command failed", &v31, v30);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  if (v9 == v8)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      HIBYTE(v30) = 5;
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_102163580);
      v14 = qword_10229FD18;
      if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[CLMagicMountControl] Querying current MagicMount state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD10 != -1)
          dispatch_once(&qword_10229FD10, &stru_102163580);
        LOWORD(v31) = 0;
        LODWORD(v30) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 0, "[CLMagicMountControl] Querying current MagicMount state", &v31, v30);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      if (!sub_1010649C0(v2, (uint64_t)&v30 + 7, (char *)1))
      {
        if (qword_10229FD10 != -1)
          dispatch_once(&qword_10229FD10, &stru_102163580);
        v15 = qword_10229FD18;
        if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[CLMagicMountControl] Query failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD10 != -1)
            dispatch_once(&qword_10229FD10, &stru_102163580);
          LOWORD(v31) = 0;
          LODWORD(v30) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 16, "[CLMagicMountControl] Query failed", &v31, v30);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
      }
    }
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v16 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[CLSPUMagicMountControl] No configure needed.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_102163580);
      LOWORD(v31) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 2, "[CLSPUMagicMountControl] No configure needed.", &v31, v30);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    *(_BYTE *)(v2 + 40) = v8;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_101064A68(v2);
  }
}

BOOL sub_1009D0F50(uint64_t a1)
{
  int v2;
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _DWORD v20[2];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _BOOL4 v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BOOL4 v34;

  v2 = *(_DWORD *)(a1 + 52);
  v4 = *(_DWORD *)(a1 + 56) == v2 && v2 != 0;
  v5 = *(unsigned __int8 *)(a1 + 48);
  if (qword_10229FD10 != -1)
    dispatch_once(&qword_10229FD10, &stru_102163580);
  v6 = qword_10229FD18;
  if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_DWORD *)(a1 + 52);
    v7 = *(_DWORD *)(a1 + 56);
    v9 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 67240960;
    v28 = v7;
    v29 = 1026;
    v30 = v8;
    v31 = 1026;
    v32 = v9;
    v33 = 1026;
    v34 = v5 != v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLSPUMagicMountControl] Number of DisableAPWakes clients,%{public}u, Number of service clients,%{public}d, prior status (isDisabled),%{public}d, shouldConfigure,%{public}d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v13 = *(_DWORD *)(a1 + 52);
    v12 = *(_DWORD *)(a1 + 56);
    v14 = *(unsigned __int8 *)(a1 + 48);
    v20[0] = 67240960;
    v20[1] = v12;
    v21 = 1026;
    v22 = v13;
    v23 = 1026;
    v24 = v14;
    v25 = 1026;
    v26 = v5 != v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 0, "[CLSPUMagicMountControl] Number of DisableAPWakes clients,%{public}u, Number of service clients,%{public}d, prior status (isDisabled),%{public}d, shouldConfigure,%{public}d", v20, 26);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::checkDisableAPWakesCriteria()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (v5 == v4)
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v10 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[CLSPUMagicMountControl] No APWakes configure needed.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_102163580);
      LOWORD(v20[0]) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 2, "[CLSPUMagicMountControl] No APWakes configure needed.", v20, v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::checkDisableAPWakesCriteria()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 48) = v4;
  }
  return v5 != v4;
}

BOOL sub_1009D12AC(uint64_t a1)
{
  int v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  HIWORD(v7) = 4;
  v2 = *(unsigned __int8 *)(a1 + 48) ^ 1;
  HIBYTE(v7) = *(_BYTE *)(a1 + 48) ^ 1;
  if (qword_10229FD10 != -1)
    dispatch_once(&qword_10229FD10, &stru_102163580);
  v3 = qword_10229FD18;
  if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[CLMagicMountControl] APWakesSetting,isAllowed,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v8[0] = 67240192;
    v8[1] = v2;
    LODWORD(v7) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 0, "[CLMagicMountControl] APWakesSetting,isAllowed,%{public}d", v8, v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::sendAPWakesAllowedCommand()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return sub_1010649C0(a1, (uint64_t)&v7 + 6, (char *)2);
}

uint64_t sub_1009D1478(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 1;
  v4 = sub_100127B9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1009D1534;
  v7[3] = &unk_1021634F0;
  v8 = a2;
  v7[4] = &v9;
  v7[5] = a1;
  sub_1000A50A8(v4, (uint64_t)v7);
  v5 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1009D151C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1009D1534(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(v2 + 56);
  if (*(_BYTE *)(a1 + 48))
  {
    if (v3)
    {
      v4 = v3 - 1;
LABEL_6:
      *(_DWORD *)(v2 + 56) = v4;
      goto LABEL_20;
    }
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v5 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLSPUMagicMountControl] Invalid APWake client count. Not decreasing.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_102163580);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 16, "[CLSPUMagicMountControl] Invalid APWake client count. Not decreasing.", v13, 2, v13[0]);
LABEL_35:
      v11 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setAPWakesAllowed(BOOL)_block_invoke", "%s\n", v6);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    if (v3 != -1)
    {
      v4 = v3 + 1;
      goto LABEL_6;
    }
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102163580);
    v7 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLSPUMagicMountControl] Invalid APWake client count. Not increasing.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_102163580);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 16, "[CLSPUMagicMountControl] Invalid APWake client count. Not increasing.", v13, 2, v13[0]);
      goto LABEL_35;
    }
  }
LABEL_20:
  if (sub_1009D0F50(v2))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1009D12AC(v2);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_102163580);
      v8 = qword_10229FD18;
      if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CLMagicMountControl] APWakesAllowed command failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD10 != -1)
          dispatch_once(&qword_10229FD10, &stru_102163580);
        LOWORD(v13[0]) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 16, "[CLMagicMountControl] APWakesAllowed command failed", v13, v12);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setAPWakesAllowed(BOOL)_block_invoke", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
  }
}

void sub_1009D1928(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_102163560;
  v1 = (uint64_t)(a1 + 1);
  sub_10051CFC0(a1 + 3, 0);
  sub_100261F44(v1);
  operator delete();
}

void sub_1009D1980(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_102163560;
  v1 = (uint64_t)(a1 + 1);
  sub_10051CFC0(a1 + 3, 0);
  sub_100261F44(v1);
  operator delete();
}

void sub_1009D19D8(id a1)
{
  qword_10229FD18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

uint64_t sub_1009D1A04(uint64_t a1)
{
  float *v2;
  float *v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  int v20;
  double v21;
  int v23;
  double v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  _DWORD v28[2];
  __int16 v29;
  double v30;
  uint8_t buf[8];
  _QWORD v32[204];

  *(_QWORD *)a1 = off_1021635B0;
  *(_DWORD *)(a1 + 16) = 1065353216;
  v2 = (float *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0x40426A333F800000;
  *(_DWORD *)(a1 + 24) = 1053609165;
  v3 = (float *)(a1 + 24);
  sub_1008A4D88(a1 + 32, 2048, 0);
  v4 = sub_100127B9C();
  sub_100081C10(v4, buf);
  v5 = (_BYTE *)(a1 + 20);
  v6 = sub_1001E4874(*(uint64_t *)buf, "EnableEllipticalLoadCal", (BOOL *)(a1 + 20));
  v7 = v6;
  v8 = (std::__shared_weak_count *)v32[0];
  if (v32[0])
  {
    v9 = (unint64_t *)(v32[0] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v7 & 1) != 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if ((v6 & 1) == 0)
LABEL_6:
    *v5 = 1;
LABEL_7:
  v11 = sub_100127B9C();
  sub_100081C10(v11, buf);
  sub_100526804(*(uint64_t *)buf, "EllipticalModelMetsScale", v2);
  v12 = (std::__shared_weak_count *)v32[0];
  if (v32[0])
  {
    v13 = (unint64_t *)(v32[0] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = sub_100127B9C();
  sub_100081C10(v15, buf);
  sub_100526804(*(uint64_t *)buf, "EllipticalModelSwitchMargin", v3);
  v16 = (std::__shared_weak_count *)v32[0];
  if (v32[0])
  {
    v17 = (unint64_t *)(v32[0] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021635F0);
  v19 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v20 = *v5;
    v21 = *v3;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v20;
    LOWORD(v32[0]) = 2048;
    *(double *)((char *)v32 + 2) = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Ellptical, Load Calibration Enabled status, %d, WR-HR switch margin, %f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021635F0);
    v23 = *v5;
    v24 = *v3;
    v28[0] = 67109376;
    v28[1] = v23;
    v29 = 2048;
    v30 = v24;
    LODWORD(v27) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Ellptical, Load Calibration Enabled status, %d, WR-HR switch margin, %f", v28, v27);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "CLNatalieEllipticalModel::CLNatalieEllipticalModel()", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  return a1;
}

void sub_1009D1D60(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10087A53C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009D1DA0(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
      return sub_1004C5730(*(_QWORD *)(a3 + 8));
  }
  return result;
}

uint64_t sub_1009D1E38(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 40) + 48))(*(_QWORD *)(a3 + 40));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a3 + 8) + 48))(*(_QWORD *)(a3 + 8), a1);
  return result;
}

void sub_1009D1E94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  unsigned int v10;
  double v11;
  float v12;
  float v13;
  float v14;
  NSObject *v15;
  double v16;
  double v17;
  float v18;
  float v19;
  double v20;
  float v21;
  float v22;
  NSObject *v23;
  int v24;
  int v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  NSObject *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  const char *v39;
  uint8_t *v40;
  double v41;
  double v42;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  uint8_t *v46;
  double v47;
  double v48;
  double v49;
  int v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  _BYTE v55[54];
  __int16 v56;
  double v57;
  __int16 v58;
  int v59;
  uint8_t buf[4];
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  _BYTE v65[54];
  __int16 v66;
  double v67;
  __int16 v68;
  int v69;

  v6 = *(float *)(a2 + 1364);
  LODWORD(v49) = *(_DWORD *)(a2 + 1368);
  v7 = *(float *)(a2 + 1372);
  v8 = *(float *)(a2 + 1376);
  v9 = *(float *)(a2 + 1380);
  v10 = *(_DWORD *)(a2 + 400);
  v11 = *(double *)(a2 + 128);
  v12 = (double)v10 / (v11 - *(double *)(a2 + 120));
  v13 = (float)(*(float *)(a1 + 12) / v6) * v12;
  if (v12 <= 0.0)
    v14 = 2.1;
  else
    v14 = (float)((float)(v12 * 0.5748) + 3.4781) + (float)(v13 * 34.475);
  HIBYTE(v49) = 0;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021635F0);
  v15 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(double *)(a2 + 128) - *(double *)(a2 + 120);
    v17 = *(float *)(a1 + 12);
    *(_DWORD *)buf = 134219776;
    v61 = v11;
    v62 = 2048;
    v63 = v16;
    v64 = 1024;
    *(_DWORD *)v65 = v10;
    *(_WORD *)&v65[4] = 2048;
    *(double *)&v65[6] = v12;
    *(_WORD *)&v65[14] = 2048;
    *(double *)&v65[16] = v17;
    *(_WORD *)&v65[24] = 2048;
    *(double *)&v65[26] = v6;
    *(_WORD *)&v65[34] = 2048;
    *(double *)&v65[36] = v13;
    *(_WORD *)&v65[44] = 2048;
    *(double *)&v65[46] = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Elliptical, Linear Regression, timestamp, %f, duration, %f, stepcount, %d, steprate, %f, resistance, %f, weight, %f, feature2, %f, mets, %f", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021635F0);
    v37 = *(double *)(a2 + 128) - *(double *)(a2 + 120);
    v38 = *(float *)(a1 + 12);
    v50 = 134219776;
    v51 = v11;
    v52 = 2048;
    v53 = v37;
    v54 = 1024;
    *(_DWORD *)v55 = v10;
    *(_WORD *)&v55[4] = 2048;
    *(double *)&v55[6] = v12;
    *(_WORD *)&v55[14] = 2048;
    *(double *)&v55[16] = v38;
    *(_WORD *)&v55[24] = 2048;
    *(double *)&v55[26] = v6;
    *(_WORD *)&v55[34] = 2048;
    *(double *)&v55[36] = v13;
    *(_WORD *)&v55[44] = 2048;
    *(double *)&v55[46] = v14;
    LODWORD(v47) = 78;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Elliptical, Linear Regression, timestamp, %f, duration, %f, stepcount, %d, steprate, %f, resistance, %f, weight, %f, feature2, %f, mets, %f", COERCE_DOUBLE(&v50), v47, LODWORD(v48), v49);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieEllipticalModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  v18 = 0.0;
  if (!sub_100219944(a2) || *(double *)(a2 + 600) >= *(double *)a2)
    goto LABEL_18;
  v19 = *(double *)(a2 + 560);
  v20 = v19;
  v21 = (v9 - v19) / (v9 - v8);
  v22 = sub_10108B14C(v21, v7);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021635F0);
  v18 = *(float *)&v49 * v22;
  v23 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219264;
    v61 = v11;
    v62 = 2048;
    v63 = v20;
    v64 = 2048;
    *(double *)v65 = v9;
    *(_WORD *)&v65[8] = 2048;
    *(double *)&v65[10] = v8;
    *(_WORD *)&v65[18] = 2048;
    *(double *)&v65[20] = *(float *)&v49;
    *(_WORD *)&v65[28] = 2048;
    *(double *)&v65[30] = v18;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Elliptical, DT Regression, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021635F0);
    v50 = 134219264;
    v51 = v11;
    v52 = 2048;
    v53 = v20;
    v54 = 2048;
    *(double *)v55 = v9;
    *(_WORD *)&v55[8] = 2048;
    *(double *)&v55[10] = v8;
    *(_WORD *)&v55[18] = 2048;
    *(double *)&v55[20] = *(float *)&v49;
    *(_WORD *)&v55[28] = 2048;
    *(double *)&v55[30] = v18;
    LODWORD(v47) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Elliptical, DT Regression, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f", COERCE_DOUBLE(&v50), v47, v48, v49);
    v46 = (uint8_t *)v45;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieEllipticalModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
  if (*(_BYTE *)(a1 + 20))
  {
    sub_1008A4D8C((char *)(a1 + 32), a2, (_BYTE *)&v49 + 7, v11, v18, v14);
    *(_DWORD *)(a1 + 8) = v24;
    v25 = 2 * HIBYTE(v49);
  }
  else
  {
LABEL_18:
    v25 = 0;
  }
  v26 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 40);
  v27 = 1.0;
  if (*(float *)(a1 + 8) >= 1.0)
    v27 = *(float *)(a1 + 8);
  if (v26 >= 300.0)
    v28 = v27;
  else
    v28 = *(float *)(a1 + 8);
  *(float *)(a1 + 8) = v28;
  v29 = v14 * v28;
  v30 = -1.0;
  if (v18 > 0.0)
    v30 = (float)(v18 - v29) / v18;
  v31 = *(float *)(a1 + 24);
  if (v30 > v31)
    v32 = 1;
  else
    v32 = v25;
  if (v30 <= v31)
    v33 = v29;
  else
    v33 = v18;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021635F0);
  v34 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v35 = *(float *)(a1 + 8);
    v36 = *(float *)(a1 + 16);
    *(_DWORD *)buf = 134220288;
    v61 = v11;
    v62 = 2048;
    v63 = v18;
    v64 = 2048;
    *(double *)v65 = v14;
    *(_WORD *)&v65[8] = 2048;
    *(double *)&v65[10] = v35;
    *(_WORD *)&v65[18] = 2048;
    *(double *)&v65[20] = v29;
    *(_WORD *)&v65[28] = 2048;
    *(double *)&v65[30] = v30;
    *(_WORD *)&v65[38] = 2048;
    *(double *)&v65[40] = v33;
    *(_WORD *)&v65[48] = 1024;
    *(_DWORD *)&v65[50] = v32;
    v66 = 2048;
    v67 = v36;
    v68 = 1024;
    v69 = HIBYTE(v49);
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Elliptical, METs, timestamp, %f, hrMets, %f, wrMets, %f, calibrationValue, %f, calibrated wrMets, %f, HR-WR diff, %f, mets, %f, metsSource, %d, fMetsScaling, %f, loadCalStatus, %d", buf, 0x5Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021635F0);
    v41 = *(float *)(a1 + 8);
    v42 = *(float *)(a1 + 16);
    v50 = 134220288;
    v51 = v11;
    v52 = 2048;
    v53 = v18;
    v54 = 2048;
    *(double *)v55 = v14;
    *(_WORD *)&v55[8] = 2048;
    *(double *)&v55[10] = v41;
    *(_WORD *)&v55[18] = 2048;
    *(double *)&v55[20] = v29;
    *(_WORD *)&v55[28] = 2048;
    *(double *)&v55[30] = v30;
    *(_WORD *)&v55[38] = 2048;
    *(double *)&v55[40] = v33;
    *(_WORD *)&v55[48] = 1024;
    *(_DWORD *)&v55[50] = v32;
    v56 = 2048;
    v57 = v42;
    v58 = 1024;
    v59 = HIBYTE(v49);
    LODWORD(v47) = 94;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Elliptical, METs, timestamp, %f, hrMets, %f, wrMets, %f, calibrationValue, %f, calibrated wrMets, %f, HR-WR diff, %f, mets, %f, metsSource, %d, fMetsScaling, %f, loadCalStatus, %d", COERCE_DOUBLE(&v50), v47, v48, v49);
    v44 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieEllipticalModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
  *(float *)a3 = v18;
  *(float *)(a3 + 4) = v14;
  *(_DWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 12) = v14;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = v33 * *(float *)(a1 + 16);
  *(_DWORD *)(a3 + 24) = v32;
  *(_DWORD *)(a3 + 28) = 0;
  *(_QWORD *)(a3 + 32) = 0x600000003;
}

void sub_1009D2690(_QWORD *a1)
{
  sub_1009D26E0(a1);
  operator delete();
}

void sub_1009D26B4(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

_QWORD *sub_1009D26E0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = off_1021635B0;
  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  sub_100261F44((uint64_t)(a1 + 11));
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1009D2754()
{
  uint64_t result;

  result = sub_1001E4BF4();
  if ((result & 4) != 0)
    operator new();
  return result;
}

void sub_1009D279C()
{
  operator delete();
}

void sub_1009D27C4(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLAccelerometer", 1);
}

void sub_1009D2898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44(v10);
  sub_1009BAD18(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009D28C4(_QWORD *a1)
{
  *a1 = off_102163640;
  sub_100261F44((uint64_t)(a1 + 5));
  return sub_1009BAD18(a1);
}

void sub_1009D28F4(_QWORD *a1)
{
  *a1 = off_102163640;
  sub_100261F44((uint64_t)(a1 + 5));
  sub_1009BAD18(a1);
  operator delete();
}

void sub_1009D2938(id a1)
{
  qword_10229FD68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accel");
}

void sub_1009D2F2C(uint64_t a1, void *a2)
{
  NSObject *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  NSObject *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  const __CFString *v43;
  const __CFString *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  const __CFString *v60;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;
  const __CFString *v64;
  const __CFString *v65;
  const __CFString *v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  const __CFString *v70;
  const char *v71;
  uint8_t *v72;
  const char *v73;
  uint8_t *v74;
  uint64_t v75;
  __int16 v76;
  __int128 v77;
  id v78;
  __int128 v79;
  _QWORD v80[14];
  _QWORD v81[14];
  uint8_t buf[4];
  NSDictionary *v83;
  _QWORD v84[14];
  _QWORD v85[14];

  v78 = a2;
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102163758);
  v4 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    v84[0] = CFSTR("idle_time_both_in_ear_trcy");
    v5 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v5)
      v6 = v5;
    else
      v6 = CFSTR("<MISSING>");
    v85[0] = v6;
    v84[1] = CFSTR("idle_time_trcy_l");
    v7 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v7)
      v8 = v7;
    else
      v8 = CFSTR("<MISSING>");
    v85[1] = v8;
    v84[2] = CFSTR("idle_time_trcy_r");
    v9 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v9)
      v10 = v9;
    else
      v10 = CFSTR("<MISSING>");
    v85[2] = v10;
    v84[3] = CFSTR("total_time_in_connect_session");
    v11 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v11)
      v12 = v11;
    else
      v12 = CFSTR("<MISSING>");
    v85[3] = v12;
    v84[4] = CFSTR("serial_number_left");
    v13 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v13)
      v14 = v13;
    else
      v14 = CFSTR("<MISSING>");
    v85[4] = v14;
    v84[5] = CFSTR("serial_number_right");
    v15 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v15)
      v16 = v15;
    else
      v16 = CFSTR("<MISSING>");
    v85[5] = v16;
    v84[6] = CFSTR("serial_number_system");
    v17 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v17)
      v18 = v17;
    else
      v18 = CFSTR("<MISSING>");
    v85[6] = v18;
    v84[7] = CFSTR("case_charging_cycle");
    v19 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v19)
      v20 = v19;
    else
      v20 = CFSTR("<MISSING>");
    v85[7] = v20;
    v84[8] = CFSTR("bud_daily_charging_soc_delta_r");
    v21 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v21)
      v22 = v21;
    else
      v22 = CFSTR("<MISSING>");
    v85[8] = v22;
    v84[9] = CFSTR("bud_daily_charging_soc_delta_l");
    v23 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v23)
      v24 = v23;
    else
      v24 = CFSTR("<MISSING>");
    v85[9] = v24;
    v84[10] = CFSTR("time_out_of_ear_both_incase");
    v25 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v25)
      v26 = v25;
    else
      v26 = CFSTR("<MISSING>");
    v85[10] = v26;
    v84[11] = CFSTR("bud_mileage_l");
    v27 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v27)
      v28 = v27;
    else
      v28 = CFSTR("<MISSING>");
    v85[11] = v28;
    v84[12] = CFSTR("bud_mileage_r");
    v29 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v29)
      v30 = v29;
    else
      v30 = CFSTR("<MISSING>");
    v85[12] = v30;
    v84[13] = CFSTR("timestamp_received_on_companion");
    v31 = (const __CFString *)objc_msgSend(a2, "objectForKeyedSubscript:");
    if (v31)
      v32 = v31;
    else
      v32 = CFSTR("<MISSING>");
    v85[13] = v32;
    *(_DWORD *)buf = 138477827;
    v83 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v85, v84, 14);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Received metrics. Sending to client, abridged: %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102163758);
    v42 = qword_10229FD88;
    v80[0] = CFSTR("idle_time_both_in_ear_trcy");
    v43 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v43)
      v44 = v43;
    else
      v44 = CFSTR("<MISSING>");
    v81[0] = v44;
    v80[1] = CFSTR("idle_time_trcy_l");
    v45 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v45)
      v46 = v45;
    else
      v46 = CFSTR("<MISSING>");
    v81[1] = v46;
    v80[2] = CFSTR("idle_time_trcy_r");
    v47 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v47)
      v48 = v47;
    else
      v48 = CFSTR("<MISSING>");
    v81[2] = v48;
    v80[3] = CFSTR("total_time_in_connect_session");
    v49 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v49)
      v50 = v49;
    else
      v50 = CFSTR("<MISSING>");
    v81[3] = v50;
    v80[4] = CFSTR("serial_number_left");
    v51 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v51)
      v52 = v51;
    else
      v52 = CFSTR("<MISSING>");
    v81[4] = v52;
    v80[5] = CFSTR("serial_number_right");
    v53 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v53)
      v54 = v53;
    else
      v54 = CFSTR("<MISSING>");
    v81[5] = v54;
    v80[6] = CFSTR("serial_number_system");
    v55 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v55)
      v56 = v55;
    else
      v56 = CFSTR("<MISSING>");
    v81[6] = v56;
    v80[7] = CFSTR("case_charging_cycle");
    v57 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v57)
      v58 = v57;
    else
      v58 = CFSTR("<MISSING>");
    v81[7] = v58;
    v80[8] = CFSTR("bud_daily_charging_soc_delta_r");
    v59 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v59)
      v60 = v59;
    else
      v60 = CFSTR("<MISSING>");
    v81[8] = v60;
    v80[9] = CFSTR("bud_daily_charging_soc_delta_l");
    v61 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v61)
      v62 = v61;
    else
      v62 = CFSTR("<MISSING>");
    v81[9] = v62;
    v80[10] = CFSTR("time_out_of_ear_both_incase");
    v63 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v63)
      v64 = v63;
    else
      v64 = CFSTR("<MISSING>");
    v81[10] = v64;
    v80[11] = CFSTR("bud_mileage_l");
    v65 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v65)
      v66 = v65;
    else
      v66 = CFSTR("<MISSING>");
    v81[11] = v66;
    v80[12] = CFSTR("bud_mileage_r");
    v67 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v67)
      v68 = v67;
    else
      v68 = CFSTR("<MISSING>");
    v81[12] = v68;
    v80[13] = CFSTR("timestamp_received_on_companion");
    v69 = (const __CFString *)objc_msgSend(v78, "objectForKeyedSubscript:");
    if (v69)
      v70 = v69;
    else
      v70 = CFSTR("<MISSING>");
    v81[13] = v70;
    LODWORD(v79) = 138477827;
    *(_QWORD *)((char *)&v79 + 4) = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v81, v80, 14);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "[HeadphoneUsage] Received metrics. Sending to client, abridged: %{private}@", &v79, 12);
    v72 = (uint8_t *)v71;
    sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryStatsSubscription::onUsageMetricsEvent(NSDictionary *)", "%s\n", v71);
    if (v72 != buf)
      free(v72);
  }
  sub_1009D4CE8("kCLConnectionMessageAudioAccessoryUsageMetricsUpdate", &v78, &v79);
  v33 = *(_QWORD *)(a1 + 8);
  if (v33)
  {
    v77 = v79;
    if (*((_QWORD *)&v79 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    CLConnection::sendMessage(v33);
    if (*((_QWORD *)&v77 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v77 + 1) + 16))(*((_QWORD *)&v77 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v77 + 1));
      }
    }
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102163758);
    v38 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "[HeadphoneUsage] #warning, connection invalid, unable to send usage message", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102163758);
      v76 = 0;
      LODWORD(v75) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[HeadphoneUsage] #warning, connection invalid, unable to send usage message", &v76, v75);
      v74 = (uint8_t *)v73;
      sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryStatsSubscription::onUsageMetricsEvent(NSDictionary *)", "%s\n", v73);
      if (v74 != buf)
        free(v74);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1009D36E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009D3948(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void **v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _QWORD v13[5];
  _BYTE buf[12];
  char v15;
  int v16;
  _BYTE *v17;
  void *__p[2];
  char v19;

  *a1 = &off_1021636D8;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = a3;
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102163758);
  v4 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    v5 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription - CLAudioAccessoryStatsSubscription %s", buf, 0xCu);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102163758);
    v9 = qword_10229FD88;
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
    if (v15 >= 0)
      v10 = buf;
    else
      v10 = *(_BYTE **)buf;
    v16 = 136315138;
    v17 = v10;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "[HeadphoneUsage] Subscription - CLAudioAccessoryStatsSubscription %s", (const char *)&v16);
    v12 = v11;
    if (v15 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "CLAudioAccessoryStatsSubscription::CLAudioAccessoryStatsSubscription(CLConnection *, id<CLIntersiloUniverse>)", "%s\n", v12);
    if (v12 != (char *)__p)
      free(v12);
  }
  a1[3] = -[CLAudioAccessoryStatsSubscriptionClient initWithSubscription:]([CLAudioAccessoryStatsSubscriptionClient alloc], "initWithSubscription:", a1);
  v6 = objc_msgSend(objc_msgSend((id)a1[2], "vendor"), "proxyForService:", CFSTR("CLAudioAccessoryService"));
  a1[4] = v6;
  objc_msgSend(v6, "registerDelegate:inSilo:", a1[3], objc_msgSend((id)a1[2], "silo"));
  v7 = a1[1];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1009D3C48;
  v13[3] = &unk_10213D510;
  v13[4] = a1;
  CLConnection::setDefaultMessageHandler(v7, v13);
  CLConnection::setInterruptionHandler(a1[1], &stru_102163700);
  CLConnection::setDisconnectionHandler(a1[1], &stru_102163720);
  return a1;
}

void sub_1009D3C28(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10008ABA0(v1);
  _Unwind_Resume(a1);
}

void sub_1009D3C48(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int16 v15[8];
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102163758);
  v4 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription - defaultMessageHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102163758);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[HeadphoneUsage] Subscription - defaultMessageHandler", v15, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "CLAudioAccessoryStatsSubscription::CLAudioAccessoryStatsSubscription(CLConnection *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v5 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v13);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1009D3E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1009D3E64(id a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102163758);
  v1 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription - interruptionHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102163758);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[HeadphoneUsage] Subscription - interruptionHandler", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "CLAudioAccessoryStatsSubscription::CLAudioAccessoryStatsSubscription(CLConnection *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

void sub_1009D3FE8(id a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102163758);
  v1 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription - disconnectionHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102163758);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[HeadphoneUsage] Subscription - disconnectionHandler", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "CLAudioAccessoryStatsSubscription::CLAudioAccessoryStatsSubscription(CLConnection *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

_QWORD *sub_1009D4170(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1021636D8;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      objc_msgSend(v2, "unregisterForUsageMetricsUpdates:");
      v2 = *(void **)(a1 + 32);
    }

    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(a1 + 24) = 0;
  }
  return sub_10008ABA0((_QWORD *)a1);
}

void sub_1009D41DC(uint64_t a1)
{
  sub_1009D4170(a1);
  operator delete();
}

void sub_1009D4200(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char isEntitled;
  char v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  const char *v36;
  char *v37;
  const char *v38;
  char *v39;
  const char *v40;
  char *v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  _WORD v48[8];
  uint64_t v49;
  std::__shared_weak_count *v50;
  NSErrorUserInfoKey v51;
  const __CFString *v52;
  NSErrorUserInfoKey v53;
  const __CFString *v54;
  NSErrorUserInfoKey v55;
  const __CFString *v56;
  char v57[16];
  _BYTE buf[12];
  char v59;

  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102163758);
  v4 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
  {
    v5 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v5 + 23) >= 0)
      v6 = v5;
    else
      v6 = (uint64_t *)*v5;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HeadphoneUsage] Client message received,name:%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102163758);
    v33 = qword_10229FD88;
    v34 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v34 + 23) >= 0)
      v35 = v34;
    else
      v35 = (uint64_t *)*v34;
    *(_DWORD *)v57 = 136315138;
    *(_QWORD *)&v57[4] = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 1, "[HeadphoneUsage] Client message received,name:%s", v57);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v7 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(buf, "com.apple.bluetooth.system");
  isEntitled = CLConnection::isEntitled(v7, buf);
  v9 = isEntitled;
  if (v59 < 0)
  {
    operator delete(*(void **)buf);
    if ((v9 & 1) != 0)
      goto LABEL_11;
LABEL_16:
    v55 = NSLocalizedDescriptionKey;
    v56 = CFSTR("Client missing necessary entitlement.");
    *(_QWORD *)v57 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 110, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1));
    v12 = *(_QWORD *)(a1 + 8);
    sub_1009D4C28("kCLConnectionMessageAudioAccessoryUsageMetricsError", v57, &v49);
    CLConnection::sendMessage(v12);
    v13 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102163758);
    v16 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription: Client not entitled.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102163758);
      v48[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[HeadphoneUsage] Subscription: Client not entitled.", v48, 2);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    return;
  }
  if ((isEntitled & 1) == 0)
    goto LABEL_16;
LABEL_11:
  if (!*a2)
    goto LABEL_33;
  v10 = (_QWORD *)CLConnectionMessage::name(*a2);
  v11 = *((char *)v10 + 23);
  if (v11 < 0)
  {
    if (v10[1] != 58)
      goto LABEL_33;
    v10 = (_QWORD *)*v10;
  }
  else if (v11 != 58)
  {
LABEL_33:
    v51 = NSLocalizedDescriptionKey;
    v52 = CFSTR("Received invalid message from client");
    *(_QWORD *)buf = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 107, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1));
    v19 = *(_QWORD *)(a1 + 8);
    sub_1009D4C28("kCLConnectionMessageAudioAccessoryUsageMetricsError", buf, &v44);
    CLConnection::sendMessage(v19);
    v20 = v45;
    if (v45)
    {
      v21 = (unint64_t *)&v45->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    return;
  }
  if (memcmp(v10, "kCLConnectionMessageAudioAccessoryUsageMetricsSubscription", 0x3AuLL))
    goto LABEL_33;
  v23 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageSubscribeKey"));
  v25 = objc_opt_class(NSNumber, v24);
  if ((objc_opt_isKindOfClass(v23, v25) & 1) != 0)
  {
    if (objc_msgSend(v23, "isEqualToNumber:", &__kCFBooleanTrue))
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102163758);
      v26 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription: Received request for audio accessory usage metrics.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102163758);
        *(_WORD *)v57 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[HeadphoneUsage] Subscription: Received request for audio accessory usage metrics.", v57, 2);
        v41 = (char *)v40;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
      objc_msgSend(*(id *)(a1 + 32), "registerForUsageMetricsUpdates:", *(_QWORD *)(a1 + 24));
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102163758);
      v32 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription: Received unregistration request for audio accessory usage metrics.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102163758);
        *(_WORD *)v57 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[HeadphoneUsage] Subscription: Received unregistration request for audio accessory usage metrics.", v57, 2);
        v43 = (char *)v42;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v42);
        if (v43 != buf)
          free(v43);
      }
      objc_msgSend(*(id *)(a1 + 32), "unregisterForUsageMetricsUpdates:", *(_QWORD *)(a1 + 24));
    }
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102163758);
    v27 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Subscription: Received malformed subscription key %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102163758);
      *(_DWORD *)v57 = 138412290;
      *(_QWORD *)&v57[4] = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] Subscription: Received malformed subscription key %@", v57, 12);
      v39 = (char *)v38;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    v28 = *(_QWORD *)(a1 + 8);
    v53 = NSLocalizedDescriptionKey;
    v54 = CFSTR("Received invalid subscription message from client");
    *(_QWORD *)buf = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 107, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1));
    sub_1009D4C88("kCLConnectionMessageAudioAccessoryUsageMetricsError", buf, &v46);
    CLConnection::sendMessage(v28);
    v29 = v47;
    if (v47)
    {
      v30 = (unint64_t *)&v47->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "unregisterForUsageMetricsUpdates:", *(_QWORD *)(a1 + 24));
  }
}

void sub_1009D4BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_100261F44((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1009D4BFC(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

_QWORD *sub_1009D4C28@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1009D4C74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009D4C88@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1009D4CD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009D4CE8@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1009D4D34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1009D4D48(uint64_t a1)
{
  sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxInputHistory (uuid, startTime, mets, metSource, hr, hrConfidence, gradeType, grade, gps, strideCal, workoutType, cadence, pace, stroller, hrTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
}

void sub_1009D50C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D50EC(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1009D51A8(a1, "CLVO2MaxInputCache", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_102163788;
  *(_QWORD *)(a1 + 72) = off_102163840;
  *(_BYTE *)(a1 + 416) = 0;
  sub_1009D6A74(a1);
  return a1;
}

void sub_1009D517C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_1009D5608(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1009D51A8(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_102163C70;
  *(_QWORD *)(a1 + 72) = off_102163D18;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102163C70;
  *(_QWORD *)(a1 + 72) = off_102163D18;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 256) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 272) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 336) = 12000;
  *(_QWORD *)(a1 + 344) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 352));
  *(_QWORD *)(a1 + 352) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 256) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_1009D555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[43] = off_102138DA8;
  sub_100427950(v27);
  sub_10050C79C(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1009D5600()
{
  JUMPOUT(0x1009D55E0);
}

_QWORD *sub_1009D5608(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102163D18;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102163C70;
  a1[43] = off_102138DA8;
  sub_100427950(a1 + 44);
  sub_10050C79C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1009D5688(uint64_t a1)
{
  return sub_1009D5608((_QWORD *)(a1 - 72));
}

void sub_1009D5690(_QWORD *a1)
{
  sub_1009D5608(a1);
  operator delete();
}

void sub_1009D56B4(uint64_t a1)
{
  sub_1009D5608((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1009D56DC(uint64_t a1, const unsigned __int8 *a2, _QWORD *a3)
{
  uuid_string_t out;

  a3[1] = *a3;
  if (sub_10008950C(a1 + 72))
  {
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxInputHistory WHERE uuid = ?");
  }
  return 109;
}

void sub_1009D5934(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_1009D5960(uint64_t a1, uint64_t *a2, char **a3)
{
  int i;
  char *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  a3[1] = *a3;
  sub_10001E638(*(_QWORD *)(a1 + 80));
  *(_QWORD *)&v37 = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)&v38 = 0xFFEFFFFFFFFFFFFFLL;
  for (i = sub_1009D68B8(a2, (uint64_t)&v35); !i; i = sub_1009D68B8(a2, (uint64_t)&v35))
  {
    v7 = a3[1];
    v8 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v8)
    {
      v15 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a3) >> 4);
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) > 0x249249249249249)
        sub_100259694();
      v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - (_QWORD)*a3) >> 4);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x124924924924924)
        v18 = 0x249249249249249;
      else
        v18 = v16;
      if (v18)
        v19 = (char *)sub_1002A7588((uint64_t)(a3 + 2), v18);
      else
        v19 = 0;
      v20 = &v19[112 * v15];
      v21 = v35;
      v22 = v37;
      *((_OWORD *)v20 + 1) = v36;
      *((_OWORD *)v20 + 2) = v22;
      *(_OWORD *)v20 = v21;
      v23 = v38;
      v24 = v39;
      v25 = v41;
      *((_OWORD *)v20 + 5) = v40;
      *((_OWORD *)v20 + 6) = v25;
      *((_OWORD *)v20 + 3) = v23;
      *((_OWORD *)v20 + 4) = v24;
      v27 = *a3;
      v26 = a3[1];
      v28 = v20;
      if (v26 != *a3)
      {
        do
        {
          v29 = *((_OWORD *)v26 - 7);
          v30 = *((_OWORD *)v26 - 5);
          *((_OWORD *)v28 - 6) = *((_OWORD *)v26 - 6);
          *((_OWORD *)v28 - 5) = v30;
          *((_OWORD *)v28 - 7) = v29;
          v31 = *((_OWORD *)v26 - 4);
          v32 = *((_OWORD *)v26 - 3);
          v33 = *((_OWORD *)v26 - 2);
          *(_OWORD *)(v28 - 23) = *(_OWORD *)(v26 - 23);
          *((_OWORD *)v28 - 3) = v32;
          *((_OWORD *)v28 - 2) = v33;
          *((_OWORD *)v28 - 4) = v31;
          v28 -= 112;
          v26 -= 112;
        }
        while (v26 != v27);
        v26 = *a3;
      }
      v14 = v20 + 112;
      *a3 = v28;
      a3[1] = v20 + 112;
      a3[2] = &v19[112 * v18];
      if (v26)
        operator delete(v26);
    }
    else
    {
      v9 = v35;
      v10 = v37;
      *((_OWORD *)v7 + 1) = v36;
      *((_OWORD *)v7 + 2) = v10;
      *(_OWORD *)v7 = v9;
      v11 = v38;
      v12 = v39;
      v13 = v41;
      *((_OWORD *)v7 + 5) = v40;
      *((_OWORD *)v7 + 6) = v13;
      *((_OWORD *)v7 + 3) = v11;
      *((_OWORD *)v7 + 4) = v12;
      v14 = v7 + 112;
    }
    a3[1] = v14;
  }
  sub_10001E99C(*(_QWORD *)(a1 + 80));
  return i != 2;
}

uint64_t sub_1009D5BA4(uint64_t a1, _QWORD *a2)
{
  CFAbsoluteTimeGetCurrent();
  return sub_1009D5BD0(a1, a2);
}

uint64_t sub_1009D5BD0(uint64_t a1, _QWORD *a2)
{
  if (*a2 != a2[1] && sub_10008950C(a1 + 72))
  {
    if (!*(_BYTE *)(a1 + 416))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE from VO2MaxInputHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_1009D60F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D6140(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a1 - 72;
  CFAbsoluteTimeGetCurrent();
  return sub_1009D5BD0(v3, a2);
}

void sub_1009D616C(uint64_t a1)
{
  double Current;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  int *v6;
  int v7;
  double v8;
  int buf;
  CFAbsoluteTime buf_4;

  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021638F0);
  v3 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    buf = 134349056;
    buf_4 = CFAbsoluteTimeGetCurrent() - Current;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Completed fetch of input record count; duration: %{public}f",
      (uint8_t *)&buf,
      0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021638F0);
    v4 = qword_10229FEC8;
    v7 = 134349056;
    v8 = CFAbsoluteTimeGetCurrent() - Current;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v4, 2, "Completed fetch of input record count; duration: %{public}f",
      &v7,
      12);
    v6 = (int *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxInputCache::trimTableIfExceedingMaxRecordCount()", "%s\n", v5);
    if (v6 != &buf)
      free(v6);
  }
  if (*(int *)(a1 + 132) >= 513282)
  {
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxInputHistory WHERE uuid IN (SELECT uuid FROM VO2MaxInputHistory ORDER BY startTime ASC LIMIT ?)");
  }
}

void sub_1009D67A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D67EC(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(id) FROM VO2MaxInputHistory");
  return 0xFFFFFFFFLL;
}

void sub_1009D688C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D68B0(uint64_t a1)
{
  return sub_1009D67EC(a1 - 72);
}

uint64_t sub_1009D68B8(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  const unsigned __int8 *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  float v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  float v14;
  sqlite3_stmt *v15;
  float v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  double v26;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int64(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v8 = sqlite3_column_text(v7, 1);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 8));
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v9, 2);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v11 = sqlite3_column_double(v10, 3);
  *(float *)(a2 + 24) = v11;
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 76) = sqlite3_column_int(v12, 4);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v14 = sqlite3_column_double(v13, 5);
  *(float *)(a2 + 40) = v14;
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v16 = sqlite3_column_double(v15, 6);
  *(float *)(a2 + 44) = v16;
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v17, 7);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v18, 8);
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 72) = sqlite3_column_int(v19, 9) != 0;
  v20 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 73) = sqlite3_column_int(v20, 10) != 0;
  v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 80) = sqlite3_column_int(v21, 11);
  v22 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v22, 12);
  v23 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v23, 13);
  v24 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 104) = sqlite3_column_int(v24, 14) != 0;
  v25 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v26 = sqlite3_column_double(v25, 15);
  result = 0;
  *(double *)(a2 + 48) = v26;
  return result;
}

uint64_t sub_1009D6A74(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_1009D6AE4(a1);
    sub_100634364(*(_QWORD *)(a1 + 80), "VO2MaxInputHistory", (const char **)&off_102163910, (const std::string::value_type **)&off_1022A6360, 0);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    *(_DWORD *)(a1 + 132) = result;
    *(_BYTE *)(a1 + 416) = 1;
  }
  return result;
}

BOOL sub_1009D6AE4(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "VO2MaxInputHistory");
  if (result)
  {
    v3 = "workoutType";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "VO2MaxInputHistory", (uint64_t)"workoutType", (uint64_t)&v3);
  }
  return result;
}

void sub_1009D6ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  if (a21 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a23);
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  sub_1018B38B4((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_1009D6F68(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxInputHistory");
  return result;
}

void sub_1009D7000(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D7020(uint64_t a1)
{
  return sub_1009D6F68(a1 - 72);
}

uint64_t sub_1009D7030()
{
  return 0;
}

uint64_t sub_1009D7038()
{
  return 2;
}

uint64_t sub_1009D7040(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102163D58);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102163D58);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_1009D81D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

void sub_1009D84F8(uint64_t a1)
{
  sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(name) FROM sqlite_master WHERE type='index' AND name = 'VO2MaxInputHistoryUuidIndex'");
}

void sub_1009D896C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D89C0(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxInputHistory");
  return result;
}

void sub_1009D8A3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D8A5C(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxInputHistory ORDER BY rowid DESC LIMIT 1");
  return 109;
}

void sub_1009D8B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D8B7C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  __int128 v13;
  uint8_t buf[1640];

  if ((sub_10008950C(a1 + 9) & 1) != 0)
  {
    if (*a2)
      sub_1000CDA68(a1[10], "SELECT * FROM VO2MaxInputHistory WHERE id >= ? ORDER BY id ASC");
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021638D0);
    v8 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Non-existent query record, returning all records.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021638D0);
      LOWORD(v13) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Non-existent query record, returning all records.", &v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "CMError CLVO2MaxInputCache::queryVO2MaxInputSince(const VO2MaxInput, std::vector<VO2MaxInput> &) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, a3);
    return 100;
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021638D0);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "History not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021638D0);
      LOWORD(v13) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "History not accessible", &v13, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxInputCache::queryVO2MaxInputSince(const VO2MaxInput, std::vector<VO2MaxInput> &) const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    return 109;
  }
}

void sub_1009D9180(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D91B0(uint64_t a1, const unsigned __int8 *a2, _QWORD *a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  char out[48];
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a3[1] = *a3;
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxInputHistory WHERE uuid = ?");
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021638D0);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "VO2MaxInputHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021638D0);
    *(_WORD *)out = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2MaxInputHistory, DB not accessible", out, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxInputCache::queryBySessionId(unsigned char *, std::vector<VO2MaxInput> &) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return 109;
}

void sub_1009D9558(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D9584(uint64_t a1, const unsigned __int8 *a2)
{
  char out[40];

  if (sub_10008950C(a1 + 72))
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) from VO2MaxInputHistory WHERE uuid = ?");
  }
  return 0xFFFFFFFFLL;
}

void sub_1009D968C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D96B8(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  char out[48];
  uint8_t buf[1640];

  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxInputHistory WHERE uuid = ?");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021638F0);
  v4 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Unable to save fetched input data from CloudKit. Device is locked and we are unable to open the database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021638F0);
    *(_WORD *)out = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "Unable to save fetched input data from CloudKit. Device is locked and we are unable to open the database", out, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVO2MaxInputCache::saveFetchedSession(unsigned char *, NSData *, const std::vector<VO2MaxInput> &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 0;
}

void sub_1009DA090(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (!v2)
  {
LABEL_4:
    if (!v1)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (!v1)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  goto LABEL_6;
}

_QWORD *sub_1009DA140@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxInputHistory");
}

_QWORD *sub_1009DA150@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxInputHistory");
}

uint64_t sub_1009DA160(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_101912120(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1009DA530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 201) < 0)
    operator delete(*(void **)(v4 - 224));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009DA5A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102163D58);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102163D58);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102163D58);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1009DAB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1009DABC0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  result = (__n128)a3[3];
  v6 = a3[4];
  v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(__int128 *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

id *sub_1009DABEC(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  id v36[2];
  int v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  uint64_t v44;
  _BYTE v45[32];
  double v46;
  unint64_t v47;

  v36[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v36[1] = 0;
  if (*(double *)(a1 + 256) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v36);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v46 = -1.79769313e308;
  v47 = 0xFFEFFFFFFFFFFFFFLL;
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v45);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102163D58);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102163D58);
        LOWORD(v37) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v37, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 4);
    v8 = v46;
    v9 = v7 - v46;
    if (v7 - v46 < 0.0)
      v9 = -(v7 - v46);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102163D58);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 4);
        *(_DWORD *)buf = 134349312;
        v42 = v46;
        v43 = 2050;
        v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102163D58);
        v27 = *((_QWORD *)a2 + 4);
        v37 = 134349312;
        v38 = v46;
        v39 = 2050;
        v40 = v27;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v37, 22);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 4);
      v8 = v46;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102163D58);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 4);
          *(_DWORD *)buf = 134217984;
          v42 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102163D58);
          v30 = *((double *)a2 + 4);
          v37 = 134217984;
          v38 = v30;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v37));
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v35 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_102163D58);
        v18 = v35;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v42 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102163D58);
        v37 = 134217984;
        v38 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v37));
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v45, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v21;
  v23 = a2[3];
  v24 = a2[4];
  v25 = a2[5];
  *(_OWORD *)(a1 + 313) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 304) = v25;
  *(_OWORD *)(a1 + 272) = v23;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v36);
}

void sub_1009DB354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009DB380(uint64_t a1)
{
  return sub_1009DA5A0(a1 - 72);
}

void sub_1009DB388(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1009DB3B4(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_1009DB3E0(id a1)
{
  qword_1022A0018 = (uint64_t)os_log_create("com.apple.locationd.Position", "Spring");
}

uint64_t sub_1009DB40C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_10191228C(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1009DB794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009DB804(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019123F8(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1009DBA64(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101912564(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1009DBC9C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019126D0(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1009DBEC4(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1009DBEF0(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = sub_1005821F4(a1, a2);
  *(_QWORD *)v3 = off_102163D88;
  *(_QWORD *)(v3 + 200) = off_102163DF0;
  sub_100DA368C(v3 + 200, *(unsigned __int8 *)(v3 + 8), 0);
  *(_QWORD *)a1 = off_102163D88;
  *(_QWORD *)(a1 + 200) = off_102163DF0;
  *(_BYTE *)(a1 + 274) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  sub_100B26DC8(a1 + 288);
  sub_100E7A280(a1 + 1112, a1 + 288);
  return a1;
}

void sub_1009DBF6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = v3;
  *v4 = off_102172790;
  sub_100DA36BC(v2);
  sub_100582BD8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009DBFB0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_102163D88;
  a1[25] = off_102163DF0;
  v2 = a1 + 25;
  sub_100DA39A4((uint64_t)(a1 + 25));
  sub_100DA3700(v2);
  sub_100DA374C(v2);
  a1[36] = off_102172790;
  sub_100DA36BC(v2);
  return sub_100582BD8((uint64_t)a1);
}

uint64_t sub_1009DC020(uint64_t a1)
{
  return sub_1009DBFB0((_QWORD *)(a1 - 200));
}

void sub_1009DC028(_QWORD *a1)
{
  sub_1009DBFB0(a1);
  operator delete();
}

void sub_1009DC04C(uint64_t a1)
{
  sub_1009DBFB0((_QWORD *)(a1 - 200));
  operator delete();
}

uint64_t sub_1009DC074(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  sub_100E7A300(a1 + 1112);
  sub_100B26DCC(a1 + 288);
  sub_100DA39D4(a1 + 200);
  sub_100DA3814(a1 + 200);
  sub_100DA38F0(a1 + 200);
  v3 = 2;
  result = sub_1005837B8(a1, &v3);
  *(_BYTE *)(a1 + 274) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  return result;
}

_QWORD *sub_1009DC0E8(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 200);
  sub_100DA39A4(a1 + 200);
  sub_100DA3700(v1);
  return sub_100DA374C(v1);
}

void sub_1009DC118(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102163E58);
  v4 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Application state changed, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102163E58);
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Application state changed, %d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionService6AxisAP::applicationStateChanged(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(a1 + 274) = a2 ^ 1;
}

void sub_1009DC2CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  float v5;
  uint64_t v6;
  float32x4_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  _DWORD v23[17];
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  float32x2_t v28;
  float v29;
  int v30;
  double v31;
  uint8_t buf[4];
  double v33;

  v4 = (unint64_t)(*(double *)a2 * 1000000.0);
  v5 = *(float *)(a2 + 16) * 0.017453;
  v28 = vmul_f32(*(float32x2_t *)(a2 + 8), (float32x2_t)vdup_n_s32(0x3C8EFA35u));
  v29 = v5;
  v6 = a1 + 1112;
  sub_100E7B07C(a1 + 1112, &v28, v4);
  sub_100B2742C(a1 + 288, &v28, v4);
  *(_OWORD *)v23 = 0uLL;
  v22 = -1.0;
  sub_10012C97C((float32x4_t *)v23, v7);
  memset(&v23[4], 0, 36);
  *(_OWORD *)&v23[13] = xmmword_101BB2F90;
  v24 = 0x1FF00000000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v22 = *(double *)a2;
  if (v23 != (_DWORD *)(a1 + 1124))
    *(_OWORD *)v23 = *(_OWORD *)(a1 + 1124);
  sub_100E7AD28(v6);
  v23[4] = v8;
  v23[5] = v9;
  v23[6] = v10;
  v11 = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)&v23[7] = *(_QWORD *)(v11 + 432);
  v23[9] = *(_DWORD *)(v11 + 440);
  WORD2(v24) = 511;
  *(_OWORD *)&v23[10] = xmmword_101BB2FA0;
  v23[14] = -1082130432;
  if (*(_BYTE *)(v11 + 416) && *(_QWORD *)(v11 + 408) && *(_BYTE *)(a1 + 1122))
    v12 = HIWORD(v24) & 0xFFEF | (16 * *(unsigned __int8 *)(a1 + 252)) | 0x100;
  else
    v12 = HIWORD(v24) & 0xFEEF | (16 * *(unsigned __int8 *)(a1 + 252)) & 0xFEFF;
  HIWORD(v24) = v12;
  v25 = 3;
  v27 = 0;
  v26 = *(_BYTE *)(a2 + 22);
  v13 = *(double *)a2;
  v14 = *(double *)(a1 + 280);
  if (v14 != 0.0)
  {
    v15 = v13 - v14;
    if (v13 - v14 > 0.100000001)
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102163E58);
      v16 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v33 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Large time gap, %lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102163E58);
        v30 = 134217984;
        v31 = v15;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Large time gap, %lf", COERCE_DOUBLE(&v30));
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionService6AxisAP::feedGyroData(const CLGyro::Sample *)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      if (*(_BYTE *)(a1 + 274))
      {
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102163E58);
        v17 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Reset while backgrounded", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_102163E58);
          LOWORD(v30) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Reset while backgrounded", &v30, 2);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionService6AxisAP::feedGyroData(const CLGyro::Sample *)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        sub_100E7A300(v6);
      }
    }
  }
  *(double *)(a1 + 280) = v13;
  sub_100582E8C(a1, (uint64_t)&v22);
}

void sub_1009DC744(uint64_t a1, uint64_t a2)
{
  sub_1009DC2CC(a1 - 200, a2);
}

float sub_1009DC74C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v3 = *((_DWORD *)a2 + 2);
  v8 = *a2;
  v9 = v3;
  v4 = *((_DWORD *)a3 + 2);
  v6 = *a3;
  v7 = v4;
  return sub_100B27718(a1 + 288, &v8, (uint64_t)&v6);
}

float sub_1009DC794(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v3 = *((_DWORD *)a2 + 2);
  v8 = *a2;
  v9 = v3;
  v4 = *((_DWORD *)a3 + 2);
  v6 = *a3;
  v7 = v4;
  return sub_100B27718(a1 + 88, &v8, (uint64_t)&v6);
}

uint64_t sub_1009DC7DC(float32x2_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  float32x2_t v6;
  int v7;

  v3 = (unint64_t)(*(double *)a2 * 1000000.0);
  v4 = *(_DWORD *)(a2 + 16);
  v6 = *(float32x2_t *)(a2 + 8);
  v7 = v4;
  sub_100B270C0((uint64_t)&a1[36], &v6, v3);
  return sub_100E7B5A0(a1 + 139, (uint64_t)&v6, v3);
}

uint64_t sub_1009DC840(uint64_t a1, uint64_t a2)
{
  return sub_1009DC7DC((float32x2_t *)(a1 - 200), a2);
}

void sub_1009DC848(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

_QWORD *sub_1009DC874(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1009DC928((uint64_t)a1, "VO2MaxAlertHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102163E88;
  a1[9] = off_102163F40;
  sub_1009DD27C((uint64_t)a1);
  return a1;
}

void sub_1009DC8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_1009DCD7C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1009DC928(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_102164070;
  *(_QWORD *)(a1 + 72) = off_102164118;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102164070;
  *(_QWORD *)(a1 + 72) = off_102164118;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 240) = 12000;
  *(_QWORD *)(a1 + 248) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 256));
  *(_QWORD *)(a1 + 256) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_1009DCCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[31] = off_102138DA8;
  sub_100427950(v27);
  sub_1004A4854(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1009DCD74()
{
  JUMPOUT(0x1009DCD54);
}

_QWORD *sub_1009DCD7C(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102164118;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102164070;
  a1[31] = off_102138DA8;
  sub_100427950(a1 + 32);
  sub_1004A4854(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1009DCDFC(uint64_t a1)
{
  return sub_1009DCD7C((_QWORD *)(a1 - 72));
}

void sub_1009DCE04(_QWORD *a1)
{
  sub_1009DCD7C(a1);
  operator delete();
}

void sub_1009DCE28(uint64_t a1)
{
  sub_1009DCD7C((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1009DCE50(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxAlertHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_1009DCF68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009DCF88(uint64_t a1, uint64_t a2)
{
  return sub_1009DCE50(a1 - 72, a2);
}

uint64_t sub_1009DCF90(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxAlertHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_1009DD10C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009DD134(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  double v8;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v8 = sqlite3_column_double(v7, 1);
  result = 0;
  *(double *)(a2 + 8) = v8;
  return result;
}

uint64_t sub_1009DD1B0(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM VO2MaxAlertHistory");
  return 0xFFFFFFFFLL;
}

void sub_1009DD250(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009DD274(uint64_t a1)
{
  return sub_1009DD1B0(a1 - 72);
}

uint64_t sub_1009DD27C(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_1009DD2D8(a1);
    return sub_100634364(*(_QWORD *)(a1 + 80), "VO2MaxAlertHistory", (const char **)&off_102163FD0, (const std::string::value_type **)&off_1022A6370, 0);
  }
  return result;
}

BOOL sub_1009DD2D8(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "VO2MaxAlertHistory");
  if (result)
  {
    v3 = "startTime";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "VO2MaxAlertHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_1009DD630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  sub_1018B38B4((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_1009DD6CC(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxAlertHistory");
  return result;
}

void sub_1009DD760(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009DD780(uint64_t a1)
{
  return sub_1009DD6CC(a1 - 72);
}

uint64_t sub_1009DD788(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM VO2MaxAlertHistory WHERE startTime > ?");
  }
  return result;
}

void sub_1009DD850(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009DD870(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE VO2MaxAlertHistory SET startTime = startTime + ?");
  return result;
}

void sub_1009DD908(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009DD928(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxAlertHistory (startTime) VALUES (?)");
  return result;
}

void sub_1009DD9C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009DD9E0()
{
  return 0;
}

uint64_t sub_1009DD9E8(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxAlertHistory ORDER BY id DESC LIMIT 1");
  return 2;
}

void sub_1009DDA68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009DDA88(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102164158);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102164158);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_1009DEC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_1009DEF40(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if (SHIBYTE(v16) < 0)
  {
    v1 = v15[1];
    operator delete(v15[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v15);
        v5 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v17);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v16))
  {
    goto LABEL_3;
  }
  sub_10191283C(v4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v15
  v16 = v11;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v19);
  return 2;
}

void sub_1009DF240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1009DF2A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102164158);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102164158);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102164158);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1009DF86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1009DF89C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

id *sub_1009DF8A8(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  char v31[8];
  double v32;
  id v33[2];
  int v34;
  double v35;
  __int16 v36;
  uint64_t v37;
  uint8_t buf[4];
  double v39;
  __int16 v40;
  uint64_t v41;

  v33[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v33[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v33);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, v31);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102164158);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102164158);
        LOWORD(v34) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v34, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = v32;
    v9 = v7 - v32;
    if (v7 - v32 < 0.0)
      v9 = -(v7 - v32);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102164158);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v39 = v32;
        v40 = 2050;
        v41 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102164158);
        v22 = *(_QWORD *)(a2 + 8);
        v34 = 134349312;
        v35 = v32;
        v36 = 2050;
        v37 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v34, 22);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = v32;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102164158);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v39 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102164158);
          v25 = *(double *)(a2 + 8);
          v34 = 134217984;
          v35 = v25;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v34));
          v27 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v30 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_102164158);
        v18 = v30;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v39 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102164158);
        v34 = 134217984;
        v35 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v34));
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v31, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v33);
}

void sub_1009DFFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E0010(uint64_t a1)
{
  return sub_1009DF2A8(a1 - 72);
}

uint64_t sub_1009E0018(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_1019129A8(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1009E02D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E033C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101912B14(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1009E059C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101912C80(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1009E07D4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101912DEC(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1009E09FC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

double sub_1009E0A28(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 260) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = 1.0;
  *(_OWORD *)(a1 + 40) = xmmword_101BAFDC0;
  return result;
}

_QWORD *sub_1009E0A8C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *sub_1009E0AD8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = sub_1009E0B00(a1, a2);
  a1[4] = a3;
  return result;
}

_QWORD *sub_1009E0B00(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_1009E13B4(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1009E0B98(uint64_t a1, float *a2, float *a3, float *a4, double a5)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  int v17;
  double v18;
  float v19;
  float v20;
  uint64_t i;
  float v22;
  unsigned int v23;
  _OWORD v24[2];
  int v25;
  _OWORD v26[2];
  int v27;

  sub_100B63064(a2);
  v13 = sub_100B61F98(a2, v10, v11, v12);
  v15 = v14;
  v17 = v16;
  v18 = atan2((float)((float)(v13 * *(float *)(a1 + 100)) - (float)(*(float *)(a1 + 96) * v15)), (float)((float)(*(float *)(a1 + 100) * v15) + (float)(v13 * *(float *)(a1 + 96))));
  sub_1009E0D0C(a1, a3, a5, v18);
  if (*(_BYTE *)(a1 + 296))
  {
    v19 = a5 - *(double *)(a1 + 88);
    v20 = v19 * 9.8067;
    sub_100B61F90((float *)(a1 + 264), (float *)v24);
    for (i = 0; i != 36; i += 4)
      *(float *)((char *)v24 + i) = v20 * *(float *)((char *)v24 + i);
    v26[0] = v24[0];
    v26[1] = v24[1];
    v27 = v25;
    v22 = sub_1005335A4((uint64_t)v26, a4);
  }
  else
  {
    v23 = 0;
    v22 = 0.0;
  }
  if (*(_BYTE *)(a1 + 240) && fabs(*(double *)(a1 + 200)) <= 0.005)
  {
    if (!*(_BYTE *)(a1 + 260))
      sub_10028DF3C();
    *(float *)(a1 + 248) = v22 + *(float *)(a1 + 248);
    *(float32x2_t *)(a1 + 252) = vadd_f32((float32x2_t)v23, *(float32x2_t *)(a1 + 252));
  }
  *(float *)(a1 + 96) = v13;
  *(float *)(a1 + 100) = v15;
  *(_DWORD *)(a1 + 104) = v17;
  *(double *)(a1 + 88) = a5;
}

double sub_1009E0D0C(uint64_t a1, float *a2, double result, double a4)
{
  double v4;
  double v5;
  double v6;
  float v7;

  v4 = *(double *)(a1 + 88);
  if (v4 >= 0.0)
  {
    v5 = *(double *)(a1 + 136);
    *(double *)(a1 + 128) = *(double *)(a1 + 128) + a4;
    *(double *)(a1 + 136) = v5 + a4 * a4;
    v6 = result - v4 + *(double *)(a1 + 144);
    *(double *)(a1 + 144) = v6;
    v7 = *(float *)(a1 + 156);
    *(float *)(a1 + 152) = *a2 + *(float *)(a1 + 152);
    *(float *)(a1 + 156) = a2[1] + v7;
    *(float *)(a1 + 160) = a2[2] + *(float *)(a1 + 160);
    *(float *)&v6 = (float)((float)(a2[2] * a2[2]) + (float)(a2[1] * a2[1])) + (float)(*a2 * *a2);
    *(float32x2_t *)(a1 + 164) = vadd_f32(*(float32x2_t *)(a1 + 164), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v6, 0));
    *(float *)(a1 + 172) = *(float *)&v6 + *(float *)(a1 + 172);
    result = *(double *)(a1 + 176) + 1.0;
    *(double *)(a1 + 176) = result;
  }
  return result;
}

void sub_1009E0DA8(uint64_t a1, float *a2, float *a3, double a4, uint64_t a5, float *a6)
{
  _BOOL4 v11;
  char v12;
  long double v13;
  double v14;
  uint64_t v15;
  float v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  float *v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[24];
  uint64_t v27;

  v11 = sub_1009E0FB8(a1, a2, a4);
  sub_1009E0B98(a1, a2, a3, a6, a4);
  if (*(double *)(a1 + 48) >= a4)
  {
    v12 = 0;
    if (!v11)
      return;
  }
  else
  {
    v12 = sub_1009E1040(a1, a2, a4);
    if (!v11)
      return;
  }
  if (*(double *)(a1 + 48) < a4)
  {
    v13 = atan2((float)((float)(*(float *)(a1 + 96) * *(float *)(a1 + 112))- (float)(*(float *)(a1 + 108) * *(float *)(a1 + 100))), (float)((float)(*(float *)(a1 + 100) * *(float *)(a1 + 112))+ (float)(*(float *)(a1 + 96) * *(float *)(a1 + 108))));
    v14 = sub_1009E113C((double *)a1);
    if (!*(_BYTE *)(a1 + 260))
      sub_10028DF3C();
    v15 = 0;
    v16 = 0.0;
    do
    {
      v16 = v16 + (float)(*(float *)(a1 + 248 + v15) * *(float *)(a1 + 248 + v15));
      v15 += 4;
    }
    while (v15 != 12);
    v17 = sqrtf(v16);
    v18 = 0.0;
    if ((v12 & 1) == 0)
      v18 = v17 - *(double *)(a1 + 120);
    *(long double *)&v25 = v13;
    *((double *)&v25 + 1) = v18;
    *(double *)v26 = v14;
    *(_OWORD *)&v26[8] = xmmword_101BAFDC0;
    v19 = a4 - *(double *)(a1 + 80);
    *(double *)&v24 = a4;
    *((double *)&v24 + 1) = v19;
    v20 = *(_QWORD *)(a1 + 24);
    if (v20 && *(_QWORD *)(a1 + 32))
    {
      v27 = *(_QWORD *)(a1 + 32);
      (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v20 + 48))(v20, &v27, &v24);
    }
    v21 = *(unsigned __int8 *)(a1 + 240);
    v22 = v25;
    *(_OWORD *)(a1 + 184) = v24;
    *(_OWORD *)(a1 + 200) = v22;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)v26;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)&v26[16];
    if (!v21)
      *(_BYTE *)(a1 + 240) = 1;
    v23 = (float *)(a1 + 56);
    if (*(_BYTE *)(a1 + 72))
    {
      if (v23 != a2)
        *(_OWORD *)v23 = *(_OWORD *)a2;
    }
    else
    {
      *(_OWORD *)v23 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 72) = 1;
    }
    *(_QWORD *)(a1 + 108) = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 104);
    *(double *)(a1 + 120) = v17;
    *(double *)(a1 + 80) = a4;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_QWORD *)(a1 + 176) = 0;
    *(double *)(a1 + 48) = *(double *)(a1 + 40) * ceil(a4 / *(double *)(a1 + 40) + 0.5);
  }
}

BOOL sub_1009E0FB8(uint64_t a1, float *a2, double a3)
{
  double v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  int v12;

  v5 = *(double *)(a1 + 48);
  result = v5 < a3;
  if (!*(_BYTE *)(a1 + 260))
  {
    result = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 256) = 0;
    *(_BYTE *)(a1 + 260) = 1;
  }
  if (v5 < a3 && !*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 72) = 1;
    *(double *)(a1 + 80) = a3;
    sub_100B63064(a2);
    v10 = sub_100B61F98(a2, v7, v8, v9);
    result = 0;
    *(float *)(a1 + 108) = v10;
    *(_DWORD *)(a1 + 112) = v11;
    *(_DWORD *)(a1 + 116) = v12;
  }
  return result;
}

uint64_t sub_1009E1040(uint64_t a1, _OWORD *a2, double a3)
{
  double v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  double v8;
  _OWORD *v9;
  int v11;

  v3 = *(double *)(a1 + 176);
  if (v3 <= 0.0 || *(double *)(a1 + 144) <= 0.0)
    return 0;
  v4 = 0;
  v5 = (float)((float)((float)(*(float *)(a1 + 160) * *(float *)(a1 + 160))
                     + (float)(*(float *)(a1 + 156) * *(float *)(a1 + 156)))
             + (float)(*(float *)(a1 + 152) * *(float *)(a1 + 152)))
     / v3;
  v6 = v3;
  v7 = (float)((float)(*(float *)(a1 + 164) - v5) / v6)
     + (float)((float)((float)(*(float *)(a1 + 168) - v5) / v6) + (float)((float)(*(float *)(a1 + 172) - v5) / v6));
  if (v7 != 0.0)
  {
    v8 = v7;
    if (v8 <= 0.001)
    {
      v9 = (_OWORD *)(a1 + 264);
      if (*(_BYTE *)(a1 + 296))
      {
        if (*(double *)(a1 + 280) >= a3 + -300.0 && *(double *)(a1 + 288) <= v8)
          return 0;
        *v9 = *a2;
        *(double *)(a1 + 280) = a3;
        *(double *)(a1 + 288) = v8;
      }
      else
      {
        *v9 = *a2;
        *(double *)(a1 + 280) = a3;
        *(double *)(a1 + 288) = v8;
        *(_BYTE *)(a1 + 296) = 1;
      }
      v11 = *(unsigned __int8 *)(a1 + 260);
      *(_QWORD *)(a1 + 248) = 0;
      v4 = 1;
      *(_DWORD *)(a1 + 256) = 0;
      if (!v11)
        *(_BYTE *)(a1 + 260) = 1;
    }
  }
  return v4;
}

double sub_1009E113C(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  int v9;
  double v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[4];
  double v14;
  __int16 v15;
  uint64_t v16;

  v1 = a1[22];
  v2 = -1.0;
  if (v1 < 3.0
    || (v3 = a1[18], v3 <= 0.0)
    || (v2 = a1[5] / (v3 / v1) * ((a1[17] - a1[16] * a1[16] / v1) / (v1 + -1.0)), v4 = v2, v2 < 0.00000305))
  {
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_102164178);
    v5 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      v14 = v2;
      v15 = 2050;
      v16 = 0x3EC995D33B7BD711;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#VDR,computeDeltaCourseVar, deltaCourseVar,%{public}.6f,less than threshold,%{public}.6f,using threshold", buf, 0x16u);
    }
    v4 = 0.00000305;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_102164178);
      v9 = 134349312;
      v10 = v2;
      v11 = 2050;
      v12 = 0x3EC995D33B7BD711;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,computeDeltaCourseVar, deltaCourseVar,%{public}.6f,less than threshold,%{public}.6f,using threshold", &v9, 22);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "double CLVDREstimator2DoF::computeDeltaCourseVar() const", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return v4;
}

void sub_1009E1388(id a1)
{
  qword_1022A01A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

_QWORD *sub_1009E13B4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1009E151C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1009E1528(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  char *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  char *v29;
  std::string *v30;
  int v32;
  const char *v33;
  std::string *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _BYTE *v38;
  std::string *v39;
  std::string *v40;
  int v41;
  _BYTE *v42;
  std::string v43;
  _BYTE buf[12];
  char v45;

  v6 = sub_1009E1B98(a1, "CLSensorRecorderDb", a2, a3, 6, 30.0);
  *(_QWORD *)v6 = off_1021641A8;
  *(_QWORD *)(v6 + 72) = off_102164258;
  *(_DWORD *)(v6 + 344) = a4;
  *(_QWORD *)(v6 + 352) = v6 + 352;
  *(_QWORD *)(v6 + 360) = v6 + 352;
  *(_QWORD *)(v6 + 368) = 0;
  *(_QWORD *)(v6 + 376) = 0;
  *(_DWORD *)(v6 + 384) = 0x20000;
  *(_QWORD *)(v6 + 392) = v6 + 352;
  *(_DWORD *)(v6 + 400) = 0;
  if (a4 > 2)
    v7 = "";
  else
    v7 = (&off_102164660)[a4];
  v8 = (std::string *)sub_1015A2E04(buf, v7);
  v9 = std::string::insert(v8, 0, "SensorRecorder");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v43, "Data");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 424) = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 408) = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v45 < 0)
    operator delete(*(void **)buf);
  v13 = *(int *)(a1 + 344);
  if (v13 > 2)
    v14 = "";
  else
    v14 = (&off_102164660)[v13];
  v15 = (std::string *)sub_1015A2E04(buf, v14);
  v16 = std::string::insert(v15, 0, "SensorRecorder");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v43, "Meta");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 448) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 432) = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v45 < 0)
    operator delete(*(void **)buf);
  v20 = sub_100127B9C();
  sub_100081C10(v20, &v43);
  v21 = (int *)(a1 + 384);
  sub_1001E4B84((uint64_t)v43.__r_.__value_.__l.__data_, "SensorRecorderCacheSizeBytes", (_DWORD *)(a1 + 384));
  size = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
  if (v43.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_102164318);
  v25 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
  {
    v26 = *v21;
    LODWORD(v43.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(v43.__r_.__value_.__r.__words[0]) = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "SensorRecorderCacheSizeBytes, %d", (uint8_t *)&v43, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v43, 0x65CuLL);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
    v32 = *v21;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v32;
    _os_log_send_and_compose_impl(2, 0, &v43, 1628, &_mh_execute_header, qword_10229FDB8, 1, "SensorRecorderCacheSizeBytes, %d", buf);
    v34 = (std::string *)v33;
    sub_100512490("Generic", 1, 0, 2, "CLSensorRecorderDb::CLSensorRecorderDb(BOOL, const std::string, CLSensorRecorder_Types::DataType)", "%s\n", v33);
    if (v34 != &v43)
      free(v34);
  }
  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_102164318);
  v27 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
  {
    v28 = *(int *)(a1 + 344);
    v29 = v28 > 2 ? "" : (&off_102164660)[v28];
    sub_1015A2E04(&v43, v29);
    v30 = (v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v43
        : (std::string *)v43.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "SensorRecorderType, %s", buf, 0xCu);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v43, 0x65CuLL);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
    v35 = *(int *)(a1 + 344);
    if (v35 > 2)
      v36 = "";
    else
      v36 = (&off_102164660)[v35];
    v37 = qword_10229FDB8;
    sub_1015A2E04(buf, v36);
    if (v45 >= 0)
      v38 = buf;
    else
      v38 = *(_BYTE **)buf;
    v41 = 136315138;
    v42 = v38;
    _os_log_send_and_compose_impl(2, 0, &v43, 1628, &_mh_execute_header, v37, 1, "SensorRecorderType, %s", (const char *)&v41);
    v40 = v39;
    if (v45 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "CLSensorRecorderDb::CLSensorRecorderDb(BOOL, const std::string, CLSensorRecorder_Types::DataType)", "%s\n", (const char *)v40);
    if (v40 != &v43)
      free(v40);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return a1;
}

void sub_1009E1AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t *v19;
  void **v20;
  void **v21;

  if (*(char *)(v18 + 455) < 0)
    operator delete(*v21);
  if (*(char *)(v18 + 431) < 0)
    operator delete(*v20);
  sub_1009E6AB8(v19);
  sub_1009E200C((_QWORD *)v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E1B98(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_102164558;
  *(_QWORD *)(a1 + 72) = off_102164600;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102164558;
  *(_QWORD *)(a1 + 72) = off_102164600;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 12000;
  *(_QWORD *)(a1 + 272) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 280));
  *(_QWORD *)(a1 + 280) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1009E1F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;

  sub_10187E514((uint64_t)&a19);
  v24[34] = off_10213DEB0;
  sub_100427950(v28);
  sub_100261F44(v27);
  sub_1009E74D4(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1009E2004()
{
  JUMPOUT(0x1009E1FE4);
}

_QWORD *sub_1009E200C(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102164600;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102164558;
  a1[34] = off_10213DEB0;
  sub_100427950(a1 + 35);
  sub_100261F44((uint64_t)(a1 + 31));
  sub_1009E74D4(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1009E2090(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021641A8;
  *(_QWORD *)(a1 + 72) = off_102164258;
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  sub_1009E6AB8((uint64_t *)(a1 + 352));
  return sub_1009E200C((_QWORD *)a1);
}

_QWORD *sub_1009E20F0(uint64_t a1)
{
  return sub_1009E2090(a1 - 72);
}

void sub_1009E20F8(uint64_t a1)
{
  sub_1009E2090(a1);
  operator delete();
}

void sub_1009E211C(uint64_t a1)
{
  sub_1009E2090(a1 - 72);
  operator delete();
}

void sub_1009E2144(uint64_t a1)
{
  char *v2;
  char *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  v2 = (char *)(a1 + 408);
  if (*(char *)(a1 + 431) < 0)
    v2 = *(char **)v2;
  v3 = (char *)(a1 + 432);
  if (*(char *)(a1 + 455) < 0)
    v3 = *(char **)v3;
  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    if (sub_10063D030(*(_QWORD *)(a1 + 80), v2, (uint64_t)"2245.4.99")
      && (sub_10063D030(*(_QWORD *)(a1 + 80), v2, (uint64_t)"") & 1) == 0)
    {
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_102164318);
      v4 = qword_10229FDB8;
      if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Detected incompatible sensor table, purging Sensor Recorder data", buf, 2u);
      }
      v5 = sub_1001BFF7C(115, 0);
      if ((_DWORD)v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_102164318);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 16, "Detected incompatible sensor table, purging Sensor Recorder data", v12, 2);
        v11 = (uint8_t *)v10;
        v5 = sub_100512490("Generic", 1, 0, 0, "virtual void CLSensorRecorderDb::prepareSQLStatements()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      v6 = sub_1009E24D0(v5, v2, *(char **)(a1 + 80));
      sub_1009E24D0(v6, v3, *(char **)(a1 + 80));
    }
    sub_100634364(*(_QWORD *)(a1 + 80), v2, (const char **)&off_102164338, 0, 0);
    sub_100634364(*(_QWORD *)(a1 + 80), v3, (const char **)&off_1021643C8, (const std::string::value_type **)&off_1022A6380, 0);
    sub_1009E2608(a1);
  }
  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_102164318);
  v7 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Device is locked and we are unable to open the database", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 1, "Device is locked and we are unable to open the database", v12, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorRecorderDb::prepareSQLStatements()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

uint64_t sub_1009E24D0(uint64_t a1, char *a2, char *a3)
{
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  void **v17;

  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_102164318);
  v5 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10063448C(a3, (uint64_t)__p);
    if (v9 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2081;
    v15 = a2;
    v16 = 2082;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Deleting Sensor Table\", \"table\":%{private, location:escape_only}s, \"database\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  return sub_10063E3BC((uint64_t)a3, a2);
}

void sub_1009E2608(uint64_t a1)
{
  uint64_t v1;
  std::string *v2;
  __int128 v3;
  char *v4;
  std::string v5;
  void *__p[2];
  int64_t v7;

  v1 = *(_QWORD *)(a1 + 80);
  std::operator+<char>(&v5, "DELETE FROM ", a1 + 432);
  v2 = std::string::append(&v5, " WHERE dataId = 0");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v7 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v7 >= 0)
    v4 = (char *)__p;
  else
    v4 = (char *)__p[0];
  sub_1000CDA68(v1, v4);
}

void sub_1009E26E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1009E2730()
{
  operator new();
}

void sub_1009E297C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E29EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a1 + 112;
  v5 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if ((sub_10008950C(v5) & 1) != 0)
  {
    sub_1009E2AA8((uint64_t *)(a1 + 352), a2);
    v6 = *(_QWORD *)(a1 + 376) + *(unsigned int *)(a2 + 16);
    *(_QWORD *)(a1 + 376) = v6;
    if (v6 > *(int *)(a1 + 384))
      sub_1009E2B1C((uint64_t *)a1);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1009E2A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_1009E2AA8(uint64_t *a1, uint64_t a2)
{
  _OWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  result = operator new(0x38uLL);
  result[1] = *(_OWORD *)a2;
  *((_DWORD *)result + 8) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)result + 5) = *(_QWORD *)(a2 + 24);
  *((_QWORD *)result + 6) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a1;
  *(_QWORD *)result = *a1;
  *((_QWORD *)result + 1) = a1;
  *(_QWORD *)(v8 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

uint64_t *sub_1009E2B1C(uint64_t *result)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSMutableData *v6;
  uint64_t i;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  char *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  std::string v17;
  _BYTE buf[1632];

  if (result[46])
  {
    v1 = result;
    sub_100131938(&v16, (uint64_t)"CLSensorRecorderDb::storeToDb", 0);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
    v2 = qword_10229FDB8;
    if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
    {
      v3 = v1[46];
      v4 = v1[47];
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Flushing to memory. %zu, %zu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_102164318);
      v12 = v1[46];
      v13 = v1[47];
      LODWORD(v17.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 4) = v12;
      WORD2(v17.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 6) = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 1, "Flushing to memory. %zu, %zu", (size_t)&v17, 22);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLSensorRecorderDb::storeToDb(BOOL)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v5 = objc_autoreleasePoolPush();
    v6 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", v1[47]);
    for (i = v1[45]; (uint64_t *)i != v1 + 44; i = *(_QWORD *)(i + 8))
      -[NSMutableData appendBytes:length:](v6, "appendBytes:length:", *(_QWORD *)(i + 40), *(unsigned int *)(i + 32));
    sub_10001E638(v1[10]);
    v8 = v1[10];
    std::operator+<char>(&v17, "INSERT INTO ", v1 + 54);
    v9 = std::string::append(&v17, " (startTime, timestamp, dataId, offset, size, movement) VALUES (?, ?, ?, ?, ?, ?)");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0)
      v11 = buf;
    else
      v11 = *(char **)buf;
    sub_1000CDA68(v8, v11);
  }
  return result;
}

void sub_1009E35C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_100131740(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E36F8(uint64_t a1, char *a2)
{
  uint64_t result;
  uint64_t i;
  char *v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  void **v17;

  result = sub_1000CC4F4((uint64_t)a2);
  if ((_DWORD)result)
  {
    for (i = 0; i != 6; ++i)
    {
      v5 = off_102164298[i];
      result = sub_100635B3C((uint64_t)a2, v5);
      if ((_DWORD)result)
      {
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_102164318);
        v6 = qword_10229FDB8;
        if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10063448C(a2, (uint64_t)__p);
          v7 = __p;
          if (v9 < 0)
            v7 = (void **)__p[0];
          *(_DWORD *)buf = 68289539;
          v11 = 0;
          v12 = 2082;
          v13 = "";
          v14 = 2081;
          v15 = v5;
          v16 = 2082;
          v17 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Deleting Sensor Table\", \"table\":%{private, location:escape_only}s, \"database\":%{public, location:escape_only}s}", buf, 0x26u);
          if (v9 < 0)
            operator delete(__p[0]);
        }
        result = sub_10063E3BC((uint64_t)a2, v5);
      }
    }
  }
  return result;
}

uint64_t sub_1009E3890(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 112;
  v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  v4 = sub_10008950C(v3);
  if ((v4 & 1) != 0)
    sub_1009E36F8(v4, *(char **)(a1 + 80));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1009E3908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E391C(uint64_t *a1)
{
  uint64_t *v2;

  v2 = a1 + 14;
  (*(void (**)(uint64_t *))(a1[14] + 16))(a1 + 14);
  sub_1009E2B1C(a1);
  return (*(uint64_t (**)(uint64_t *))(*v2 + 24))(v2);
}

void sub_1009E3980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E3994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  char *v10;
  NSObject *v11;
  const char *v13;
  void **v14;
  std::string v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  void *__p[2];
  int64_t v20;

  v18 = a3;
  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v16 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v17 = 256;
  if (sub_10008950C(v6))
  {
    v7 = *(_QWORD *)(a1 + 80);
    std::operator+<char>(&v15, "SELECT * FROM ", a1 + 432);
    v8 = std::string::append(&v15, " WHERE id = ?");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v20 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v20 >= 0)
      v10 = (char *)__p;
    else
      v10 = (char *)__p[0];
    sub_1000CDA68(v7, v10);
  }
  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_102164318);
  v11 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Database is inaccessible", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
    LOWORD(v15.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FDB8, 1, "Database is inaccessible", &v15, 2);
    v14 = (void **)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordMeta(uint64_t, CLSensorRecorderSensorMeta *)", "%s\n", v13);
    if (v14 != __p)
      free(v14);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return 0;
}

void sub_1009E3C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_10187E514((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E3CD0(uint64_t *a1, void **a2)
{
  sqlite3_stmt *v4;
  int v5;
  void *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = *a2;
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  objc_msgSend(v6, "setIdentifier:", sqlite3_column_int64(v7, 0));
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  objc_msgSend(v6, "setStartTime:", sqlite3_column_double(v8, 1));
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  objc_msgSend(v6, "setTimestamp:", sqlite3_column_int64(v9, 2));
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  objc_msgSend(v6, "setDataIdentifier:", sqlite3_column_int64(v10, 3));
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  objc_msgSend(v6, "setOffset:", sqlite3_column_int(v11, 4));
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  objc_msgSend(v6, "setDataSize:", sqlite3_column_int(v12, 5));
  return 0;
}

void sub_1009E3DC8(uint64_t a1)
{
  uint64_t v1;
  std::string *v2;
  __int128 v3;
  char *v4;
  std::string v5;
  void *__p[2];
  int64_t v7;

  v1 = *(_QWORD *)(a1 + 80);
  std::operator+<char>(&v5, "SELECT * FROM ", a1 + 408);
  v2 = std::string::append(&v5, " WHERE id = ?");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v7 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v7 >= 0)
    v4 = (char *)__p;
  else
    v4 = (char *)__p[0];
  sub_1000CDA68(v1, v4);
}

void sub_1009E3F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009E3FAC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  const char *v18;
  std::string v19;
  id v20;
  uint64_t v21;
  __int16 v22;
  uint8_t buf[16];
  int64_t v24;

  v7 = a1 + 112;
  v6 = *(_QWORD *)(a1 + 112);
  v8 = a1 + 72;
  v21 = a1 + 112;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
  v22 = 256;
  if ((sub_10008950C(v8) & 1) != 0)
  {
    if (*a2 | a3)
    {
      if (*a2)
        sub_1009E3DC8(a1);
      v20 = objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", *(unsigned int *)(a1 + 344));
      v14 = *(_QWORD *)(a1 + 80);
      std::operator+<char>(&v19, "SELECT * FROM ", a1 + 432);
      v15 = std::string::append(&v19, " WHERE id = ?");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v24 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)buf = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (v24 >= 0)
        v17 = (char *)buf;
      else
        v17 = *(char **)buf;
      sub_1000CDA68(v14, v17);
    }
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
    v12 = qword_10229FDB8;
    if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Invalid query, both data id and meta id are 0", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_18;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
    LOWORD(v19.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 0, "Invalid query, both data id and meta id are 0", &v19, 2);
    v11 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordData(CLSensorRecorderSensorData &, uint64_t) const", "%s\n", v18);
LABEL_26:
    if (v11 != buf)
      free(v11);
    goto LABEL_18;
  }
  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_102164318);
  v9 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Database is inaccessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
    LOWORD(v19.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 1, "Database is inaccessible", &v19, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordData(CLSensorRecorderSensorData &, uint64_t) const", "%s\n", v10);
    goto LABEL_26;
  }
LABEL_18:
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  return 0;
}

void sub_1009E4450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_10187E514((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E44D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  char *v10;
  std::string v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  void *__p[2];
  int64_t v17;

  v15 = a3;
  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v13 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v14 = 256;
  if (sub_10008950C(v6))
  {
    v7 = *(_QWORD *)(a1 + 80);
    std::operator+<char>(&v12, "SELECT * FROM ", a1 + 432);
    v8 = std::string::append(&v12, " WHERE id >= ? ORDER BY id ASC");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v17 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v17 >= 0)
      v10 = (char *)__p;
    else
      v10 = (char *)__p[0];
    sub_1000CDA68(v7, v10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return 0;
}

void sub_1009E4790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  sub_10187E514((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1009E4808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  char *v6;
  std::string v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  int64_t v11;

  v8 = a3;
  v9 = a2;
  v3 = *(_QWORD *)(a1 + 80);
  std::operator+<char>(&v7, "SELECT * FROM ", a1 + 432);
  v4 = std::string::append(&v7, " WHERE startTime >= ? ORDER BY id ASC LIMIT 1");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000CDA68(v3, v6);
}

void sub_1009E4C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009E4D38(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  double v8;
  CFAbsoluteTime Current;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  const char *v14;
  char *v15;
  uint64_t v16;
  double v17;
  CFAbsoluteTime v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  const char *v22;
  char *v23;
  double v24;
  double v25;
  double v26;
  _DWORD v27[7];
  __int16 v28;
  uint64_t v29;
  _BYTE buf[18];
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;

  v5 = a1 + 112;
  v6 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if ((sub_10008950C(v6) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 368))
    {
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_102164318);
      v7 = qword_10229FDB8;
      if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
      {
        v8 = *(double *)(*(_QWORD *)(a1 + 360) + 16);
        Current = CFAbsoluteTimeGetCurrent();
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 16);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v8 < a3;
        *(_WORD *)&buf[8] = 2048;
        *(CFAbsoluteTime *)&buf[10] = Current;
        v31 = 2048;
        v32 = a3;
        v33 = 2048;
        v34 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Non-empty, endTime in memory, %d, current time, %f, endTime, %f, first entry startTime, %f, ", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_102164318);
        v16 = qword_10229FDB8;
        v17 = *(double *)(*(_QWORD *)(a1 + 360) + 16);
        v18 = CFAbsoluteTimeGetCurrent();
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 16);
        v27[0] = 67109888;
        v27[1] = v17 < a3;
        LOWORD(v27[2]) = 2048;
        *(CFAbsoluteTime *)((char *)&v27[2] + 2) = v18;
        HIWORD(v27[4]) = 2048;
        *(double *)&v27[5] = a3;
        v28 = 2048;
        v29 = v19;
        LODWORD(v24) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 1, "Non-empty, endTime in memory, %d, current time, %f, endTime, %f, first entry startTime, %f, ", v27, v24, v25, v26);
        v21 = (char *)v20;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordMetaIds(CFAbsoluteTime, CFAbsoluteTime, NSMutableArray *)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      if (*(double *)(*(_QWORD *)(a1 + 360) + 16) < a3)
      {
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_102164318);
        v11 = qword_10229FDB8;
        if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Data requested is in memory.  Writing incremental data out to disk.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDB0 != -1)
            dispatch_once(&qword_10229FDB0, &stru_102164318);
          LOWORD(v27[0]) = 0;
          LODWORD(v24) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 1, "Data requested is in memory.  Writing incremental data out to disk.", v27, *(_QWORD *)&v24);
          v23 = (char *)v22;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordMetaIds(CFAbsoluteTime, CFAbsoluteTime, NSMutableArray *)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        sub_1009E2B1C((uint64_t *)a1);
      }
    }
    sub_1009E4808(a1, (uint64_t)objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", *(unsigned int *)(a1 + 344)), (uint64_t)objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", *(unsigned int *)(a1 + 344)));
  }
  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_102164318);
  v12 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Data request failed because db is not accessible.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
    LOWORD(v27[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 0, "Data request failed because db is not accessible.", v27, 2);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordMetaIds(CFAbsoluteTime, CFAbsoluteTime, NSMutableArray *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return 0;
}

void sub_1009E53C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_10187E514((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E5460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  char *v9;
  std::string v11;
  void *__p[2];
  int64_t v13;
  uint64_t v14;
  __int16 v15;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v14 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v15 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) != 0.0 && sub_10008950C(a1 + 72))
  {
    v6 = *(_QWORD *)(a1 + 80);
    std::operator+<char>(&v11, "SELECT dataId FROM ", a1 + 432);
    v7 = std::string::append(&v11, " WHERE startTime < ? ORDER BY dataId DESC LIMIT 1");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (v13 >= 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v6, v9);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return 0;
}

void sub_1009E57A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  sub_10187E514((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E58AC(uint64_t a1, uint64_t a2)
{
  sub_1009E5460(a1 - 72, a2);
  return 0;
}

uint64_t sub_1009E58E0()
{
  return 0;
}

uint64_t sub_1009E58E8()
{
  return 2;
}

uint64_t sub_1009E58F4(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_101913104(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_1009E5B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E5BD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102164640);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102164640);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102164640);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSensorRecorderDataPacket>::setDatabaseAccessible() [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1009E6260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1009E6290(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v3;
  return sub_100349198((_QWORD *)(a2 + 24), (uint64_t *)a3 + 3);
}

id *sub_1009E62AC(uint64_t *a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  double v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  double v35[4];
  std::__shared_weak_count *v36;
  id v37[2];
  int v38;
  double v39;
  __int16 v40;
  double v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  double v45;

  v37[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v37[1] = 0;
  if (*((double *)a1 + 28) <= 0.0
    || !(*(unsigned int (**)(uint64_t *, uint64_t *, __int128 *))(*a1 + 136))(a1, a1 + 28, a2))
  {
    if ((a3 & 1) == 0)
      sub_10001E638(a1[10]);
    v35[3] = 0.0;
    v36 = 0;
    v6 = (*(uint64_t (**)(uint64_t *, double *))(*a1 + 104))(a1, v35);
    if (v6 == 1)
    {
      (*(void (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 120))(a1, a2, 1);
    }
    else
    {
      if (v6)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102164640);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102164640);
          LOWORD(v38) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v38, 2);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
LABEL_43:
        v22 = v36;
        if (!v36)
          goto LABEL_47;
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          if ((a3 & 1) != 0)
            return sub_100131740(v37);
        }
        else
        {
LABEL_47:
          if ((a3 & 1) != 0)
            return sub_100131740(v37);
        }
        sub_10001E99C(a1[10]);
        return sub_100131740(v37);
      }
      v7 = *(double *)a2;
      v8 = v35[0];
      v9 = *(double *)a2 - v35[0];
      if (v9 < 0.0)
        v9 = -v9;
      if (v9 > 604800.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102164640);
        v10 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(double *)a2;
          *(_DWORD *)buf = 134349312;
          v43 = v35[0];
          v44 = 2050;
          v45 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102164640);
          v26 = *(double *)a2;
          v38 = 134349312;
          v39 = v35[0];
          v40 = 2050;
          v41 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v38, 22);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
        v7 = *(double *)a2;
        v8 = v35[0];
      }
      if (v7 < v8)
      {
        if (v8 - v7 < 10.0)
        {
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102164640);
          v12 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            v13 = *(double *)a2;
            *(_DWORD *)buf = 134217984;
            v43 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_102164640);
            v29 = *(double *)a2;
            v38 = 134217984;
            v39 = v29;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v38));
            v31 = (uint8_t *)v30;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
            if (v31 != buf)
              free(v31);
          }
          (*(void (**)(uint64_t *, __int128 *))(*a1 + 88))(a1, a2);
          goto LABEL_42;
        }
        v17 = v7 - v8;
        v18 = *((float *)a1 + 34);
        if (qword_10229FC70 != -1)
        {
          v34 = *((float *)a1 + 34);
          dispatch_once(&qword_10229FC70, &stru_102164640);
          v18 = v34;
        }
        v19 = v17 - v18;
        v20 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v43 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102164640);
          v38 = 134217984;
          v39 = v19;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v38));
          v33 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        (*(void (**)(uint64_t *, double))(*a1 + 96))(a1, v19);
      }
      (*(void (**)(uint64_t *, double *, uint64_t *, __int128 *))(*a1 + 144))(a1, v35, a1 + 28, a2);
      (*(void (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 120))(a1, a2, 1);
    }
LABEL_42:
    v21 = *a2;
    *((_DWORD *)a1 + 60) = *((_DWORD *)a2 + 4);
    *((_OWORD *)a1 + 14) = v21;
    sub_100349198(a1 + 31, (uint64_t *)a2 + 3);
    goto LABEL_43;
  }
  (*(void (**)(uint64_t *, uint64_t *, __int128 *))(*a1 + 72))(a1, a1 + 28, a2);
  return sub_100131740(v37);
}

void sub_1009E6A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_100261F44(v9 + 24);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E6A84(uint64_t a1)
{
  return sub_1009E5BD4(a1 - 72);
}

void sub_1009E6A8C(id a1)
{
  qword_10229FDB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_1009E6AB8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_100261F44((uint64_t)(v3 + 5));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_1009E6B28(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _Unwind_Exception *v17;
  uint64_t v18;
  void *__p[2];
  unsigned __int8 v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  _QWORD v24[8];

  v5 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23))
      goto LABEL_3;
LABEL_20:
    v17 = (_Unwind_Exception *)sub_101913274(v5);
    sub_100261F44(v2);
    v18 = v21;
    v21 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    sub_1018B38B4((uint64_t)v22);
    _Unwind_Resume(v17);
  }
  v16 = v22[1];
  operator delete(v22[0]);
  if (!v16)
    goto LABEL_20;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    v8 = *a2;
    v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        v9 = v7 - 40;
        sub_100261F44(v7 - 16);
        v7 = v9;
      }
      while (v9 != v8);
    }
    a2[1] = v8;
    sub_100263E50((uint64_t)v22);
    v10 = sub_100263F7C(&v23, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v20 & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v12 = v20;
    else
      v12 = (uint64_t)__p[1];
    v13 = sub_100263F7C(v10, (uint64_t)v11, v12);
    sub_100263F7C(v13, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v20 < 0)
      operator delete(__p[0]);
    v14 = a1[10];
    std::stringbuf::str(__p, v24);
    if ((v20 & 0x80u) == 0)
      v15 = (char *)__p;
    else
      v15 = (char *)__p[0];
    sub_1000CDA68(v14, v15);
  }
  return result;
}

uint64_t sub_1009E6DE8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019133E4(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1009E7048(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101913554(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1009E7280(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019136C4(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1009E74A8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1009E74D4(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x66];
    v7 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v7 != v8)
    {
      do
      {
        sub_100261F44(v7 + 24);
        v7 += 40;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 51;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 102;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_1009E7614(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666)
      sub_100259694();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v14;
    v24[4] = result;
    v17 = (char *)sub_100357184(result, v16);
    v18 = &v17[40 * v13];
    v24[0] = v17;
    v24[1] = v18;
    v24[3] = &v17[40 * v19];
    v20 = *((_DWORD *)a2 + 4);
    *(_OWORD *)v18 = *a2;
    *((_DWORD *)v18 + 4) = v20;
    *((_QWORD *)v18 + 3) = *((_QWORD *)a2 + 3);
    v21 = *((_QWORD *)a2 + 4);
    *((_QWORD *)v18 + 4) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24[2] = v18 + 40;
    sub_1009E7780(a1, v24);
    v12 = a1[1];
    result = sub_1009E7808((uint64_t)v24);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v7 = v8;
    *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 + 3);
    v9 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(v7 + 32) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v12;
  return result;
}

void sub_1009E776C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1009E7808((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1009E7780(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 40;
      v6 = *(_OWORD *)(v3 - 40);
      *(_DWORD *)(v4 - 24) = *(_DWORD *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v6;
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 40;
      v4 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1009E7808(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    sub_100261F44(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_1009E7858(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  double *v33;
  double **v34;
  unint64_t v35;
  _QWORD *v36;
  double *v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double *v48;
  double **v49;
  unint64_t v50;
  _QWORD *v51;
  double *v52;
  double *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double *v63;
  double **v64;
  unint64_t v65;
  _QWORD *v66;
  double *v67;
  double *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  double *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double *v78;
  double **v79;
  unint64_t v80;
  _QWORD *v81;
  double *v82;
  double *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  double *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  _BOOL8 v108;
  NSObject *v109;
  const char *v111;
  uint8_t *v112;
  uint64_t v113;
  unint64_t v114;
  double v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118[3];
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[3];
  uint8_t buf[8];

  v4 = a1[1];
  if (*a1 == v4)
  {
    v14 = 0.0;
    v25 = 2.22044605e-16;
    v115 = 2.22044605e-16;
    v12 = 0.0;
    v8 = 0.0;
    v5 = 0.0;
    v24 = 2.22044605e-16;
    v26 = 0.0;
  }
  else
  {
    v5 = 0.0;
    v6 = -1;
    v7 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
    v10 = *a1;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      v15 = *(float *)(v10 + 16);
      v16 = v15 - v5;
      v17 = (double)(v6 + 2);
      v5 = v5 + (v15 - v5) / v17;
      v7 = v7 + v16 * (v15 - v5);
      v18 = *(double *)(v10 + 24);
      v19 = *(double *)(v10 + 32);
      v20 = v18 - v8;
      v8 = v8 + (v18 - v8) / v17;
      v9 = v9 + v20 * (v18 - v8);
      v21 = v19 - v14;
      v14 = v14 + (v19 - v14) / v17;
      v13 = v13 + v21 * (v19 - v14);
      v22 = *(double *)(v10 + 40);
      v23 = v22 - v12;
      v12 = v12 + (v22 - v12) / v17;
      v11 = v11 + v23 * (v22 - v12);
      v10 += 72;
      ++v6;
    }
    while (v10 != v4);
    if (v6)
    {
      v115 = sqrt(v7 / (double)v6) + 2.22044605e-16;
      v24 = sqrt(v9 / (double)v6) + 2.22044605e-16;
      v25 = sqrt(v13 / (double)v6) + 2.22044605e-16;
      v26 = v11 / (double)v6;
    }
    else
    {
      v26 = 0.0;
      v25 = 2.22044605e-16;
      v115 = 2.22044605e-16;
      v24 = 2.22044605e-16;
    }
  }
  sub_100673974(v121, 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3));
  v113 = a2;
  v27 = *a1;
  v28 = a1[1];
  if (*a1 != v28)
  {
    v29 = 0;
    v30 = sqrt(v26) + 2.22044605e-16;
    do
    {
      v31 = v121[0] + 24 * v29;
      v32 = (*(float *)(v27 + 16) - v5) / v115;
      v34 = (double **)(v31 + 8);
      v33 = *(double **)(v31 + 8);
      v36 = (_QWORD *)(v31 + 16);
      v35 = *(_QWORD *)(v31 + 16);
      if ((unint64_t)v33 >= v35)
      {
        v38 = *(double **)v31;
        v39 = ((uint64_t)v33 - *(_QWORD *)v31) >> 3;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61)
          sub_100259694();
        v41 = v35 - (_QWORD)v38;
        if (v41 >> 2 > v40)
          v40 = v41 >> 2;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (char *)sub_10025E6A0((uint64_t)v36, v42);
          v33 = *v34;
          v38 = *(double **)v31;
        }
        else
        {
          v43 = 0;
        }
        v44 = (double *)&v43[8 * v39];
        *v44 = v32;
        v37 = v44 + 1;
        while (v33 != v38)
        {
          v45 = *((_QWORD *)v33-- - 1);
          *((_QWORD *)v44-- - 1) = v45;
        }
        *(_QWORD *)v31 = v44;
        *v34 = v37;
        *v36 = &v43[8 * v42];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v33 = v32;
        v37 = v33 + 1;
      }
      *v34 = v37;
      v46 = v121[0] + 24 * v29;
      v47 = (*(double *)(v27 + 24) - v8) / v24;
      v49 = (double **)(v46 + 8);
      v48 = *(double **)(v46 + 8);
      v51 = (_QWORD *)(v46 + 16);
      v50 = *(_QWORD *)(v46 + 16);
      if ((unint64_t)v48 >= v50)
      {
        v53 = *(double **)v46;
        v54 = ((uint64_t)v48 - *(_QWORD *)v46) >> 3;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61)
          sub_100259694();
        v56 = v50 - (_QWORD)v53;
        if (v56 >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          v58 = (char *)sub_10025E6A0((uint64_t)v51, v57);
          v48 = *v49;
          v53 = *(double **)v46;
        }
        else
        {
          v58 = 0;
        }
        v59 = (double *)&v58[8 * v54];
        *v59 = v47;
        v52 = v59 + 1;
        while (v48 != v53)
        {
          v60 = *((_QWORD *)v48-- - 1);
          *((_QWORD *)v59-- - 1) = v60;
        }
        *(_QWORD *)v46 = v59;
        *v49 = v52;
        *v51 = &v58[8 * v57];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *v48 = v47;
        v52 = v48 + 1;
      }
      *v49 = v52;
      v61 = v121[0] + 24 * v29;
      v62 = (*(double *)(v27 + 32) - v14) / v25;
      v64 = (double **)(v61 + 8);
      v63 = *(double **)(v61 + 8);
      v66 = (_QWORD *)(v61 + 16);
      v65 = *(_QWORD *)(v61 + 16);
      if ((unint64_t)v63 >= v65)
      {
        v68 = *(double **)v61;
        v69 = ((uint64_t)v63 - *(_QWORD *)v61) >> 3;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 61)
          sub_100259694();
        v71 = v65 - (_QWORD)v68;
        if (v71 >> 2 > v70)
          v70 = v71 >> 2;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          v73 = (char *)sub_10025E6A0((uint64_t)v66, v72);
          v63 = *v64;
          v68 = *(double **)v61;
        }
        else
        {
          v73 = 0;
        }
        v74 = (double *)&v73[8 * v69];
        *v74 = v62;
        v67 = v74 + 1;
        while (v63 != v68)
        {
          v75 = *((_QWORD *)v63-- - 1);
          *((_QWORD *)v74-- - 1) = v75;
        }
        *(_QWORD *)v61 = v74;
        *v64 = v67;
        *v66 = &v73[8 * v72];
        if (v68)
          operator delete(v68);
      }
      else
      {
        *v63 = v62;
        v67 = v63 + 1;
      }
      *v64 = v67;
      v76 = v121[0] + 24 * v29;
      v77 = (*(double *)(v27 + 40) - v12) / v30;
      v79 = (double **)(v76 + 8);
      v78 = *(double **)(v76 + 8);
      v81 = (_QWORD *)(v76 + 16);
      v80 = *(_QWORD *)(v76 + 16);
      if ((unint64_t)v78 >= v80)
      {
        v83 = *(double **)v76;
        v84 = ((uint64_t)v78 - *(_QWORD *)v76) >> 3;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61)
          sub_100259694();
        v86 = v80 - (_QWORD)v83;
        if (v86 >> 2 > v85)
          v85 = v86 >> 2;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
          v87 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (v87)
        {
          v88 = (char *)sub_10025E6A0((uint64_t)v81, v87);
          v78 = *v79;
          v83 = *(double **)v76;
        }
        else
        {
          v88 = 0;
        }
        v89 = (double *)&v88[8 * v84];
        *v89 = v77;
        v82 = v89 + 1;
        while (v78 != v83)
        {
          v90 = *((_QWORD *)v78-- - 1);
          *((_QWORD *)v89-- - 1) = v90;
        }
        *(_QWORD *)v76 = v89;
        *v79 = v82;
        *v81 = &v88[8 * v87];
        if (v83)
          operator delete(v83);
      }
      else
      {
        *v78 = v77;
        v82 = v78 + 1;
      }
      *v79 = v82;
      ++v29;
      v27 += 72;
    }
    while (v27 != v28);
  }
  sub_100673974(&v119, 4uLL);
  v91 = v119;
  v116 = v120;
  if (v119 != v120)
  {
    v92 = 0;
    v93 = v121[0];
    v114 = (0xAAAAAAAAAAAAAAABLL * ((v121[1] - v121[0]) >> 3) - 1) >> 2;
    v94 = *(_QWORD *)v121[0];
    do
    {
      ++v92;
      if (*(_QWORD *)(v93 + 8) != v94)
      {
        v95 = 0;
        v96 = (_QWORD *)(v91 + 16);
        v97 = *(_QWORD **)(v91 + 8);
        do
        {
          v98 = *(_QWORD *)(v93 + 24 * (v92 * v114));
          if ((unint64_t)v97 >= *v96)
          {
            v100 = *(_QWORD **)v91;
            v101 = ((uint64_t)v97 - *(_QWORD *)v91) >> 3;
            v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) >> 61)
              sub_100259694();
            v103 = *v96 - (_QWORD)v100;
            if (v103 >> 2 > v102)
              v102 = v103 >> 2;
            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
              v104 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v104 = v102;
            if (v104)
            {
              v105 = (char *)sub_10025E6A0(v91 + 16, v104);
              v100 = *(_QWORD **)v91;
              v97 = *(_QWORD **)(v91 + 8);
            }
            else
            {
              v105 = 0;
            }
            v106 = &v105[8 * v101];
            *(_QWORD *)v106 = *(_QWORD *)(v98 + 8 * v95);
            v99 = v106 + 8;
            while (v97 != v100)
            {
              v107 = *--v97;
              *((_QWORD *)v106 - 1) = v107;
              v106 -= 8;
            }
            *(_QWORD *)v91 = v106;
            *(_QWORD *)(v91 + 8) = v99;
            *(_QWORD *)(v91 + 16) = &v105[8 * v104];
            if (v100)
              operator delete(v100);
          }
          else
          {
            *v97 = *(_QWORD *)(v98 + 8 * v95);
            v99 = v97 + 1;
          }
          *(_QWORD *)(v91 + 8) = v99;
          ++v95;
          v93 = v121[0];
          v94 = *(_QWORD *)v121[0];
          v97 = v99;
        }
        while (v95 < (uint64_t)(*(_QWORD *)(v121[0] + 8) - *(_QWORD *)v121[0]) >> 3);
      }
      v91 += 24;
    }
    while (v91 != v116);
  }
  memset(v118, 0, sizeof(v118));
  v108 = sub_10025FF1C((uint64_t)buf, (uint64_t)&v119, (uint64_t)v121, 4u, v118, v113);
  if (!v108)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102164678);
    v109 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "VO2Max,Clustering failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102164678);
      v117 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "VO2Max,Clustering failed", &v117, 2);
      v112 = (uint8_t *)v111;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVO2MaxModel::deriveClusters(const std::vector<VO2MaxModelInput> &, std::vector<uint32_t> &)", "%s\n", v111);
      if (v112 != buf)
        free(v112);
    }
  }
  *(_QWORD *)buf = v118;
  sub_10025E1F0((void ***)buf);
  *(_QWORD *)buf = &v119;
  sub_10025E1F0((void ***)buf);
  *(_QWORD *)buf = v121;
  sub_10025E1F0((void ***)buf);
  return v108;
}

void sub_1009E80AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a16;
  sub_10025E1F0(&a25);
  a25 = (void **)&a19;
  sub_10025E1F0(&a25);
  a25 = (void **)&a22;
  sub_10025E1F0(&a25);
  _Unwind_Resume(a1);
}

void sub_1009E812C(uint64_t *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  const char *v41;
  uint8_t *v42;
  double v43;
  __n128 v44;
  unsigned __int32 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  int v80;
  uint8_t buf[4];
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  int v116;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    a2.n128_u64[0] = 134222336;
    v44 = a2;
    do
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102164678);
      v4 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(v3 + 8);
        v6 = *(_QWORD *)(v3 + 40);
        v7 = *(_QWORD *)(v3 + 48);
        v8 = *(_QWORD *)(v3 + 56);
        v9 = *(_QWORD *)(v3 + 64);
        v10 = *(_QWORD *)(v3 + 72);
        v11 = *(_QWORD *)(v3 + 80);
        v12 = *(_QWORD *)(v3 + 88);
        v13 = *(_QWORD *)(v3 + 96);
        v15 = *(_QWORD *)(v3 + 104);
        v14 = *(_QWORD *)(v3 + 112);
        v17 = *(_QWORD *)(v3 + 128);
        v16 = *(_QWORD *)(v3 + 136);
        v18 = *(_QWORD *)(v3 + 152);
        v19 = *(_QWORD *)(v3 + 160);
        v20 = *(_QWORD *)(v3 + 168);
        v21 = *(_QWORD *)(v3 + 120);
        v22 = *(_DWORD *)(v3 + 176);
        *(_DWORD *)buf = v44.n128_u32[0];
        v82 = v5;
        v83 = 2048;
        v84 = v6;
        v85 = 2048;
        v86 = v7;
        v87 = 2048;
        v88 = v8;
        v89 = 2048;
        v90 = v9;
        v91 = 2048;
        v92 = v10;
        v93 = 2048;
        v94 = v11;
        v95 = 2048;
        v96 = v12;
        v97 = 2048;
        v98 = v13;
        v99 = 2048;
        v100 = v15;
        v101 = 2048;
        v102 = v14;
        v103 = 2048;
        v104 = v17;
        v105 = 2048;
        v106 = v16;
        v107 = 2048;
        v108 = v18;
        v109 = 2048;
        v110 = v19;
        v111 = 2048;
        v112 = v20;
        v113 = 2048;
        v114 = v21;
        v115 = 1024;
        v116 = v22;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AlgoName,AdaptiveOutdoorPedestrianModel,ts,%.9f,duration,%.9f,size,%lld,hr min.,%f,hr max.,%f,hrMean,%f,hrConfMean,%f,hrCadenceMean,%f,vo2Mean,%f,speedMean,%f,gradeMean,%f,hrVariance,%f,hrConfVariance,%f,vo2Variance,%f,speedVariance,%f,gradeVariance,%f,cadenceMean,%f,vo2MaxModelSource,%d", buf, 0xB2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102164678);
        v23 = *(_QWORD *)(v3 + 8);
        v24 = *(_QWORD *)(v3 + 40);
        v25 = *(_QWORD *)(v3 + 48);
        v26 = *(_QWORD *)(v3 + 56);
        v27 = *(_QWORD *)(v3 + 64);
        v28 = *(_QWORD *)(v3 + 72);
        v29 = *(_QWORD *)(v3 + 80);
        v30 = *(_QWORD *)(v3 + 88);
        v31 = *(_QWORD *)(v3 + 96);
        v33 = *(_QWORD *)(v3 + 104);
        v32 = *(_QWORD *)(v3 + 112);
        v35 = *(_QWORD *)(v3 + 128);
        v34 = *(_QWORD *)(v3 + 136);
        v36 = *(_QWORD *)(v3 + 152);
        v37 = *(_QWORD *)(v3 + 160);
        v38 = *(_QWORD *)(v3 + 168);
        v39 = *(_QWORD *)(v3 + 120);
        v40 = *(_DWORD *)(v3 + 176);
        v45 = v44.n128_u32[0];
        v46 = v23;
        v47 = 2048;
        v48 = v24;
        v49 = 2048;
        v50 = v25;
        v51 = 2048;
        v52 = v26;
        v53 = 2048;
        v54 = v27;
        v55 = 2048;
        v56 = v28;
        v57 = 2048;
        v58 = v29;
        v59 = 2048;
        v60 = v30;
        v61 = 2048;
        v62 = v31;
        v63 = 2048;
        v64 = v33;
        v65 = 2048;
        v66 = v32;
        v67 = 2048;
        v68 = v35;
        v69 = 2048;
        v70 = v34;
        v71 = 2048;
        v72 = v36;
        v73 = 2048;
        v74 = v37;
        v75 = 2048;
        v76 = v38;
        v77 = 2048;
        v78 = v39;
        v79 = 1024;
        v80 = v40;
        LODWORD(v43) = 178;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "AlgoName,AdaptiveOutdoorPedestrianModel,ts,%.9f,duration,%.9f,size,%lld,hr min.,%f,hr max.,%f,hrMean,%f,hrConfMean,%f,hrCadenceMean,%f,vo2Mean,%f,speedMean,%f,gradeMean,%f,hrVariance,%f,hrConfVariance,%f,vo2Variance,%f,speedVariance,%f,gradeVariance,%f,cadenceMean,%f,vo2MaxModelSource,%d", COERCE_DOUBLE(&v45), v43, v44.n128_u64[0], v44.n128_f64[1]);
        v42 = (uint8_t *)v41;
        sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxModel::logClusters(std::vector<VO2MaxSummary> &)", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
      v3 += 184;
    }
    while (v3 != v2);
  }
}

uint64_t sub_1009E8478(uint64_t result, _QWORD *a2, int a3)
{
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = a3;
  return result;
}

void sub_1009E8488(float *a1, uint64_t *a2, __int128 **a3, uint64_t a4, uint64_t a5, float a6, double a7, double a8)
{
  int v14;
  uint64_t v15;
  BOOL v16;
  double v17;
  int v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  double v25;
  int v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  double v32;
  int v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  __n128 v39;
  double v40;
  int v41;
  double v42;
  int v43;
  double v44;
  double v45;
  uint64_t v46;
  const char *v47;
  uint8_t *v48;
  double v49;
  void *__p;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  double v54;
  __int16 v55;
  int v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  uint8_t buf[4];
  double v72;
  __int16 v73;
  int v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;

  sub_1009E89FC((uint64_t)a1, a5, a2, a6);
  __p = 0;
  v51 = 0;
  v52 = 0;
  if (*(_QWORD *)(a5 + 48) == *(_QWORD *)(a5 + 40))
    v15 = 4294967287;
  else
    v15 = sub_1009E92AC(v14, a3, (char **)(a5 + 40), &__p, a8);
  *(_DWORD *)(a5 + 28) = v15;
  if (*(_DWORD *)(a5 + 24))
    v16 = (_DWORD)v15 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    *(_QWORD *)a5 = 0xBFF0000000000000;
    goto LABEL_16;
  }
  v49 = 0.0;
  if (!sub_1009E9600(v15, (double **)&__p, &v49))
  {
    v18 = -7;
    goto LABEL_13;
  }
  v17 = v49;
  *(double *)(a5 + 64) = v49;
  if (a7 == 0.0)
  {
    v18 = -8;
LABEL_13:
    v19 = *(_DWORD *)(a5 + 24);
    if (!v19)
      v19 = v18;
    *(_DWORD *)(a5 + 24) = v19;
    *(_DWORD *)(a5 + 28) = v18;
    goto LABEL_16;
  }
  v20 = *(_DWORD *)(a4 + 4);
  v21 = 0.5;
  if (v20 == 2)
    v21 = 0.0;
  if (v20 == 1)
    v21 = 1.0;
  v22 = (float)((float)(*(float *)(a4 + 20) * -0.0007) + 0.1935)
      + v21 * -0.0277999993
      + (float)((float)(*(float *)(a4 + 12) * -0.0015) / (float)(*(float *)(a4 + 8) * *(float *)(a4 + 8)))
      + a7 * 0.00520000001
      + v17 * 0.00540000014;
  v23 = v22 * a1[1];
  *(double *)(a5 + 8) = v23;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102164678);
  v24 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(float *)(a4 + 20);
    v26 = *(unsigned __int8 *)(a4 + 4);
    v27 = *(float *)(a4 + 8);
    v28 = *(float *)(a4 + 12);
    v29 = *(_QWORD *)(a5 + 8);
    *(_DWORD *)buf = 134285569;
    v72 = v25;
    v73 = 1025;
    v74 = v26;
    v75 = 2049;
    v76 = v27;
    v77 = 2049;
    v78 = v28;
    v79 = 2049;
    v80 = a7;
    v81 = 2049;
    v82 = v17;
    v83 = 2049;
    v84 = v29;
    v85 = 2049;
    v86 = v22 * 0.959999979 + 0.00659999996;
    v87 = 2049;
    v88 = v22 * 0.330000013 + -0.023;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "VO2Max,AdaptiveOutdoorPedestrianModel,ComputePriors,age,%{private}f,biologicalSex,%{private}u,height,%{private}f,weight,%{private}f,maxMets,%{private}f,efficiency,%{private}f,priorVO2Max,%{private}f,modelPriorCoefficient_a,%{private}f,modelPriorCoefficient_b,%{private}f", buf, 0x58u);
  }
  v30 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v30)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102164678);
    v42 = *(float *)(a4 + 20);
    v43 = *(unsigned __int8 *)(a4 + 4);
    v44 = *(float *)(a4 + 8);
    v45 = *(float *)(a4 + 12);
    v46 = *(_QWORD *)(a5 + 8);
    v53 = 134285569;
    v54 = v42;
    v55 = 1025;
    v56 = v43;
    v57 = 2049;
    v58 = v44;
    v59 = 2049;
    v60 = v45;
    v61 = 2049;
    v62 = a7;
    v63 = 2049;
    v64 = v17;
    v65 = 2049;
    v66 = v46;
    v67 = 2049;
    v68 = v22 * 0.959999979 + 0.00659999996;
    v69 = 2049;
    v70 = v22 * 0.330000013 + -0.023;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "VO2Max,AdaptiveOutdoorPedestrianModel,ComputePriors,age,%{private}f,biologicalSex,%{private}u,height,%{private}f,weight,%{private}f,maxMets,%{private}f,efficiency,%{private}f,priorVO2Max,%{private}f,modelPriorCoefficient_a,%{private}f,modelPriorCoefficient_b,%{private}f", &v53, 88);
    v48 = (uint8_t *)v47;
    v30 = sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxModel::AdaptiveOutdoorPedestrianModel::estimateVO2Max(const std::vector<VO2MaxModelInput> &, const std::vector<VO2MaxSummary> &, float, const CLBodyMetrics &, double, CLVO2MaxModel::Result &, CFAbsoluteTime) const", "%s\n", v47);
    if (v48 != buf)
      free(v48);
  }
  if (!*(_DWORD *)(a5 + 24))
  {
    *(_DWORD *)buf = 0;
    v31.n128_f64[0] = v22;
    sub_1009E9CB8(a1, (_QWORD *)(a5 + 40), (int *)buf, v31, v23, 1.79769313e308);
    *(double *)(a5 + 16) = v32;
    if (v32 == -1.0)
      v33 = -6;
    else
      v33 = 0;
    *(_DWORD *)(a5 + 24) = v33;
  }
  if (__p != v51)
  {
    v34 = 0.0;
    v35 = 0.0;
    v36 = (double *)__p;
    do
    {
      v34 = v34 + v36[9];
      v35 = v35 + v36[12] / 3.5;
      v36 += 23;
    }
    while (v36 != (double *)v51);
    v37 = (double)(0xD37A6F4DE9BD37A7 * ((v51 - (_BYTE *)__p) >> 3));
    *(double *)(a5 + 72) = v34 / v37;
    *(double *)(a5 + 80) = v35 / v37;
  }
  *(_DWORD *)buf = 0;
  v38 = sub_1009E9884(v22, a8, v30, (double **)a3);
  v39.n128_f64[0] = v22;
  sub_1009E9CB8(a1, &__p, (int *)buf, v39, v23, v38);
  *(double *)a5 = v40;
  if (v40 == -1.0)
  {
    v41 = -6;
  }
  else
  {
    v41 = 0;
    *(_DWORD *)(a5 + 32) = *(_DWORD *)buf;
  }
  *(_DWORD *)(a5 + 28) = v41;
LABEL_16:
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
}

void sub_1009E89D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1009E89FC(uint64_t a1, uint64_t a2, uint64_t *a3, float a4)
{
  __n128 v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  double v57;
  double *v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  unint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  double v69;
  unint64_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  _QWORD *v78;
  _QWORD *v79;
  double v80;
  double v81;
  _QWORD *v82;
  _QWORD *v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char *v106;
  unint64_t v107;
  double v108;
  double v109;
  double v110;
  uint64_t v111;
  double v112;
  double v113;
  double v114;
  uint64_t v115;
  void *__p;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  void *v122[3];
  void *v123[3];
  void *v124[3];
  unsigned int *v125;
  unsigned int *v126;
  uint64_t v127;
  __int128 v128;

  if (a4 > 20.0 || 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3) <= 0x31)
  {
    *(_DWORD *)(a2 + 24) = -1;
    return;
  }
  v125 = 0;
  v126 = 0;
  v127 = 0;
  if (sub_1009E7858(a3, (uint64_t)&v125))
  {
    sub_1009EA600(v124, 4uLL);
    sub_1009EA600(v123, 4uLL);
    sub_1009EA600(v122, 4uLL);
    sub_1009EA600(v121, 4uLL);
    sub_1009EA600(v120, 4uLL);
    sub_1009EA600(v119, 4uLL);
    v8 = v125;
    v9 = v126;
    if (v125 != v126)
    {
      v10 = 0;
      v11 = *a3;
      v12 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3);
      v13 = (char *)v124[0];
      v14 = (char *)v123[0];
      v15 = (char *)v122[0];
      v16 = (char *)v121[0];
      v17 = (char *)v120[0];
      v18 = (char *)v119[0];
      do
      {
        v19 = *v8;
        if (v19 >= 4 && v12 <= v10)
        {
          sub_101913834();
          abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/FunctionalCapacity/VO2Max/Models/CLVO2MaxAdaptiveOutdoorPedestrianModel.mm", 336, "populateClusters");
          __break(1u);
        }
        v21 = 3 * v19;
        v22 = (double *)&v13[8 * v21];
        v23 = v11 + 72 * v10;
        v24 = *(float *)(v23 + 16);
        v25 = v22[1];
        v26 = v22[2];
        v27 = v24 - v25;
        v28 = *(_QWORD *)v22 + 1;
        *(_QWORD *)v22 = v28;
        v29 = v25 + (v24 - v25) / (double)(unint64_t)v28;
        v22[1] = v29;
        v22[2] = v26 + v27 * (v24 - v29);
        v30 = (double *)&v14[8 * v21];
        v31 = *(float *)(v23 + 20);
        v32 = v30[1];
        v33 = v30[2];
        v34 = v31 - v32;
        v35 = *(_QWORD *)v30 + 1;
        *(_QWORD *)v30 = v35;
        v36 = v32 + (v31 - v32) / (double)(unint64_t)v35;
        v30[1] = v36;
        v30[2] = v33 + v34 * (v31 - v36);
        v37 = (double *)&v15[8 * v21];
        v38 = *(double *)(v23 + 24);
        v39 = v37[1];
        v40 = v37[2];
        v41 = v38 - v39;
        v42 = *(_QWORD *)v37 + 1;
        *(_QWORD *)v37 = v42;
        v43 = v39 + (v38 - v39) / (double)(unint64_t)v42;
        v37[1] = v43;
        v37[2] = v40 + v41 * (v38 - v43);
        v44 = (double *)&v16[8 * v21];
        v45 = *(double *)(v23 + 32);
        v46 = v44[1];
        v47 = v44[2];
        v48 = v45 - v46;
        v49 = *(_QWORD *)v44 + 1;
        *(_QWORD *)v44 = v49;
        v50 = v46 + (v45 - v46) / (double)(unint64_t)v49;
        v44[1] = v50;
        v44[2] = v47 + v48 * (v45 - v50);
        v51 = (double *)&v17[8 * v21];
        v52 = *(double *)(v23 + 48);
        v53 = v51[1];
        v54 = v51[2];
        v55 = v52 - v53;
        v56 = *(_QWORD *)v51 + 1;
        *(_QWORD *)v51 = v56;
        v57 = v53 + (v52 - v53) / (double)(unint64_t)v56;
        v51[1] = v57;
        v51[2] = v54 + v55 * (v52 - v57);
        v58 = (double *)&v18[8 * v21];
        v59 = *(double *)(v23 + 56);
        v60 = v58[1];
        v61 = v58[2];
        v62 = v59 - v60;
        v63 = *(_QWORD *)v58 + 1;
        v64 = v60 + (v59 - v60) / (double)(unint64_t)v63;
        *(_QWORD *)v58 = v63;
        v58[1] = v64;
        v58[2] = v61 + v62 * (v59 - v64);
        ++v10;
        ++v8;
      }
      while (v8 != v9);
    }
    v65 = 0;
    v66 = 0;
    v110 = *(double *)(a3[1] - 72) - *(double *)*a3;
    v111 = *(_QWORD *)(a3[1] - 72);
    v67 = *(float *)a1;
    v68 = *(float *)(a1 + 4);
    __p = 0;
    v117 = 0;
    v118 = 0;
    v69 = v67;
    v7.n128_f64[0] = v68;
    v108 = v68;
    v109 = v69;
    do
    {
      v70 = *((_QWORD *)v124[0] + 3 * v66);
      if (v70)
      {
        v128 = 0uLL;
        v71 = *((double *)v124[0] + 3 * v66 + 1);
        v72 = *((double *)v119[0] + 3 * v66 + 1);
        v73 = 1.0;
        if (v71 > 0.0 && v72 > 0.0)
        {
          v74 = vabdd_f64(v71 / (v72 * 60.0), round(v71 / (v72 * 60.0)));
          v75 = vabdd_f64(0.5, v74);
          if (v75 >= v74)
            v73 = v74;
          else
            v73 = v75;
        }
        v76 = 0.0;
        v77 = 0.0;
        if (v70 >= 2)
          v77 = *((double *)v124[0] + 3 * v66 + 2) / (double)(v70 - 1);
        v78 = (char *)v120[0] + 24 * v66;
        if (*v78 >= 2uLL)
          v76 = *((double *)v120[0] + 3 * v66 + 2) / (double)(unint64_t)(*v78 - 1);
        v79 = (char *)v123[0] + 24 * v66;
        v80 = 0.0;
        v81 = 0.0;
        if (*v79 >= 2uLL)
          v81 = *((double *)v123[0] + 3 * v66 + 2) / (double)(unint64_t)(*v79 - 1);
        v112 = v77;
        v113 = v76;
        v114 = v73;
        v115 = *((_QWORD *)v119[0] + 3 * v66 + 1);
        v82 = (char *)v122[0] + 24 * v66;
        if (*v82 >= 2uLL)
          v80 = *((double *)v122[0] + 3 * v66 + 2) / (double)(unint64_t)(*v82 - 1);
        v83 = (char *)v121[0] + 24 * v66;
        v84 = 0.0;
        if (*v83 >= 2uLL)
          v84 = *((double *)v121[0] + 3 * v66 + 2) / (double)(unint64_t)(*v83 - 1);
        v85 = v78[1];
        v86 = v79[1];
        v87 = v82[1];
        v88 = v83[1];
        v89 = *(_DWORD *)(a1 + 8);
        if (v65 >= (unint64_t)v118)
        {
          v90 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v65 - (_QWORD)__p) >> 3);
          v91 = v90 + 1;
          if (v90 + 1 > 0x1642C8590B21642)
            sub_100259694();
          if (0xA6F4DE9BD37A6F4ELL * ((v118 - (_BYTE *)__p) >> 3) > v91)
            v91 = 0xA6F4DE9BD37A6F4ELL * ((v118 - (_BYTE *)__p) >> 3);
          if (0xD37A6F4DE9BD37A7 * ((v118 - (_BYTE *)__p) >> 3) >= 0xB21642C8590B21)
            v92 = 0x1642C8590B21642;
          else
            v92 = v91;
          if (v92)
            v93 = (char *)sub_10055ADA8((uint64_t)&v118, v92);
          else
            v93 = 0;
          v94 = &v93[184 * v90];
          *(_QWORD *)v94 = 0;
          *((_QWORD *)v94 + 1) = v111;
          *((_QWORD *)v94 + 3) = 0;
          *((_QWORD *)v94 + 4) = 0;
          *((_QWORD *)v94 + 2) = 0;
          *((double *)v94 + 5) = v110;
          *((_QWORD *)v94 + 6) = v70;
          *((double *)v94 + 7) = v109;
          *((double *)v94 + 8) = v108;
          *((double *)v94 + 9) = v71;
          *((_QWORD *)v94 + 10) = v85;
          *((double *)v94 + 11) = v114;
          *((_QWORD *)v94 + 12) = v86;
          *((_QWORD *)v94 + 13) = v87;
          *((_QWORD *)v94 + 14) = v88;
          *((_QWORD *)v94 + 15) = v115;
          *((double *)v94 + 16) = v112;
          v7.n128_f64[0] = v113;
          *((double *)v94 + 17) = v113;
          *((_QWORD *)v94 + 18) = 0;
          *((double *)v94 + 19) = v81;
          *((double *)v94 + 20) = v80;
          *((double *)v94 + 21) = v84;
          *((_DWORD *)v94 + 44) = 1;
          *((_DWORD *)v94 + 45) = v89;
          v96 = (char *)__p;
          v95 = v117;
          v97 = v94;
          if (v117 != __p)
          {
            do
            {
              v98 = *(_OWORD *)(v95 - 184);
              v99 = *(_OWORD *)(v95 - 168);
              v100 = *(_OWORD *)(v95 - 152);
              *(_OWORD *)(v97 - 136) = *(_OWORD *)(v95 - 136);
              *(_OWORD *)(v97 - 152) = v100;
              *(_OWORD *)(v97 - 168) = v99;
              *(_OWORD *)(v97 - 184) = v98;
              v101 = *(_OWORD *)(v95 - 120);
              v102 = *(_OWORD *)(v95 - 104);
              v103 = *(_OWORD *)(v95 - 88);
              *(_OWORD *)(v97 - 72) = *(_OWORD *)(v95 - 72);
              *(_OWORD *)(v97 - 88) = v103;
              *(_OWORD *)(v97 - 104) = v102;
              *(_OWORD *)(v97 - 120) = v101;
              v7 = *(__n128 *)(v95 - 56);
              v104 = *(_OWORD *)(v95 - 40);
              v105 = *(_OWORD *)(v95 - 24);
              *((_QWORD *)v97 - 1) = *((_QWORD *)v95 - 1);
              *(_OWORD *)(v97 - 24) = v105;
              *(_OWORD *)(v97 - 40) = v104;
              *(__n128 *)(v97 - 56) = v7;
              v97 -= 184;
              v95 -= 184;
            }
            while (v95 != v96);
            v95 = v96;
          }
          v65 = (unint64_t)(v94 + 184);
          __p = v97;
          v117 = v94 + 184;
          v118 = &v93[184 * v92];
          if (v95)
            operator delete(v95);
        }
        else
        {
          *(_QWORD *)v65 = 0;
          *(_QWORD *)(v65 + 8) = v111;
          *(_QWORD *)(v65 + 16) = 0;
          v7.n128_u64[1] = *((_QWORD *)&v128 + 1);
          *(_OWORD *)(v65 + 24) = v128;
          *(double *)(v65 + 40) = v110;
          *(_QWORD *)(v65 + 48) = v70;
          *(double *)(v65 + 56) = v109;
          *(double *)(v65 + 64) = v108;
          *(double *)(v65 + 72) = v71;
          *(_QWORD *)(v65 + 80) = v85;
          *(double *)(v65 + 88) = v73;
          *(_QWORD *)(v65 + 96) = v86;
          *(_QWORD *)(v65 + 104) = v87;
          *(_QWORD *)(v65 + 112) = v88;
          *(double *)(v65 + 120) = v72;
          *(double *)(v65 + 128) = v77;
          v7.n128_f64[0] = v76;
          *(double *)(v65 + 136) = v76;
          *(_QWORD *)(v65 + 144) = 0;
          *(double *)(v65 + 152) = v81;
          *(double *)(v65 + 160) = v80;
          *(double *)(v65 + 168) = v84;
          *(_DWORD *)(v65 + 176) = 1;
          *(_DWORD *)(v65 + 180) = v89;
          v65 += 184;
        }
        v117 = (char *)v65;
      }
      ++v66;
    }
    while (v66 != 4);
    v106 = (char *)__p;
    v107 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v65 - (_QWORD)__p) >> 3);
    if (v107 >= 4)
    {
      if ((void **)(a2 + 40) != &__p)
        sub_10055ABFC((char *)(a2 + 40), (char *)__p, v65, v107);
      *(_DWORD *)(a2 + 24) = 0;
      sub_1009E812C((uint64_t *)(a2 + 40), v7);
      v106 = (char *)__p;
      if (!__p)
        goto LABEL_50;
    }
    else
    {
      *(_DWORD *)(a2 + 24) = -9;
      if (!v106)
      {
LABEL_50:
        if (v119[0])
        {
          v119[1] = v119[0];
          operator delete(v119[0]);
        }
        if (v120[0])
        {
          v120[1] = v120[0];
          operator delete(v120[0]);
        }
        if (v121[0])
        {
          v121[1] = v121[0];
          operator delete(v121[0]);
        }
        if (v122[0])
        {
          v122[1] = v122[0];
          operator delete(v122[0]);
        }
        if (v123[0])
        {
          v123[1] = v123[0];
          operator delete(v123[0]);
        }
        if (v124[0])
        {
          v124[1] = v124[0];
          operator delete(v124[0]);
        }
        goto LABEL_64;
      }
    }
    v117 = v106;
    operator delete(v106);
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 24) = -5;
LABEL_64:
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
}

void sub_1009E91D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t v39;
  void *v41;
  void *v42;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  if (a35)
    operator delete(a35);
  if (a38)
    operator delete(a38);
  v41 = *(void **)(v39 - 224);
  if (v41)
  {
    *(_QWORD *)(v39 - 216) = v41;
    operator delete(v41);
  }
  v42 = *(void **)(v39 - 200);
  if (v42)
  {
    *(_QWORD *)(v39 - 192) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009E92AC(int a1, __int128 **a2, char **a3, void **a4, double a5)
{
  __int128 *v9;
  __int128 *v10;
  unsigned int v11;
  int v12;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t result;
  unsigned __int8 uu1[8];
  uint64_t v55;
  uuid_t dst;

  memset(dst, 0, sizeof(dst));
  if (a3[1] != *a3)
    uuid_copy(dst, (const unsigned __int8 *)*a3 + 24);
  *(_QWORD *)uu1 = 0;
  v55 = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    v11 = 0;
    do
    {
      if (uuid_compare((const unsigned __int8 *)v9 + 24, dst))
      {
        v12 = *((_DWORD *)v9 + 44);
        if (v12 == 1 || v12 == -1)
        {
          if (uuid_compare(uu1, (const unsigned __int8 *)v9 + 24))
          {
            uuid_copy(uu1, (const unsigned __int8 *)v9 + 24);
            ++v11;
          }
          if (v11 >= 0xB && a5 - *((double *)v9 + 1) > 2419200.0)
            break;
          v14 = (char *)a4[1];
          v15 = (char *)a4[2];
          if (v14 >= v15)
          {
            v26 = 0xD37A6F4DE9BD37A7 * ((v14 - (_BYTE *)*a4) >> 3);
            v27 = v26 + 1;
            if (v26 + 1 > 0x1642C8590B21642)
              sub_100259694();
            v28 = 0xD37A6F4DE9BD37A7 * ((v15 - (_BYTE *)*a4) >> 3);
            if (2 * v28 > v27)
              v27 = 2 * v28;
            if (v28 >= 0xB21642C8590B21)
              v29 = 0x1642C8590B21642;
            else
              v29 = v27;
            if (v29)
              v30 = (char *)sub_10055ADA8((uint64_t)(a4 + 2), v29);
            else
              v30 = 0;
            v31 = &v30[184 * v26];
            v32 = *v9;
            v33 = v9[1];
            v34 = v9[3];
            *((_OWORD *)v31 + 2) = v9[2];
            *((_OWORD *)v31 + 3) = v34;
            *(_OWORD *)v31 = v32;
            *((_OWORD *)v31 + 1) = v33;
            v35 = v9[4];
            v36 = v9[5];
            v37 = v9[7];
            *((_OWORD *)v31 + 6) = v9[6];
            *((_OWORD *)v31 + 7) = v37;
            *((_OWORD *)v31 + 4) = v35;
            *((_OWORD *)v31 + 5) = v36;
            v38 = v9[8];
            v39 = v9[9];
            v40 = v9[10];
            *((_QWORD *)v31 + 22) = *((_QWORD *)v9 + 22);
            *((_OWORD *)v31 + 9) = v39;
            *((_OWORD *)v31 + 10) = v40;
            *((_OWORD *)v31 + 8) = v38;
            v42 = (char *)*a4;
            v41 = (char *)a4[1];
            v43 = v31;
            if (v41 != *a4)
            {
              do
              {
                v44 = *(_OWORD *)(v41 - 184);
                v45 = *(_OWORD *)(v41 - 168);
                v46 = *(_OWORD *)(v41 - 152);
                *(_OWORD *)(v43 - 136) = *(_OWORD *)(v41 - 136);
                *(_OWORD *)(v43 - 152) = v46;
                *(_OWORD *)(v43 - 168) = v45;
                *(_OWORD *)(v43 - 184) = v44;
                v47 = *(_OWORD *)(v41 - 120);
                v48 = *(_OWORD *)(v41 - 104);
                v49 = *(_OWORD *)(v41 - 88);
                *(_OWORD *)(v43 - 72) = *(_OWORD *)(v41 - 72);
                *(_OWORD *)(v43 - 88) = v49;
                *(_OWORD *)(v43 - 104) = v48;
                *(_OWORD *)(v43 - 120) = v47;
                v50 = *(_OWORD *)(v41 - 56);
                v51 = *(_OWORD *)(v41 - 40);
                v52 = *(_OWORD *)(v41 - 24);
                *((_QWORD *)v43 - 1) = *((_QWORD *)v41 - 1);
                *(_OWORD *)(v43 - 24) = v52;
                *(_OWORD *)(v43 - 40) = v51;
                *(_OWORD *)(v43 - 56) = v50;
                v43 -= 184;
                v41 -= 184;
              }
              while (v41 != v42);
              v41 = (char *)*a4;
            }
            v25 = v31 + 184;
            *a4 = v43;
            a4[1] = v31 + 184;
            a4[2] = &v30[184 * v29];
            if (v41)
              operator delete(v41);
          }
          else
          {
            v16 = *v9;
            v17 = v9[1];
            v18 = v9[3];
            *((_OWORD *)v14 + 2) = v9[2];
            *((_OWORD *)v14 + 3) = v18;
            *(_OWORD *)v14 = v16;
            *((_OWORD *)v14 + 1) = v17;
            v19 = v9[4];
            v20 = v9[5];
            v21 = v9[7];
            *((_OWORD *)v14 + 6) = v9[6];
            *((_OWORD *)v14 + 7) = v21;
            *((_OWORD *)v14 + 4) = v19;
            *((_OWORD *)v14 + 5) = v20;
            v22 = v9[8];
            v23 = v9[9];
            v24 = v9[10];
            *((_QWORD *)v14 + 22) = *((_QWORD *)v9 + 22);
            *((_OWORD *)v14 + 9) = v23;
            *((_OWORD *)v14 + 10) = v24;
            *((_OWORD *)v14 + 8) = v22;
            v25 = v14 + 184;
          }
          a4[1] = v25;
        }
      }
      v9 = (__int128 *)((char *)v9 + 184);
    }
    while (v9 != v10);
  }
  sub_100581C30((uint64_t)a4, (uint64_t)a4[1], *a3, a3[1], 0xD37A6F4DE9BD37A7 * ((a3[1] - *a3) >> 3));
  result = 4294967290;
  if (a2[1] != *a2)
  {
    if (0xD37A6F4DE9BD37A7 * (((_BYTE *)a4[1] - (_BYTE *)*a4) >> 3) >= 3)
      return 0;
    else
      return 4294967290;
  }
  return result;
}

BOOL sub_1009E9600(uint64_t a1, double **a2, double *a3)
{
  double *v3;
  double *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  double v14;
  double v16;
  double v17;
  NSObject *v18;
  const char *v19;
  double v20;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  v4 = *a2;
  v3 = a2[1];
  v5 = qword_10229FC90;
  if (*a2 == v3)
  {
    v7 = 0.0;
    v6 = 0.0;
  }
  else
  {
    v6 = 0.0;
    v7 = 0.0;
    do
    {
      v8 = v4[8];
      v9 = v4[9];
      v10 = v4[7];
      v11 = v4[12];
      if (v5 != -1)
        dispatch_once(&qword_10229FC90, &stru_102164678);
      v12 = (v9 - v10) / (v8 - v10);
      v13 = qword_10229FC98;
      v14 = v11 / 3.5;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289539;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2049;
        v28 = v12;
        v29 = 2049;
        v30 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,ComputeEfficiency\", \"fhr\":\"%{private}f\", \"mets\":\"%{private}f\"}", buf, 0x26u);
        v5 = qword_10229FC90;
      }
      else
      {
        v5 = -1;
      }
      if (v14 >= 0.0 && v14 < 20.0)
      {
        v16 = v14 / v12;
        if (v14 / v12 > 20.0)
          v16 = 20.0;
        v6 = v6 + v16;
        v7 = v7 + 1.0;
      }
      v4 += 23;
    }
    while (v4 != v3);
  }
  v17 = v6 / v7;
  if (v7 <= 0.0)
    v17 = 0.0;
  *a3 = v17;
  if (v5 != -1)
    dispatch_once(&qword_10229FC90, &stru_102164678);
  v18 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v19 = "false";
    v20 = *a3;
    *(_DWORD *)buf = 68289539;
    if (v7 > 0.0)
      v19 = "true";
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2081;
    v28 = *(double *)&v19;
    v29 = 2049;
    v30 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,ComputeEfficiency\", \"canCalculateEfficiency\":%{private, location:escape_only}s, \"efficiency\":\"%{private}f\"}", buf, 0x26u);
  }
  return v7 > 0.0;
}

double sub_1009E9884(double a1, double a2, uint64_t a3, double **a4)
{
  double *v4;
  double *v5;
  double *v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  double v15;
  float v16;
  float v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  double *v25;
  double *v26;
  double *v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  NSObject *v34;
  const char *v35;
  uint8_t *v36;
  double v38;
  int v39;
  unint64_t v40;
  __int16 v41;
  double v42;
  uint8_t buf[4];
  unint64_t v44;
  __int16 v45;
  double v46;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 == v5)
    return 1.79769313e308;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = a1 * 0.959999979 + 0.00659999996;
  v11 = a1 * 0.330000013 + -0.023;
  v12 = 0.0;
  do
  {
    v13 = v4[7];
    v14 = v4[8];
    v15 = v4[9];
    v16 = v15;
    v17 = (v14 - v16) / (v14 - v13);
    v18 = v4[12] / v15;
    v19 = v18 - (v10 + v11 * log((float)(1.0 - v17)));
    v20 = (v4[1] - a2 + 18144000.0) / 36288000.0 + 0.5;
    if (v8 >= v7)
    {
      v21 = ((char *)v8 - (char *)v9) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        sub_100259694();
      if (v7 - v9 > v22)
        v22 = v7 - v9;
      if ((unint64_t)((char *)v7 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0)
        v23 = 0xFFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
      {
        if (v23 >> 60)
          sub_10025955C();
        v24 = (char *)operator new(16 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = (double *)&v24[16 * v21];
      *v25 = v19;
      v25[1] = v20;
      if (v8 == v9)
      {
        v27 = v8;
        v9 = (double *)&v24[16 * v21];
      }
      else
      {
        v26 = (double *)&v24[16 * v21];
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v8 - 1);
          v26 -= 2;
          v8 -= 2;
        }
        while (v8 != v9);
        v27 = v9;
        v9 = v26;
      }
      v7 = (double *)&v24[16 * v23];
      v8 = v25 + 2;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v8 = v19;
      v8[1] = v20;
      v8 += 2;
    }
    v12 = v12 + v20;
    v4 += 23;
  }
  while (v4 != v5);
  if (v9 == v8)
  {
    v33 = 1.79769313e308;
  }
  else
  {
    v28 = ((char *)v8 - (char *)v9) >> 4;
    sub_1009EA698((uint64_t)v9, v8, 126 - 2 * __clz(v28), 1);
    v29 = v12 - v9[1];
    v30 = 0;
    if (v29 > v12 * 0.5)
    {
      v31 = v9 + 3;
      do
      {
        LODWORD(v30) = v30 + 1;
        v32 = *v31;
        v31 += 2;
        v29 = v29 - v32;
      }
      while (v29 > v12 * 0.5);
      v30 = v30;
    }
    v33 = v9[2 * v30];
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102164678);
    v34 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      v44 = v28;
      v45 = 2048;
      v46 = v33;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "AlgoName,AdaptiveOutdoorPedestrianModel,numHistoricalResiduals,%ld,median,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102164678);
      v39 = 134218240;
      v40 = v28;
      v41 = 2048;
      v42 = v33;
      LODWORD(v38) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "AlgoName,AdaptiveOutdoorPedestrianModel,numHistoricalResiduals,%ld,median,%f", &v39, v38);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "double CLVO2MaxModel::AdaptiveOutdoorPedestrianModel::computeWeightedMedianOfResiduals(const std::vector<VO2MaxSummary> &, double, CFAbsoluteTime) const", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
  }
  operator delete(v9);
  return v33;
}

void sub_1009E9C94(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_1009E9CB8(float *a1, _QWORD *a2, int *a3, __n128 a4, double a5, double a6)
{
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  long double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _BOOL4 v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  double v33;
  double *v34;
  uint64_t v35;
  double v36;
  double v37;
  double *v38;
  double v39;
  double v40;
  double v43;
  NSObject *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  const char *v63;
  uint8_t *v64;
  NSObject *v65;
  unint64_t v66;
  int v67;
  double v68;
  double v69;
  unint64_t v70;
  int v71;
  double v72;
  double v73;
  const char *v74;
  uint8_t *v75;
  uint64_t v76;
  double v77;
  _QWORD *v78;
  float *v79;
  double v80;
  __n128 v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  unsigned __int8 uu1[8];
  uint64_t v91;
  int v92;
  unint64_t v93;
  __int16 v94;
  _BYTE v95[10];
  _BYTE v96[10];
  _BYTE v97[10];
  _BYTE v98[10];
  _BYTE v99[10];
  _BYTE v100[10];
  uint64_t v101;
  __int16 v102;
  long double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  _BOOL4 v107;
  __int16 v108;
  double v109;
  __int16 v110;
  int v111;
  uint8_t buf[4];
  unint64_t v113;
  __int16 v114;
  _BYTE v115[10];
  _BYTE v116[10];
  _BYTE v117[10];
  _BYTE v118[10];
  _BYTE v119[10];
  _BYTE v120[10];
  uint64_t v121;
  __int16 v122;
  long double v123;
  __int16 v124;
  double v125;
  __int16 v126;
  _BOOL4 v127;
  __int16 v128;
  double v129;
  __int16 v130;
  int v131;

  v8 = a4.n128_f64[0];
  v79 = a1;
  *a3 = 0;
  *(_QWORD *)uu1 = 0;
  v91 = 0;
  v9 = a5 * 0.2 + -6.4;
  v10 = 0.0;
  if (v9 < 0.0)
    v9 = 0.0;
  if (v9 <= 1.0)
    v11 = v9;
  else
    v11 = 1.0;
  v12 = *a2;
  v13 = a2[1];
  v78 = a2;
  if (*a2 != v13)
  {
    v14 = 0;
    v89 = v8 * 0.959999979 + 0.00659999996;
    v77 = v8;
    v87 = 1.0 - v11;
    v88 = v8 * 0.330000013 + -0.023;
    v86 = v11;
    v15 = ((1.0 - v11) * 2.5 + v11 * 4.0) * 3.5;
    v84 = -0.02;
    v80 = 0.02;
    a4.n128_u64[0] = 134221056;
    v81 = a4;
    v85 = -0.07;
    v83 = 0.1;
    v16 = 0.0;
    v17 = 0.0;
    while (1)
    {
      v18 = *(double *)(v12 + 72);
      v19 = 0.0;
      if (v18 > 0.0)
        v19 = *(double *)(v12 + 96) / v18;
      v20 = *(double *)(v12 + 56);
      v21 = *(double *)(v12 + 64);
      v22 = v18;
      v23 = (v21 - v22) / (v21 - v20);
      v24 = (float)(1.0 - v23);
      v25 = v19 - (v89 + v88 * log(v24));
      if (a6 == 1.79769313e308)
        break;
      v26 = 1.0;
      v27 = v86;
      if (v25 - a6 >= v84)
      {
        v29 = v25 - a6 > v80;
        goto LABEL_15;
      }
      v28 = 0.0;
      v29 = 1;
LABEL_28:
      if (v24 >= 0.3)
        v39 = v26;
      else
        v39 = 0.0;
      v40 = (v87 * v39 + v24 * v27) * v28;
      if ((*(_DWORD *)(v12 + 180) == 3 || *(_QWORD *)(v12 + 48) > 0x31uLL) && *(double *)(v12 + 96) > v15)
        v43 = v40;
      else
        v43 = 0.0;
      if (v43 > 0.0)
      {
        ++v14;
        if (uuid_compare(uu1, (const unsigned __int8 *)(v12 + 24)))
        {
          uuid_copy(uu1, (const unsigned __int8 *)(v12 + 24));
          ++*a3;
        }
      }
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102164678);
      v44 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        v45 = *(_QWORD *)(v12 + 8);
        v46 = *(_QWORD *)(v12 + 48);
        v47 = *(_QWORD *)(v12 + 56);
        v48 = *(_QWORD *)(v12 + 64);
        v49 = *(_QWORD *)(v12 + 72);
        v50 = *(_QWORD *)(v12 + 96);
        v51 = *(_QWORD *)(v12 + 80);
        v52 = *(_QWORD *)(v12 + 112);
        v53 = *(_DWORD *)(v12 + 180);
        *(_DWORD *)buf = v81.n128_u32[0];
        v113 = v45;
        v114 = 2048;
        *(_QWORD *)v115 = v46;
        *(_WORD *)&v115[8] = 2048;
        *(_QWORD *)v116 = v47;
        *(_WORD *)&v116[8] = 2048;
        *(_QWORD *)v117 = v48;
        *(_WORD *)&v117[8] = 2048;
        *(_QWORD *)v118 = v49;
        *(_WORD *)&v118[8] = 2048;
        *(_QWORD *)v119 = v50;
        *(_WORD *)&v119[8] = 2048;
        *(_QWORD *)v120 = v51;
        *(_WORD *)&v120[8] = 2048;
        v121 = v52;
        v122 = 2048;
        v123 = v24;
        v124 = 2048;
        v125 = v25;
        v126 = 1024;
        v127 = v29;
        v128 = 2048;
        v129 = v43;
        v130 = 1024;
        v131 = v53;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "VO2Max,AdaptiveOutdoorPedestrianModel,Longitudinal Estimate,ts,%.9f,size,%lld,hrMin,%f,hrMax,%f,hrMean,%f,vo2Mean,%f,hrConfidenceMean,%f,gradeMean,%f,oneMinusFHR,%f,residual,%f,failHistResidCheck,%d,confidence,%f,sessionType,%d", buf, 0x7Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102164678);
        v54 = *(_QWORD *)(v12 + 8);
        v55 = *(_QWORD *)(v12 + 48);
        v56 = *(_QWORD *)(v12 + 56);
        v57 = *(_QWORD *)(v12 + 64);
        v58 = *(_QWORD *)(v12 + 72);
        v59 = *(_QWORD *)(v12 + 96);
        v60 = *(_QWORD *)(v12 + 80);
        v61 = *(_QWORD *)(v12 + 112);
        v62 = *(_DWORD *)(v12 + 180);
        v92 = v81.n128_u32[0];
        v93 = v54;
        v94 = 2048;
        *(_QWORD *)v95 = v55;
        *(_WORD *)&v95[8] = 2048;
        *(_QWORD *)v96 = v56;
        *(_WORD *)&v96[8] = 2048;
        *(_QWORD *)v97 = v57;
        *(_WORD *)&v97[8] = 2048;
        *(_QWORD *)v98 = v58;
        *(_WORD *)&v98[8] = 2048;
        *(_QWORD *)v99 = v59;
        *(_WORD *)&v99[8] = 2048;
        *(_QWORD *)v100 = v60;
        *(_WORD *)&v100[8] = 2048;
        v101 = v61;
        v102 = 2048;
        v103 = v24;
        v104 = 2048;
        v105 = v25;
        v106 = 1024;
        v107 = v29;
        v108 = 2048;
        v109 = v43;
        v110 = 1024;
        v111 = v62;
        LODWORD(v76) = 124;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2Max,AdaptiveOutdoorPedestrianModel,Longitudinal Estimate,ts,%.9f,size,%lld,hrMin,%f,hrMax,%f,hrMean,%f,vo2Mean,%f,hrConfidenceMean,%f,gradeMean,%f,oneMinusFHR,%f,residual,%f,failHistResidCheck,%d,confidence,%f,sessionType,%d", COERCE_DOUBLE(&v92), v76, v77, *(double *)&v78, *(double *)&v79, v80, v81.n128_f64[0], v81.n128_f64[1], v82, v83,
          LODWORD(v84),
          v85,
          LODWORD(v86));
        v64 = (uint8_t *)v63;
        sub_100512490("Generic", 1, 0, 2, "auto CLVO2MaxModel::AdaptiveOutdoorPedestrianModel::computeLongitudinalEstimate(const std::vector<VO2MaxSummary> &, double, double, double, uint32_t &)::(anonymous class)::operator()(const VO2MaxSummary &) const", "%s\n", v63);
        if (v64 != buf)
          free(v64);
      }
      v16 = v16 + v43 * v25;
      v17 = v17 + v43;
      v12 += 184;
      if (v12 == v13)
      {
        v10 = v16 / (v17 + 2.22044605e-16);
        goto LABEL_55;
      }
    }
    v29 = 0;
    v26 = 1.0;
    v27 = v86;
LABEL_15:
    v28 = 0.0;
    if (v25 >= v85 && v25 <= v83 && !v29)
    {
      v30 = 0;
      v31 = (double *)qword_101BEA8A8;
      do
      {
        if (*v31 >= *(double *)(v12 + 80))
          break;
        ++v30;
        v31 += 2;
      }
      while (v30 != 7);
      v32 = 0;
      v33 = *(double *)&qword_101BEA8A8[2 * v30 + 1];
      v34 = (double *)qword_101BEA918;
      do
      {
        if (*v34 >= (double)*(unint64_t *)(v12 + 48))
          break;
        ++v32;
        v34 += 2;
      }
      while (v32 != 9);
      v35 = 0;
      v36 = v33 * *(double *)&qword_101BEA918[2 * v32 + 1];
      v37 = fabs(*(double *)(v12 + 112));
      v38 = (double *)qword_101BEA9A8;
      do
      {
        if (*v38 >= v37)
          break;
        ++v35;
        v38 += 2;
      }
      while (v35 != 5);
      v29 = 0;
      v28 = v36 * *(double *)&qword_101BEA9A8[2 * v35 + 1];
    }
    goto LABEL_28;
  }
  v14 = 0;
LABEL_55:
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102164678);
  v65 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v66 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v78[1] - *v78) >> 3);
    v67 = *a3;
    v68 = *v79;
    v69 = v79[1];
    *(_DWORD *)buf = 134219776;
    v113 = v66;
    v114 = 1024;
    *(_DWORD *)v115 = v14;
    *(_WORD *)&v115[4] = 1024;
    *(_DWORD *)&v115[6] = v67;
    *(_WORD *)v116 = 2048;
    *(double *)&v116[2] = a6;
    *(_WORD *)v117 = 2048;
    *(double *)&v117[2] = v68;
    *(_WORD *)v118 = 2048;
    *(double *)&v118[2] = v69;
    *(_WORD *)v119 = 2048;
    *(double *)&v119[2] = v10;
    *(_WORD *)v120 = 2048;
    *(_QWORD *)&v120[2] = 0x3FB999999999999ALL;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "VO2Max,AdaptiveOutdoorPedestrianModel,Longitudinal Estimate,numClusters,%lu,numClustersContr,%u,numWorkoutsContr,%u,medianResidual,%f,hrMin,%f,hrMax,%f,meanResidual,%f,clusterResidualBoundsMax,%f", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102164678);
    v70 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v78[1] - *v78) >> 3);
    v71 = *a3;
    v72 = *v79;
    v73 = v79[1];
    v92 = 134219776;
    v93 = v70;
    v94 = 1024;
    *(_DWORD *)v95 = v14;
    *(_WORD *)&v95[4] = 1024;
    *(_DWORD *)&v95[6] = v71;
    *(_WORD *)v96 = 2048;
    *(double *)&v96[2] = a6;
    *(_WORD *)v97 = 2048;
    *(double *)&v97[2] = v72;
    *(_WORD *)v98 = 2048;
    *(double *)&v98[2] = v73;
    *(_WORD *)v99 = 2048;
    *(double *)&v99[2] = v10;
    *(_WORD *)v100 = 2048;
    *(_QWORD *)&v100[2] = 0x3FB999999999999ALL;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "VO2Max,AdaptiveOutdoorPedestrianModel,Longitudinal Estimate,numClusters,%lu,numClustersContr,%u,numWorkoutsContr,%u,medianResidual,%f,hrMin,%f,hrMax,%f,meanResidual,%f,clusterResidualBoundsMax,%f", &v92, 74, LODWORD(v77), *(double *)&v78, *(double *)&v79, v80, v81.n128_f64[0], v81.n128_f64[1]);
    v75 = (uint8_t *)v74;
    sub_100512490("Generic", 1, 0, 2, "double CLVO2MaxModel::AdaptiveOutdoorPedestrianModel::computeLongitudinalEstimate(const std::vector<VO2MaxSummary> &, double, double, double, uint32_t &) const", "%s\n", v74);
    if (v75 != buf)
      free(v75);
  }
}

double sub_1009EA568(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  double result;

  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    v7 = *(_DWORD *)(a4 + 104);
    do
    {
      v8 = *(double *)v5 - a1;
      if (v7 != 3 && v8 <= 120.0)
        *(_DWORD *)(v5 + 64) = 0;
      if (a5 == 17 && v8 >= 2700.0)
        *(_DWORD *)(v5 + 64) = 0;
      v5 += 72;
    }
    while (v5 != v6);
  }
  result = 0.06;
  *(_OWORD *)(a4 + 120) = xmmword_101BEA880;
  return result;
}

void sub_1009EA5D4(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

_QWORD *sub_1009EA600(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100259C18(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1009EA67C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009EA698(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  double *v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  BOOL v24;
  double v25;
  unint64_t v26;
  double *v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double *v32;
  double v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *v36;
  double *v37;
  double v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double *v42;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  double *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  double *v57;
  double *v58;
  double v59;
  uint64_t v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  double *v72;
  double v73;
  uint64_t v74;
  double *v75;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double *v80;
  double v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

double *sub_1009EAD90(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *result)
      {
        v7 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL sub_1009EAE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 16);
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      sub_1009EAD90((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_1009EB03C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a2 - 16));
      return 1;
    case 5:
      v17 = (__int128 *)(a1 + 16);
      v18 = (__int128 *)(a1 + 32);
      v19 = (__int128 *)(a1 + 48);
      sub_1009EB03C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a1 + 48));
      v21 = *(double *)(a2 - 16);
      v20 = (__int128 *)(a2 - 16);
      if (v21 < *(double *)(a1 + 48))
      {
        v22 = *v19;
        *v19 = *v20;
        *v20 = v22;
        if (*(double *)v19 < *(double *)v18)
        {
          v23 = *v18;
          *v18 = *v19;
          *v19 = v23;
          if (*(double *)v18 < *(double *)v17)
          {
            v24 = *v17;
            *v17 = *v18;
            *v18 = v24;
            if (*(double *)(a1 + 16) < *(double *)a1)
            {
              v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (double *)(a1 + 32);
      sub_1009EAD90((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      v13 = *(_QWORD *)(v9 + 8);
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = a1 + v14 + 48;
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *(double *)v16 = v12;
      *(_QWORD *)(v16 + 8) = v13;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = (double *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

__n128 sub_1009EB03C(double *a1, double *a2, double *a3, unint64_t *a4)
{
  __n128 result;

  sub_1009EAD90(a1, a2, a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2;
      if (*a2 < *a1)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void sub_1009EB0D8()
{
  operator new();
}

void sub_1009EB118()
{
  operator delete();
}

void sub_1009EB140(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLGyro", 2);
}

void sub_1009EB238(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100261F44((uint64_t)(v1 + 10));
  sub_1009BAD18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009EB268(double *a1)
{
  io_service_t MatchingService;
  void *CFProperty;
  CFTypeID v4;
  _WORD *v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  unsigned int v13;
  unsigned int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  double v19;
  NSObject *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  _BYTE v32[24];
  uint8_t buf[4];
  _BYTE v34[10];
  _DWORD v35[406];
  const __CFString *v36;
  NSDictionary *v37;
  const __CFString *v38;
  const __CFString *v39;

  if (sub_1009ECBBC())
  {
    v38 = CFSTR("name");
    v39 = CFSTR("gyro");
    v36 = CFSTR("IOPropertyMatch");
    v37 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
    MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1));
    CFProperty = (void *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("gyro-interrupt-calibration"), kCFAllocatorDefault, 0);
    IOObjectRelease(MatchingService);
    if (CFProperty)
    {
      v4 = CFGetTypeID(CFProperty);
      if (v4 == CFDataGetTypeID())
      {
        v5 = objc_msgSend(CFProperty, "bytes");
        v6 = objc_msgSend(CFProperty, "length");
        if ((unint64_t)v6 > 7)
        {
          if (*v5)
          {
            v13 = (unsigned __int16)v5[2];
            v14 = (unsigned __int16)v5[4];
            if (qword_10229FD50 != -1)
              dispatch_once(&qword_10229FD50, &stru_102164750);
            v15 = off_10229FD58;
            if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)v34 = v13;
              *(_WORD *)&v34[4] = 1026;
              *(_DWORD *)&v34[6] = v14;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "gyro-interrupt-calibration,dt,%{public}u,rate,%{public}u", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD50 != -1)
                dispatch_once(&qword_10229FD50, &stru_102164750);
              *(_DWORD *)v32 = 67240448;
              *(_DWORD *)&v32[4] = v13;
              *(_WORD *)&v32[8] = 1026;
              *(_DWORD *)&v32[10] = v14;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "gyro-interrupt-calibration,dt,%{public}u,rate,%{public}u", v32, 14);
              v25 = (uint8_t *)v24;
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v24);
              if (v25 != buf)
                free(v25);
            }
            sub_100197040();
            v16 = sub_1001AA9A8();
            if (!v14 || v16 == 74 || v16 == 75)
            {
              if (v13 >= 0x5DC)
                v14 = 200;
              else
                v14 = 800;
              if (qword_10229FD50 != -1)
                dispatch_once(&qword_10229FD50, &stru_102164750);
              v17 = off_10229FD58;
              if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67240192;
                *(_DWORD *)v34 = v14;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Manually set gyro-interrupt-calibration to %{public}u", buf, 8u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD50 != -1)
                  dispatch_once(&qword_10229FD50, &stru_102164750);
                *(_DWORD *)v32 = 67240192;
                *(_DWORD *)&v32[4] = v14;
                LODWORD(v31) = 8;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "Manually set gyro-interrupt-calibration to %{public}u", v32, v31);
                v30 = (uint8_t *)v29;
                sub_100512490("Generic", 1, 0, 0, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v29);
                if (v30 != buf)
                  free(v30);
              }
            }
            *a1 = (double)v13 * 0.000001 * (double)v14;
            if (qword_10229FD50 != -1)
              dispatch_once(&qword_10229FD50, &stru_102164750);
            v18 = off_10229FD58;
            if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
            {
              v19 = *a1;
              *(_DWORD *)buf = 67240704;
              *(_DWORD *)v34 = v14;
              *(_WORD *)&v34[4] = 1026;
              *(_DWORD *)&v34[6] = v13;
              LOWORD(v35[0]) = 2050;
              *(double *)((char *)v35 + 2) = v19;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "dt at rate %{public}u Hz = %{public}u us, scaleFactor = %{public}f", buf, 0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD50 != -1)
                dispatch_once(&qword_10229FD50, &stru_102164750);
              v26 = *a1;
              *(_DWORD *)v32 = 67240704;
              *(_DWORD *)&v32[4] = v14;
              *(_WORD *)&v32[8] = 1026;
              *(_DWORD *)&v32[10] = v13;
              *(_WORD *)&v32[14] = 2050;
              *(double *)&v32[16] = v26;
              LODWORD(v31) = 24;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "dt at rate %{public}u Hz = %{public}u us, scaleFactor = %{public}f", v32, v31);
              v28 = (uint8_t *)v27;
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v27);
              if (v28 != buf)
                free(v28);
            }
            v9 = 1;
            goto LABEL_20;
          }
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_102164750);
          v20 = off_10229FD58;
          if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240448;
            *(_DWORD *)v34 = 0;
            *(_WORD *)&v34[4] = 1026;
            *(_DWORD *)&v34[6] = 1;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "gyro-interrupt-calibration version (%{public}u) less than expected version (%{public}u)", buf, 0xEu);
          }
          v9 = 0;
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_20;
          bzero(buf, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_102164750);
          *(_DWORD *)v32 = 67240448;
          *(_DWORD *)&v32[4] = 0;
          *(_WORD *)&v32[8] = 1026;
          *(_DWORD *)&v32[10] = 1;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "gyro-interrupt-calibration version (%{public}u) less than expected version (%{public}u)", v32, 14, *(_OWORD *)v32, *(_QWORD *)&v32[16]);
        }
        else
        {
          v7 = v6;
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_102164750);
          v8 = off_10229FD58;
          if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)v34 = v7;
            *(_WORD *)&v34[8] = 1026;
            v35[0] = 8;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "gyro-interrupt-calibration length %{public}lu less than expected length %{public}u", buf, 0x12u);
          }
          v9 = 0;
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_20;
          bzero(buf, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_102164750);
          *(_DWORD *)v32 = 134349312;
          *(_QWORD *)&v32[4] = v7;
          *(_WORD *)&v32[12] = 1026;
          *(_DWORD *)&v32[14] = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "gyro-interrupt-calibration length %{public}lu less than expected length %{public}u", v32, 18, *(_OWORD *)v32, *(_QWORD *)&v32[16]);
        }
        v21 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v10);
        if (v21 != buf)
          free(v21);
        v9 = 0;
LABEL_20:
        CFRelease(CFProperty);
        return v9;
      }
    }
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102164750);
    v11 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Cannot get gyro-interrupt-calibration property", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102164750);
      *(_WORD *)v32 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "Cannot get gyro-interrupt-calibration property", v32, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v9 = 0;
    if (CFProperty)
      goto LABEL_20;
  }
  else
  {
    *a1 = 1.0;
    return 1;
  }
  return v9;
}

_QWORD *sub_1009EBBF4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1021646C8;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1009EBC38(a1, *(_DWORD *)(a1 + 32));
  sub_100261F44(a1 + 80);
  return sub_1009BAD18((_QWORD *)a1);
}

BOOL sub_1009EBC38(uint64_t a1, int a2)
{
  _BOOL8 v4;
  double v5;
  double v6;
  BOOL v7;
  void *v8;
  double v9;
  uint64_t v11;

  v4 = sub_1009EBD74(a1);
  if (v4)
  {
    v6 = *(double *)(a1 + 64);
    v5 = *(double *)(a1 + 72);
    if (v6 == 0.0 || (v5 != 0.0 ? (v7 = v5 < v6) : (v7 = 0), v7))
      v6 = *(double *)(a1 + 72);
    v8 = objc_autoreleasePoolPush();
    (*(void (**)(_QWORD, const __CFString *, _UNKNOWN **))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), CFSTR("GyroProperties"), &off_10221FEF8);
    v9 = 0.0;
    if (v6 != 1.79769313e308)
      v9 = v6;
    sub_10006B4E0(*(_QWORD *)(a1 + 80), v9);
    if ((a2 & 0x80000000) == 0)
    {
      (*(void (**)(_QWORD, const __CFString *, NSNumber *))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), CFSTR("GyroExtLevelTriggerSync"), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2 != 0));
      *(_DWORD *)(a1 + 32) = a2;
    }
    objc_autoreleasePoolPop(v8);
    v11 = 0x3F8EB851EB851EB8;
    sub_1009EC1C8(a1, (double *)&v11);
  }
  return v4;
}

void sub_1009EBD50(uint64_t a1)
{
  sub_1009EBBF4(a1);
  operator delete();
}

BOOL sub_1009EBD74(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  _DWORD v21[4];
  uint8_t buf[1640];

  v1 = (uint64_t *)(a1 + 80);
  if (!*(_QWORD *)(a1 + 80) && (sub_1001E4BF4() & 2) != 0)
  {
    v3 = (uint64_t *)sub_100A07FA0();
    v19 = 0x90000FF00;
    v20 = 0;
    sub_1018E4078(v3, (uint64_t)&v19, (uint64_t *)buf);
    sub_1002B7674((uint64_t)v1, (__int128 *)buf);
    v4 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = objc_msgSend(&off_10221FED0, "mutableCopy");
    v18 = 0;
    v8 = sub_100127B9C();
    sub_100081C10(v8, buf);
    v9 = sub_100526244(*(uint64_t *)buf, "IMULocationID", &v18);
    if (v18)
      v10 = 1;
    else
      v10 = v9;
    v11 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_15;
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v10)
        goto LABEL_16;
    }
    else
    {
LABEL_15:
      if (v10)
      {
LABEL_16:
        objc_msgSend(v7, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18), CFSTR("LocationID"));
        if (qword_10229FD60 != -1)
          dispatch_once(&qword_10229FD60, &stru_102164730);
        v14 = qword_10229FD68;
        if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Setting Gyro matching properties with IMULocationID %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD60 != -1)
            dispatch_once(&qword_10229FD60, &stru_102164730);
          v21[0] = 67109120;
          v21[1] = v18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 0, "Setting Gyro matching properties with IMULocationID %d", v21);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGyro::openHidDevice()", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
    }
    sub_100A0A9EC(*v1, v7);
    sub_100A0A4BC(*(uint64_t **)(a1 + 80), (uint64_t)sub_1009EC0B0, a1);

  }
  return *v1 != 0;
}

void sub_1009EC080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009EC0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float FloatValue;
  float v8;
  float v9;
  unint64_t TimeStamp;
  unsigned int IntegerValue;
  double v12;
  float v13[3];

  result = IOHIDEventGetType(a4);
  if ((_DWORD)result == 20)
  {
    FloatValue = IOHIDEventGetFloatValue(a4, 1310720);
    v13[0] = FloatValue;
    v8 = IOHIDEventGetFloatValue(a4, 1310721);
    v13[1] = v8;
    v9 = IOHIDEventGetFloatValue(a4, 1310722);
    v13[2] = v9;
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v12 = sub_100127828(TimeStamp);
    IntegerValue = IOHIDEventGetIntegerValue(a4, 1310724);
    return sub_1009ECDF0(a1, v13, &v12, IntegerValue);
  }
  return result;
}

double sub_1009EC168(uint64_t a1, double *a2)
{
  double result;

  if ((sub_1001B7910() & 1) != 0 || (sub_1001B7910() & 2) != 0)
  {
    result = *(double *)(a1 + 40);
    return result * *a2;
  }
  result = *a2;
  if (*a2 <= 0.01 && result > 0.0)
  {
    a2 = (double *)(a1 + 40);
    return result * *a2;
  }
  return result;
}

BOOL sub_1009EC1C8(uint64_t a1, double *a2)
{
  _BOOL8 v4;
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  v4 = sub_1009EBD74(a1);
  if (v4)
  {
    v5 = sub_10006BC9C(*(_QWORD *)(a1 + 80), *a2);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102164750);
    v6 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting gyro batch interval to: %{public}ld us", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102164750);
      v10 = 134349056;
      v11 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Setting gyro batch interval to: %{public}ld us", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGyro::setGyroBatchInterval(const CFTimeInterval &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return v4;
}

BOOL sub_1009EC394(uint64_t a1, int a2)
{
  _BOOL8 v4;
  NSObject *v5;
  const CFBooleanRef *v6;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v4 = sub_1009EBD74(a1);
  if (v4)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102164750);
    v5 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting gyro low noise mode: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102164750);
      v10[0] = 67240192;
      v10[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Setting gyro low noise mode: %{public}d", v10, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGyro::setLowNoiseMode(BOOL)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v6 = &kCFBooleanTrue;
    if (!a2)
      v6 = &kCFBooleanFalse;
    (*(void (**)(_QWORD, const __CFString *, const CFBooleanRef))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), CFSTR("GyroForcePWMMode"), *v6);
  }
  return v4;
}

