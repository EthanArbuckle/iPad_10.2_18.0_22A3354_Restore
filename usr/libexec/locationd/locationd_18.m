void sub_100B378EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172F28;
  sub_100B37840(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B3791C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102172F28;
  sub_100B37840(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100B37960()
{
  operator new();
}

uint64_t sub_100B379B4(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 72);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 72) & 1) != 0)
    {
      v3 = *(_QWORD *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(result + 72);
      }
    }
    if ((v2 & 2) != 0)
    {
      v4 = *(_QWORD *)(result + 16);
      if (v4)
      {
        if (*(int *)(v4 + 16) >= 1)
        {
          v5 = 0;
          do
          {
            v6 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
            ++v5;
          }
          while (v5 < *(int *)(v4 + 16));
        }
        *(_DWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 4) != 0)
    {
      v7 = *(_QWORD *)(v1 + 24);
      if (v7)
      {
        if (*(int *)(v7 + 16) >= 1)
        {
          v8 = 0;
          do
          {
            v9 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v8);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
            ++v8;
          }
          while (v8 < *(int *)(v7 + 16));
        }
        *(_DWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 8) != 0)
    {
      v10 = *(_QWORD *)(v1 + 32);
      if (v10)
      {
        *(_DWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 28) = 0;
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    *(_QWORD *)(v1 + 40) = 0;
    *(_DWORD *)(v1 + 64) = -1;
    if ((v2 & 0x40) != 0)
    {
      result = *(_QWORD *)(v1 + 48);
      if (result)
      {
        result = sub_100B36FA0(result);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      v11 = *(_QWORD *)(v1 + 56);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v11 + 8);
          if (result)
            result = sub_100B38A5C(result);
        }
        *(_DWORD *)(v11 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_100B37AFC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_100B38A5C(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B37B30(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  int *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  _BYTE *v28;
  int *v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  _BYTE *v46;
  _BYTE *v47;
  unsigned int v48;
  uint64_t result;
  _BYTE *v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  _BYTE *v59;
  uint64_t v60;
  char *v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68[2];

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_27;
        *(_DWORD *)(a1 + 72) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v68[0] = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v12 = *((_DWORD *)this + 14);
        v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13)
          return 0;
        v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B31A08(v8, this, v15) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        v16 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v16, 1);
        v18 = v16 - 1;
        if (v18 < 0 == v17)
          *((_DWORD *)this + 14) = v18;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 != 18)
          continue;
        *((_QWORD *)this + 1) = v19 + 1;
        goto LABEL_39;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_27;
LABEL_39:
        *(_DWORD *)(a1 + 72) |= 2u;
        v20 = *(int **)(a1 + 16);
        if (!v20)
          operator new();
        v68[0] = 0;
        v21 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v21;
          *((_QWORD *)this + 1) = v21 + 1;
        }
        v22 = *((_DWORD *)this + 14);
        v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23)
          return 0;
        v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B32F70(v20, this, v25) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        v26 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v26, 1);
        v27 = v26 - 1;
        if (v27 < 0 == v17)
          *((_DWORD *)this + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 != 26)
          continue;
        *((_QWORD *)this + 1) = v28 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 72) |= 4u;
        v29 = *(int **)(a1 + 24);
        if (!v29)
          operator new();
        v68[0] = 0;
        v30 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v30;
          *((_QWORD *)this + 1) = v30 + 1;
        }
        v31 = *((_DWORD *)this + 14);
        v32 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v31 + 1;
        if (v31 >= v32)
          return 0;
        v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B32F70(v29, this, v34) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v33);
        v35 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v35, 1);
        v36 = v35 - 1;
        if (v36 < 0 == v17)
          *((_DWORD *)this + 14) = v36;
        v37 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v37 >= *((_QWORD *)this + 2) || *v37 != 34)
          continue;
        *((_QWORD *)this + 1) = v37 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 72) |= 8u;
        v38 = *(_QWORD *)(a1 + 32);
        if (!v38)
          operator new();
        v68[0] = 0;
        v39 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v39 >= *((_QWORD *)this + 2) || *v39 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v39;
          *((_QWORD *)this + 1) = v39 + 1;
        }
        v40 = *((_DWORD *)this + 14);
        v41 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v40 + 1;
        if (v40 >= v41)
          return 0;
        v42 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B3241C(v38, this, v43) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v42);
        v44 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v44, 1);
        v45 = v44 - 1;
        if (v45 < 0 == v17)
          *((_DWORD *)this + 14) = v45;
        v46 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v46 >= *((_QWORD *)this + 2) || *v46 != 41)
          continue;
        *((_QWORD *)this + 1) = v46 + 1;
LABEL_81:
        *(_QWORD *)v68 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v68) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v68;
        *(_DWORD *)(a1 + 72) |= 0x10u;
        v47 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v47 >= v10 || *v47 != 48)
          continue;
        v11 = v47 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_85:
        v68[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68);
          if (!(_DWORD)result)
            return result;
          v48 = v68[0];
        }
        else
        {
          v48 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (v48 + 1 <= 3)
        {
          *(_DWORD *)(a1 + 72) |= 0x20u;
          *(_DWORD *)(a1 + 64) = v48;
        }
        v50 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v50 >= *((_QWORD *)this + 2) || *v50 != 58)
          continue;
        *((_QWORD *)this + 1) = v50 + 1;
LABEL_95:
        *(_DWORD *)(a1 + 72) |= 0x40u;
        v51 = *(_QWORD *)(a1 + 48);
        if (!v51)
          operator new();
        v68[0] = 0;
        v52 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v52 >= *((_QWORD *)this + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v52;
          *((_QWORD *)this + 1) = v52 + 1;
        }
        v53 = *((_DWORD *)this + 14);
        v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54)
          return 0;
        v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B36FF4(v51, this, v56) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        v57 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v57, 1);
        v58 = v57 - 1;
        if (v58 < 0 == v17)
          *((_DWORD *)this + 14) = v58;
        v59 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v59 >= *((_QWORD *)this + 2) || *v59 != 66)
          continue;
        *((_QWORD *)this + 1) = v59 + 1;
LABEL_109:
        *(_DWORD *)(a1 + 72) |= 0x80u;
        v60 = *(_QWORD *)(a1 + 56);
        if (!v60)
          operator new();
        v68[0] = 0;
        v61 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v61 >= *((_QWORD *)this + 2) || *v61 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0;
        }
        else
        {
          v68[0] = *v61;
          *((_QWORD *)this + 1) = v61 + 1;
        }
        v62 = *((_DWORD *)this + 14);
        v63 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v62 + 1;
        if (v62 >= v63)
          return 0;
        v64 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B38F78(v60, this, v65) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v64);
        v66 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v66, 1);
        v67 = v66 - 1;
        if (v67 < 0 == v17)
          *((_DWORD *)this + 14) = v67;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_53;
        goto LABEL_27;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_67;
        goto LABEL_27;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_81;
        goto LABEL_27;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_27;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_85;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_95;
        goto LABEL_27;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_27;
        goto LABEL_109;
      default:
        v7 = TagFallback & 7;
LABEL_27:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100B3833C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  v6 = *(_DWORD *)(result + 72);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311358 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311358 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_16:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311358 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_19:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311358 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 64), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return result;
    goto LABEL_27;
  }
LABEL_24:
  v11 = *(_QWORD *)(v5 + 48);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311358 + 48);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v11, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) != 0)
  {
LABEL_27:
    v12 = *(_QWORD *)(v5 + 56);
    if (!v12)
      v12 = *(_QWORD *)(qword_102311358 + 56);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v12, a2, a4);
  }
  return result;
}

uint64_t sub_100B384A0(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  uint64_t v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  int v25;
  uint64_t v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  unsigned int v28;
  int v29;
  int v30;

  LOBYTE(v3) = *(_BYTE *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_61;
  }
  if ((*(_BYTE *)(a1 + 72) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 72) & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_102311358 + 8);
  v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(_BYTE *)(v6 + 36))
  {
    v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0)
      v8 += 9;
    if ((v7 & 4) != 0)
      v7 = v8 + 9;
    else
      v7 = v8;
  }
  *(_DWORD *)(v6 + 32) = v7;
  v4 = v7 + 2;
  v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311358 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B331E0(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 += v11 + v12 + 1;
    v3 = *(_DWORD *)(a1 + 72);
  }
LABEL_21:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_36;
    goto LABEL_30;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311358 + 24);
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B331E0(v13, a2);
  v15 = (int)v14;
  if (v14 >= 0x80)
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  else
    v16 = 1;
  v4 += v15 + v16 + 1;
  v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 8) != 0)
  {
LABEL_30:
    v17 = *(_QWORD *)(a1 + 32);
    if (!v17)
      v17 = *(_QWORD *)(qword_102311358 + 32);
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(9 * *(_DWORD *)(v17 + 16));
    *(_DWORD *)(v17 + 24) = (_DWORD)v18;
    if (v18 >= 0x80)
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
    else
      v19 = 1;
    v4 += (_DWORD)v18 + v19 + 1;
    v3 = *(_DWORD *)(a1 + 72);
  }
LABEL_36:
  if ((v3 & 0x10) != 0)
    v5 = v4 + 9;
  else
    v5 = v4;
  if ((v3 & 0x20) != 0)
  {
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v20 & 0x80000000) != 0)
    {
      v21 = 11;
    }
    else if (v20 >= 0x80)
    {
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
      v3 = *(_DWORD *)(a1 + 72);
    }
    else
    {
      v21 = 2;
    }
    v5 = (v21 + v5);
    if ((v3 & 0x40) == 0)
    {
LABEL_41:
      if ((v3 & 0x80) == 0)
        goto LABEL_61;
      goto LABEL_55;
    }
  }
  else if ((v3 & 0x40) == 0)
  {
    goto LABEL_41;
  }
  v22 = *(_QWORD *)(a1 + 48);
  if (!v22)
    v22 = *(_QWORD *)(qword_102311358 + 48);
  v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B373C8(v22);
  v24 = (int)v23;
  if (v23 >= 0x80)
    v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
  else
    v25 = 1;
  v5 = (v5 + v24 + v25 + 1);
  if ((*(_DWORD *)(a1 + 72) & 0x80) != 0)
  {
LABEL_55:
    v26 = *(_QWORD *)(a1 + 56);
    if (!v26)
      v26 = *(_QWORD *)(qword_102311358 + 56);
    v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B3915C(v26, a2);
    v29 = (int)v27;
    if (v27 >= 0x80)
      v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, v28);
    else
      v30 = 1;
    v5 = (v5 + v29 + v30 + 1);
  }
LABEL_61:
  *(_DWORD *)(a1 + 68) = v5;
  return v5;
}

void sub_100B386F4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B374F0(a1, (uint64_t)lpsrc);
}

void sub_100B38740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 4193);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      operator new();
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311368 + 8);
    sub_100B38844(v5, v6);
  }
}

void sub_100B38814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B3882C()
{
  return 1;
}

_QWORD *sub_100B38834@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.LSLHeading");
}

void sub_100B38844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 4016);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 28);
      v8 = *(int *)(a1 + 24);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v7 + 1);
          v7 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = v8 + 1;
      sub_100B36980(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 24));
  }
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v10 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_QWORD *)(a1 + 8) = v10;
  }
}

void sub_100B389A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B389C0(uint64_t *a1)
{
  *a1 = (uint64_t)off_102172FA0;
  sub_10010C59C(a1 + 2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B389F8(uint64_t *a1)
{
  sub_100B389C0(a1);
  operator delete();
}

void sub_100B38A1C()
{
  operator new();
}

uint64_t sub_100B38A5C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(_BYTE *)(result + 44))
    *(_QWORD *)(result + 8) = 0;
  if (*(int *)(result + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_100B38AC0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  char *v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  _BYTE *v26;
  unsigned int v27;

  v5 = (unint64_t *)(a1 + 8);
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v10 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v11 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v12 = v10 + 1;
          *((_QWORD *)this + 1) = v12;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        if ((unint64_t)v12 < v11 && *v12 == 18)
          goto LABEL_23;
      }
      if (TagFallback >> 3 != 2)
        break;
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_16;
      while (1)
      {
        v14 = *(_DWORD *)(a1 + 28);
        v15 = *(int *)(a1 + 24);
        if ((int)v15 >= v14)
        {
          if (v14 == *(_DWORD *)(a1 + 32))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
            v14 = *(_DWORD *)(a1 + 28);
          }
          *(_DWORD *)(a1 + 28) = v14 + 1;
          operator new();
        }
        v16 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 24) = v15 + 1;
        v17 = *(_QWORD *)(v16 + 8 * v15);
        v27 = 0;
        v18 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0;
        }
        else
        {
          v27 = *v18;
          *((_QWORD *)this + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)this + 14);
        v20 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_100B36ACC(v17, this, v22) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
        v23 = *((_DWORD *)this + 14);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v25 < 0 == v24)
          *((_DWORD *)this + 14) = v25;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v26 = (_BYTE *)*((_QWORD *)this + 2);
        if (v12 >= v26 || *v12 != 18)
          break;
LABEL_23:
        *((_QWORD *)this + 1) = v12 + 1;
      }
      if (v12 == v26 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v9 = TagFallback & 7;
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100B38D64(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = result;
  if ((*(_BYTE *)(result + 44) & 1) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), (unint64_t)a2, a4);
  if (*(int *)(v5 + 24) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  return result;
}

uint64_t sub_100B38DD8(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
  else
    v3 = 0;
  v4 = *(unsigned int *)(a1 + 24);
  result = (v4 + v3);
  if ((int)v4 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    do
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)v6 + 28);
      if (*(_BYTE *)(*(_QWORD *)v6 + 28))
      {
        if ((v7 & 2) != 0)
          v7 = ((v7 << 31 >> 31) & 9) + 9;
        else
          v7 = (v7 << 31 >> 31) & 9;
      }
      *(_DWORD *)(*(_QWORD *)v6 + 24) = v7;
      result = (result + v7 + 1);
      v6 += 8;
      --v4;
    }
    while (v4);
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

void sub_100B38E64(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B38844(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B38EB0()
{
  return 1;
}

_QWORD *sub_100B38EB8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.LSLMapRoadSegment");
}

void sub_100B38EC8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102173018;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311368 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B38F1C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B38EC8(a1);
  operator delete();
}

void sub_100B38F40()
{
  operator new();
}

uint64_t sub_100B38F78(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100B38AC0(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100B39130(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311368 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100B3915C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102311368 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B38DD8(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B391C8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B38740(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B39214()
{
  return 1;
}

_QWORD *sub_100B3921C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.LSLHeadingSupplInfo");
}

void sub_100B3922C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  char v13;
  _BYTE v14[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 4428);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_100B374F0(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
  LOBYTE(v10) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v10)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v11 = *(_DWORD *)(a2 + 32);
      if ((v11 + 1) >= 6)
        sub_10191A358();
      a1[11] |= 1u;
      a1[8] = v11;
      v10 = *(_DWORD *)(a2 + 44);
    }
    if ((v10 & 4) != 0)
    {
      v12 = *(_DWORD *)(a2 + 36);
      if (v12 >= 9)
        sub_10191A330();
      a1[11] |= 4u;
      a1[9] = v12;
    }
  }
}

void sub_100B393F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B39408(uint64_t *a1)
{
  *a1 = (uint64_t)off_102173090;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B39440(uint64_t *a1)
{
  sub_100B39408(a1);
  operator delete();
}

uint64_t sub_100B39464(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102311370;
  if (!qword_102311370)
  {
    sub_100B30E60(0, a2, a3, a4);
    return qword_102311370;
  }
  return result;
}

void sub_100B39490()
{
  operator new();
}

uint64_t sub_100B394D8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(_BYTE *)(result + 44))
    *(_QWORD *)(result + 32) = 0x8FFFFFFFFLL;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_100B39544(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t result;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
    while (1)
    {
LABEL_2:
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      v8 = TagFallback >> 3;
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v31 = 0;
      v12 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31);
        if (!(_DWORD)result)
          return result;
        v13 = v31;
      }
      else
      {
        v13 = *v12;
        *((_QWORD *)this + 1) = v12 + 1;
      }
      if (v13 + 1 <= 5)
      {
        a1[11] |= 1u;
        a1[8] = v13;
      }
      v15 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v15 < *((_QWORD *)this + 2) && *v15 == 18)
      {
        while (1)
        {
          *((_QWORD *)this + 1) = v15 + 1;
LABEL_29:
          v16 = a1[5];
          v17 = a1[4];
          if ((int)v17 >= v16)
          {
            if (v16 == a1[6])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v16 + 1);
              v16 = a1[5];
            }
            a1[5] = v16 + 1;
            operator new();
          }
          v18 = *((_QWORD *)a1 + 1);
          a1[4] = v17 + 1;
          v19 = *(_QWORD *)(v18 + 8 * v17);
          v32 = 0;
          v20 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
          }
          else
          {
            v32 = *v20;
            *((_QWORD *)this + 1) = v20 + 1;
          }
          v21 = *((_DWORD *)this + 14);
          v22 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v21 + 1;
          if (v21 >= v22)
            return 0;
          v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
          if (!sub_100B37B30(v19, this, v24) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
          v25 = *((_DWORD *)this + 14);
          v26 = __OFSUB__(v25, 1);
          v27 = v25 - 1;
          if (v27 < 0 == v26)
            *((_DWORD *)this + 14) = v27;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          if ((unint64_t)v15 >= v11)
            break;
          v28 = *v15;
          if (v28 != 18)
          {
            if (v28 == 24)
            {
              v10 = v15 + 1;
              *((_QWORD *)this + 1) = v10;
LABEL_47:
              v30 = 0;
              if ((unint64_t)v10 >= v11 || *v10 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
                if (!(_DWORD)result)
                  return result;
                v29 = v30;
              }
              else
              {
                v29 = *v10;
                *((_QWORD *)this + 1) = v10 + 1;
              }
              if (v29 <= 8)
              {
                a1[11] |= 4u;
                a1[9] = v29;
              }
              if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
            }
            goto LABEL_2;
          }
        }
      }
    }
    if (v8 == 2)
    {
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_19;
      goto LABEL_29;
    }
    if (v8 == 3)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_47;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_19:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100B39890(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = result;
  if ((*(_BYTE *)(result + 44) & 1) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), (int)a2, a4);
  if (*(int *)(v5 + 16) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if ((*(_BYTE *)(v5 + 44) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 36), (int)a2, a4);
  return result;
}

uint64_t sub_100B39928(uint64_t a1, unint64_t a2)
{
  char v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;

  v3 = *(_BYTE *)(a1 + 44);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_19;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 4) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 44) & 4) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 4) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 44) & 4) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  }
  else
  {
    v7 = 2;
  }
  v4 += v7;
LABEL_19:
  v8 = *(_DWORD *)(a1 + 16);
  v9 = (v8 + v4);
  if (v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B384A0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10), a2);
      v12 = (int)v11;
      if (v11 >= 0x80)
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
      else
        v13 = 1;
      v9 = (v12 + v9 + v13);
      ++v10;
    }
    while (v10 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 40) = v9;
  return v9;
}

void sub_100B39A2C(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B3922C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B39A78()
{
  return 1;
}

_QWORD *sub_100B39A80@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.LSLHeadingEstimation");
}

double sub_100B39A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 4638);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311378 + 8);
      sub_100B322A0(v7, v8);
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100B39B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B39B94(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102173108;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311378 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B39BE8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B39B94(a1);
  operator delete();
}

void sub_100B39C0C()
{
  operator new();
}

uint64_t sub_100B39C44(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        *(_DWORD *)(v1 + 16) = 0;
        *(_DWORD *)(v1 + 28) = 0;
      }
    }
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B39C6C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t result;
  unint64_t v19;
  unsigned int v20;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_17;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
      {
LABEL_29:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 28) |= 2u;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
      else
      {
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
      }
    }
    v7 = TagFallback & 7;
    if (v7 != 2)
      goto LABEL_17;
    *(_DWORD *)(a1 + 28) |= 1u;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      operator new();
    v20 = 0;
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20))
        return 0;
    }
    else
    {
      v20 = *v9;
      *((_QWORD *)this + 1) = v9 + 1;
    }
    v10 = *((_DWORD *)this + 14);
    v11 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v10 + 1;
    if (v10 >= v11)
      return 0;
    v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
    if (!sub_100B3241C(v8, this, v13) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
    v14 = *((_DWORD *)this + 14);
    v15 = __OFSUB__(v14, 1);
    v16 = v14 - 1;
    if (v16 < 0 == v15)
      *((_DWORD *)this + 14) = v16;
    v17 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 17)
    {
      *((_QWORD *)this + 1) = v17 + 1;
      goto LABEL_29;
    }
  }
}

uint64_t sub_100B39E90(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311378 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  return result;
}

uint64_t sub_100B39EFC(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        v6 = *(_QWORD *)(qword_102311378 + 8);
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(9 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = (_DWORD)v7;
      if (v7 >= 0x80)
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      else
        v8 = 1;
      v4 = (_DWORD)v7 + v8 + 1;
      v3 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

double sub_100B39F88(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100B39A90(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B39FD4()
{
  return 1;
}

_QWORD *sub_100B39FDC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.VLLocation");
}

void sub_100B39FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 4812);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    sub_1002A19E0(a1 + 8, *(_DWORD *)(a1 + 16) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 8) + 4 * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 4 * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }
}

void sub_100B3A09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B3A0B4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(_QWORD *)this = &off_102173180;
  if (*((_QWORD *)this + 1))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B3A100(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B3A0B4(a1);
  operator delete();
}

void sub_100B3A124()
{
  operator new();
}

uint64_t sub_100B3A15C(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B3A168(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  signed int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  unsigned int v24[12];

  v5 = a1 + 8;
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      v8 = TagFallback & 7;
      if ((TagFallback & 0xFFFFFFF8) != 8)
        break;
      if (v8 != 2)
      {
        if (v8 != 5)
          break;
        goto LABEL_15;
      }
      result = sub_100B320D4(this, v5);
      if (!(_DWORD)result)
        return result;
      while (1)
      {
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        v22 = (_BYTE *)*((_QWORD *)this + 2);
        if (v21 >= v22 || *v21 != 13)
          break;
        *((_QWORD *)this + 1) = v21 + 1;
LABEL_15:
        v24[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v24) & 1) == 0)
          return 0;
        v10 = v24[0];
        v11 = *(_DWORD *)(a1 + 16);
        if (v11 == *(_DWORD *)(a1 + 20))
        {
          sub_1002A19E0(v5, v11 + 1);
          v11 = *(_DWORD *)(a1 + 16);
        }
        v12 = *(_QWORD *)(a1 + 8);
        v13 = v11 + 1;
        *(_DWORD *)(a1 + 16) = v11 + 1;
        *(_DWORD *)(v12 + 4 * v11) = v10;
        v14 = *((_QWORD *)this + 1);
        v15 = *((_DWORD *)this + 4) - v14;
        if (v15 >= 1)
        {
          v16 = v15 / 5u;
          v17 = v16 >= *(_DWORD *)(a1 + 20) - v13 ? *(_DWORD *)(a1 + 20) - v13 : v16;
          if (v17 >= 1)
          {
            v18 = 0;
            while (*(_BYTE *)v14 == 13)
            {
              v19 = *(_DWORD *)(v14 + 1);
              if (v13 >= *(_DWORD *)(a1 + 20))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v24, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                v20 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v20);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
                v13 = *(_DWORD *)(a1 + 16);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 16) = v13 + 1;
              *(_DWORD *)(v12 + 4 * v13) = v19;
              ++v18;
              v14 += 5;
              ++v13;
              if (v17 == v18)
              {
                v18 = v17;
                break;
              }
            }
            if (v18)
              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v18);
          }
        }
      }
      if (v21 == v22 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

void sub_100B3A3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B3A3E0(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (*(int *)(result + 16) >= 1)
  {
    v4 = result;
    v5 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(*(_QWORD *)(v4 + 8) + 4 * v5++), a3);
    while (v5 < *(int *)(v4 + 16));
  }
  return result;
}

uint64_t sub_100B3A43C(uint64_t a1)
{
  uint64_t v1;

  v1 = (5 * *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

void sub_100B3A450(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B39FEC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B3A49C()
{
  return 1;
}

_QWORD *sub_100B3A4A4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.VLVectorfM");
}

void sub_100B3A4B4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 4972);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_100B39FEC(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
}

void sub_100B3A5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B3A614(uint64_t *a1)
{
  *a1 = (uint64_t)off_1021731F8;
  sub_10010C59C(a1 + 1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B3A64C(uint64_t *a1)
{
  sub_100B3A614(a1);
  operator delete();
}

void sub_100B3A670()
{
  operator new();
}

uint64_t sub_100B3A6B0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100B3A708(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v8 = a1[5];
        v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        v10 = *((_QWORD *)a1 + 1);
        a1[4] = v9 + 1;
        v11 = *(_QWORD *)(v10 + 8 * v9);
        v23 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0;
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v13 = *((_DWORD *)this + 14);
        v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100B3A168(v11, this, v16) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        v17 = *((_DWORD *)this + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)this + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = (_BYTE *)*((_QWORD *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)this + 1) = v20 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100B3A91C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 16) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100B3A978(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = 0;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4);
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(5 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = (_DWORD)v7;
      if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        v3 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v8 = 1;
      }
      v5 = ((_DWORD)v7 + v5 + v8);
      ++v4;
    }
    while (v4 < v3);
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_100B3AA04(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B3A4B4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B3AA50()
{
  return 1;
}

_QWORD *sub_100B3AA58@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.VLMatrixfMxN");
}

void sub_100B3AA68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  const std::string *v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v27, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 5799);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v26, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v27);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_1002A19E0(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  v6 = *(_DWORD *)(a2 + 40);
  if (v6)
  {
    sub_1002E60A0(a1 + 32, *(_DWORD *)(a1 + 40) + v6);
    memcpy((void *)(*(_QWORD *)(a1 + 32) + 8 * *(int *)(a1 + 40)), *(const void **)(a2 + 32), 8 * *(int *)(a2 + 40));
    *(_DWORD *)(a1 + 40) += *(_DWORD *)(a2 + 40);
  }
  v7 = *(_DWORD *)(a2 + 56);
  if (v7)
  {
    sub_1002A19E0(a1 + 48, *(_DWORD *)(a1 + 56) + v7);
    memcpy((void *)(*(_QWORD *)(a1 + 48) + 4 * *(int *)(a1 + 56)), *(const void **)(a2 + 48), 4 * *(int *)(a2 + 56));
    *(_DWORD *)(a1 + 56) += *(_DWORD *)(a2 + 56);
  }
  v8 = *(_DWORD *)(a2 + 72);
  if (v8)
  {
    sub_1002E60A0(a1 + 64, *(_DWORD *)(a1 + 72) + v8);
    memcpy((void *)(*(_QWORD *)(a1 + 64) + 8 * *(int *)(a1 + 72)), *(const void **)(a2 + 64), 8 * *(int *)(a2 + 72));
    *(_DWORD *)(a1 + 72) += *(_DWORD *)(a2 + 72);
  }
  v9 = *(_DWORD *)(a2 + 96);
  if (v9)
  {
    sub_1002A19E0(a1 + 88, *(_DWORD *)(a1 + 96) + v9);
    memcpy((void *)(*(_QWORD *)(a1 + 88) + 4 * *(int *)(a1 + 96)), *(const void **)(a2 + 88), 4 * *(int *)(a2 + 96));
    *(_DWORD *)(a1 + 96) += *(_DWORD *)(a2 + 96);
  }
  v10 = *(_DWORD *)(a2 + 128);
  if (v10)
  {
    sub_1002A19E0(a1 + 120, *(_DWORD *)(a1 + 128) + v10);
    memcpy((void *)(*(_QWORD *)(a1 + 120) + 4 * *(int *)(a1 + 128)), *(const void **)(a2 + 120), 4 * *(int *)(a2 + 128));
    *(_DWORD *)(a1 + 128) += *(_DWORD *)(a2 + 128);
  }
  v11 = *(_DWORD *)(a2 + 144);
  if (v11)
  {
    sub_1002A19E0(a1 + 136, *(_DWORD *)(a1 + 144) + v11);
    memcpy((void *)(*(_QWORD *)(a1 + 136) + 4 * *(int *)(a1 + 144)), *(const void **)(a2 + 136), 4 * *(int *)(a2 + 144));
    *(_DWORD *)(a1 + 144) += *(_DWORD *)(a2 + 144);
  }
  v12 = *(_DWORD *)(a2 + 160);
  if (v12)
  {
    sub_1002A19E0(a1 + 152, *(_DWORD *)(a1 + 160) + v12);
    memcpy((void *)(*(_QWORD *)(a1 + 152) + 4 * *(int *)(a1 + 160)), *(const void **)(a2 + 152), 4 * *(int *)(a2 + 160));
    *(_DWORD *)(a1 + 160) += *(_DWORD *)(a2 + 160);
  }
  v13 = *(_DWORD *)(a2 + 184);
  if (v13)
  {
    sub_1002A19E0(a1 + 176, *(_DWORD *)(a1 + 184) + v13);
    memcpy((void *)(*(_QWORD *)(a1 + 176) + 4 * *(int *)(a1 + 184)), *(const void **)(a2 + 176), 4 * *(int *)(a2 + 184));
    *(_DWORD *)(a1 + 184) += *(_DWORD *)(a2 + 184);
  }
  v14 = *(_DWORD *)(a2 + 200);
  if (v14)
  {
    sub_1002A19E0(a1 + 192, *(_DWORD *)(a1 + 200) + v14);
    memcpy((void *)(*(_QWORD *)(a1 + 192) + 4 * *(int *)(a1 + 200)), *(const void **)(a2 + 192), 4 * *(int *)(a2 + 200));
    *(_DWORD *)(a1 + 200) += *(_DWORD *)(a2 + 200);
  }
  v15 = *(_DWORD *)(a2 + 216);
  if (v15)
  {
    sub_1002A19E0(a1 + 208, *(_DWORD *)(a1 + 216) + v15);
    memcpy((void *)(*(_QWORD *)(a1 + 208) + 4 * *(int *)(a1 + 216)), *(const void **)(a2 + 208), 4 * *(int *)(a2 + 216));
    *(_DWORD *)(a1 + 216) += *(_DWORD *)(a2 + 216);
  }
  v16 = *(_DWORD *)(a2 + 232);
  if (v16)
  {
    sub_1002A19E0(a1 + 224, *(_DWORD *)(a1 + 232) + v16);
    memcpy((void *)(*(_QWORD *)(a1 + 224) + 4 * *(int *)(a1 + 232)), *(const void **)(a2 + 224), 4 * *(int *)(a2 + 232));
    *(_DWORD *)(a1 + 232) += *(_DWORD *)(a2 + 232);
  }
  v17 = *(_DWORD *)(a2 + 248);
  if (v17)
  {
    sub_1002E60A0(a1 + 240, *(_DWORD *)(a1 + 248) + v17);
    memcpy((void *)(*(_QWORD *)(a1 + 240) + 8 * *(int *)(a1 + 248)), *(const void **)(a2 + 240), 8 * *(int *)(a2 + 248));
    *(_DWORD *)(a1 + 248) += *(_DWORD *)(a2 + 248);
  }
  v18 = *(_DWORD *)(a2 + 264);
  if (v18)
  {
    sub_1002E60A0(a1 + 256, *(_DWORD *)(a1 + 264) + v18);
    memcpy((void *)(*(_QWORD *)(a1 + 256) + 8 * *(int *)(a1 + 264)), *(const void **)(a2 + 256), 8 * *(int *)(a2 + 264));
    *(_DWORD *)(a1 + 264) += *(_DWORD *)(a2 + 264);
  }
  v19 = *(_DWORD *)(a2 + 276);
  if ((_BYTE)v19)
  {
    if ((v19 & 1) != 0)
    {
      v24 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 276) |= 1u;
      *(_QWORD *)(a1 + 8) = v24;
      v19 = *(_DWORD *)(a2 + 276);
      if ((v19 & 0x20) == 0)
      {
LABEL_34:
        if ((v19 & 0x80) == 0)
          goto LABEL_36;
        goto LABEL_35;
      }
    }
    else if ((v19 & 0x20) == 0)
    {
      goto LABEL_34;
    }
    v25 = *(_QWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 276) |= 0x20u;
    *(_QWORD *)(a1 + 80) = v25;
    v19 = *(_DWORD *)(a2 + 276);
    if ((v19 & 0x80) != 0)
    {
LABEL_35:
      v20 = *(_QWORD *)(a2 + 104);
      *(_DWORD *)(a1 + 276) |= 0x80u;
      *(_QWORD *)(a1 + 104) = v20;
      v19 = *(_DWORD *)(a2 + 276);
    }
  }
LABEL_36:
  if ((v19 & 0xFF00) != 0)
  {
    if ((v19 & 0x100) != 0)
    {
      v21 = *(const std::string **)(a2 + 112);
      *(_DWORD *)(a1 + 276) |= 0x100u;
      v22 = *(std::string **)(a1 + 112);
      if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v22, v21);
      v19 = *(_DWORD *)(a2 + 276);
    }
    if ((v19 & 0x1000) != 0)
    {
      v23 = *(_QWORD *)(a2 + 168);
      *(_DWORD *)(a1 + 276) |= 0x1000u;
      *(_QWORD *)(a1 + 168) = v23;
    }
  }
}

void sub_100B3AF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B3AF90(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102173270;
  sub_100B3B148((uint64_t)a1);
  if (*((_QWORD *)a1 + 32))
    operator delete[]();
  if (*((_QWORD *)a1 + 30))
    operator delete[]();
  if (*((_QWORD *)a1 + 28))
    operator delete[]();
  if (*((_QWORD *)a1 + 26))
    operator delete[]();
  if (*((_QWORD *)a1 + 24))
    operator delete[]();
  if (*((_QWORD *)a1 + 22))
    operator delete[]();
  if (*((_QWORD *)a1 + 19))
    operator delete[]();
  if (*((_QWORD *)a1 + 17))
    operator delete[]();
  if (*((_QWORD *)a1 + 15))
    operator delete[]();
  if (*((_QWORD *)a1 + 11))
    operator delete[]();
  if (*((_QWORD *)a1 + 8))
    operator delete[]();
  if (*((_QWORD *)a1 + 6))
    operator delete[]();
  if (*((_QWORD *)a1 + 4))
    operator delete[]();
  if (*((_QWORD *)a1 + 2))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_100B3B148(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 112);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

void sub_100B3B1AC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B3AF90(a1);
  operator delete();
}

void sub_100B3B1D0()
{
  operator new();
}

uint64_t sub_100B3B24C(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 276);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 104) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      v2 = *(_QWORD *)(result + 112);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(result + 168) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 144) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_DWORD *)(result + 200) = 0;
  *(_DWORD *)(result + 216) = 0;
  *(_DWORD *)(result + 232) = 0;
  *(_DWORD *)(result + 248) = 0;
  *(_DWORD *)(result + 264) = 0;
  *(_DWORD *)(result + 276) = 0;
  return result;
}

uint64_t sub_100B3B2E8(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t result;
  char *i;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  int v18;
  unint64_t v19;
  char *j;
  char *k;
  unint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  _BYTE *v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  _BYTE *v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  signed int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  signed int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  _BYTE *v70;
  unint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  signed int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  signed int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  _BYTE *v100;
  void *v101;
  _BYTE *v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  _BYTE *v108;
  unint64_t v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  signed int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  _BYTE *v133;
  unint64_t v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  int v140;
  unsigned int v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  signed int v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  int v157;
  unsigned __int8 *v158;
  int v159;
  signed int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  unsigned int v167;
  int v168;
  uint64_t v169;
  int v170;
  unsigned __int8 *v171;
  int v172;
  signed int v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  unsigned __int8 *v184;
  int v185;
  signed int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  unsigned __int8 *v197;
  int v198;
  signed int v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  unsigned __int8 *v204;
  unint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t *v211;
  uint64_t v212;
  unint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  unsigned int v224[2];

  v206 = a1 + 240;
  v207 = a1 + 224;
  v208 = a1 + 208;
  v209 = a1 + 256;
  v220 = a1 + 136;
  v214 = a1 + 176;
  v215 = a1 + 120;
  v218 = a1 + 152;
  v219 = a1 + 88;
  v221 = a1 + 64;
  v222 = a1 + 192;
  v216 = a1 + 32;
  v217 = a1 + 48;
  v205 = (unint64_t *)(a1 + 8);
  v212 = a1 + 16;
  v213 = (unint64_t *)(a1 + 80);
  v210 = (unint64_t *)(a1 + 168);
  v211 = (unint64_t *)(a1 + 104);
LABEL_2:
  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v8 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v8 >= v9 || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v205);
          if (!(_DWORD)result)
            return result;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v205 = *v8;
          v10 = v8 + 1;
          *((_QWORD *)this + 1) = v10;
        }
        *(_DWORD *)(a1 + 276) |= 1u;
        if ((unint64_t)v10 >= v9 || *v10 != 21)
          continue;
        goto LABEL_129;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B320D4(this, v212);
          if (!(_DWORD)result)
            return result;
          goto LABEL_146;
        }
        if (v7 != 5)
        {
LABEL_67:
          if (v7 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
            return 0;
          continue;
        }
        while (1)
        {
          v224[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v224) & 1) == 0)
            return 0;
          v41 = v224[0];
          v42 = *(_DWORD *)(a1 + 24);
          if (v42 == *(_DWORD *)(a1 + 28))
          {
            sub_1002A19E0(v212, v42 + 1);
            v42 = *(_DWORD *)(a1 + 24);
          }
          v43 = *(_QWORD *)(a1 + 16);
          v44 = v42 + 1;
          *(_DWORD *)(a1 + 24) = v42 + 1;
          *(_DWORD *)(v43 + 4 * v42) = v41;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_DWORD *)this + 4) - v45;
          if (v46 >= 1)
          {
            v47 = v46 / 5u;
            v48 = v47 >= *(_DWORD *)(a1 + 28) - v44 ? *(_DWORD *)(a1 + 28) - v44 : v47;
            if (v48 >= 1)
            {
              v49 = 0;
              while (*(_BYTE *)v45 == 21)
              {
                v50 = *(_DWORD *)(v45 + 1);
                if (v44 >= *(_DWORD *)(a1 + 28))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v51 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v51);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                  v44 = *(_DWORD *)(a1 + 24);
                  v43 = *(_QWORD *)(a1 + 16);
                }
                *(_DWORD *)(a1 + 24) = v44 + 1;
                *(_DWORD *)(v43 + 4 * v44) = v50;
                ++v49;
                v45 += 5;
                ++v44;
                if (v48 == v49)
                {
                  v49 = v48;
                  break;
                }
              }
              if (v49)
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v49);
            }
          }
LABEL_146:
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v52 = *v10;
          if (v52 != 21)
            break;
LABEL_129:
          *((_QWORD *)this + 1) = v10 + 1;
        }
        if (v52 != 25)
          continue;
LABEL_149:
        *((_QWORD *)this + 1) = v10 + 1;
LABEL_150:
        *(_QWORD *)v224 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v224) & 1) != 0)
        {
          v53 = *(_QWORD *)v224;
          v54 = *(_DWORD *)(a1 + 40);
          if (v54 == *(_DWORD *)(a1 + 44))
          {
            sub_1002E60A0(v216, v54 + 1);
            v54 = *(_DWORD *)(a1 + 40);
          }
          v55 = *(_QWORD *)(a1 + 32);
          v56 = v54 + 1;
          *(_DWORD *)(a1 + 40) = v54 + 1;
          *(_QWORD *)(v55 + 8 * v54) = v53;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_DWORD *)this + 4) - v57;
          if (v58 >= 1)
          {
            v59 = v58 / 9u;
            v60 = v59 >= *(_DWORD *)(a1 + 44) - v56 ? *(_DWORD *)(a1 + 44) - v56 : v59;
            if (v60 >= 1)
            {
              v61 = 0;
              while (*(_BYTE *)v57 == 25)
              {
                v62 = *(_QWORD *)(v57 + 1);
                if (v56 >= *(_DWORD *)(a1 + 44))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v63 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v63);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                  v56 = *(_DWORD *)(a1 + 40);
                  v55 = *(_QWORD *)(a1 + 32);
                }
                *(_DWORD *)(a1 + 40) = v56 + 1;
                *(_QWORD *)(v55 + 8 * v56) = v62;
                ++v61;
                v57 += 9;
                ++v56;
                if (v60 == v61)
                {
                  v61 = v60;
                  break;
                }
              }
              if (v61)
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v61);
            }
          }
LABEL_166:
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
          if ((unint64_t)v10 >= v13)
            continue;
          v64 = *v10;
          if (v64 == 25)
            goto LABEL_149;
          if (v64 == 32)
          {
            for (i = v10 + 1; ; i = (char *)(v25 + 1))
            {
              *((_QWORD *)this + 1) = i;
LABEL_171:
              v224[0] = 0;
              if ((unint64_t)i >= v13 || *i < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v224);
                if (!(_DWORD)result)
                  return result;
                v65 = v224[0];
              }
              else
              {
                v65 = *i;
                *((_QWORD *)this + 1) = i + 1;
              }
              v66 = *(_DWORD *)(a1 + 56);
              if (v66 == *(_DWORD *)(a1 + 60))
              {
                sub_1002A19E0(v217, v66 + 1);
                v66 = *(_DWORD *)(a1 + 56);
              }
              v67 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(a1 + 56) = v66 + 1;
              *(_DWORD *)(v67 + 4 * v66) = v65;
              v68 = *(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 56);
              if (v68 >= 1)
              {
                v69 = v68 + 1;
                do
                {
                  v70 = (_BYTE *)*((_QWORD *)this + 1);
                  v71 = *((_QWORD *)this + 2);
                  if ((unint64_t)v70 >= v71 || *v70 != 32)
                    break;
                  *((_QWORD *)this + 1) = v70 + 1;
                  v224[0] = 0;
                  if ((unint64_t)(v70 + 1) >= v71 || (char)v70[1] < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v224);
                    if (!(_DWORD)result)
                      return result;
                    v72 = v224[0];
                  }
                  else
                  {
                    v72 = v70[1];
                    *((_QWORD *)this + 1) = v70 + 2;
                  }
                  v73 = *(_DWORD *)(a1 + 56);
                  if (v73 >= *(_DWORD *)(a1 + 60))
                  {
                    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                    v74 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v74);
                    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                    v73 = *(_DWORD *)(a1 + 56);
                  }
                  v75 = *(_QWORD *)(a1 + 48);
                  *(_DWORD *)(a1 + 56) = v73 + 1;
                  *(_DWORD *)(v75 + 4 * v73) = v72;
                  --v69;
                }
                while (v69 > 1);
              }
LABEL_190:
              v25 = (unsigned __int8 *)*((_QWORD *)this + 1);
              v13 = *((_QWORD *)this + 2);
              if ((unint64_t)v25 >= v13)
                break;
              v76 = *v25;
              if (v76 == 41)
              {
                while (1)
                {
                  *((_QWORD *)this + 1) = v25 + 1;
LABEL_195:
                  *(_QWORD *)v224 = 0;
                  if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v224) & 1) == 0)return 0;
                  v77 = *(_QWORD *)v224;
                  v78 = *(_DWORD *)(a1 + 72);
                  if (v78 == *(_DWORD *)(a1 + 76))
                  {
                    sub_1002E60A0(v221, v78 + 1);
                    v78 = *(_DWORD *)(a1 + 72);
                  }
                  v79 = *(_QWORD *)(a1 + 64);
                  v80 = v78 + 1;
                  *(_DWORD *)(a1 + 72) = v78 + 1;
                  *(_QWORD *)(v79 + 8 * v78) = v77;
                  v81 = *((_QWORD *)this + 1);
                  v82 = *((_DWORD *)this + 4) - v81;
                  if (v82 >= 1)
                  {
                    v83 = v82 / 9u;
                    v84 = v83 >= *(_DWORD *)(a1 + 76) - v80 ? *(_DWORD *)(a1 + 76) - v80 : v83;
                    if (v84 >= 1)
                    {
                      v85 = 0;
                      while (*(_BYTE *)v81 == 41)
                      {
                        v86 = *(_QWORD *)(v81 + 1);
                        if (v80 >= *(_DWORD *)(a1 + 76))
                        {
                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                          v87 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v87);
                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                          v80 = *(_DWORD *)(a1 + 72);
                          v79 = *(_QWORD *)(a1 + 64);
                        }
                        *(_DWORD *)(a1 + 72) = v80 + 1;
                        *(_QWORD *)(v79 + 8 * v80) = v86;
                        ++v85;
                        v81 += 9;
                        ++v80;
                        if (v84 == v85)
                        {
                          v85 = v84;
                          break;
                        }
                      }
                      if (v85)
                        wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v85);
                    }
                  }
LABEL_95:
                  v25 = (unsigned __int8 *)*((_QWORD *)this + 1);
                  v14 = *((_QWORD *)this + 2);
                  if ((unint64_t)v25 >= v14)
                    goto LABEL_2;
                  v26 = *v25;
                  if (v26 != 41)
                  {
                    if (v26 == 48)
                    {
                      v15 = (char *)(v25 + 1);
                      *((_QWORD *)this + 1) = v25 + 1;
LABEL_99:
                      if ((unint64_t)v15 >= v14 || *v15 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v213);
                        if (!(_DWORD)result)
                          return result;
                        v27 = (_BYTE *)*((_QWORD *)this + 1);
                        v14 = *((_QWORD *)this + 2);
                      }
                      else
                      {
                        *v213 = *v15;
                        v27 = v15 + 1;
                        *((_QWORD *)this + 1) = v27;
                      }
                      *(_DWORD *)(a1 + 276) |= 0x20u;
                      if ((unint64_t)v27 < v14 && *v27 == 61)
                      {
                        while (1)
                        {
                          *((_QWORD *)this + 1) = v27 + 1;
LABEL_212:
                          v224[0] = 0;
                          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v224) & 1) == 0)return 0;
                          v88 = v224[0];
                          v89 = *(_DWORD *)(a1 + 96);
                          if (v89 == *(_DWORD *)(a1 + 100))
                          {
                            sub_1002A19E0(v219, v89 + 1);
                            v89 = *(_DWORD *)(a1 + 96);
                          }
                          v90 = *(_QWORD *)(a1 + 88);
                          v91 = v89 + 1;
                          *(_DWORD *)(a1 + 96) = v89 + 1;
                          *(_DWORD *)(v90 + 4 * v89) = v88;
                          v92 = *((_QWORD *)this + 1);
                          v93 = *((_DWORD *)this + 4) - v92;
                          if (v93 >= 1)
                          {
                            v94 = v93 / 5u;
                            v95 = v94 >= *(_DWORD *)(a1 + 100) - v91 ? *(_DWORD *)(a1 + 100) - v91 : v94;
                            if (v95 >= 1)
                            {
                              v96 = 0;
                              while (*(_BYTE *)v92 == 61)
                              {
                                v97 = *(_DWORD *)(v92 + 1);
                                if (v91 >= *(_DWORD *)(a1 + 100))
                                {
                                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                  v98 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v98);
                                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                  v91 = *(_DWORD *)(a1 + 96);
                                  v90 = *(_QWORD *)(a1 + 88);
                                }
                                *(_DWORD *)(a1 + 96) = v91 + 1;
                                *(_DWORD *)(v90 + 4 * v91) = v97;
                                ++v96;
                                v92 += 5;
                                ++v91;
                                if (v95 == v96)
                                {
                                  v96 = v95;
                                  break;
                                }
                              }
                              if (v96)
                                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v96);
                            }
                          }
LABEL_228:
                          v27 = (_BYTE *)*((_QWORD *)this + 1);
                          v16 = *((_QWORD *)this + 2);
                          if ((unint64_t)v27 >= v16)
                            break;
                          v99 = *v27;
                          if (v99 != 61)
                          {
                            if (v99 == 64)
                            {
                              v17 = v27 + 1;
                              *((_QWORD *)this + 1) = v17;
LABEL_232:
                              if ((unint64_t)v17 >= v16 || *v17 < 0)
                              {
                                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v211);
                                if (!(_DWORD)result)
                                  return result;
                                v100 = (_BYTE *)*((_QWORD *)this + 1);
                                v16 = *((_QWORD *)this + 2);
                              }
                              else
                              {
                                *v211 = *v17;
                                v100 = v17 + 1;
                                *((_QWORD *)this + 1) = v100;
                              }
                              v18 = *(_DWORD *)(a1 + 276) | 0x80;
                              *(_DWORD *)(a1 + 276) = v18;
                              if ((unint64_t)v100 < v16 && *v100 == 74)
                              {
                                *((_QWORD *)this + 1) = v100 + 1;
LABEL_240:
                                *(_DWORD *)(a1 + 276) = v18 | 0x100;
                                v101 = *(void **)(a1 + 112);
                                if (v101 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
                                  operator new();
                                result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v101);
                                if (!(_DWORD)result)
                                  return result;
                                v102 = (_BYTE *)*((_QWORD *)this + 1);
                                v19 = *((_QWORD *)this + 2);
                                if ((unint64_t)v102 < v19 && *v102 == 80)
                                {
                                  for (j = v102 + 1; ; j = (char *)(v114 + 1))
                                  {
                                    *((_QWORD *)this + 1) = j;
LABEL_247:
                                    v224[0] = 0;
                                    if ((unint64_t)j >= v19 || *j < 0)
                                    {
                                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v224);
                                      if (!(_DWORD)result)
                                        return result;
                                      v103 = v224[0];
                                    }
                                    else
                                    {
                                      v103 = *j;
                                      *((_QWORD *)this + 1) = j + 1;
                                    }
                                    v104 = *(_DWORD *)(a1 + 128);
                                    if (v104 == *(_DWORD *)(a1 + 132))
                                    {
                                      sub_1002A19E0(v215, v104 + 1);
                                      v104 = *(_DWORD *)(a1 + 128);
                                    }
                                    v105 = *(_QWORD *)(a1 + 120);
                                    *(_DWORD *)(a1 + 128) = v104 + 1;
                                    *(_DWORD *)(v105 + 4 * v104) = v103;
                                    v106 = *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 128);
                                    if (v106 >= 1)
                                    {
                                      v107 = v106 + 1;
                                      do
                                      {
                                        v108 = (_BYTE *)*((_QWORD *)this + 1);
                                        v109 = *((_QWORD *)this + 2);
                                        if ((unint64_t)v108 >= v109 || *v108 != 80)
                                          break;
                                        *((_QWORD *)this + 1) = v108 + 1;
                                        v224[0] = 0;
                                        if ((unint64_t)(v108 + 1) >= v109 || (char)v108[1] < 0)
                                        {
                                          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v224);
                                          if (!(_DWORD)result)
                                            return result;
                                          v110 = v224[0];
                                        }
                                        else
                                        {
                                          v110 = v108[1];
                                          *((_QWORD *)this + 1) = v108 + 2;
                                        }
                                        v111 = *(_DWORD *)(a1 + 128);
                                        if (v111 >= *(_DWORD *)(a1 + 132))
                                        {
                                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                          v112 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v112);
                                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                          v111 = *(_DWORD *)(a1 + 128);
                                        }
                                        v113 = *(_QWORD *)(a1 + 120);
                                        *(_DWORD *)(a1 + 128) = v111 + 1;
                                        *(_DWORD *)(v113 + 4 * v111) = v110;
                                        --v107;
                                      }
                                      while (v107 > 1);
                                    }
LABEL_266:
                                    v114 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v19 = *((_QWORD *)this + 2);
                                    if ((unint64_t)v114 >= v19)
                                      break;
                                    v115 = *v114;
                                    if (v115 == 93)
                                    {
                                      while (1)
                                      {
                                        *((_QWORD *)this + 1) = v114 + 1;
LABEL_271:
                                        v224[0] = 0;
                                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v224) & 1) == 0)return 0;
                                        v116 = v224[0];
                                        v117 = *(_DWORD *)(a1 + 144);
                                        if (v117 == *(_DWORD *)(a1 + 148))
                                        {
                                          sub_1002A19E0(v220, v117 + 1);
                                          v117 = *(_DWORD *)(a1 + 144);
                                        }
                                        v118 = *(_QWORD *)(a1 + 136);
                                        v119 = v117 + 1;
                                        *(_DWORD *)(a1 + 144) = v117 + 1;
                                        *(_DWORD *)(v118 + 4 * v117) = v116;
                                        v120 = *((_QWORD *)this + 1);
                                        v121 = *((_DWORD *)this + 4) - v120;
                                        if (v121 >= 1)
                                        {
                                          v122 = v121 / 5u;
                                          v123 = v122 >= *(_DWORD *)(a1 + 148) - v119
                                               ? *(_DWORD *)(a1 + 148) - v119
                                               : v122;
                                          if (v123 >= 1)
                                          {
                                            v124 = 0;
                                            while (*(_BYTE *)v120 == 93)
                                            {
                                              v125 = *(_DWORD *)(v120 + 1);
                                              if (v119 >= *(_DWORD *)(a1 + 148))
                                              {
                                                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                                v126 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v126);
                                                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                v119 = *(_DWORD *)(a1 + 144);
                                                v118 = *(_QWORD *)(a1 + 136);
                                              }
                                              *(_DWORD *)(a1 + 144) = v119 + 1;
                                              *(_DWORD *)(v118 + 4 * v119) = v125;
                                              ++v124;
                                              v120 += 5;
                                              ++v119;
                                              if (v123 == v124)
                                              {
                                                v124 = v123;
                                                break;
                                              }
                                            }
                                            if (v124)
                                              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v124);
                                          }
                                        }
LABEL_287:
                                        v114 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                        v22 = *((_QWORD *)this + 2);
                                        if ((unint64_t)v114 >= v22)
                                          goto LABEL_2;
                                        v127 = *v114;
                                        if (v127 != 93)
                                        {
                                          if (v127 == 96)
                                          {
                                            for (k = (char *)(v114 + 1); ; k = (char *)(v139 + 1))
                                            {
                                              *((_QWORD *)this + 1) = k;
LABEL_292:
                                              v224[0] = 0;
                                              if ((unint64_t)k >= v22 || *k < 0)
                                              {
                                                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v224);
                                                if (!(_DWORD)result)
                                                  return result;
                                                v128 = v224[0];
                                              }
                                              else
                                              {
                                                v128 = *k;
                                                *((_QWORD *)this + 1) = k + 1;
                                              }
                                              v129 = *(_DWORD *)(a1 + 160);
                                              if (v129 == *(_DWORD *)(a1 + 164))
                                              {
                                                sub_1002A19E0(v218, v129 + 1);
                                                v129 = *(_DWORD *)(a1 + 160);
                                              }
                                              v130 = *(_QWORD *)(a1 + 152);
                                              *(_DWORD *)(a1 + 160) = v129 + 1;
                                              *(_DWORD *)(v130 + 4 * v129) = v128;
                                              v131 = *(_DWORD *)(a1 + 164) - *(_DWORD *)(a1 + 160);
                                              if (v131 >= 1)
                                              {
                                                v132 = v131 + 1;
                                                do
                                                {
                                                  v133 = (_BYTE *)*((_QWORD *)this + 1);
                                                  v134 = *((_QWORD *)this + 2);
                                                  if ((unint64_t)v133 >= v134 || *v133 != 96)
                                                    break;
                                                  *((_QWORD *)this + 1) = v133 + 1;
                                                  v224[0] = 0;
                                                  if ((unint64_t)(v133 + 1) >= v134 || (char)v133[1] < 0)
                                                  {
                                                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v224);
                                                    if (!(_DWORD)result)
                                                      return result;
                                                    v135 = v224[0];
                                                  }
                                                  else
                                                  {
                                                    v135 = v133[1];
                                                    *((_QWORD *)this + 1) = v133 + 2;
                                                  }
                                                  v136 = *(_DWORD *)(a1 + 160);
                                                  if (v136 >= *(_DWORD *)(a1 + 164))
                                                  {
                                                    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                                    v137 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                                    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v137);
                                                    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                    v136 = *(_DWORD *)(a1 + 160);
                                                  }
                                                  v138 = *(_QWORD *)(a1 + 152);
                                                  *(_DWORD *)(a1 + 160) = v136 + 1;
                                                  *(_DWORD *)(v138 + 4 * v136) = v135;
                                                  --v132;
                                                }
                                                while (v132 > 1);
                                              }
LABEL_311:
                                              v139 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                              v22 = *((_QWORD *)this + 2);
                                              if ((unint64_t)v139 >= v22)
                                                break;
                                              v140 = *v139;
                                              if (v140 == 104)
                                              {
                                                v23 = v139 + 1;
                                                *((_QWORD *)this + 1) = v23;
LABEL_316:
                                                if ((unint64_t)v23 >= v22 || (char)*v23 < 0)
                                                {
                                                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v210);
                                                  if (!(_DWORD)result)
                                                    return result;
                                                  v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                  v22 = *((_QWORD *)this + 2);
                                                }
                                                else
                                                {
                                                  *v210 = *v23;
                                                  v39 = v23 + 1;
                                                  *((_QWORD *)this + 1) = v39;
                                                }
                                                *(_DWORD *)(a1 + 276) |= 0x1000u;
                                                if ((unint64_t)v39 < v22)
                                                {
                                                  v40 = *v39;
                                                  while (v40 == 112)
                                                  {
                                                    v24 = (char *)(v39 + 1);
                                                    *((_QWORD *)this + 1) = v24;
LABEL_107:
                                                    v224[0] = 0;
                                                    if ((unint64_t)v24 >= v22 || *v24 < 0)
                                                    {
                                                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v224);
                                                      if (!(_DWORD)result)
                                                        return result;
                                                      v28 = v224[0];
                                                    }
                                                    else
                                                    {
                                                      v28 = *v24;
                                                      *((_QWORD *)this + 1) = v24 + 1;
                                                    }
                                                    v29 = *(_DWORD *)(a1 + 184);
                                                    if (v29 == *(_DWORD *)(a1 + 188))
                                                    {
                                                      sub_1002A19E0(v214, v29 + 1);
                                                      v29 = *(_DWORD *)(a1 + 184);
                                                    }
                                                    v30 = *(_QWORD *)(a1 + 176);
                                                    *(_DWORD *)(a1 + 184) = v29 + 1;
                                                    *(_DWORD *)(v30 + 4 * v29) = v28;
                                                    v31 = *(_DWORD *)(a1 + 188) - *(_DWORD *)(a1 + 184);
                                                    if (v31 >= 1)
                                                    {
                                                      v32 = v31 + 1;
                                                      do
                                                      {
                                                        v33 = (_BYTE *)*((_QWORD *)this + 1);
                                                        v34 = *((_QWORD *)this + 2);
                                                        if ((unint64_t)v33 >= v34 || *v33 != 112)
                                                          break;
                                                        *((_QWORD *)this + 1) = v33 + 1;
                                                        v224[0] = 0;
                                                        if ((unint64_t)(v33 + 1) >= v34 || (char)v33[1] < 0)
                                                        {
                                                          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v224);
                                                          if (!(_DWORD)result)
                                                            return result;
                                                          v35 = v224[0];
                                                        }
                                                        else
                                                        {
                                                          v35 = v33[1];
                                                          *((_QWORD *)this + 1) = v33 + 2;
                                                        }
                                                        v36 = *(_DWORD *)(a1 + 184);
                                                        if (v36 >= *(_DWORD *)(a1 + 188))
                                                        {
                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                                          v37 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v37);
                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                          v36 = *(_DWORD *)(a1 + 184);
                                                        }
                                                        v38 = *(_QWORD *)(a1 + 176);
                                                        *(_DWORD *)(a1 + 184) = v36 + 1;
                                                        *(_DWORD *)(v38 + 4 * v36) = v35;
                                                        --v32;
                                                      }
                                                      while (v32 > 1);
                                                    }
LABEL_126:
                                                    v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                    v22 = *((_QWORD *)this + 2);
                                                    if ((unint64_t)v39 >= v22)
                                                      break;
                                                    v40 = *v39;
                                                    if (v40 == 125)
                                                    {
                                                      do
                                                      {
                                                        *((_QWORD *)this + 1) = v39 + 1;
LABEL_326:
                                                        v224[0] = 0;
                                                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v224) & 1) == 0)return 0;
                                                        v141 = v224[0];
                                                        v142 = *(_DWORD *)(a1 + 200);
                                                        if (v142 == *(_DWORD *)(a1 + 204))
                                                        {
                                                          sub_1002A19E0(v222, v142 + 1);
                                                          v142 = *(_DWORD *)(a1 + 200);
                                                        }
                                                        v143 = *(_QWORD *)(a1 + 192);
                                                        v144 = v142 + 1;
                                                        *(_DWORD *)(a1 + 200) = v142 + 1;
                                                        *(_DWORD *)(v143 + 4 * v142) = v141;
                                                        v145 = *((_QWORD *)this + 1);
                                                        v146 = *((_DWORD *)this + 4) - v145;
                                                        if (v146 >= 1)
                                                        {
                                                          v147 = v146 / 5u;
                                                          v148 = v147 >= *(_DWORD *)(a1 + 204) - v144
                                                               ? *(_DWORD *)(a1 + 204) - v144
                                                               : v147;
                                                          if (v148 >= 1)
                                                          {
                                                            v149 = 0;
                                                            while (*(_BYTE *)v145 == 125)
                                                            {
                                                              v150 = *(_DWORD *)(v145 + 1);
                                                              if (v144 >= *(_DWORD *)(a1 + 204))
                                                              {
                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                                                v151 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                                                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v151);
                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                v144 = *(_DWORD *)(a1 + 200);
                                                                v143 = *(_QWORD *)(a1 + 192);
                                                              }
                                                              *(_DWORD *)(a1 + 200) = v144 + 1;
                                                              *(_DWORD *)(v143 + 4 * v144) = v150;
                                                              ++v149;
                                                              v145 += 5;
                                                              ++v144;
                                                              if (v148 == v149)
                                                              {
                                                                v149 = v148;
                                                                break;
                                                              }
                                                            }
                                                            if (v149)
                                                              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v149);
                                                          }
                                                        }
LABEL_342:
                                                        v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                        v152 = *((_QWORD *)this + 2);
                                                      }
                                                      while ((unint64_t)v39 < v152 && *v39 == 125);
                                                      if ((int)v152 - (int)v39 >= 2 && *v39 == 133 && v39[1] == 1)
                                                      {
                                                        while (1)
                                                        {
                                                          *((_QWORD *)this + 1) = v39 + 2;
LABEL_348:
                                                          if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x85, TagFallback) != 2)
                                                          {
                                                            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/wire_format_lite_inl.h", 247);
                                                            v153 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (UInt32Size(tag)) == (tag_size): ");
                                                            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v153);
                                                            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                          }
                                                          v224[0] = 0;
                                                          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v224) & 1) == 0)return 0;
                                                          v154 = v224[0];
                                                          v155 = *(_DWORD *)(a1 + 216);
                                                          if (v155 == *(_DWORD *)(a1 + 220))
                                                          {
                                                            sub_1002A19E0(v208, v155 + 1);
                                                            v155 = *(_DWORD *)(a1 + 216);
                                                          }
                                                          v156 = *(_QWORD *)(a1 + 208);
                                                          v157 = v155 + 1;
                                                          *(_DWORD *)(a1 + 216) = v155 + 1;
                                                          *(_DWORD *)(v156 + 4 * v155) = v154;
                                                          v158 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                          v159 = *((_DWORD *)this + 4) - (_DWORD)v158;
                                                          if (v159 >= 1)
                                                          {
                                                            v160 = v159 / 6u;
                                                            v161 = v160 >= *(_DWORD *)(a1 + 220) - v157
                                                                 ? *(_DWORD *)(a1 + 220) - v157
                                                                 : v160;
                                                            if (v161 >= 1)
                                                            {
                                                              v162 = 0;
                                                              while (*v158 == 133 && v158[1] == 1)
                                                              {
                                                                v163 = *(_DWORD *)(v158 + 2);
                                                                if (v157 >= *(_DWORD *)(a1 + 220))
                                                                {
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                                                  v164 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                                                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v164);
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                  v157 = *(_DWORD *)(a1 + 216);
                                                                  v156 = *(_QWORD *)(a1 + 208);
                                                                }
                                                                *(_DWORD *)(a1 + 216) = v157 + 1;
                                                                *(_DWORD *)(v156 + 4 * v157) = v163;
                                                                ++v162;
                                                                v158 += 6;
                                                                ++v157;
                                                                if (v161 == v162)
                                                                {
                                                                  v162 = v161;
                                                                  break;
                                                                }
                                                              }
                                                              if (v162)
                                                                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 6 * v162);
                                                            }
                                                          }
LABEL_367:
                                                          v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                          if (*((_DWORD *)this + 4) - (int)v39 <= 1)
                                                            break;
                                                          v165 = *v39;
                                                          if (v165 == 141)
                                                          {
                                                            if (v39[1] == 1)
                                                            {
                                                              while (1)
                                                              {
                                                                *((_QWORD *)this + 1) = v39 + 2;
LABEL_374:
                                                                if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x8D, TagFallback) != 2)
                                                                {
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/wire_format_lite_inl.h", 247);
                                                                  v166 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (UInt32Size(tag)) == (tag_size): ");
                                                                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v166);
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                }
                                                                v224[0] = 0;
                                                                if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v224) & 1) == 0)return 0;
                                                                v167 = v224[0];
                                                                v168 = *(_DWORD *)(a1 + 232);
                                                                if (v168 == *(_DWORD *)(a1 + 236))
                                                                {
                                                                  sub_1002A19E0(v207, v168 + 1);
                                                                  v168 = *(_DWORD *)(a1 + 232);
                                                                }
                                                                v169 = *(_QWORD *)(a1 + 224);
                                                                v170 = v168 + 1;
                                                                *(_DWORD *)(a1 + 232) = v168 + 1;
                                                                *(_DWORD *)(v169 + 4 * v168) = v167;
                                                                v171 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                                v172 = *((_DWORD *)this + 4) - (_DWORD)v171;
                                                                if (v172 >= 1)
                                                                {
                                                                  v173 = v172 / 6u;
                                                                  v174 = v173 >= *(_DWORD *)(a1 + 236) - v170
                                                                       ? *(_DWORD *)(a1 + 236) - v170
                                                                       : v173;
                                                                  if (v174 >= 1)
                                                                  {
                                                                    v175 = 0;
                                                                    while (*v171 == 141 && v171[1] == 1)
                                                                    {
                                                                      v176 = *(_DWORD *)(v171 + 2);
                                                                      if (v170 >= *(_DWORD *)(a1 + 236))
                                                                      {
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                                                        v177 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                                                        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v177);
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                        v170 = *(_DWORD *)(a1 + 232);
                                                                        v169 = *(_QWORD *)(a1 + 224);
                                                                      }
                                                                      *(_DWORD *)(a1 + 232) = v170 + 1;
                                                                      *(_DWORD *)(v169 + 4 * v170) = v176;
                                                                      ++v175;
                                                                      v171 += 6;
                                                                      ++v170;
                                                                      if (v174 == v175)
                                                                      {
                                                                        v175 = v174;
                                                                        break;
                                                                      }
                                                                    }
                                                                    if (v175)
                                                                      wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 6 * v175);
                                                                  }
                                                                }
LABEL_393:
                                                                v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                                if (*((_DWORD *)this + 4) - (int)v39 <= 1)
                                                                  break;
                                                                v178 = *v39;
                                                                if (v178 == 145)
                                                                {
                                                                  if (v39[1] == 1)
                                                                  {
                                                                    while (1)
                                                                    {
                                                                      *((_QWORD *)this + 1) = v39 + 2;
LABEL_400:
                                                                      if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x91, TagFallback) != 2)
                                                                      {
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/wire_format_lite_inl.h", 247);
                                                                        v179 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (UInt32Size(tag)) == (tag_size): ");
                                                                        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v179);
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                      }
                                                                      *(_QWORD *)v224 = 0;
                                                                      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v224) & 1) == 0)return 0;
                                                                      v180 = *(_QWORD *)v224;
                                                                      v181 = *(_DWORD *)(a1 + 248);
                                                                      if (v181 == *(_DWORD *)(a1 + 252))
                                                                      {
                                                                        sub_1002E60A0(v206, v181 + 1);
                                                                        v181 = *(_DWORD *)(a1 + 248);
                                                                      }
                                                                      v182 = *(_QWORD *)(a1 + 240);
                                                                      v183 = v181 + 1;
                                                                      *(_DWORD *)(a1 + 248) = v181 + 1;
                                                                      *(_QWORD *)(v182 + 8 * v181) = v180;
                                                                      v184 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                                      v185 = *((_DWORD *)this + 4) - (_DWORD)v184;
                                                                      if (v185 >= 1)
                                                                      {
                                                                        v186 = v185 / 0xAu;
                                                                        v187 = v186 >= *(_DWORD *)(a1 + 252) - v183
                                                                             ? *(_DWORD *)(a1 + 252) - v183
                                                                             : v186;
                                                                        if (v187 >= 1)
                                                                        {
                                                                          v188 = 0;
                                                                          while (*v184 == 145 && v184[1] == 1)
                                                                          {
                                                                            v189 = *(_QWORD *)(v184 + 2);
                                                                            if (v183 >= *(_DWORD *)(a1 + 252))
                                                                            {
                                                                              wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                                                              v190 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                                                              wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v190);
                                                                              wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                              v183 = *(_DWORD *)(a1 + 248);
                                                                              v182 = *(_QWORD *)(a1 + 240);
                                                                            }
                                                                            *(_DWORD *)(a1 + 248) = v183 + 1;
                                                                            *(_QWORD *)(v182 + 8 * v183) = v189;
                                                                            ++v188;
                                                                            v184 += 10;
                                                                            ++v183;
                                                                            if (v187 == v188)
                                                                            {
                                                                              v188 = v187;
                                                                              break;
                                                                            }
                                                                          }
                                                                          if (v188)
                                                                            wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 10 * v188);
                                                                        }
                                                                      }
LABEL_419:
                                                                      v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                                      if (*((_DWORD *)this + 4) - (int)v39 <= 1)
                                                                        goto LABEL_2;
                                                                      v191 = *v39;
                                                                      if (v191 == 153)
                                                                        break;
                                                                      if (v191 != 145 || v39[1] != 1)
                                                                        goto LABEL_2;
                                                                    }
                                                                    if (v39[1] == 1)
                                                                    {
                                                                      do
                                                                      {
                                                                        *((_QWORD *)this + 1) = v39 + 2;
LABEL_426:
                                                                        if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x99, TagFallback) != 2)
                                                                        {
                                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/wire_format_lite_inl.h", 247);
                                                                          v192 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (UInt32Size(tag)) == (tag_size): ");
                                                                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v192);
                                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                        }
                                                                        *(_QWORD *)v224 = 0;
                                                                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v224) & 1) == 0)return 0;
                                                                        v193 = *(_QWORD *)v224;
                                                                        v194 = *(_DWORD *)(a1 + 264);
                                                                        if (v194 == *(_DWORD *)(a1 + 268))
                                                                        {
                                                                          sub_1002E60A0(v209, v194 + 1);
                                                                          v194 = *(_DWORD *)(a1 + 264);
                                                                        }
                                                                        v195 = *(_QWORD *)(a1 + 256);
                                                                        v196 = v194 + 1;
                                                                        *(_DWORD *)(a1 + 264) = v194 + 1;
                                                                        *(_QWORD *)(v195 + 8 * v194) = v193;
                                                                        v197 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                                        v198 = *((_DWORD *)this + 4) - (_DWORD)v197;
                                                                        if (v198 >= 1)
                                                                        {
                                                                          v199 = v198 / 0xAu;
                                                                          v200 = v199 >= *(_DWORD *)(a1 + 268) - v196
                                                                               ? *(_DWORD *)(a1 + 268) - v196
                                                                               : v199;
                                                                          if (v200 >= 1)
                                                                          {
                                                                            v201 = 0;
                                                                            while (*v197 == 153 && v197[1] == 1)
                                                                            {
                                                                              v202 = *(_QWORD *)(v197 + 2);
                                                                              if (v196 >= *(_DWORD *)(a1 + 268))
                                                                              {
                                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v224, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                                                                                v203 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v224, "CHECK failed: (size()) < (Capacity()): ");
                                                                                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v203);
                                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                                v196 = *(_DWORD *)(a1 + 264);
                                                                                v195 = *(_QWORD *)(a1 + 256);
                                                                              }
                                                                              *(_DWORD *)(a1 + 264) = v196 + 1;
                                                                              *(_QWORD *)(v195 + 8 * v196) = v202;
                                                                              ++v201;
                                                                              v197 += 10;
                                                                              ++v196;
                                                                              if (v200 == v201)
                                                                              {
                                                                                v201 = v200;
                                                                                break;
                                                                              }
                                                                            }
                                                                            if (v201)
                                                                              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 10 * v201);
                                                                          }
                                                                        }
LABEL_445:
                                                                        v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                                                        v204 = (unsigned __int8 *)*((_QWORD *)this + 2);
                                                                      }
                                                                      while ((int)v204 - (int)v39 > 1
                                                                           && *v39 == 153
                                                                           && v39[1] == 1);
                                                                      if (v39 == v204
                                                                        && (*((_DWORD *)this + 11)
                                                                         || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                                                                      {
                                                                        *((_DWORD *)this + 8) = 0;
                                                                        result = 1;
                                                                        *((_BYTE *)this + 36) = 1;
                                                                        return result;
                                                                      }
                                                                    }
                                                                  }
                                                                  goto LABEL_2;
                                                                }
                                                                if (v178 != 141 || v39[1] != 1)
                                                                  goto LABEL_2;
                                                              }
                                                            }
                                                            goto LABEL_2;
                                                          }
                                                          if (v165 != 133 || v39[1] != 1)
                                                            goto LABEL_2;
                                                        }
                                                      }
                                                      goto LABEL_2;
                                                    }
                                                  }
                                                }
                                                goto LABEL_2;
                                              }
                                              if (v140 != 96)
                                                goto LABEL_2;
                                            }
                                          }
                                          goto LABEL_2;
                                        }
                                      }
                                    }
                                    if (v115 != 80)
                                      goto LABEL_2;
                                  }
                                }
                              }
                            }
                            goto LABEL_2;
                          }
                        }
                      }
                    }
                    goto LABEL_2;
                  }
                }
              }
              if (v76 != 32)
                goto LABEL_2;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_150;
        if (v7 != 2)
          goto LABEL_67;
        result = sub_1002C6D44(this, v216);
        if (!(_DWORD)result)
          return result;
        goto LABEL_166;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B3CD70(this, v217);
          if (!(_DWORD)result)
            return result;
          goto LABEL_190;
        }
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        i = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_171;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_195;
        if (v7 != 2)
          goto LABEL_67;
        result = sub_1002C6D44(this, v221);
        if (!(_DWORD)result)
          return result;
        goto LABEL_95;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_99;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B320D4(this, v219);
          if (!(_DWORD)result)
            return result;
          goto LABEL_228;
        }
        if (v7 == 5)
          goto LABEL_212;
        goto LABEL_67;
      case 8u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v17 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_232;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_67;
        v18 = *(_DWORD *)(a1 + 276);
        goto LABEL_240;
      case 0xAu:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B3CD70(this, v215);
          if (!(_DWORD)result)
            return result;
          goto LABEL_266;
        }
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        j = (char *)*((_QWORD *)this + 1);
        v19 = *((_QWORD *)this + 2);
        goto LABEL_247;
      case 0xBu:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B320D4(this, v220);
          if (!(_DWORD)result)
            return result;
          goto LABEL_287;
        }
        if (v7 == 5)
          goto LABEL_271;
        goto LABEL_67;
      case 0xCu:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B3CD70(this, v218);
          if (!(_DWORD)result)
            return result;
          goto LABEL_311;
        }
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        k = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_292;
      case 0xDu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_316;
      case 0xEu:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B3CD70(this, v214);
          if (!(_DWORD)result)
            return result;
          goto LABEL_126;
        }
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v24 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_107;
      case 0xFu:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B320D4(this, v222);
          if (!(_DWORD)result)
            return result;
          goto LABEL_342;
        }
        if (v7 == 5)
          goto LABEL_326;
        goto LABEL_67;
      case 0x10u:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B320D4(this, v208);
          if (!(_DWORD)result)
            return result;
          goto LABEL_367;
        }
        if (v7 == 5)
          goto LABEL_348;
        goto LABEL_67;
      case 0x11u:
        v7 = TagFallback & 7;
        if (v7 == 2)
        {
          result = sub_100B320D4(this, v207);
          if (!(_DWORD)result)
            return result;
          goto LABEL_393;
        }
        if (v7 == 5)
          goto LABEL_374;
        goto LABEL_67;
      case 0x12u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_400;
        if (v7 != 2)
          goto LABEL_67;
        result = sub_1002C6D44(this, v206);
        if (!(_DWORD)result)
          return result;
        goto LABEL_419;
      case 0x13u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_426;
        if (v7 != 2)
          goto LABEL_67;
        result = sub_1002C6D44(this, v209);
        if (!(_DWORD)result)
          return result;
        goto LABEL_445;
      default:
        v7 = TagFallback & 7;
        goto LABEL_67;
    }
  }
}

void sub_100B3CCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_100B3CD70(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v12 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
    if (!(_DWORD)result)
      return result;
    v5 = v12;
  }
  else
  {
    v5 = *v4;
    v12 = v5;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
  {
    do
    {
      v13 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v13);
        if (!(_DWORD)result)
          return result;
        v9 = v13;
      }
      else
      {
        v9 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v10 = *(_DWORD *)(a2 + 8);
      if (v10 == *(_DWORD *)(a2 + 12))
      {
        sub_1002A19E0(a2, v10 + 1);
        v10 = *(_DWORD *)(a2 + 8);
      }
      v11 = *(_QWORD *)a2;
      *(_DWORD *)(a2 + 8) = v10 + 1;
      *(_DWORD *)(v11 + 4 * v10) = v9;
    }
    while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) > 0);
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
  return 1;
}

uint64_t sub_100B3CE84(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = result;
  if ((*(_BYTE *)(result + 276) & 1) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
  if (*(int *)(v5 + 24) >= 1)
  {
    v6 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(*(_QWORD *)(v5 + 16) + 4 * v6++), a3);
    while (v6 < *(int *)(v5 + 24));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(*(_QWORD *)(v5 + 32) + 8 * v7++), a3);
    while (v7 < *(int *)(v5 + 40));
  }
  if (*(int *)(v5 + 56) >= 1)
  {
    v8 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 56));
  }
  if (*(int *)(v5 + 72) >= 1)
  {
    v9 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(*(_QWORD *)(v5 + 64) + 8 * v9++), a3);
    while (v9 < *(int *)(v5 + 72));
  }
  if ((*(_BYTE *)(v5 + 276) & 0x20) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 80), a2, a4);
  if (*(int *)(v5 + 96) >= 1)
  {
    v10 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(float *)(*(_QWORD *)(v5 + 88) + 4 * v10++), a3);
    while (v10 < *(int *)(v5 + 96));
  }
  v11 = *(_DWORD *)(v5 + 276);
  if ((v11 & 0x80) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_QWORD *)(v5 + 104), a2, a4);
    v11 = *(_DWORD *)(v5 + 276);
  }
  if ((v11 & 0x100) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(9, *(_QWORD *)(v5 + 112), a2);
  if (*(int *)(v5 + 128) >= 1)
  {
    v12 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(*(_QWORD *)(v5 + 120) + 4 * v12++), a2, a4);
    while (v12 < *(int *)(v5 + 128));
  }
  if (*(int *)(v5 + 144) >= 1)
  {
    v13 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, a2, *(float *)(*(_QWORD *)(v5 + 136) + 4 * v13++), a3);
    while (v13 < *(int *)(v5 + 144));
  }
  if (*(int *)(v5 + 160) >= 1)
  {
    v14 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(*(_QWORD *)(v5 + 152) + 4 * v14++), a2, a4);
    while (v14 < *(int *)(v5 + 160));
  }
  if ((*(_BYTE *)(v5 + 277) & 0x10) != 0)
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_QWORD *)(v5 + 168), a2, a4);
  if (*(int *)(v5 + 184) >= 1)
  {
    v15 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_DWORD *)(*(_QWORD *)(v5 + 176) + 4 * v15++), a2, a4);
    while (v15 < *(int *)(v5 + 184));
  }
  if (*(int *)(v5 + 200) >= 1)
  {
    v16 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, a2, *(float *)(*(_QWORD *)(v5 + 192) + 4 * v16++), a3);
    while (v16 < *(int *)(v5 + 200));
  }
  if (*(int *)(v5 + 216) >= 1)
  {
    v17 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, a2, *(float *)(*(_QWORD *)(v5 + 208) + 4 * v17++), a3);
    while (v17 < *(int *)(v5 + 216));
  }
  if (*(int *)(v5 + 232) >= 1)
  {
    v18 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, a2, *(float *)(*(_QWORD *)(v5 + 224) + 4 * v18++), a3);
    while (v18 < *(int *)(v5 + 232));
  }
  if (*(int *)(v5 + 248) >= 1)
  {
    v19 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, a2, *(double *)(*(_QWORD *)(v5 + 240) + 8 * v19++), a3);
    while (v19 < *(int *)(v5 + 248));
  }
  if (*(int *)(v5 + 264) >= 1)
  {
    v20 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, a2, *(double *)(*(_QWORD *)(v5 + 256) + 8 * v20++), a3);
    while (v20 < *(int *)(v5 + 264));
  }
  return result;
}

uint64_t sub_100B3D1FC(uint64_t a1, unint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  uint64_t result;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  v3 = *(_DWORD *)(a1 + 276);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_10;
  }
  if ((v3 & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 276);
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_7:
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 80), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 276);
  }
LABEL_8:
  if ((v3 & 0x80) != 0)
  {
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 104), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 276);
  }
LABEL_10:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v5 = *(_QWORD *)(a1 + 112);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = v6;
      v8 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(v5 + 23);
      else
        v9 = v8;
      if (v9 >= 0x80)
      {
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9, a2);
        v6 = *(unsigned __int8 *)(v5 + 23);
        v8 = *(_QWORD *)(v5 + 8);
        v3 = *(_DWORD *)(a1 + 276);
        v7 = *(_BYTE *)(v5 + 23);
      }
      else
      {
        v10 = 1;
      }
      if (v7 < 0)
        v6 = v8;
      v4 += v10 + v6 + 1;
    }
    if ((v3 & 0x1000) != 0)
      v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 168), a2)+ 1;
  }
  v35 = *(_DWORD *)(a1 + 24);
  v36 = *(_DWORD *)(a1 + 40);
  v37 = v4;
  v11 = *(_DWORD *)(a1 + 56);
  if (v11 < 1)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 48)
                                                                                             + 4 * v12);
      if ((v14 & 0x80000000) != 0)
      {
        v15 = 10;
      }
      else if (v14 >= 0x80)
      {
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
        v11 = *(_DWORD *)(a1 + 56);
      }
      else
      {
        v15 = 1;
      }
      v13 += v15;
      ++v12;
    }
    while (v12 < v11);
  }
  v33 = *(_DWORD *)(a1 + 96);
  v34 = *(_DWORD *)(a1 + 72);
  v16 = *(_DWORD *)(a1 + 128);
  if (v16 < 1)
  {
    v18 = 0;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 120)
                                                                                             + 4 * v17);
      if ((v19 & 0x80000000) != 0)
      {
        v20 = 10;
      }
      else if (v19 >= 0x80)
      {
        v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
        v16 = *(_DWORD *)(a1 + 128);
      }
      else
      {
        v20 = 1;
      }
      v18 += v20;
      ++v17;
    }
    while (v17 < v16);
  }
  v21 = *(_DWORD *)(a1 + 144);
  v22 = *(_DWORD *)(a1 + 160);
  if (v22 < 1)
  {
    v24 = 0;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 152)
                                                                                             + 4 * v23);
      if ((v25 & 0x80000000) != 0)
      {
        v26 = 10;
      }
      else if (v25 >= 0x80)
      {
        v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
        v22 = *(_DWORD *)(a1 + 160);
      }
      else
      {
        v26 = 1;
      }
      v24 += v26;
      ++v23;
    }
    while (v23 < v22);
  }
  v27 = *(_DWORD *)(a1 + 184);
  if (v27 < 1)
  {
    v29 = 0;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    do
    {
      v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 176)
                                                                                             + 4 * v28);
      if ((v30 & 0x80000000) != 0)
      {
        v31 = 10;
      }
      else if (v30 >= 0x80)
      {
        v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
        v27 = *(_DWORD *)(a1 + 184);
      }
      else
      {
        v31 = 1;
      }
      v29 += v31;
      ++v28;
    }
    while (v28 < v27);
  }
  result = (v13
                        + v37
                        + v11
                        + v18
                        + 9 * (v34 + v36)
                        + v16
                        + v24
                        + v22
                        + v29
                        + v27
                        + 5 * (v33 + v35 + v21 + *(_DWORD *)(a1 + 200))
                        + 6 * (*(_DWORD *)(a1 + 232) + *(_DWORD *)(a1 + 216))
                        + 10 * (*(_DWORD *)(a1 + 264) + *(_DWORD *)(a1 + 248)));
  *(_DWORD *)(a1 + 272) = result;
  return result;
}

void sub_100B3D51C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B3AA68(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B3D568()
{
  return 1;
}

_QWORD *sub_100B3D570@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.VLLocalizationMaps488Details");
}

void sub_100B3D580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 6020);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      operator new();
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311398 + 8);
    sub_100B3AA68(v5, v6);
  }
}

void sub_100B3D690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B3D6A8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1021732E8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311398 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B3D6FC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B3D6A8(a1);
  operator delete();
}

void sub_100B3D720()
{
  operator new();
}

uint64_t sub_100B3D758(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_100B3B24C(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B3D78C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100B3B2E8(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100B3D980(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311398 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100B3D9AC(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102311398 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B3D1FC(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B3DA18(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B3D580(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B3DA64()
{
  return 1;
}

_QWORD *sub_100B3DA6C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.VLLocalizationDebugInfo");
}

void sub_100B3DA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v18, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", 6380);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 56);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    {
      *(_DWORD *)(a1 + 56) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_1023113A0 + 8);
      sub_100B31888(v6, v7);
      v5 = *(_DWORD *)(a2 + 56);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_21;
      }
    }
    else if ((*(_BYTE *)(a2 + 56) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 56) |= 2u;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_1023113A0 + 16);
    sub_100B39A90(v8, v9);
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_26;
    }
LABEL_21:
    *(_DWORD *)(a1 + 56) |= 4u;
    v10 = *(_DWORD **)(a1 + 24);
    if (!v10)
      operator new();
    v11 = *(_QWORD *)(a2 + 24);
    if (!v11)
      v11 = *(_QWORD *)(qword_1023113A0 + 24);
    sub_100B32D1C(v10, v11);
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_31;
    }
LABEL_26:
    *(_DWORD *)(a1 + 56) |= 8u;
    v12 = *(_DWORD **)(a1 + 32);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 32);
    if (!v13)
      v13 = *(_QWORD *)(qword_1023113A0 + 32);
    sub_100B3A4B4(v12, v13);
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        return;
      goto LABEL_32;
    }
LABEL_31:
    v14 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    *(_DWORD *)(a1 + 48) = v14;
    if ((*(_DWORD *)(a2 + 56) & 0x20) == 0)
      return;
LABEL_32:
    *(_DWORD *)(a1 + 56) |= 0x20u;
    v15 = *(_QWORD *)(a1 + 40);
    if (!v15)
      operator new();
    v16 = *(_QWORD *)(a2 + 40);
    if (!v16)
      v16 = *(_QWORD *)(qword_1023113A0 + 40);
    sub_100B3D580(v15, v16);
  }
}

void sub_100B3DD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B3DD30(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((_QWORD *)qword_1023113A0 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = (_QWORD *)v1[5];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100B3DDC8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102173360;
  sub_100B3DD30(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B3DDF8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102173360;
  sub_100B3DD30(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_100B3DE3C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023113A0;
  if (!qword_1023113A0)
  {
    sub_100B30E60(0, a2, a3, a4);
    return qword_1023113A0;
  }
  return result;
}

void sub_100B3DE68()
{
  operator new();
}

uint64_t sub_100B3DEB0(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 56);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 56) & 1) != 0)
    {
      v3 = *(_QWORD *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(result + 56);
      }
    }
    if ((v2 & 2) != 0)
    {
      v4 = *(_QWORD *)(result + 16);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 28))
        {
          if ((*(_BYTE *)(v4 + 28) & 1) != 0)
          {
            v5 = *(_QWORD *)(v4 + 8);
            if (v5)
            {
              *(_DWORD *)(v5 + 16) = 0;
              *(_DWORD *)(v5 + 28) = 0;
            }
          }
          *(_QWORD *)(v4 + 16) = 0;
        }
        *(_DWORD *)(v4 + 28) = 0;
        v2 = *(_DWORD *)(result + 56);
      }
    }
    if ((v2 & 4) != 0)
    {
      v6 = *(_QWORD *)(result + 24);
      if (v6)
      {
        if (*(int *)(v6 + 16) >= 1)
        {
          v7 = 0;
          do
          {
            v8 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
            ++v7;
          }
          while (v7 < *(int *)(v6 + 16));
        }
        *(_DWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 8) != 0)
    {
      v9 = *(_QWORD *)(v1 + 32);
      if (v9)
      {
        if (*(int *)(v9 + 16) >= 1)
        {
          v10 = 0;
          do
          {
            v11 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v10);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
            ++v10;
          }
          while (v10 < *(int *)(v9 + 16));
        }
        *(_DWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 56);
      }
    }
    *(_DWORD *)(v1 + 48) = 0;
    if ((v2 & 0x20) != 0)
    {
      v12 = *(_QWORD *)(v1 + 40);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v12 + 8);
          if (result)
            result = sub_100B3B24C(result);
        }
        *(_DWORD *)(v12 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t sub_100B3DFF8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  _BYTE *v27;
  int *v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  _BYTE *v36;
  int *v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t result;
  unsigned int v56;

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_24;
        *(_DWORD *)(a1 + 56) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v56 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0;
        }
        else
        {
          v56 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v11 = *((_DWORD *)this + 14);
        v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12)
          return 0;
        v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B31A08(v8, this, v14) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        v15 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)this + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 18)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
        goto LABEL_36;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_24;
LABEL_36:
        *(_DWORD *)(a1 + 56) |= 2u;
        v19 = *(_QWORD *)(a1 + 16);
        if (!v19)
          operator new();
        v56 = 0;
        v20 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0;
        }
        else
        {
          v56 = *v20;
          *((_QWORD *)this + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)this + 14);
        v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B39C6C(v19, this, v24) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        v25 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v25, 1);
        v26 = v25 - 1;
        if (v26 < 0 == v16)
          *((_DWORD *)this + 14) = v26;
        v27 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 != 26)
          continue;
        *((_QWORD *)this + 1) = v27 + 1;
LABEL_50:
        *(_DWORD *)(a1 + 56) |= 4u;
        v28 = *(int **)(a1 + 24);
        if (!v28)
          operator new();
        v56 = 0;
        v29 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v29 >= *((_QWORD *)this + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0;
        }
        else
        {
          v56 = *v29;
          *((_QWORD *)this + 1) = v29 + 1;
        }
        v30 = *((_DWORD *)this + 14);
        v31 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v30 + 1;
        if (v30 >= v31)
          return 0;
        v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B32F70(v28, this, v33) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v32);
        v34 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v34, 1);
        v35 = v34 - 1;
        if (v35 < 0 == v16)
          *((_DWORD *)this + 14) = v35;
        v36 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v36 >= *((_QWORD *)this + 2) || *v36 != 34)
          continue;
        *((_QWORD *)this + 1) = v36 + 1;
LABEL_64:
        *(_DWORD *)(a1 + 56) |= 8u;
        v37 = *(int **)(a1 + 32);
        if (!v37)
          operator new();
        v56 = 0;
        v38 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v38 >= *((_QWORD *)this + 2) || *v38 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0;
        }
        else
        {
          v56 = *v38;
          *((_QWORD *)this + 1) = v38 + 1;
        }
        v39 = *((_DWORD *)this + 14);
        v40 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v39 + 1;
        if (v39 >= v40)
          return 0;
        v41 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B3A708(v37, this, v42) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v41);
        v43 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v43, 1);
        v44 = v43 - 1;
        if (v44 < 0 == v16)
          *((_DWORD *)this + 14) = v44;
        v45 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v45 >= *((_QWORD *)this + 2) || *v45 != 45)
          continue;
        *((_QWORD *)this + 1) = v45 + 1;
LABEL_78:
        v56 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v56) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 48) = v56;
        v10 = *(_DWORD *)(a1 + 56) | 0x10;
        *(_DWORD *)(a1 + 56) = v10;
        v46 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v46 >= *((_QWORD *)this + 2) || *v46 != 50)
          continue;
        *((_QWORD *)this + 1) = v46 + 1;
LABEL_82:
        *(_DWORD *)(a1 + 56) = v10 | 0x20;
        v47 = *(_QWORD *)(a1 + 40);
        if (!v47)
          operator new();
        v56 = 0;
        v48 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v48 >= *((_QWORD *)this + 2) || *v48 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0;
        }
        else
        {
          v56 = *v48;
          *((_QWORD *)this + 1) = v48 + 1;
        }
        v49 = *((_DWORD *)this + 14);
        v50 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v49 + 1;
        if (v49 >= v50)
          return 0;
        v51 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B3D78C(v47, this, v52) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v51);
        v53 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v53, 1);
        v54 = v53 - 1;
        if (v54 < 0 == v16)
          *((_DWORD *)this + 14) = v54;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_50;
        goto LABEL_24;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_64;
        goto LABEL_24;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_78;
        goto LABEL_24;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_24;
        v10 = *(_DWORD *)(a1 + 56);
        goto LABEL_82;
      default:
        v7 = TagFallback & 7;
LABEL_24:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100B3E67C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *(_DWORD *)(result + 56);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_1023113A0 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023113A0 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_14:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_1023113A0 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
LABEL_20:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(float *)(v5 + 48), a3);
    if ((*(_DWORD *)(v5 + 56) & 0x20) == 0)
      return result;
    goto LABEL_21;
  }
LABEL_17:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_1023113A0 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) != 0)
    goto LABEL_20;
LABEL_6:
  if ((v6 & 0x20) == 0)
    return result;
LABEL_21:
  v11 = *(_QWORD *)(v5 + 40);
  if (!v11)
    v11 = *(_QWORD *)(qword_1023113A0 + 40);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
}

uint64_t sub_100B3E798(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  unsigned int v23;
  int v24;
  int v25;

  LOBYTE(v3) = *(_BYTE *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_46;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 56) & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_1023113A0 + 8);
  v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(_BYTE *)(v6 + 36))
  {
    v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0)
      v8 += 9;
    if ((v7 & 4) != 0)
      v7 = v8 + 9;
    else
      v7 = v8;
  }
  *(_DWORD *)(v6 + 32) = v7;
  v4 = v7 + 2;
  v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_1023113A0 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B39EFC(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 += v11 + v12 + 1;
    v3 = *(_DWORD *)(a1 + 56);
  }
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 24);
    if (!v13)
      v13 = *(_QWORD *)(qword_1023113A0 + 24);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B331E0(v13, a2);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    else
      v16 = 1;
    v4 += v15 + v16 + 1;
    v3 = *(_DWORD *)(a1 + 56);
    if ((v3 & 8) == 0)
      goto LABEL_36;
    goto LABEL_30;
  }
  if ((v3 & 8) != 0)
  {
LABEL_30:
    v17 = *(_QWORD *)(a1 + 32);
    if (!v17)
      v17 = *(_QWORD *)(qword_1023113A0 + 32);
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B3A978(v17, a2);
    v19 = (int)v18;
    if (v18 >= 0x80)
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
    else
      v20 = 1;
    v4 += v19 + v20 + 1;
    v3 = *(_DWORD *)(a1 + 56);
  }
LABEL_36:
  if ((v3 & 0x10) != 0)
    v5 = v4 + 5;
  else
    v5 = v4;
  if ((v3 & 0x20) != 0)
  {
    v21 = *(_QWORD *)(a1 + 40);
    if (!v21)
      v21 = *(_QWORD *)(qword_1023113A0 + 40);
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B3D9AC(v21, a2);
    v24 = (int)v22;
    if (v22 >= 0x80)
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, v23);
    else
      v25 = 1;
    v5 = (v5 + v24 + v25 + 1);
  }
LABEL_46:
  *(_DWORD *)(a1 + 52) = v5;
  return v5;
}

void sub_100B3E960(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100B3DA7C(a1, (uint64_t)lpsrc);
}

void sub_100B3E9AC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_100B3DA7C(a1, a2);
  }
}

uint64_t sub_100B3E9EC()
{
  return 1;
}

_QWORD *sub_100B3E9F4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.VLLocalizationResult");
}

uint64_t sub_100B3EA04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

NSInteger sub_100B3EA10(double a1)
{
  id v1;
  NSInteger v2;

  v1 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a1);
  v2 = -[NSDateComponents hour](-[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 32, v1), "hour");

  return v2;
}

void sub_100B3EA74(uint64_t a1)
{
  double Current;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  double v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  int v26;
  int v27;
  unsigned int v28;
  NSObject *v29;
  uint64_t i;
  NSObject *v31;
  void **v32;
  void **v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  NSObject *v38;
  int v39;
  unsigned int v40;
  NSObject *v41;
  void **v42;
  void **v43;
  const char *v44;
  char *v45;
  std::string *v46;
  NSObject *v47;
  int v48;
  std::string::size_type v49;
  unsigned int v50;
  std::string *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  double v58;
  int v59;
  std::string::size_type v60;
  std::string::size_type v61;
  int v62;
  int v63;
  int v64;
  double v65;
  int v66;
  const char *v67;
  char *v68;
  const char *v69;
  char *v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  std::string::size_type v75;
  unsigned int v76;
  std::string *v77;
  const char *v78;
  char *v79;
  const char *v80;
  char *v81;
  const char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  void *v86;
  BOOL v87;
  std::string v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  double v95;
  __int16 v96;
  int v97;
  int v98;
  void **v99;
  __int16 v100;
  unsigned int v101;
  void *__p[2];
  char v103;
  std::string v104;
  _BYTE buf[22];
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  double v113;
  __int16 v114;
  int v115;

  Current = CFAbsoluteTimeGetCurrent();
  sub_100B3FE8C(a1, 0);
  *(_BYTE *)(a1 + 76) = 0;
  sub_1001E4804(buf);
  v3 = sub_1001E4B84(*(uint64_t *)buf, "TaMetricHour", (_DWORD *)(a1 + 72));
  v4 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = sub_100B4009C(Current, v3, *(_DWORD *)(a1 + 72));
  *(double *)(a1 + 64) = v7;
  if (*(_DWORD *)(a1 + 72) != 4 && v7 - Current > 82800.0)
    *(double *)(a1 + 64) = v7 + -86400.0;
  v87 = 0;
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "TaMetricReset", &v87);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v87)
    sub_100B403BC(a1, "reset", Current);
  v104.__r_.__value_.__r.__words[0] = 0;
  v11 = sub_1001FD94C();
  if ((sub_1001FD98C(v11, "TaNextWeeklySubmissionTime", &v104) & 1) != 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v104.__r_.__value_.__r.__words[0];
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "TaMetricEvent, load, TaNextWeeklySubmissionTime, %{public}.0f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LODWORD(v88.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 4) = v104.__r_.__value_.__r.__words[0];
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, load, TaNextWeeklySubmissionTime, %{public}.0f", &v88, 12);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    *(double *)&v104.__r_.__value_.__l.__data_ = Current + 604800.0;
  }
  v98 = 0;
  v15 = sub_1001FD94C();
  if (sub_100526244(v15, "TaWeeklyCountOfSuspiciousDevices", &v98))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v98;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "TaMetricEvent, load, TaWeeklyCountOfSuspiciousDevices, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LODWORD(v88.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v88.__r_.__value_.__r.__words[0]) = v98;
      LODWORD(v84) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, load, TaWeeklyCountOfSuspiciousDevices, %{public}d", &v88, v84);
      v70 = (char *)v69;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v69);
      if (v70 != buf)
        free(v70);
    }
  }
  __p[0] = 0;
  v17 = sub_1001FD94C();
  if ((sub_1001FD98C(v17, "TaNextMonthlySubmissionTime", __p) & 1) != 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      *(void **)&buf[4] = __p[0];
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "TaMetricEvent, load, TaNextMonthlySubmissionTime, %{public}.0f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LODWORD(v88.__r_.__value_.__l.__data_) = 134349056;
      *(void **)((char *)v88.__r_.__value_.__r.__words + 4) = __p[0];
      LODWORD(v84) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, load, TaNextMonthlySubmissionTime, %{public}.0f", &v88, v84);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  else
  {
    *(double *)__p = Current + 2592000.0;
  }
  LODWORD(v86) = 0;
  v21 = sub_1001FD94C();
  if (sub_100526244(v21, "TaMonthlyCountOfSuspiciousDevices", &v86))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = (_DWORD)v86;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "TaMetricEvent, load, TaMonthlyCountOfSuspiciousDevices, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LODWORD(v88.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v88.__r_.__value_.__r.__words[0]) = (_DWORD)v86;
      LODWORD(v84) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, load, TaMonthlyCountOfSuspiciousDevices, %{public}d", &v88, v84);
      v72 = (char *)v71;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v71);
      if (v72 != buf)
        free(v72);
    }
  }
  *(_QWORD *)(a1 + 80) = v104.__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 88) = v98;
  *(void **)(a1 + 96) = __p[0];
  *(_DWORD *)(a1 + 104) = (_DWORD)v86;
  v23 = objc_autoreleasePoolPush();
  v86 = 0;
  sub_1015A2E04(&v88, "na");
  v24 = sub_1001FD94C();
  if (sub_100527258(v24, CFSTR("TA_metrics"), (CFTypeRef *)&v86))
  {
    v25 = v86;
    v26 = objc_msgSend(v86, "count");
    if (v26 < 3)
    {
      std::string::assign(&v88, "mincount");
    }
    else
    {
      sub_1015A2E04(&v104, (char *)objc_msgSend(objc_msgSend(objc_msgSend(v25, "objectAtIndexedSubscript:", 0), "description"), "UTF8String"));
      if (!std::string::compare(&v104, "Version2"))
      {
        v27 = objc_msgSend(objc_msgSend(v25, "objectAtIndexedSubscript:", 1), "intValue");
        v28 = objc_msgSend(objc_msgSend(v25, "objectAtIndexedSubscript:", 2), "intValue");
        if (v27 + v28 + 3 == v26)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102173668);
          v29 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v27;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "TaMetricEvent, load, nUnique, %{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102173668);
            LODWORD(__p[0]) = 67240192;
            HIDWORD(__p[0]) = v27;
            LODWORD(v84) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, load, nUnique, %{public}d", __p, v84);
            v81 = (char *)v80;
            sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v80);
            if (v81 != buf)
              free(v81);
          }
          v85 = v27;
          if (v27 >= 1)
          {
            for (i = 0; i != v27; ++i)
            {
              sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(objc_msgSend(v25, "objectAtIndexedSubscript:", i + 3), "description"), "UTF8String"));
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102173668);
              v31 = qword_1022A0048;
              if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
              {
                if (v103 >= 0)
                  v32 = __p;
                else
                  v32 = (void **)__p[0];
                *(_DWORD *)buf = 136380675;
                *(_QWORD *)&buf[4] = v32;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "TaMetricEvent, load, unique, %{private}s", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_102173668);
                if (v103 >= 0)
                  v33 = __p;
                else
                  v33 = (void **)__p[0];
                v98 = 136380675;
                v99 = v33;
                LODWORD(v84) = 12;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, load, unique, %{private}s", &v98, v84);
                v35 = (char *)v34;
                sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v34);
                if (v35 != buf)
                  free(v35);
              }
              sub_10019C3A8((uint64_t **)a1, (const void **)__p, (uint64_t)__p);
              if (v103 < 0)
                operator delete(__p[0]);
            }
          }
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102173668);
          LODWORD(v36) = v28;
          v37 = v85;
          v38 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v28;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "TaMetricEvent, load, nDetected, %{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102173668);
            LODWORD(__p[0]) = 67240192;
            HIDWORD(__p[0]) = v28;
            LODWORD(v84) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, load, nDetected, %{public}d", __p, v84);
            v83 = (char *)v82;
            sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v82);
            if (v83 != buf)
              free(v83);
            LODWORD(v36) = v28;
            v37 = v85;
          }
          if ((int)v36 >= 1)
          {
            v36 = v36;
            v39 = v37 + 4;
            do
            {
              sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(objc_msgSend(v25, "objectAtIndexedSubscript:", v39 - 1), "description"), "UTF8String"));
              v40 = objc_msgSend(objc_msgSend(v25, "objectAtIndexedSubscript:", v39), "intValue");
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102173668);
              v41 = qword_1022A0048;
              if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
              {
                if (v103 >= 0)
                  v42 = __p;
                else
                  v42 = (void **)__p[0];
                *(_DWORD *)buf = 136380931;
                *(_QWORD *)&buf[4] = v42;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v40;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "TaMetricEvent, load, detected, %{private}s, %{public}d", buf, 0x12u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_102173668);
                if (v103 >= 0)
                  v43 = __p;
                else
                  v43 = (void **)__p[0];
                v98 = 136380931;
                v99 = v43;
                v100 = 1026;
                v101 = v40;
                LODWORD(v84) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, load, detected, %{private}s, %{public}d", &v98, v84);
                v45 = (char *)v44;
                sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v44);
                if (v45 != buf)
                  free(v45);
              }
              *(_QWORD *)buf = __p;
              *((_DWORD *)sub_10055D064((uint64_t **)(a1 + 24), (const void **)__p, (uint64_t)&unk_101B9EB60, (__int128 **)buf)+ 14) = v40;
              if (v103 < 0)
                operator delete(__p[0]);
              v39 += 2;
              --v36;
            }
            while (v36);
          }
        }
        else
        {
          std::string::assign(&v88, "ids");
        }
      }
      else
      {
        std::string::assign(&v88, "version");
      }
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v88.__r_.__value_.__l.__size_ == 2)
      {
        v46 = (std::string *)v88.__r_.__value_.__r.__words[0];
LABEL_116:
        if (LOWORD(v46->__r_.__value_.__l.__data_) == 24942)
          goto LABEL_125;
      }
    }
    else if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) == 2)
    {
      v46 = &v88;
      goto LABEL_116;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v47 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v48 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
      v49 = v88.__r_.__value_.__r.__words[0];
      v50 = objc_msgSend(v25, "count");
      v51 = &v88;
      if (v48 < 0)
        v51 = (std::string *)v49;
      *(_DWORD *)buf = 136446467;
      *(_QWORD *)&buf[4] = v51;
      *(_WORD *)&buf[12] = 1025;
      *(_DWORD *)&buf[14] = v50;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, loaderr, %{public}s, count, %{private}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v73 = qword_1022A0048;
      v74 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
      v75 = v88.__r_.__value_.__r.__words[0];
      v76 = objc_msgSend(v25, "count");
      v77 = &v88;
      if (v74 < 0)
        v77 = (std::string *)v75;
      LODWORD(v104.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
      WORD2(v104.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v104.__r_.__value_.__r.__words[1] + 6) = v76;
      LODWORD(v84) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, 0, "TaMetricEvent, loaderr, %{public}s, count, %{private}d", &v104, v84);
      v79 = (char *)v78;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v78);
      if (v79 != buf)
        free(v79);
    }
    sub_100B403BC(a1, "loaderror", Current);
  }
LABEL_125:
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  objc_autoreleasePoolPop(v23);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102173668);
  v52 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v53 = *(_QWORD *)(a1 + 16);
    v54 = *(_QWORD *)(a1 + 40);
    v55 = *(_DWORD *)(a1 + 48);
    v56 = *(_DWORD *)(a1 + 52);
    v57 = *(_DWORD *)(a1 + 56);
    v58 = *(double *)(a1 + 64) - Current;
    *(_DWORD *)buf = 134350592;
    v59 = *(_DWORD *)(a1 + 72);
    *(_QWORD *)&buf[4] = v53;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v54;
    v106 = 1026;
    v107 = v55;
    v108 = 1026;
    v109 = v56;
    v110 = 1026;
    v111 = v57;
    v112 = 2050;
    v113 = v58 / 3600.0;
    v114 = 1024;
    v115 = v59;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, init, unique, %{public}ld, detected, %{public}ld, suspicious, %{public}d, %{public}d, %{public}d, nextSend, %{public}.1f, sendhour, %d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v60 = *(_QWORD *)(a1 + 16);
    v61 = *(_QWORD *)(a1 + 40);
    v62 = *(_DWORD *)(a1 + 48);
    v63 = *(_DWORD *)(a1 + 52);
    v64 = *(_DWORD *)(a1 + 56);
    v65 = *(double *)(a1 + 64) - Current;
    LODWORD(v88.__r_.__value_.__l.__data_) = 134350592;
    v66 = *(_DWORD *)(a1 + 72);
    *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 4) = v60;
    WORD2(v88.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&v88.__r_.__value_.__r.__words[1] + 6) = v61;
    HIWORD(v88.__r_.__value_.__r.__words[2]) = 1026;
    v89 = v62;
    v90 = 1026;
    v91 = v63;
    v92 = 1026;
    v93 = v64;
    v94 = 2050;
    v95 = v65 / 3600.0;
    v96 = 1024;
    v97 = v66;
    LODWORD(v84) = 56;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetricEvent, init, unique, %{public}ld, detected, %{public}ld, suspicious, %{public}d, %{public}d, %{public}d, nextSend, %{public}.1f, sendhour, %d", &v88, v84);
    v68 = (char *)v67;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v67);
    if (v68 != buf)
      free(v68);
  }
  sub_100228830(a1, Current);
}

void sub_100B3FDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  if (a44 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_100B3FE8C(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102173668);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TaMetricEvent, resetDailyMetricsState, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, resetDailyMetricsState, %{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::resetDailyMetricsState(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100090AE4(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_100090AE4(a1 + 24, *(char **)(a1 + 32));
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  if (a2)
  {
    *(double *)(a1 + 64) = *(double *)(a1 + 64) + 86400.0;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 4;
  }
}

double sub_100B4009C(CFAbsoluteTime a1, uint64_t a2, int a3)
{
  const __CFDate *v5;
  const __CFLocale *v6;
  __CFDateFormatter *v7;
  const __CFString *StringWithDate;
  SInt32 IntValue;
  int v10;
  int v11;
  NSObject *v12;
  double v13;
  const char *v15;
  uint8_t *v16;
  int v17;
  double v18;
  __int16 v19;
  int v20;
  __int16 v21;
  CFAbsoluteTime v22;
  __int16 v23;
  int v24;
  __int16 v25;
  SInt32 v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  int v32;
  __int16 v33;
  CFAbsoluteTime v34;
  __int16 v35;
  int v36;
  __int16 v37;
  SInt32 v38;
  __int16 v39;
  int v40;

  v5 = CFDateCreate(0, a1);
  v6 = CFLocaleCopyCurrent();
  v7 = CFDateFormatterCreate(0, v6, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  CFDateFormatterSetFormat(v7, CFSTR("HH"));
  StringWithDate = CFDateFormatterCreateStringWithDate(0, v7, v5);
  IntValue = CFStringGetIntValue(StringWithDate);
  CFRelease(StringWithDate);
  CFRelease(CFSTR("HH"));
  CFRelease(v7);
  CFRelease(v6);
  CFRelease(v5);
  v10 = (a3 - IntValue + 24) % 24;
  v11 = 3600 * (v10 + (int)a1 / 3600);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102173668);
  v12 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134350336;
    v30 = ((double)v11 - a1) / 3600.0;
    v31 = 1026;
    v32 = 3600 * (v10 + (int)a1 / 3600);
    v33 = 2050;
    v34 = a1;
    v35 = 1026;
    v36 = a3;
    v37 = 1026;
    v38 = IntValue;
    v39 = 1026;
    v40 = (a3 - IntValue + 24) % 24;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, nextSend, %{public}0.1f, abstimes, %{public}d, %{public}.0f, hours, %{public}d, %{public}d, delta, %{public}d", buf, 0x2Eu);
  }
  if (!sub_1001BFF7C(115, 2))
    return (double)v11;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102173668);
  v13 = (double)v11;
  v17 = 134350336;
  v18 = ((double)v11 - a1) / 3600.0;
  v19 = 1026;
  v20 = 3600 * (v10 + (int)a1 / 3600);
  v21 = 2050;
  v22 = a1;
  v23 = 1026;
  v24 = a3;
  v25 = 1026;
  v26 = IntValue;
  v27 = 1026;
  v28 = (a3 - IntValue + 24) % 24;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetricEvent, nextSend, %{public}0.1f, abstimes, %{public}d, %{public}.0f, hours, %{public}d, %{public}d, delta, %{public}d", &v17, 46);
  v16 = (uint8_t *)v15;
  sub_100512490("Generic", 1, 0, 2, "CFAbsoluteTime CLTrackingAvoidanceMetrics::getNextSendTime(CFAbsoluteTime, int)", "%s\n", v15);
  if (v16 != buf)
    free(v16);
  return v13;
}

void sub_100B403BC(uint64_t a1, _BYTE *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  NSMutableArray *v7;
  _QWORD *v8;
  NSObject *v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _BYTE *v15;
  const char *v16;
  uint8_t *v17;
  _QWORD *v18;
  NSObject *v19;
  _BYTE *v20;
  _BYTE *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  NSObject *v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  const char *v61;
  uint8_t *v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  const char *v67;
  uint8_t *v68;
  uint64_t v69;
  void *context;
  _BYTE __p[24];
  _BYTE v73[10];
  _BYTE v74[6];
  _BYTE v75[6];
  int v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  int v80;
  int v81;
  _BYTE *v82;
  __int16 v83;
  int v84;
  uint8_t buf[4];
  _BYTE *v86;
  __int16 v87;
  _BYTE v88[10];
  _BYTE v89[10];
  _BYTE v90[6];
  _BYTE v91[6];
  int v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  int v96;

  if (!*(_BYTE *)(a1 + 76))
  {
    v5 = *(unsigned int *)(a1 + 16);
    v6 = *(unsigned int *)(a1 + 40);
    context = objc_autoreleasePoolPush();
    v7 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (int)v6 + (int)v5 + 3);
    -[NSMutableArray addObject:](v7, "addObject:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Version2"));
    -[NSMutableArray addObject:](v7, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5));
    -[NSMutableArray addObject:](v7, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6));
    v8 = *(_QWORD **)a1;
    if (*(_QWORD *)a1 != a1 + 8)
    {
      do
      {
        if (*((char *)v8 + 55) < 0)
        {
          sub_100115CE4(__p, (void *)v8[4], v8[5]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v8 + 2);
          *(_QWORD *)&__p[16] = v8[6];
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173668);
        v9 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
        {
          if (__p[23] >= 0)
            v10 = __p;
          else
            v10 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136380675;
          v86 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "TaMetricEvent, save, unique, %{private}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102173668);
          if (__p[23] >= 0)
            v15 = __p;
          else
            v15 = *(_BYTE **)__p;
          v81 = 136380675;
          v82 = v15;
          LODWORD(v69) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, save, unique, %{private}s", &v81, v69);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::saveState(const char *, CFAbsoluteTime)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
        if (__p[23] >= 0)
          v11 = __p;
        else
          v11 = *(_BYTE **)__p;
        -[NSMutableArray addObject:](v7, "addObject:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v12 = (_QWORD *)v8[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v8[2];
            v14 = *v13 == (_QWORD)v8;
            v8 = v13;
          }
          while (!v14);
        }
        v8 = v13;
      }
      while (v13 != (_QWORD *)(a1 + 8));
    }
    v18 = *(_QWORD **)(a1 + 24);
    if (v18 != (_QWORD *)(a1 + 32))
    {
      do
      {
        if (*((char *)v18 + 55) < 0)
        {
          sub_100115CE4(__p, (void *)v18[4], v18[5]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v18 + 2);
          *(_QWORD *)&__p[16] = v18[6];
        }
        *(_DWORD *)v73 = *((_DWORD *)v18 + 14);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173668);
        v19 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
        {
          if (__p[23] >= 0)
            v20 = __p;
          else
            v20 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136380931;
          v86 = v20;
          v87 = 1026;
          *(_DWORD *)v88 = *(_DWORD *)v73;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "TaMetricEvent, save, detected, %{private}s, %{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102173668);
          if (__p[23] >= 0)
            v24 = __p;
          else
            v24 = *(_BYTE **)__p;
          v81 = 136380931;
          v82 = v24;
          v83 = 1026;
          v84 = *(_DWORD *)v73;
          LODWORD(v69) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TaMetricEvent, save, detected, %{private}s, %{public}d", &v81, v69);
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::saveState(const char *, CFAbsoluteTime)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
        if (__p[23] >= 0)
          v21 = __p;
        else
          v21 = *(_BYTE **)__p;
        -[NSMutableArray addObject:](v7, "addObject:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
        -[NSMutableArray addObject:](v7, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)v73));
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v22 = (_QWORD *)v18[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v18[2];
            v14 = *v23 == (_QWORD)v18;
            v18 = v23;
          }
          while (!v14);
        }
        v18 = v23;
      }
      while (v23 != (_QWORD *)(a1 + 32));
    }
    v27 = sub_1001FD94C();
    v28 = (double *)(a1 + 80);
    sub_10018A4CC(v27, "TaNextWeeklySubmissionTime", (const void *)(a1 + 80));
    v29 = sub_1001FD94C();
    v30 = (int *)(a1 + 88);
    sub_100019BD4(v29, "TaWeeklyCountOfSuspiciousDevices", (unsigned int *)(a1 + 88));
    v31 = sub_1001FD94C();
    v32 = (double *)(a1 + 96);
    sub_10018A4CC(v31, "TaNextMonthlySubmissionTime", (const void *)(a1 + 96));
    v33 = sub_1001FD94C();
    v34 = (int *)(a1 + 104);
    sub_100019BD4(v33, "TaMonthlyCountOfSuspiciousDevices", (unsigned int *)(a1 + 104));
    v35 = sub_1001FD94C();
    sub_10023EC14(v35);
    v36 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 944))(v36);
    objc_autoreleasePoolPop(context);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v37 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *(_QWORD *)(a1 + 40);
      v40 = *(_DWORD *)(a1 + 48);
      v41 = *(_DWORD *)(a1 + 52);
      v42 = *(_DWORD *)(a1 + 56);
      v43 = *(_QWORD *)(a1 + 64);
      v44 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)buf = 136448002;
      v86 = a2;
      v87 = 2050;
      *(_QWORD *)v88 = v38;
      *(_WORD *)&v88[8] = 2050;
      *(_QWORD *)v89 = v39;
      *(_WORD *)&v89[8] = 1026;
      *(_DWORD *)v90 = v40;
      *(_WORD *)&v90[4] = 1026;
      *(_DWORD *)v91 = v41;
      *(_WORD *)&v91[4] = 1026;
      v92 = v42;
      v93 = 2050;
      v94 = v43;
      v95 = 1024;
      v96 = v44;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, save, %{public}s, uniqueIds, %{public}ld, detectedIds, %{public}ld, suspicious, %{public}d, %{public}d, %{public}d, nextSend, %{public}.1f, sendhour, %d", buf, 0x42u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v54 = *(_QWORD *)(a1 + 16);
      v55 = *(_QWORD *)(a1 + 40);
      v56 = *(_DWORD *)(a1 + 48);
      v57 = *(_DWORD *)(a1 + 52);
      v58 = *(_DWORD *)(a1 + 56);
      v59 = *(_QWORD *)(a1 + 64);
      v60 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)__p = 136448002;
      *(_QWORD *)&__p[4] = a2;
      *(_WORD *)&__p[12] = 2050;
      *(_QWORD *)&__p[14] = v54;
      *(_WORD *)&__p[22] = 2050;
      *(_QWORD *)v73 = v55;
      *(_WORD *)&v73[8] = 1026;
      *(_DWORD *)v74 = v56;
      *(_WORD *)&v74[4] = 1026;
      *(_DWORD *)v75 = v57;
      *(_WORD *)&v75[4] = 1026;
      v76 = v58;
      v77 = 2050;
      v78 = v59;
      v79 = 1024;
      v80 = v60;
      LODWORD(v69) = 66;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetricEvent, save, %{public}s, uniqueIds, %{public}ld, detectedIds, %{public}ld, suspicious, %{public}d, %{public}d, %{public}d, nextSend, %{public}.1f, sendhour, %d", __p, v69);
      v62 = (uint8_t *)v61;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::saveState(const char *, CFAbsoluteTime)", "%s\n", v61);
      if (v62 != buf)
        free(v62);
    }
    v45 = (unint64_t)(3257812231 * (int)(*v28 - a3)) >> 32;
    v46 = (unint64_t)(3257812231 * (int)(*v32 - a3)) >> 32;
    v47 = v46 >> 16;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v48 = (v45 >> 16) + (v45 >> 31);
    v49 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v50 = (unint64_t)*v28;
      v51 = (unint64_t)*v32;
      v52 = *v30;
      v53 = *v34;
      *(_DWORD *)buf = 134350336;
      v86 = (_BYTE *)v50;
      v87 = 1026;
      *(_DWORD *)v88 = v48;
      *(_WORD *)&v88[4] = 1026;
      *(_DWORD *)&v88[6] = v52;
      *(_WORD *)v89 = 2050;
      *(_QWORD *)&v89[2] = v51;
      *(_WORD *)v90 = 1026;
      *(_DWORD *)&v90[2] = v47 + (v46 >> 31);
      *(_WORD *)v91 = 1026;
      *(_DWORD *)&v91[2] = v53;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, save, nextWeekly, %{public}lld, nextWeeklyDaysRem, %{public}d, weeklyCount, %{public}d, nextMonthly, %{public}lld, nextMonthlyDaysRem, %{public}d, monthlyCount, %{public}d", buf, 0x2Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v63 = (unint64_t)*v28;
      v64 = (unint64_t)*v32;
      v65 = *v30;
      v66 = *v34;
      *(_DWORD *)__p = 134350336;
      *(_QWORD *)&__p[4] = v63;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v48;
      *(_WORD *)&__p[18] = 1026;
      *(_DWORD *)&__p[20] = v65;
      *(_WORD *)v73 = 2050;
      *(_QWORD *)&v73[2] = v64;
      *(_WORD *)v74 = 1026;
      *(_DWORD *)&v74[2] = v47 + (v46 >> 31);
      *(_WORD *)v75 = 1026;
      *(_DWORD *)&v75[2] = v66;
      LODWORD(v69) = 46;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetricEvent, save, nextWeekly, %{public}lld, nextWeeklyDaysRem, %{public}d, weeklyCount, %{public}d, nextMonthly, %{public}lld, nextMonthlyDaysRem, %{public}d, monthlyCount, %{public}d", __p, v69);
      v68 = (uint8_t *)v67;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::saveState(const char *, CFAbsoluteTime)", "%s\n", v67);
      if (v68 != buf)
        free(v68);
    }
  }
}

void sub_100B40E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100B40E3C(uint64_t a1, void *a2, double a3)
{
  NSObject *v4;
  id v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _BYTE *v11;
  std::string *v12;
  uint64_t *v13;
  _BYTE *v14;
  std::string *v15;
  const char *v16;
  char *v17;
  id v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  const char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  int v34;
  int v36;
  _QWORD v37[4];
  int v38;
  _QWORD v39[4];
  int v40;
  _QWORD v41[4];
  int v42;
  std::string v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  _BYTE *v49;
  __int16 v50;
  std::string *v51;
  _BYTE __p[12];
  char v53;
  _BYTE v54[128];
  _BYTE buf[12];
  __int16 v56;
  std::string *v57;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102173668);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = objc_msgSend(a2, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TaMetricEvent, didFindSuspiciousDevices, %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v23 = qword_1022A0048;
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = objc_msgSend(a2, "count");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 1, "TaMetricEvent, didFindSuspiciousDevices, %lu", __p);
    v25 = (char *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  sub_100228830(a1, a3);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
  if (v5)
  {
    v36 = 0;
    v34 = 0;
    v6 = 0;
    v7 = *(_QWORD *)v45;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v45 != v7)
          objc_enumerationMutation(a2);
        v9 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v8);
        sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(objc_msgSend(v9, "address"), "hexString"), "UTF8String"));
        sub_1015A2E04(&v43, (char *)objc_msgSend(objc_msgSend(objc_msgSend(v9, "detectionSummary"), "objectForKeyedSubscript:", CFSTR("DetectionAlgorithm")), "UTF8String"));
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173668);
        v10 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          if (v53 >= 0)
            v11 = __p;
          else
            v11 = *(_BYTE **)__p;
          v12 = &v43;
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v12 = (std::string *)v43.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v11;
          v56 = 2082;
          v57 = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, suspicious, %{private}s, %{public}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102173668);
          if (v53 >= 0)
            v14 = __p;
          else
            v14 = *(_BYTE **)__p;
          v15 = &v43;
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v15 = (std::string *)v43.__r_.__value_.__r.__words[0];
          v48 = 136380931;
          v49 = v14;
          v50 = 2082;
          v51 = v15;
          LODWORD(v32) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetricEvent, suspicious, %{private}s, %{public}s", &v48, v32);
          v17 = (char *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
        if (!std::string::compare(&v43, "TAFilterVisits"))
        {
          ++v6;
        }
        else if (!std::string::compare(&v43, "TAFilterGeneral"))
        {
          ++v34;
        }
        else
        {
          ++v36;
        }
        *(_QWORD *)buf = __p;
        v13 = sub_10055D064((uint64_t **)(a1 + 24), (const void **)__p, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
        ++*((_DWORD *)v13 + 14);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (v53 < 0)
          operator delete(*(void **)__p);
        v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      v18 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
      v5 = v18;
    }
    while (v18);
  }
  else
  {
    v36 = 0;
    v34 = 0;
    v6 = 0;
  }
  v19 = *(_DWORD *)(a1 + 52) + v34;
  *(_DWORD *)(a1 + 48) += v6;
  *(_DWORD *)(a1 + 52) = v19;
  *(_DWORD *)(a1 + 56) += v36;
  *(_DWORD *)(a1 + 88) += objc_msgSend(a2, "count");
  *(_DWORD *)(a1 + 104) += objc_msgSend(a2, "count");
  if (v6 && !*(_BYTE *)(a1 + 76))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v20 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "TaMetric, detection, visits, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      *(_DWORD *)__p = 67240192;
      *(_DWORD *)&__p[4] = v6;
      LODWORD(v32) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetric, detection, visits, %{public}d", __p, v32);
      v27 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_100B41924;
    v41[3] = &unk_102146830;
    v42 = v6;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.detection"), v41);
  }
  if (v34 && !*(_BYTE *)(a1 + 76))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v21 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v34;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "TaMetric, detection, general, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      *(_DWORD *)__p = 67240192;
      *(_DWORD *)&__p[4] = v34;
      LODWORD(v32) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetric, detection, general, %{public}d", __p, v32);
      v29 = (char *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_100B419B8;
    v39[3] = &unk_102146830;
    v40 = v34;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.detection"), v39);
  }
  if (v36 && !*(_BYTE *)(a1 + 76))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v36;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "TaMetric, detection, other, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      *(_DWORD *)__p = 67240192;
      *(_DWORD *)&__p[4] = v36;
      LODWORD(v32) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetric, detection, other, %{public}d", __p, v32);
      v31 = (char *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_100B41A4C;
    v37[3] = &unk_102146830;
    v38 = v36;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.detection"), v37);
  }
  sub_100B403BC(a1, "suspicious", a3);
}

void sub_100B418E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a37 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100B41924(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("events");
  v3[0] = CFSTR("visits");
  v2[0] = CFSTR("algorithm");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_100B419B8(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("events");
  v3[0] = CFSTR("general");
  v2[0] = CFSTR("algorithm");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_100B41A4C(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("events");
  v3[0] = CFSTR("other");
  v2[0] = CFSTR("algorithm");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

void sub_100B41AE0(uint64_t a1, void *a2, void *a3, uint64_t a4, double a5)
{
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  int v15;
  id v16;
  SEL v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  _QWORD v23[10];
  int v24;
  int v25;
  void *v26;
  uint8_t buf[4];
  void *v28;

  sub_100228830(a1, a5);
  v10 = objc_msgSend(a2, "address");
  if (a3)
  {
    v11 = v10;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TaMetric, submitting intervisit metrics:%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v25 = 138477827;
      v26 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetric, submitting intervisit metrics:%{private}@", &v25, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleInterVisitMetrics(TASPAdvertisement *, TAMetricsInterVisit *, CFAbsoluteTime, NSUInteger)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v13 = objc_msgSend(a3, "currentInterVisitMetric");
    v14 = objc_msgSend(a3, "totalInterVisitMetric");
    v15 = sub_100B3EA10(a5);
    v16 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", objc_msgSend(a2, "getDeviceType"));
    v17 = NSSelectorFromString(CFSTR("getLatestAdvTypeToString:"));
    if ((objc_opt_respondsToSelector(a2, v17) & 1) != 0)
      v16 = objc_msgSend(a2, "getLatestAdvTypeToString:", v16);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100B41EAC;
    v23[3] = &unk_1021735C8;
    v23[4] = v11;
    v23[5] = v13;
    v24 = v15;
    v23[6] = v14;
    v23[7] = v16;
    v23[8] = a1;
    v23[9] = a4;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.OfflineDeviceVisit"), v23);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "TaMetric, handleInterVisitMetric got nil TAMetricsInterVisit", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LOWORD(v25) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TaMetric, handleInterVisitMetric got nil TAMetricsInterVisit", &v25, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLTrackingAvoidanceMetrics::handleInterVisitMetrics(TASPAdvertisement *, TAMetricsInterVisit *, CFAbsoluteTime, NSUInteger)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
}

NSDictionary *sub_100B41EAC(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  NSNumber *v19;
  uint64_t v20;
  uint64_t v21;
  NSNumber *v22;
  uint64_t v23;
  uint64_t v24;
  NSNumber *v25;
  uint64_t v26;
  uint64_t v27;
  NSNumber *v28;
  uint64_t v29;
  uint64_t v30;
  NSNumber *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  NSNumber *v38;
  uint64_t v39;
  _QWORD v41[25];
  _QWORD v42[25];

  v2 = *(_QWORD *)(a1 + 64);
  v42[0] = CFSTR("intervisit");
  v41[0] = CFSTR("reason");
  v41[1] = CFSTR("deviceIdentifier");
  v42[1] = objc_msgSend(*(id *)(a1 + 32), "hexString");
  v41[2] = CFSTR("distance");
  objc_msgSend(*(id *)(a1 + 40), "distance");
  v42[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v41[3] = CFSTR("duration");
  objc_msgSend(*(id *)(a1 + 40), "duration");
  v42[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3 / 60.0);
  v41[4] = CFSTR("distanceBucketed");
  objc_msgSend(*(id *)(a1 + 40), "distance");
  v5 = 0;
  while (dbl_101C16708[v5] <= v4)
  {
    if (++v5 == 33)
    {
      v6 = 32;
      goto LABEL_6;
    }
  }
  v6 = (v5 - 1);
LABEL_6:
  v42[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
  v41[5] = CFSTR("durationBucketed");
  objc_msgSend(*(id *)(a1 + 40), "duration");
  v7 = 0;
  v9 = v8 / 60.0;
  while (dbl_101C165F0[v7] <= v9)
  {
    if (++v7 == 35)
    {
      v10 = 34;
      goto LABEL_11;
    }
  }
  v10 = (v7 - 1);
LABEL_11:
  v42[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10);
  v41[6] = CFSTR("totalDistance");
  objc_msgSend(*(id *)(a1 + 48), "distance");
  v42[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v41[7] = CFSTR("totalDuration");
  objc_msgSend(*(id *)(a1 + 48), "duration");
  v42[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11 / 60.0);
  v41[8] = CFSTR("totalDistanceBucketed");
  objc_msgSend(*(id *)(a1 + 48), "distance");
  v13 = 0;
  while (dbl_101C16708[v13] <= v12)
  {
    if (++v13 == 33)
    {
      v14 = 32;
      goto LABEL_16;
    }
  }
  v14 = (v13 - 1);
LABEL_16:
  v42[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v14);
  v41[9] = CFSTR("totalDurationBucketed");
  objc_msgSend(*(id *)(a1 + 48), "duration");
  v15 = 0;
  v17 = v16 / 60.0;
  while (dbl_101C165F0[v15] <= v17)
  {
    if (++v15 == 35)
    {
      v18 = 34;
      goto LABEL_21;
    }
  }
  v18 = (v15 - 1);
LABEL_21:
  v42[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18);
  v41[10] = CFSTR("altitude");
  v19 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 144));
  v20 = 0;
  v42[10] = v19;
  v41[11] = CFSTR("altitudeBucketed");
  while (dword_101C15EE0[v20] <= (int)*(double *)(v2 + 144))
  {
    if (++v20 == 5)
    {
      v21 = 4;
      goto LABEL_26;
    }
  }
  v21 = (v20 - 1);
LABEL_26:
  v42[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21);
  v41[12] = CFSTR("demAltitude");
  v22 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 648));
  v23 = 0;
  v42[12] = v22;
  v41[13] = CFSTR("demAltitudeBucketed");
  while (dword_101C15EE0[v23] <= (int)*(double *)(v2 + 648))
  {
    if (++v23 == 5)
    {
      v24 = 4;
      goto LABEL_31;
    }
  }
  v24 = (v23 - 1);
LABEL_31:
  v42[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v24);
  v41[14] = CFSTR("latitude");
  v25 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 120));
  v26 = 0;
  v42[14] = v25;
  v41[15] = CFSTR("latitudeBucketed");
  v27 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C15EF8[v26] <= *(double *)(v2 + 120))
  {
    v27 = (v27 + 1);
    if (++v26 == 38)
    {
      v27 = 37;
      break;
    }
  }
  v42[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v27);
  v41[16] = CFSTR("longitude");
  v28 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 128));
  v29 = 0;
  v42[16] = v28;
  v41[17] = CFSTR("longitudeBucketed");
  v30 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C16028[v29] <= *(double *)(v2 + 128))
  {
    v30 = (v30 + 1);
    if (++v29 == 74)
    {
      v30 = 73;
      break;
    }
  }
  v42[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v30);
  v41[18] = CFSTR("timeOfDayHour");
  v31 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80));
  v32 = 0;
  v42[18] = v31;
  v41[19] = CFSTR("timeOfDayBucketed");
  v33 = 0xFFFFFFFFLL;
  while (dword_101C16278[v32] <= *(_DWORD *)(a1 + 80))
  {
    v33 = (v33 + 1);
    if (++v32 == 7)
    {
      v33 = 6;
      break;
    }
  }
  v42[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v33);
  v41[20] = CFSTR("signalEnvironment");
  v42[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 112));
  v41[21] = CFSTR("numberOfAlertsPerDay");
  v34 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  v35 = *(_DWORD *)(v2 + 56);
  v36 = (v34 + v35);
  if (v34 + v35 < 0)
  {
    v36 = 0xFFFFFFFFLL;
  }
  else if (v36 < 0x3E9)
  {
    if (v36 < 0x65)
    {
      if (v36 >= 0xB)
        v36 = v34 + v35 - (v34 + v35) % 0xAu;
    }
    else
    {
      v36 = v34 + v35 - (unsigned __int16)(v34 + v35) % 0x64u;
    }
  }
  else
  {
    v36 = 1000 * (v36 / 0x3E8);
  }
  v42[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v36);
  v41[22] = CFSTR("numberOfAlertsPerWeek");
  v37 = *(unsigned int *)(v2 + 88);
  if ((v37 & 0x80000000) != 0)
  {
    v37 = 0xFFFFFFFFLL;
  }
  else if (v37 < 0x3E9)
  {
    if (v37 < 0x65)
    {
      if (v37 >= 0xB)
        v37 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
    }
    else
    {
      v37 = v37 - (unsigned __int16)v37 % 0x64u;
    }
  }
  else
  {
    v37 = 1000 * (v37 / 0x3E8);
  }
  v38 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v37);
  v39 = *(_QWORD *)(a1 + 56);
  v42[22] = v38;
  v42[23] = v39;
  v41[23] = CFSTR("productName");
  v41[24] = CFSTR("settingsVersion");
  v42[24] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v42, v41, 25);
}

void sub_100B424E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  id v10;
  id v11;
  int v12;
  NSObject *v13;
  id v14;
  SEL v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  _QWORD v21[9];
  int v22;
  int v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;

  sub_100228830(a1, a5);
  v10 = objc_msgSend(a2, "address");
  if (a3)
  {
    v11 = v10;
    v12 = sub_100B3EA10(a5);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v26 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "TaMetric, submitting visit metrics:%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v23 = 138477827;
      v24 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetric, submitting visit metrics:%{private}@", &v23, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleVisitMetrics(TASPAdvertisement *, TAMetricsVisit *, CFAbsoluteTime, NSUInteger)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v14 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", objc_msgSend(a2, "getDeviceType"));
    v15 = NSSelectorFromString(CFSTR("getLatestAdvTypeToString:"));
    if ((objc_opt_respondsToSelector(a2, v15) & 1) != 0)
      v14 = objc_msgSend(a2, "getLatestAdvTypeToString:", v14);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100B428A4;
    v21[3] = &unk_1021735F0;
    v21[4] = v11;
    v21[5] = a3;
    v22 = v12;
    v21[6] = v14;
    v21[7] = a1;
    v21[8] = a4;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.OfflineDeviceVisit"), v21);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "TaMetric, handleInterVisitMetric got nil TAMetricsVisit", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TaMetric, handleInterVisitMetric got nil TAMetricsVisit", &v23, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void CLTrackingAvoidanceMetrics::handleVisitMetrics(TASPAdvertisement *, TAMetricsVisit *, CFAbsoluteTime, NSUInteger)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
}

NSDictionary *sub_100B428A4(uint64_t a1)
{
  uint64_t v2;
  signed int v3;
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  NSNumber *v18;
  double v19;
  NSNumber *v20;
  NSNull *v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  NSNumber *v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  NSNumber *v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  NSNumber *v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  NSNumber *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  NSNumber *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  NSNumber *v52;
  uint64_t v53;
  uint64_t v54;
  NSNumber *v55;
  uint64_t v56;
  uint64_t v57;
  NSNumber *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  NSNumber *v65;
  uint64_t v66;
  _QWORD v68[31];
  _QWORD v69[31];

  v2 = *(_QWORD *)(a1 + 56);
  v69[0] = CFSTR("visit");
  v68[0] = CFSTR("reason");
  v68[1] = CFSTR("deviceIdentifier");
  v69[1] = objc_msgSend(*(id *)(a1 + 32), "hexString");
  v68[2] = CFSTR("totalVisitCount");
  v3 = objc_msgSend(*(id *)(a1 + 40), "totalVisitCount");
  v4 = 0;
  while (dword_101C16294[v4] <= v3)
  {
    if (++v4 == 32)
    {
      v5 = 31;
      goto LABEL_6;
    }
  }
  v5 = (v4 - 1);
LABEL_6:
  v69[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5);
  v68[3] = CFSTR("distinctVisitCount");
  v6 = objc_msgSend(*(id *)(a1 + 40), "totalDistinctVisitCount");
  v7 = 0;
  while (dword_101C16294[v7] <= v6)
  {
    if (++v7 == 32)
    {
      v8 = 31;
      goto LABEL_11;
    }
  }
  v8 = (v7 - 1);
LABEL_11:
  v69[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8);
  v68[4] = CFSTR("lastVisitCount");
  v9 = objc_msgSend(*(id *)(a1 + 40), "consecutiveVisitCount");
  v10 = 0;
  while (dword_101C16294[v10] <= v9)
  {
    if (++v10 == 32)
    {
      v11 = 31;
      goto LABEL_16;
    }
  }
  v11 = (v10 - 1);
LABEL_16:
  v69[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11);
  v68[5] = CFSTR("lastDistinctVisitCount");
  v12 = objc_msgSend(*(id *)(a1 + 40), "consecutiveAndDistinctFromPrevVisitCount");
  v13 = 0;
  while (dword_101C16294[v13] <= v12)
  {
    if (++v13 == 32)
    {
      v14 = 31;
      goto LABEL_21;
    }
  }
  v14 = (v13 - 1);
LABEL_21:
  v69[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v14);
  v68[6] = CFSTR("durationOfVisitEntryConsideration");
  objc_msgSend(*(id *)(a1 + 40), "durationOfVisitEntryConsideration");
  v69[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15 / 60.0);
  v68[7] = CFSTR("durationOfVisitExitConsideration");
  objc_msgSend(*(id *)(a1 + 40), "durationOfVisitExitConsideration");
  v69[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16 / 60.0);
  v68[8] = CFSTR("visitEntryDetectionDelay");
  if (objc_msgSend(*(id *)(a1 + 40), "visitEntryDelay"))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "visitEntryDelay"), "duration");
    v18 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v17 / 60.0);
  }
  else
  {
    v18 = +[NSNull null](NSNull, "null");
  }
  v69[8] = v18;
  v68[9] = CFSTR("visitExitDetectionDelay");
  if (objc_msgSend(*(id *)(a1 + 40), "visitExitDelay"))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "visitExitDelay"), "duration");
    v20 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v19 / 60.0);
  }
  else
  {
    v20 = +[NSNull null](NSNull, "null");
  }
  v69[9] = v20;
  v68[10] = CFSTR("distance");
  if (objc_msgSend(*(id *)(a1 + 40), "distanceToPreviousSeenVisit"))
    v21 = (NSNull *)objc_msgSend(*(id *)(a1 + 40), "distanceToPreviousSeenVisit");
  else
    v21 = +[NSNull null](NSNull, "null");
  v69[10] = v21;
  v68[11] = CFSTR("latitude");
  objc_msgSend(*(id *)(a1 + 40), "latitude");
  v69[11] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v68[12] = CFSTR("longitude");
  objc_msgSend(*(id *)(a1 + 40), "longitude");
  v69[12] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v68[13] = CFSTR("durationOfVisitEntryConsiderationBucketed");
  if (objc_msgSend(*(id *)(a1 + 40), "visitEntryDelay"))
  {
    objc_msgSend(*(id *)(a1 + 40), "durationOfVisitEntryConsideration");
    v22 = 0;
    v24 = v23 / 60.0;
    while (dbl_101C16318[v22] <= v24)
    {
      if (++v22 == 39)
      {
        v25 = 38;
        goto LABEL_37;
      }
    }
    v25 = (v22 - 1);
LABEL_37:
    v26 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v25);
  }
  else
  {
    v26 = +[NSNull null](NSNull, "null");
  }
  v69[13] = v26;
  v68[14] = CFSTR("durationOfVisitExitConsiderationBucketed");
  if (objc_msgSend(*(id *)(a1 + 40), "visitExitDelay"))
  {
    objc_msgSend(*(id *)(a1 + 40), "durationOfVisitExitConsideration");
    v27 = 0;
    v29 = v28 / 60.0;
    while (dbl_101C16318[v27] <= v29)
    {
      if (++v27 == 39)
      {
        v30 = 38;
        goto LABEL_45;
      }
    }
    v30 = (v27 - 1);
LABEL_45:
    v31 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v30);
  }
  else
  {
    v31 = +[NSNull null](NSNull, "null");
  }
  v69[14] = v31;
  v68[15] = CFSTR("visitEntryDetectionDelayBucketed");
  if (objc_msgSend(*(id *)(a1 + 40), "visitEntryDelay"))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "visitEntryDelay"), "duration");
    v32 = 0;
    v34 = v33 / 60.0;
    while (dbl_101C16450[v32] <= v34)
    {
      if (++v32 == 52)
      {
        v35 = 51;
        goto LABEL_53;
      }
    }
    v35 = (v32 - 1);
LABEL_53:
    v36 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v35);
  }
  else
  {
    v36 = +[NSNull null](NSNull, "null");
  }
  v69[15] = v36;
  v68[16] = CFSTR("visitExitDetectionDelayBucketed");
  if (objc_msgSend(*(id *)(a1 + 40), "visitExitDelay"))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "visitExitDelay"), "duration");
    v37 = 0;
    v39 = v38 / 60.0;
    while (dbl_101C16450[v37] <= v39)
    {
      if (++v37 == 52)
      {
        v40 = 51;
        goto LABEL_61;
      }
    }
    v40 = (v37 - 1);
LABEL_61:
    v41 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v40);
  }
  else
  {
    v41 = +[NSNull null](NSNull, "null");
  }
  v69[16] = v41;
  v68[17] = CFSTR("distanceBucketed");
  if (objc_msgSend(*(id *)(a1 + 40), "distanceToPreviousSeenVisit"))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "distanceToPreviousSeenVisit"), "doubleValue");
    v43 = 0;
    while (dbl_101C16708[v43] <= v42)
    {
      if (++v43 == 33)
      {
        v44 = 32;
        goto LABEL_69;
      }
    }
    v44 = (v43 - 1);
LABEL_69:
    v45 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v44);
  }
  else
  {
    v45 = +[NSNull null](NSNull, "null");
  }
  v69[17] = v45;
  v68[18] = CFSTR("latitudeBucketed");
  objc_msgSend(*(id *)(a1 + 40), "latitude");
  v47 = 0;
  v48 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C15EF8[v47] <= v46)
  {
    v48 = (v48 + 1);
    if (++v47 == 38)
    {
      v48 = 37;
      break;
    }
  }
  v69[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v48);
  v68[19] = CFSTR("longitudeBucketed");
  objc_msgSend(*(id *)(a1 + 40), "longitude");
  v50 = 0;
  v51 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C16028[v50] <= v49)
  {
    v51 = (v51 + 1);
    if (++v50 == 74)
    {
      v51 = 73;
      break;
    }
  }
  v69[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v51);
  v68[20] = CFSTR("altitude");
  v52 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 144));
  v53 = 0;
  v69[20] = v52;
  v68[21] = CFSTR("altitudeBucketed");
  while (dword_101C15EE0[v53] <= (int)*(double *)(v2 + 144))
  {
    if (++v53 == 5)
    {
      v54 = 4;
      goto LABEL_83;
    }
  }
  v54 = (v53 - 1);
LABEL_83:
  v69[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54);
  v68[22] = CFSTR("demAltitude");
  v55 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 648));
  v56 = 0;
  v69[22] = v55;
  v68[23] = CFSTR("demAltitudeBucketed");
  while (dword_101C15EE0[v56] <= (int)*(double *)(v2 + 648))
  {
    if (++v56 == 5)
    {
      v57 = 4;
      goto LABEL_88;
    }
  }
  v57 = (v56 - 1);
LABEL_88:
  v69[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v57);
  v68[24] = CFSTR("timeOfDayHour");
  v58 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72));
  v59 = 0;
  v69[24] = v58;
  v68[25] = CFSTR("timeOfDayBucketed");
  v60 = 0xFFFFFFFFLL;
  while (dword_101C16278[v59] <= *(_DWORD *)(a1 + 72))
  {
    v60 = (v60 + 1);
    if (++v59 == 7)
    {
      v60 = 6;
      break;
    }
  }
  v69[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v60);
  v68[26] = CFSTR("signalEnvironment");
  v69[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 112));
  v68[27] = CFSTR("numberOfAlertsPerDay");
  v61 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  v62 = *(_DWORD *)(v2 + 56);
  v63 = (v61 + v62);
  if (v61 + v62 < 0)
  {
    v63 = 0xFFFFFFFFLL;
  }
  else if (v63 < 0x3E9)
  {
    if (v63 < 0x65)
    {
      if (v63 >= 0xB)
        v63 = v61 + v62 - (v61 + v62) % 0xAu;
    }
    else
    {
      v63 = v61 + v62 - (unsigned __int16)(v61 + v62) % 0x64u;
    }
  }
  else
  {
    v63 = 1000 * (v63 / 0x3E8);
  }
  v69[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v63);
  v68[28] = CFSTR("numberOfAlertsPerWeek");
  v64 = *(unsigned int *)(v2 + 88);
  if ((v64 & 0x80000000) != 0)
  {
    v64 = 0xFFFFFFFFLL;
  }
  else if (v64 < 0x3E9)
  {
    if (v64 < 0x65)
    {
      if (v64 >= 0xB)
        v64 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
    }
    else
    {
      v64 = v64 - (unsigned __int16)v64 % 0x64u;
    }
  }
  else
  {
    v64 = 1000 * (v64 / 0x3E8);
  }
  v65 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v64);
  v66 = *(_QWORD *)(a1 + 48);
  v69[28] = v65;
  v69[29] = v66;
  v68[29] = CFSTR("productName");
  v68[30] = CFSTR("settingsVersion");
  v69[30] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v69, v68, 31);
}

void sub_100B431C0(uint64_t a1, void *a2, void *a3, uint64_t a4, double a5)
{
  id v10;
  id v11;
  unint64_t v12;
  id v13;
  int v14;
  int v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  SEL v20;
  _QWORD *v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  id v25;
  id v26;
  NSObject *v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  NSObject *v32;
  id v33;
  SEL v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  _QWORD v45[10];
  int v46;
  _QWORD v47[10];
  int v48;
  _QWORD v49[10];
  int v50;
  int v51;
  id v52;
  uint8_t buf[4];
  id v54;

  sub_100228830(a1, a5);
  v10 = objc_msgSend(a2, "address");
  if (!a3 || (v11 = v10) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got nil TAMetricsDetection", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LOWORD(v51) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TaMetric, handleDetectionMetrics got nil TAMetricsDetection", &v51, 2);
      goto LABEL_24;
    }
    return;
  }
  v12 = (unint64_t)objc_msgSend(a3, "detectionType");
  v13 = +[TAMetricsDetection convertTADetectionTypeToString:](TAMetricsDetection, "convertTADetectionTypeToString:", v12);
  v14 = sub_100B3EA10(a5);
  if (v12 > 0x10)
    goto LABEL_69;
  v15 = v14;
  if (((1 << v12) & 0xF382) != 0)
  {
    v25 = objc_msgSend(a3, "generalDetectionMetrics");
    if (v25)
    {
      v26 = v25;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v27 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138477827;
        v54 = v26;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "TaMetric, submitting general detection details metrics:%{private}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173668);
        v51 = 138477827;
        v52 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetric, submitting general detection details metrics:%{private}@", &v51, 12);
        v40 = (uint8_t *)v39;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleDetectionMetrics(TASPAdvertisement *, TAMetricsDetection *, CFAbsoluteTime, NSUInteger)", "%s\n", v39);
        if (v40 != buf)
          free(v40);
      }
      v28 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", objc_msgSend(a2, "getDeviceType"));
      v29 = NSSelectorFromString(CFSTR("getLatestAdvTypeToString:"));
      if ((objc_opt_respondsToSelector(a2, v29) & 1) != 0)
        v28 = objc_msgSend(a2, "getLatestAdvTypeToString:", v28);
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472;
      v49[2] = sub_100B43D60;
      v49[3] = &unk_1021735C8;
      v49[4] = v11;
      v49[5] = v13;
      v50 = v15;
      v49[6] = v26;
      v49[7] = v28;
      v49[8] = a1;
      v49[9] = a4;
      v21 = v49;
      goto LABEL_44;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v35 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got nil TAGeneralDetectionMetrics", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LOWORD(v51) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TaMetric, handleDetectionMetrics got nil TAGeneralDetectionMetrics", &v51, 2);
      goto LABEL_24;
    }
    return;
  }
  if (((1 << v12) & 0xC48) != 0)
  {
    v30 = objc_msgSend(a3, "singleVisitDetectionMetrics");
    if (v30)
    {
      v31 = v30;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v32 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138477827;
        v54 = v31;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TaMetric, submitting single-visit detection details metrics:%{private}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173668);
        v51 = 138477827;
        v52 = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TaMetric, submitting single-visit detection details metrics:%{private}@", &v51, 12);
        v44 = (uint8_t *)v43;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleDetectionMetrics(TASPAdvertisement *, TAMetricsDetection *, CFAbsoluteTime, NSUInteger)", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      v33 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", objc_msgSend(a2, "getDeviceType"));
      v34 = NSSelectorFromString(CFSTR("getLatestAdvTypeToString:"));
      if ((objc_opt_respondsToSelector(a2, v34) & 1) != 0)
        v33 = objc_msgSend(a2, "getLatestAdvTypeToString:", v33);
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_100B448FC;
      v45[3] = &unk_1021735C8;
      v45[4] = v11;
      v45[5] = v13;
      v46 = v15;
      v45[6] = v31;
      v45[7] = v33;
      v45[8] = a1;
      v45[9] = a4;
      v21 = v45;
      goto LABEL_44;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v37 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got nil TASingleVisitDetectionMetrics", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LOWORD(v51) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TaMetric, handleDetectionMetrics got nil TASingleVisitDetectionMetrics", &v51, 2);
      goto LABEL_24;
    }
    return;
  }
  if (((1 << v12) & 0x10034) != 0)
  {
    v16 = objc_msgSend(a3, "visitDetectionMetrics");
    if (v16)
    {
      v17 = v16;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v18 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138477827;
        v54 = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "TaMetric, submitting visit detection details metrics:%{private}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173668);
        v51 = 138477827;
        v52 = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TaMetric, submitting visit detection details metrics:%{private}@", &v51, 12);
        v42 = (uint8_t *)v41;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleDetectionMetrics(TASPAdvertisement *, TAMetricsDetection *, CFAbsoluteTime, NSUInteger)", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
      v19 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", objc_msgSend(a2, "getDeviceType"));
      v20 = NSSelectorFromString(CFSTR("getLatestAdvTypeToString:"));
      if ((objc_opt_respondsToSelector(a2, v20) & 1) != 0)
        v19 = objc_msgSend(a2, "getLatestAdvTypeToString:", v19);
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_100B4437C;
      v47[3] = &unk_1021735C8;
      v47[4] = v11;
      v47[5] = v13;
      v48 = v15;
      v47[6] = v17;
      v47[7] = v19;
      v47[8] = a1;
      v47[9] = a4;
      v21 = v47;
LABEL_44:
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.OfflineDeviceVisit"), v21);
      return;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v36 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got nil TAVisitDetectionMetrics", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      LOWORD(v51) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TaMetric, handleDetectionMetrics got nil TAVisitDetectionMetrics", &v51, 2);
LABEL_24:
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "void CLTrackingAvoidanceMetrics::handleDetectionMetrics(TASPAdvertisement *, TAMetricsDetection *, CFAbsoluteTime, NSUInteger)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  else
  {
LABEL_69:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v38 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v54 = v13;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got unsupported detectionType %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v51 = 138543362;
      v52 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TaMetric, handleDetectionMetrics got unsupported detectionType %{public}@", &v51, 12);
      goto LABEL_24;
    }
  }
}

NSDictionary *sub_100B43D60(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  char *v14;
  const __CFString *v15;
  id v16;
  const __CFString *v17;
  NSNumber *v18;
  uint64_t v19;
  uint64_t v20;
  NSNumber *v21;
  uint64_t v22;
  uint64_t v23;
  NSNumber *v24;
  uint64_t v25;
  uint64_t v26;
  NSNumber *v27;
  uint64_t v28;
  uint64_t v29;
  NSNumber *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  NSNumber *v37;
  uint64_t v38;
  _QWORD v40[26];
  _QWORD v41[26];

  v2 = *(_QWORD *)(a1 + 64);
  v41[0] = CFSTR("detection");
  v40[0] = CFSTR("reason");
  v40[1] = CFSTR("deviceIdentifier");
  v3 = objc_msgSend(*(id *)(a1 + 32), "hexString");
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v41[1] = v3;
  v41[2] = v5;
  v40[2] = CFSTR("detectionAlgorithm");
  v40[3] = CFSTR("detectionDistance");
  objc_msgSend(objc_msgSend(v4, "interVisitMetrics"), "distance");
  v41[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v40[4] = CFSTR("detectionDistanceBucketed");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics"), "distance");
  v7 = 0;
  while (dbl_101C16708[v7] <= v6)
  {
    if (++v7 == 33)
    {
      v8 = 32;
      goto LABEL_6;
    }
  }
  v8 = (v7 - 1);
LABEL_6:
  v41[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8);
  v40[5] = CFSTR("detectionDuration");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics"), "duration");
  v41[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9 / 60.0);
  v40[6] = CFSTR("detectionDurationBucketed");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics"), "duration");
  v10 = 0;
  v12 = v11 / 60.0;
  while (dbl_101C165F0[v10] <= v12)
  {
    if (++v10 == 35)
    {
      v13 = 34;
      goto LABEL_11;
    }
  }
  v13 = (v10 - 1);
LABEL_11:
  v41[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v13);
  v40[7] = CFSTR("detectionDominantUserActivity");
  v14 = (char *)objc_msgSend(*(id *)(a1 + 48), "dominantUserActivity");
  v15 = CFSTR("unknown");
  if ((unint64_t)(v14 - 1) <= 2)
    v15 = *(&off_102173688 + (_QWORD)(v14 - 1));
  v41[7] = v15;
  v40[8] = CFSTR("detectionPeopleDensityState");
  v16 = objc_msgSend(*(id *)(a1 + 48), "pdState");
  v17 = CFSTR("crowd");
  if (v16 != (id)100)
    v17 = CFSTR("unknown");
  if (!v16)
    v17 = CFSTR("alone");
  v41[8] = v17;
  v40[9] = CFSTR("detectionHasGeoNavHint");
  v41[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 48), "geoNavHint"));
  v40[10] = CFSTR("detectionHasVehicleConnectionHint");
  v41[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 48), "vehicularStateHint"));
  v40[11] = CFSTR("altitude");
  v18 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 144));
  v19 = 0;
  v41[11] = v18;
  v40[12] = CFSTR("altitudeBucketed");
  while (dword_101C15EE0[v19] <= (int)*(double *)(v2 + 144))
  {
    if (++v19 == 5)
    {
      v20 = 4;
      goto LABEL_22;
    }
  }
  v20 = (v19 - 1);
LABEL_22:
  v41[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v20);
  v40[13] = CFSTR("demAltitude");
  v21 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 648));
  v22 = 0;
  v41[13] = v21;
  v40[14] = CFSTR("demAltitudeBucketed");
  while (dword_101C15EE0[v22] <= (int)*(double *)(v2 + 648))
  {
    if (++v22 == 5)
    {
      v23 = 4;
      goto LABEL_27;
    }
  }
  v23 = (v22 - 1);
LABEL_27:
  v41[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v23);
  v40[15] = CFSTR("latitude");
  v24 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 120));
  v25 = 0;
  v41[15] = v24;
  v40[16] = CFSTR("latitudeBucketed");
  v26 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C15EF8[v25] <= *(double *)(v2 + 120))
  {
    v26 = (v26 + 1);
    if (++v25 == 38)
    {
      v26 = 37;
      break;
    }
  }
  v41[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v26);
  v40[17] = CFSTR("longitude");
  v27 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 128));
  v28 = 0;
  v41[17] = v27;
  v40[18] = CFSTR("longitudeBucketed");
  v29 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C16028[v28] <= *(double *)(v2 + 128))
  {
    v29 = (v29 + 1);
    if (++v28 == 74)
    {
      v29 = 73;
      break;
    }
  }
  v41[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v29);
  v40[19] = CFSTR("timeOfDayHour");
  v30 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80));
  v31 = 0;
  v41[19] = v30;
  v40[20] = CFSTR("timeOfDayBucketed");
  v32 = 0xFFFFFFFFLL;
  while (dword_101C16278[v31] <= *(_DWORD *)(a1 + 80))
  {
    v32 = (v32 + 1);
    if (++v31 == 7)
    {
      v32 = 6;
      break;
    }
  }
  v41[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v32);
  v40[21] = CFSTR("signalEnvironment");
  v41[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 112));
  v40[22] = CFSTR("numberOfAlertsPerDay");
  v33 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  v34 = *(_DWORD *)(v2 + 56);
  v35 = (v33 + v34);
  if (v33 + v34 < 0)
  {
    v35 = 0xFFFFFFFFLL;
  }
  else if (v35 < 0x3E9)
  {
    if (v35 < 0x65)
    {
      if (v35 >= 0xB)
        v35 = v33 + v34 - (v33 + v34) % 0xAu;
    }
    else
    {
      v35 = v33 + v34 - (unsigned __int16)(v33 + v34) % 0x64u;
    }
  }
  else
  {
    v35 = 1000 * (v35 / 0x3E8);
  }
  v41[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v35);
  v40[23] = CFSTR("numberOfAlertsPerWeek");
  v36 = *(unsigned int *)(v2 + 88);
  if ((v36 & 0x80000000) != 0)
  {
    v36 = 0xFFFFFFFFLL;
  }
  else if (v36 < 0x3E9)
  {
    if (v36 < 0x65)
    {
      if (v36 >= 0xB)
        v36 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
    }
    else
    {
      v36 = v36 - (unsigned __int16)v36 % 0x64u;
    }
  }
  else
  {
    v36 = 1000 * (v36 / 0x3E8);
  }
  v37 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v36);
  v38 = *(_QWORD *)(a1 + 56);
  v41[23] = v37;
  v41[24] = v38;
  v40[24] = CFSTR("productName");
  v40[25] = CFSTR("settingsVersion");
  v41[25] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v41, v40, 26);
}

NSDictionary *sub_100B4437C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSNumber *v15;
  uint64_t v16;
  uint64_t v17;
  NSNumber *v18;
  uint64_t v19;
  uint64_t v20;
  NSNumber *v21;
  uint64_t v22;
  uint64_t v23;
  NSNumber *v24;
  uint64_t v25;
  uint64_t v26;
  NSNumber *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  NSNumber *v34;
  uint64_t v35;
  _QWORD v37[23];
  _QWORD v38[23];

  v2 = *(_QWORD *)(a1 + 64);
  v38[0] = CFSTR("detection");
  v37[0] = CFSTR("reason");
  v37[1] = CFSTR("deviceIdentifier");
  v3 = objc_msgSend(*(id *)(a1 + 32), "hexString");
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v38[1] = v3;
  v38[2] = v5;
  v37[2] = CFSTR("detectionAlgorithm");
  v37[3] = CFSTR("detectionDistance");
  objc_msgSend(v4, "distanceToPreviousVisit");
  v38[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v37[4] = CFSTR("detectionDistanceBucketed");
  objc_msgSend(*(id *)(a1 + 48), "distanceToPreviousVisit");
  v7 = 0;
  while (dbl_101C16708[v7] <= v6)
  {
    if (++v7 == 33)
    {
      v8 = 32;
      goto LABEL_6;
    }
  }
  v8 = (v7 - 1);
LABEL_6:
  v38[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8);
  v37[5] = CFSTR("detectionResidualDistance");
  objc_msgSend(*(id *)(a1 + 48), "residualDistanceToPreviousVisit");
  v38[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v37[6] = CFSTR("detectionResidualDistanceBucketed");
  objc_msgSend(*(id *)(a1 + 48), "residualDistanceToPreviousVisit");
  v10 = 0;
  while (dbl_101C16708[v10] <= v9)
  {
    if (++v10 == 33)
    {
      v11 = 32;
      goto LABEL_11;
    }
  }
  v11 = (v10 - 1);
LABEL_11:
  v38[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11);
  v37[7] = CFSTR("detectionNumOfSigmaBetweenVisits");
  v12 = objc_msgSend(*(id *)(a1 + 48), "nSigmaBetweenVisits");
  v13 = 0;
  v14 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C16810[v13] <= (double)(unint64_t)v12)
  {
    v14 = (v14 + 1);
    if (++v13 == 12)
    {
      v14 = 11;
      break;
    }
  }
  v38[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v14);
  v37[8] = CFSTR("altitude");
  v15 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 144));
  v16 = 0;
  v38[8] = v15;
  v37[9] = CFSTR("altitudeBucketed");
  while (dword_101C15EE0[v16] <= (int)*(double *)(v2 + 144))
  {
    if (++v16 == 5)
    {
      v17 = 4;
      goto LABEL_20;
    }
  }
  v17 = (v16 - 1);
LABEL_20:
  v38[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v17);
  v37[10] = CFSTR("demAltitude");
  v18 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 648));
  v19 = 0;
  v38[10] = v18;
  v37[11] = CFSTR("demAltitudeBucketed");
  while (dword_101C15EE0[v19] <= (int)*(double *)(v2 + 648))
  {
    if (++v19 == 5)
    {
      v20 = 4;
      goto LABEL_25;
    }
  }
  v20 = (v19 - 1);
LABEL_25:
  v38[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v20);
  v37[12] = CFSTR("latitude");
  v21 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 120));
  v22 = 0;
  v38[12] = v21;
  v37[13] = CFSTR("latitudeBucketed");
  v23 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C15EF8[v22] <= *(double *)(v2 + 120))
  {
    v23 = (v23 + 1);
    if (++v22 == 38)
    {
      v23 = 37;
      break;
    }
  }
  v38[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v23);
  v37[14] = CFSTR("longitude");
  v24 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 128));
  v25 = 0;
  v38[14] = v24;
  v37[15] = CFSTR("longitudeBucketed");
  v26 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C16028[v25] <= *(double *)(v2 + 128))
  {
    v26 = (v26 + 1);
    if (++v25 == 74)
    {
      v26 = 73;
      break;
    }
  }
  v38[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v26);
  v37[16] = CFSTR("timeOfDayHour");
  v27 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80));
  v28 = 0;
  v38[16] = v27;
  v37[17] = CFSTR("timeOfDayBucketed");
  v29 = 0xFFFFFFFFLL;
  while (dword_101C16278[v28] <= *(_DWORD *)(a1 + 80))
  {
    v29 = (v29 + 1);
    if (++v28 == 7)
    {
      v29 = 6;
      break;
    }
  }
  v38[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v29);
  v37[18] = CFSTR("signalEnvironment");
  v38[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 112));
  v37[19] = CFSTR("numberOfAlertsPerDay");
  v30 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  v31 = *(_DWORD *)(v2 + 56);
  v32 = (v30 + v31);
  if (v30 + v31 < 0)
  {
    v32 = 0xFFFFFFFFLL;
  }
  else if (v32 < 0x3E9)
  {
    if (v32 < 0x65)
    {
      if (v32 >= 0xB)
        v32 = v30 + v31 - (v30 + v31) % 0xAu;
    }
    else
    {
      v32 = v30 + v31 - (unsigned __int16)(v30 + v31) % 0x64u;
    }
  }
  else
  {
    v32 = 1000 * (v32 / 0x3E8);
  }
  v38[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v32);
  v37[20] = CFSTR("numberOfAlertsPerWeek");
  v33 = *(unsigned int *)(v2 + 88);
  if ((v33 & 0x80000000) != 0)
  {
    v33 = 0xFFFFFFFFLL;
  }
  else if (v33 < 0x3E9)
  {
    if (v33 < 0x65)
    {
      if (v33 >= 0xB)
        v33 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
    }
    else
    {
      v33 = v33 - (unsigned __int16)v33 % 0x64u;
    }
  }
  else
  {
    v33 = 1000 * (v33 / 0x3E8);
  }
  v34 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v33);
  v35 = *(_QWORD *)(a1 + 56);
  v38[20] = v34;
  v38[21] = v35;
  v37[21] = CFSTR("productName");
  v37[22] = CFSTR("settingsVersion");
  v38[22] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v38, v37, 23);
}

NSDictionary *sub_100B448FC(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  NSNumber *v14;
  uint64_t v15;
  uint64_t v16;
  NSNumber *v17;
  uint64_t v18;
  uint64_t v19;
  NSNumber *v20;
  uint64_t v21;
  uint64_t v22;
  NSNumber *v23;
  uint64_t v24;
  uint64_t v25;
  NSNumber *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  NSNumber *v33;
  uint64_t v34;
  _QWORD v36[22];
  _QWORD v37[22];

  v2 = *(_QWORD *)(a1 + 64);
  v37[0] = CFSTR("detection");
  v36[0] = CFSTR("reason");
  v36[1] = CFSTR("deviceIdentifier");
  v3 = objc_msgSend(*(id *)(a1 + 32), "hexString");
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v37[1] = v3;
  v37[2] = v5;
  v36[2] = CFSTR("detectionAlgorithm");
  v36[3] = CFSTR("detectionDistance");
  objc_msgSend(objc_msgSend(v4, "interVisitMetrics"), "distance");
  v37[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v36[4] = CFSTR("detectionDistanceBucketed");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics"), "distance");
  v7 = 0;
  while (dbl_101C16708[v7] <= v6)
  {
    if (++v7 == 33)
    {
      v8 = 32;
      goto LABEL_6;
    }
  }
  v8 = (v7 - 1);
LABEL_6:
  v37[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8);
  v36[5] = CFSTR("detectionDuration");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics"), "duration");
  v37[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9 / 60.0);
  v36[6] = CFSTR("detectionDurationBucketed");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics"), "duration");
  v10 = 0;
  v12 = v11 / 60.0;
  while (dbl_101C165F0[v10] <= v12)
  {
    if (++v10 == 35)
    {
      v13 = 34;
      goto LABEL_11;
    }
  }
  v13 = (v10 - 1);
LABEL_11:
  v37[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v13);
  v36[7] = CFSTR("altitude");
  v14 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 144));
  v15 = 0;
  v37[7] = v14;
  v36[8] = CFSTR("altitudeBucketed");
  while (dword_101C15EE0[v15] <= (int)*(double *)(v2 + 144))
  {
    if (++v15 == 5)
    {
      v16 = 4;
      goto LABEL_16;
    }
  }
  v16 = (v15 - 1);
LABEL_16:
  v37[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16);
  v36[9] = CFSTR("demAltitude");
  v17 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 648));
  v18 = 0;
  v37[9] = v17;
  v36[10] = CFSTR("demAltitudeBucketed");
  while (dword_101C15EE0[v18] <= (int)*(double *)(v2 + 648))
  {
    if (++v18 == 5)
    {
      v19 = 4;
      goto LABEL_21;
    }
  }
  v19 = (v18 - 1);
LABEL_21:
  v37[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v19);
  v36[11] = CFSTR("latitude");
  v20 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 120));
  v21 = 0;
  v37[11] = v20;
  v36[12] = CFSTR("latitudeBucketed");
  v22 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C15EF8[v21] <= *(double *)(v2 + 120))
  {
    v22 = (v22 + 1);
    if (++v21 == 38)
    {
      v22 = 37;
      break;
    }
  }
  v37[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v22);
  v36[13] = CFSTR("longitude");
  v23 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 128));
  v24 = 0;
  v37[13] = v23;
  v36[14] = CFSTR("longitudeBucketed");
  v25 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C16028[v24] <= *(double *)(v2 + 128))
  {
    v25 = (v25 + 1);
    if (++v24 == 74)
    {
      v25 = 73;
      break;
    }
  }
  v37[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v25);
  v36[15] = CFSTR("timeOfDayHour");
  v26 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80));
  v27 = 0;
  v37[15] = v26;
  v36[16] = CFSTR("timeOfDayBucketed");
  v28 = 0xFFFFFFFFLL;
  while (dword_101C16278[v27] <= *(_DWORD *)(a1 + 80))
  {
    v28 = (v28 + 1);
    if (++v27 == 7)
    {
      v28 = 6;
      break;
    }
  }
  v37[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v28);
  v36[17] = CFSTR("signalEnvironment");
  v37[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 112));
  v36[18] = CFSTR("numberOfAlertsPerDay");
  v29 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  v30 = *(_DWORD *)(v2 + 56);
  v31 = (v29 + v30);
  if (v29 + v30 < 0)
  {
    v31 = 0xFFFFFFFFLL;
  }
  else if (v31 < 0x3E9)
  {
    if (v31 < 0x65)
    {
      if (v31 >= 0xB)
        v31 = v29 + v30 - (v29 + v30) % 0xAu;
    }
    else
    {
      v31 = v29 + v30 - (unsigned __int16)(v29 + v30) % 0x64u;
    }
  }
  else
  {
    v31 = 1000 * (v31 / 0x3E8);
  }
  v37[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v31);
  v36[19] = CFSTR("numberOfAlertsPerWeek");
  v32 = *(unsigned int *)(v2 + 88);
  if ((v32 & 0x80000000) != 0)
  {
    v32 = 0xFFFFFFFFLL;
  }
  else if (v32 < 0x3E9)
  {
    if (v32 < 0x65)
    {
      if (v32 >= 0xB)
        v32 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
    }
    else
    {
      v32 = v32 - (unsigned __int16)v32 % 0x64u;
    }
  }
  else
  {
    v32 = 1000 * (v32 / 0x3E8);
  }
  v33 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v32);
  v34 = *(_QWORD *)(a1 + 56);
  v37[19] = v33;
  v37[20] = v34;
  v36[20] = CFSTR("productName");
  v36[21] = CFSTR("settingsVersion");
  v37[21] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 22);
}

void sub_100B44E54(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  NSObject *v8;
  _QWORD v9[7];
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;

  sub_100228830(a1, a4);
  if (a2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = objc_msgSend(a2, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"TaMetric, submitting fault metric\", \"faultType\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100B44FB0;
    v9[3] = &unk_102173618;
    v9[4] = a2;
    v9[5] = a1;
    v10 = sub_100B3EA10(a4);
    v9[6] = a3;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.OfflineDeviceVisit"), v9);
  }
}

NSDictionary *sub_100B44FB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSNumber *v4;
  uint64_t v5;
  uint64_t v6;
  NSNumber *v7;
  uint64_t v8;
  uint64_t v9;
  NSNumber *v10;
  uint64_t v11;
  uint64_t v12;
  NSNumber *v13;
  uint64_t v14;
  uint64_t v15;
  NSNumber *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[16];
  _QWORD v25[16];

  v24[0] = CFSTR("reason");
  v24[1] = CFSTR("faultReason");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v25[0] = CFSTR("fault");
  v25[1] = v2;
  v24[2] = CFSTR("altitude");
  v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v3 + 144));
  v5 = 0;
  v25[2] = v4;
  v24[3] = CFSTR("altitudeBucketed");
  while (dword_101C15EE0[v5] <= (int)*(double *)(v3 + 144))
  {
    if (++v5 == 5)
    {
      v6 = 4;
      goto LABEL_6;
    }
  }
  v6 = (v5 - 1);
LABEL_6:
  v25[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
  v24[4] = CFSTR("demAltitude");
  v7 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v3 + 648));
  v8 = 0;
  v25[4] = v7;
  v24[5] = CFSTR("demAltitudeBucketed");
  while (dword_101C15EE0[v8] <= (int)*(double *)(v3 + 648))
  {
    if (++v8 == 5)
    {
      v9 = 4;
      goto LABEL_11;
    }
  }
  v9 = (v8 - 1);
LABEL_11:
  v25[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9);
  v24[6] = CFSTR("latitude");
  v10 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v3 + 120));
  v11 = 0;
  v25[6] = v10;
  v24[7] = CFSTR("latitudeBucketed");
  v12 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C15EF8[v11] <= *(double *)(v3 + 120))
  {
    v12 = (v12 + 1);
    if (++v11 == 38)
    {
      v12 = 37;
      break;
    }
  }
  v25[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v12);
  v24[8] = CFSTR("longitude");
  v13 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v3 + 128));
  v14 = 0;
  v25[8] = v13;
  v24[9] = CFSTR("longitudeBucketed");
  v15 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101C16028[v14] <= *(double *)(v3 + 128))
  {
    v15 = (v15 + 1);
    if (++v14 == 74)
    {
      v15 = 73;
      break;
    }
  }
  v25[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v15);
  v24[10] = CFSTR("timeOfDayHour");
  v16 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v17 = 0;
  v25[10] = v16;
  v24[11] = CFSTR("timeOfDayBucketed");
  v18 = 0xFFFFFFFFLL;
  while (dword_101C16278[v17] <= *(_DWORD *)(a1 + 56))
  {
    v18 = (v18 + 1);
    if (++v17 == 7)
    {
      v18 = 6;
      break;
    }
  }
  v25[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18);
  v24[12] = CFSTR("signalEnvironment");
  v25[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v3 + 112));
  v24[13] = CFSTR("numberOfAlertsPerDay");
  v19 = *(_DWORD *)(v3 + 52) + *(_DWORD *)(v3 + 48);
  v20 = *(_DWORD *)(v3 + 56);
  v21 = (v19 + v20);
  if (v19 + v20 < 0)
  {
    v21 = 0xFFFFFFFFLL;
  }
  else if (v21 < 0x3E9)
  {
    if (v21 < 0x65)
    {
      if (v21 >= 0xB)
        v21 = v19 + v20 - (v19 + v20) % 0xAu;
    }
    else
    {
      v21 = v19 + v20 - (unsigned __int16)(v19 + v20) % 0x64u;
    }
  }
  else
  {
    v21 = 1000 * (v21 / 0x3E8);
  }
  v25[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21);
  v24[14] = CFSTR("numberOfAlertsPerWeek");
  v22 = *(unsigned int *)(v3 + 88);
  if ((v22 & 0x80000000) != 0)
  {
    v22 = 0xFFFFFFFFLL;
  }
  else if (v22 < 0x3E9)
  {
    if (v22 < 0x65)
    {
      if (v22 >= 0xB)
        v22 = *(_DWORD *)(v3 + 88) - *(_DWORD *)(v3 + 88) % 0xAu;
    }
    else
    {
      v22 = v22 - (unsigned __int16)v22 % 0x64u;
    }
  }
  else
  {
    v22 = 1000 * (v22 / 0x3E8);
  }
  v25[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v22);
  v24[15] = CFSTR("settingsVersion");
  v25[15] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v24, 16);
}

uint64_t sub_100B453CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  return result;
}

NSDictionary *sub_100B453D4(uint64_t a1)
{
  unsigned int *v2;
  _QWORD v4[6];
  _QWORD v5[6];

  v2 = *(unsigned int **)(a1 + 32);
  v4[0] = CFSTR("uniqueIds");
  v5[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2[4]);
  v4[1] = CFSTR("detectedIds");
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2[10]);
  v4[2] = CFSTR("suspiciousVisits");
  v5[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2[12]);
  v4[3] = CFSTR("suspiciousGeneral");
  v5[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2[13]);
  v4[4] = CFSTR("suspiciousOther");
  v5[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2[14]);
  v4[5] = CFSTR("suspiciousTotal");
  v5[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 6);
}

NSDictionary *sub_100B454F4(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("detections");
  v3 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

_QWORD *sub_100B45574(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v5;

  result = (_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    result[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)result = v5;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

void sub_100B455C8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

NSDictionary *sub_100B455DC(uint64_t a1)
{
  uint64_t v1;
  const __CFString *v3;
  NSNumber *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = CFSTR("numberOfAlertsPerWeek");
  v4 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 88));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1);
}

NSDictionary *sub_100B4565C(uint64_t a1)
{
  uint64_t v1;
  const __CFString *v3;
  NSNumber *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = CFSTR("numberOfAlertsPerMonth");
  v4 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 104));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1);
}

void sub_100B456DC(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100B45708(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = 264;
  do
  {
    v3 = *(void **)(a1 + v2 - 24);
    if (v3)
    {
      *(_QWORD *)(a1 + v2 - 16) = v3;
      operator delete(v3);
    }
    v2 -= 24;
  }
  while (v2);
  return a1;
}

uint64_t sub_100B45748(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100B45778(uint64_t a1)
{
  uint64_t v2;

  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_100B460F8(a1 + 144, 360.0, 0.0, 10800.0);
  sub_100B460F8(a1 + 192, 20.0, 0.0, 1000.0);
  sub_100B460F8(a1 + 240, 10.0, 0.0, 200.0);
  sub_100B460F8(a1 + 288, 15.0, 0.0, 180.0);
  *(_DWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  sub_100B460F8(a1 + 648, 10.0, 0.0, 200.0);
  *(_DWORD *)(a1 + 696) = 13;
  sub_100B460F8(a1 + 704, 15.0, 0.0, 180.0);
  *(_DWORD *)(a1 + 752) = 13;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  sub_100B460F8(a1 + 784, 0.7, -4.7, 3.0);
  *(_DWORD *)(a1 + 832) = 13;
  sub_100B460F8(a1 + 840, 0.7, -4.7, 3.0);
  *(_DWORD *)(a1 + 888) = 13;
  v2 = sub_100B460F8(a1 + 896, 0.5, -2.5, 3.0);
  *(_DWORD *)(a1 + 944) = 13;
  *(_QWORD *)(v2 + 52) = 0;
  *(_QWORD *)(v2 + 57) = 0;
  *(_QWORD *)(a1 + 968) = 0x7FEFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 976) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 1024) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(int64x2_t *)(a1 + 1440) = vdupq_n_s64(0x42uLL);
  *(_QWORD *)(a1 + 1456) = 4;
  *(_QWORD *)(a1 + 1464) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 1472) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 1488) = dispatch_queue_create("com.apple.locationd.CLElevationAWDAggregator", 0);
  *(_BYTE *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_DWORD *)(a1 + 1696) = 1;
  return a1;
}

void sub_100B45A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v12 = *(void **)(v10 + 864);
  if (v12)
  {
    *(_QWORD *)(v10 + 872) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(v10 + 808);
  if (v13)
  {
    *(_QWORD *)(v10 + 816) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(v10 + 728);
  if (v14)
  {
    *(_QWORD *)(v10 + 736) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 672);
  if (v15)
  {
    *(_QWORD *)(v10 + 680) = v15;
    operator delete(v15);
  }
  a10 = (void **)(v10 + 456);
  sub_100B461C8(&a10);
  a10 = (void **)(v10 + 432);
  sub_100B461C8(&a10);
  a10 = (void **)(v10 + 408);
  sub_100B461C8(&a10);
  v16 = *(void **)(v10 + 384);
  if (v16)
  {
    *(_QWORD *)(v10 + 392) = v16;
    operator delete(v16);
  }
  a10 = (void **)(v10 + 360);
  sub_100B461C8(&a10);
  a10 = (void **)(v10 + 336);
  sub_100B461C8(&a10);
  v17 = *(void **)(v10 + 312);
  if (v17)
  {
    *(_QWORD *)(v10 + 320) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v10 + 264);
  if (v18)
  {
    *(_QWORD *)(v10 + 272) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v10 + 216);
  if (v19)
  {
    *(_QWORD *)(v10 + 224) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v10 + 168);
  if (v20)
  {
    *(_QWORD *)(v10 + 176) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B45B30()
{
  uint64_t result;

  result = sub_1001E4BF4();
  if ((result & 0x10) != 0)
    operator new();
  return result;
}

void sub_100B45B78()
{
  operator delete();
}

uint64_t sub_100B45B9C()
{
  if (qword_102306D70 != -1)
    dispatch_once(&qword_102306D70, &stru_1021736A0);
  return qword_1023113A8;
}

void sub_100B45BE0(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 1488));
  v4 = *(NSObject **)(a1 + 1488);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100B45C50;
  v5[3] = &unk_10213D6C0;
  v5[4] = a1;
  v6 = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_100B45C50(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 1648) = *(_DWORD *)(result + 40);
  return result;
}

void sub_100B45C60(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  _QWORD v7[5];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 1488));
  v7[1] = 3221225472;
  v4 = a2[3];
  v10 = a2[2];
  v11 = v4;
  v12 = a2[4];
  v5 = a2[1];
  v8 = *a2;
  v6 = *(NSObject **)(a1 + 1488);
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_100B45CF4;
  v7[3] = &unk_1021736C0;
  v7[4] = a1;
  v13 = *((_QWORD *)a2 + 10);
  v9 = v5;
  dispatch_async(v6, v7);
}

void sub_100B45CF4(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;
  double v4;
  _DWORD *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 952))
  {
    v3 = *(_DWORD *)(v1 + 1648);
    if (v3 >= 5)
      v3 = 5;
    ++*(_DWORD *)(v1 + 4 * v3 + 760);
    v4 = *(double *)(a1 + 88);
    if (v4 >= 0.0)
    {
      v6 = log(fmax(v4, 0.000335462628));
      v7 = *(float *)(v1 + 900);
      if (v7 >= v6)
        v6 = *(float *)(v1 + 900);
      v8 = v6 - v7;
      v9 = *(float *)(v1 + 904) - v7;
      if (v8 >= v9)
        v8 = v9;
      ++*(_DWORD *)(*(_QWORD *)(v1 + 920) + 4 * (unint64_t)(float)(v8 / *(float *)(v1 + 896)));
      v10 = *(double *)(a1 + 104);
      if (v10 < 0.0)
        v10 = -v10;
      v11 = log(fmax(v10, 0.000335462624));
      v12 = *(float *)(v1 + 788);
      if (v12 >= v11)
        v11 = *(float *)(v1 + 788);
      v13 = v11 - v12;
      v14 = *(float *)(v1 + 792) - v12;
      if (v13 >= v14)
        v13 = v14;
      ++*(_DWORD *)(*(_QWORD *)(v1 + 808) + 4 * (unint64_t)(float)(v13 / *(float *)(v1 + 784)));
      v15 = log(fmax(*(double *)(a1 + 112), 0.000335462624));
      v16 = *(float *)(v1 + 844);
      if (v16 >= v15)
        v15 = *(float *)(v1 + 844);
      v17 = v15 - v16;
      v18 = *(float *)(v1 + 848) - v16;
      if (v17 >= v18)
        v17 = v18;
      v5 = (_DWORD *)(*(_QWORD *)(v1 + 864) + 4 * (unint64_t)(float)(v17 / *(float *)(v1 + 840)));
    }
    else
    {
      v5 = (_DWORD *)(v1 + 948);
    }
    ++*v5;
  }
}

void sub_100B45E58(uint64_t a1, double a2, float a3)
{
  NSObject *v6;
  _QWORD block[6];
  float v8;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 1488));
  v6 = *(NSObject **)(a1 + 1488);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100B45ED8;
  block[3] = &unk_102149608;
  block[4] = a1;
  *(double *)&block[5] = a2;
  v8 = a3;
  dispatch_async(v6, block);
}

double sub_100B45ED8(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _QWORD *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(double *)(v1 + 1464);
  v3 = *(double *)(a1 + 40);
  if (v2 != 1.79769313e308)
  {
    v4 = (v3 - v2) / 60.0;
    if (v4 > 0.0)
    {
      v5 = *(float *)(a1 + 48) - *(double *)(v1 + 1472);
      if (v5 < 0.0)
        v5 = -v5;
      v6 = v5 / v4 * 60.0;
      if (*(_BYTE *)(v1 + 952))
      {
        v7 = *(float *)(v1 + 652);
        if (v7 >= v6)
          v6 = *(float *)(v1 + 652);
        v8 = v6 - v7;
        v9 = *(float *)(v1 + 656) - v7;
        if (v8 >= v9)
          v8 = v9;
        ++*(_DWORD *)(*(_QWORD *)(v1 + 672) + 4 * (unint64_t)(float)(v8 / *(float *)(v1 + 648)));
        v10 = (float *)(v1 + 704);
        v11 = v4;
        v12 = *(float *)(v1 + 708);
        if (v12 >= v11)
          v11 = *(float *)(v1 + 708);
        v13 = v11 - v12;
        v14 = *(float *)(v1 + 712) - v12;
        if (v13 >= v14)
          v13 = v14;
        v15 = (_QWORD *)(v1 + 728);
      }
      else
      {
        v16 = *(float *)(v1 + 244);
        if (v16 >= v6)
          v6 = *(float *)(v1 + 244);
        v17 = v6 - v16;
        v18 = *(float *)(v1 + 248) - v16;
        if (v17 >= v18)
          v17 = v18;
        ++*(_DWORD *)(*(_QWORD *)(v1 + 264) + 4 * (unint64_t)(float)(v17 / *(float *)(v1 + 240)));
        v10 = (float *)(v1 + 288);
        v19 = v4;
        v20 = *(float *)(v1 + 292);
        if (v20 >= v19)
          v19 = *(float *)(v1 + 292);
        v13 = v19 - v20;
        v21 = *(float *)(v1 + 296) - v20;
        if (v13 >= v21)
          v13 = v21;
        v15 = (_QWORD *)(v1 + 312);
      }
      ++*(_DWORD *)(*v15 + 4 * (unint64_t)(float)(v13 / *v10));
    }
  }
  *(double *)(v1 + 1464) = v3;
  result = *(float *)(a1 + 48);
  *(double *)(v1 + 1472) = result;
  return result;
}

void sub_100B46040(uint64_t a1, char a2, char a3)
{
  NSObject *v6;
  _QWORD v7[5];
  char v8;
  char v9;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 1488));
  v6 = *(NSObject **)(a1 + 1488);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B460C0;
  v7[3] = &unk_102173700;
  v7[4] = a1;
  v8 = a2;
  v9 = a3;
  dispatch_async(v6, v7);
}

uint64_t sub_100B460C0(uint64_t result)
{
  _BYTE *v1;
  char v2;

  v1 = *(_BYTE **)(result + 32);
  v2 = *(_BYTE *)(result + 40);
  if (v2)
    v2 = *(_BYTE *)(result + 41) != 0;
  v1[954] = v2;
  if (v1[952])
  {
    if (v1[956])
      v2 = 1;
    v1[956] = v2;
  }
  return result;
}

uint64_t sub_100B460F8(uint64_t a1, float a2, float a3, float a4)
{
  unint64_t v5;
  int v7;

  *(float *)a1 = a2;
  *(float *)(a1 + 4) = a3;
  *(float *)(a1 + 8) = a4;
  v5 = (unint64_t)(float)((float)(a4 - a3) / a2) + 1;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = 0;
  sub_1004AF5E4((char **)(a1 + 24), v5, &v7);
  return a1;
}

void sub_100B46160(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B4617C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void sub_100B461C8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100B4617C((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t sub_100B46208()
{
  _QWORD *v0;
  _WORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _OWORD *v6;
  _DWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _OWORD *v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;

  xmmword_102306B88 = 0u;
  *(_OWORD *)&qword_102306B98 = 0u;
  xmmword_102306B78 = 0u;
  v0 = operator new(8uLL);
  *((_QWORD *)&xmmword_102306B88 + 1) = v0;
  *v0 = 0x800040002000100;
  qword_102306B98 = (uint64_t)(v0 + 1);
  unk_102306BA0 = v0 + 1;
  unk_102306BA8 = 0u;
  unk_102306BB8 = 0u;
  unk_102306BC8 = 0u;
  *(_OWORD *)&qword_102306BD8 = 0u;
  qword_102306BE8 = 0;
  v1 = operator new(6uLL);
  qword_102306BE0 = (uint64_t)(v1 + 3);
  qword_102306BE8 = (uint64_t)(v1 + 3);
  *(_DWORD *)v1 = 67109376;
  v1[2] = 2048;
  qword_102306BD8 = (uint64_t)v1;
  unk_102306BF0 = 0u;
  unk_102306C00 = 0u;
  unk_102306C10 = 0u;
  unk_102306C20 = 0u;
  unk_102306C30 = 0u;
  *(_OWORD *)&qword_102306C40 = 0u;
  v2 = operator new(8uLL);
  qword_102306C38 = (uint64_t)v2;
  *v2 = 0x800040002000100;
  qword_102306C40 = (uint64_t)(v2 + 1);
  unk_102306C48 = v2 + 1;
  qword_102306C58 = 0;
  unk_102306C60 = 0;
  qword_102306C50 = 0;
  v3 = operator new(8uLL);
  qword_102306C50 = (uint64_t)v3;
  *v3 = 0x800040002000100;
  qword_102306C58 = (uint64_t)(v3 + 1);
  unk_102306C60 = v3 + 1;
  qword_102306C70 = 0;
  unk_102306C78 = 0;
  qword_102306C68 = 0;
  v4 = operator new(8uLL);
  qword_102306C68 = (uint64_t)v4;
  *v4 = 0x800040002000100;
  qword_102306C70 = (uint64_t)(v4 + 1);
  unk_102306C78 = v4 + 1;
  __cxa_atexit((void (*)(void *))sub_100B45708, &xmmword_102306B78, (void *)&_mh_execute_header);
  qword_102306C88 = 0;
  unk_102306C90 = 0;
  qword_102306C80 = 0;
  v5 = operator new(0x34uLL);
  qword_102306C88 = (uint64_t)(v5 + 13);
  unk_102306C90 = v5 + 13;
  v5[12] = 1119092736;
  *(_OWORD *)v5 = xmmword_101C16898;
  *((_OWORD *)v5 + 1) = unk_101C168A8;
  *((_OWORD *)v5 + 2) = xmmword_101C168B8;
  qword_102306C80 = (uint64_t)v5;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102306C80, (void *)&_mh_execute_header);
  qword_102306CA0 = 0;
  unk_102306CA8 = 0;
  qword_102306C98 = 0;
  v6 = operator new(0x2CuLL);
  qword_102306CA0 = (uint64_t)v6 + 44;
  unk_102306CA8 = (char *)v6 + 44;
  *v6 = xmmword_101C168CC;
  v6[1] = unk_101C168DC;
  *(_OWORD *)((char *)v6 + 28) = unk_101C168E8;
  qword_102306C98 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102306C98, (void *)&_mh_execute_header);
  qword_102306CB8 = 0;
  unk_102306CC0 = 0;
  qword_102306CB0 = 0;
  v7 = operator new(0x54uLL);
  qword_102306CB8 = (uint64_t)(v7 + 21);
  unk_102306CC0 = v7 + 21;
  v7[20] = 1075419546;
  *((_OWORD *)v7 + 2) = xmmword_101C16918;
  *((_OWORD *)v7 + 3) = unk_101C16928;
  *((_OWORD *)v7 + 4) = xmmword_101C16938;
  *(_OWORD *)v7 = xmmword_101C168F8;
  *((_OWORD *)v7 + 1) = unk_101C16908;
  qword_102306CB0 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102306CB0, (void *)&_mh_execute_header);
  qword_102306CD0 = 0;
  unk_102306CD8 = 0;
  qword_102306CC8 = 0;
  v8 = operator new(0x7CuLL);
  qword_102306CD0 = (uint64_t)v8 + 124;
  unk_102306CD8 = (char *)v8 + 124;
  v8[4] = xmmword_101C1698C;
  v8[5] = unk_101C1699C;
  v8[6] = xmmword_101C169AC;
  *(_OWORD *)((char *)v8 + 108) = *(__int128 *)((char *)&xmmword_101C169AC + 12);
  *v8 = xmmword_101C1694C;
  v8[1] = unk_101C1695C;
  v8[2] = xmmword_101C1696C;
  v8[3] = unk_101C1697C;
  qword_102306CC8 = (uint64_t)v8;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102306CC8, (void *)&_mh_execute_header);
  qword_102306CE8 = 0;
  unk_102306CF0 = 0;
  qword_102306CE0 = 0;
  v9 = operator new(0x5CuLL);
  qword_102306CE8 = (uint64_t)v9 + 92;
  unk_102306CF0 = (char *)v9 + 92;
  v9[2] = xmmword_101C169E8;
  v9[3] = unk_101C169F8;
  v9[4] = xmmword_101C16A08;
  *(_OWORD *)((char *)v9 + 76) = *(__int128 *)((char *)&xmmword_101C16A08 + 12);
  *v9 = xmmword_101C169C8;
  v9[1] = unk_101C169D8;
  qword_102306CE0 = (uint64_t)v9;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102306CE0, (void *)&_mh_execute_header);
  qword_102306D00 = 0;
  unk_102306D08 = 0;
  qword_102306CF8 = 0;
  v10 = operator new(0x54uLL);
  qword_102306D00 = (uint64_t)(v10 + 21);
  unk_102306D08 = v10 + 21;
  v10[20] = 1172373504;
  *((_OWORD *)v10 + 2) = xmmword_101C16A44;
  *((_OWORD *)v10 + 3) = unk_101C16A54;
  *((_OWORD *)v10 + 4) = xmmword_101C16A64;
  *(_OWORD *)v10 = xmmword_101C16A24;
  *((_OWORD *)v10 + 1) = unk_101C16A34;
  qword_102306CF8 = (uint64_t)v10;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102306CF8, (void *)&_mh_execute_header);
  qword_102306D18 = 0;
  unk_102306D20 = 0;
  qword_102306D10 = 0;
  v11 = operator new(0x54uLL);
  qword_102306D18 = (uint64_t)(v11 + 21);
  unk_102306D20 = v11 + 21;
  v11[20] = 100;
  *((_OWORD *)v11 + 2) = xmmword_101C16A98;
  *((_OWORD *)v11 + 3) = unk_101C16AA8;
  *((_OWORD *)v11 + 4) = xmmword_101C16AB8;
  *(_OWORD *)v11 = xmmword_101C16A78;
  *((_OWORD *)v11 + 1) = unk_101C16A88;
  qword_102306D10 = (uint64_t)v11;
  __cxa_atexit((void (*)(void *))sub_100B45748, &qword_102306D10, (void *)&_mh_execute_header);
  qword_102306D30 = 0;
  unk_102306D38 = 0;
  qword_102306D28 = 0;
  v12 = operator new(0x4CuLL);
  qword_102306D30 = (uint64_t)v12 + 76;
  unk_102306D38 = (char *)v12 + 76;
  v12[2] = xmmword_101C16AEC;
  v12[3] = unk_101C16AFC;
  *(_OWORD *)((char *)v12 + 60) = unk_101C16B08;
  *v12 = xmmword_101C16ACC;
  v12[1] = unk_101C16ADC;
  qword_102306D28 = (uint64_t)v12;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102306D28, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102306D40, "CLElevationAWDAggregator");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306D40, (void *)&_mh_execute_header);
  if (byte_102306D57 >= 0)
    v13 = byte_102306D57;
  else
    v13 = qword_102306D48;
  v14 = sub_100259584((uint64_t)&unk_102306D58, v13 + 16);
  if (*(char *)(v14 + 23) >= 0)
    v15 = (void *)v14;
  else
    v15 = *(void **)v14;
  if (v13)
  {
    if (byte_102306D57 >= 0)
      v16 = &qword_102306D40;
    else
      v16 = (uint64_t *)qword_102306D40;
    memmove(v15, v16, v13);
  }
  strcpy((char *)v15 + v13, "_NextMidnightUTC");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &unk_102306D58, (void *)&_mh_execute_header);
}

void sub_100B466DC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  void *v6;

  v3 = &qword_102306C68;
  v4 = &qword_102306C68;
  while (1)
  {
    v6 = (void *)*(v4 - 3);
    v4 -= 3;
    v5 = v6;
    if (v6)
    {
      *(v3 - 2) = (uint64_t)v5;
      operator delete(v5);
    }
    v3 = v4;
    if (v4 == v1)
      _Unwind_Resume(exception_object);
  }
}

id sub_100B46D98(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateIDSStatusAndNotify");
}

void sub_100B491C8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100B491F4(id a1)
{
  qword_10229FEB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_100B49220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, double a8)
{
  int v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  uint8_t *v22;
  _QWORD v23[2];
  uint8_t buf[8];
  uint64_t v25;
  id (*v26)(uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v16 = rand();
  if (!(v16 % *sub_10023EA00()))
  {
    *(_QWORD *)buf = _NSConcreteStackBlock;
    v25 = 3221225472;
    v26 = sub_100B49E5C;
    v27 = &unk_102173760;
    v28 = a1;
    v29 = a2;
    v30 = a4;
    v31 = a8;
    v32 = a3;
    v33 = a5;
    v34 = a6;
    v35 = a7;
    AnalyticsSendEventLazy(CFSTR("com.apple.wifiPositionCalculatorWithReachIntersection.availability"), buf);
  }
  if (sub_100182290(a1 + 40) && (sub_100182290(a2) & 1) != 0)
  {
    if ((sub_100182290(a3) & 1) != 0 || (sub_100182290(a5) & 1) != 0)
    {
      if (vabdd_f64(*(double *)(a1 + 116), *(double *)(a2 + 76)) <= 1.0)
      {
        v20 = rand();
        if (!(v20 % *sub_10023EA00()))
        {
          *(_QWORD *)buf = _NSConcreteStackBlock;
          v25 = 3221225472;
          v26 = sub_100B496B8;
          v27 = &unk_102173760;
          v28 = a1;
          v29 = a2;
          v30 = a4;
          v31 = a8;
          v32 = a3;
          v33 = a5;
          v34 = a6;
          v35 = a7;
          AnalyticsSendEventLazy(CFSTR("com.apple.wifiPositionCalculatorWithReachIntersection.analytics"), buf);
        }
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173780);
        v17 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to deltaTimeFromRef is greater than maximum threshold", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102173780);
          LOWORD(v23[0]) = 0;
          v18 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to deltaTimeFromRef is greater than maximum threshold", v23, 2, v23[0]);
LABEL_35:
          v22 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiReachIntersectionAnalytics::submitMetricsIfPossible(const CLDaemonLocation &, const CLDaemonLocation &, size_t, double, const CLDaemonLocation &, BOOL, BOOL)", "%s\n", v18);
          if (v22 != buf)
            free(v22);
        }
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173780);
      v21 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid afterLocation and afterLocationConservative.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173780);
        LOWORD(v23[0]) = 0;
        v18 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid afterLocation and afterLocationConservative.", v23, 2, v23[0]);
        goto LABEL_35;
      }
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173780);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid fRefLocation or invalid beforeLocation.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173780);
      LOWORD(v23[0]) = 0;
      v18 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid fRefLocation or invalid beforeLocation.", v23, 2, v23[0]);
      goto LABEL_35;
    }
  }
}

void *sub_100B496B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  double v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  id v44;
  uint64_t v45;
  id v46;
  char *v47;
  id v48;
  NSObject *v49;
  char *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  id v60;
  uint8_t buf[4];
  uint64_t v62;
  __int16 v63;
  id v64;
  _BYTE v65[128];
  _QWORD v66[4];
  _QWORD v67[4];

  v2 = *(_QWORD *)(a1 + 32);
  v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v5 = vabdd_f64(*(double *)(v2 + 116), *(double *)(*(_QWORD *)(a1 + 40) + 76));
  v6 = *(_QWORD **)(v2 + 720);
  if (v6)
    v7 = -1227133513 * ((v6[1] - *v6) >> 2);
  else
    v7 = 0xFFFFFFFFLL;
  v66[0] = CFSTR("deltaTimeFromGps");
  LODWORD(v3) = llround(v5);
  v67[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
  v66[1] = CFSTR("gpsHorizontalAccuracy");
  LODWORD(v8) = llround(*(double *)(v2 + 60));
  v67[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8);
  v66[2] = CFSTR("numSatelliteVisible");
  v67[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v7);
  v66[3] = CFSTR("locType");
  v67[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 136));
  objc_msgSend(v4, "setDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v67, v66, 4));
  v10 = *(double *)(v2 + 584);
  if (v10 > 0.0 && *(double *)(v2 + 672) > 0.0)
  {
    v11 = *(double *)(v2 + 664) - *(double *)(v2 + 576);
    LODWORD(v9) = llround(v10);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9), CFSTR("gpsGroundAltitudeUncertainty"));
    LODWORD(v12) = llround(*(double *)(v2 + 672));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v12), CFSTR("gpsAbsoluteAltitudeUncertainty"));
    LODWORD(v13) = llround(v11);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v13), CFSTR("gpsAltitudeAboveGround"));
  }
  sub_10011E258((double *)v2, v2 + 40, *(_QWORD *)(a1 + 40));
  v15 = v14;
  LODWORD(v16) = llround(v14);
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16), CFSTR("wifiFixErrorBeforeUseOfReachIntersection"));
  v17 = *(double *)(*(_QWORD *)(a1 + 40) + 20);
  if (v17 > 0.0)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15 / v17), CFSTR("hErrRatioBeforeUseOfReachIntersection"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 48)), CFSTR("numOfInputCentroids"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56)), CFSTR("pairwiseIntersectionRatio"));
  if (sub_100182290(*(_QWORD *)(a1 + 64)))
  {
    sub_10011E258((double *)v2, v2 + 40, *(_QWORD *)(a1 + 64));
    v19 = v18;
    v20 = v18 - v15;
    sub_10011E258((double *)v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
    v22 = v21;
    LODWORD(v23) = llround(v19);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v23), CFSTR("wifiFixErrorAfterUseOfReachIntersection"));
    LODWORD(v24) = llround(v20);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v24), CFSTR("wifiFixErrorChangeByUseOfReachIntersection"));
    LODWORD(v25) = llround(v22);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v25), CFSTR("wifiFixDistanceBeforeAndAfterUseOfReachIntersection"));
    v26 = *(double *)(*(_QWORD *)(a1 + 64) + 20);
    if (v26 > 0.0)
      objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v19 / v26), CFSTR("hErrRatioAfterUseOfReachIntersection"));
  }
  if (sub_100182290(*(_QWORD *)(a1 + 72)))
  {
    sub_10011E258((double *)v2, v2 + 40, *(_QWORD *)(a1 + 72));
    v28 = v27;
    v29 = v27 - v15;
    sub_10011E258((double *)v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72));
    v31 = v30;
    LODWORD(v32) = llround(v28);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v32), CFSTR("wifiFixErrorAfterUseOfReachIntersectionConservative"));
    LODWORD(v33) = llround(v29);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v33), CFSTR("wifiFixErrorChangeByUseOfReachIntersectionConservative"));
    LODWORD(v34) = llround(v31);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v34), CFSTR("wifiFixDistanceBeforeAndAfterUseOfReachIntersectionConservative"));
    v35 = *(double *)(*(_QWORD *)(a1 + 72) + 20);
    if (v35 > 0.0)
      objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v28 / v35), CFSTR("hErrRatioAfterUseOfReachIntersectionConservative"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)), CFSTR("isOriginalLocUsedAfterUseOfReachIntersectionConservative"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81)), CFSTR("isOriginalLocInsideReachIntersection"));
  }
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v36 = v4;
  v37 = objc_msgSend(v4, "allKeys");
  v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v53, v65, 16);
  if (v38)
  {
    v39 = v38;
    v40 = *(_QWORD *)v54;
    do
    {
      v41 = 0;
      do
      {
        if (*(_QWORD *)v54 != v40)
          objc_enumerationMutation(v37);
        v42 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)v41);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173780);
        v43 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v44 = objc_msgSend(v36, "objectForKey:", v42);
          *(_DWORD *)buf = 138478083;
          v62 = v42;
          v63 = 2113;
          v64 = v44;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] %{private}@ -> %{private}@", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102173780);
          v45 = qword_1022A0048;
          v46 = objc_msgSend(v36, "objectForKey:", v42);
          v57 = 138478083;
          v58 = v42;
          v59 = 2113;
          v60 = v46;
          LODWORD(v52) = 22;
          v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 2, "[WifiPositionCalculatorWithReachIntersectionAnalytics] %{private}@ -> %{private}@", &v57, v52);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiReachIntersectionAnalytics::sendCoreAnalyticsEventForWifiFixErrorAndHorizontalErrorRatio(const CLDaemonLocation &, const CLDaemonLocation &, size_t, double, const CLDaemonLocation &, BOOL, BOOL)_block_invoke", "%s\n", v47);
          if (v47 != (char *)buf)
            free(v47);
        }
        v41 = (char *)v41 + 1;
      }
      while (v39 != v41);
      v48 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v53, v65, 16);
      v39 = v48;
    }
    while (v48);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102173780);
  v49 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] sent payload.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173780);
    LOWORD(v57) = 0;
    LODWORD(v52) = 2;
    v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "[WifiPositionCalculatorWithReachIntersectionAnalytics] sent payload.", &v57, v52);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiReachIntersectionAnalytics::sendCoreAnalyticsEventForWifiFixErrorAndHorizontalErrorRatio(const CLDaemonLocation &, const CLDaemonLocation &, size_t, double, const CLDaemonLocation &, BOOL, BOOL)_block_invoke", "%s\n", v51);
    if (v51 != (char *)buf)
      free(v51);
  }
  return v36;
}

id sub_100B49E5C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  double v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD v8[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v4 = vabdd_f64(*(double *)(v2 + 116), *(double *)(*(_QWORD *)(a1 + 40) + 76));
  v7[0] = CFSTR("deltaTimeFromGps");
  LODWORD(v5) = llround(v4);
  v8[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5);
  v7[1] = CFSTR("validGpsLocation");
  v8[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100182290(v2 + 40));
  v7[2] = CFSTR("locType");
  v8[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 136));
  objc_msgSend(v3, "setDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 3));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 48)), CFSTR("numOfInputCentroids"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100182290(*(_QWORD *)(a1 + 40))), CFSTR("validBeforeLocation"));
  if (sub_100182290(*(_QWORD *)(a1 + 40)))
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 20)), CFSTR("hUncBeforeLocation"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56)), CFSTR("pairwiseIntersectionRatio"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100182290(*(_QWORD *)(a1 + 64))), CFSTR("validAfterLocation"));
  if (sub_100182290(*(_QWORD *)(a1 + 64)))
  {
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 64) + 20)), CFSTR("hUncAfterLocation"));
    if (sub_100182290(*(_QWORD *)(a1 + 40)))
    {
      sub_10011E258((double *)v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("wifiFixDistanceBeforeAndAfterUseOfReachIntersection"));
    }
  }
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100182290(*(_QWORD *)(a1 + 72))), CFSTR("validAfterLocationConservative"));
  if (sub_100182290(*(_QWORD *)(a1 + 72)))
  {
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 72) + 20)), CFSTR("hUncAfterLocationConservative"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)), CFSTR("isOriginalLocUsedAfterUseOfReachIntersectionConservative"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81)), CFSTR("isOriginalLocInsideReachIntersection"));
    if (sub_100182290(*(_QWORD *)(a1 + 40)))
    {
      sub_10011E258((double *)v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("wifiFixDistanceBeforeAndAfterUseOfReachIntersectionConservative"));
    }
  }
  return v3;
}

void sub_100B4A174(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B4A1A0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100B4A23C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100B4A254()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100B4A2E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

double sub_100B4A2F8(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = a2;
  *(_DWORD *)(a1 + 108) = a3;
  return result;
}

uint64_t sub_100B4A330(uint64_t a1)
{
  sub_100008848(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_100B4C4F8(a1 + 56, *(_QWORD **)(a1 + 64));
  sub_100412390((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100B4A374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v5;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[32];
  int32x4_t v19;
  __int128 v20;
  char v21;
  _QWORD v22[6];

  _Q0 = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)v18 = _Q0.i64[0];
  *(_DWORD *)&v18[8] = 2139095039;
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)&v18[12] = v5;
  *(_DWORD *)&v18[28] = 0x7FFFFFFF;
  v19 = _Q0;
  *(_QWORD *)&v20 = _Q0.i64[0];
  *((_QWORD *)&v20 + 1) = 0x7FFFFFFF7F7FFFFFLL;
  v21 = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  v17 = _Q0.i64[0];
  sub_100B4C540((uint64_t)v22, 1uLL, &v17);
  v10 = v20;
  *(int32x4_t *)(a2 + 32) = v19;
  *(_OWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 64) = v21;
  v11 = *(_OWORD *)&v18[16];
  *(_OWORD *)a2 = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 16) = v11;
  sub_100B4BCD8(a2 + 72, v22);
  if (*(_QWORD *)(a1 + 96))
  {
    v14 = *(_QWORD *)(a1 + 88);
    v13 = a1 + 88;
    v12 = v14;
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(*(_QWORD *)(v13 - 8) + 28);
    if (v14)
    {
      do
      {
        v15 = v12;
        v12 = *(_QWORD *)(v12 + 8);
      }
      while (v12);
    }
    else
    {
      do
      {
        v15 = *(_QWORD *)(v13 + 16);
        _ZF = *(_QWORD *)v15 == v13;
        v13 = v15;
      }
      while (_ZF);
    }
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v15 + 28);
  }
  return sub_10047F25C(v22);
}

void sub_100B4A478(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10047F25C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100B4A48C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float **v26;
  float *v27;
  float **v28;
  float *v29;
  NSObject *v30;
  unint64_t v31;
  float *v32;
  double v33;
  double v34;
  int v35;
  unint64_t v36;
  float *v37;
  double v38;
  double v39;
  const char *v40;
  char *v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  const char *v49;
  __int16 v50;
  double v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  double v55;
  _BYTE buf[12];
  __int16 v57;
  double v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  double v62;

  *((_QWORD *)&v3 + 1) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = *(_DWORD *)(result + 104);
  v5 = *(_DWORD *)(result + 108);
  v47 = v4;
  if (v4 <= v5)
  {
    v6 = result;
    v7 = (uint64_t **)(result + 56);
    v8 = (_QWORD *)(result + 64);
    *(_QWORD *)&v3 = 136315906;
    v43 = v3;
    do
    {
      v9 = *v8;
      if (*v8)
      {
        v10 = v8;
        do
        {
          v11 = *(_DWORD *)(v9 + 32);
          v12 = v11 < v4;
          if (v11 >= v4)
            v13 = (uint64_t *)v9;
          else
            v13 = (uint64_t *)(v9 + 8);
          if (!v12)
            v10 = (_QWORD *)v9;
          v9 = *v13;
        }
        while (*v13);
        if (v10 != v8 && v4 >= *((_DWORD *)v10 + 8))
        {
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          *(_QWORD *)buf = &v47;
          v14 = sub_100B4C6A0(v7, &v47, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          v15 = (unint64_t)v14[9];
          v16 = v14[6];
          v17 = &v16[v15 >> 8];
          if (v14[7] == v16)
            v18 = 0;
          else
            v18 = *v17 + 16 * v15;
LABEL_16:
          v19 = v18 - 4096;
          while (1)
          {
            *(_QWORD *)buf = &v47;
            v20 = sub_100B4C6A0(v7, &v47, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v21 = v20[6];
            if (v20[7] == v21)
            {
              v23 = 0;
            }
            else
            {
              v22 = (unint64_t)v20[9] + (_QWORD)v20[10];
              v23 = *(uint64_t *)((char *)v21 + ((v22 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v22;
            }
            if (v18 == v23)
              break;
            v24 = (float *)(v18 + 8);
            sub_1000BFB54(&v44, v24);
            v19 += 16;
            v18 = (uint64_t)(v24 + 2);
            if (*v17 == v19)
            {
              v25 = v17[1];
              ++v17;
              v18 = v25;
              goto LABEL_16;
            }
          }
          if (*((_QWORD *)&v46 + 1))
          {
            v26 = (float **)(*((_QWORD *)&v44 + 1) + 8 * ((unint64_t)v46 >> 10));
            if ((_QWORD)v45 == *((_QWORD *)&v44 + 1))
            {
              v27 = 0;
              v29 = 0;
              v28 = (float **)(*((_QWORD *)&v44 + 1) + 8 * (((_QWORD)v46 + *((_QWORD *)&v46 + 1)) >> 10));
            }
            else
            {
              v27 = &(*v26)[v46 & 0x3FF];
              v28 = (float **)(*((_QWORD *)&v44 + 1) + 8 * (((_QWORD)v46 + *((_QWORD *)&v46 + 1)) >> 10));
              v29 = &(*v28)[(v46 + *((_QWORD *)&v46 + 1)) & 0x3FF];
            }
            *(_DWORD *)buf = sub_100B4C7D4(v26, v27, v28, v29);
            *(float *)&buf[4] = (float)v47 + 0.5;
            sub_100B4A928((_QWORD *)a2, buf);
            if (qword_10229FD70 != -1)
              dispatch_once(&qword_10229FD70, &stru_1021737A0);
            v30 = qword_10229FD78;
            if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
            {
              v31 = *(_QWORD *)(a2 + 40) + *(_QWORD *)(a2 + 32) - 1;
              v32 = (float *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + ((v31 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v31 & 0x1FF));
              v33 = v32[1];
              v34 = *v32;
              *(_DWORD *)buf = v43;
              *(_QWORD *)&buf[4] = "PRTTSampleTemperature";
              v57 = 2048;
              v58 = v33;
              v59 = 2080;
              v60 = "PRTTSamplePressure";
              v61 = 2048;
              v62 = v34;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f", buf, 0x2Au);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD70 != -1)
                dispatch_once(&qword_10229FD70, &stru_1021737A0);
              v36 = *(_QWORD *)(a2 + 40) + *(_QWORD *)(a2 + 32) - 1;
              v37 = (float *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v36 & 0x1FF));
              v38 = v37[1];
              v39 = *v37;
              v48 = v43;
              v49 = "PRTTSampleTemperature";
              v50 = 2048;
              v51 = v38;
              v52 = 2080;
              v53 = "PRTTSamplePressure";
              v54 = 2048;
              v55 = v39;
              LODWORD(v42) = 42;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "%s,%f,%s,%f", (const char *)&v48, v42, (const char *)v43, *((double *)&v43 + 1));
              v41 = (char *)v40;
              sub_100512490("Generic", 1, 0, 2, "std::deque<CLMotionTypePressure> CLRobustSlopeEstimator::computePRTT()", "%s\n", v40);
              if (v41 != buf)
                free(v41);
            }
          }
          result = sub_100412390(&v44);
        }
      }
      v35 = v47;
      v4 = ++v47;
    }
    while (v35 < *(_DWORD *)(v6 + 108));
  }
  return result;
}

void sub_100B4A8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  va_list va;

  va_start(va, a5);
  sub_100412390((uint64_t *)va);
  sub_10047F25C(v5);
  _Unwind_Resume(a1);
}

void sub_100B4A928(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B4CF9C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_100B4A9B0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  float **v39;
  float *v40;
  float **v41;
  float *v42;
  float v43;
  void **v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  float **v60;
  float *v61;
  float **v62;
  float *v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  float *v68;
  float *v69;
  uint64_t v70;
  float **v71;
  float *v72;
  float **v73;
  float *v74;
  float v75;
  void **v76;
  float **v77;
  float *v78;
  float *v79;
  uint64_t v80;
  float *v81;
  float *v82;
  float v83;
  unint64_t v84;
  uint64_t v85;
  void **v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD v89[6];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint8_t buf[16];
  __int128 v97;
  __int128 v98;

  sub_100B4A374(a1, a3);
  if (*(_QWORD *)(a1 + 72) >= (unint64_t)a2)
  {
    v97 = 0u;
    v98 = 0u;
    *(_OWORD *)buf = 0u;
    v11 = *(_QWORD **)(a1 + 56);
    v12 = (_QWORD *)(a1 + 64);
    while (1)
    {
      v13 = (_QWORD *)*v12;
      v14 = (_QWORD *)(a1 + 64);
      if (*v12)
      {
        do
        {
          v15 = v13;
          v13 = (_QWORD *)v13[1];
        }
        while (v13);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v14[2];
          v16 = *v15 == (_QWORD)v14;
          v14 = v15;
        }
        while (v16);
      }
      if (v11 == v15)
        break;
      v17 = v11[9];
      v18 = v11[6];
      v19 = v11[7];
      v20 = (_QWORD *)(v18 + 8 * (v17 >> 8));
      if (v19 == v18)
        v21 = 0;
      else
        v21 = *v20 + 16 * v17;
      while (1)
      {
        if (v19 == v18)
        {
          v37 = 0;
        }
        else
        {
          v36 = v11[10] + v11[9];
          v37 = *(_QWORD *)(v18 + ((v36 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v36;
        }
        v24 = (_QWORD *)v11[1];
        if (v21 == v37)
          break;
        v22 = v11;
        if (v24)
        {
          do
          {
            v23 = v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v22[2];
            v16 = *v23 == (_QWORD)v22;
            v22 = v23;
          }
          while (!v16);
        }
        if (v23 != v12)
        {
          do
          {
            v25 = v23[9];
            v26 = v23[6];
            v27 = v23[7];
            v28 = (_QWORD *)(v26 + 8 * (v25 >> 8));
            if (v27 == v26)
              v29 = 0;
            else
              v29 = *v28 + 16 * v25;
            while (1)
            {
              if (v27 == v26)
              {
                v32 = 0;
              }
              else
              {
                v31 = v23[10] + v23[9];
                v32 = *(_QWORD *)(v26 + ((v31 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v31;
              }
              if (v29 == v32)
                break;
              *(float *)&v93 = (float)(*(float *)(v29 + 8) - *(float *)(v21 + 8))
                             / (float)(*(float *)(v29 + 12) - *(float *)(v21 + 12));
              sub_1000BFB54(buf, (float *)&v93);
              v29 += 16;
              if (v29 - *v28 == 4096)
              {
                v30 = v28[1];
                ++v28;
                v29 = v30;
              }
              v26 = v23[6];
              v27 = v23[7];
            }
            v33 = (_QWORD *)v23[1];
            if (v33)
            {
              do
              {
                v34 = v33;
                v33 = (_QWORD *)*v33;
              }
              while (v33);
            }
            else
            {
              do
              {
                v34 = (_QWORD *)v23[2];
                v16 = *v34 == (_QWORD)v23;
                v23 = v34;
              }
              while (!v16);
            }
            v23 = v34;
          }
          while (v34 != v12);
        }
        v21 += 16;
        if (v21 - *v20 == 4096)
        {
          v35 = v20[1];
          ++v20;
          v21 = v35;
        }
        v18 = v11[6];
        v19 = v11[7];
      }
      v38 = v11;
      if (v24)
      {
        do
        {
          v11 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v38[2];
          v16 = *v11 == (_QWORD)v38;
          v38 = v11;
        }
        while (!v16);
      }
    }
    v39 = (float **)(*(_QWORD *)&buf[8] + 8 * ((unint64_t)v98 >> 10));
    if ((_QWORD)v97 == *(_QWORD *)&buf[8])
    {
      v40 = 0;
      v42 = 0;
      v41 = (float **)(*(_QWORD *)&buf[8] + 8 * ((*((_QWORD *)&v98 + 1) + (_QWORD)v98) >> 10));
    }
    else
    {
      v40 = &(*v39)[v98 & 0x3FF];
      v41 = (float **)(*(_QWORD *)&buf[8] + 8 * ((*((_QWORD *)&v98 + 1) + (_QWORD)v98) >> 10));
      v42 = &(*v41)[(*((_QWORD *)&v98 + 1) + v98) & 0x3FF];
    }
    v43 = sub_100B4C7D4(v39, v40, v41, v42);
    v44 = *(void ***)&buf[8];
    *((_QWORD *)&v98 + 1) = 0;
    v45 = v97 - *(_QWORD *)&buf[8];
    if ((_QWORD)v97 - *(_QWORD *)&buf[8] >= 0x11uLL)
    {
      do
      {
        operator delete(*v44);
        v44 = (void **)(*(_QWORD *)&buf[8] + 8);
        *(_QWORD *)&buf[8] = v44;
        v45 = v97 - (_QWORD)v44;
      }
      while ((_QWORD)v97 - (_QWORD)v44 > 0x10uLL);
    }
    if (v45 >> 3 == 1)
    {
      v46 = 512;
    }
    else
    {
      if (v45 >> 3 != 2)
        goto LABEL_65;
      v46 = 1024;
    }
    *(_QWORD *)&v98 = v46;
LABEL_65:
    v94 = 0u;
    v95 = 0u;
    v93 = 0u;
    v47 = *(_QWORD **)(a1 + 56);
    if (v47 == v12)
    {
      v60 = 0;
      v58 = 0;
      v59 = 0;
    }
    else
    {
      do
      {
        v48 = v47[9];
        v49 = v47[6];
        v50 = v47[7];
        v51 = (_QWORD *)(v49 + 8 * (v48 >> 8));
        if (v50 == v49)
          v52 = 0;
        else
          v52 = *v51 + 16 * v48;
        while (1)
        {
          if (v50 == v49)
          {
            v55 = 0;
          }
          else
          {
            v54 = v47[10] + v47[9];
            v55 = *(_QWORD *)(v49 + ((v54 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v54;
          }
          if (v52 == v55)
            break;
          *(float *)&v90 = *(float *)(v52 + 8) + (float)((float)-v43 * *(float *)(v52 + 12));
          sub_1000BFB54(&v93, (float *)&v90);
          v52 += 16;
          if (v52 - *v51 == 4096)
          {
            v53 = v51[1];
            ++v51;
            v52 = v53;
          }
          v49 = v47[6];
          v50 = v47[7];
        }
        v56 = (_QWORD *)v47[1];
        if (v56)
        {
          do
          {
            v57 = v56;
            v56 = (_QWORD *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            v57 = (_QWORD *)v47[2];
            v16 = *v57 == (_QWORD)v47;
            v47 = v57;
          }
          while (!v16);
        }
        v47 = v57;
      }
      while (v57 != v12);
      v58 = v95;
      v59 = v94;
      v60 = (float **)(*((_QWORD *)&v93 + 1) + 8 * ((unint64_t)v95 >> 10));
      if ((_QWORD)v94 != *((_QWORD *)&v93 + 1))
      {
        v61 = &(*v60)[v95 & 0x3FF];
        v62 = (float **)(*((_QWORD *)&v93 + 1) + 8 * ((*((_QWORD *)&v95 + 1) + (_QWORD)v95) >> 10));
        v63 = &(*v62)[(*((_QWORD *)&v95 + 1) + v95) & 0x3FF];
        goto LABEL_86;
      }
    }
    v61 = 0;
    v63 = 0;
    v62 = (float **)(v59 + 8 * ((unint64_t)(*((_QWORD *)&v95 + 1) + v58) >> 10));
LABEL_86:
    v64 = sub_100B4C7D4(v60, v61, v62, v63);
    v91 = 0u;
    v92 = 0u;
    v90 = 0u;
    v65 = *((_QWORD *)&v93 + 1);
    v66 = v94;
    v67 = (_QWORD *)(*((_QWORD *)&v93 + 1) + 8 * ((unint64_t)v95 >> 10));
    if ((_QWORD)v94 == *((_QWORD *)&v93 + 1))
      v68 = 0;
    else
      v68 = (float *)(*v67 + 4 * (v95 & 0x3FF));
    while (1)
    {
      v70 = v66 == v65
          ? 0
          : *(_QWORD *)(v65 + (((*((_QWORD *)&v95 + 1) + (_QWORD)v95) >> 7) & 0x1FFFFFFFFFFFFF8))
          + 4 * ((*((_QWORD *)&v95 + 1) + v95) & 0x3FF);
      if (v68 == (float *)v70)
        break;
      LODWORD(v89[0]) = vabds_f32(*v68, v64);
      sub_1000BFB54(&v90, (float *)v89);
      if ((float *)((char *)++v68 - *v67) == (float *)4096)
      {
        v69 = (float *)v67[1];
        ++v67;
        v68 = v69;
      }
      v65 = *((_QWORD *)&v93 + 1);
      v66 = v94;
    }
    v71 = (float **)(*((_QWORD *)&v90 + 1) + 8 * ((unint64_t)v92 >> 10));
    if ((_QWORD)v91 == *((_QWORD *)&v90 + 1))
    {
      v72 = 0;
      v74 = 0;
      v73 = (float **)(*((_QWORD *)&v90 + 1) + 8 * ((*((_QWORD *)&v92 + 1) + (_QWORD)v92) >> 10));
    }
    else
    {
      v72 = &(*v71)[v92 & 0x3FF];
      v73 = (float **)(*((_QWORD *)&v90 + 1) + 8 * ((*((_QWORD *)&v92 + 1) + (_QWORD)v92) >> 10));
      v74 = &(*v73)[(*((_QWORD *)&v92 + 1) + v92) & 0x3FF];
    }
    v75 = sub_100B4C7D4(v71, v72, v73, v74);
    v76 = (void **)*((_QWORD *)&v90 + 1);
    v77 = (float **)(*((_QWORD *)&v90 + 1) + 8 * ((unint64_t)v92 >> 10));
    v78 = *v77;
    v79 = &(*v77)[v92 & 0x3FF];
    v80 = *(_QWORD *)(*((_QWORD *)&v90 + 1) + (((*((_QWORD *)&v92 + 1) + (_QWORD)v92) >> 7) & 0x1FFFFFFFFFFFFF8))
        + 4 * ((*((_QWORD *)&v92 + 1) + v92) & 0x3FF);
    if (v79 != (float *)v80)
    {
      v81 = &(*v77)[v92 & 0x3FF];
      while (1)
      {
        if ((char *)++v81 - (char *)v78 == 4096)
        {
          v82 = v77[1];
          ++v77;
          v78 = v82;
          v81 = v82;
        }
        if (v81 == (float *)v80)
          break;
        if (*v79 < *v81)
          v79 = v81;
      }
    }
    v83 = *v79;
    *((_QWORD *)&v92 + 1) = 0;
    v84 = v91 - *((_QWORD *)&v90 + 1);
    if ((_QWORD)v91 - *((_QWORD *)&v90 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v76);
        v76 = (void **)(*((_QWORD *)&v90 + 1) + 8);
        *((_QWORD *)&v90 + 1) = v76;
        v84 = v91 - (_QWORD)v76;
      }
      while ((_QWORD)v91 - (_QWORD)v76 > 0x10uLL);
    }
    if (v84 >> 3 == 1)
    {
      v85 = 512;
    }
    else
    {
      if (v84 >> 3 != 2)
        goto LABEL_114;
      v85 = 1024;
    }
    *(_QWORD *)&v92 = v85;
LABEL_114:
    v86 = (void **)*((_QWORD *)&v93 + 1);
    *((_QWORD *)&v95 + 1) = 0;
    v87 = v94 - *((_QWORD *)&v93 + 1);
    if ((_QWORD)v94 - *((_QWORD *)&v93 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v86);
        v86 = (void **)(*((_QWORD *)&v93 + 1) + 8);
        *((_QWORD *)&v93 + 1) = v86;
        v87 = v94 - (_QWORD)v86;
      }
      while ((_QWORD)v94 - (_QWORD)v86 > 0x10uLL);
    }
    if (v87 >> 3 == 1)
    {
      v88 = 512;
    }
    else
    {
      if (v87 >> 3 != 2)
      {
LABEL_121:
        *(float *)a3 = v43;
        *(float *)(a3 + 4) = v75;
        *(float *)(a3 + 8) = v83;
        *(_BYTE *)(a3 + 64) = 1;
        sub_100B4A48C(a1, (uint64_t)v89);
        sub_100B4D2B0((_QWORD *)(a3 + 72), (uint64_t)v89);
        sub_10047F25C(v89);
        sub_100412390(&v90);
        sub_100412390(&v93);
        sub_100412390(buf);
        return;
      }
      v88 = 1024;
    }
    *(_QWORD *)&v95 = v88;
    goto LABEL_121;
  }
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021737A0);
  v6 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLRobustSlopeEstimator given only %zd bins", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021737A0);
    v8 = *(_QWORD *)(a1 + 72);
    LODWORD(v93) = 134217984;
    *(_QWORD *)((char *)&v93 + 4) = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "CLRobustSlopeEstimator given only %zd bins", (size_t)&v93);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "CLPressureStats CLRobustSlopeEstimator::computeStats(int)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_100B4B224(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10047F25C((_QWORD *)(v1 + 72));
  _Unwind_Resume(a1);
}

void sub_100B4B27C(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  float *v5;
  unint64_t v6;
  float v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t **v17;
  float v18;
  float v19;
  uint64_t *v20;
  NSObject *v21;
  uint64_t **v22;
  uint64_t v23;
  int v24;
  uint64_t **v25;
  int v26;
  double v27;
  float v28;
  uint64_t **v29;
  uint64_t *v30;
  NSObject *v31;
  unint64_t v32;
  float v33;
  float v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  float v38;
  float v39;
  int v40;
  const char *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t **v44;
  unint64_t v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  double v49;
  const char *v50;
  double v51;
  _BYTE v52[12];
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  double v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  double v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  double v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  int v70;
  uint8_t buf[32];
  _BYTE v72[20];
  __int16 v73;
  double v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  double v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  int v82;

  v4 = a1 + 8;
  v5 = &a2->n128_f32[3];
  sub_1000BFB54((_QWORD *)(a1 + 8), &a2->n128_f32[3]);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 >= 0x14)
  {
    v7 = *v5;
    v8 = (int)*v5;
    if (*(_DWORD *)(a1 + 104) <= v8 && *(_DWORD *)(a1 + 108) >= v8)
    {
      v9 = *(_QWORD *)(a1 + 40);
      v10 = v6 - 1;
      v11 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + (((v10 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v10 + v9) & 0x3FF))
          - *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + ((v9 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v9 & 0x3FF));
      if (v11 != 0.0)
      {
        LODWORD(v51) = (int)*v5;
        v12 = *(_QWORD *)(a1 + 64);
        if (!v12)
          goto LABEL_15;
        v13 = a1 + 64;
        do
        {
          v14 = *(_DWORD *)(v12 + 32);
          v15 = v14 < v8;
          if (v14 >= v8)
            v16 = (uint64_t *)v12;
          else
            v16 = (uint64_t *)(v12 + 8);
          if (!v15)
            v13 = v12;
          v12 = *v16;
        }
        while (*v16);
        if (v13 == a1 + 64 || *(_DWORD *)(v13 + 32) > v8)
        {
LABEL_15:
          *(_OWORD *)v72 = 0u;
          memset(buf, 0, sizeof(buf));
          *(_QWORD *)v52 = &v51;
          v17 = sub_100B4C6A0((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_101B9EB60, (_DWORD **)v52);
          sub_100B4D558(v17 + 5, (uint64_t)buf);
          sub_1004A4854(buf);
          *(_QWORD *)buf = &v51;
          *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_101B9EB60, (unsigned int **)buf)
          + 8) = 0;
          v8 = LODWORD(v51);
          v7 = *v5;
        }
        v18 = powf(0.2, v11 * 0.05);
        if (v11 >= 0.0)
        {
          v19 = v18;
          ++v8;
        }
        else
        {
          v19 = powf(0.2, v11 * -0.05);
        }
        *(_QWORD *)buf = &v51;
        if (*((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_101B9EB60, (unsigned int **)buf)+ 8) == 30&& (float)((float)(1.0 - v19) * 2147500000.0) > (float)rand())
        {
          *(_QWORD *)buf = &v51;
          v20 = sub_100136FD4((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
          --*((_DWORD *)v20 + 8);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_1021737A0);
          v21 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
          {
            *(_QWORD *)buf = &v51;
            v22 = sub_100B4C6A0((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v23 = *(_QWORD *)(*(uint64_t *)((char *)v22[6] + (((unint64_t)v22[9] >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * v22[9]);
            *(_QWORD *)buf = &v51;
            v24 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_101B9EB60, (unsigned int **)buf)+ 8);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "PopSampleTime";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v23;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = "CalibrationBinCount";
            *(_WORD *)v72 = 1024;
            *(_DWORD *)&v72[2] = v24;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%d", buf, 0x26u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD70 != -1)
              dispatch_once(&qword_10229FD70, &stru_1021737A0);
            v43 = qword_10229FD78;
            *(_QWORD *)v52 = &v51;
            v44 = sub_100B4C6A0((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_101B9EB60, (_DWORD **)v52);
            v45 = *(_QWORD *)(*(uint64_t *)((char *)v44[6] + (((unint64_t)v44[9] >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * v44[9]);
            *(_QWORD *)v52 = &v51;
            v46 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_101B9EB60, (unsigned int **)v52)+ 8);
            *(_DWORD *)v52 = 136315906;
            *(_QWORD *)&v52[4] = "PopSampleTime";
            v53 = 2048;
            v54 = v45;
            v55 = 2080;
            v56 = "CalibrationBinCount";
            v57 = 1024;
            LODWORD(v58) = v46;
            LODWORD(v49) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 2, "%s,%f,%s,%d", v52, v49, v50, LODWORD(v51));
            v48 = (uint8_t *)v47;
            sub_100512490("Generic", 1, 0, 2, "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)", "%s\n", v47);
            if (v48 != buf)
              free(v48);
          }
          *(_QWORD *)buf = &v51;
          v25 = sub_100B4C6A0((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          *(int64x2_t *)(v25 + 9) = vaddq_s64(*(int64x2_t *)(v25 + 9), (int64x2_t)xmmword_101B9DFC0);
          sub_1004A57E8((uint64_t)(v25 + 5), 1);
        }
        *(_QWORD *)buf = &v51;
        v26 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_101B9EB60, (unsigned int **)buf)+ 8);
        v27 = a2->n128_f64[0];
        if (v26 < 1 || v27 - *(float *)a1 > (float)((float)((float)((float)v8 - v7) / v11) / (float)(30 - v26)))
        {
          v28 = v27;
          *(float *)a1 = v28;
          *(_QWORD *)buf = &v51;
          v29 = sub_100B4C6A0((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          sub_100B4BBA8(v29 + 5, a2);
          *(_QWORD *)buf = &v51;
          v30 = sub_100136FD4((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
          ++*((_DWORD *)v30 + 8);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_1021737A0);
          v31 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
          {
            v32 = a2->n128_u64[0];
            v34 = a2->n128_f32[2];
            v33 = a2->n128_f32[3];
            *(_QWORD *)buf = &v51;
            v35 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_101B9EB60, (unsigned int **)buf)+ 8);
            *(_DWORD *)buf = 136317442;
            *(_QWORD *)&buf[4] = "CalibrationSampleTime";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v32;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = "CalibrationSamplePressure";
            *(_WORD *)v72 = 2048;
            *(double *)&v72[2] = v34;
            *(_WORD *)&v72[10] = 2080;
            *(_QWORD *)&v72[12] = "CalibrationSampleTemperature";
            v73 = 2048;
            v74 = v33;
            v75 = 2080;
            v76 = "CalibrationTemperatureRate";
            v77 = 2048;
            v78 = v11;
            v79 = 2080;
            v80 = "CalibrationBinCount";
            v81 = 1024;
            v82 = v35;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f,%s,%f,%s,%f,%s,%d", buf, 0x62u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD70 != -1)
              dispatch_once(&qword_10229FD70, &stru_1021737A0);
            v36 = qword_10229FD78;
            v37 = a2->n128_u64[0];
            v39 = a2->n128_f32[2];
            v38 = a2->n128_f32[3];
            *(_QWORD *)v52 = &v51;
            v40 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_101B9EB60, (unsigned int **)v52)+ 8);
            *(_DWORD *)v52 = 136317442;
            *(_QWORD *)&v52[4] = "CalibrationSampleTime";
            v53 = 2048;
            v54 = v37;
            v55 = 2080;
            v56 = "CalibrationSamplePressure";
            v57 = 2048;
            v58 = v39;
            v59 = 2080;
            v60 = "CalibrationSampleTemperature";
            v61 = 2048;
            v62 = v38;
            v63 = 2080;
            v64 = "CalibrationTemperatureRate";
            v65 = 2048;
            v66 = v11;
            v67 = 2080;
            v68 = "CalibrationBinCount";
            v69 = 1024;
            v70 = v40;
            LODWORD(v49) = 98;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "%s,%f,%s,%f,%s,%f,%s,%f,%s,%d", v52, v49, v50, v51);
            v42 = (uint8_t *)v41;
            sub_100512490("Generic", 1, 0, 2, "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)", "%s\n", v41);
            if (v42 != buf)
              free(v42);
          }
        }
        v9 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 48) - 1;
      }
      *(_QWORD *)(a1 + 40) = v9 + 1;
      *(_QWORD *)(a1 + 48) = v10;
      sub_1004128C0(v4, 1);
    }
  }
}

void sub_100B4BB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_1004A4854(&a27);
  _Unwind_Resume(a1);
}

__n128 sub_100B4BBA8(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B4D794(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100B4BC30(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  *(_DWORD *)a1 = 0;
  v2 = *(void ***)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 24);
      v2 = (void **)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 40) = v6;
  }
  sub_100B4C4F8(a1 + 56, *(_QWORD **)(a1 + 64));
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = *(_QWORD **)(a1 + 88);
  v7 = (_QWORD *)(a1 + 88);
  *(v7 - 2) = 0;
  sub_100008848((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *v7 = 0;
  v7[1] = 0;
}

uint64_t sub_100B4BCD8(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = (uint64_t *)(*(_QWORD *)v7 + 8 * (v4 & 0x1FF));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (uint64_t *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_100B4BD80((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100B4BD6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B4BD80(_QWORD *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(_QWORD *)a2) >> 3);
  return sub_100B4BDB4(a1, a2, a3, v5);
}

_QWORD *sub_100B4BDB4(_QWORD *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100B4BEE0(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v22[0] = v8 + 8 * (v11 >> 9);
  v22[1] = v14;
  result = sub_100B4C468((uint64_t)v22, a4);
  while (v14 != v16)
  {
    v17 = (_QWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_QWORD *)v14 == v17)
    {
      v17 = (_QWORD *)v14;
    }
    else
    {
      v18 = (_QWORD *)v14;
      do
      {
        v19 = *a3++;
        *v18++ = v19;
        if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
        {
          v20 = (uint64_t *)a2[1];
          ++a2;
          a3 = v20;
        }
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result)
      break;
    v21 = v13[1];
    ++v13;
    v14 = v21;
  }
  return result;
}

void sub_100B4BEE0(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100B4C3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100B4C468(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

void sub_100B4C4CC(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100B4C4F8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100B4C4F8(a1, *a2);
    sub_100B4C4F8(a1, a2[1]);
    sub_1004A4854(a2 + 5);
    operator delete(a2);
  }
}

uint64_t sub_100B4C540(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2)
    sub_100B4C58C((_QWORD *)a1, a2, a3);
  return a1;
}

void sub_100B4C578(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B4C58C(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[2];

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5] + a1[4];
  v10 = v8 - v9;
  v11 = a2 > v10;
  v12 = a2 - v10;
  if (v11)
  {
    sub_100B4BEE0(a1, v12);
    v6 = a1[1];
    v7 = a1[2];
    v9 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v9 & 0x1FF);
  v20[0] = v6 + 8 * (v9 >> 9);
  v20[1] = v14;
  result = sub_100B4C468((uint64_t)v20, a2);
  while (v14 != v16)
  {
    v17 = (_QWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_QWORD *)v14 == v17)
    {
      v17 = (_QWORD *)v14;
    }
    else
    {
      v18 = (_QWORD *)v14;
      do
        *v18++ = *a3;
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result)
      break;
    v19 = v13[1];
    ++v13;
    v14 = v19;
  }
  return result;
}

uint64_t **sub_100B4C6A0(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  char *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    v15 = 1;
    sub_1000145B0(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_100B4C790((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_100B4C790(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1004A4854(v2 + 5);
    operator delete(v2);
  }
}

float sub_100B4C7D4(float **a1, float *a2, float **a3, float *a4)
{
  uint64_t v6;
  float **v7;
  float *v8;
  float *v9;
  float *v11;
  float **v12;
  float *v13;
  float *v14;
  float *v15;
  float **v16;
  float *v17;

  v16 = a1;
  v17 = a2;
  if (a2 == a4 || (v6 = a4 - *a3 + (((char *)a3 - (char *)a1) << 7) - (a2 - *a1), v6 <= 0))
    sub_1018FE084();
  v7 = (float **)sub_100B4C8EC((uint64_t)&v16, (unint64_t)v6 >> 1);
  v9 = v8;
  if (v8 != a4)
    sub_100B4C950(v16, v17, v7, v8, a3, a4);
  if ((v6 & 0x8000000000000001) == 1)
    return *v9;
  v11 = v17;
  if (v17 == v9)
  {
    v11 = v9;
  }
  else
  {
    v12 = v16;
    v13 = *v16;
    v14 = v17;
    while (1)
    {
      if ((char *)++v14 - (char *)v13 == 4096)
      {
        v15 = v12[1];
        ++v12;
        v13 = v15;
        v14 = v15;
      }
      if (v14 == v9)
        break;
      if (*v11 < *v14)
        v11 = v14;
    }
  }
  return *v11 + (float)((float)(*v9 - *v11) * 0.5);
}

_QWORD *sub_100B4C8EC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 2);
    if (v4 < 1)
      result -= (unint64_t)(1023 - v4) >> 10;
    else
      result += (unint64_t)v4 >> 10;
  }
  return result;
}

float **sub_100B4C950(float **result, float *a2, float **a3, float *a4, float **a5, float *a6)
{
  float *v6;
  float *v10;
  float *v11;
  uint64_t v12;
  float *v13;
  _QWORD *v14;
  float *v15;
  float **v16;
  uint64_t v17;
  float *v18;
  int v19;
  float v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float **v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  BOOL v34;
  float *v35;
  int v36;
  float *v37;
  float *v38;
  float **v39;
  float *v40;
  float **v41;
  float *v42;
  float *v43;
  BOOL v44;
  float *v45;
  float *v46;
  float *v47;
  float *v48;
  float **v49;
  float *v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float *v56;
  float *v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float *v62;
  float *v63;
  float *v64;
  float *v65;
  float **v66;
  uint64_t v67;
  float v68;
  float v69;
  float **v70;
  float *v71;

  v70 = result;
  v71 = a2;
  if (a6 != a4)
  {
    v6 = a6;
    v10 = a2;
    do
    {
      if (v6 == v10)
        break;
      v11 = *a5;
      v12 = v6 - *a5 + (((char *)a5 - (char *)result) << 7) - (v10 - *result);
      if ((unint64_t)v12 < 2)
        break;
      if (v12 == 3)
      {
        v65 = v10 + 1;
        v66 = v70;
        if ((char *)(v10 + 1) - (char *)*v70 == 4096)
        {
          v66 = v70 + 1;
          v65 = v70[1];
        }
        if (v6 == v11)
        {
          v67 = (uint64_t)*--a5;
          v6 = (float *)(v67 + 4096);
        }
        return (float **)sub_100B4CE64((uint64_t)v70, v10, (uint64_t)v66, v65, (uint64_t)a5, v6 - 1);
      }
      if (v12 == 2)
      {
        if (v6 == v11)
          v6 = *(a5 - 1) + 1024;
        v68 = *(v6 - 1);
        if (v68 < *v10)
        {
          v69 = *a2;
          *a2 = v68;
          *(v6 - 1) = v69;
        }
        return result;
      }
      if (v12 <= 7)
        return sub_100B4CEEC(v70, a2, a5, v6);
      v14 = sub_100B4C8EC((uint64_t)&v70, (unint64_t)v12 >> 1);
      v15 = v13;
      v16 = a5;
      v17 = (uint64_t)v6;
      if (v6 == *a5)
      {
        v16 = a5 - 1;
        v17 = (uint64_t)(*(a5 - 1) + 1024);
      }
      v18 = (float *)(v17 - 4);
      v19 = sub_100B4CE64((uint64_t)v70, v71, (uint64_t)v14, v13, (uint64_t)v16, (float *)(v17 - 4));
      result = v70;
      a2 = v71;
      v20 = *v71;
      if (*v71 < *v15)
      {
LABEL_17:
        v23 = a2 + 1;
        v24 = *result;
        v25 = *result;
        v26 = result;
        if ((char *)(a2 + 1) - (char *)*result == 4096)
        {
          v26 = result + 1;
          v25 = result[1];
          v23 = v25;
        }
        if (v26 < v16 || v26 == v16 && v23 < v18)
        {
          while (1)
          {
            v27 = *v15;
            while (1)
            {
              v28 = *v23;
              if (*v23 >= v27)
                break;
              if ((char *)++v23 - (char *)v25 == 4096)
              {
                v29 = v26[1];
                ++v26;
                v25 = v29;
                v23 = v29;
              }
            }
            v30 = *v16;
            do
            {
              if (v18 == v30)
              {
                v31 = *--v16;
                v30 = v31;
                v18 = v31 + 1024;
              }
              v32 = *--v18;
              v33 = v32;
            }
            while (v32 >= v27);
            if (v26 >= v16 && (v26 != v16 || v23 >= v18))
              break;
            v34 = v15 == v23;
            *v23++ = v33;
            *v18 = v28;
            ++v19;
            if (v34)
              v15 = v18;
            if ((char *)v23 - (char *)v25 == 4096)
            {
              v35 = v26[1];
              ++v26;
              v25 = v35;
              v23 = v35;
            }
          }
        }
        if (v23 != v15)
        {
          v36 = *(_DWORD *)v23;
          if (*v15 < *v23)
          {
            *v23 = *v15;
            *(_DWORD *)v15 = v36;
            ++v19;
          }
        }
        if (v23 == a4)
          return result;
        if (!v19)
        {
          if (v26 > a3 || (v37 = v25, v38 = v23, v39 = v26, v23 > a4) && (v37 = v25, v38 = v23, v39 = v26, v26 == a3))
          {
            v40 = a2;
            v41 = result;
            while (1)
            {
              v42 = v40 + 1;
              if ((char *)(v40 + 1) - (char *)v24 == 4096)
              {
                v43 = v41[1];
                ++v41;
                v24 = v43;
                v42 = v43;
              }
              if (v42 == v23)
                break;
              v44 = *v42 < *v40;
              v40 = v42;
              if (v44)
                goto LABEL_42;
            }
          }
          else
          {
            while (1)
            {
              v45 = v38 + 1;
              if ((char *)(v38 + 1) - (char *)v37 == 4096)
              {
                v46 = v39[1];
                ++v39;
                v37 = v46;
                v45 = v46;
              }
              if (v45 == v6)
                break;
              v44 = *v45 < *v38;
              v38 = v45;
              if (v44)
                goto LABEL_42;
            }
          }
          return result;
        }
LABEL_42:
        if (v26 <= a3)
        {
          if (v23 > a4 && v26 == a3)
          {
            v10 = a2;
            v6 = v23;
            a5 = a3;
          }
          else
          {
            a2 = v23 + 1;
            if ((char *)(v23 + 1) - (char *)v25 == 4096)
            {
              v63 = v26[1];
              ++v26;
              a2 = v63;
            }
            v70 = v26;
            v71 = a2;
            result = v26;
            v10 = a2;
          }
        }
        else
        {
          v10 = a2;
          v6 = v23;
          a5 = v26;
        }
      }
      else
      {
        v21 = *v16;
        while (1)
        {
          if (v18 == v21)
          {
            v22 = *--v16;
            v21 = v22;
            v18 = v22 + 1024;
          }
          if (v71 == --v18)
            break;
          if (*v18 < *v15)
          {
            *v71 = *v18;
            *v18 = v20;
            ++v19;
            goto LABEL_17;
          }
        }
        v10 = v71 + 1;
        v47 = *v70;
        if ((char *)(v71 + 1) - (char *)*v70 == 4096)
        {
          result = v70 + 1;
          v47 = v70[1];
          v10 = v47;
        }
        v48 = *a5;
        v49 = a5;
        v50 = v6;
        if (v6 == *a5)
        {
          v49 = a5 - 1;
          v48 = *(a5 - 1);
          v50 = v48 + 1024;
        }
        v52 = *(v50 - 1);
        v51 = v50 - 1;
        v53 = v52;
        if (v20 >= v52)
        {
          while (v10 != v51)
          {
            v61 = *v10;
            if (v20 < *v10)
            {
              *v10++ = v53;
              *v51 = v61;
              if ((char *)v10 - (char *)v47 == 4096)
              {
                v64 = result[1];
                ++result;
                v47 = v64;
                v10 = v64;
              }
              goto LABEL_68;
            }
            if ((char *)++v10 - (char *)v47 == 4096)
            {
              v62 = result[1];
              ++result;
              v47 = v62;
              v10 = v62;
            }
          }
          return result;
        }
LABEL_68:
        if (v10 == v51)
          return result;
        while (1)
        {
          v54 = *a2;
          while (1)
          {
            v55 = *v10;
            if (v54 < *v10)
              break;
            if ((char *)++v10 - (char *)v47 == 4096)
            {
              v56 = result[1];
              ++result;
              v47 = v56;
              v10 = v56;
            }
          }
          do
          {
            if (v51 == v48)
            {
              v57 = *--v49;
              v48 = v57;
              v51 = v57 + 1024;
            }
            v58 = *--v51;
            v59 = v58;
          }
          while (v54 < v58);
          if (result >= v49 && (result != v49 || v10 >= v51))
            break;
          *v10++ = v59;
          *v51 = v55;
          if ((char *)v10 - (char *)v47 == 4096)
          {
            v60 = result[1];
            ++result;
            v47 = v60;
            v10 = v60;
          }
        }
        if (result > a3 || v10 > a4 && result == a3)
          return result;
        v70 = result;
        v71 = v10;
        a2 = v10;
      }
    }
    while (v6 != a4);
  }
  return result;
}

uint64_t sub_100B4CE64(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;

  v6 = *a4;
  v7 = *a2;
  v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7)
      return 1;
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = *a2;
    if (*a4 >= *a2)
      return 1;
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

float **sub_100B4CEEC(float **result, float *a2, float **a3, float *a4)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float **v9;
  float *v10;
  float v11;
  float *v12;

  v4 = (uint64_t)a4;
  if (*a3 == a4)
    v4 = (uint64_t)(*(a3 - 1) + 1024);
  v5 = (float *)(v4 - 4);
  while (a2 != v5)
  {
    if (a2 == a4)
    {
      v7 = a4;
    }
    else
    {
      v6 = *result;
      v7 = a2;
      v8 = a2;
      v9 = result;
      while (1)
      {
        if ((char *)++v8 - (char *)v6 == 4096)
        {
          v10 = v9[1];
          ++v9;
          v6 = v10;
          v8 = v10;
        }
        if (v8 == a4)
          break;
        if (*v8 < *v7)
          v7 = v8;
      }
    }
    if (v7 != a2)
    {
      v11 = *a2;
      *a2 = *v7;
      *v7 = v11;
    }
    if ((char *)++a2 - (char *)*result == 4096)
    {
      v12 = result[1];
      ++result;
      a2 = v12;
    }
  }
  return result;
}

void sub_100B4CF9C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100B4D264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100B4D2B0(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 512;
LABEL_7:
    a1[4] = v8;
  }
  sub_100B4D350(a1);
  result = sub_100B4D4EC((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B4D350(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_10047F604((uint64_t)a1, 0);
    sub_100B4D3C0(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_100B4D42C((uint64_t)a1);
}

uint64_t sub_100B4D3C0(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_100B4D42C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_100B4D4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100B4D42C(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_100B4D558(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 128;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 256;
LABEL_7:
    a1[4] = v8;
  }
  sub_100B4D5F8(a1);
  result = sub_100B4D728((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100B4D5F8(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_1004A57E8((uint64_t)a1, 0);
    sub_1004A5844(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_100B4D668((uint64_t)a1);
}

void sub_100B4D668(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_100B4D728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100B4D668(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_100B4D794(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100B4DA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100B4DAA8(uint64_t a1)
{
  NSObject *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  int v28;
  double v29;
  double v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  int v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  uint8_t buf[4];
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;

  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_1021737C0);
  v2 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(float *)(a1 + 11672);
    v4 = *(float *)(a1 + 11676);
    v5 = *(float *)(a1 + 11680);
    v6 = *(float *)(a1 + 11684);
    v7 = *(float *)(a1 + 11688);
    v8 = *(float *)(a1 + 11692);
    v9 = *(float *)(a1 + 11696);
    v10 = *(float *)(a1 + 11700);
    v11 = *(float *)(a1 + 11704);
    v12 = *(_QWORD *)(a1 + 11728);
    v13 = *(unsigned __int8 *)(a1 + 11720);
    v14 = *(_DWORD *)(a1 + 11708);
    v15 = *(float *)(a1 + 11712);
    v16 = *(float *)(a1 + 11716);
    *(_DWORD *)buf = 134221312;
    v63 = v3;
    v64 = 2048;
    v65 = v4;
    v66 = 2048;
    v67 = v5;
    v68 = 2048;
    v69 = v6;
    v70 = 2048;
    v71 = v7;
    v72 = 2048;
    v73 = v8;
    v74 = 2048;
    v75 = v9;
    v76 = 2048;
    v77 = v10;
    v78 = 2048;
    v79 = v11;
    v80 = 2048;
    v81 = v12;
    v82 = 1024;
    v83 = v13;
    v84 = 1024;
    v85 = v14;
    v86 = 2048;
    v87 = v15;
    v88 = 2048;
    v89 = v16;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "KickFeatures,poseRangeX,%f,poseRangeZ,%f,pose,%f,yawRange,%f,accelXYKickRange,%f,totalAccelZ,%f,rotationZKickRange,%f,ratioAccelXYToRotZKickRange,%f,peakAccel,%f,startTime,%f,isKick,%d,gravityMedianCross,%d,powerVertToHor_2_14,%f,ratioAccelToGyroYZHighFreq,%f", buf, 0x86u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_1021737C0);
    v17 = *(float *)(a1 + 11672);
    v18 = *(float *)(a1 + 11676);
    v19 = *(float *)(a1 + 11680);
    v20 = *(float *)(a1 + 11684);
    v21 = *(float *)(a1 + 11688);
    v22 = *(float *)(a1 + 11692);
    v23 = *(float *)(a1 + 11696);
    v24 = *(float *)(a1 + 11700);
    v25 = *(float *)(a1 + 11704);
    v26 = *(_QWORD *)(a1 + 11728);
    v27 = *(unsigned __int8 *)(a1 + 11720);
    v28 = *(_DWORD *)(a1 + 11708);
    v29 = *(float *)(a1 + 11712);
    v30 = *(float *)(a1 + 11716);
    v34 = 134221312;
    v35 = v17;
    v36 = 2048;
    v37 = v18;
    v38 = 2048;
    v39 = v19;
    v40 = 2048;
    v41 = v20;
    v42 = 2048;
    v43 = v21;
    v44 = 2048;
    v45 = v22;
    v46 = 2048;
    v47 = v23;
    v48 = 2048;
    v49 = v24;
    v50 = 2048;
    v51 = v25;
    v52 = 2048;
    v53 = v26;
    v54 = 1024;
    v55 = v27;
    v56 = 1024;
    v57 = v28;
    v58 = 2048;
    v59 = v29;
    v60 = 2048;
    v61 = v30;
    LODWORD(v33) = 134;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "KickFeatures,poseRangeX,%f,poseRangeZ,%f,pose,%f,yawRange,%f,accelXYKickRange,%f,totalAccelZ,%f,rotationZKickRange,%f,ratioAccelXYToRotZKickRange,%f,peakAccel,%f,startTime,%f,isKick,%d,gravityMedianCross,%d,powerVertToHor_2_14,%f,ratioAccelToGyroYZHighFreq,%f", COERCE_DOUBLE(&v34), v33);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimKickingFeatureCalculator::logFeatures() const", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
}

uint64_t sub_100B4DE0C(uint64_t result)
{
  uint64_t v1;
  int64x2_t v2;
  uint64_t v3;
  uint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v19;
  _DWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  int64x2_t *v29;

  v1 = 0;
  v2 = vdupq_n_s64(1uLL);
  do
  {
    v3 = result + v1;
    *(_QWORD *)v3 = 0x10000000000;
    *(_DWORD *)(v3 + 1032) = 0;
    *(_QWORD *)(result + v1 + 1036) = 1065353216;
    *(int64x2_t *)(result + v1 + 1048) = v2;
    v1 += 1064;
  }
  while (v1 != 3192);
  v4 = 0;
  v5 = vdupq_n_s64(1uLL);
  do
  {
    v6 = (int64x2_t *)(result + v4);
    v6[199].i64[1] = 0x10000000000;
    v6[264].i32[0] = 0;
    *(_QWORD *)(result + 4228 + v4) = 1065353216;
    v6[265] = v5;
    v4 += 1064;
  }
  while (v4 != 2128);
  v7 = 0;
  v8 = vdupq_n_s64(1uLL);
  do
  {
    v9 = (int64x2_t *)(result + v7);
    v9[332].i64[1] = 0x10000000000;
    v9[397].i32[0] = 0;
    *(_QWORD *)(result + 6356 + v7) = 1065353216;
    v9[398] = v8;
    v7 += 1064;
  }
  while (v7 != 2128);
  v10 = 0;
  *(_QWORD *)(result + 7448) = 0x10000000000;
  *(_DWORD *)(result + 8480) = 0;
  *(_QWORD *)(result + 8484) = 1065353216;
  *(int64x2_t *)(result + 8496) = vdupq_n_s64(1uLL);
  v11 = result + 9544;
  do
  {
    v12 = v11 + v10;
    *(_QWORD *)(v11 + v10 - 1032) = 0x10000000000;
    *(_DWORD *)v12 = 0;
    *(_QWORD *)(v12 + 4) = 1065353216;
    *(int64x2_t *)(v12 + 16) = vdupq_n_s64(1uLL);
    v10 += 1064;
  }
  while (v10 != 2128);
  v13 = 0;
  *(_QWORD *)(result + 10640) = 0x10000000000;
  *(_OWORD *)(result + 11672) = 0u;
  *(_OWORD *)(result + 11688) = 0u;
  *(_OWORD *)(result + 11704) = 0u;
  *(_BYTE *)(result + 11720) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(result + 11728) = _Q0;
  v19 = vdupq_n_s64(2uLL);
  *(_DWORD *)(result + 11744) = 0;
  do
  {
    v20 = (_DWORD *)(result + v13);
    v20[258] = 0;
    *(_QWORD *)(result + v13 + 1036) = 1061865576;
    *(int64x2_t *)(result + v13 + 1048) = v19;
    *v20 = 0;
    v13 += 1064;
  }
  while (v13 != 3192);
  v21 = 0;
  v22 = vdupq_n_s64(2uLL);
  do
  {
    v23 = (int64x2_t *)(result + v21);
    v23[264].i32[0] = 0;
    *(_QWORD *)(result + 4228 + v21) = 1061865576;
    v23[265] = v22;
    v23[199].i32[2] = 0;
    v21 += 1064;
  }
  while (v21 != 2128);
  v24 = 0;
  *(_DWORD *)(result + 8480) = 0;
  *(_QWORD *)(result + 8484) = 1061865576;
  *(int64x2_t *)(result + 8496) = vdupq_n_s64(2uLL);
  *(_DWORD *)(result + 7448) = 0;
  v25 = result + 9544;
  do
  {
    v26 = v25 + v24;
    *(_DWORD *)v26 = 0;
    *(_QWORD *)(v26 + 4) = 1061865576;
    *(int64x2_t *)(v26 + 16) = vdupq_n_s64(2uLL);
    *(_DWORD *)(v25 + v24 - 1032) = 0;
    v24 += 1064;
  }
  while (v24 != 2128);
  v27 = 0;
  v28 = vdupq_n_s64(2uLL);
  do
  {
    v29 = (int64x2_t *)(result + v27);
    v29[397].i32[0] = 0;
    *(_QWORD *)(result + 6356 + v27) = 1061865576;
    v29[398] = v28;
    v29[332].i32[2] = 0;
    v27 += 1064;
  }
  while (v27 != 2128);
  *(_DWORD *)(result + 10640) = 0;
  return result;
}

BOOL sub_100B4E030(uint64_t a1, float *a2, double a3, double a4)
{
  unsigned __int16 *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  int v23;
  float v24[9];

  v8 = (unsigned __int16 *)(a1 + 10640);
  sub_100B4E19C(a1 + 3192, a2[6], a2[8]);
  sub_100B61F90(a2 + 9, v24);
  v22 = 1065353216;
  v23 = 0;
  v9 = sub_1005335A4((uint64_t)v24, (float *)&v22);
  sub_100B4E19C(a1 + 5320, v9, v10);
  sub_100B61F90(a2 + 9, v24);
  sub_1005335A4((uint64_t)v24, a2);
  sub_100B4E280((unsigned __int16 *)(a1 + 7448), v11);
  sub_100B4E19C(a1 + 8512, a2[1], a2[2]);
  sub_100B61F90(a2 + 9, v24);
  v12 = sub_1005335A4((uint64_t)v24, a2 + 3);
  v14 = v13;
  sub_100B4E31C(a1, v12, v15, v13);
  v16 = v8[1];
  v17 = *(unsigned int *)(a1 + 10644);
  v18 = *v8;
  if (v18 + v16 >= v17)
    v19 = *(unsigned int *)(a1 + 10644);
  else
    v19 = 0;
  *(float *)&v8[2 * (v18 + v16 - v19) + 4] = v14;
  if (v17 <= v16)
  {
    if (v18 + 1 < v17)
      LOWORD(v17) = 0;
    *v8 = v18 + 1 - v17;
  }
  else
  {
    v8[1] = v16 + 1;
  }
  v20 = *(_DWORD *)(a1 + 11744) + 1;
  *(_DWORD *)(a1 + 11744) = v20;
  *(double *)(a1 + 11736) = a4;
  *(double *)(a1 + 11728) = a3;
  return (v20 & 0x7F) == 0 && sub_100B4E3E0(a1);
}

uint64_t sub_100B4E19C(uint64_t a1, float a2, float a3)
{
  uint64_t v4;
  char v5;
  char v6;
  unsigned __int16 *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v14[2];

  v4 = 0;
  *(float *)v14 = a2;
  *(float *)&v14[1] = a3;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = (unsigned __int16 *)(a1 + 1064 * v4);
    result = sub_100B4EEB0((uint64_t)(v7 + 516), (float *)&v14[v4]);
    v9 = *((_QWORD *)v7 + 132) - 1;
    *((_QWORD *)v7 + 132) = v9;
    if (!v9)
    {
      *((_QWORD *)v7 + 132) = *(_QWORD *)(a1 + 1064 * v4 + 1048);
      v10 = v7[1];
      v11 = *((unsigned int *)v7 + 1);
      v12 = *v7;
      if (v12 + v10 >= v11)
        v13 = *((unsigned int *)v7 + 1);
      else
        v13 = 0;
      *(_DWORD *)&v7[2 * (v12 + v10 - v13) + 4] = *((_DWORD *)v7 + 260);
      if (v11 <= v10)
      {
        if (v12 + 1 < v11)
          LOWORD(v11) = 0;
        *v7 = v12 + 1 - v11;
      }
      else
      {
        v7[1] = v10 + 1;
      }
    }
    v5 = 0;
    v4 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

uint64_t sub_100B4E280(unsigned __int16 *a1, float a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;

  v9 = a2;
  result = sub_100B4EEB0((uint64_t)(a1 + 516), &v9);
  v4 = *((_QWORD *)a1 + 132) - 1;
  *((_QWORD *)a1 + 132) = v4;
  if (!v4)
  {
    *((_QWORD *)a1 + 132) = *((_QWORD *)a1 + 131);
    v5 = a1[1];
    v6 = *((unsigned int *)a1 + 1);
    v7 = *a1;
    if (v7 + v5 >= v6)
      v8 = *((unsigned int *)a1 + 1);
    else
      v8 = 0;
    *(_DWORD *)&a1[2 * (v7 + v5 - v8) + 4] = *((_DWORD *)a1 + 260);
    if (v6 <= v5)
    {
      if (v7 + 1 < v6)
        LOWORD(v6) = 0;
      *a1 = v7 + 1 - v6;
    }
    else
    {
      a1[1] = v5 + 1;
    }
  }
  return result;
}

uint64_t sub_100B4E31C(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v5;
  float *v6;
  unsigned __int16 *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v14[3];

  v5 = 0;
  *(float *)v14 = a2;
  *(float *)&v14[1] = a3;
  *(float *)&v14[2] = a4;
  v6 = (float *)v14;
  do
  {
    v7 = (unsigned __int16 *)(a1 + v5);
    result = sub_100B4EEB0(a1 + v5 + 1032, v6);
    v9 = *(_QWORD *)(a1 + v5 + 1056) - 1;
    *(_QWORD *)(a1 + v5 + 1056) = v9;
    if (!v9)
    {
      *((_QWORD *)v7 + 132) = *((_QWORD *)v7 + 131);
      v10 = v7[1];
      v11 = *((unsigned int *)v7 + 1);
      v12 = *v7;
      if (v12 + v10 >= v11)
        v13 = *((unsigned int *)v7 + 1);
      else
        v13 = 0;
      *(_DWORD *)&v7[2 * (v12 + v10 - v13) + 4] = *((_DWORD *)v7 + 260);
      if (v11 <= v10)
      {
        if (v12 + 1 < v11)
          LOWORD(v11) = 0;
        *v7 = v12 + 1 - v11;
      }
      else
      {
        v7[1] = v10 + 1;
      }
    }
    v5 += 1064;
    ++v6;
  }
  while (v5 != 3192);
  return result;
}

BOOL sub_100B4E3E0(uint64_t a1)
{
  unsigned int v1;
  BOOL v3;
  float v6;
  float v9;
  float v10;

  v1 = *(unsigned __int16 *)(a1 + 3194);
  if (v1 >= 0x100)
  {
    *(_DWORD *)(a1 + 11720) = 0;
    *(_OWORD *)(a1 + 11688) = 0u;
    *(_OWORD *)(a1 + 11704) = 0u;
    *(_OWORD *)(a1 + 11672) = 0u;
    sub_100B4E67C((float32x2_t *)a1);
    sub_100B4E550(a1);
    sub_100B4E778(a1);
    sub_100B4EC00(a1);
    v3 = 0;
    if (*(float *)(a1 + 11672) >= 90.0 || *(float *)(a1 + 11676) >= 90.0)
      goto LABEL_17;
    if (fabsf(*(float *)(a1 + 11680)) >= 60.0 || *(float *)(a1 + 11684) >= 90.0)
      goto LABEL_16;
    v6 = *(float *)(a1 + 11688);
    if (v6 <= 2.0 || v6 >= 25.0)
      goto LABEL_16;
    v3 = 0;
    v9 = *(float *)(a1 + 11696);
    if (v9 <= 2.0)
      goto LABEL_17;
    if (v9 >= 50.0)
      goto LABEL_17;
    if (*(float *)(a1 + 11700) <= 0.4)
      goto LABEL_17;
    v3 = 0;
    v10 = *(float *)(a1 + 11692);
    if (v10 <= 0.05 || v10 >= 20.0 || *(float *)(a1 + 11712) >= 1.6)
      goto LABEL_17;
    if ((*(_DWORD *)(a1 + 11708) - 3) <= 0x1F)
      v3 = *(float *)(a1 + 11716) < 1.7;
    else
LABEL_16:
      v3 = 0;
LABEL_17:
    *(_BYTE *)(a1 + 11720) = v3;
    sub_100B4DAA8(a1);
  }
  return v1 > 0xFF;
}

void sub_100B4E550(uint64_t a1)
{
  unint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float v12;

  if (!*(_WORD *)(a1 + 3194))
  {
    v12 = -INFINITY;
    goto LABEL_15;
  }
  v2 = 0;
  v3 = 0.0;
  v4 = -3.4028e38;
  v5 = 3.4028e38;
  v6 = 0.0;
  do
  {
    v7 = v6;
    v8 = *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 6384), v2);
    v9 = (float *)sub_1004784C4((unsigned __int16 *)(a1 + 5320), v2);
    v6 = atan2f(v8, *v9) * 57.296;
    v10 = v6 - v7;
    if ((float)(v6 - v7) <= 180.0)
    {
      if (v10 >= -180.0)
        goto LABEL_8;
      v11 = 360.0;
    }
    else
    {
      v11 = -360.0;
    }
    v10 = v10 + v11;
LABEL_8:
    v3 = v3 + v10;
    if (v3 > v4)
      v4 = v3;
    if (v3 < v5)
      v5 = v3;
    ++v2;
  }
  while (v2 < *(unsigned __int16 *)(a1 + 3194));
  v12 = v4 - v5;
LABEL_15:
  *(float *)(a1 + 11684) = v12;
}

void sub_100B4E67C(float32x2_t *a1)
{
  unint64_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float v5;
  float32x2_t v6;
  float *v7;
  float *v8;
  float32x2_t v9;
  float v10;
  float v11;

  if (a1[399].i16[1])
  {
    v2 = 0;
    v3 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v4 = (float32x2_t)0x80000000800000;
    v5 = 0.0;
    v6 = (float32x2_t)vdup_n_s32(0x42652EE1u);
    do
    {
      v7 = (float *)sub_1004784C4((unsigned __int16 *)&a1[399], v2);
      v11 = asinf(*v7);
      v8 = (float *)sub_1004784C4((unsigned __int16 *)&a1[532], v2);
      v9 = vmul_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(asinf(*v8)), LODWORD(v11)), v6);
      v5 = v5 + v9.f32[0];
      v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v4), (int8x8_t)v9, (int8x8_t)v4);
      v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v9), (int8x8_t)v9, (int8x8_t)v3);
      ++v2;
    }
    while (v2 < a1[399].u16[1]);
    a1[1459] = vsub_f32(v4, v3);
    v10 = v5 / (float)v2;
  }
  else
  {
    a1[1459] = (float32x2_t)0x7F0000007FLL;
    v10 = 0.0;
  }
  a1[1460].f32[0] = v10;
}

void sub_100B4E778(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  unsigned int v8;
  float v9;
  unsigned int v10;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t i;
  unsigned __int8 v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  char v31;
  _DWORD v32[128];
  _DWORD v33[256];
  float v34[128];
  _DWORD v35[128];
  _DWORD v36[128];
  _DWORD v37[128];

  v2 = atomic_load((unsigned __int8 *)&qword_102306D80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102306D80))
  {
    v29 = sub_100D043B4(50, 0x80uLL, 0.5);
    dword_102306D78 = sub_100D041E0(v29);
    __cxa_guard_release(&qword_102306D80);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_102306D90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_102306D90))
  {
    v30 = sub_100D043B4(50, 0x80uLL, 5.0);
    dword_102306D88 = sub_100D041E0(v30);
    __cxa_guard_release(&qword_102306D90);
  }
  sub_1014022D8(&v31);
  sub_1014022DC((uint64_t)&v31, v37, (unsigned __int16 *)a1);
  sub_1014022DC((uint64_t)&v31, v36, (unsigned __int16 *)(a1 + 1064));
  sub_1014022DC((uint64_t)&v31, v35, (unsigned __int16 *)(a1 + 2128));
  v4 = 0;
  v5 = 0.0;
  do
  {
    v6 = *(float *)&v37[v4] + *(float *)&v36[v4];
    if ((float)(v6 + *(float *)&v35[v4]) > v5)
      v5 = v6 + *(float *)&v35[v4];
    v34[v4++] = v6;
  }
  while (v4 != 128);
  *(float *)(a1 + 11688) = sub_100D04400(dword_102306D78, dword_102306D88, (uint64_t)v34);
  *(float *)(a1 + 11692) = sub_100D04400(0, 127, (uint64_t)v35);
  *(float *)(a1 + 11704) = v5;
  v7 = sub_100D043B4(50, 0x80uLL, 2.0);
  v8 = sub_100D041E0(v7);
  v9 = sub_100D043B4(50, 0x80uLL, 14.0);
  v10 = sub_100D041E0(v9);
  v11 = 0.0;
  v12 = 0.0;
  if (v8 <= v10)
  {
    v13 = (int)v8;
    v14 = (int)v8;
    do
      v11 = v11 + *(float *)&v35[v14++];
    while (v14 <= (int)v10);
    v15 = 0.0;
    v16 = (int)v8;
    do
      v15 = v15 + *(float *)&v37[v16++];
    while (v16 <= (int)v10);
    v17 = 0.0;
    do
      v17 = v17 + *(float *)&v36[v13++];
    while (v13 <= (int)v10);
    v12 = (float)(v15 + v17) * 0.5;
  }
  v18 = v11 / v12;
  if (v12 <= 0.2)
    v18 = 1.0;
  *(float *)(a1 + 11712) = v18;
  sub_1014022DC((uint64_t)&v31, v34, (unsigned __int16 *)(a1 + 7448));
  v19 = sub_100D04400(dword_102306D78, dword_102306D88, (uint64_t)v34);
  *(float *)(a1 + 11696) = v19;
  v20 = 0.0;
  if (v19 > 0.0000011921)
    v20 = *(float *)(a1 + 11688) / v19;
  *(float *)(a1 + 11700) = v20;
  sub_1014022DC((uint64_t)&v31, v33, (unsigned __int16 *)(a1 + 8512));
  sub_1014022DC((uint64_t)&v31, v32, (unsigned __int16 *)(a1 + 9576));
  for (i = 0; i != 128; i += 4)
  {
    *(float32x4_t *)&v33[i + 128] = vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)&v37[i], *(float32x4_t *)&v37[i]), vmulq_f32(*(float32x4_t *)&v36[i], *(float32x4_t *)&v36[i])), vmulq_f32(*(float32x4_t *)&v35[i], *(float32x4_t *)&v35[i]));
    *(float32x4_t *)&v34[i] = vaddq_f32(vmulq_f32(*(float32x4_t *)&v33[i], *(float32x4_t *)&v33[i]), vmulq_f32(*(float32x4_t *)&v32[i], *(float32x4_t *)&v32[i]));
  }
  v22 = atomic_load((unsigned __int8 *)&qword_102306DA0);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_102306DA0))
  {
    qword_102306D98 = vcvtas_u32_f32(sub_100D043B4(50, 0x80uLL, 10.0));
    __cxa_guard_release(&qword_102306DA0);
  }
  v23 = qword_102306D98;
  v24 = 0.0;
  v25 = 0.0;
  v26 = 0.0;
  if ((unint64_t)qword_102306D98 <= 0x7F)
  {
    v27 = qword_102306D98;
    do
      v25 = v25 + v34[v27++];
    while (v27 != 128);
    v26 = 0.0;
    do
      v26 = v26 + *(float *)&v33[v23++ + 128];
    while (v23 != 128);
  }
  v28 = v26 / v25;
  if (v25 > 0.0)
    v24 = v28;
  *(float *)(a1 + 11716) = v24;
}

void sub_100B4EBC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102306DA0);
  _Unwind_Resume(a1);
}

void sub_100B4EC00(uint64_t a1)
{
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  float v15;
  char *v16;
  uint64_t v17;
  int v18;
  float v19;
  void *__p;
  char *v21;
  char *v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  if (*(_WORD *)(a1 + 3194))
  {
    v2 = 0;
    do
    {
      v3 = (_DWORD *)sub_1004784C4((unsigned __int16 *)(a1 + 10640), v2);
      v4 = v3;
      v5 = v21;
      if (v21 >= v22)
      {
        v7 = (char *)__p;
        v8 = (v21 - (_BYTE *)__p) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_100259694();
        v10 = v22 - (_BYTE *)__p;
        if ((v22 - (_BYTE *)__p) >> 1 > v9)
          v9 = v10 >> 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)sub_100260634((uint64_t)&v22, v11);
          v7 = (char *)__p;
          v5 = v21;
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[4 * v8];
        *(_DWORD *)v13 = *v4;
        v6 = v13 + 4;
        while (v5 != v7)
        {
          v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        __p = v13;
        v21 = v6;
        v22 = &v12[4 * v11];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_DWORD *)v21 = *v3;
        v6 = v5 + 4;
      }
      v21 = v6;
      ++v2;
    }
    while (v2 < *(unsigned __int16 *)(a1 + 3194));
  }
  v15 = sub_100B4EDE0((uint64_t)&__p);
  v16 = (char *)__p;
  if (*(_WORD *)(a1 + 3194) == 1)
  {
    *(_DWORD *)(a1 + 11708) = 0;
    if (!v16)
      return;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *((float *)__p + v17);
      if (v19 > v15 && *((float *)__p + v17 + 1) <= v15)
      {
        ++v18;
        ++v17;
      }
      else
      {
        ++v17;
        if (v19 <= v15 && *((float *)__p + v17) > v15)
          ++v18;
      }
    }
    while (v17 != *(unsigned __int16 *)(a1 + 3194) - 1);
    *(_DWORD *)(a1 + 11708) = v18;
  }
  v21 = v16;
  operator delete(v16);
}

void sub_100B4EDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_100B4EDE0(uint64_t a1)
{
  float v1;
  float *v2;
  unint64_t v3;
  float *v4;
  float v5;
  float *v7;
  float *v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_10027205C(&v7, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v2 = v7;
  v3 = (unint64_t)(v8 - v7) >> 1;
  v4 = &v7[v3];
  if (v4 != v8)
  {
    sub_10053EEC0(v7, v4, v8, v1);
    v2 = v7;
    v3 = (unint64_t)(v8 - v7) >> 1;
  }
  v5 = v2[v3];
  v8 = v2;
  operator delete(v2);
  return v5;
}

void sub_100B4EE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100B4EE84(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_100B4EEB0(uint64_t result, float *a2)
{
  int v2;
  int v3;
  float v4;

  v2 = *(_DWORD *)result;
  v3 = *(_DWORD *)result + 1;
  *(_DWORD *)result = v3;
  if (v2 > 2)
    v4 = *(float *)(result + 8) - (float)(*(float *)(result + 4) * (float)(*(float *)(result + 8) - *a2));
  else
    v4 = (float)(1.0 / (float)v3) * (float)(*a2 + (float)(*(float *)(result + 8) * (float)v2));
  *(float *)(result + 8) = v4;
  return result;
}

NSDictionary *__cdecl sub_100B4F5F0(id a1)
{
  return (NSDictionary *)&off_10221FF48;
}

void sub_100B4F830(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

id sub_100B4FDB8(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  _QWORD v7[5];
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102173980);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 1026;
    v14 = a2;
    v15 = 2050;
    v16 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setAlwaysBeaconWildState\", \"isBeaconing\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x22u);
  }
  v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B4FF04;
  v7[3] = &unk_102148B10;
  v8 = a2;
  v7[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(v5, "async:", v7);
}

_QWORD *sub_100B4FF04(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  double v14;
  uint64_t v15;
  void *v16;
  double v17;
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];

  v1 = result;
  if (*((_BYTE *)result + 40))
  {
    *(_QWORD *)(result[4] + 256) = +[NSDate now](NSDate, "now");
    v2 = v1[4];
    v3 = *(void **)(v2 + 56);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100B500E8;
    v21[3] = &unk_10212BB58;
    v21[4] = v2;
    objc_msgSend(v3, "setHandler:", v21);
    v4 = v1[4];
    v5 = *(void **)(v4 + 56);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 496) + 104))(v4 + 496);
    objc_msgSend(v5, "setNextFireDelay:");
    v6 = v1[4];
    v7 = *(void **)(v6 + 64);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100B5012C;
    v20[3] = &unk_10212BB58;
    v20[4] = v6;
    objc_msgSend(v7, "setHandler:", v20);
    v8 = v1[4];
    v9 = *(void **)(v8 + 64);
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 496) + 120))(v8 + 496);
    objc_msgSend(v9, "setNextFireDelay:");
    v10 = v1[4];
    v11 = *(void **)(v10 + 72);
    if (v11)
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100B50194;
      v19[3] = &unk_10212BB58;
      v19[4] = v10;
      objc_msgSend(v11, "setHandler:", v19);
      v12 = v1[4];
      v13 = *(void **)(v12 + 72);
      v14 = (*(double (**)(uint64_t))(*(_QWORD *)(v12 + 496) + 112))(v12 + 496);
      objc_msgSend(v13, "setNextFireDelay:interval:", v14, (*(double (**)(uint64_t))(*(_QWORD *)(v1[4] + 496) + 112))(v1[4] + 496));
      v10 = v1[4];
    }
    result = *(_QWORD **)(v10 + 80);
    if (result)
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100B501E8;
      v18[3] = &unk_10212BB58;
      v18[4] = v10;
      objc_msgSend(result, "setHandler:", v18);
      v15 = v1[4];
      v16 = *(void **)(v15 + 80);
      v17 = (*(double (**)(uint64_t))(*(_QWORD *)(v15 + 496) + 136))(v15 + 496);
      return objc_msgSend(v16, "setNextFireDelay:interval:", v17, (*(double (**)(uint64_t))(*(_QWORD *)(v1[4] + 496) + 136))(v1[4] + 496));
    }
  }
  else
  {
    *(_BYTE *)(result[4] + 98) = 0;
    *(_BYTE *)(result[4] + 99) = 0;
  }
  return result;
}

id sub_100B500E8(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 344) = 0;
  *(_BYTE *)(v1 + 352) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 0;
  *(_DWORD *)(v1 + 336) = 0;
  *(_QWORD *)(v1 + 364) = 0;
  *(_QWORD *)(v1 + 356) = 0;
  *(_QWORD *)(v1 + 384) = 0;
  *(_QWORD *)(v1 + 392) = 0;
  *(_QWORD *)(v1 + 376) = 0;
  *(_DWORD *)(v1 + 400) = 0;
  v2 = *(_BYTE **)(a1 + 32);
  if (v2[97])
    return objc_msgSend(v2, "terminateBeaconing");
  else
    return _objc_msgSend(v2, "submitEmptyResult");
}

id sub_100B5012C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 432) = 0;
  *(_BYTE *)(v2 + 440) = 0;
  *(_QWORD *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 416) = 0;
  *(_DWORD *)(v2 + 424) = 0;
  *(_QWORD *)(v2 + 452) = 0;
  *(_QWORD *)(v2 + 444) = 0;
  *(_QWORD *)(v2 + 464) = 0;
  *(_QWORD *)(v2 + 472) = 0;
  *(_DWORD *)(v2 + 480) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 102) = 1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "invalidate");
  return _objc_msgSend(*(id *)(a1 + 32), "queryForBAResult");
}

_QWORD *sub_100B50194(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if (!*(_BYTE *)(v1 + 100))
  {
    v2 = result;
    *(_BYTE *)(v1 + 100) = 1;
    *(_QWORD *)(result[4] + 264) = +[NSDate now](NSDate, "now");
    return _objc_msgSend((id)v2[4], "queryForBAResult");
  }
  return result;
}

void sub_100B501E8(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  _QWORD v12[5];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 98))
  {
    if (!*(_BYTE *)(v1 + 105))
    {
      v3 = *(void **)(v1 + 88);
      if (v3)
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_100B504C4;
        v12[3] = &unk_10212BB58;
        v12[4] = v1;
        objc_msgSend(v3, "setHandler:", v12);
        v4 = *(_QWORD *)(a1 + 32);
        v5 = *(void **)(v4 + 88);
        (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 496) + 32))(v4 + 496);
        objc_msgSend(v5, "setNextFireDelay:");
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 105) = 1;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102173960);
        v6 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wigo,on,BlueAvengerCrossValidation", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102173960);
          v11 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,BlueAvengerCrossValidation", &v11, 2);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 2, "-[CLSubHarvesterAvengerCrossValidation receiveLocation:]_block_invoke", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
        AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_102173800);
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 776);
        *(_DWORD *)buf = 0;
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v7 + 48))(v7, buf);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102173980);
        v8 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289282;
          v14 = 0;
          v15 = 2082;
          v16 = "";
          v17 = 2050;
          v18 = 11;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cross validation proactive location request\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
        }
      }
    }
  }
}

id sub_100B504C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "terminateActiveLocationRequest");
}

NSDictionary *__cdecl sub_100B504CC(id a1)
{
  return (NSDictionary *)&off_10221FF70;
}

uint64_t sub_100B50530(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_100B50590(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

_QWORD *sub_100B50758(_QWORD *result, char a2)
{
  id v2;
  _QWORD v3[4];
  char v4;

  if ((a2 & 1) == 0)
  {
    v2 = objc_msgSend(*(id *)(result[4] + 8), "silo");
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100B507B8;
    v3[3] = &unk_102146CB8;
    v4 = 0;
    return objc_msgSend(v2, "async:", v3);
  }
  return result;
}

void sub_100B507B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102173980);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
  {
    v3 = *(unsigned __int8 *)(a1 + 32);
    v6 = 68289538;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = v3;
    v12 = 2050;
    v13 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to disable setAlwaysBeaconWildState\", \"isBeaconing\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x22u);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102173980);
  }
  v4 = qword_1022A0208;
  if (os_signpost_enabled((os_log_t)qword_1022A0208))
  {
    v5 = *(unsigned __int8 *)(a1 + 32);
    v6 = 68289538;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 1026;
    v11 = v5;
    v12 = 2050;
    v13 = 11;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to disable setAlwaysBeaconWildState", "{\"msg%{public}.0s\":\"failed to disable setAlwaysBeaconWildState\", \"isBeaconing\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x22u);
  }
}

void sub_100B51BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100B51BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  _QWORD v7[8];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B51C38;
  v7[3] = &unk_102173828;
  v7[6] = a3;
  v7[7] = a4;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7[4] = a2;
  v7[5] = v5;
  return objc_msgSend(v4, "enumerateObjectsUsingBlock:", v7);
}

id *sub_100B51C38(id *result, uint64_t a2, id a3)
{
  id *v3;
  double v4;
  uint64_t v5;

  v3 = result;
  if (result[6] == a3)
  {
    *(_BYTE *)result[7] = 1;
  }
  else
  {
    result = (id *)objc_msgSend(result[4], "distanceFromLocation:", a2);
    v5 = *((_QWORD *)v3[5] + 1);
    if (v4 > *(double *)(v5 + 24))
      *(double *)(v5 + 24) = v4;
  }
  return result;
}

void sub_100B52438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_100B52458(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  NSDate *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  int v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  v6 = objc_msgSend(a2, "lastPublishDate");
  if (a3 || !v6)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102173980);
    v12 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v15 = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2050;
      v20 = 11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"unable to retrieve last publish date\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102173980);
    }
    v13 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v15 = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2050;
      v20 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unable to retrieve last publish date", "{\"msg%{public}.0s\":\"unable to retrieve last publish date\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
    }
    v14 = *(void **)(a1 + 32);
    v10 = +[NSDate distantPast](NSDate, "distantPast");
    v11 = v14;
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102173980);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v15 = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2050;
      v20 = 11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"able to retrieve last publish date\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102173980);
    }
    v8 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v15 = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2050;
      v20 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "able to retrieve last publish date", "{\"msg%{public}.0s\":\"able to retrieve last publish date\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
    }
    v9 = *(void **)(a1 + 32);
    v10 = (NSDate *)objc_msgSend(a2, "lastPublishDate");
    v11 = v9;
  }
  objc_msgSend(v11, "setRecentLastPublishDate:", v10);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100B52768(uint64_t a1, void *a2)
{
  NSObject *v4;
  double v5;
  int v6;
  double v7;
  int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;

  if (a2)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102173980);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(a2, "coordinate");
      v6 = (int)v5;
      objc_msgSend(a2, "coordinate");
      v8 = (int)v7;
      objc_msgSend(a2, "horizontalAccuracy");
      v14[0] = 68290051;
      v14[1] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1025;
      v18 = v6;
      v19 = 1025;
      v20 = v8;
      v21 = 1025;
      v22 = (int)v9;
      v23 = 2050;
      v24 = 11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fetch estimated device location at BA location time\", \"lat\":%{private}d, \"lng\":%{private}d, \"ucc\":%{private}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v14, 0x2Eu);
    }
    objc_msgSend(a2, "coordinate");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 52) = v10;
    objc_msgSend(a2, "coordinate");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 60) = v11;
    objc_msgSend(a2, "horizontalAccuracy");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 68) = v12;
    objc_msgSend(objc_msgSend(a2, "timestamp"), "timeIntervalSinceReferenceDate");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 124) = v13;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100B52904(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  NSObject *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  id v55;
  double *v56;
  _QWORD v57[5];
  _OWORD v58[8];
  _OWORD v59[2];
  _QWORD v60[30];
  _QWORD v61[30];
  _QWORD v62[13];
  _QWORD v63[13];
  uint8_t buf[32];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];

  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 68) != -1.0)
  {
LABEL_15:
    objc_msgSend(*(id *)(a1 + 40), "calculateDispersion:", objc_msgSend(*(id *)(a1 + 40), "getDeviceLocationsWithinBeaconingInterval"));
    v14 = v13;
    objc_msgSend(*(id *)(a1 + 40), "calculateDispersion:", *(_QWORD *)(a1 + 56));
    v16 = v15;
    objc_msgSend(*(id *)(a1 + 48), "distanceFromLocation:", objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 52), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 60)));
    v18 = v17;
    v19 = *(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(v19 + 97))
    {
      objc_msgSend(*(id *)(v19 + 264), "timeIntervalSinceDate:", *(_QWORD *)(v19 + 256));
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 288) = v20;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 64), "timestamp"), "timeIntervalSinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 256));
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 280) = v21;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 264), "timeIntervalSinceDate:", objc_msgSend(*(id *)(a1 + 48), "timestamp"));
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 296) = v22;
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 103) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 272), "compare:", objc_msgSend(*(id *)(a1 + 48), "timestamp")) == (id)-1;
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102173980);
      v23 = qword_1022A0208;
      v24 = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO);
      v19 = *(_QWORD *)(a1 + 40);
      if (v24)
      {
        v25 = (int)*(double *)(v19 + 288);
        v26 = (int)*(double *)(v19 + 280);
        v27 = (int)*(double *)(v19 + 296);
        *(_QWORD *)buf = 68290051;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1025;
        *(_DWORD *)&buf[20] = v25;
        *(_WORD *)&buf[24] = 1025;
        *(_DWORD *)&buf[26] = v26;
        *(_WORD *)&buf[30] = 1025;
        LODWORD(v65) = v27;
        WORD2(v65) = 2050;
        *(_QWORD *)((char *)&v65 + 6) = 11;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"compute latency\", \"Time to download since beaconing start\":%{private}d, \"Time to observe since beaconing start\":%{private}d, \"location age\":%{private}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x2Eu);
        v19 = *(_QWORD *)(a1 + 40);
      }
    }
    if (*(_BYTE *)(v19 + 98))
    {
      *(_QWORD *)(v19 + 320) = v16;
      objc_msgSend(*(id *)(a1 + 48), "horizontalAccuracy");
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 328) = v28;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 336) = objc_msgSend(*(id *)(a1 + 56), "count");
      *(double *)(*(_QWORD *)(a1 + 40) + 344) = v18;
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 352) = 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 356) = CLMotionActivity::isMoving((CLMotionActivity *)(*(_QWORD *)(a1 + 40)
                                                                                                + 112));
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 360) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 68);
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 368) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 248);
      v29 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 256), "laterDate:", objc_msgSend(*(id *)(a1 + 48), "timestamp"));
      v30 = *(_QWORD *)(a1 + 40);
      if (v29 == *(id *)(v30 + 256))
      {
        v34 = 0.0;
      }
      else
      {
        v31 = objc_msgSend(*(id *)(v30 + 264), "laterDate:", objc_msgSend(*(id *)(a1 + 48), "timestamp"));
        v32 = objc_msgSend(*(id *)(a1 + 48), "timestamp");
        v30 = *(_QWORD *)(a1 + 40);
        if (v31 == v32)
        {
          v34 = *(double *)(v30 + 288);
        }
        else
        {
          objc_msgSend(*(id *)(v30 + 256), "timeIntervalSinceDate:", objc_msgSend(*(id *)(a1 + 48), "timestamp"));
          v34 = fabs(v33);
          v30 = *(_QWORD *)(a1 + 40);
        }
      }
      *(double *)(v30 + 376) = v34;
      *(double *)(*(_QWORD *)(a1 + 40) + 384) = (double)(int)(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)
                                                                          + 52)
                                                              * 10.0)
                                                / 10.0;
      *(double *)(*(_QWORD *)(a1 + 40) + 392) = (double)(int)(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)
                                                                          + 60)
                                                              * 10.0)
                                                / 10.0;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 400) = objc_msgSend(*(id *)(a1 + 40), "getTimeOfDayForAnalytics");
      v56 = *(double **)(a1 + 40);
      v62[0] = CFSTR("baDispersion");
      v63[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v56[40]);
      v62[1] = CFSTR("baEstimatedHorizontalAccuracy");
      v63[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 328));
      v62[2] = CFSTR("countBALocations");
      v63[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 336));
      v62[3] = CFSTR("deltaFindMyDistance");
      v63[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 344));
      v62[4] = CFSTR("deviceFound");
      v63[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 352));
      v62[5] = CFSTR("deviceMotionState");
      v63[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 356));
      v62[6] = CFSTR("findMyEstimatedHorizontalAccuracy");
      v63[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 360));
      v62[7] = CFSTR("sigEnv");
      v63[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 368));
      v62[8] = CFSTR("timeToFindLatency");
      v63[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 376));
      v62[9] = CFSTR("truncatedDeviceLocationLatitude");
      v63[9] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 384));
      v62[10] = CFSTR("truncatedDeviceLocationLongitude");
      v63[10] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 392));
      v62[11] = CFSTR("isActiveVisit");
      v63[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 101));
      v62[12] = CFSTR("timeOfDay");
      v63[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 400));
      objc_msgSend(v56, "logCoreAnalytics:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v63, v62, 13));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 72), "invalidate");
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 97) = 1;
    }
    else if (*(_BYTE *)(v19 + 102))
    {
      *(_QWORD *)(v19 + 408) = v16;
      objc_msgSend(*(id *)(a1 + 48), "horizontalAccuracy");
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 416) = v35;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 424) = objc_msgSend(*(id *)(a1 + 56), "count");
      *(double *)(*(_QWORD *)(a1 + 40) + 432) = v18;
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 440) = 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 444) = CLMotionActivity::isMoving((CLMotionActivity *)(*(_QWORD *)(a1 + 40)
                                                                                                + 112));
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 448) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 68);
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 456) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 248);
      *(double *)(*(_QWORD *)(a1 + 40) + 464) = (double)(int)(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)
                                                                          + 52)
                                                              * 10.0)
                                                / 10.0;
      *(double *)(*(_QWORD *)(a1 + 40) + 472) = (double)(int)(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)
                                                                          + 60)
                                                              * 10.0)
                                                / 10.0;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 480) = objc_msgSend(*(id *)(a1 + 40), "getTimeOfDayForAnalytics");
      objc_msgSend(*(id *)(a1 + 48), "horizontalAccuracy");
      if (v36 != 0.0)
      {
        objc_msgSend(*(id *)(a1 + 48), "horizontalAccuracy");
        *(double *)(*(_QWORD *)(a1 + 40) + 488) = v18 * 100.0 / v37;
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 272), "timeIntervalSinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 256));
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 304) = v38;
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 104) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 272), "compare:", objc_msgSend(*(id *)(a1 + 64), "timestamp")) == (id)-1;
      v39 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 496) + 120))(*(_QWORD *)(a1 + 40) + 496);
      objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "timestamp"), "timeIntervalSinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 256));
      v41 = v39 - v40;
      v42 = *(double **)(a1 + 40);
      v60[0] = CFSTR("baDispersion");
      v61[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v42[51]);
      v60[1] = CFSTR("baEstimatedHorizontalAccuracy");
      v61[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 416));
      v60[2] = CFSTR("countBALocations");
      v61[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 424));
      v60[3] = CFSTR("deltaFindMyDistance");
      v61[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 432));
      v60[4] = CFSTR("deviceFound");
      v61[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 440));
      v60[5] = CFSTR("deviceMotionState");
      v61[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 444));
      v60[6] = CFSTR("findMyEstimatedHorizontalAccuracy");
      v61[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 448));
      v60[7] = CFSTR("sigEnv");
      v61[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 456));
      v60[8] = CFSTR("truncatedDeviceLocationLatitude");
      v61[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 464));
      v60[9] = CFSTR("truncatedDeviceLocationLongitude");
      v61[9] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 472));
      v60[10] = CFSTR("isActiveVisit");
      v61[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 101));
      v60[11] = CFSTR("timeOfDay");
      v61[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 480));
      v60[12] = CFSTR("timeToObserveLatency");
      v61[12] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 280));
      v60[13] = CFSTR("timeToDownloadLatency");
      v61[13] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 288));
      v60[14] = CFSTR("baLocationAge");
      v61[14] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 296));
      v60[15] = CFSTR("deviceBeenFound");
      v61[15] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 97));
      v60[16] = CFSTR("distanceAccuracyRatio");
      v61[16] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 488));
      v60[17] = CFSTR("firstDownloadFromBA");
      v61[17] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 103));
      v60[18] = CFSTR("finalDownloadAllFromBA");
      v61[18] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 104));
      v60[19] = CFSTR("selfPublishTime");
      v61[19] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 304));
      v60[20] = CFSTR("baFinalLocationAge");
      v61[20] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v41);
      v60[21] = CFSTR("baFinalLocationAgeBounded");
      v61[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "binLocationAge:", v41));
      v60[22] = CFSTR("baLocationAgeBounded");
      v61[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "binLocationAge:", *(double *)(*(_QWORD *)(a1 + 40) + 296)));
      v60[23] = CFSTR("selfPublishTimeBounded");
      v61[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "binTimeInterval:", *(double *)(*(_QWORD *)(a1 + 40) + 304)));
      v60[24] = CFSTR("timeToObserveLatencyBounded");
      v61[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "binTimeInterval:", *(double *)(*(_QWORD *)(a1 + 40) + 280)));
      v60[25] = CFSTR("baDispersionBounded");
      v61[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "binAccuracy:", *(double *)(*(_QWORD *)(a1 + 40) + 408)));
      v60[26] = CFSTR("baEstimatedHorizontalAccuracyBounded");
      v61[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "binAccuracy:", *(double *)(*(_QWORD *)(a1 + 40) + 416)));
      v60[27] = CFSTR("deltaFindMyDistanceBounded");
      v61[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "binAccuracy:", *(double *)(*(_QWORD *)(a1 + 40) + 432)));
      v60[28] = CFSTR("distanceAccuracyRatioBounded");
      v61[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "binRatio:", *(double *)(*(_QWORD *)(a1 + 40) + 488)));
      v60[29] = CFSTR("findMyEstimatedHorizontalAccuracyBounded");
      v61[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "binAccuracy:", *(double *)(*(_QWORD *)(a1 + 40) + 448)));
      objc_msgSend(v42, "logFinalCoreAnalytics:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v61, v60, 30));
      v43 = *(void **)(a1 + 40);
      v44 = *(_QWORD *)(a1 + 48);
      v45 = *(_QWORD *)(a1 + 72);
      v46 = *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8);
      v47 = v46[5];
      v48 = v46[8];
      v49 = v46[9];
      *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)((char *)v46 + 188);
      v50 = v46[10];
      v51 = v46[11];
      v58[6] = v49;
      v58[7] = v50;
      v59[0] = v51;
      v52 = v46[6];
      v53 = v46[7];
      v58[2] = v47;
      v58[3] = v52;
      v58[4] = v53;
      v58[5] = v48;
      v54 = v46[4];
      v58[0] = v46[3];
      v58[1] = v54;
      v55 = objc_msgSend(v43, "collectLocationData:outputLocation:deviceLocation:", v45, v44, v58);
      if (objc_msgSend(v55, "count"))
      {
        objc_msgSend(v55, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 248)), CFSTR("sigEnv"));
        objc_msgSend(v55, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 40), "getTimeOfDayForAnalytics")), CFSTR("timeOfDay"));
        objc_msgSend(v55, "setObject:forKeyedSubscript:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.2lf"), v14), CFSTR("deviceDispersion"));
        v57[0] = _NSConcreteStackBlock;
        v57[1] = 3221225472;
        v57[2] = sub_100B53728;
        v57[3] = &unk_10215F370;
        v57[4] = v55;
        AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.ba.crossvalidation.datacollection"), v57);
      }
      objc_msgSend(*(id *)(a1 + 40), "terminateFinalCrossValidation");
    }
    else
    {
      objc_msgSend(*(id *)(v19 + 72), "invalidate");
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 97) = 1;
    }
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 760) != *(_QWORD *)(*(_QWORD *)(a1 + 40) + 752))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102173980);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = 68289282;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 11;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"find nearest device location with BA location time\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    v3 = *(void **)(a1 + 40);
    v4 = objc_msgSend(*(id *)(a1 + 48), "timestamp");
    if (v3)
    {
      objc_msgSend(v3, "findNearestDeviceLocationWithBALocationTime:", v4);
    }
    else
    {
      v70 = 0u;
      memset(v71, 0, 28);
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v65 = 0u;
      memset(buf, 0, sizeof(buf));
    }
    v6 = *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8);
    v7 = v66;
    v9 = v67;
    v8 = v68;
    v6[5] = v65;
    v10 = v69;
    v11 = v71[0];
    v6[10] = v70;
    v6[11] = v11;
    *(_OWORD *)((char *)v6 + 188) = *(_OWORD *)((char *)v71 + 12);
    v6[6] = v7;
    v6[7] = v9;
    v6[8] = v8;
    v6[9] = v10;
    v12 = *(_OWORD *)&buf[16];
    v6[3] = *(_OWORD *)buf;
    v6[4] = v12;
    goto LABEL_15;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102173980);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    *(_QWORD *)buf = 68289282;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"no device location available in cache\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
}

uint64_t sub_100B53728(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100B53788(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v8[6];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (a2)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102173980);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = 11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cross validation got UUID\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100B53A04;
    v8[3] = &unk_10212BB30;
    v8[4] = *(_QWORD *)(a1 + 32);
    v8[5] = a2;
    objc_msgSend(v5, "async:", v8);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102173980);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"unable to retrieve owner UUID - stop cross validation inner loop\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102173980);
    }
    v7 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unable to retrieve owner UUID - stop cross validation inner loop", "{\"msg%{public}.0s\":\"unable to retrieve owner UUID - stop cross validation inner loop\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 100) = 0;
  }
}

id sub_100B53A04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100B53A5C;
  v5[3] = &unk_102173918;
  v5[4] = v2;
  return objc_msgSend(v3, "beaconForUUID:completion:", v1, v5);
}

void sub_100B53A5C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v8[6];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (a2)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102173980);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = 11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cross validation got beacon\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100B53CD8;
    v8[3] = &unk_10212BB30;
    v8[4] = *(_QWORD *)(a1 + 32);
    v8[5] = a2;
    objc_msgSend(v5, "async:", v8);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102173980);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"unable to retrieve owner beacon - stop cross validation inner loop\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102173980);
    }
    v7 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unable to retrieve owner beacon - stop cross validation inner loop", "{\"msg%{public}.0s\":\"unable to retrieve owner beacon - stop cross validation inner loop\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 100) = 0;
  }
}

id sub_100B53CD8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v2 = *(void **)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100B53D30;
  v4[3] = &unk_1021738F0;
  v4[4] = v2;
  return objc_msgSend(v2, "retrieveOwnerLocationsDuringValidationPeriod:completion:", v1, v4);
}

id sub_100B53D30(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  _QWORD v7[6];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102173980);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2050;
    v13 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cross validation got locations\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
  v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B53E6C;
  v7[3] = &unk_10212BB30;
  v7[4] = *(_QWORD *)(a1 + 32);
  v7[5] = a2;
  return objc_msgSend(v5, "async:", v7);
}

id sub_100B53E6C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "processAvengerLocations:", *(_QWORD *)(a1 + 40));
}

void sub_100B549A4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100B549D0(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100B55CA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102306DB0);
  _Unwind_Resume(a1);
}

void sub_100B565D4(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100B56600(id a1)
{
  NSFileAttributeKey v1;
  NSFileProtectionType v2;

  v1 = NSFileProtectionKey;
  v2 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  qword_102306DB8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v2, &v1, 1);
}

void sub_100B56688(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

BOOL sub_100B566EC()
{
  return os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100B56700()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 456), OS_LOG_TYPE_INFO);
}

BOOL sub_100B56710()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 456));
}

void sub_100B5671C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  CFAbsoluteTime Current;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    v3 = 0.0;
    do
    {
      Current = CFAbsoluteTimeGetCurrent();
      v3 = v3 + sub_1008BB1D4(v1, &Current);
      v1 += 112;
    }
    while (v1 != v2);
  }
}

double sub_100B567B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  CFAbsoluteTime Current;

  v1 = *a1;
  v2 = a1[1];
  v3 = -1.0;
  while (v1 != v2)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v4 = sub_1008BB1D4(v1, &Current);
    if (v3 < v4)
      v3 = v4;
    v1 += 112;
  }
  return v3;
}

const __CFString *sub_100B56814(int a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  NSString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  std::string __p;
  std::string v19;

  if (a1 < 1)
    return &stru_1021D8FB8;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    return &stru_1021D8FB8;
  v6 = v4 - v3;
  v7 = (unint64_t)(v4 - v3) >> 3;
  if ((int)v7 <= a1)
    v8 = 0;
  else
    v8 = rand() % ((int)v7 - a1 + 1);
  sub_1015A2E04(&v19, "");
  if (v8 < (int)v7)
  {
    v10 = 0;
    v11 = v8;
    v12 = 8 * v8;
    v13 = v11 + 1;
    do
    {
      if ((_DWORD)v10)
        std::string::append(&v19, ", ");
      sub_1000C2254((_QWORD *)(*a2 + v12), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(&v19, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v13 + v10 >= (int)(v6 >> 3))
        break;
      ++v10;
      v12 += 8;
    }
    while ((int)v10 < a1);
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v19;
  else
    v16 = (std::string *)v19.__r_.__value_.__r.__words[0];
  v9 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v16, 4);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return (const __CFString *)v9;
}

void sub_100B56984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFString *sub_100B569C0(uint64_t **a1, int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  const __CFString *v16;
  void *__p;
  char *v19;
  char *v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = 0;
    do
    {
      v6 = *v3;
      if (v5 >= v20)
      {
        v8 = (char *)__p;
        v9 = (v5 - (_BYTE *)__p) >> 3;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61)
          sub_100259694();
        v11 = v20 - (_BYTE *)__p;
        if ((v20 - (_BYTE *)__p) >> 2 > v10)
          v10 = v11 >> 2;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)sub_10025E6A0((uint64_t)&v20, v12);
          v8 = (char *)__p;
          v5 = v19;
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[8 * v9];
        *(_QWORD *)v14 = v6;
        v7 = v14 + 8;
        while (v5 != v8)
        {
          v15 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        __p = v14;
        v19 = v7;
        v20 = &v13[8 * v12];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_QWORD *)v5 = v6;
        v7 = v5 + 8;
      }
      v19 = v7;
      v3 += 14;
      v5 = v7;
    }
    while (v3 != v4);
  }
  v16 = sub_100B56814(a2, (uint64_t *)&__p);
  if (__p)
  {
    v19 = (char *)__p;
    operator delete(__p);
  }
  return v16;
}

void sub_100B56B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B56B28(_QWORD *a1)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
}

_QWORD *sub_100B56B4C(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1004805CC(result, a4);
    result = (_QWORD *)sub_100B56BD0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100B56BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100B04710(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100B56BD0(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  _QWORD v15[3];
  char v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a4;
  v17 = a4;
  v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 5;
    do
    {
      *(_OWORD *)v4 = *(v6 - 5);
      v7 = *(v6 - 4);
      v8 = *(v6 - 3);
      v9 = *(v6 - 1);
      *(_OWORD *)(v4 + 48) = *(v6 - 2);
      *(_OWORD *)(v4 + 64) = v9;
      *(_OWORD *)(v4 + 16) = v7;
      *(_OWORD *)(v4 + 32) = v8;
      v10 = (_BYTE *)(v4 + 80);
      if (*((char *)v6 + 23) < 0)
      {
        sub_100115CE4(v10, *(void **)v6, *((_QWORD *)v6 + 1));
        v12 = v18;
      }
      else
      {
        v11 = *v6;
        *(_QWORD *)(v4 + 96) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v10 = v11;
        v12 = v4;
      }
      v13 = v6 - 5;
      *(_QWORD *)(v4 + 104) = *((_QWORD *)v6 + 3);
      v4 = v12 + 112;
      v18 = v12 + 112;
      v6 += 7;
    }
    while (v13 + 7 != a3);
  }
  v16 = 1;
  sub_100B56CB8((uint64_t)v15);
  return v4;
}

void sub_100B56CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100B56CB8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100B56CB8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100B56CEC(a1);
  return a1;
}

void sub_100B56CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 112;
  }
}

_BYTE *sub_100B56D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *result;
  __int128 v9;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 64) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  result = (_BYTE *)(v4 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)result = v9;
  }
  *(_QWORD *)(v4 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 8) = v4 + 112;
  return result;
}

void sub_100B56DB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100B56DB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x124924924924924)
    v9 = 0x249249249249249;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = sub_1002A7588(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[14 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v20 = v11;
  v21 = (char *)&v10[14 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 4) = v14;
  *((_OWORD *)v11 + 2) = v13;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  v15 = v11 + 80;
  if (*(char *)(a2 + 103) < 0)
  {
    sub_100115CE4(v15, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    v11 = v20;
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 80);
    *((_QWORD *)v11 + 12) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)v15 = v16;
  }
  v10[14 * v4 + 13] = *(_QWORD *)(a2 + 104);
  v20 = v11 + 112;
  sub_100B56F20(a1, v19);
  v17 = a1[1];
  sub_100B570D0((uint64_t)v19);
  return v17;
}

void sub_100B56F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100B570D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B56F20(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100B56F94((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100B56F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(a3 - 112);
      v9 = *(_OWORD *)(a3 - 96);
      v10 = *(_OWORD *)(a3 - 80);
      v11 = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v8 - 48) = v11;
      *(_OWORD *)(v8 - 96) = v9;
      *(_OWORD *)(v8 - 80) = v10;
      v12 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v12;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 112;
      v7 -= 112;
      a3 -= 112;
    }
    while (a3 != a5);
    *((_QWORD *)&v18 + 1) = v8;
    v13 = v18;
  }
  v16 = 1;
  sub_100B57058((uint64_t)v15);
  return v13;
}

uint64_t sub_100B57058(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100B5708C(a1);
  return a1;
}

void sub_100B5708C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 103) < 0)
      operator delete(*(void **)(v1 + 80));
    v1 += 112;
  }
}

uint64_t sub_100B570D0(uint64_t a1)
{
  sub_100B57104(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100B57104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 112;
      *(_QWORD *)(a1 + 16) = v2 - 112;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_100B57158(uint64_t a1)
{
  uint64_t v7;
  _QWORD v9[5];
  unsigned __int8 v10;

  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_QWORD *)(a1 + 16) = 0xBFF0000000000000;
  v10 = 0;
  sub_1018BF25C((unsigned __int8 *)(a1 + 113), "CompassCalibrationLoggerEnabled", &v10, 0);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  if ((sub_1001B7910() & 0x10) != 0)
  {
    v7 = sub_100127B9C();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100B57210;
    v9[3] = &unk_10212ECA0;
    v9[4] = a1;
    sub_1000A50A8(v7, (uint64_t)v9);
  }
  return a1;
}

void sub_100B571F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100B57210(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (uint64_t *)sub_100A07FA0();
  v6 = 0x10000000BLL;
  v7 = 0;
  sub_1018E4078(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_1002B7674(v1 + 120, &v8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_100A0A4BC(*(uint64_t **)(v1 + 120), (uint64_t)sub_100B572AC, v1);
}

void sub_100B572AC(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int IntegerValue;
  int v7;
  int v8;
  _BOOL4 v9;
  unint64_t TimeStamp;
  double v11;

  if (IOHIDEventGetType(a4) == 3)
  {
    IntegerValue = IOHIDEventGetIntegerValue(a4, 196608);
    v7 = IOHIDEventGetIntegerValue(a4, 196609);
    if (IntegerValue == 12)
    {
      v8 = v7;
      v9 = IOHIDEventGetIntegerValue(a4, 196610) == 1;
      TimeStamp = IOHIDEventGetTimeStamp(a4);
      v11 = sub_100127828(TimeStamp);
      sub_100B57CE8(a1, v8, v9, v11);
    }
  }
}

uint64_t sub_100B57364(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 120;
  sub_100346F9C((_QWORD *)(a1 + 120));
  sub_100261F44(v2);
  return a1;
}

void sub_100B57398(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  int v5;
  float v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[5];
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  float v24;

  v4 = (_OWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 97);
  v6 = (float)*(char *)(a1 + 25);
  v7 = *(_DWORD *)(a1 + 77);
  v8 = llroundf(sqrtf((float)((float)(*(float *)(a1 + 33) * *(float *)(a1 + 33))+ (float)(*(float *)(a1 + 29) * *(float *)(a1 + 29)))+ (float)(*(float *)(a1 + 37) * *(float *)(a1 + 37)))- sqrtf((float)((float)(*(float *)(a2 + 9) * *(float *)(a2 + 9)) + (float)(*(float *)(a2 + 5) * *(float *)(a2 + 5)))+ (float)(*(float *)(a2 + 13) * *(float *)(a2 + 13))));
  v9 = llround(CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 16));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100B57500;
  v19[3] = &unk_102150CF0;
  v19[4] = a2;
  v20 = v5;
  v21 = v9;
  v22 = v8;
  v23 = v7;
  v24 = v6;
  AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.CompassCalibration"), v19);
  v10 = *(char *)(a2 + 1);
  if (v10 >= 1 && *(unsigned __int8 *)(a1 + 25) == v10)
  {
    *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
    v11 = *(_OWORD *)(a2 + 16);
    *v4 = *(_OWORD *)a2;
    v4[1] = v11;
    v13 = *(_OWORD *)(a2 + 48);
    v12 = *(_OWORD *)(a2 + 64);
    v14 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)((char *)v4 + 73) = *(_OWORD *)(a2 + 73);
    v4[3] = v13;
    v4[4] = v12;
    v4[2] = v14;
  }
  else
  {
    *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
    v15 = *(_OWORD *)(a2 + 16);
    *v4 = *(_OWORD *)a2;
    v4[1] = v15;
    v17 = *(_OWORD *)(a2 + 48);
    v16 = *(_OWORD *)(a2 + 64);
    v18 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)((char *)v4 + 73) = *(_OWORD *)(a2 + 73);
    v4[3] = v17;
    v4[4] = v16;
    v4[2] = v18;
    sub_100B5772C(a1, 0);
  }
}

NSDictionary *sub_100B57500(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _QWORD v11[14];
  _QWORD v12[14];

  v11[0] = CFSTR("logTimestamp");
  v12[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent() * 1000000.0);
  v11[1] = CFSTR("isAPAwake");
  v12[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 4));
  v11[2] = CFSTR("quality");
  LODWORD(v2) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 53);
  v12[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v2);
  v11[3] = CFSTR("temperature");
  LODWORD(v3) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 73);
  v12[3] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v11[4] = CFSTR("previousCalibrationTemperature");
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  v12[4] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4);
  v11[5] = CFSTR("timeSinceLastCalibration");
  v12[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v11[6] = CFSTR("biasShift");
  v12[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v11[7] = CFSTR("isSaturation");
  v12[7] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 2));
  v11[8] = CFSTR("previousCalibrationQuality");
  LODWORD(v5) = *(_DWORD *)(a1 + 52);
  v12[8] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5);
  v11[9] = CFSTR("previousCalibrationLevel");
  LODWORD(v6) = *(_DWORD *)(a1 + 56);
  v12[9] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6);
  v11[10] = CFSTR("calibrationLevel");
  v12[10] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(*(_QWORD *)(a1 + 32) + 1));
  v11[11] = CFSTR("minTempSinceLastCal");
  LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 77);
  v12[11] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7);
  v11[12] = CFSTR("maxTempSinceLastCal");
  LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 81);
  v12[12] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8);
  v11[13] = CFSTR("avgTempSinceLastCal");
  LODWORD(v9) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 85);
  v12[13] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 14);
}

void sub_100B5772C(uint64_t a1, int a2)
{
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  const __CFString *v17;
  const __CFString *v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  int v27;
  _BYTE *v28;
  float v29;
  _BYTE *v30;
  _BYTE *v31;
  CFStringRef v32;
  float v33;
  float v34;
  int v35;
  _BYTE *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *v44;
  double v45;
  double v46;
  double v47;
  float v48;
  int v49;
  float v50;
  float v51;
  float v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  const char *v57;
  char *v58;
  double v59;
  double v60;
  double v61;
  int v62;
  double v63;
  double v64;
  double v65;
  int v66;
  int v67;
  int v68;
  double v69;
  _BYTE __p[12];
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  int v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  uint64_t v92;
  _BYTE buf[12];
  __int16 v94;
  double v95;
  __int16 v96;
  double v97;
  __int16 v98;
  double v99;
  __int16 v100;
  int v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  uint64_t v115;

  if (*(_BYTE *)(a1 + 114))
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102173A00);
    v4 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(float *)(a1 + 29);
      v6 = *(float *)(a1 + 33);
      v7 = *(float *)(a1 + 37);
      v8 = *(float *)(a1 + 53);
      v9 = *(char *)(a1 + 25);
      v10 = *(float *)(a1 + 77);
      v11 = *(float *)(a1 + 81);
      *(_DWORD *)buf = 134220800;
      v12 = *(float *)(a1 + 85);
      v13 = *(unsigned __int8 *)(a1 + 26);
      v14 = *(unsigned __int8 *)(a1 + 27);
      v15 = *(unsigned __int8 *)(a1 + 28);
      v16 = *(_QWORD *)(a1 + 16);
      *(double *)&buf[4] = v5;
      v94 = 2048;
      v95 = v6;
      v96 = 2048;
      v97 = v7;
      v98 = 2048;
      v99 = (float)(1.0 / v8);
      v100 = 1024;
      v101 = v9;
      v102 = 2048;
      v103 = v10;
      v104 = 2048;
      v105 = v11;
      v106 = 2048;
      v107 = v12;
      v108 = 1024;
      v109 = v13;
      v110 = 1024;
      v111 = v14;
      v112 = 1024;
      v113 = v15;
      v114 = 2048;
      v115 = v16;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CLCompassCalibrationLogger] Last CompassCalibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,%.2f,level,%d,quality,%.2f,cost,%.2f,coverage,%.2f,saturations,%d,consistency,%d,apAwake,%d,cftime,%.3f", buf, 0x6Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102173A00);
      v45 = *(float *)(a1 + 29);
      v46 = *(float *)(a1 + 33);
      v47 = *(float *)(a1 + 37);
      v48 = *(float *)(a1 + 53);
      v49 = *(char *)(a1 + 25);
      v50 = *(float *)(a1 + 77);
      v51 = *(float *)(a1 + 81);
      *(_DWORD *)__p = 134220800;
      v52 = *(float *)(a1 + 85);
      v53 = *(unsigned __int8 *)(a1 + 26);
      v54 = *(unsigned __int8 *)(a1 + 27);
      v55 = *(unsigned __int8 *)(a1 + 28);
      v56 = *(_QWORD *)(a1 + 16);
      *(double *)&__p[4] = v45;
      v71 = 2048;
      v72 = v46;
      v73 = 2048;
      v74 = v47;
      v75 = 2048;
      v76 = (float)(1.0 / v48);
      v77 = 1024;
      v78 = v49;
      v79 = 2048;
      v80 = v50;
      v81 = 2048;
      v82 = v51;
      v83 = 2048;
      v84 = v52;
      v85 = 1024;
      v86 = v53;
      v87 = 1024;
      v88 = v54;
      v89 = 1024;
      v90 = v55;
      v91 = 2048;
      v92 = v56;
      LODWORD(v59) = 106;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "[CLCompassCalibrationLogger] Last CompassCalibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,%.2f,level,%d,quality,%.2f,cost,%.2f,coverage,%.2f,saturations,%d,consistency,%d,apAwake,%d,cftime,%.3f", COERCE_DOUBLE(__p), v59, v60, v61, v62, v63, v64, v65, v66, v67,
        v68,
        v69);
      v58 = (char *)v57;
      sub_100512490("Generic", 1, 0, 2, "void CLCompassCalibrationLogger::alertLastCal(BOOL)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
    v17 = sub_1005153C0(*(CFAbsoluteTime *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 25) - 2) > 3u)
      v18 = CFSTR("Uncalibrated");
    else
      v18 = *(&off_102173A20 + (char)(*(_BYTE *)(a1 + 25) - 2));
    v19 = sub_100195F08();
    v20 = *(float *)(a1 + 29);
    v21 = *(float *)(a1 + 33);
    v22 = *(float *)(a1 + 37);
    v23 = 1.0 / *(float *)(a1 + 53);
    v24 = -1.0;
    if (v19)
    {
      if (!*(_BYTE *)(a1 + 26))
        v24 = *(float *)(a1 + 81);
      v25 = *(float *)(a1 + 93);
      v26 = *(float *)(a1 + 85);
      sub_1001A486C(v18, (uint64_t)buf);
      v27 = SHIBYTE(v96);
      v28 = *(_BYTE **)buf;
      v29 = *(float *)(a1 + 77);
      sub_1001A486C(v17, (uint64_t)__p);
      v30 = buf;
      if (v27 < 0)
        v30 = v28;
      if (v73 >= 0)
        v31 = __p;
      else
        v31 = *(_BYTE **)__p;
      v32 = CFStringCreateWithFormat(0, 0, CFSTR("B:%.0f,%.0f,%.0f\nR:%.0f Cost:%.1f\nPlan:%.2f Cov:%.1f\n%s Q:%.1f\n%s"), *(_QWORD *)&v20, *(_QWORD *)&v21, *(_QWORD *)&v22, *(_QWORD *)&v23, *(_QWORD *)&v24, v25, v26, v30, v29, v31);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 26))
        v24 = *(float *)(a1 + 81);
      v33 = *(float *)(a1 + 93);
      v34 = *(float *)(a1 + 85);
      sub_1001A486C(v18, (uint64_t)buf);
      v35 = SHIBYTE(v96);
      v36 = *(_BYTE **)buf;
      v37 = *(float *)(a1 + 77);
      v38 = *(unsigned __int8 *)(a1 + 27);
      v39 = *(unsigned __int8 *)(a1 + 28);
      sub_1001A486C(v17, (uint64_t)__p);
      v40 = buf;
      if (v35 < 0)
        v40 = v36;
      if (v73 >= 0)
        v41 = __p;
      else
        v41 = *(_BYTE **)__p;
      v32 = CFStringCreateWithFormat(0, 0, CFSTR("Bias  [%.2f,%.2f,%.2f]\nRadius  %.2f\nCost  %.2f\nPlanarity  %.2f\nCoverage  %.2f\nLevel  %s\nQuality  %.2f\nConsistency  %d\nAP Awake  %d\n%s"), *(_QWORD *)&v20, *(_QWORD *)&v21, *(_QWORD *)&v22, *(_QWORD *)&v23, *(_QWORD *)&v24, v33, v34, v40, v37, v38, v39, v41);
    }
    v42 = v32;
    if (SHIBYTE(v73) < 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v96) < 0)
      operator delete(*(void **)buf);
    if (a2)
      v43 = CFSTR("Cur Compass Cal");
    else
      v43 = CFSTR("New Compass Cal");
    if (*(double *)(a1 + 16) >= 0.0)
      v44 = v42;
    else
      v44 = CFSTR("No Compass Cal Since locationd Start");
    CFUserNotificationDisplayNotice(0.0, 0, 0, 0, 0, v43, v44, 0);
    CFRelease(v42);
    CFRelease(v17);
  }
}

void sub_100B57CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a26 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(exception_object);
}

void sub_100B57CE8(double *a1, int a2, int a3, double a4)
{
  NSObject *v8;
  double *v9;
  double v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102173A00);
  v8 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240448;
    v17 = a2;
    v18 = 1026;
    v19 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[CLCompassCalibrationLogger] ButtonPress,type,%{public}d,down,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102173A00);
    v13[0] = 67240448;
    v13[1] = a2;
    v14 = 1026;
    v15 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "[CLCompassCalibrationLogger] ButtonPress,type,%{public}d,down,%{public}d", v13, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLCompassCalibrationLogger::onButton(int, BOOL, const CFTimeInterval)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v9 = a1;
  if (a2 > 232)
  {
    if (a2 != 234)
    {
      if (a2 != 233)
        return;
      goto LABEL_12;
    }
  }
  else if (a2 != 48)
  {
    if (a2 != 64)
      return;
LABEL_12:
    v9 = a1 + 1;
  }
  *v9 = a4;
  if (a3)
  {
    v10 = a1[1];
    if (vabdd_f64(*a1, v10) < 0.3 && *a1 >= 0.0 && v10 >= 0.0)
      sub_100B5772C((uint64_t)a1, 1);
  }
}

void sub_100B57F34(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100B58FD4(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  int *v54;
  int *v55;
  int *v56;
  int *v57;
  int *v58;
  int *v59;
  uint64_t result;
  unint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v3 = (int *)&OBJC_IVAR___PBDataReader__error;
  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v5 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v6 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v7 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v8 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v15 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v16 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    do
    {
      if (*(_BYTE *)(a2 + *v3))
        break;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v21 = v20 + 1;
        if (v20 == -1 || v21 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
        v19 |= (unint64_t)(v22 & 0x7F) << v17;
        if ((v22 & 0x80) == 0)
          goto LABEL_12;
        v17 += 7;
        v23 = v18++ >= 9;
        if (v23)
        {
          v19 = 0;
          v24 = *v3;
          v25 = *(unsigned __int8 *)(a2 + v24);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v3) = 1;
LABEL_12:
      v24 = *v3;
      v25 = *(unsigned __int8 *)(a2 + v24);
      if (*(_BYTE *)(a2 + v24))
        v19 = 0;
LABEL_14:
      if (v25 || (v19 & 7) == 4)
        break;
      switch((v19 >> 3))
      {
        case 1u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + v5[94]) |= 8u;
          while (1)
          {
            v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
              goto LABEL_75;
            v27 += 7;
            v23 = v28++ >= 9;
            if (v23)
            {
              LODWORD(v29) = 0;
              goto LABEL_77;
            }
          }
          *(_BYTE *)(a2 + *v3) = 1;
LABEL_75:
          if (*(_BYTE *)(a2 + *v3))
            LODWORD(v29) = 0;
LABEL_77:
          v70 = v6[95];
          goto LABEL_90;
        case 2u:
          v33 = 0;
          v34 = 0;
          v29 = 0;
          while (2)
          {
            v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + *v3) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36;
              v29 |= (unint64_t)(v37 & 0x7F) << v33;
              if (v37 < 0)
              {
                v33 += 7;
                v23 = v34++ >= 9;
                if (v23)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v3))
            LODWORD(v29) = 0;
LABEL_81:
          v70 = v7[99];
          goto LABEL_90;
        case 3u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (2)
          {
            v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v42 = v41 + 1;
            if (v41 == -1 || v42 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + *v3) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
              v40 |= (unint64_t)(v43 & 0x7F) << v38;
              if (v43 < 0)
              {
                v38 += 7;
                v23 = v39++ >= 9;
                if (v23)
                {
                  v40 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v3))
            v40 = 0;
LABEL_85:
          v71 = v40 != 0;
          v72 = v8[100];
          goto LABEL_95;
        case 4u:
          v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v45 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v45 = 0;
          }
          v73 = v9[101];
          goto LABEL_104;
        case 5u:
          v46 = 0;
          v47 = 0;
          v29 = 0;
          while (2)
          {
            v48 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v49 = v48 + 1;
            if (v48 == -1 || v49 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + *v3) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49;
              v29 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                v23 = v47++ >= 9;
                if (v23)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v3))
            LODWORD(v29) = 0;
LABEL_89:
          v70 = v10[102];
LABEL_90:
          *(_DWORD *)(a1 + v70) = v29;
          continue;
        case 6u:
          v51 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v52 = 0;
          }
          v74 = v11[103];
          goto LABEL_109;
        case 7u:
          v53 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v52 = 0;
          }
          v74 = v12[104];
          goto LABEL_109;
        case 9u:
          *(_BYTE *)(a1 + v5[94]) |= 1u;
          v61 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v61 <= 0xFFFFFFFFFFFFFFF7 && v61 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v45 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v3) = 1;
            v45 = 0;
          }
          v73 = v13[96];
LABEL_104:
          *(_QWORD *)(a1 + v73) = v45;
          continue;
        case 0xAu:
          v62 = 0;
          v63 = 0;
          v64 = 0;
          break;
        case 0xBu:
          *(_BYTE *)(a1 + v5[94]) |= 2u;
          v68 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v68 <= 0xFFFFFFFFFFFFFFFBLL && v68 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v3) = 1;
            v52 = 0;
          }
          v74 = v15[97];
          goto LABEL_109;
        case 0xCu:
          *(_BYTE *)(a1 + v5[94]) |= 4u;
          v69 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v69 <= 0xFFFFFFFFFFFFFFFBLL && v69 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v69);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v3) = 1;
            v52 = 0;
          }
          v74 = v16[98];
LABEL_109:
          *(_DWORD *)(a1 + v74) = v52;
          continue;
        default:
          v54 = v6;
          v55 = v7;
          v56 = v5;
          v57 = v8;
          v58 = v9;
          v75 = a1;
          v59 = v3;
          result = PBReaderSkipValueWithTag(a2);
          v16 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v3 = v59;
          v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          a1 = v75;
          v9 = v58;
          v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v8 = v57;
          v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v5 = v56;
          v15 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v7 = v55;
          v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v6 = v54;
          v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v65 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v66 = v65 + 1;
        if (v65 == -1 || v66 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v67 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66;
        v64 |= (unint64_t)(v67 & 0x7F) << v62;
        if ((v67 & 0x80) == 0)
          goto LABEL_92;
        v62 += 7;
        v23 = v63++ >= 9;
        if (v23)
        {
          v64 = 0;
          goto LABEL_94;
        }
      }
      *(_BYTE *)(a2 + *v3) = 1;
LABEL_92:
      if (*(_BYTE *)(a2 + *v3))
        v64 = 0;
LABEL_94:
      v71 = v64 != 0;
      v72 = v14[105];
LABEL_95:
      *(_BYTE *)(a1 + v72) = v71;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + *v3) == 0;
}

uint64_t sub_100B5A1AC()
{
  uint64_t result;

  result = sub_1001B7910();
  if ((result & 0x10) != 0)
    operator new();
  return result;
}

void sub_100B5A1F4()
{
  operator delete();
}

uint64_t sub_100B5A218()
{
  if (qword_102306DC8 != -1)
    dispatch_once(&qword_102306DC8, &stru_102173A60);
  return qword_1023113B0;
}

uint64_t sub_100B5A25C(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 v5[3];
  unsigned __int8 v6;

  v2 = (_QWORD *)sub_10076AA88(a1, 4);
  *v2 = &off_102173A90;
  v3 = (unsigned __int8 *)v2 + 36;
  *(_BYTE *)(a1 + 36) = sub_100762264();
  v6 = 1;
  sub_1018BF25C((unsigned __int8 *)(a1 + 37), "EnableVisualLocalization", &v6, 0);
  sub_1018BF25C(v5, "AlwaysOnDeviceMotion9", v3, 0);
  *(_BYTE *)(a1 + 36) = v5[1];
  sub_10076AAEC((uint64_t *)a1);
  return a1;
}

void sub_100B5A2EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10076AAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100B5A30C(_QWORD *a1)
{
  sub_10076AAA0(a1);
  operator delete();
}

BOOL sub_100B5A330(uint64_t a1)
{
  return (sub_1001B7910() & 0x10) != 0 && *(_BYTE *)(a1 + 36) != 0;
}

BOOL sub_100B5A368(uint64_t a1)
{
  return (sub_1001B7910() & 0x10) != 0 && *(_BYTE *)(a1 + 38) != 0;
}

unint64_t sub_100B5A3A0()
{
  return ((unint64_t)sub_1001B7910() >> 4) & 1;
}

uint64_t sub_100B5A3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  int v11;
  const char *v13;
  uint8_t *v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  _DWORD v20[4];
  uint8_t buf[8];
  std::__shared_weak_count *v22;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  sub_100270E34(a1 + 24, a3);
  *(_BYTE *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_QWORD *)(a1 + 48))
  {
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10191A82C(qword_1022A0070 == -1);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLGnssAssistanceMapVector.mm", 24, "CLGnssAssistanceMapVector");
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_102173AD0);
LABEL_3:
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "initializing", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173AD0);
    LOWORD(v20[0]) = 0;
    LODWORD(v18) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "initializing", v20, v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "CLGnssAssistanceMapVector::CLGnssAssistanceMapVector(id<CLIntersiloUniverse>, CLGnssAssistanceMapVectorCallback)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v19 = 0;
  sub_1001E4804(buf);
  v5 = sub_1001E4B84(*(uint64_t *)buf, "GpsMapVectorAiding", &v19);
  v6 = v5;
  v7 = v22;
  if (!v22)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_10:
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v6)
LABEL_11:
    *(_BYTE *)(a1 + 56) = v19 == 1;
LABEL_12:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102173AD0);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "GpsMapVectorAiding,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173AD0);
    v15 = *(unsigned __int8 *)(a1 + 56);
    v20[0] = 67109120;
    v20[1] = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GpsMapVectorAiding,%d", v20);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "CLGnssAssistanceMapVector::CLGnssAssistanceMapVector(id<CLIntersiloUniverse>, CLGnssAssistanceMapVectorCallback)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (*(_BYTE *)(a1 + 56))
    sub_1012A3B98();
  return a1;
}

void sub_100B5A820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = (_QWORD *)v15[6];
  if (v18 == v16)
  {
    v19 = 4;
    v18 = v16;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  v20 = v15[1];
  v15[1] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *v15;
  *v15 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(exception_object);
}

void sub_100B5A8C0(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssAssistanceMapVector::onGpsAssistantNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173AF0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMapVector::onGpsAssistantNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173AF0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMapVector::onGpsAssistantNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100B5AD48(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B5AA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B5AA98(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssAssistanceMapVector::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173AF0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMapVector::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173AF0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMapVector::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100B5B458(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B5AC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100B5AC74(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *a1;
  *a1 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_100B5ACF8(uint64_t a1, uint64_t a2, double a3)
{
  if (vabdd_f64(sub_100078B88(), *(double *)(a1 + 152)) < a3)
  {
    *(_BYTE *)(a2 + 176) = 1;
    *(_QWORD *)(a2 + 184) = *(_QWORD *)(a1 + 112);
  }
}

void sub_100B5AD48(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  int v4;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v4 = *a3;
  if ((*a3 - 2) >= 2)
  {
    if (v4 == 1)
    {
      sub_100B5B2C4(a1, a3, (uint64_t)a4);
    }
    else if (v4)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102173AD0);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *a3;
        *(_DWORD *)buf = 67109120;
        v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Unsupported notification %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102173AD0);
        v8 = *a3;
        v11[0] = 67109120;
        v11[1] = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Unsupported notification %d", v11);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::onGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    else
    {
      sub_100B5AF84(a1, a3, a4);
    }
  }
}

void sub_100B5AF84(uint64_t a1, int *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  __int128 v22;
  _BYTE __dst[1624];
  _WORD v24[8];
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int128 v47;

  v3 = *(_QWORD *)a3;
  v4 = *((_QWORD *)a3 + 1);
  v5 = *((_QWORD *)a3 + 2);
  v6 = *((_QWORD *)a3 + 3);
  v7 = *((_QWORD *)a3 + 4);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a3[7];
  v11 = a3[8];
  v47 = *(_OWORD *)(a3 + 9);
  if (a3[11] <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173AD0);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning machtime<=0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102173AD0);
      v24[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning machtime<=0", v24, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::processGpsAssistantDirectionOfTravel(const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  else
  {
    v22 = *(_OWORD *)(a3 + 11);
    v21 = v3;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173AD0);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68291331;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2049;
      v30 = v6;
      v31 = 2049;
      v32 = v7;
      v33 = 1026;
      v34 = (int)v9;
      v35 = 1026;
      v36 = (int)v10;
      v37 = 1026;
      v38 = (int)v11;
      v39 = 2049;
      v40 = v4;
      v41 = 2049;
      v42 = v5;
      v43 = 1026;
      v44 = (int)v8;
      v45 = 1026;
      v46 = (int)*(double *)&v22;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss DOT\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"directionOfTravel\":%{public}d, \"directionOfTravelUnc\":%{public}d, \"roadWidth\":%{public}d, \"startLatitude\":\"%{private}.08f\", \"startLongitude\":\"%{private}.08f\", \"lengthOfLinearSegment\":%{public}d, \"machtime\":%{public}d}", buf, 0x58u);
    }
    *(_QWORD *)(a1 + 64) = v21;
    *(_QWORD *)(a1 + 72) = v4;
    *(_QWORD *)(a1 + 80) = v5;
    *(_QWORD *)(a1 + 88) = v6;
    *(_QWORD *)(a1 + 96) = v7;
    *(double *)(a1 + 104) = v8;
    *(double *)(a1 + 112) = v9;
    *(double *)(a1 + 120) = v10;
    *(double *)(a1 + 128) = v11;
    *(_OWORD *)(a1 + 136) = v47;
    *(_OWORD *)(a1 + 152) = v22;
    if (!*(_BYTE *)(a1 + 168))
    {
      v16 = *a2;
      memcpy(__dst, a3, sizeof(__dst));
      *(_DWORD *)buf = v16;
      v17 = *(_QWORD *)(a1 + 48);
      if (!v17)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *, _BYTE *))(*(_QWORD *)v17 + 48))(v17, buf, __dst);
    }
  }
}

void sub_100B5B2C4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  _BYTE __dst[1624];
  uint64_t buf;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v7 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  v8 = *(double *)(a3 + 24);
  v9 = *(double *)(a3 + 32);
  v10 = *(double *)(a3 + 40);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102173AD0);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    buf = 68290307;
    v16 = 2082;
    v17 = "";
    v18 = 2049;
    v19 = v7;
    v20 = 2049;
    v21 = v6;
    v22 = 1026;
    v23 = (int)v8;
    v24 = 1026;
    v25 = (int)v9;
    v26 = 1026;
    v27 = (int)v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss MMP\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"uncEllipseSemiMajor\":%{public}d, \"uncEllipseSemiMinor\":%{public}d, \"uncEllipseAzimuth\":%{public}d}", (uint8_t *)&buf, 0x38u);
  }
  if (!*(_BYTE *)(a1 + 168))
  {
    v12 = *a2;
    memcpy(__dst, (const void *)a3, sizeof(__dst));
    LODWORD(buf) = v12;
    v13 = *(_QWORD *)(a1 + 48);
    if (!v13)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v13 + 48))(v13, &buf, __dst);
  }
}

void sub_100B5B458(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  int v6;
  BOOL v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;

  if (!*a3)
  {
    v6 = *((_DWORD *)a4 + 2);
    v7 = v6 && v6 != 71 && (*a4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)a4 > 0.0;
    *(_BYTE *)(a1 + 168) = v7;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173AD0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v9 = *((_DWORD *)a4 + 2);
      v10 = *a4;
      v11 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)buf = 67109632;
      v23 = v9;
      v24 = 2048;
      v25 = v10;
      v26 = 1024;
      v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "fitnessSession,%d,startTime,%.3lf,inFitnessSession,%d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102173AD0);
      v12 = *a4;
      v13 = *(unsigned __int8 *)(a1 + 168);
      v18 = 2048;
      v19 = v12;
      v20 = 1024;
      v21 = v13;
      LODWORD(v16) = 24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "fitnessSession,%d,startTime,%.3lf,inFitnessSession,%d", &v17, v16, 67109632);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_100B5B694(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100B5B6C0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B5B6EC(uint64_t a1, void *a2)
{
  _QWORD *v3;
  __CFNotificationCenter *DarwinNotifyCenter;
  char v5;
  __CFNotificationCenter *v6;
  const __CFString *v7;
  __CFNotificationCenter *v8;
  const __CFString *v9;

  v3 = sub_1008BCB50((const void *)a1, a2);
  *v3 = off_102173B20;
  *(_BYTE *)(a1 + 121) = sub_100B5C6A8((uint64_t)v3);
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 124) = 0;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100822E84, CFSTR("com.apple.tcc.access.changed"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  sub_1008BD33C(a1, v5);
  if (qword_102306DD0 != -1)
    dispatch_once(&qword_102306DD0, &stru_102173C50);
  if (qword_102306DD8 && off_1022F9B70[0]())
  {
    v6 = CFNotificationCenterGetDarwinNotifyCenter();
    v7 = (const __CFString *)off_1022F9B70[0]();
    CFNotificationCenterAddObserver(v6, (const void *)a1, (CFNotificationCallback)sub_100B5B92C, v7, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  if (qword_102306DE8 != -1)
    dispatch_once(&qword_102306DE8, &stru_102173C70);
  if (qword_102306DF0)
  {
    if (off_1022F9B78[0]())
    {
      v8 = CFNotificationCenterGetDarwinNotifyCenter();
      v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1022F9B78[0]());
      CFNotificationCenterAddObserver(v8, (const void *)a1, (CFNotificationCallback)sub_100B5BB4C, v9, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
  sub_100647FA8();
}

void sub_100B5B8EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[16];
  v1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1008BCFFC(v1);
  _Unwind_Resume(a1);
}

void sub_100B5B92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLFitnessTrackingNotifierCompanion::activationStateChanged");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173C30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierCompanion::activationStateChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173C30);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierCompanion::activationStateChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100B5D168;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100B5BB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B5BB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLFitnessTrackingNotifierCompanion::phoneFitnessModeChanged");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173C30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierCompanion::phoneFitnessModeChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173C30);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierCompanion::phoneFitnessModeChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100B5D268;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100B5BD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B5BD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLFitnessTrackingNotifierCompanion::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173C30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierCompanion::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173C30);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierCompanion::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100B5C150((_DWORD *)a4);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100B5BF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B5BF2C(_DWORD *a1)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint8_t buf[4];
  const char *v12;

  result = sub_100B5CFB4();
  if (a1[31] != (_DWORD)result)
  {
    a1[31] = result;
    HIDWORD(v8) = result;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102173CB0);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      if (a1[31] == 1)
        v4 = "Enabled";
      else
        v4 = "Disabled";
      *(_DWORD *)buf = 136446210;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CM Phone Fitness Mode, %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102173CB0);
      if (a1[31] == 1)
        v5 = "Enabled";
      else
        v5 = "Disabled";
      v9 = 136446210;
      v10 = v5;
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "CM Phone Fitness Mode, %{public}s", &v9, v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierCompanion::updatePhoneFitnessMode()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    *(_DWORD *)buf = 5;
    return (*(uint64_t (**)(_DWORD *, uint8_t *, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, (char *)&v8 + 4, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_100B5C150(_DWORD *a1)
{
  const __CFBoolean *v2;
  const __CFBoolean *v3;
  int Value;
  int v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const __CFString *v13;
  __int16 v14;
  const __CFString *v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  const __CFString *v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  int v23;

  v2 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("EnableFitnessTracking"), CFSTR("com.apple.nanolifestyle.privacy"), CFSTR("mobile"), kCFPreferencesAnyHost);
  if (v2)
  {
    v3 = v2;
    Value = CFBooleanGetValue(v2);
    CFRelease(v3);
    if (Value)
      v5 = 1;
    else
      v5 = 2;
    if (v5 != a1[34])
    {
      a1[34] = v5;
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102173C90);
      v6 = qword_10229FF18;
      if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412802;
        v19 = CFSTR("com.apple.nanolifestyle.privacy");
        v20 = 2112;
        v21 = CFSTR("EnableFitnessTracking");
        v22 = 1026;
        v23 = Value;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WatchAppFitnessTracking: %@ %@ isEnabled=%{public}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF10 != -1)
          dispatch_once(&qword_10229FF10, &stru_102173C90);
        v12 = 138412802;
        v13 = CFSTR("com.apple.nanolifestyle.privacy");
        v14 = 2112;
        v15 = CFSTR("EnableFitnessTracking");
        v16 = 1026;
        v17 = Value;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "WatchAppFitnessTracking: %@ %@ isEnabled=%{public}d", &v12, 28);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierCompanion::updateWatchAppFitnessTracking()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      *(_DWORD *)buf = a1[34];
      v12 = 6;
      (*(void (**)(_DWORD *, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v12, buf, 1, 0xFFFFFFFFLL, 0);
    }
  }
  else
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102173C90);
    v7 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      v19 = CFSTR("EnableFitnessTracking");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "updateWatchAppFitnessTracking: %{public}@ returned nil", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102173C90);
      v12 = 138543362;
      v13 = CFSTR("EnableFitnessTracking");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 1, "updateWatchAppFitnessTracking: %{public}@ returned nil", &v12, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierCompanion::updateWatchAppFitnessTracking()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

uint64_t sub_100B5C518(_QWORD *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v3;
  const __CFString *v4;
  __CFNotificationCenter *v5;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = off_102173B20;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.tcc.access.changed"), 0);
  if (qword_102306DD0 != -1)
    dispatch_once(&qword_102306DD0, &stru_102173C50);
  if (qword_102306DD8 && off_1022F9B70[0]())
  {
    v3 = CFNotificationCenterGetDarwinNotifyCenter();
    v4 = (const __CFString *)off_1022F9B70[0]();
    CFNotificationCenterRemoveObserver(v3, a1, v4, 0);
  }
  if (qword_102306DE8 != -1)
    dispatch_once(&qword_102306DE8, &stru_102173C70);
  if (qword_102306DF0 && off_1022F9B78[0]())
  {
    v5 = CFNotificationCenterGetDarwinNotifyCenter();
    v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_1022F9B78[0]());
    CFNotificationCenterRemoveObserver(v5, a1, v6, 0);
  }
  v7 = a1[16];
  if (v7)
  {
    objc_msgSend(*(id *)(v7 + 16), "unregister:forNotification:", *(_QWORD *)(v7 + 8), 11);
    v8 = a1[16];
    a1[16] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    a1[16] = 0;
  }
  return sub_1008BCFFC(a1);
}

void sub_100B5C684(_QWORD *a1)
{
  sub_100B5C518(a1);
  operator delete();
}

BOOL sub_100B5C6A8(uint64_t a1)
{
  NSObject *v1;
  _BOOL8 result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 109))
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102173C90);
    v1 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#SystemState, Overriding device activation status check.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102173C90);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Overriding device activation status check.", v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierCompanion::isDeviceActivated() const", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return 1;
  }
  if (qword_102306DD0 != -1)
    dispatch_once(&qword_102306DD0, &stru_102173C50);
  if (qword_102306DD8 && (off_1022F9B88() & 1) != 0)
    return 1;
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102173C90);
  v3 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#SystemState, Device is not activated, suspending activity tracking.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102173C90);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Device is not activated, suspending activity tracking.", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierCompanion::isDeviceActivated() const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

BOOL sub_100B5C9B4()
{
  NSObject *v0;
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _WORD v8[7];
  char v9;
  uint8_t buf[1640];

  v9 = 0;
  if (!TCCAccessGetOverride(kTCCServiceMotion, &v9))
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102173C90);
    v0 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#SystemState, Failed to get TCC for motion, suspending activity tracking.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102173C90);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Failed to get TCC for motion, suspending activity tracking.", v8, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierCompanion::isFitnessTrackingEnabled() const", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  if (v9)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102173C90);
    v1 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#SystemState, Fitness tracking is disabled, suspending activity tracking.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102173C90);
      v8[0] = 0;
      LODWORD(v7) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Fitness tracking is disabled, suspending activity tracking.", v8, v7);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierCompanion::isFitnessTrackingEnabled() const", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  return v9 == 0;
}

void sub_100B5CC98(uint64_t a1)
{
  int v2;
  int v3;
  _BOOL4 v4;
  NSObject *v5;
  void *v6;
  ALActivityLog *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  _BOOL4 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  _BOOL4 v21;

  v2 = sub_100186264(a1);
  BYTE4(v10) = v2;
  v3 = *(unsigned __int8 *)(a1 + 121);
  *(_WORD *)((char *)&v10 + 5) = *(unsigned __int8 *)(a1 + 121);
  v4 = 0;
  if (sub_100186264(a1))
    v4 = *(_BYTE *)(a1 + 121) != 0;
  HIBYTE(v10) = v4;
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102173C90);
  v5 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240704;
    v17 = v2;
    v18 = 1026;
    v19 = v3;
    v20 = 1026;
    v21 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#SystemState, Companion, Enabled, %{public}d, DeviceActivated, %{public}d, allowed, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102173C90);
    v11[0] = 67240704;
    v11[1] = v2;
    v12 = 1026;
    v13 = v3;
    v14 = 1026;
    v15 = v4;
    LODWORD(v10) = 20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Companion, Enabled, %{public}d, DeviceActivated, %{public}d, allowed, %{public}d", v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFitnessTrackingNotifierCompanion::notifyClients()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_DWORD *)buf = 0;
  if (sub_1001B7864(a1, (int *)buf, 1))
  {
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, (char *)&v10 + 4, 1, 0xFFFFFFFFLL, 0);
  }
  *(_DWORD *)buf = 6;
  if (sub_1001B7864(a1, (int *)buf, 1))
  {
    *(_DWORD *)buf = *(_DWORD *)(a1 + 136);
    v11[0] = 6;
    (*(void (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v11, buf, 1, 0xFFFFFFFFLL, 0);
  }
  v6 = objc_autoreleasePoolPush();
  v7 = objc_alloc_init(ALActivityLog);
  -[ALActivityLog setTimestamp:](v7, "setTimestamp:", CFAbsoluteTimeGetCurrent());
  -[ALActivityLog setFitnessTracking:](v7, "setFitnessTracking:", objc_alloc_init(ALCMFitnessTracking));
  -[ALCMFitnessTracking setFitnessTrackingEnabled:](-[ALActivityLog fitnessTracking](v7, "fitnessTracking"), "setFitnessTrackingEnabled:", BYTE4(v10));
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v7);
  objc_autoreleasePoolPop(v6);
}

uint64_t sub_100B5CFB4()
{
  const char *v0;
  _BYTE v2[143];
  BOOL v3;

  if (qword_102306DE8 != -1)
    dispatch_once(&qword_102306DE8, &stru_102173C70);
  if (!qword_102306DF0 || !off_1022F9B80[0]())
    return 2;
  v3 = 0;
  sub_1005695B4((uint64_t)v2, CFSTR("com.apple.nanolifestyle"), 1, (uint64_t)CFSTR("mobile"));
  v0 = (const char *)objc_msgSend((id)off_1022F9B80[0](), "UTF8String");
  sub_1001E4874((uint64_t)v2, v0, &v3);
  sub_100569628(v2);
  if (v3)
    return 1;
  else
    return 2;
}

void sub_100B5D07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100569628(&a9);
  _Unwind_Resume(a1);
}

void sub_100B5D090(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B5D0BC(id a1)
{
  qword_102306DD8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
}

uint64_t sub_100B5D0E4()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102306DD0 != -1)
    dispatch_once(&qword_102306DD0, &stru_102173C50);
  v0 = (uint64_t *)dlsym((void *)qword_102306DD8, "kNotificationActivationStateChanged");
  if (v0)
  {
    result = *v0;
    qword_102306DE0 = result;
  }
  else
  {
    result = qword_102306DE0;
  }
  off_1022F9B70[0] = sub_100B5D15C;
  return result;
}

uint64_t sub_100B5D15C()
{
  return qword_102306DE0;
}

uint64_t sub_100B5D168(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(a1 + 32);
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 208))(v1);
  if (v1[121] != (_DWORD)result)
  {
    v1[121] = result;
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 224))(v1);
  }
  return result;
}

void sub_100B5D1BC(id a1)
{
  qword_102306DF0 = (uint64_t)dlopen("/System/Library/Frameworks/HealthKit.framework/HealthKit", 2);
}

uint64_t sub_100B5D1E4()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102306DE8 != -1)
    dispatch_once(&qword_102306DE8, &stru_102173C70);
  v0 = (uint64_t *)dlsym((void *)qword_102306DF0, "HKStandalonePhoneFitnessModeDidUpdateNotification");
  if (v0)
  {
    result = *v0;
    qword_102306DF8 = result;
  }
  else
  {
    result = qword_102306DF8;
  }
  off_1022F9B78[0] = sub_100B5D25C;
  return result;
}

uint64_t sub_100B5D25C()
{
  return qword_102306DF8;
}

uint64_t sub_100B5D268(uint64_t a1)
{
  return sub_100B5BF2C(*(_DWORD **)(a1 + 32));
}

void sub_100B5D270(id a1)
{
  qword_10229FF18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fitness");
}

uint64_t sub_100B5D29C()
{
  if (qword_102306DD0 != -1)
    dispatch_once(&qword_102306DD0, &stru_102173C50);
  off_1022F9B88 = (uint64_t (*)())dlsym((void *)qword_102306DD8, "MAGetActivationState");
  return off_1022F9B88();
}

uint64_t sub_100B5D2F0()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102306DE8 != -1)
    dispatch_once(&qword_102306DE8, &stru_102173C70);
  v0 = (uint64_t *)dlsym((void *)qword_102306DF0, "HKIsStandalonePhoneFitnessModeDefaultsKey");
  if (v0)
  {
    result = *v0;
    qword_102306E00 = result;
  }
  else
  {
    result = qword_102306E00;
  }
  off_1022F9B80[0] = sub_100B5D368;
  return result;
}

uint64_t sub_100B5D368()
{
  return qword_102306E00;
}

void sub_100B5D374(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100B5D3A0()
{
  operator new();
}

void sub_100B5D3F8()
{
  operator delete();
}

void sub_100B5D41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __CFNotificationCenter *LocalCenter;
  uint8_t buf[8];
  std::__shared_weak_count *v11;

  *(_QWORD *)a1 = off_102173CE0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0x40D5180000000000;
  v4 = (void *)(a1 + 24);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)buf, "CleanupInterval", v4);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (objc_opt_class(SSDevice, v5))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, *(const void **)(a1 + 8), (CFNotificationCallback)sub_100B5DACC, SSDeviceStoreFrontChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  sub_1001B6A0C();
}

void sub_100B5D9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a21 < 0)
    operator delete(__p);
  v29 = v26[8];
  v26[8] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = v26[7];
  v26[7] = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = v26[6];
  v26[6] = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v26[5];
  v26[5] = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *v27;
  *v27 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  _Unwind_Resume(exception_object);
}

void sub_100B5DACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLTilesManager::onStoreFrontDidChangeNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173D50);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onStoreFrontDidChangeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173D50);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onStoreFrontDidChangeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100B5ECD0;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100B5DCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B5DCEC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTilesManager::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173D50);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173D50);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100FB4634(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B5DEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B5DED4(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTilesManager::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173D50);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173D50);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100FB1EC0(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B5E09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B5E0BC(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTilesManager::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173D50);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173D50);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100FB441C(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B5E284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B5E2A4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTilesManager::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173D50);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173D50);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100FBEE94(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B5E46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100B5E48C(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v2;
  xpc_activity_state_t state;
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _QWORD block[5];
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v2 = *(_QWORD *)(a1 + 32);
  state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173D70);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TileMgr,timer handler triggered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173D70);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileMgr,timer handler triggered", v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CLTilesManagerExternal::CLTilesManagerExternal(CLTilesManager *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v5 = objc_msgSend(objc_msgSend(*(id *)(v2 + 16), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100B5E7B8;
    block[3] = &unk_10212ECA0;
    block[4] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    v6 = state;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173D70);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TileMgr,timer handler triggered with unexpected state %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173D70);
      v13[0] = 67240192;
      v13[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileMgr,timer handler triggered with unexpected state %{public}d", v13, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CLTilesManagerExternal::CLTilesManagerExternal(CLTilesManager *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

id sub_100B5E7B8(uint64_t a1)
{
  return sub_100B5E7C0(*(_QWORD *)(a1 + 32));
}

id sub_100B5E7C0(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102173D70);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TileMgr,CLTilesManagerExternal onCleanupAgedTiles triggered", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173D70);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileMgr,CLTilesManagerExternal onCleanupAgedTiles triggered", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManagerExternal::onCleanupAgedTiles()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100FB3290(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100B5E958(uint64_t a1, uint64_t a2)
{
  __CFNotificationCenter *LocalCenter;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_102173CE0;
  if (objc_opt_class(SSDevice, a2))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(LocalCenter, *(const void **)(a1 + 8), SSDeviceStoreFrontChangedNotification, 0);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102173D90);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TileMgr,unregistering xpc activity", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173D90);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "TileMgr,unregistering xpc activity", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual CLTilesManagerExternal::~CLTilesManagerExternal()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  xpc_activity_unregister("com.apple.locationd.CLTilesManagerExternal");
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_100B5EBA8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100B5EBB8(uint64_t a1, uint64_t a2)
{
  sub_100B5E958(a1, a2);
  operator delete();
}

id sub_100B5EBDC(uint64_t a1, uint64_t a2)
{
  id result;

  result = (id)objc_opt_class(SSDevice, a2);
  if (result)
    return _objc_msgSend(objc_msgSend(+[SSDevice currentDevice](SSDevice, "currentDevice"), "storeFrontIdentifierPromise"), "resultWithTimeout:error:", 0, 5.0);
  return result;
}

BOOL sub_100B5EC24(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLDataProtectionManager")), "syncgetDataAvailability") != 1;
}

id sub_100B5EC54(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "isServiceEnabled:", CFSTR("CLSuggestedActionManager"));
}

id sub_100B5EC74(uint64_t a1)
{
  id v1;
  uint64_t *v2;

  v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  if (byte_102306E1F >= 0)
    v2 = &qword_102306E08;
  else
    v2 = (uint64_t *)qword_102306E08;
  return objc_msgSend(v1, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

uint64_t sub_100B5ECD0(_QWORD *a1)
{
  return sub_100FBF81C(a1[4], a1[5], a1[6], a1[7], a1[8]);
}

void sub_100B5ECE4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B5ED10(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B5ED3C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100B5ED68()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C16CCC;
      v1[3] = unk_101C16CDC;
      v1[4] = xmmword_101C16CEC;
      v1[0] = xmmword_101C16CAC;
      v1[1] = unk_101C16CBC;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100B5EE3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100B5EE54()
{
  sub_1015A2E04(&qword_102306E08, "TilesManager");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102306E08, (void *)&_mh_execute_header);
}

void sub_100B5EE98()
{
  sub_100B5EF08();
}

void sub_100B5EEA8()
{
  sub_100B5FF9C();
}

void sub_100B5EEB8()
{
  sub_100B5FF9C();
}

void sub_100B5EEC8(uint64_t a1)
{
  if (a1)
    sub_100B5FD28(a1 - 8);
  else
    sub_100B5FD28(0);
}

void sub_100B5EED8(uint64_t a1)
{
  if (a1)
    sub_100B5FFD0(a1 - 8);
  else
    sub_100B5FFD0(0);
}

void sub_100B5EEE8(uint64_t a1)
{
  if (a1)
    sub_100B60164(a1 - 8);
  else
    sub_100B60164(0);
}

void sub_100B5EEF8(uint64_t a1)
{
  if (a1)
    sub_100B5F1D4(a1 - 8);
  else
    sub_100B5F1D4(0);
}

void sub_100B5EF08()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_102173F08);
  v0 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Session started", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "Session started", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiController::doStartSession(const EStartOfWorkout *)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
  sub_100B5F0AC();
}

void sub_100B5F0AC()
{
  operator new();
}

void sub_100B5F1B0()
{
  operator delete();
}

void sub_100B5F1D4(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  sub_100B5F35C(a1);
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_102173F08);
  v1 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Session ended", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "Session ended", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiController::doEndSession(const EEndOfWorkout *)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

void sub_100B5F35C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  long double v31;
  BOOL v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  uint8_t *v46;
  double v47;
  double v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  long double v74;
  __int16 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  long double v85;
  double v86;
  uint8_t buf[4];
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  long double v100;
  __int16 v101;
  uint64_t v102;

  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  if (*(double *)(a1 + 1520) == 2.22507386e-308)
  {
    sub_100B6055C(a1);
    return;
  }
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_102173F08);
  v2 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Run stopped", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    LOWORD(v77) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "Run stopped", &v77, 2);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v3 = *(_QWORD **)(a1 + 40);
  if (v3)
  {
    if (((*(uint64_t (**)(_QWORD *, __int128 *, double))(*v3 + 24))(v3, &v62, *(double *)(a1 + 104)) & 1) != 0)
      goto LABEL_20;
    v3 = *(_QWORD **)(a1 + 40);
  }
  v77 = 0u;
  v78 = 0u;
  memset(v66, 0, sizeof(v66));
  if (sub_100B606A4(v3, (uint64_t)&v77, v66, *(double *)(a1 + 104)))
  {
    v4 = *((_QWORD *)&v78 + 1);
    if (*((_QWORD *)&v78 + 1) == *(_QWORD *)v78)
      v4 = *(_QWORD *)(v78 - 8) + 4096;
    v5 = *(_OWORD *)(v4 - 64);
    v6 = *(_OWORD *)(v4 - 48);
    v7 = *(_OWORD *)(v4 - 16);
    v64 = *(_OWORD *)(v4 - 32);
    v65 = v7;
    v62 = v5;
    v63 = v6;
  }
  else
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v8 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "last elevation entry not found", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_102173F08);
      LOWORD(v48) = 0;
      LODWORD(v47) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 2, "last elevation entry not found", &v48, *(_QWORD *)&v47);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
  }
LABEL_20:
  v9 = *(_QWORD **)(a1 + 48);
  if (!v9)
    goto LABEL_23;
  if (((*(uint64_t (**)(_QWORD *, __int128 *, double))(*v9 + 24))(v9, &v50, *(double *)(a1 + 104)) & 1) == 0)
  {
    v9 = *(_QWORD **)(a1 + 48);
LABEL_23:
    v77 = 0u;
    v78 = 0u;
    memset(v66, 0, sizeof(v66));
    if (sub_100AD19A8(v9, (uint64_t)&v77, v66, *(double *)(a1 + 104)))
    {
      v13 = *((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1) == *(_QWORD *)v78)
        v13 = *(_QWORD *)(v78 - 8) + 4032;
      v14 = *(_OWORD *)(v13 - 192);
      v15 = *(_OWORD *)(v13 - 176);
      v16 = *(_OWORD *)(v13 - 144);
      v52 = *(_OWORD *)(v13 - 160);
      v53 = v16;
      v50 = v14;
      v51 = v15;
      v17 = *(_OWORD *)(v13 - 128);
      v18 = *(_OWORD *)(v13 - 112);
      v19 = *(_OWORD *)(v13 - 80);
      v56 = *(_OWORD *)(v13 - 96);
      v57 = v19;
      v54 = v17;
      v55 = v18;
      v10 = *(_OWORD *)(v13 - 64);
      v11 = *(_OWORD *)(v13 - 48);
      v12 = *(_OWORD *)(v13 - 32);
      v20 = *(_OWORD *)(v13 - 16);
      v60 = v12;
      v61 = v20;
      v58 = v10;
      v59 = v11;
    }
    else
    {
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_102173F08);
      v21 = qword_10229FE28;
      if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "last odometer entry not found", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE20 != -1)
          dispatch_once(&qword_10229FE20, &stru_102173F08);
        LOWORD(v48) = 0;
        LODWORD(v47) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 2, "last odometer entry not found", &v48, *(_QWORD *)&v47);
        v46 = (uint8_t *)v45;
        sub_100512490("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v45);
        if (v46 != buf)
          free(v46);
      }
    }
  }
  LODWORD(v10) = DWORD1(v63);
  LODWORD(v11) = v63;
  *(double *)&v22 = (double)(unint64_t)v11;
  v23 = (double)(unint64_t)v10 - *(double *)&v22;
  LODWORD(v22) = *(_DWORD *)(a1 + 268);
  LODWORD(v12) = *(_DWORD *)(a1 + 264);
  v24 = (v23 + (double)(unint64_t)v12 - (double)v22) / 100.0;
  v25 = fabs(v24);
  *(double *)&v11 = *(double *)&v53 - *(double *)(a1 + 360);
  v26 = sqrt(*(double *)&v11 * *(double *)&v11 + v24 * v24);
  v27 = *(double *)(a1 + 104);
  v28 = *(double *)(a1 + 1520);
  if (v27 - v28 == 0.0)
    v29 = 0.0;
  else
    v29 = v26 / (v27 - v28);
  v79 = 0;
  v77 = 0u;
  v78 = 0u;
  v80 = v28;
  v81 = v27;
  v82 = v26;
  v83 = v29;
  v84 = *(double *)(a1 + 1536);
  v30 = v84;
  v31 = atan2(v25, *(long double *)&v11);
  v85 = v31;
  v86 = v25;
  v32 = v30 < 4.5 && v26 < 75.0;
  if (v32 || v24 == 0.0 || vabdd_f64(v27, v28) < 3.0)
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v35 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134219008;
      v88 = v28;
      v89 = 2048;
      v90 = v27;
      v91 = 2048;
      v92 = v26;
      v93 = 2048;
      v94 = v30;
      v95 = 2048;
      v96 = v25;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Suppressing run,startTime,%f,endTime,%f,distance,%f,maxSpeed,%f,elevation,%f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_102173F08);
      LODWORD(v66[0]) = 134219008;
      *(double *)((char *)v66 + 4) = v28;
      WORD6(v66[0]) = 2048;
      *(double *)((char *)v66 + 14) = v27;
      WORD3(v66[1]) = 2048;
      *((double *)&v66[1] + 1) = v26;
      v67 = 2048;
      v68 = v30;
      v69 = 2048;
      v70 = v25;
      LODWORD(v47) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "Suppressing run,startTime,%f,endTime,%f,distance,%f,maxSpeed,%f,elevation,%f", COERCE_DOUBLE(v66), v47, v48, v49, *(double *)&v50);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    sub_101328F30(a1 + 504);
  }
  else
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v33 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
    {
      v34 = *(_QWORD *)(a1 + 1528);
      *(_DWORD *)buf = 134219776;
      v88 = v28;
      v89 = 2048;
      v90 = v27;
      v91 = 2048;
      v92 = v26;
      v93 = 2048;
      v94 = v25;
      v95 = 2048;
      v96 = v29;
      v97 = 2048;
      v98 = v30;
      v99 = 2048;
      v100 = v31;
      v101 = 2048;
      v102 = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "End of run stats,startTime,%lf,endTime,%lf,runDistance,%f,runElevationDescent,%f,runAvgSpeed,%f,runMaxSpeed,%f,runSlope,%f,runMaxFilteredSpeed,%f", buf, 0x52u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_102173F08);
      v38 = *(_QWORD *)(a1 + 1528);
      LODWORD(v66[0]) = 134219776;
      *(double *)((char *)v66 + 4) = v28;
      WORD6(v66[0]) = 2048;
      *(double *)((char *)v66 + 14) = v27;
      WORD3(v66[1]) = 2048;
      *((double *)&v66[1] + 1) = v26;
      v67 = 2048;
      v68 = v25;
      v69 = 2048;
      v70 = v29;
      v71 = 2048;
      v72 = v30;
      v73 = 2048;
      v74 = v31;
      v75 = 2048;
      v76 = v38;
      LODWORD(v47) = 82;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "End of run stats,startTime,%lf,endTime,%lf,runDistance,%f,runElevationDescent,%f,runAvgSpeed,%f,runMaxSpeed,%f,runSlope,%f,runMaxFilteredSpeed,%f", COERCE_DOUBLE(v66), v47, v48, v49, *(double *)&v50, *((double *)&v50 + 1), *(double *)&v51, *((double *)&v51 + 1));
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    sub_1007AA850(*(_QWORD *)(a1 + 32), (uint64_t)&v77);
    sub_1013289E0(a1 + 504, (uint64_t)&v77, 1);
  }
  sub_100B6055C(a1);
}

void sub_100B5FD28(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double v6;
  BOOL v7;
  double v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[32];
  double v14;
  double v15;

  if (*(double *)(a1 + 1520) == 2.22507386e-308)
  {
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v2 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Run started", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_102173F08);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "Run started", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLSkiController::doRun(const EInRun *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a1 + 120);
  }
  if (*(double *)(a1 + 256) == 2.22507386e-308)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v3 + 24))(v3, a1 + 248, *(double *)(a1 + 120));
  }
  if (*(double *)(a1 + 312) == 2.22507386e-308)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v4 + 24))(v4, a1 + 312, *(double *)(a1 + 120));
  }
  v5 = (*(uint64_t (**)(_QWORD, uint8_t *, double))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), buf, *(double *)(a1 + 120));
  v6 = v14;
  if (v5)
    v7 = v14 == -1.0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = v15;
    v9 = *(double *)(a1 + 1536);
    if (v15 > v9)
    {
      sub_101328F90(a1 + 504, v15);
      v6 = v14;
      v8 = v15;
      v9 = *(double *)(a1 + 1536);
    }
    if (v6 < *(double *)(a1 + 1528))
      v6 = *(double *)(a1 + 1528);
    *(double *)(a1 + 1528) = v6;
    if (v8 < v9)
      v8 = v9;
    *(double *)(a1 + 1536) = v8;
  }
}

void sub_100B5FF9C()
{
  sub_100B5F0AC();
}

void sub_100B5FFD0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  sub_100B5F35C(a1);
  *(_DWORD *)(a1 + 128) = 3;
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_102173F08);
  v2 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "transitioning to low power mode: start of lift", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "transitioning to low power mode: start of lift", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiController::doLowPower(const ELift *)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_100B60164(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  sub_100B5F35C(a1);
  *(_DWORD *)(a1 + 128) = 4;
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_102173F08);
  v2 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "transitioning to low power mode: sedentary", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "transitioning to low power mode: sedentary", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLSkiController::doLowPower(const ESedentaryTimeout *)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

uint64_t sub_100B602F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64x2_t v5;
  char v6;

  *(_QWORD *)(a1 + 8) = &unk_102173DB0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 10;
  *(_WORD *)(a1 + 24) = 512;
  *(_QWORD *)a1 = off_102173EB0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = vdupq_n_s64(0x10000000000000uLL);
  *(int64x2_t *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 120) = 0x10000000000000;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 192) = 0x10000000000000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 256) = 0x10000000000000;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 312) = 0x10000000000000;
  *(_OWORD *)(a1 + 168) = 0u;
  sub_1013268DC(a1 + 504);
  *(int64x2_t *)(a1 + 1520) = v5;
  *(_QWORD *)(a1 + 1536) = 0x10000000000000;
  sub_10023195C(v3, 1, (uint64_t)&v6);
  return a1;
}

void sub_100B60420(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  sub_10047F25C(v3);
  sub_10047F25C(v2);
  v6 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v4;
  *v4 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B60474(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *a1 = off_102173EB0;
  sub_10023195C((uint64_t)(a1 + 1), 2, (uint64_t)&v5);
  sub_10047F25C(a1 + 17);
  sub_10047F25C(a1 + 7);
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_100B604FC(_QWORD *a1)
{
  sub_100B60474(a1);
  operator delete();
}

uint64_t sub_100B60520(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    sub_1004C5730(v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return sub_1004C5730(result);
  return result;
}

int64x2_t sub_100B6055C(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t result;

  v2 = *(void ***)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 96) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 72);
      v2 = (void **)(*(_QWORD *)(a1 + 64) + 8);
      *(_QWORD *)(a1 + 64) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 512;
  }
  *(_QWORD *)(a1 + 88) = v6;
LABEL_8:
  sub_100B60824(a1);
  v7 = *(void ***)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 176) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 152);
      v7 = (void **)(*(_QWORD *)(a1 + 144) + 8);
      *(_QWORD *)(a1 + 144) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 256;
    goto LABEL_14;
  }
  if (v9 >> 3 == 2)
  {
    v11 = 512;
LABEL_14:
    *(_QWORD *)(a1 + 168) = v11;
  }
  *(_OWORD *)(a1 + 248) = xmmword_101C16D60;
  v12 = a1 + 248;
  *(_QWORD *)(v12 - 128) = 0x10000000000000;
  *(_OWORD *)(v12 - 64) = xmmword_101C16D60;
  *(_OWORD *)(v12 - 48) = 0u;
  *(_OWORD *)(v12 - 32) = 0u;
  *(_OWORD *)(v12 - 16) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_QWORD *)(v12 + 64) = 0x10000000000000;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_QWORD *)(v12 + 248) = 0;
  *(_QWORD *)(v12 + 1288) = 0x10000000000000;
  result = vdupq_n_s64(0x10000000000000uLL);
  *(int64x2_t *)(v12 + 1272) = result;
  *(int64x2_t *)(v12 - 144) = result;
  *(_DWORD *)(v12 - 120) = 0;
  return result;
}

BOOL sub_100B606A4(_QWORD *a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _BOOL8 result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;

  v4 = a1[4];
  v5 = (_QWORD *)(v4 + 8 * (a1[7] >> 6));
  if (a1[5] == v4)
    v6 = 0;
  else
    v6 = *v5 + ((a1[7] & 0x3FLL) << 6);
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  v8 = a1[8];
  if (!v8)
    return 0;
  v9 = a1[7] + v8;
  v10 = a1[4];
  v11 = a1[5];
  v12 = (_QWORD *)(v10 + 8 * (v9 >> 6));
  if (*(double *)(*(_QWORD *)(v10 + (((v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v9 - 1) & 0x3F) << 6) + 8) < a4)
  {
    if (v11 == v10)
      v13 = 0;
    else
      v13 = *v12 + ((v9 & 0x3F) << 6);
    result = 0;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v13;
    return result;
  }
  if (v11 == v10)
    v15 = 0;
  else
    v15 = *v12 + ((v9 & 0x3F) << 6);
  v16 = a3[3];
  if (v15 == v16)
  {
LABEL_22:
    v21 = *(_QWORD *)(a2 + 24);
    return v21 != v16;
  }
  v17 = *v12;
  v18 = v15;
  v19 = v12;
  while (1)
  {
    v20 = v18 - v17;
    if (v18 == v17)
      break;
    if (*(double *)(v18 - 56) <= a4)
      goto LABEL_23;
LABEL_21:
    v18 -= 64;
    if (v18 == v16)
      goto LABEL_22;
  }
  v17 = *(v19 - 1);
  if (*(double *)(v17 + 4040) > a4)
  {
    v18 = v17 + 4096;
    --v19;
    goto LABEL_21;
  }
LABEL_23:
  v22 = v20 >> 6;
  if (v20 < -63)
  {
    v25 = 62 - v22;
    v23 = ~(_BYTE)v25;
    v24 = &v19[-(v25 >> 6)];
  }
  else
  {
    v23 = v22 + 1;
    v24 = &v19[(unint64_t)(v22 + 1) >> 6];
  }
  v21 = *v24 + ((unint64_t)(v23 & 0x3F) << 6);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 24) = v21;
  v16 = a3[3];
  return v21 != v16;
}

void sub_100B60824(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_101328678(a1 + 504, 0);
}

uint64_t sub_100B60878(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_102173F08);
  v2 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "resuming tracking", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "resuming tracking", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSkiController::resume()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_10023195C(a1 + 8, 6, (uint64_t)buf);
}

uint64_t sub_100B60A18(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2
    && *(_QWORD *)(a1 + 40)
    && (*(unsigned int (**)(uint64_t, double))(*(_QWORD *)v2 + 48))(v2, *(double *)(a1 + 120)))
  {
    return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40), *(double *)(a1 + 120));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100B60A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  double Current;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  char v11;
  __int128 v12;
  _BYTE v13[17];
  _BYTE v14[31];
  char v15;
  __int128 v16;
  _OWORD v17[2];

  v4 = (_QWORD *)(a1 + 56);
  *(_QWORD *)v13 = CFAbsoluteTimeGetCurrent();
  sub_1000D796C(v4, (double *)v13);
  Current = CFAbsoluteTimeGetCurrent();
  v6 = Current;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v7 + 40))(v7, Current);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v8 + 40))(v8, v6);
  result = sub_100B60520(a1);
  if (*(_QWORD *)(a1 + 96)
    && (*(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                      + ((*(_QWORD *)(a1 + 88) >> 6) & 0x3FFFFFFFFFFFFF8))
                                          + 8 * (*(_QWORD *)(a1 + 88) & 0x1FFLL)),
        result = sub_100B60A18(a1),
        (_DWORD)result))
  {
    v10 = 0;
    v11 = 0;
    do
    {
      result = sub_100B60C40(a1);
      if ((result & 1) != 0)
        break;
      sub_100B6101C(a1, (uint64_t)v13, *(double *)(a1 + 120));
      v11 = v13[0];
      v16 = *(_OWORD *)&v13[1];
      v17[0] = *(_OWORD *)v14;
      *(_OWORD *)((char *)v17 + 15) = *(_OWORD *)&v14[15];
      v10 = v15;
      *(int64x2_t *)(a1 + 88) = vaddq_s64(*(int64x2_t *)(a1 + 88), (int64x2_t)xmmword_101B9DFC0);
      result = sub_10047F604((uint64_t)v4, 1);
      if (!*(_QWORD *)(a1 + 96))
        break;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                    + ((*(_QWORD *)(a1 + 88) >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (*(_QWORD *)(a1 + 88) & 0x1FFLL));
      result = sub_100B60A18(a1);
    }
    while ((_DWORD)result);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 128);
  *(_BYTE *)(a2 + 8) = v11;
  v12 = v17[0];
  *(_OWORD *)(a2 + 9) = v16;
  *(_OWORD *)(a2 + 25) = v12;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)v17 + 15);
  *(_BYTE *)(a2 + 56) = v10;
  return result;
}

BOOL sub_100B60C40(uint64_t a1)
{
  uint64_t v2;
  double v3;
  int v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  _BOOL8 result;
  int v9;
  NSObject *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  sub_100B61424(a1);
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2)
    return 0;
  v3 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 144)
                             + (((unint64_t)(v2 + *(_QWORD *)(a1 + 168) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v2 + *(_QWORD *)(a1 + 168) - 1) & 0x1FF));
  if (v3 <= -39.9287987)
  {
    v7 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = v7;
    *(_QWORD *)(a1 + 112) = v7;
    sub_10023195C(a1 + 8, 0, (uint64_t)buf);
    return 0;
  }
  if (v3 < 39.9287987)
  {
    if (*(double *)(a1 + 120) - *(double *)(a1 + 112) >= 300.0)
    {
      v4 = *(unsigned __int8 *)(a1 + 24);
      sub_100B610F4((_QWORD *)a1);
      sub_10023195C(a1 + 8, 4, (uint64_t)&v14 + 7);
      if (qword_10229FE20 != -1)
        dispatch_once(&qword_10229FE20, &stru_102173F08);
      v5 = qword_10229FE28;
      if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(unsigned __int8 *)(a1 + 24);
        *(_DWORD *)buf = 67109632;
        v17 = v4;
        v18 = 1024;
        v19 = 4;
        v20 = 1024;
        v21 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "State from, %d, event, %d, to, %d", buf, 0x14u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_10229FE20 == -1)
      {
LABEL_23:
        LODWORD(v14) = 20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "State from, %d, event, %d, to, %d", &v15, v14);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLSkiController::processInputsAndTransition()", "%s\n", v12);
        if (v13 != buf)
          free(v13);
        return 1;
      }
LABEL_25:
      dispatch_once(&qword_10229FE20, &stru_102173F08);
      goto LABEL_23;
    }
    return 0;
  }
  result = sub_100B61728((_QWORD *)a1);
  if (result)
  {
    v9 = *(unsigned __int8 *)(a1 + 24);
    sub_100B610F4((_QWORD *)a1);
    sub_10023195C(a1 + 8, 3, (uint64_t)&v14 + 7);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v10 = qword_10229FE28;
    if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)buf = 67109632;
      v17 = v9;
      v18 = 1024;
      v19 = 3;
      v20 = 1024;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "State from, %d, event, %d, to, %d", buf, 0x14u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 == -1)
      goto LABEL_23;
    goto LABEL_25;
  }
  return result;
}

void sub_100B6101C(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6[24];
  _BYTE v7[64];

  if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v7))
    sub_101328054(a1 + 504, (uint64_t)v7);
  if ((*(unsigned int (**)(_QWORD, uint64_t *, double))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v6, a3))
  {
    sub_101328330(a1 + 504, v6);
  }
  sub_101327224(a1 + 504, a2);
}

uint64_t sub_100B610B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t sub_100B610C8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void sub_100B610E0(uint64_t a1, unsigned __int8 *a2)
{
  sub_1013268E0(a1 + 504, *(uint64_t **)(a1 + 32), a2);
}

uint64_t sub_100B610F4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  double *v5;
  uint64_t v6;
  _QWORD *v7;
  double *v8;
  NSObject *v9;
  void **v10;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;
  _BYTE buf[12];
  char v21;
  int v22;
  _BYTE *v23;
  void *__p[2];
  char v25;

  sub_1004E5E40((uint64_t)&v16);
  v2 = a1[18];
  if (a1[19] != v2)
  {
    v3 = a1[21];
    v4 = (_QWORD *)(v2 + 8 * (v3 >> 9));
    v5 = (double *)(*v4 + 8 * (v3 & 0x1FF));
    v6 = *(_QWORD *)(v2 + (((a1[22] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[22] + v3) & 0x1FF);
    while (v5 != (double *)v6)
    {
      v7 = sub_100263F7C(&v16, (uint64_t)", ", 2);
      std::ostream::operator<<(v7, *v5++);
      if ((double *)((char *)v5 - *v4) == (double *)4096)
      {
        v8 = (double *)v4[1];
        ++v4;
        v5 = v8;
      }
    }
  }
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_102173F08);
  v9 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str(__p, v17);
    v10 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ElevationBuffer%s", buf, 0xCu);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102173F08);
    v12 = qword_10229FE28;
    std::stringbuf::str(buf, v17);
    if (v21 >= 0)
      v13 = buf;
    else
      v13 = *(_BYTE **)buf;
    v22 = 136315138;
    v23 = v13;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 0, "ElevationBuffer%s", (const char *)&v22);
    v15 = v14;
    if (v21 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLSkiController::logElevationRateBuffer()", "%s\n", v15);
    if (v15 != (char *)__p)
      free(v15);
  }
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

void sub_100B613F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B61424(uint64_t a1)
{
  _OWORD *v2;
  double v3;
  __int128 v4;
  __int128 v5;
  double v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  double v26;
  uint8_t buf[4];
  double v28;

  if ((*(unsigned int (**)(_QWORD, __int128 *, double))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), &v21, *(double *)(a1 + 120)))
  {
    v2 = (_OWORD *)(a1 + 184);
    v3 = *(double *)(a1 + 192);
    if (v3 == 2.22507386e-308)
    {
      v4 = v22;
      *v2 = v21;
      *(_OWORD *)(a1 + 200) = v4;
      v5 = v24;
      *(_OWORD *)(a1 + 216) = v23;
      *(_OWORD *)(a1 + 232) = v5;
      return;
    }
    v6 = *((double *)&v21 + 1) - v3;
    if (v6 <= 6.0)
    {
      if (v6 > 4.0)
      {
        v20 = ((double)(v22 - *(_DWORD *)(a1 + 200))
             - (double)(DWORD1(v22) - *(_DWORD *)(a1 + 204)))
            / v6;
        sub_1000D796C((_QWORD *)(a1 + 136), &v20);
        v12 = v22;
        *v2 = v21;
        *(_OWORD *)(a1 + 200) = v12;
        v13 = v24;
        *(_OWORD *)(a1 + 216) = v23;
        *(_OWORD *)(a1 + 232) = v13;
        if (qword_10229FE20 != -1)
          dispatch_once(&qword_10229FE20, &stru_102173F08);
        v14 = qword_10229FE28;
        if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v28 = v20;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "adding ElevationRate, %f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE20 != -1)
            dispatch_once(&qword_10229FE20, &stru_102173F08);
          v25 = 134217984;
          v26 = v20;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 1, "adding ElevationRate, %f", COERCE_DOUBLE(&v25));
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLSkiController::updateElevationRateBuffer()", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      goto LABEL_23;
    }
    v7 = *(void ***)(a1 + 144);
    v8 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 176) = 0;
    v9 = v8 - (_QWORD)v7;
    if (v9 >= 0x11)
    {
      do
      {
        operator delete(*v7);
        v10 = *(_QWORD *)(a1 + 152);
        v7 = (void **)(*(_QWORD *)(a1 + 144) + 8);
        *(_QWORD *)(a1 + 144) = v7;
        v9 = v10 - (_QWORD)v7;
      }
      while (v9 > 0x10);
    }
    if (v9 >> 3 == 1)
    {
      v11 = 256;
    }
    else
    {
      if (v9 >> 3 != 2)
      {
LABEL_22:
        v17 = v22;
        *v2 = v21;
        *(_OWORD *)(a1 + 200) = v17;
        v18 = v24;
        *(_OWORD *)(a1 + 216) = v23;
        *(_OWORD *)(a1 + 232) = v18;
        goto LABEL_23;
      }
      v11 = 512;
    }
    *(_QWORD *)(a1 + 168) = v11;
    goto LABEL_22;
  }
LABEL_23:
  v19 = *(_QWORD *)(a1 + 176);
  if (v19 >= 0xA)
  {
    do
    {
      *(_QWORD *)(a1 + 176) = v19 - 1;
      ++*(_QWORD *)(a1 + 168);
      sub_10047F604(a1 + 136, 1);
      v19 = *(_QWORD *)(a1 + 176);
    }
    while (v19 > 9);
  }
}

BOOL sub_100B61728(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  double **v4;
  double *v5;
  double *v6;
  uint64_t v7;
  unsigned int v8;
  double v9;
  double *v10;

  v1 = a1[22];
  if (v1 < 9)
    return 0;
  v2 = a1[18];
  if (a1[19] == v2)
    return 0;
  v3 = a1[21];
  v4 = (double **)(v2 + 8 * (v3 >> 9));
  v5 = *v4;
  v6 = &(*v4)[v3 & 0x1FF];
  v7 = *(_QWORD *)(v2 + (((v3 + v1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v3 + v1) & 0x1FF);
  if (v6 == (double *)v7)
    return 0;
  v8 = 0;
  do
  {
    v9 = *v6++;
    if (v9 >= 39.9287987)
      ++v8;
    if ((char *)v6 - (char *)v5 == 4096)
    {
      v10 = v4[1];
      ++v4;
      v5 = v10;
      v6 = v10;
    }
  }
  while (v6 != (double *)v7);
  return v8 > 4;
}

void sub_100B617C0(id a1)
{
  qword_10229FE28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

uint64_t sub_100B617EC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_102173FD0;
  free(*(void **)(a1 + 8));
  sub_1006CFD68((_QWORD *)(a1 + 24));
  return a1;
}

void sub_100B6182C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_102173FD0;
  free(*(void **)(a1 + 8));
  sub_1006CFD68((_QWORD *)(a1 + 24));
  operator delete();
}

BOOL sub_100B6187C(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x15));
  if (*(_QWORD *)(a1 + 40) == v5)
    v7 = 0;
  else
    v7 = *v6 + 192 * (v4 % 0x15);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (uint64_t *)(v10 + 8 * (v9 / 0x15));
  if (*(_QWORD *)(a1 + 40) == v10)
    v12 = 0;
  else
    v12 = *v11 + 192 * (v9 % 0x15);
  v13 = a3[3];
  if (v12 != v13)
  {
    v14 = *v11;
    v15 = 1.79769313e308;
    v16 = v12;
    v17 = v11;
    while (1)
    {
      v18 = v16;
      if (v16 == v14)
        v18 = *(v17 - 1) + 4032;
      v19 = vabdd_f64(*(double *)(v18 - 192), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v16;
        v14 = *v17;
        v20 = v16;
        if (v16 == *v17)
          v20 = *(v17 - 1) + 4032;
        v15 = v19;
        if (*(double *)(v20 - 192) == a4)
          break;
      }
      if (v16 == v14)
      {
        v21 = *--v17;
        v14 = v21;
        v16 = v21 + 4032;
      }
      v16 -= 192;
      v13 = a3[3];
      if (v16 == v13)
        return v13 != *(_QWORD *)(a2 + 24);
    }
    v13 = a3[3];
  }
  return v13 != *(_QWORD *)(a2 + 24);
}

BOOL sub_100B619D8(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * ((v4 + *(_QWORD *)(a1 + 56) - 1) / 0x15uLL))
                   + 192 * ((v4 + *(_QWORD *)(a1 + 56) - 1) % 0x15uLL));
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_100B6187C(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_100B61B1C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_102173FD0;
  free(*(void **)(a1 + 8));
  sub_1006CFD68((_QWORD *)(a1 + 24));
  operator delete();
}

void sub_100B61B6C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100B61B98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  sub_100263E50((uint64_t)v12);
  v4 = sub_100263F7C(&v13, (uint64_t)", ll, ", 6);
  v5 = *v4;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 12;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(v5 - 24) + 16) = 8;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  v6 = (_QWORD *)std::ostream::operator<<(v4, *(double *)(a1 + 4));
  v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
  v8 = *v7;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 24) = 12;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(v8 - 24) + 16) = 8;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v7, *(double *)(a1 + 12));
  sub_100263F7C(&v13, (uint64_t)", hAcc, ", 8);
  v9 = v12[0];
  *(_QWORD *)((char *)&v12[2] + *(_QWORD *)(v12[0] - 24)) = 2;
  *(_DWORD *)((char *)&v12[1] + *(_QWORD *)(v9 - 24)) |= 4u;
  std::ostream::operator<<(&v13, *(double *)(a1 + 20));
  std::stringbuf::str(a2, v14);
  *(_QWORD *)((char *)v12
  v13 = v10;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_100B61D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B61DD8()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C16DB4;
      v1[3] = unk_101C16DC4;
      v1[4] = xmmword_101C16DD4;
      v1[0] = xmmword_101C16D94;
      v1[1] = unk_101C16DA4;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100B61EAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

double sub_100B61EC4@<D0>(uint64_t a1@<X0>, float *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32_t v9;
  float32_t v10;
  float32_t v11;
  float v12;
  double result;

  v4 = *(float *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a1 + 12);
  v5 = a2[1];
  v6 = *(float *)(a1 + 4);
  v7 = a2[2];
  v8 = a2[3];
  v9 = (float)((float)((float)(v4 * v5) + (float)(a4.f32[0] * *a2)) - (float)(v6 * v7)) + (float)(*(float *)a1 * v8);
  v10 = (float)((float)((float)(a4.f32[0] * v5) - (float)(v4 * *a2)) + (float)(*(float *)a1 * v7)) + (float)(v6 * v8);
  v11 = (float)((float)((float)(v6 * *a2) - (float)(*(float *)a1 * v5)) + (float)(a4.f32[0] * v7)) + (float)(v4 * v8);
  v12 = (float)((float)-(float)(v6 * v5) - (float)(*(float *)a1 * *a2)) - (float)(v4 * v7);
  a3->f32[0] = v9;
  a3->f32[1] = v10;
  a4.f32[0] = v12 + (float)(a4.f32[0] * v8);
  a3->f32[2] = v11;
  a3->i32[3] = a4.i32[0];
  *(_QWORD *)&result = sub_10012C97C(a3, a4).u64[0];
  return result;
}

double sub_100B61F24@<D0>(float32x2_t *a1@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>)
{
  __int32 v3;
  double result;

  v3 = a1[1].i32[1];
  a3.f32[0] = -a1[1].f32[0];
  *(float32x2_t *)a2->f32 = vneg_f32(*a1);
  a2->i32[2] = a3.i32[0];
  a2->i32[3] = v3;
  *(_QWORD *)&result = sub_10012C97C(a2, a3).u64[0];
  return result;
}

float sub_100B61F44@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return sub_100B62FE4(a1, a2, 1.0);
}

void sub_100B61F4C(float *a1, uint64_t a2)
{
  int v3;
  int v4;
  float v5[9];

  sub_100B62FE4(a1, v5, -1.0);
  *(float *)a2 = sub_1005335A4((uint64_t)v5, (float *)a2);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
}

float sub_100B61F90@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return sub_100B62FE4(a1, a2, -1.0);
}

float sub_100B61F98(float *a1, float a2, float a3, float a4)
{
  float v5[3];
  float v6[9];

  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  sub_100B62FE4(a1, v6, -1.0);
  return sub_1005335A4((uint64_t)v6, v5);
}

double sub_100B61FD0(float32x4_t *a1, float *a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x4_t v9;
  double result;

  v4 = 0;
  v5 = 0.0;
  do
  {
    v5 = v5 + (float)(a2[v4] * a2[v4]);
    ++v4;
  }
  while (v4 != 3);
  v6 = sqrtf(v5);
  v7 = 0.5;
  v8 = v6 * 0.5;
  if ((float)(v6 * 0.5) > 0.0)
    v7 = (float)(sinf(v6 * 0.5) / v8) * 0.5;
  a1->f32[0] = v7 * *a2;
  a1->f32[1] = v7 * a2[1];
  a1->f32[2] = v7 * a2[2];
  v9.f32[0] = cosf(v8);
  a1->i32[3] = v9.i32[0];
  *(_QWORD *)&result = sub_10012C97C(a1, v9).u64[0];
  return result;
}

BOOL sub_100B62074(float *a1, float32x4_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8, float a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, float a18)
{
  unsigned __int8 v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  NSObject *v46;
  _BOOL8 v47;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  unint64_t i;
  uint64_t v80;
  float v81;
  unint64_t v82;
  float v83;
  unint64_t j;
  uint64_t v85;
  unint64_t v86;
  float32x4_t v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  float v91;
  unint64_t v92;
  uint64_t v93;
  float v94;
  float v95;
  float v96;
  unint64_t v97;
  float v98;
  unint64_t k;
  unint64_t v100;
  float v101;
  float v102;
  float *v103;
  float *v104;
  float *v105;
  NSObject *v106;
  const char *v107;
  uint8_t *v108;
  const char *v109;
  uint8_t *v110;
  NSObject *v111;
  const char *v112;
  uint8_t *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  int v117;
  __int128 v118;
  __int128 v119;
  int v120;
  __int128 v121;
  __int128 v122;
  int v123;
  __int128 v124;
  __int128 v125;
  int v126;
  __int128 v127;
  __int128 v128;
  int v129;
  int v130;
  float v131;
  float v132;
  float v133;
  int v134;
  unint64_t v135;
  float v136;
  int v137;
  int v138;
  float v139;
  float v140;
  float v141;
  int v142;
  float v143;
  float v144;
  float v145;
  int v146;
  _WORD v147[24];
  _OWORD v148[2];
  int v149;
  __int128 v150;
  __int128 v151;
  int v152;
  __int128 v153;
  __int128 v154;
  int v155;
  _OWORD v156[2];
  int v157;
  _OWORD v158[2];
  int v159;
  __int128 v160;
  __int128 v161;
  int v162;
  _DWORD v163[3];
  unint64_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  unint64_t v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  __int128 v177;
  __int128 v178;
  int v179;
  uint8_t buf[16];
  __int128 v181;
  int v182;

  v174 = a4;
  v175 = a5;
  v176 = a6;
  v171 = a7;
  v172 = a8;
  v173 = a9;
  v169 = a17;
  v170 = a18;
  v19 = atomic_load((unsigned __int8 *)&qword_102306E28);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_102306E28))
  {
    dword_102306E20 = 1043452116;
    __cxa_guard_release(&qword_102306E28);
  }
  v20 = 0;
  v21 = 0.0;
  do
  {
    v21 = v21 + (float)(*(float *)((char *)&v174 + v20) * *(float *)((char *)&v174 + v20));
    v20 += 4;
  }
  while (v20 != 12);
  if (sqrtf(v21) == 0.0)
    return 0;
  v22 = 0;
  v23 = 0.0;
  do
  {
    v23 = v23 + (float)(*(float *)((char *)&v171 + v22) * *(float *)((char *)&v171 + v22));
    v22 += 4;
  }
  while (v22 != 12);
  if (sqrtf(v23) == 0.0)
    return 0;
  v24 = 0;
  v25 = v174;
  v26 = v175;
  v27 = v176;
  *(float *)buf = v174;
  *(float *)&buf[4] = v175;
  *(float *)&buf[8] = v176;
  v28 = 0.0;
  do
  {
    v28 = v28 + (float)(*(float *)&buf[v24] * *(float *)&buf[v24]);
    v24 += 4;
  }
  while (v24 != 12);
  if (sqrtf(v28) > 0.00000011921)
  {
    v29 = 0;
    v30 = 0.0;
    do
    {
      v30 = v30 + (float)(*(float *)&buf[v29] * *(float *)&buf[v29]);
      v29 += 4;
    }
    while (v29 != 12);
    v31 = sqrtf(v30);
    v25 = v174 / v31;
    v26 = v175 / v31;
    v27 = v176 / v31;
  }
  v32 = 0;
  v174 = v25;
  v175 = v26;
  v176 = v27;
  v33 = v171;
  v34 = v172;
  v35 = v173;
  *(float *)buf = v171;
  *(float *)&buf[4] = v172;
  *(float *)&buf[8] = v173;
  v36 = 0.0;
  do
  {
    v36 = v36 + (float)(*(float *)&buf[v32] * *(float *)&buf[v32]);
    v32 += 4;
  }
  while (v32 != 12);
  if (sqrtf(v36) > 0.00000011921)
  {
    v37 = 0;
    v38 = 0.0;
    do
    {
      v38 = v38 + (float)(*(float *)&buf[v37] * *(float *)&buf[v37]);
      v37 += 4;
    }
    while (v37 != 12);
    v39 = sqrtf(v38);
    v33 = v171 / v39;
    v34 = v172 / v39;
    v35 = v173 / v39;
  }
  v40 = 0;
  v171 = v33;
  v172 = v34;
  v173 = v35;
  v41 = (float)(v26 * v35) - (float)(v27 * v34);
  v42 = (float)(v27 * v33) - (float)(v25 * v35);
  v43 = (float)(v25 * v34) - (float)(v26 * v33);
  v166 = v41;
  v167 = v42;
  v168 = v43;
  v44 = 0.0;
  do
  {
    v44 = v44 + (float)(*(float *)((char *)&v166 + v40) * *(float *)((char *)&v166 + v40));
    v40 += 4;
  }
  while (v40 != 12);
  v45 = sqrtf(v44);
  if (v45 < *(float *)&dword_102306E20)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021740A8);
    v46 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v45;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "n and g are too close %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021740A8);
      LODWORD(v177) = 134217984;
      *(double *)((char *)&v177 + 4) = v45;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "n and g are too close %f", COERCE_DOUBLE(&v177));
      v110 = (uint8_t *)v109;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)", "%s\n", v109);
      if (v110 != buf)
        free(v110);
    }
    return 0;
  }
  v49 = 0;
  v50 = v41 / v45;
  v51 = v42 / v45;
  v166 = v41 / v45;
  v167 = v42 / v45;
  v52 = v43 / v45;
  v168 = v43 / v45;
  v54 = *((float *)&v169 + 1);
  LODWORD(v53) = v169;
  v55 = v170;
  *(_QWORD *)buf = v169;
  *(float *)&buf[8] = v170;
  v56 = 0.0;
  do
  {
    v56 = v56 + (float)(*(float *)&buf[v49] * *(float *)&buf[v49]);
    v49 += 4;
  }
  while (v49 != 12);
  if (sqrtf(v56) > 0.00000011921)
  {
    v57 = 0;
    v58 = 0.0;
    do
    {
      v58 = v58 + (float)(*(float *)&buf[v57] * *(float *)&buf[v57]);
      v57 += 4;
    }
    while (v57 != 12);
    v59 = sqrtf(v58);
    v53 = *(float *)&v169 / v59;
    v54 = *((float *)&v169 + 1) / v59;
    v55 = v170 / v59;
  }
  v60 = 0;
  v169 = __PAIR64__(LODWORD(v54), LODWORD(v53));
  v170 = v55;
  v164 = 0;
  v165 = -1.0;
  v61 = (float)(v55 * -0.0) - v54;
  v62 = 0.0;
  v63 = v53 + (float)(v55 * 0.0);
  v64 = (float)(v54 * -0.0) + (float)(v53 * 0.0);
  *(float *)buf = v61;
  *(float *)&buf[4] = v63;
  *(float *)&buf[8] = v64;
  do
  {
    v62 = v62 + (float)(*(float *)&buf[v60] * *(float *)&buf[v60]);
    v60 += 4;
  }
  while (v60 != 12);
  if (sqrtf(v62) > 0.00000011921)
  {
    v65 = 0;
    v66 = 0.0;
    do
    {
      v66 = v66 + (float)(*(float *)&buf[v65] * *(float *)&buf[v65]);
      v65 += 4;
    }
    while (v65 != 12);
    v67 = sqrtf(v66);
    v61 = v61 / v67;
    v63 = v63 / v67;
    v64 = v64 / v67;
  }
  v68 = 0;
  *(float *)v163 = v61;
  *(float *)&v163[1] = v63;
  *(float *)&v163[2] = v64;
  v69 = (float)(v34 * v52) - (float)(v35 * v51);
  v70 = (float)(v35 * v50) - (float)(v33 * v52);
  v71 = (float)(v33 * v51) - (float)(v34 * v50);
  *(float *)buf = v69;
  *(float *)&buf[4] = v70;
  *(float *)&buf[8] = v71;
  v72 = 0.0;
  do
  {
    v72 = v72 + (float)(*(float *)&buf[v68] * *(float *)&buf[v68]);
    v68 += 4;
  }
  while (v68 != 12);
  if (sqrtf(v72) > 0.00000011921)
  {
    v73 = 0;
    v74 = 0.0;
    do
    {
      v74 = v74 + (float)(*(float *)&buf[v73] * *(float *)&buf[v73]);
      v73 += 4;
    }
    while (v73 != 12);
    v75 = sqrtf(v74);
    v69 = v69 / v75;
    v70 = v70 / v75;
    v71 = v71 / v75;
  }
  v174 = v69;
  v175 = v70;
  v176 = v71;
  sub_100B62D98((uint64_t)&v174, (uint64_t)&v169, (uint64_t)&v177);
  sub_100B62D98((uint64_t)&v171, (uint64_t)&v164, (uint64_t)&v160);
  sub_100B62D98((uint64_t)&v166, (uint64_t)v163, (uint64_t)v158);
  v76 = (float)((float)(a1[1] * a1[1]) + (float)(*a1 * *a1)) + (float)((float)(*a1 + *a1) * a1[1]);
  if (v76 == 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021740A8);
    v111 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_FAULT, "Assertion failed: lambda2 != 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMOQuaternion.cpp, line 208,invalid weights.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021740A8);
      LOWORD(v156[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: lambda2 != 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMOQuaternion.cpp, line 208,invalid weights.", v156, 2);
      v113 = (uint8_t *)v112;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)", "%s\n", v112);
      if (v113 != buf)
        free(v113);
    }
  }
  v156[0] = v158[0];
  v156[1] = v158[1];
  v157 = v159;
  v77 = *a1;
  v150 = v177;
  v151 = v178;
  v152 = v179;
  v138 = 0;
  v78 = sqrtf(v76);
  v139 = v176;
  v140 = -v175;
  v141 = -v176;
  v142 = 0;
  v143 = v174;
  v144 = v175;
  v145 = -v174;
  v146 = 0;
  sub_100B27DB0((uint64_t)&v138, (uint64_t)v158, (uint64_t)v147);
  v130 = 0;
  v131 = v170;
  v132 = -*((float *)&v169 + 1);
  v133 = -v170;
  v134 = 0;
  v135 = v169;
  v136 = -*(float *)&v169;
  v137 = 0;
  sub_100B27DB0((uint64_t)v147, (uint64_t)&v130, (uint64_t)v148);
  for (i = 0; i != 9; ++i)
    *((float *)&v150 + i) = *((float *)&v150 + i) - sub_100821C40((uint64_t)v148, i);
  v80 = 0;
  v81 = 1.0 / v78;
  v153 = v150;
  v154 = v151;
  v155 = v152;
  do
  {
    *(float *)((char *)&v153 + v80) = (float)(v81 * v77) * *(float *)((char *)&v153 + v80);
    v80 += 4;
  }
  while (v80 != 36);
  v82 = 0;
  *(_OWORD *)buf = v153;
  v181 = v154;
  v182 = v155;
  do
  {
    *((float *)v156 + v82) = sub_100821C40((uint64_t)buf, v82) + *((float *)v156 + v82);
    ++v82;
  }
  while (v82 != 9);
  v83 = a1[1];
  v124 = v160;
  v125 = v161;
  v126 = v162;
  v138 = 0;
  v139 = v173;
  v140 = -v172;
  v141 = -v173;
  v142 = 0;
  v143 = v171;
  v144 = v172;
  v145 = -v171;
  v146 = 0;
  sub_100B27DB0((uint64_t)&v138, (uint64_t)v158, (uint64_t)v147);
  v130 = 0;
  v131 = v165;
  v132 = -*((float *)&v164 + 1);
  v133 = -v165;
  v134 = 0;
  v135 = v164;
  v136 = -*(float *)&v164;
  v137 = 0;
  sub_100B27DB0((uint64_t)v147, (uint64_t)&v130, (uint64_t)v148);
  for (j = 0; j != 9; ++j)
    *((float *)&v124 + j) = *((float *)&v124 + j) - sub_100821C40((uint64_t)v148, j);
  v85 = 0;
  v127 = v124;
  v128 = v125;
  v129 = v126;
  do
  {
    *(float *)((char *)&v127 + v85) = (float)(v81 * v83) * *(float *)((char *)&v127 + v85);
    v85 += 4;
  }
  while (v85 != 36);
  v86 = 0;
  *(_OWORD *)buf = v127;
  v181 = v128;
  v182 = v129;
  do
  {
    v87.f32[0] = sub_100821C40((uint64_t)buf, v86) + *((float *)v156 + v86);
    *((_DWORD *)v156 + v86++) = v87.i32[0];
  }
  while (v86 != 9);
  sub_100B62E28(a2, (float *)v156, v87);
  v88 = 0;
  v89 = *a1;
  v118 = v177;
  v119 = v178;
  v120 = v179;
  do
  {
    *(float *)((char *)&v118 + v88) = v89 * *(float *)((char *)&v118 + v88);
    v88 += 4;
  }
  while (v88 != 36);
  v90 = 0;
  v123 = v120;
  v121 = v118;
  v122 = v119;
  v91 = a1[1];
  v117 = v162;
  v115 = v160;
  v116 = v161;
  do
  {
    *(float *)((char *)&v115 + v90) = v91 * *(float *)((char *)&v115 + v90);
    v90 += 4;
  }
  while (v90 != 36);
  v92 = 0;
  *(_OWORD *)buf = v115;
  v181 = v116;
  v182 = v117;
  do
  {
    *((float *)&v121 + v92) = sub_100821C40((uint64_t)buf, v92) + *((float *)&v121 + v92);
    ++v92;
  }
  while (v92 != 9);
  v93 = 0;
  v148[0] = v121;
  v148[1] = v122;
  v149 = v123;
  v94 = 0.0;
  do
  {
    v94 = v94 + (float)(*(float *)((char *)v148 + v93) * *(float *)((char *)v148 + v93));
    v93 += 4;
  }
  while (v93 != 36);
  v95 = sqrtf(v94);
  v96 = (float)(v76 - (float)(v95 * v95)) * 0.5;
  v47 = v96 != 0.0;
  if (v96 == 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021740A8);
    v106 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "kappa zero!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021740A8);
      v147[0] = 0;
      LODWORD(v114) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "kappa zero!", v147, v114);
      v108 = (uint8_t *)v107;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)", "%s\n", v107);
      if (v108 != buf)
        free(v108);
    }
  }
  else
  {
    v97 = 0;
    v98 = v81 * (float)(1.0 / v96);
    do
    {
      for (k = 0; k != 3; ++k)
      {
        v100 = 0;
        *(_DWORD *)sub_100534AE0(a3, v97, k) = 0;
        do
        {
          v101 = sub_100534784((uint64_t)v148, v97, v100);
          v102 = sub_100534784((uint64_t)v148, k, v100);
          v103 = (float *)sub_100534AE0(a3, v97, k);
          *v103 = *v103 + (float)(v101 * v102);
          ++v100;
        }
        while (v100 != 3);
        v104 = (float *)sub_100534AE0(a3, v97, k);
        *v104 = v98 * *v104;
      }
      v105 = (float *)sub_100534AE0(a3, v97, v97);
      *v105 = v81 + *v105;
      ++v97;
    }
    while (v97 != 3);
  }
  return v47;
}

float *sub_100B62D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t i;
  unint64_t j;
  float v8;
  float v9;
  float *result;

  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 3; ++j)
    {
      v8 = sub_100533668(a1, i);
      v9 = v8 * sub_100533668(a2, j);
      result = (float *)sub_100534AE0(a3, i, j);
      *result = v9;
    }
  }
  return result;
}

double sub_100B62E28(float32x4_t *a1, float *a2, float32x4_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  BOOL v9;
  float v10;
  float v11;
  double result;
  float v13;
  float v14;
  float v15;
  float v16;

  v3 = *a2;
  v4 = a2[4];
  v5 = a2[8];
  v6 = (float)(*a2 + v4) + v5;
  if (v6 <= 0.0)
  {
    if (v3 > v4)
    {
      v8 = v3 == v5;
      v9 = v3 < v5;
    }
    else
    {
      v8 = 1;
      v9 = 0;
    }
    if (v9 || v8)
    {
      if (v4 <= v5)
      {
        v15 = (float)((float)((float)-v3 - v4) + v5) + 1.0;
        v16 = 0.5 / sqrtf(v15);
        a1->f32[2] = v15 * v16;
        a1->f32[3] = v16 * (float)(a2[3] - a2[1]);
        a1->f32[0] = v16 * (float)(a2[2] + a2[6]);
        a3.f32[0] = v16 * (float)(a2[7] + a2[5]);
        a1->i32[1] = a3.i32[0];
      }
      else
      {
        v10 = (float)((float)(v4 - v3) - v5) + 1.0;
        v11 = 0.5 / sqrtf(v10);
        a1->f32[1] = v10 * v11;
        a1->f32[0] = v11 * (float)(a2[3] + a2[1]);
        a1->f32[3] = v11 * (float)(a2[2] - a2[6]);
        a3.f32[0] = v11 * (float)(a2[7] + a2[5]);
        a1->i32[2] = a3.i32[0];
      }
    }
    else
    {
      v13 = (float)((float)(v3 - v4) - v5) + 1.0;
      v14 = 0.5 / sqrtf(v13);
      a1->f32[0] = v13 * v14;
      a1->f32[1] = v14 * (float)(a2[3] + a2[1]);
      a1->f32[2] = v14 * (float)(a2[2] + a2[6]);
      a3.f32[0] = v14 * (float)(a2[7] - a2[5]);
      a1->i32[3] = a3.i32[0];
    }
  }
  else
  {
    v7 = 0.5 / sqrtf(v6 + 1.0);
    a1->f32[3] = (float)(v6 + 1.0) * v7;
    a1->f32[2] = v7 * (float)(a2[3] - a2[1]);
    a1->f32[1] = v7 * (float)(a2[2] - a2[6]);
    a3.f32[0] = v7 * (float)(a2[7] - a2[5]);
    a1->i32[0] = a3.i32[0];
  }
  *(_QWORD *)&result = sub_10012C97C(a1, a3).u64[0];
  return result;
}

float sub_100B62FE4@<S0>(float *a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float result;

  v4 = a1[2];
  v3 = a1[3];
  v5 = v3 + v3;
  v6 = *a1;
  v7 = a1[1];
  v8 = v7 + v7;
  v9 = v3 * (float)(v3 + v3);
  v10 = (float)((float)(v7 + v7) * v7) + -1.0;
  v11 = (float)((float)(v4 + v4) * v4) + -1.0;
  v12 = (float)(v6 + v6) * v7;
  v13 = (float)(v6 + v6) * v4;
  v14 = v3 * (float)(v6 + v6);
  v15 = v8 * v4;
  v16 = v3 * v8;
  v17 = v5 * v4;
  v18 = v9 + (float)((float)((float)(v6 + v6) * v6) + -1.0);
  v19 = v12 - (float)(v17 * a3);
  v20 = v13 + (float)(v16 * a3);
  v21 = v12 + (float)(v17 * a3);
  v22 = v9 + v10;
  v23 = v15 - (float)(v14 * a3);
  v24 = v13 - (float)(v16 * a3);
  result = v15 + (float)(v14 * a3);
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v21;
  a2[4] = v22;
  a2[5] = v23;
  a2[6] = v24;
  a2[7] = result;
  a2[8] = v9 + v11;
  return result;
}

void sub_100B63064(float *a1)
{
  unsigned __int8 v1;
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float *v18;
  float32x4_t v19;
  _DWORD v20[3];
  uint64_t v21;
  int v22;
  float v23[9];

  v1 = atomic_load((unsigned __int8 *)&qword_102306E38);
  if ((v1 & 1) == 0)
  {
    v18 = a1;
    v17 = __cxa_guard_acquire(&qword_102306E38);
    a1 = v18;
    if (v17)
    {
      dword_102306E30 = 1043452116;
      __cxa_guard_release(&qword_102306E38);
      a1 = v18;
    }
  }
  v3 = sub_10012C7A4(a1);
  v5 = v4;
  v6 = 0;
  v7 = sqrtf((float)(v4 * v4) + (float)(v3 * v3));
  v8 = 1.0;
  if (v2 <= v7)
    v8 = -1.0;
  v21 = 0x3F80000000000000;
  v22 = 0;
  v9 = v2 * v8;
  v10 = (float)(v2 * -0.0) + (float)(v5 * v8);
  v11 = -(float)(v3 * v8);
  v12 = 0.0;
  v13 = v11 + (float)(v2 * 0.0);
  v14 = (float)(v5 * -0.0) + (float)(v3 * 0.0);
  *(float *)v20 = v10;
  *(float *)&v20[1] = v13;
  *(float *)&v20[2] = v14;
  do
  {
    v12 = v12 + (float)(*(float *)&v20[v6] * *(float *)&v20[v6]);
    ++v6;
  }
  while (v6 != 3);
  v15 = sqrtf(v12);
  if (v15 > *(float *)&dword_102306E30)
  {
    v16 = (float)-atan2f(v7, v9) / v15;
    v23[0] = v10 * v16;
    v23[1] = v16 * v13;
    v23[2] = v16 * v14;
    sub_100B61FD0(&v19, v23);
    sub_100B62FE4(v19.f32, v23, -1.0);
    sub_1005335A4((uint64_t)v23, (float *)&v21);
  }
}

float sub_100B631D4(float *a1)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float result;

  sub_100B63064(a1);
  v5 = sub_100B61F98(a1, v2, v3, v4);
  for (result = atan2f(-v6, v5) * 57.296; result < 0.0; result = result + 360.0)
    ;
  for (; result >= 360.0; result = result + -360.0)
    ;
  return result;
}

void sub_100B63260(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_100B6328C(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100B63368((uint64_t)a1, "VO2MaxCloudKitSyncEngineMetadata", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_1021740D8;
  a1[9] = off_102174180;
  sub_100E81598(a1 + 42, 0, 0);
  sub_100E81598(a1 + 44, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100B6333C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B63368(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_102174310;
  *(_QWORD *)(a1 + 72) = off_1021743B8;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102174310;
  *(_QWORD *)(a1 + 72) = off_1021743B8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(int64x2_t *)(a1 + 232) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 12000;
  *(_QWORD *)(a1 + 264) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100B63724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[33] = off_10213DEB0;
  sub_100427950(v27);
  sub_10034111C(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100B637C8()
{
  JUMPOUT(0x100B637A8);
}

_QWORD *sub_100B637D0(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021743B8;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102174310;
  a1[33] = off_10213DEB0;
  sub_100427950(a1 + 34);
  sub_10034111C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100B63850(uint64_t a1)
{
  return sub_100B637D0((_QWORD *)(a1 - 72));
}

void sub_100B63858(_QWORD *a1)
{
  sub_100B637D0(a1);
  operator delete();
}

void sub_100B6387C(uint64_t a1)
{
  sub_100B637D0((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100B638A4(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxCloudKitSyncEngineMetadata (startTime, lastUpdateTime, metadata) VALUES (?, ?, ?)");
  return 0;
}

void sub_100B6398C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B639AC(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  int v11;
  uint64_t v12;
  uint64_t v14;

  v5 = a1;
  if (!sub_10008950C(a1 + 72))
    goto LABEL_11;
  sub_100087AF4((_QWORD *)(v5 + 352), &v14);
  v6 = (sqlite3_stmt *)sub_100026CC8(v14);
  if (sub_1000890C4(v6, 1, *(double *)(a2 + 8))
    && (v7 = (sqlite3_stmt *)sub_100026CC8(v14), sub_1000890C4(v7, 2, *(double *)(a2 + 16)))
    && (v8 = (sqlite3_stmt *)sub_100026CC8(v14), sub_10063FC3C(v8, 3, *(void **)(a2 + 24)))
    && (v9 = (sqlite3_stmt *)sub_100026CC8(v14), sub_1000CC50C(v9, 4, a3)))
  {
    v5 = *(_QWORD *)(v5 + 80);
    v10 = (sqlite3_stmt *)sub_100026CC8(v14);
    LOBYTE(v5) = sub_10023C9B0(v5, v10);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  v12 = v14;
  v14 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v11)
LABEL_11:
    LOBYTE(v5) = 0;
  return v5 & 1;
}

void sub_100B63AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B63AC8(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100B63B44((uint64_t)a1);
    sub_100634364(a1[10], "VO2MaxCloudKitSyncEngineMetadata", (const char **)&off_102174210, (const std::string::value_type **)&off_1022F9B90, 0);
    a1[42] = sub_10063D314(a1[10], "SELECT * FROM VO2MaxCloudKitSyncEngineMetadata ORDER BY id DESC LIMIT 1");
    a1[43] = v3;
    result = sub_10063D314(a1[10], "UPDATE VO2MaxCloudKitSyncEngineMetadata SET startTime = ?, lastUpdateTime = ?, metadata = ? WHERE id = ?");
    a1[44] = result;
    a1[45] = v4;
  }
  return result;
}

BOOL sub_100B63B44(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "VO2MaxCloudKitSyncEngineMetadata");
  if (result)
  {
    v3 = "startTime";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "VO2MaxCloudKitSyncEngineMetadata", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100B63EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B63F80@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxCloudKitSyncEngineMetadata");
}

_QWORD *sub_100B63F90@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxCloudKitSyncEngineMetadata");
}

uint64_t sub_100B63FA0(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxCloudKitSyncEngineMetadata (startTime, lastUpdateTime, metadata) VALUES (?, ?, ?)");
  return result;
}

void sub_100B64068(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B64088(uint64_t a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  const void *v10;
  sqlite3_stmt *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 336), &v16);
  v4 = (sqlite3_stmt *)sub_100026CC8(v16);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
  {
    v13 = 1;
  }
  else if (v5 == 100)
  {
    v6 = (sqlite3_stmt *)sub_100026CC8(v16);
    *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
    v7 = (sqlite3_stmt *)sub_100026CC8(v16);
    *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
    v8 = (sqlite3_stmt *)sub_100026CC8(v16);
    *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
    v9 = (sqlite3_stmt *)sub_100026CC8(v16);
    v10 = sqlite3_column_blob(v9, 3);
    v11 = (sqlite3_stmt *)sub_100026CC8(v16);
    v12 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v10, sqlite3_column_bytes(v11, 3));
    v13 = 0;
    *(_QWORD *)(a2 + 24) = v12;
  }
  else
  {
    v13 = 2;
  }
  v14 = v16;
  v16 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return v13;
}

void sub_100B641AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B641D0(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021743F8);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021743F8);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100B65368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100B65688(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10191A9E8(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100B6595C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100B659C4(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10191AB54(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100B65CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100B65D44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021743F8);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021743F8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021743F8);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::setDatabaseAccessible() [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100B66310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100B66340(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  uint64_t v32;
  int64x2_t v33;
  uint64_t v34;
  id v35[2];
  int v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  uint64_t v43;

  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v35);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v32 = 0;
  v33 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v34 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021743F8);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021743F8);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v36, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = *(double *)v33.i64;
    v9 = v7 - *(double *)v33.i64;
    if (v7 - *(double *)v33.i64 < 0.0)
      v9 = -(v7 - *(double *)v33.i64);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021743F8);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v41 = *(double *)v33.i64;
        v42 = 2050;
        v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021743F8);
        v23 = *(_QWORD *)(a2 + 8);
        v36 = 134349312;
        v37 = *(double *)v33.i64;
        v38 = 2050;
        v39 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v36, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = *(double *)v33.i64;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021743F8);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v41 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021743F8);
          v26 = *(double *)(a2 + 8);
          v36 = 134217984;
          v37 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v36));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021743F8);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v41 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021743F8);
        v36 = 134217984;
        v37 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v36));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v35);
}

void sub_100B66A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B66ABC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10191ACC0(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100B66D1C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10191AE2C(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100B66F54(uint64_t a1)
{
  return sub_100B65D44(a1 - 72);
}

uint64_t sub_100B66F5C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10191AF98(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100B67184(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100B67698(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  int v13;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        v4 = 0;
        v5 = 0;
        v6 = 0;
        while (1)
        {
          v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v8 = v7 + 1;
          if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
          v6 |= (unint64_t)(v9 & 0x7F) << v4;
          if ((v9 & 0x80) == 0)
            goto LABEL_11;
          v4 += 7;
          v10 = v5++ >= 9;
          if (v10)
          {
            LODWORD(v6) = 0;
            v11 = OBJC_IVAR___PBDataReader__error;
            v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v6) = 0;
LABEL_13:
        v13 = v6 & 7;
        if (!v12 && v13 != 4)
        {
          switch((unsigned __int16)(v6 >> 3))
          {
            case 1u:
              v15 = 0;
              v16 = 0;
              v17 = 0;
              *(_BYTE *)(a1 + 80) |= 2u;
              while (1)
              {
                v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                v19 = v18 + 1;
                if (v18 == -1 || v19 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                  break;
                v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
                v17 |= (unint64_t)(v20 & 0x7F) << v15;
                if ((v20 & 0x80) == 0)
                  goto LABEL_60;
                v15 += 7;
                v10 = v16++ >= 9;
                if (v10)
                {
                  v17 = 0;
                  goto LABEL_62;
                }
              }
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_60:
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v17 = 0;
LABEL_62:
              *(_QWORD *)(a1 + 64) = v17;
              goto LABEL_85;
            case 2u:
              *(_BYTE *)(a1 + 80) |= 1u;
              v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                v22 = 0;
              }
              v45 = 56;
              goto LABEL_82;
            case 3u:
              *(_BYTE *)(a1 + 80) |= 4u;
              v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                v22 = 0;
              }
              v45 = 72;
LABEL_82:
              *(_QWORD *)(a1 + v45) = v22;
              goto LABEL_85;
            case 4u:
              if (v13 != 2)
              {
                v36 = 0;
                v37 = 0;
                v38 = 0;
                while (1)
                {
                  v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  v40 = v39 + 1;
                  if (v39 == -1 || v40 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                    break;
                  v41 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
                  v38 |= (unint64_t)(v41 & 0x7F) << v36;
                  if ((v41 & 0x80) == 0)
                    goto LABEL_74;
                  v36 += 7;
                  v10 = v37++ >= 9;
                  if (v10)
                  {
                    v42 = 0;
                    goto LABEL_77;
                  }
                }
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_74:
                if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                  v42 = 0;
                else
                  v42 = v38;
LABEL_77:
                PBRepeatedUInt64Add(a1 + 8, v42);
                goto LABEL_85;
              }
              v47 = 0;
              v48 = 0;
              result = PBReaderPlaceMark(a2, &v47);
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)
                   && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              {
                v24 = 0;
                v25 = 0;
                v26 = 0;
                while (1)
                {
                  v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  v28 = v27 + 1;
                  if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                    break;
                  v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
                  v26 |= (unint64_t)(v29 & 0x7F) << v24;
                  if ((v29 & 0x80) == 0)
                    goto LABEL_45;
                  v24 += 7;
                  v10 = v25++ >= 9;
                  if (v10)
                  {
                    v30 = 0;
                    goto LABEL_48;
                  }
                }
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
                if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                  v30 = 0;
                else
                  v30 = v26;
LABEL_48:
                PBRepeatedUInt64Add(a1 + 8, v30);
              }
              goto LABEL_58;
            case 5u:
              if (v13 == 2)
              {
                v47 = 0;
                v48 = 0;
                result = PBReaderPlaceMark(a2, &v47);
                if (!(_DWORD)result)
                  return result;
                while (1)
                {
                  v32 = (unint64_t *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  v33 = *v32;
                  v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length);
                  if (*v32 >= v34 || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                    break;
                  if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > v34)
                  {
                    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                    v35 = 0.0;
                  }
                  else
                  {
                    v35 = *(double *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
                    *v32 = v33 + 8;
                  }
                  PBRepeatedDoubleAdd(a1 + 32, v31, v35);
                }
LABEL_58:
                PBReaderRecallMark(a2, &v47);
              }
              else
              {
                v43 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  v44 = *(double *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 8;
                }
                else
                {
                  *(_BYTE *)(a2 + v11) = 1;
                  v44 = 0.0;
                }
                PBRepeatedDoubleAdd(a1 + 32, a2, v44);
              }
LABEL_85:
              if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              continue;
            default:
              if ((PBReaderSkipValueWithTag(a2) & 1) != 0)
                goto LABEL_85;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

_QWORD *sub_100B68368(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;

  sub_100270E34((uint64_t)v8, a3);
  sub_100723F80(a1, a2, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *a1 = off_102174428;
  return a1;
}

void sub_100B68420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B68464(uint64_t result, double a2)
{
  double v2;

  v2 = a2 + -300.0 + 60.0;
  if (v2 < *(double *)(result + 40))
    v2 = *(double *)(result + 40);
  *(double *)(result + 40) = v2;
  return result;
}

_QWORD *sub_100B68490(uint64_t a1)
{
  double *v2;
  _QWORD *v3;
  __n128 v4;
  char v5;
  _QWORD *result;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;

  v20 = 0;
  v18 = 0.0;
  v19 = 0.0;
  v16 = 0;
  v17 = 0.0;
  v2 = (double *)(a1 + 40);
  v3 = operator new(0x28uLL);
  *v3 = off_102174478;
  v3[1] = &v19;
  v3[2] = &v18;
  v3[3] = &v17;
  v3[4] = &v20;
  v22 = v3;
  v4.n128_u64[0] = 0x4072C00000000000;
  v5 = sub_100723FC0(a1, v2, &v16, (uint64_t)v21, v4);
  result = v22;
  if (v22 == v21)
  {
    v7 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  if ((v5 & 1) != 0)
  {
    if (v17 < 270.0 || (v8 = v19, v19 / 300.0 < 0.800000012))
    {
      *v2 = *(double *)(v16 + 8);
    }
    else
    {
      v9 = v18;
      v10 = *v2;
      v11 = *v2 + 300.0;
      *v2 = *v2 + 60.0;
      if (v10 < v11)
      {
        v12 = v9 / v8;
        do
        {
          *(double *)v14 = v10;
          v10 = v10 + 60.0;
          *(double *)&v14[1] = v10;
          *(double *)&v14[2] = v12;
          v15 = 65544;
          BYTE3(v15) = v20;
          v13 = *(_QWORD *)(a1 + 32);
          if (!v13)
            sub_10025FD1C();
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v14);
        }
        while (v10 < v11);
      }
    }
  }
  return result;
}

void sub_100B6864C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100B68690()
{
  operator delete();
}

__n128 sub_100B686A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_102174478;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100B686E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102174478;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_100B6870C(uint64_t a1, uint64_t a2, double *a3)
{
  double v3;
  float v4;
  double *v5;
  double *v6;
  double result;

  v3 = *a3;
  v4 = *(float *)(a2 + 24) * 2.2;
  if (v4 < 3.5)
    v4 = 3.5;
  if (*(double *)(a2 + 16) >= v4)
  {
    v5 = *(double **)(a1 + 16);
    **(double **)(a1 + 8) = v3 + **(double **)(a1 + 8);
    *v5 = *v5 + *(double *)(a2 + 16) * v3;
    **(_BYTE **)(a1 + 32) = (**(unsigned __int8 **)(a1 + 32) | *(unsigned __int8 *)(a2 + 29)) != 0;
  }
  if (!*(_BYTE *)(a2 + 28))
    v3 = 0.0;
  v6 = *(double **)(a1 + 24);
  result = *v6 + v3;
  *v6 = result;
  return result;
}

uint64_t sub_100B6879C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100B687D8()
{
}

uint64_t sub_100B687E4(uint64_t a1)
{
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  sub_101480A30(a1 + 64, 0);
  sub_100B68860(a1);
  return a1;
}

void sub_100B6883C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_101480AF4(v2);
  sub_10034111C(v1);
  _Unwind_Resume(a1);
}

void sub_100B68860(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void ***)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 64;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 128;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_QWORD *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 792));
  *(_BYTE *)(a1 + 49) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
}

void sub_100B688F4(int64x2_t *a1, int *a2)
{
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  _BYTE v34[24];
  __int16 v35;
  uint64_t v36;
  uint8_t buf[4];
  _BYTE v38[34];

  v4 = a1[2].u64[1];
  if (v4 >= 0x79)
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021744E8);
    v5 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_INFO))
    {
      v6 = a1[2].i64[1];
      v7 = *(_QWORD *)(*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 4) & 0xFFFFFFFFFFFFFF8))
                     + 32 * (a1[2].i64[0] & 0x7F)
                     + 8);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v38 = v6;
      *(_WORD *)&v38[4] = 2050;
      *(_QWORD *)&v38[6] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "HRBuffer full (size %{public}d), dropping sample from %{public}lf", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_1021744E8);
      v23 = a1[2].i64[1];
      v24 = *(_QWORD *)(*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (a1[2].i64[0] & 0x7F)
                      + 8);
      v33 = 67240448;
      *(_DWORD *)v34 = v23;
      *(_WORD *)&v34[4] = 2050;
      *(_QWORD *)&v34[6] = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 1, "HRBuffer full (size %{public}d), dropping sample from %{public}lf", &v33, 18);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxInputCollector::feedRawHeartRate(const CLCatherineData &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
    sub_1003432C8((uint64_t)a1, 1);
    a1[3].i8[0] = 0;
    v4 = a1[2].u64[1];
  }
  if (v4
    && *(double *)(*(_QWORD *)(a1->i64[1] + (((v4 + a1[2].i64[0] - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                 + 32 * ((v4 + a1[2].i64[0] - 1) & 0x7F)
                 + 8) > *((double *)a2 + 5))
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021744E8);
    v8 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_QWORD *)a2 + 5);
      v10 = a1[2].i64[1] + a1[2].i64[0] - 1;
      v11 = *(_QWORD *)(*(_QWORD *)(a1->i64[1] + ((v10 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v10 & 0x7F) + 8);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v38 = v9;
      *(_WORD *)&v38[8] = 2050;
      *(_QWORD *)&v38[10] = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning, received out of order HR, new time %{public}lf, previous time %{public}lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_1021744E8);
      v27 = *((_QWORD *)a2 + 5);
      v28 = a1[2].i64[1] + a1[2].i64[0] - 1;
      v29 = *(_QWORD *)(*(_QWORD *)(a1->i64[1] + ((v28 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v28 & 0x7F) + 8);
      v33 = 134349312;
      *(_QWORD *)v34 = v27;
      *(_WORD *)&v34[8] = 2050;
      *(_QWORD *)&v34[10] = v29;
      LODWORD(v32) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Warning, received out of order HR, new time %{public}lf, previous time %{public}lf", &v33, v32);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxInputCollector::feedRawHeartRate(const CLCatherineData &)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  *(_DWORD *)buf = *a2;
  *(_QWORD *)&v38[4] = *((_QWORD *)a2 + 5);
  *(int8x16_t *)&v38[12] = vextq_s8(*(int8x16_t *)(a2 + 2), *(int8x16_t *)(a2 + 2), 8uLL);
  sub_100B68EE4(a1, (uint64_t)buf);
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021744E8);
  v12 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    v16 = *((_QWORD *)a2 + 5);
    *(_DWORD *)buf = 134284289;
    *(_QWORD *)v38 = v14;
    *(_WORD *)&v38[8] = 1026;
    *(_DWORD *)&v38[10] = v13;
    *(_WORD *)&v38[14] = 2049;
    *(_QWORD *)&v38[16] = v15;
    *(_WORD *)&v38[24] = 2050;
    *(_QWORD *)&v38[26] = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "HRCollected,hr,%{private}f,source,%{public}d,conf,%{private}f,startTime,%{public}lf\n", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021744E8);
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 1);
    v19 = *((_QWORD *)a2 + 2);
    v20 = *((_QWORD *)a2 + 5);
    v33 = 134284289;
    *(_QWORD *)v34 = v18;
    *(_WORD *)&v34[8] = 1026;
    *(_DWORD *)&v34[10] = v17;
    *(_WORD *)&v34[14] = 2049;
    *(_QWORD *)&v34[16] = v19;
    v35 = 2050;
    v36 = v20;
    LODWORD(v32) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "HRCollected,hr,%{private}f,source,%{public}d,conf,%{private}f,startTime,%{public}lf\n", &v33, v32);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxInputCollector::feedRawHeartRate(const CLCatherineData &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
}

__n128 sub_100B68EE4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B69A48(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_100B68F70(int64x2_t *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>)
{
  int v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  NSObject *v25;
  double v26;
  double v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  _BOOL4 v34;
  const char *v35;
  uint8_t *v36;
  int v37;
  uint64_t v38;
  double v39;
  double v40;
  int v41;
  double v42;
  __int16 v43;
  int v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  double v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  _BOOL4 v60;
  __int16 v61;
  int v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  int v68;
  uint8_t buf[4];
  double v70;
  __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  double v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  _BOOL4 v88;
  __int16 v89;
  int v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  int v96;

  v20 = sub_100B69328(a1, &v37, a6);
  *(_QWORD *)(a5 + 32) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a5 + 48) = 0xFFEFFFFFFFFFFFFFLL;
  if (v20)
  {
    v21 = a7;
    *(float *)(a5 + 24) = v21;
    *(double *)(a5 + 32) = a6;
    v22 = v38;
    v23 = v39;
    if (v37 == 4)
      v23 = 1.0;
    v24 = v40;
    *(float *)(a5 + 40) = v24;
    *(float *)(a5 + 44) = v23;
    *(_QWORD *)(a5 + 48) = v22;
    *(double *)(a5 + 64) = a8;
    *(_DWORD *)(a5 + 56) = a2;
    *(_DWORD *)(a5 + 76) = 0;
    *(_BYTE *)(a5 + 72) = a3;
    *(_BYTE *)(a5 + 73) = sub_100B698A8((uint64_t)a1, a6);
    *(_QWORD *)(a5 + 80) = a1[49].i64[0];
    *(double *)(a5 + 88) = a9;
    *(double *)(a5 + 96) = a10;
    *(_BYTE *)(a5 + 104) = a4;
    uuid_copy((unsigned __int8 *)(a5 + 8), &a1[49].u8[8]);
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021744E8);
  v25 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    v26 = v39;
    v27 = v40;
    v28 = v38;
    v29 = sub_100B698A8((uint64_t)a1, a6);
    *(_DWORD *)buf = 134286849;
    v70 = a7;
    v71 = 1024;
    v72 = 0;
    v73 = 2048;
    v74 = a6;
    v75 = 2049;
    v76 = v27;
    v77 = 2050;
    v78 = v26;
    v79 = 2050;
    v80 = v28;
    v81 = 2049;
    v82 = a8;
    v83 = 1025;
    v84 = a2;
    v85 = 1025;
    v86 = a3;
    v87 = 1025;
    v88 = v29;
    v89 = 1026;
    v90 = v20;
    v91 = 2049;
    v92 = a9;
    v93 = 2049;
    v94 = a10;
    v95 = 1025;
    v96 = a4;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "MetsCollected,mets,%{private}f,source,%d,metComputeTime,%f,hr,%{private}f,hrConfidence,%{public}f,hrTime,%{public}f,grade,%{private}f,gradeType,%{private}d,gps,%{private}d,stride,%{private}d,valid,%{public}d,cadence,%{private}f,pace,%{private}f,stroller,%{private}d", buf, 0x76u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021744E8);
    v30 = qword_10229FEC8;
    v32 = v39;
    v31 = v40;
    v33 = v38;
    v34 = sub_100B698A8((uint64_t)a1, a6);
    v41 = 134286849;
    v42 = a7;
    v43 = 1024;
    v44 = 0;
    v45 = 2048;
    v46 = a6;
    v47 = 2049;
    v48 = v31;
    v49 = 2050;
    v50 = v32;
    v51 = 2050;
    v52 = v33;
    v53 = 2049;
    v54 = a8;
    v55 = 1025;
    v56 = a2;
    v57 = 1025;
    v58 = a3;
    v59 = 1025;
    v60 = v34;
    v61 = 1026;
    v62 = v20;
    v63 = 2049;
    v64 = a9;
    v65 = 2049;
    v66 = a10;
    v67 = 1025;
    v68 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "MetsCollected,mets,%{private}f,source,%d,metComputeTime,%f,hr,%{private}f,hrConfidence,%{public}f,hrTime,%{public}f,grade,%{private}f,gradeType,%{private}d,gps,%{private}d,stride,%{private}d,valid,%{public}d,cadence,%{private}f,pace,%{private}f,stroller,%{private}d", &v41, 118);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "VO2MaxInput CLVO2MaxInputCollector::feedCalorieUpdate(CFAbsoluteTime, double, GradeType, double, BOOL, double, double, BOOL)", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
}

uint64_t sub_100B69328(int64x2_t *a1, int *a2, double a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t *v11;
  double v12;
  double v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  __int128 v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  const char *v44;
  uint8_t *v45;
  uint64_t v46;
  int v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  uint8_t buf[4];
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  uint64_t v83;

  v3 = a1[2].i64[1];
  if (!v3)
    return 0;
  while (1)
  {
    v6 = a1->i64[1];
    v7 = a1[2].u64[0];
    v8 = *(_QWORD *)(v6 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8));
    v9 = v7 & 0x7F;
    v10 = (int *)(v8 + 32 * v9);
    v11 = (uint64_t *)(v10 + 2);
    v12 = *((double *)v10 + 1);
    if (v3 != 1)
    {
      v13 = vabdd_f64(a3, v12);
      if (v13 < 5.0)
        break;
    }
    if (v3 == 1)
      goto LABEL_20;
LABEL_8:
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021744E8);
    v14 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
    {
      v15 = *v10;
      v16 = *(_QWORD *)(v8 + 32 * v9 + 16);
      v17 = *(_QWORD *)(v8 + 32 * v9 + 24);
      v18 = *v11;
      v19 = a1[2].i64[1];
      *(_DWORD *)buf = 134284545;
      v67 = v17;
      v68 = 1026;
      v69 = v15;
      v70 = 2050;
      v71 = v16;
      v72 = 2050;
      v73 = v18;
      v74 = 1026;
      LODWORD(v75) = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "HRRejected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,bufSize,%{public}d\n", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_1021744E8);
      v20 = *v10;
      v21 = *(_QWORD *)(v8 + 32 * v9 + 16);
      v22 = *(_QWORD *)(v8 + 32 * v9 + 24);
      v23 = *v11;
      v24 = a1[2].i64[1];
      v48 = 134284545;
      v49 = v22;
      v50 = 1026;
      v51 = v20;
      v52 = 2050;
      v53 = v21;
      v54 = 2050;
      v55 = v23;
      v56 = 1026;
      LODWORD(v57) = v24;
      LODWORD(v46) = 44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "HRRejected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,bufSize,%{public}d\n", &v48, v46);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLVO2MaxInputCollector::getMostRecentHRSample(CFAbsoluteTime, HRSample &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
    sub_1003432C8((uint64_t)a1, 1);
    a1[3].i8[0] = 0;
    v3 = a1[2].i64[1];
    if (!v3)
      return 0;
  }
  if (a1[3].i8[0]
    && v13 >= vabdd_f64(a3, *(double *)(*(_QWORD *)(v6 + (((v7 + 1) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (((_BYTE)v7 + 1) & 0x7F)+ 8)))
  {
    goto LABEL_8;
  }
LABEL_20:
  v28 = *((_OWORD *)v10 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v10;
  *((_OWORD *)a2 + 1) = v28;
  a1[3].i8[0] = 1;
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_1021744E8);
  v29 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    v30 = *((_QWORD *)a2 + 2);
    v31 = *((_QWORD *)a2 + 3);
    v32 = *a2;
    v33 = *((_QWORD *)a2 + 1);
    v34 = a1[2].u64[1];
    v35 = a1[3].u8[0];
    if (v34 >= 2)
      v36 = *(_QWORD *)(*(_QWORD *)(a1->i64[1] + (((unint64_t)(a1[2].i64[0] + 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * ((a1[2].i64[0] + 1) & 0x7F)
                      + 8);
    else
      v36 = 0;
    *(_DWORD *)buf = 134285569;
    v67 = v31;
    v68 = 1026;
    v69 = v32;
    v70 = 2050;
    v71 = v30;
    v72 = 2050;
    v73 = v33;
    v74 = 2050;
    v75 = a3;
    v76 = 2050;
    v77 = v12;
    v78 = 1026;
    v79 = v34;
    v80 = 1026;
    v81 = v35;
    v82 = 2050;
    v83 = v36;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "HRSelected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,time,%{public}f,oldestTime,%{public}f,bufSize,%{public}d,fOldestHRUsed,%{public}d,secondSampleTime,%{public}f\n", buf, 0x50u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021744E8);
    v37 = *((_QWORD *)a2 + 2);
    v38 = *((_QWORD *)a2 + 3);
    v39 = *a2;
    v40 = *((_QWORD *)a2 + 1);
    v41 = a1[2].u64[1];
    v42 = a1[3].u8[0];
    if (v41 >= 2)
      v43 = *(_QWORD *)(*(_QWORD *)(a1->i64[1] + (((unint64_t)(a1[2].i64[0] + 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * ((a1[2].i64[0] + 1) & 0x7F)
                      + 8);
    else
      v43 = 0;
    v48 = 134285569;
    v49 = v38;
    v50 = 1026;
    v51 = v39;
    v52 = 2050;
    v53 = v37;
    v54 = 2050;
    v55 = v40;
    v56 = 2050;
    v57 = a3;
    v58 = 2050;
    v59 = v12;
    v60 = 1026;
    v61 = v41;
    v62 = 1026;
    v63 = v42;
    v64 = 2050;
    v65 = v43;
    LODWORD(v46) = 80;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "HRSelected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,time,%{public}f,oldestTime,%{public}f,bufSize,%{public}d,fOldestHRUsed,%{public}d,secondSampleTime,%{public}f\n", &v48, v46);
    v45 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVO2MaxInputCollector::getMostRecentHRSample(CFAbsoluteTime, HRSample &)", "%s\n", v44);
    if (v45 != buf)
      free(v45);
  }
  return 1;
}

BOOL sub_100B698A8(uint64_t a1, double a2)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  id v9[2];

  if (*(_BYTE *)(a1 + 808))
    return 0;
  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 56)) > 30.0)
  {
    sub_100131938(v9, (uint64_t)"CLVO2MaxInputCollector::strideCalConverged", 0);
    v8 = 0;
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
    sub_100087DE0(a1 + 64, 0, (uint64_t)&v5, a2 + -30.0, a2);
    *(_BYTE *)(a1 + 49) = objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLStepCountNotifier")), "syncgetIsStrideCalibrationConvergedMedianForSpeed:", *(double *)&v6 / (a2 - (a2 + -30.0)));
    *(CFAbsoluteTime *)(a1 + 56) = CFAbsoluteTimeGetCurrent();
    sub_100131740(v9);
  }
  return *(_BYTE *)(a1 + 49) != 0;
}

void sub_100B69994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B699AC(uint64_t a1, uint64_t a2)
{
  id v4;
  char isTypeIndoorPedestrian;
  uint64_t result;

  v4 = +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:](CMWorkout, "CLMotionActivityTypeFromCMWorkoutType:", *(_QWORD *)(a2 + 112));
  if ((CLMotionActivity::isTypePedestrian(v4) & 1) != 0)
    isTypeIndoorPedestrian = 1;
  else
    isTypeIndoorPedestrian = CLMotionActivity::isTypeIndoorPedestrian(v4);
  *(_BYTE *)(a1 + 808) = isTypeIndoorPedestrian;
  uuid_copy((unsigned __int8 *)(a1 + 792), (const unsigned __int8 *)(a2 + 64));
  result = sub_100F72BB4(*(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
  *(_QWORD *)(a1 + 784) = result;
  return result;
}

void sub_100B69A1C(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_100B69A48(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100B69D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100B69D5C()
{
  sub_1015A2E04(qword_102306E40, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102306E40, (void *)&_mh_execute_header);
}

uint64_t sub_100B69DA0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  uint8_t buf[24];

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_BYTE *)(a1 + 64) = 0;
  if (qword_10229FF00 != -1)
    dispatch_once(&qword_10229FF00, &stru_102174508);
  v3 = qword_10229FF08;
  if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLExerciseMinuteController::CLExerciseMinuteController called", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102174508);
    LOWORD(v7) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 2, "CLExerciseMinuteController::CLExerciseMinuteController called", &v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLExerciseMinuteController::CLExerciseMinuteController(CLGenericFitnessEstimatorProtocol *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (sub_100195F08())
    operator new();
  sub_100197040();
  *(_BYTE *)(a1 + 64) = sub_100195F08();
  return a1;
}

void sub_100B6A120(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1006AABA4(v2, *(_QWORD **)(v1 + 40));
  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100B6A224(uint64_t a1, uint64_t *a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  double v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char v13;
  void (***v14)(_QWORD, _BYTE *);
  uint64_t v15;
  dispatch_queue_t *v16;
  uint64_t v17;
  int v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  char *v25;
  int v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  _BYTE buf[12];
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;

  v4 = sub_100B6A76C(a1, (__int128 *)a2);
  if (qword_10229FF00 != -1)
    dispatch_once(&qword_10229FF00, &stru_102174508);
  v5 = qword_10229FF08;
  if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a2;
    v7 = (int)(*(double *)a2 / 60.0);
    *(_DWORD *)buf = 134350593;
    v8 = (double)v7;
    v9 = a2[2];
    v10 = *((unsigned __int16 *)a2 + 12);
    v11 = *((unsigned __int8 *)a2 + 26);
    v12 = *((unsigned __int8 *)a2 + 27);
    *(double *)&buf[4] = v8 * 60.0;
    v41 = 2050;
    v42 = v6;
    v43 = 2049;
    v44 = v9;
    v45 = 1026;
    v46 = v10;
    v47 = 1026;
    v48 = v11;
    v49 = 1026;
    v50 = v12;
    v51 = 1026;
    v52 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private}f, awardMode, %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d, duplicate, %{public}d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102174508);
    v17 = *a2;
    v18 = (int)(*(double *)a2 / 60.0);
    v26 = 134350593;
    v19 = (double)v18;
    v20 = a2[2];
    v21 = *((unsigned __int16 *)a2 + 12);
    v22 = *((unsigned __int8 *)a2 + 26);
    v23 = *((unsigned __int8 *)a2 + 27);
    v27 = v19 * 60.0;
    v28 = 2050;
    v29 = v17;
    v30 = 2049;
    v31 = v20;
    v32 = 1026;
    v33 = v21;
    v34 = 1026;
    v35 = v22;
    v36 = 1026;
    v37 = v23;
    v38 = 1026;
    v39 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 0, "ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private}f, awardMode, %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d, duplicate, %{public}d", &v26, 56);
    v25 = (char *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLExerciseMinuteController::recordExerciseMinute(const ExerciseMinute &)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  if (*(_BYTE *)(a1 + 64))
    v13 = v4;
  else
    v13 = 1;
  if ((v13 & 1) == 0)
  {
    v14 = *(void (****)(_QWORD, _BYTE *))(a1 + 56);
    if (v14)
    {
      *(double *)buf = (double)(int)(*(double *)a2 / 60.0) * 60.0;
      (**v14)(v14, buf);
    }
    if (*((_BYTE *)a2 + 26))
    {
      v15 = sub_100BFA9D4();
      sub_100BFACBC(v15, *((unsigned __int8 *)a2 + 27));
    }
    v16 = (dispatch_queue_t *)sub_10009EC60();
    sub_100EA5068(v16, *((_BYTE *)a2 + 26));
  }
}

uint64_t sub_100B6A51C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 32;
  v3 = (_QWORD *)(a1 + 40);
  sub_1006AABA4(a1 + 32, *(_QWORD **)(a1 + 40));
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = 0;
  *v3 = 0;
  sub_1006AABA4(v2, 0);
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_100B6A580(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (qword_10229FF00 != -1)
    dispatch_once(&qword_10229FF00, &stru_102174508);
  v4 = qword_10229FF08;
  if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLExerciseMinuteController::feedBodyMetrics called", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102174508);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 2, "CLExerciseMinuteController::feedBodyMetrics called", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLExerciseMinuteController::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v6 = *(unsigned __int8 *)(a1 + 24);
    v7 = a1 + 40;
    do
    {
      v8 = *(unsigned __int8 *)(v5 + 32);
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = (uint64_t *)v5;
      else
        v10 = (uint64_t *)(v5 + 8);
      if (v9)
        v7 = v5;
      v5 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 40 && v6 >= *(unsigned __int8 *)(v7 + 32))
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 40) + 24))(*(_QWORD *)(v7 + 40), a2);
  }
}

uint64_t sub_100B6A76C(uint64_t a1, __int128 *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t **v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  uint64_t *v18;
  const char *v19;
  char *v20;
  uint64_t v22;
  _BYTE v23[12];
  __int16 v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  _BYTE buf[12];
  __int16 v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;

  v4 = (double)(int)(*(double *)a2 / 60.0) * 60.0;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_13;
  v6 = a1 + 8;
  do
  {
    v7 = (uint64_t *)(v5 + 8);
    if (*(double *)(v5 + 32) >= v4)
    {
      v7 = (uint64_t *)v5;
      v6 = v5;
    }
    v5 = *v7;
  }
  while (*v7);
  if (v6 == a1 + 8 || v4 < *(double *)(v6 + 32))
  {
LABEL_13:
    *(double *)v23 = (double)(int)(*(double *)a2 / 60.0) * 60.0;
    *(_QWORD *)buf = v23;
    v10 = sub_100B6AC50((uint64_t **)a1, (double *)v23, (uint64_t)&unk_101B9EB60, (_QWORD **)buf);
    HIDWORD(v22) = 0;
    v11 = *a2;
    *(_OWORD *)(v10 + 7) = a2[1];
    *(_OWORD *)(v10 + 5) = v11;
  }
  else
  {
    *(_WORD *)(v6 + 64) |= *((_WORD *)a2 + 12);
    v8 = *(_BYTE *)(v6 + 66);
    if (!v8)
      v8 = *((_BYTE *)a2 + 26);
    *(_BYTE *)(v6 + 66) = v8;
    v9 = *(_BYTE *)(v6 + 67);
    if (!v9)
      v9 = *((_BYTE *)a2 + 27);
    *(_BYTE *)(v6 + 67) = v9;
    HIDWORD(v22) = 1;
  }
  if (*(_QWORD *)(a1 + 16) >= 8uLL)
  {
    do
    {
      v12 = *(double *)(*(_QWORD *)a1 + 40);
      v13 = *(_QWORD *)(*(_QWORD *)a1 + 56);
      v14 = *(unsigned __int16 *)(*(_QWORD *)a1 + 64);
      v15 = *(unsigned __int8 *)(*(_QWORD *)a1 + 66);
      v16 = *(unsigned __int8 *)(*(_QWORD *)a1 + 67);
      if (qword_10229FF00 != -1)
        dispatch_once(&qword_10229FF00, &stru_102174508);
      v17 = qword_10229FF08;
      if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134350337;
        *(double *)&buf[4] = (double)(int)(v12 / 60.0) * 60.0;
        v35 = 2050;
        v36 = v12;
        v37 = 2049;
        v38 = v13;
        v39 = 1026;
        v40 = v14;
        v41 = 1026;
        v42 = v15;
        v43 = 1026;
        v44 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Purging ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private}f, awardMode, %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d", buf, 0x32u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF00 != -1)
          dispatch_once(&qword_10229FF00, &stru_102174508);
        *(_DWORD *)v23 = 134350337;
        *(double *)&v23[4] = (double)(int)(v12 / 60.0) * 60.0;
        v24 = 2050;
        v25 = v12;
        v26 = 2049;
        v27 = v13;
        v28 = 1026;
        v29 = v14;
        v30 = 1026;
        v31 = v15;
        v32 = 1026;
        v33 = v16;
        LODWORD(v22) = 50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 2, "Purging ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private}f, awardMode, %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d", v23, v22);
        v20 = (char *)v19;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLExerciseMinuteController::updateExerciseMinuteMap(const ExerciseMinute &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v18 = *(uint64_t **)a1;
      sub_10008A9F0((uint64_t **)a1, *(uint64_t **)a1);
      operator delete(v18);
    }
    while (*(_QWORD *)(a1 + 16) > 7uLL);
  }
  return HIDWORD(v22);
}

void sub_100B6AAF8(id a1)
{
  qword_10229FF08 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ExerciseMinutes");
}

__n128 sub_100B6AB24(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102174538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100B6AB68(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102174538;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100B6AB94(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_100B6ABB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100B6ABEC()
{
}

void sub_100B6ABF8(uint64_t a1, uint64_t a2)
{
  void **v3;

  if (a2)
  {
    v3 = (void **)(a2 + 56);
    sub_100724968(&v3);
    sub_10034111C((_QWORD *)(a2 + 8));
    operator delete();
  }
}

uint64_t **sub_100B6AC50(uint64_t **a1, double *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  double v8;
  uint64_t **v9;
  double v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((double *)v6 + 4);
        if (v8 >= v10)
          break;
        v6 = (uint64_t *)*v6;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    *((_QWORD *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100B6AD18()
{
  sub_1015A2E04(qword_102306E58, "Acc800Fp");
  dword_102306E70 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102306E58, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102306E78, "DmFp");
  dword_102306E90 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102306E78, (void *)&_mh_execute_header);
}

uint64_t sub_100B6ADA4(unsigned int a1)
{
  if (a1 > 0xE)
    return 102;
  else
    return dword_101C17234[a1];
}

const __CFString *sub_100B6ADC4(unsigned int a1)
{
  if (a1 > 0xE)
    return CFSTR("CLSubHarvesterApp");
  else
    return *(&off_102174608 + (int)a1);
}

void sub_100B6ADE8(int a1)
{
  __asm { BR              X10 }
}

_QWORD *sub_100B6AE30()
{
  _QWORD *v0;

  return sub_1015A2E04(v0, "CLSubHarvesterCellLegacy");
}

void sub_100B6B1F0(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100B6B21C(uint64_t a1, _QWORD *a2, int a3, double a4, double a5)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 32) = a3;
  sub_101081D04(a3, (std::string *)(a1 + 40));
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 108) = xmmword_101C17270;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 124) = unk_101C17280;
  *(_OWORD *)(a1 + 140) = xmmword_101C17290;
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)&xmmword_101C17290 + 12);
  return a1;
}

void sub_100B6B2A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100B6B2BC(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  void **v5;
  const char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE *v11;
  const char *v12;
  char *v13;
  char *v14;
  _BYTE buf[24];
  int v16;
  _BYTE *v17;
  __int16 v18;
  const char *v19;
  void *__p[2];
  uint64_t v21;

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021746A0);
  v4 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 63) < 0)
    {
      sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
      v21 = *(_QWORD *)(a1 + 56);
    }
    v5 = __p;
    if (v21 < 0)
      v5 = (void **)__p[0];
    v6 = "update";
    if (!*(_BYTE *)(a1 + 104))
      v6 = "init";
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutDetector (%{public}s): Received user info (%s)", buf, 0x16u);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021746A0);
    v10 = qword_10229FE98;
    if (*(char *)(a1 + 63) < 0)
    {
      sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
      *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
    }
    v11 = buf;
    if (buf[23] < 0)
      v11 = *(_BYTE **)buf;
    v12 = "update";
    if (!*(_BYTE *)(a1 + 104))
      v12 = "init";
    v16 = 136446466;
    v17 = v11;
    v18 = 2080;
    v19 = v12;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 2, "BoutDetector (%{public}s): Received user info (%s)", &v16, 22);
    v14 = v13;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::BoutDetector::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v14);
    if (v14 != (char *)__p)
      free(v14);
  }
  v7 = *a2;
  v8 = a2[1];
  v9 = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 140) = a2[2];
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 124) = v8;
  *(_OWORD *)(a1 + 108) = v7;
  *(_BYTE *)(a1 + 104) = 1;
  if (*(_DWORD *)(a1 + 148))
  {
    if (*(double *)(a1 + 80) != 0.0)
      sub_100B6B5A4(a1, 3);
  }
}

void sub_100B6B5A4(uint64_t a1, int a2)
{
  double v3;
  uint64_t *v4;
  double v5;
  _DWORD *v6;
  double v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE __dst[24];
  _BYTE buf[24];
  uint64_t v44;
  _BYTE __p[24];
  uint64_t v46;

  v3 = *(double *)(a1 + 80);
  if (v3 != 0.0)
  {
    v4 = (uint64_t *)(a1 + 72);
    v5 = *(double *)(a1 + 72);
    v6 = (_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 96) = a2;
    v7 = v3 - v5;
    if (v7 >= 0.0001 && v7 <= *(double *)(a1 + 16))
    {
      (*(void (**)(void))(**(_QWORD **)a1 + 16))();
      if (*(_DWORD *)(a1 + 64))
        goto LABEL_79;
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v11 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
        }
        v22 = __p;
        if (__p[23] < 0)
          v22 = *(_BYTE **)__p;
        v23 = *v4;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v22;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v23;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Failed to write new bout %{public}.2f", buf, 0x16u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_79;
      bzero(__p, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v24 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
      }
      v37 = buf;
      if (buf[23] < 0)
        v37 = *(_BYTE **)buf;
      v38 = *v4;
      *(_DWORD *)__dst = 136446466;
      *(_QWORD *)&__dst[4] = v37;
      *(_WORD *)&__dst[12] = 2050;
      *(_QWORD *)&__dst[14] = v38;
      v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 16, "BoutDetector (%{public}s): Failed to write new bout %{public}.2f", __dst, 22);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    else if (fabs(v7) >= 0.0001)
    {
      if (v7 >= 0.0)
      {
        if (v7 <= *(double *)(a1 + 16))
          goto LABEL_79;
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021746A0);
        v12 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
        {
          if (*(char *)(a1 + 63) < 0)
          {
            sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
          }
          else
          {
            *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
            *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
          }
          v25 = buf;
          if (buf[23] < 0)
            v25 = *(_BYTE **)buf;
          v26 = *(_QWORD *)(a1 + 72);
          v27 = *(_QWORD *)(a1 + 80);
          *(_DWORD *)__p = 136446723;
          *(_QWORD *)&__p[4] = v25;
          *(_WORD *)&__p[12] = 2049;
          *(_QWORD *)&__p[14] = v26;
          *(_WORD *)&__p[22] = 2049;
          v46 = v27;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "BoutDetector (%{public}s): exceeded max duration. Should not be possible. startTime,%{private}.3f,endTime,%{private}.3f", __p, 0x20u);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_79;
        bzero(__p, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021746A0);
        v33 = qword_10229FE98;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 56);
        }
        v39 = __dst;
        if (__dst[23] < 0)
          v39 = *(_BYTE **)__dst;
        v40 = *(_QWORD *)(a1 + 72);
        v41 = *(_QWORD *)(a1 + 80);
        *(_DWORD *)buf = 136446723;
        *(_QWORD *)&buf[4] = v39;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v40;
        *(_WORD *)&buf[22] = 2049;
        v44 = v41;
        v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v33, 17, "BoutDetector (%{public}s): exceeded max duration. Should not be possible. startTime,%{private}.3f,endTime,%{private}.3f", buf, 32);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
      }
      else
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021746A0);
        v10 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 63) < 0)
          {
            sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
          }
          else
          {
            *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
            *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
          }
          v18 = buf;
          if (buf[23] < 0)
            v18 = *(_BYTE **)buf;
          v19 = *(_QWORD *)(a1 + 72);
          v20 = *(_QWORD *)(a1 + 80);
          *(_DWORD *)__p = 136446722;
          *(_QWORD *)&__p[4] = v18;
          *(_WORD *)&__p[12] = 2050;
          *(_QWORD *)&__p[14] = v19;
          *(_WORD *)&__p[22] = 2050;
          v46 = v20;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): duration is negative. Time likely rolled back. startTime,%{public}.2f,endTime,%{public}.2f", __p, 0x20u);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_79;
        bzero(__p, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021746A0);
        v21 = qword_10229FE98;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 56);
        }
        v34 = __dst;
        if (__dst[23] < 0)
          v34 = *(_BYTE **)__dst;
        v35 = *(_QWORD *)(a1 + 72);
        v36 = *(_QWORD *)(a1 + 80);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v35;
        *(_WORD *)&buf[22] = 2050;
        v44 = v36;
        v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v21, 16, "BoutDetector (%{public}s): duration is negative. Time likely rolled back. startTime,%{public}.2f,endTime,%{public}.2f", buf, 32);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
      }
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v8 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
        }
        v15 = __p;
        if (__p[23] < 0)
          v15 = *(_BYTE **)__p;
        v16 = *v4;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v16;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): zero-length bout (%{public}.2f). Ignoring.", buf, 0x16u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_79;
      bzero(__p, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v17 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
      }
      v30 = buf;
      if (buf[23] < 0)
        v30 = *(_BYTE **)buf;
      v31 = *v4;
      *(_DWORD *)__dst = 136446466;
      *(_QWORD *)&__dst[4] = v30;
      *(_WORD *)&__dst[12] = 2050;
      *(_QWORD *)&__dst[14] = v31;
      v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 16, "BoutDetector (%{public}s): zero-length bout (%{public}.2f). Ignoring.", __dst, 22);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    sub_100512490("Generic", 1, 0, 0, "void CLMobility::BoutDetector::stopBout(BoutTerminationReason)", "%s\n", v32);
    if (v32 != __p)
      free(v32);
LABEL_79:
    *v6 = 0;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    return;
  }
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_1021746A0);
  v9 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 63) < 0)
    {
      sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
      *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
    }
    v13 = __p;
    if (__p[23] < 0)
      v13 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Cannot stop bout, no bout in progress", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021746A0);
    v14 = qword_10229FE98;
    if (*(char *)(a1 + 63) < 0)
    {
      sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
      *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
    }
    v28 = buf;
    if (buf[23] < 0)
      v28 = *(_BYTE **)buf;
    *(_DWORD *)__dst = 136446210;
    *(_QWORD *)&__dst[4] = v28;
    v29 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v14, 16, "BoutDetector (%{public}s): Cannot stop bout, no bout in progress", __dst, 12);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 0, "void CLMobility::BoutDetector::stopBout(BoutTerminationReason)", "%s\n", v29);
    if (v29 != __p)
      free(v29);
  }
}

void sub_100B6C094(uint64_t a1, double a2)
{
  NSObject *v4;
  NSObject *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  _BYTE __dst[24];
  _BYTE __p[24];
  double v21;
  _BYTE buf[24];
  double v23;

  if (*(double *)(a1 + 80) == 0.0)
  {
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 32);
    *(double *)(a1 + 72) = a2;
    *(double *)(a1 + 80) = a2;
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021746A0);
    v5 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
      }
      v9 = buf;
      if (buf[23] < 0)
        v9 = *(_BYTE **)buf;
      v10 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)__p = 136446466;
      *(_QWORD *)&__p[4] = v9;
      *(_WORD *)&__p[12] = 2050;
      *(_QWORD *)&__p[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BoutDetector (%{public}s): Identified potential walking bout... marking as in progress (start: %{public}.2f)", __p, 0x16u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v11 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
      }
      v16 = __p;
      if (__p[23] < 0)
        v16 = *(_BYTE **)__p;
      v17 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)__dst = 136446466;
      *(_QWORD *)&__dst[4] = v16;
      *(_WORD *)&__dst[12] = 2050;
      *(_QWORD *)&__dst[14] = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 1, "BoutDetector (%{public}s): Identified potential walking bout... marking as in progress (start: %{public}.2f)", __dst, 22);
      v15 = v18;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "void CLMobility::BoutDetector::startBout(CFAbsoluteTime)", "%s\n", v15);
      goto LABEL_45;
    }
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021746A0);
    v4 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
      }
      v6 = __p;
      if (__p[23] < 0)
        v6 = *(_BYTE **)__p;
      v7 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): bout already in progress (%{public}.2f), cannot start bout at startTime %{public}.2f", buf, 0x20u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v8 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 56);
      }
      v12 = __dst;
      if (__dst[23] < 0)
        v12 = *(_BYTE **)__dst;
      v13 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v12;
      *(_WORD *)&__p[12] = 2050;
      *(_QWORD *)&__p[14] = v13;
      *(_WORD *)&__p[22] = 2050;
      v21 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 16, "BoutDetector (%{public}s): bout already in progress (%{public}.2f), cannot start bout at startTime %{public}.2f", __p, 32);
      v15 = v14;
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::BoutDetector::startBout(CFAbsoluteTime)", "%s\n", v15);
LABEL_45:
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_100B6C530(uint64_t a1, double a2)
{
  double v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  void *__dst[2];
  uint64_t v20;
  _BYTE __p[24];
  double v22;
  _BYTE buf[24];
  double v24;

  if (*(double *)(a1 + 80) == 0.0)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021746A0);
    v7 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
      }
      v11 = buf;
      if (buf[23] < 0)
        v11 = *(_BYTE **)buf;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Cannot extend bout, no bout in progress", __p, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v12 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
      }
      v17 = __p;
      if (__p[23] < 0)
        v17 = *(_BYTE **)__p;
      LODWORD(__dst[0]) = 136446210;
      *(void **)((char *)__dst + 4) = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 16, "BoutDetector (%{public}s): Cannot extend bout, no bout in progress", __dst, 12);
      v16 = v18;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::BoutDetector::extendBout(CFAbsoluteTime)", "%s\n", v16);
      goto LABEL_45;
    }
  }
  else
  {
    *(double *)(a1 + 80) = a2;
    v4 = *(double *)(a1 + 72);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021746A0);
    v5 = a2 - v4;
    v6 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
      }
      v8 = __p;
      if (__p[23] < 0)
        v8 = *(_BYTE **)__p;
      v9 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "BoutDetector (%{public}s): ExtendingBout,startTime,%{public}.2f,duration,%{public}.2f", buf, 0x20u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v10 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        v20 = *(_QWORD *)(a1 + 56);
      }
      v13 = __dst;
      if (v20 < 0)
        v13 = (void **)__dst[0];
      v14 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v13;
      *(_WORD *)&__p[12] = 2050;
      *(_QWORD *)&__p[14] = v14;
      *(_WORD *)&__p[22] = 2050;
      v22 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "BoutDetector (%{public}s): ExtendingBout,startTime,%{public}.2f,duration,%{public}.2f", __p, 32);
      v16 = v15;
      if (SHIBYTE(v20) < 0)
        operator delete(__dst[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLMobility::BoutDetector::extendBout(CFAbsoluteTime)", "%s\n", v16);
LABEL_45:
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_100B6C9AC(uint64_t a1, double a2)
{
  double v3;
  NSObject *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__dst[2];
  uint64_t v15;
  _BYTE __p[24];
  double v17;
  uint8_t buf[4];
  _BYTE *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  double v23;

  v3 = *(double *)(a1 + 80);
  if (v3 != 0.0 && v3 > a2)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_1021746A0);
    v6 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
      }
      v7 = __p;
      if (__p[23] < 0)
        v7 = *(_BYTE **)__p;
      v8 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 136446722;
      v19 = v7;
      v20 = 2050;
      v21 = v8;
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to timeRollback time (%{public}.2f)", buf, 0x20u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v9 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        v15 = *(_QWORD *)(a1 + 56);
      }
      v10 = __dst;
      if (v15 < 0)
        v10 = (void **)__dst[0];
      v11 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v10;
      *(_WORD *)&__p[12] = 2050;
      *(_QWORD *)&__p[14] = v11;
      *(_WORD *)&__p[22] = 2050;
      v17 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to timeRollback time (%{public}.2f)", __p, 32);
      v13 = v12;
      if (SHIBYTE(v15) < 0)
        operator delete(__dst[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLMobility::BoutDetector::checkTimeRollback(CFAbsoluteTime)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
    sub_100B6B5A4(a1, 4);
  }
}

void sub_100B6CC54(uint64_t a1, double a2)
{
  double v3;
  NSObject *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *__dst[2];
  uint64_t v13;
  _BYTE __p[24];
  double v15;
  uint8_t buf[4];
  _BYTE *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;

  if (*(double *)(a1 + 80) != 0.0)
  {
    v3 = a2 - *(double *)(a1 + 72);
    if (v3 > *(double *)(a1 + 16))
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v4 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
        }
        v5 = __p;
        if (__p[23] < 0)
          v5 = *(_BYTE **)__p;
        v6 = *(_QWORD *)(a1 + 72);
        *(_DWORD *)buf = 136446722;
        v17 = v5;
        v18 = 2050;
        v19 = v6;
        v20 = 2050;
        v21 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to maxBoutDuration (%{public}.2f)", buf, 0x20u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021746A0);
        v7 = qword_10229FE98;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          v13 = *(_QWORD *)(a1 + 56);
        }
        v8 = __dst;
        if (v13 < 0)
          v8 = (void **)__dst[0];
        v9 = *(_QWORD *)(a1 + 72);
        *(_DWORD *)__p = 136446722;
        *(_QWORD *)&__p[4] = v8;
        *(_WORD *)&__p[12] = 2050;
        *(_QWORD *)&__p[14] = v9;
        *(_WORD *)&__p[22] = 2050;
        v15 = v3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to maxBoutDuration (%{public}.2f)", __p, 32);
        v11 = v10;
        if (SHIBYTE(v13) < 0)
          operator delete(__dst[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLMobility::BoutDetector::checkMaxBoutDuration(CFAbsoluteTime)", "%s\n", v11);
        if (v11 != (char *)buf)
          free(v11);
      }
      sub_100B6B5A4(a1, 2);
    }
  }
}

void sub_100B6CF08(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_100B6CF34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  double v14;
  double v15;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v20[14];
  uint8_t buf[8];
  std::__shared_weak_count *v22;
  double v23;

  v3 = a1 + 166096;
  v4 = sub_100959E78(a1, a2);
  *(_QWORD *)v4 = off_1021746E8;
  *(_OWORD *)(v4 + 166080) = 0u;
  *(_OWORD *)v3 = xmmword_101C172B0;
  *(_QWORD *)(v3 + 16) = 0x800000001;
  *(_BYTE *)(v3 + 24) = 0;
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_102174720);
  v5 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLSwimAlgSimulator Instantiated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102174720);
    LOWORD(v20[0]) = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "CLSwimAlgSimulator Instantiated", v20, v19);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "CLSwimAlgSimulator::CLSwimAlgSimulator(CLSwimDataStore *, float)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  HIDWORD(v19) = *(_DWORD *)(v3 + 16);
  v6 = sub_100127B9C();
  sub_100081C10(v6, buf);
  sub_1001E4B84(*(uint64_t *)buf, "SimulateSwimmingStyle", (_DWORD *)&v19 + 1);
  v7 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_DWORD *)(v3 + 16) = HIDWORD(v19);
  v10 = sub_100127B9C();
  sub_100081C10(v10, buf);
  sub_1001E4874(*(uint64_t *)buf, "SimulateSwimmingLapInsertion", (BOOL *)(v3 + 24));
  v11 = v22;
  if (v22)
  {
    v12 = (unint64_t *)&v22->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(double *)v3;
  (*(void (**)(uint8_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(buf, *(_QWORD *)(a1 + 8), *(unsigned int *)(v3 + 16));
  v15 = v23;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(v20, *(_QWORD *)(a1 + 8), *(unsigned int *)(v3 + 16));
  *(double *)(v3 + 8) = v14 * (v15 / *(double *)&v20[4]);
  return a1;
}

void sub_100B6D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _QWORD *v25;

  *v25 = off_10215FCD8;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B6D27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  _WORD v23[8];
  uint8_t buf[1640];

  if (sub_10047D950(*(_QWORD *)(a1 + 8)))
  {
    v6 = *(double *)(a2 + 56);
    if (vabdd_f64(v6, *(double *)(a1 + 166080)) > *(double *)(a1 + 166096))
    {
      sub_10047C430(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 166112), 1, v6);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102174720);
      v7 = qword_10229FCA8;
      if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Simulated stroke", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_102174720);
        v23[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "Simulated stroke", v23, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgSimulator::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      v6 = *(double *)(a2 + 56);
      *(double *)(a1 + 166080) = v6;
    }
    v8 = vabdd_f64(v6, *(double *)(a1 + 720));
    if (v8 > sub_10095B3A0(a1) && sub_10095B3D4(a1, a3))
    {
      *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 56);
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8)))
      goto LABEL_35;
    v10 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)) <= 0.00000011921
        ? 33.3300018
        : (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
    v11 = v10 * *(double *)(a1 + 166104);
    v12 = *(double *)(a2 + 56);
    if (vabdd_f64(v12, *(double *)(a1 + 166088)) <= v11)
      goto LABEL_35;
    if (*(_BYTE *)(a1 + 166120) && (*(_DWORD *)(a1 + 166116) & 0x80000000) != 0)
    {
      *(double *)(a1 + 166088) = v12;
    }
    else
    {
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102174720);
      v13 = qword_10229FCA8;
      if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Simulated turn", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCA0 != -1)
          dispatch_once(&qword_10229FCA0, &stru_102174720);
        v23[0] = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "Simulated turn", v23, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgSimulator::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      if (sub_10095B1F0((uint64_t *)a1, *(double *)(a2 + 56), *(double *)(a2 + 56)))
        v14 = 2;
      else
        v14 = 0;
      v9 = v14 | v9;
      v15 = *(unsigned __int8 *)(a1 + 166120);
      *(_QWORD *)(a1 + 166088) = *(_QWORD *)(a2 + 56);
      if (!v15)
        goto LABEL_35;
    }
    v16 = *(_DWORD *)(a1 + 166116) - 1;
    if (*(_DWORD *)(a1 + 166116) == -2)
      v16 = 8;
    *(_DWORD *)(a1 + 166116) = v16;
LABEL_35:
    sub_10047E900(*(_QWORD *)(a1 + 8), *(double *)(a2 + 64), *(double *)(a2 + 56));
    return v9;
  }
  return 0;
}

uint64_t sub_100B6D6BC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[6];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  memset(v4, 0, sizeof(v4));
  result = (*(uint64_t (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), v4);
  if (((BYTE12(v5) + 1) & 3) == 0)
    *(_BYTE *)(a2 + 20) = 1;
  return result;
}

_QWORD *sub_100B6D754(_QWORD *result)
{
  *result = off_10215FCD8;
  return result;
}

void sub_100B6D768(_QWORD *a1)
{
  *a1 = off_10215FCD8;
  operator delete();
}

void sub_100B6D78C(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

double sub_100B6D7B8(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = -1;
  *(_WORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 16) = xmmword_101C172F0;
  *(_OWORD *)(a1 + 32) = _Q1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  result = 0.0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_100B6D7F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  unsigned int v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *p_p;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  std::string __p;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[10];
  char v26;
  uint64_t v27;

  sub_100263E50((uint64_t)v23);
  v4 = sub_100263F7C(&v24, (uint64_t)"lastStatus, ", 12);
  v5 = *(_DWORD *)a1 + 1;
  if (v5 > 4)
    v6 = "---";
  else
    v6 = off_1021748B0[v5];
  v7 = strlen(v6);
  sub_100263F7C(v4, (uint64_t)v6, v7);
  v8 = sub_100263F7C(&v24, (uint64_t)", started, ", 11);
  std::ostream::operator<<(v8, *(unsigned __int8 *)(a1 + 4));
  v9 = sub_100263F7C(&v24, (uint64_t)", monitoring settled, ", 22);
  std::ostream::operator<<(v9, *(unsigned __int8 *)(a1 + 5));
  v10 = sub_100263F7C(&v24, (uint64_t)", activeTech, ", 14);
  p_p = &__p;
  sub_10016F544(*(_DWORD *)(a1 + 8), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v12 = strlen((const char *)p_p);
  sub_100263F7C(v10, (uint64_t)p_p, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_100263F7C(&v24, (uint64_t)", lastDistance, ", 16);
  v13 = v23[0];
  *(_QWORD *)((char *)&v23[2] + *(_QWORD *)(v23[0] - 24)) = 1;
  *(_DWORD *)((char *)&v23[1] + *(_QWORD *)(v13 - 24)) |= 4u;
  std::ostream::operator<<(&v24, *(double *)(a1 + 16));
  sub_100263F7C(&v24, (uint64_t)", lastTechCheckDis, ", 20);
  v14 = v23[0];
  *(_QWORD *)((char *)&v23[2] + *(_QWORD *)(v23[0] - 24)) = 1;
  *(_DWORD *)((char *)&v23[1] + *(_QWORD *)(v14 - 24)) |= 4u;
  std::ostream::operator<<(&v24, *(double *)(a1 + 24));
  sub_100263F7C(&v24, (uint64_t)", lastLocCheck, ", 16);
  v15 = v23[0];
  *(_QWORD *)((char *)&v23[2] + *(_QWORD *)(v23[0] - 24)) = 1;
  *(_DWORD *)((char *)&v23[1] + *(_QWORD *)(v15 - 24)) |= 4u;
  std::ostream::operator<<(&v24, *(double *)(a1 + 40));
  v16 = sub_100263F7C(&v24, (uint64_t)", settledInsideStatus, ", 23);
  std::ostream::operator<<(v16, *(unsigned int *)(a1 + 68));
  v17 = sub_100263F7C(&v24, (uint64_t)", lastProximityStateTimestamp, ", 31);
  std::ostream::operator<<(v17, *(double *)(a1 + 72));
  v18 = sub_100263F7C(&v24, (uint64_t)", lastProximityState, ", 22);
  std::ostream::operator<<(v18, *(unsigned int *)(a1 + 80));
  v19 = sub_100263F7C(&v24, (uint64_t)", lastApproachingState, ", 24);
  std::ostream::operator<<(v19, *(unsigned int *)(a1 + 84));
  std::stringbuf::str(a2, v25);
  *(_QWORD *)((char *)v23
  v24 = v20;
  if (v26 < 0)
    operator delete((void *)v25[8]);
  std::streambuf::~streambuf(v25);
  return std::ios::~ios(&v27);
}

void sub_100B6DAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100B6DB24(uint64_t a1, _DWORD *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v22;

  if (a2[17] != 2 && *a2 == 0 && (~*(_DWORD *)(a1 + 160) & 5) == 0)
    v16 = 16;
  else
    v16 = 0;
  if ((a4 & 8) != 0 && (*(double *)(a1 + 96) >= 7000.0 || (*(_QWORD *)(a1 + 160) & 0x20) != 0))
    return v16 | 8;
  if ((a4 & 1) != 0)
  {
    v18 = *(_QWORD *)(a5 + 24);
    if (!v18)
      goto LABEL_36;
    v16 = v16 | 1;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v18, a1, a3) & 1) != 0)
      return v16;
  }
  if ((a4 & 2) != 0)
  {
    v19 = *(_QWORD *)(a6 + 24);
    if (!v19)
      goto LABEL_36;
    v16 = v16 | 2;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(v19, a1, a3) & 1) != 0)
      return v16;
  }
  v21 = *(double *)(a1 + 96) > 400.0 || *(_BYTE *)(a1 + 188) != 0 || *(_DWORD *)(a1 + 180) == 2;
  if (!v21
    && *(_QWORD *)(a1 + 232) == *(_QWORD *)(a1 + 224)
    && (a4 & 4) != 0
    && (*(_QWORD *)(a1 + 160) & 0x20) == 0
    && (a8 & 1) == 0)
  {
    v22 = *(_QWORD *)(a7 + 24);
    if (v22)
    {
      v16 = v16 | 4;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 48))(v22, a1, a3);
      return v16;
    }
LABEL_36:
    sub_10025FD1C();
  }
  return v16;
}

#error "100B6DE78: call analysis failed (funcsize=126)"

BOOL sub_100B6DE7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  int v13;
  _QWORD *v14;
  int v15;
  NSObject *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  _BYTE v32[24];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  _BYTE v39[10];
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;

  if ((*(_DWORD *)(a1 + 96) & 0xFFFFFFF7) != 1)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102174760);
    v12 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_DWORD *)(a1 + 96);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v39 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Location type %d is not a GNSS type.", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102174760);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Location type %d is not a GNSS type.", v32);
      goto LABEL_60;
    }
    return result;
  }
  v6 = *(double *)(a1 + 20);
  if (v6 > *((double *)sub_10108CCA0() + 3))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102174760);
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 20);
      *(_DWORD *)buf = 134283521;
      *(_QWORD *)v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Location uncertainty %{private}.2f above threshold, no reason to inflate uncertainty", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102174760);
      v10 = *(_QWORD *)(a1 + 20);
      *(_DWORD *)v32 = 134283521;
      *(_QWORD *)&v32[4] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Location uncertainty %{private}.2f above threshold, no reason to inflate uncertainty", v32, 12, *(_OWORD *)v32, *(_QWORD *)&v32[16]);
LABEL_60:
      v28 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::inflateGpsUncertaintyForSignalStrength(const CLDaemonLocation &, const CLDaemonLocationPrivate &, double &)", "%s\n", v11);
      if (v28 != buf)
        free(v28);
      return 0;
    }
    return result;
  }
  v14 = *(_QWORD **)(a2 + 520);
  if (v14)
    v15 = *v14 != v14[1];
  else
    v15 = 0;
  if (*sub_10108CCA0() || (v15 & 1) != 0)
  {
    if (v15)
    {
      v17 = *(uint64_t **)(a2 + 520);
      v18 = *v17;
      v19 = v17[1];
      if (*v17 != v19)
      {
        v20 = 0;
        v15 = 0;
        v21 = 0;
        do
        {
          v22 = *(unsigned __int8 *)(v18 + 24);
          if (*(_BYTE *)(v18 + 24))
          {
            v23 = *(float *)(v18 + 16);
            if (*((double *)sub_10108CCA0() + 2) < v23)
              ++v20;
          }
          v15 += v22;
          v18 += 28;
          ++v21;
        }
        while (v18 != v19);
LABEL_41:
        if (v15 <= *((_DWORD *)sub_10108CCA0() + 1) || v20 <= *((_DWORD *)sub_10108CCA0() + 2))
        {
          v25 = *(_QWORD *)(a1 + 20);
          *a3 = *((_QWORD *)sub_10108CCA0() + 3);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102174760);
          v26 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            v27 = *a3;
            *(_DWORD *)buf = 134284545;
            *(_QWORD *)v39 = v25;
            *(_WORD *)&v39[8] = 2049;
            v40 = v27;
            v41 = 1025;
            v42 = v21;
            v43 = 1025;
            v44 = v15;
            v45 = 1025;
            v46 = v20;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Inflating GNSS uncertainty for bad signal condition %{private}.2f -> %{private}.2f: %{private}d total signals (%{private}d tracked, %{private}d strong)", buf, 0x28u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102174760);
            v29 = *a3;
            *(_DWORD *)v32 = 134284545;
            *(_QWORD *)&v32[4] = v25;
            *(_WORD *)&v32[12] = 2049;
            *(_QWORD *)&v32[14] = v29;
            *(_WORD *)&v32[22] = 1025;
            v33 = v21;
            v34 = 1025;
            v35 = v15;
            v36 = 1025;
            v37 = v20;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Inflating GNSS uncertainty for bad signal condition %{private}.2f -> %{private}.2f: %{private}d total signals (%{private}d tracked, %{private}d strong)", v32, 40);
            v31 = (uint8_t *)v30;
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::inflateGpsUncertaintyForSignalStrength(const CLDaemonLocation &, const CLDaemonLocationPrivate &, double &)", "%s\n", v30);
            if (v31 != buf)
              free(v31);
          }
          return 1;
        }
        else
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102174760);
          v24 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67175169;
            *(_DWORD *)v39 = v21;
            *(_WORD *)&v39[4] = 1025;
            *(_DWORD *)&v39[6] = v15;
            LOWORD(v40) = 1025;
            *(_DWORD *)((char *)&v40 + 2) = v20;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "GNSS uncertainty unchanged based on signal strength: %{private}d total signals (%{private}d tracked, %{private}d strong)", buf, 0x14u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102174760);
            *(_DWORD *)v32 = 67175169;
            *(_DWORD *)&v32[4] = v21;
            *(_WORD *)&v32[8] = 1025;
            *(_DWORD *)&v32[10] = v15;
            *(_WORD *)&v32[14] = 1025;
            *(_DWORD *)&v32[16] = v20;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "GNSS uncertainty unchanged based on signal strength: %{private}d total signals (%{private}d tracked, %{private}d strong)", v32, 20, *(_OWORD *)v32, *(_QWORD *)&v32[16]);
            goto LABEL_60;
          }
        }
        return result;
      }
      v21 = 0;
      v15 = 0;
    }
    else
    {
      v21 = 0;
    }
    v20 = 0;
    goto LABEL_41;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102174760);
  v16 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Unable to inflate GNSS uncertainty, signal strength not available.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102174760);
    *(_WORD *)v32 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Unable to inflate GNSS uncertainty, signal strength not available.", v32, 2, *(_OWORD *)v32, *(_QWORD *)&v32[16]);
    goto LABEL_60;
  }
  return result;
}

BOOL sub_100B6E5C0(uint64_t **a1)
{
  double *v1;
  double *v2;
  int v4;
  int v5;
  double **v6;
  double **v7;
  double *v8;
  double *v9;
  int v11;
  int v12;
  NSObject *v13;
  void **v14;
  _BOOL8 v15;
  void **v17;
  const char *v18;
  char *v19;
  void *__p[2];
  uint64_t v21;
  void *v22;
  double *v23;
  _QWORD v24[3];
  int v25;
  void **v26;
  _BYTE buf[1632];

  sub_100B6E8E0(a1, (char **)&v22);
  __p[0] = 0;
  __p[1] = 0;
  v21 = 0;
  if ((sub_100B71C80((uint64_t)&v22, (uint64_t)__p) & 1) == 0)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102174760);
    v13 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v14 = __p;
      if (v21 < 0)
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Input is not valid: %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102174760);
      v17 = __p;
      if (v21 < 0)
        v17 = (void **)__p[0];
      v25 = 136446210;
      v26 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Input is not valid: %{public}s", &v25, 12);
      v19 = (char *)v18;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::isSimplePolygon(const std::vector<CLClientLocationCoordinate> &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    goto LABEL_32;
  }
  v1 = (double *)v22;
  v2 = v23;
  if (v22 == v23)
    goto LABEL_32;
  if ((unint64_t)((char *)v23 - (_BYTE *)v22) >= 0x20 && (char *)v22 + 16 != (char *)v23)
  {
    do
    {
      v4 = sub_100B72CA4(v1, v1 + 2);
      if (v1 + 4 == v2)
        v5 = 1;
      else
        v5 = v4;
      v1 += 2;
    }
    while (v5 != 1);
    if ((v4 & 1) != 0)
    {
LABEL_32:
      v15 = 0;
      goto LABEL_35;
    }
  }
  v7 = (double **)v24[0];
  v6 = (double **)v24[1];
  while (v7 != v6)
  {
    v8 = *v7;
    v9 = v7[1];
    if (*v7 == v9)
      goto LABEL_34;
    if ((unint64_t)((char *)v9 - (char *)v8) >= 0x20 && v8 + 2 != v9)
    {
      do
      {
        v11 = sub_100B72CA4(v8, v8 + 2);
        if (v8 + 4 == v9)
          v12 = 1;
        else
          v12 = v11;
        v8 += 2;
      }
      while (v12 != 1);
      if ((v11 & 1) != 0)
        goto LABEL_34;
    }
    v7 += 3;
  }
  v7 = v6;
LABEL_34:
  v15 = v7 == v6;
LABEL_35:
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  *(_QWORD *)buf = v24;
  sub_10025E1F0((void ***)buf);
  if (v22)
  {
    v23 = (double *)v22;
    operator delete(v22);
  }
  return v15;
}

void sub_100B6E8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  sub_100B6EA6C((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100B6E8E0(uint64_t **a1@<X0>, char **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  double **v18;
  double **v19;
  uint64_t v20;

  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      v7 = *v3;
      v8 = v3[1];
      if ((unint64_t)v5 >= *v6)
      {
        v9 = (v5 - *a2) >> 4;
        if ((unint64_t)(v9 + 1) >> 60)
          sub_100259694();
        v10 = *v6 - (_QWORD)*a2;
        v11 = v10 >> 3;
        if (v10 >> 3 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
          v12 = 0xFFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)sub_10028E224((uint64_t)(a2 + 2), v12);
        else
          v13 = 0;
        v14 = &v13[16 * v9];
        *(_QWORD *)v14 = v8;
        *((_QWORD *)v14 + 1) = v7;
        v16 = *a2;
        v15 = a2[1];
        v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v15 - 1);
            v17 -= 16;
            v15 -= 16;
          }
          while (v15 != v16);
          v15 = *a2;
        }
        v5 = v14 + 16;
        *a2 = v17;
        a2[1] = v14 + 16;
        a2[2] = &v13[16 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v5 = v8;
        *((_QWORD *)v5 + 1) = v7;
        v5 += 16;
      }
      a2[1] = v5;
      v3 += 2;
    }
    while (v3 != v4);
  }
  v20 = 0x3FF0000000000000;
  sub_1007784D8((double **)a2, (double *)&v20);
  v18 = (double **)a2[3];
  v19 = (double **)a2[4];
  while (v18 != v19)
  {
    sub_1007786A0(v18, (double *)&v20);
    v18 += 3;
  }
}

void sub_100B6EA4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100B6EA6C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100B6EA6C(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 24);
  sub_10025E1F0(&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL sub_100B6EAB4(uint64_t a1)
{
  uint64_t **v2;
  double *v3;
  double *v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v3 = *(double **)(a1 + 224);
  v4 = *(double **)(a1 + 232);
  v2 = (uint64_t **)(a1 + 224);
  if (v4 == v3)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102174760);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      v7 = (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 4;
      *(_DWORD *)buf = 134283521;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Only check polygonal fences, %{private}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102174760);
      v8 = (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 4;
      v11 = 134283521;
      v12 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Only check polygonal fences, %{private}lu", &v11, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLFenceMonitorLogic::isCompliant(const CLFenceManager_Type::Fence &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else if (*v3 == *(v4 - 2) && v3[1] == *(v4 - 1))
  {
    return sub_100B6E5C0(v2);
  }
  return 0;
}

BOOL sub_100B6ECD4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *(_DWORD *)(a1 + 96);
  v2 = v1 & 0xFFFFFFF7;
  v3 = v1 & 0xFFFFFFFE;
  return v2 == 1 || v3 == 2;
}

BOOL sub_100B6ECF0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 96) & 0xFFFFFFFE) == 6;
}

uint64_t sub_100B6ED04(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 96) > 0xEu) | (0x2C1Eu >> *(_DWORD *)(a1 + 96)) & 1;
}

uint64_t sub_100B6ED24(int8x16_t *a1, uint64_t **a2)
{
  unsigned int v2;
  void *__p[3];
  uint64_t v5;
  int8x16_t v6;
  void **v7;

  v6 = vextq_s8(*a1, *a1, 8uLL);
  sub_100B6E8E0(a2, (char **)__p);
  v2 = sub_1007791D0((double *)v6.i64, (uint64_t)__p);
  v7 = (void **)&v5;
  sub_10025E1F0(&v7);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v2 >> 31;
}

void sub_100B6ED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100B6EA6C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100B6EDAC(int8x16_t *a1, uint64_t **a2, double a3)
{
  if (sub_100B6ED24(a1, a2))
  {
    if (sub_100B6EE24(a1, (uint64_t)a2, 0) >= a3)
      return 1;
    return 0xFFFFFFFFLL;
  }
  if (sub_100B6EE24(a1, (uint64_t)a2, 1) < a3)
    return 0xFFFFFFFFLL;
  return 0;
}

double sub_100B6EE24(int8x16_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  NSObject *v4;
  double v5;
  uint64_t v8;
  _QWORD *v9;
  double v10;
  NSObject *v11;
  _QWORD *i;
  const char *v14;
  char *v15;
  const char *v16;
  char *v17;
  double v18;
  int8x16_t v19;
  _BYTE v20[12];
  __int16 v21;
  int v22;
  __int128 __p;
  _QWORD *v24;
  _QWORD *v25;
  _BYTE buf[1632];

  v3 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  if ((unint64_t)(v3 - 102) > 0xFFFFFFFFFFFFFF9DLL)
  {
    sub_100B6E8E0((uint64_t **)a2, (char **)&__p);
    v19 = vextq_s8(*a1, *a1, 8uLL);
    v18 = 1.79769313e308;
    if (a3)
    {
      *(_QWORD *)buf = &v18;
      *(_QWORD *)&buf[8] = &v19;
      *(_QWORD *)v20 = buf;
      sub_100B70BF0((uint64_t)&__p, (double ***)v20);
      v8 = (uint64_t)v24;
      v9 = v25;
      while ((_QWORD *)v8 != v9)
      {
        sub_100B70BF0(v8, (double ***)v20);
        v8 += 24;
      }
    }
    else
    {
      if ((_QWORD)__p == *((_QWORD *)&__p + 1))
      {
        for (i = v24; ; i += 3)
        {
          if (i == v25)
          {
            *(_QWORD *)v20 = &off_102174898;
            *(_QWORD *)buf = "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.a"
                             "pp/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/"
                             "usr/local/include/boost/geometry/algorithms/detail/throw_on_empty_input.hpp";
            *(_QWORD *)&buf[8] = "void boost::geometry::detail::throw_on_empty_input(const Geometry &) [Geometry = boost:"
                                 ":geometry::model::polygon<boost::geometry::model::point<double, 2, boost::geometry::cs:"
                                 ":spherical_equatorial<boost::geometry::degree>>>]";
            *(_QWORD *)&buf[16] = 54;
            sub_100B70D58((uint64_t)v20, (int8x16_t *)buf);
          }
          if (*i != i[1])
            break;
        }
      }
      *(_QWORD *)buf = 0x3FF0000000000000;
      sub_100B71900((double *)v19.i64, (uint64_t)&__p, (double *)buf);
      v18 = v10 * 6378135.0;
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102174760);
    v11 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283777;
      *(double *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 1025;
      *(_DWORD *)&buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Fence: distance to nearest point %{private}.02lf (%{private}d)", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102174760);
      *(_DWORD *)v20 = 134283777;
      *(double *)&v20[4] = v18;
      v21 = 1025;
      v22 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: distance to nearest point %{private}.02lf (%{private}d)", v20, 18);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 2, "double distanceToNearestPointOnPolygon(const CLClientLocationCoordinate &, const std::vector<CLClientLocationCoordinate> &, BOOL)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    v5 = v18;
    *(_QWORD *)buf = &v24;
    sub_10025E1F0((void ***)buf);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102174760);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Attempting to calculate distance to an invalid polygon, %{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102174760);
      LODWORD(__p) = 134349056;
      *(_QWORD *)((char *)&__p + 4) = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Attempting to calculate distance to an invalid polygon, %{public}lu", &__p, 12);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 0, "double distanceToNearestPointOnPolygon(const CLClientLocationCoordinate &, const std::vector<CLClientLocationCoordinate> &, BOOL)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 1.79769313e308;
  }
  return v5;
}

void sub_100B6F288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_100B6EA6C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

double sub_100B6F2BC(double *a1, uint64_t a2, double *a3)
{
  double v4;

  v4 = sub_10016F4A8(a1, a2, a3);
  if (*(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224))
    return v4 - sub_10016F694(a2);
  return v4;
}

uint64_t sub_100B6F304(uint64_t a1, double a2, uint64_t a3, uint64_t a4, int *a5, int a6, uint64_t a7)
{
  uint64_t v10;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  double v23;
  uint64_t result;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unsigned int v32;
  int v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  char *v38;
  int v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  _BOOL4 v44;
  char *v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  size_t v51;
  std::string *v52;
  const void *v53;
  int v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  int v59;
  std::string::size_type v60;
  double v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  std::string::size_type v71;
  double v72;
  uint64_t v73;
  std::string *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  std::string *v81;
  std::string *v82;
  NSObject *v83;
  size_t v84;
  std::string *v85;
  const void *v86;
  int v87;
  const std::string::value_type *v88;
  std::string::size_type v89;
  std::string *v90;
  __int128 v91;
  int v92;
  std::string::size_type v93;
  double v94;
  uint64_t v95;
  std::string *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  NSObject *v104;
  size_t v105;
  std::string *v106;
  const void *v107;
  int v108;
  const std::string::value_type *v109;
  std::string::size_type v110;
  std::string *v111;
  __int128 v112;
  std::string *p_buf;
  NSObject *v114;
  size_t v115;
  std::string *v116;
  const void *v117;
  int v118;
  const std::string::value_type *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  NSObject *v124;
  size_t v125;
  std::string *v126;
  const void *v127;
  int v128;
  const std::string::value_type *v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  uint64_t v134;
  std::string *v135;
  std::string *v136;
  std::string *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  std::string *v141;
  std::string *v142;
  std::string *v143;
  uint64_t v144;
  std::string *v145;
  std::string *v146;
  std::string *v147;
  int v148;
  std::string::size_type v149;
  double v150;
  uint64_t v151;
  std::string *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  std::string *v159;
  uint64_t v160;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  std::string buf;
  __int16 v171;
  int v172;
  __int16 v173;
  int v174;
  __int16 v175;
  int v176;
  __int16 v177;
  int v178;
  __int16 v179;
  double v180;
  __int16 v181;
  double v182;
  __int16 v183;
  double v184;
  __int16 v185;
  double v186;
  __int16 v187;
  double v188;
  __int16 v189;
  double v190;
  __int16 v191;
  uint64_t v192;
  __int16 v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  std::string v201;
  std::string v202;
  __int16 v203;
  int v204;
  __int16 v205;
  int v206;
  __int16 v207;
  int v208;
  __int16 v209;
  int v210;
  __int16 v211;
  double v212;
  __int16 v213;
  double v214;
  __int16 v215;
  double v216;
  __int16 v217;
  double v218;
  __int16 v219;
  double v220;
  __int16 v221;
  double v222;
  __int16 v223;
  uint64_t v224;
  __int16 v225;
  uint64_t v226;
  __int16 v227;
  uint64_t v228;
  __int16 v229;
  uint64_t v230;
  __int16 v231;
  uint64_t v232;

  v10 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v10)
  {
    v14 = *a5;
    switch((int)v10)
    {
      case 1:
      case 2:
      case 3:
      case 9:
        v15 = 0;
        v16 = 0;
        v168 = 46;
        v169 = 71;
        goto LABEL_28;
      case 4:
      case 11:
      case 13:
        v15 = 0;
        v16 = 0;
        v169 = 46;
        v167 = 87;
        v168 = 46;
        goto LABEL_29;
      case 5:
      case 14:
        result = sub_10191B5BC(*(unsigned int *)(a1 + 96));
LABEL_324:
        __break(1u);
        return result;
      case 6:
        v16 = 0;
        v15 = 1;
        goto LABEL_27;
      case 7:
        v15 = 0;
        v16 = 1;
        goto LABEL_27;
      case 8:
      case 12:
        goto LABEL_31;
      case 10:
        v15 = 0;
        v16 = 0;
        v168 = 80;
        v169 = 46;
        goto LABEL_28;
      default:
        v15 = 0;
        v16 = 0;
LABEL_27:
        v168 = 46;
        v169 = 46;
LABEL_28:
        v167 = 46;
LABEL_29:
        sub_100B6DC80(a1);
        if (v23 < 0.0)
          goto LABEL_30;
        v165 = v15;
        v166 = v16;
        if (*(_QWORD *)(a4 + 232) != *(_QWORD *)(a4 + 224))
        {
          if ((*(_BYTE *)(a4 + 160) & 0x10) != 0)
          {
            v26 = sub_100B6EDAC((int8x16_t *)(a1 + 4), (uint64_t **)(a4 + 224), *(double *)(a1 + 20));
          }
          else
          {
            *(_OWORD *)&v202.__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 4);
            v25 = *(double *)(a1 + 20);
            if (v25 >= *((double *)sub_10016F688() + 43)
              || (v26 = sub_100B6ED24((int8x16_t *)&v202, (uint64_t **)(a4 + 224))) != 0)
            {
              v27 = *(double *)(a1 + 20);
              if (v27 >= *((double *)sub_10016F688() + 43)
                || (v28 = sub_100B6EE24((int8x16_t *)&v202, a4 + 224, 0),
                    v28 >= *((double *)sub_10016F688() + 44) * *(double *)(a1 + 20)))
              {
                v36 = *((double *)sub_10016F688() + 45);
                v37 = *(double *)(a1 + 20);
                v38 = sub_10016F688();
                if (sub_100B6EDAC((int8x16_t *)(a1 + 4), (uint64_t **)(a4 + 224), *((double *)v38 + 46) + v36 * v37) == 1)v26 = 1;
                else
                  v26 = -1;
              }
              else
              {
                v26 = 0;
              }
            }
          }
          if (v26 == -1)
            v39 = *a5;
          else
            v39 = v26;
          if (!v14)
            goto LABEL_211;
LABEL_183:
          if (!v39)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102174760);
            v104 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(a4 + 23) >= 0)
                v105 = *(unsigned __int8 *)(a4 + 23);
              else
                v105 = *(_QWORD *)(a4 + 8);
              v106 = &v202;
              sub_100259584((uint64_t)&v202, v105 + 1);
              if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v106 = (std::string *)v202.__r_.__value_.__r.__words[0];
              if (v105)
              {
                if (*(char *)(a4 + 23) >= 0)
                  v107 = (const void *)a4;
                else
                  v107 = *(const void **)a4;
                memmove(v106, v107, v105);
              }
              *(_WORD *)((char *)&v106->__r_.__value_.__l.__data_ + v105) = 47;
              v108 = *(char *)(a4 + 47);
              if (v108 >= 0)
                v109 = (const std::string::value_type *)(a4 + 24);
              else
                v109 = *(const std::string::value_type **)(a4 + 24);
              if (v108 >= 0)
                v110 = *(unsigned __int8 *)(a4 + 47);
              else
                v110 = *(_QWORD *)(a4 + 32);
              v111 = std::string::append(&v202, v109, v110);
              v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
              buf.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v112;
              v111->__r_.__value_.__l.__size_ = 0;
              v111->__r_.__value_.__r.__words[2] = 0;
              v111->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v202.__r_.__value_.__l.__data_);
              p_buf = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v202.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v202.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v202.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
              _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "Fence status changed to Inside, distToCenter, %{private}.1lf, %{private}s", (uint8_t *)&v202, 0x16u);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&v202, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102174760);
              v140 = qword_1022A0068;
              sub_100914D68((const void **)a4, &buf);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v141 = &buf;
              else
                v141 = (std::string *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v201.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v201.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v201.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v141;
              LODWORD(v160) = 22;
              _os_log_send_and_compose_impl(2, 0, &v202, 1628, &_mh_execute_header, v140, 2, "Fence status changed to Inside, distToCenter, %{private}.1lf, %{private}s", &v201, v160);
              v143 = v142;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v143);
              if (v143 != &v202)
                free(v143);
            }
            v14 = 0;
            goto LABEL_31;
          }
LABEL_211:
          if (v14 == 1 || v39 != 1)
          {
            v14 = v39;
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102174760);
            v124 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(a4 + 23) >= 0)
                v125 = *(unsigned __int8 *)(a4 + 23);
              else
                v125 = *(_QWORD *)(a4 + 8);
              v126 = &v202;
              sub_100259584((uint64_t)&v202, v125 + 1);
              if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v126 = (std::string *)v202.__r_.__value_.__r.__words[0];
              if (v125)
              {
                if (*(char *)(a4 + 23) >= 0)
                  v127 = (const void *)a4;
                else
                  v127 = *(const void **)a4;
                memmove(v126, v127, v125);
              }
              *(_WORD *)((char *)&v126->__r_.__value_.__l.__data_ + v125) = 47;
              v128 = *(char *)(a4 + 47);
              if (v128 >= 0)
                v129 = (const std::string::value_type *)(a4 + 24);
              else
                v129 = *(const std::string::value_type **)(a4 + 24);
              if (v128 >= 0)
                v130 = *(unsigned __int8 *)(a4 + 47);
              else
                v130 = *(_QWORD *)(a4 + 32);
              v131 = std::string::append(&v202, v129, v130);
              v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
              buf.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v132;
              v131->__r_.__value_.__l.__size_ = 0;
              v131->__r_.__value_.__r.__words[2] = 0;
              v131->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v202.__r_.__value_.__l.__data_);
              v133 = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v133 = (std::string *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v202.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v202.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v202.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v133;
              _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "Fence status remained unchanged, distToCenter, %{private}.1lf, %{private}s", (uint8_t *)&v202, 0x16u);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&v202, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102174760);
              v134 = qword_1022A0068;
              sub_100914D68((const void **)a4, &buf);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v135 = &buf;
              else
                v135 = (std::string *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v201.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v201.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v201.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v135;
              LODWORD(v160) = 22;
              _os_log_send_and_compose_impl(2, 0, &v202, 1628, &_mh_execute_header, v134, 2, "Fence status remained unchanged, distToCenter, %{private}.1lf, %{private}s", &v201, v160);
              v137 = v136;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v137);
              if (v137 != &v202)
                free(v137);
            }
          }
          else
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102174760);
            v114 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(a4 + 23) >= 0)
                v115 = *(unsigned __int8 *)(a4 + 23);
              else
                v115 = *(_QWORD *)(a4 + 8);
              v116 = &v202;
              sub_100259584((uint64_t)&v202, v115 + 1);
              if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v116 = (std::string *)v202.__r_.__value_.__r.__words[0];
              if (v115)
              {
                if (*(char *)(a4 + 23) >= 0)
                  v117 = (const void *)a4;
                else
                  v117 = *(const void **)a4;
                memmove(v116, v117, v115);
              }
              *(_WORD *)((char *)&v116->__r_.__value_.__l.__data_ + v115) = 47;
              v118 = *(char *)(a4 + 47);
              if (v118 >= 0)
                v119 = (const std::string::value_type *)(a4 + 24);
              else
                v119 = *(const std::string::value_type **)(a4 + 24);
              if (v118 >= 0)
                v120 = *(unsigned __int8 *)(a4 + 47);
              else
                v120 = *(_QWORD *)(a4 + 32);
              v121 = std::string::append(&v202, v119, v120);
              v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
              buf.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v122;
              v121->__r_.__value_.__l.__size_ = 0;
              v121->__r_.__value_.__r.__words[2] = 0;
              v121->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v202.__r_.__value_.__l.__data_);
              v123 = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v123 = (std::string *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v202.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v202.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v202.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v123;
              _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "Fence status changed to Outside, distToCenter, %{private}.1lf, %{private}s", (uint8_t *)&v202, 0x16u);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&v202, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102174760);
              v144 = qword_1022A0068;
              sub_100914D68((const void **)a4, &buf);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v145 = &buf;
              else
                v145 = (std::string *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v201.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v201.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v201.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v145;
              LODWORD(v160) = 22;
              _os_log_send_and_compose_impl(2, 0, &v202, 1628, &_mh_execute_header, v144, 2, "Fence status changed to Outside, distToCenter, %{private}.1lf, %{private}s", &v201, v160);
              v147 = v146;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v147);
              if (v147 != &v202)
                free(v147);
            }
            v14 = 1;
          }
          goto LABEL_31;
        }
        v29 = v23;
        v30 = sub_10016F694(a4);
        v31 = sub_10016F694(a4);
        if ((*(_BYTE *)(a4 + 160) & 0x10) != 0)
        {
          v30 = v30 + *((double *)sub_10016F688() + 41) - v29;
          v31 = v29 + v31 + *((double *)sub_10016F688() + 41);
          goto LABEL_67;
        }
        v32 = *a5;
        if (*(double *)(a4 + 96) >= 7000.0)
        {
          if (v32 == 1)
          {
            v30 = v30 - (v29 + *((double *)sub_10016F688() + 8));
            v31 = v31 - (v29 + *((double *)sub_10016F688() + 7));
          }
          else
          {
            if (!v32)
            {
              v30 = v30 + v29 + *((double *)sub_10016F688() + 8);
              v40 = *((double *)sub_10016F688() + 7);
LABEL_59:
              v35 = v29 + v40;
LABEL_60:
              v31 = v31 + v35;
              goto LABEL_67;
            }
            v30 = v30 - v29;
            v31 = v31 - v29;
          }
        }
        else
        {
          if (v32 < 2)
          {
            switch((int)v10)
            {
              case 1:
              case 2:
              case 3:
              case 10:
              case 11:
                v33 = *sub_10016F688();
                v34 = (double *)sub_10016F688();
                if (v33)
                {
                  if (a6)
                    v35 = v34[19];
                  else
                    v35 = v34[20];
                }
                else if (a6)
                {
                  v35 = v34[17];
                }
                else
                {
                  v35 = v34[18];
                }
                goto LABEL_60;
              case 4:
              case 13:
                v35 = *((double *)sub_10016F688() + 16);
                goto LABEL_60;
              case 5:
              case 12:
              case 14:
                result = sub_10191B440(v10);
                goto LABEL_324;
              case 6:
                v139 = sub_10016F688();
                if (a6)
                {
                  v40 = *((double *)v139 + 10);
                  goto LABEL_59;
                }
                v35 = *((double *)v139 + 11);
                break;
              case 7:
                v138 = sub_10016F688();
                if (a6)
                  v40 = *((double *)v138 + 12);
                else
                  v40 = *((double *)v138 + 13);
                goto LABEL_59;
              case 9:
                v30 = v30 * *((double *)sub_10016F688() + 15);
                v35 = *((double *)sub_10016F688() + 14);
                goto LABEL_60;
              default:
                goto LABEL_67;
            }
            goto LABEL_60;
          }
          if (a6 && v10 <= 9 && ((1 << v10) & 0x2C0) != 0)
          {
            v31 = v31 + v29 + *((double *)sub_10016F688() + 9);
LABEL_68:
            v30 = 0.0;
LABEL_69:
            if (v31 <= 0.0)
              v31 = 0.0;
            v41 = *(double *)(a4 + 96) < 7000.0 && (*(_QWORD *)(a4 + 160) & 0x10) == 0;
            v42 = a2;
            if (v41)
            {
              v43 = 1.0;
              v44 = 0;
              switch((int)v10)
              {
                case 0:
                case 5:
                case 12:
                case 14:
                  result = sub_10191B2C4(v10);
                  goto LABEL_324;
                case 1:
                case 2:
                case 3:
                case 4:
                case 10:
                case 11:
                case 13:
                  v44 = *((double *)sub_10016F688() + 30) >= v29;
                  goto LABEL_78;
                case 6:
                case 7:
                  v42 = a2;
                  if ((a6 & 1) != 0)
                    break;
                  goto LABEL_85;
                case 9:
LABEL_78:
                  if (*a5 == 1)
                  {
                    v45 = sub_10016F688();
                    v46 = !v44;
                    v47 = 192;
                    v48 = 176;
                  }
                  else
                  {
                    if (*a5)
                      goto LABEL_85;
                    v45 = sub_10016F688();
                    v46 = !v44;
                    v47 = 184;
                    v48 = 168;
                  }
                  if (!v46)
                    v47 = v48;
                  v43 = *(double *)&v45[v47];
LABEL_85:
                  if (v29 * v43 <= a2)
                    v42 = a2 - v43 * v29;
                  else
                    v42 = 0.0;
                  break;
                default:
                  goto LABEL_85;
              }
            }
            if (v14 && v42 < v30)
            {
              v49 = 0;
            }
            else
            {
              if (v14 == 1 || v42 <= v31)
              {
                v164 = *a5;
                if (qword_1022A0060 != -1)
                  dispatch_once(&qword_1022A0060, &stru_102174760);
                v83 = qword_1022A0068;
                if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
                {
                  if (*(char *)(a4 + 23) >= 0)
                    v84 = *(unsigned __int8 *)(a4 + 23);
                  else
                    v84 = *(_QWORD *)(a4 + 8);
                  v85 = &buf;
                  sub_100259584((uint64_t)&buf, v84 + 1);
                  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v85 = (std::string *)buf.__r_.__value_.__r.__words[0];
                  if (v84)
                  {
                    if (*(char *)(a4 + 23) >= 0)
                      v86 = (const void *)a4;
                    else
                      v86 = *(const void **)a4;
                    memmove(v85, v86, v84);
                  }
                  *(_WORD *)((char *)&v85->__r_.__value_.__l.__data_ + v84) = 47;
                  v87 = *(char *)(a4 + 47);
                  if (v87 >= 0)
                    v88 = (const std::string::value_type *)(a4 + 24);
                  else
                    v88 = *(const std::string::value_type **)(a4 + 24);
                  if (v87 >= 0)
                    v89 = *(unsigned __int8 *)(a4 + 47);
                  else
                    v89 = *(_QWORD *)(a4 + 32);
                  v90 = std::string::append(&buf, v88, v89);
                  v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
                  v201.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v91;
                  v90->__r_.__value_.__l.__size_ = 0;
                  v90->__r_.__value_.__r.__words[2] = 0;
                  v90->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf.__r_.__value_.__l.__data_);
                  v92 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
                  v93 = v201.__r_.__value_.__r.__words[0];
                  v94 = sub_10016F694(a4);
                  v95 = *(_QWORD *)(a1 + 20);
                  v96 = &v201;
                  if (v92 < 0)
                    v96 = (std::string *)v93;
                  v97 = *(_QWORD *)(a4 + 72);
                  v98 = *(_QWORD *)(a4 + 80);
                  if (v166)
                    v99 = 76;
                  else
                    v99 = 46;
                  v100 = *(_QWORD *)(a1 + 4);
                  v101 = *(_QWORD *)(a1 + 12);
                  if (v165)
                    v102 = 67;
                  else
                    v102 = 46;
                  LODWORD(v202.__r_.__value_.__l.__data_) = 136385027;
                  *(std::string::size_type *)((char *)v202.__r_.__value_.__r.__words + 4) = (std::string::size_type)v96;
                  WORD2(v202.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = v169;
                  WORD1(v202.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v202.__r_.__value_.__r.__words[2]) = v168;
                  v203 = 1024;
                  v204 = v167;
                  v205 = 1024;
                  v206 = v102;
                  v207 = 1024;
                  v208 = v99;
                  v209 = 1026;
                  v210 = a6;
                  v211 = 2050;
                  v212 = v94;
                  v213 = 2050;
                  v214 = a2;
                  v215 = 2049;
                  v216 = v30;
                  v217 = 2049;
                  v218 = v31;
                  v219 = 2049;
                  v220 = v42;
                  v221 = 2049;
                  v222 = v29;
                  v223 = 2050;
                  v224 = v95;
                  v225 = 2049;
                  v226 = v97;
                  v227 = 2049;
                  v228 = v98;
                  v229 = 2049;
                  v230 = v100;
                  v231 = 2049;
                  v232 = v101;
                  _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{public}.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{private}.1lf, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocation, %{private}f, %{private}f,", (uint8_t *)&v202, 0x9Eu);
                  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v201.__r_.__value_.__l.__data_);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(&v202, 0x65CuLL);
                  if (qword_1022A0060 != -1)
                    dispatch_once(&qword_1022A0060, &stru_102174760);
                  logb = (os_log_t)qword_1022A0068;
                  sub_100914D68((const void **)a4, &v201);
                  v148 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
                  v149 = v201.__r_.__value_.__r.__words[0];
                  v150 = sub_10016F694(a4);
                  v151 = *(_QWORD *)(a1 + 20);
                  v152 = &v201;
                  if (v148 < 0)
                    v152 = (std::string *)v149;
                  v153 = *(_QWORD *)(a4 + 72);
                  v154 = *(_QWORD *)(a4 + 80);
                  if (v166)
                    v155 = 76;
                  else
                    v155 = 46;
                  v156 = *(_QWORD *)(a1 + 4);
                  v157 = *(_QWORD *)(a1 + 12);
                  if (v165)
                    v158 = 67;
                  else
                    v158 = 46;
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136385027;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v152;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v169;
                  WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf.__r_.__value_.__r.__words[2]) = v168;
                  v171 = 1024;
                  v172 = v167;
                  v173 = 1024;
                  v174 = v158;
                  v175 = 1024;
                  v176 = v155;
                  v177 = 1026;
                  v178 = a6;
                  v179 = 2050;
                  v180 = v150;
                  v181 = 2050;
                  v182 = a2;
                  v183 = 2049;
                  v184 = v30;
                  v185 = 2049;
                  v186 = v31;
                  v187 = 2049;
                  v188 = v42;
                  v189 = 2049;
                  v190 = v29;
                  v191 = 2050;
                  v192 = v151;
                  v193 = 2049;
                  v194 = v153;
                  v195 = 2049;
                  v196 = v154;
                  v197 = 2049;
                  v198 = v156;
                  v199 = 2049;
                  v200 = v157;
                  _os_log_send_and_compose_impl(2, 0, &v202, 1628, &_mh_execute_header, logb, 2, "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{public}.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{private}.1lf, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocation, %{private}f, %{private}f,", &buf, 158);
                  v82 = v159;
                  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v201.__r_.__value_.__l.__data_);
                  goto LABEL_319;
                }
LABEL_171:
                v39 = v164;
                if (v166 && (*(double *)(a4 + 96) >= 7000.0 || v14))
                  goto LABEL_180;
                v103 = v165;
                if (v164)
                  v103 = 0;
                if (v103 == 1)
                {
                  if (*(double *)(a4 + 96) < 7000.0 && (v29 > v31 * 0.0 || sub_1004E458C(a4)))
                  {
LABEL_180:
                    v39 = *a5;
                    goto LABEL_182;
                  }
                  v39 = 0;
                }
LABEL_182:
                *(double *)(a7 + 624) = v42;
                *(double *)(a7 + 632) = v29;
                *(double *)(a7 + 640) = v30;
                *(double *)(a7 + 648) = v31;
                *(_DWORD *)(a7 + 608) = *a5;
                *(_DWORD *)(a7 + 604) = v39;
                if (!v14)
                  goto LABEL_211;
                goto LABEL_183;
              }
              v49 = 1;
            }
            v164 = v49;
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102174760);
            v50 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
            {
              log = v50;
              if (*(char *)(a4 + 23) >= 0)
                v51 = *(unsigned __int8 *)(a4 + 23);
              else
                v51 = *(_QWORD *)(a4 + 8);
              v52 = &buf;
              sub_100259584((uint64_t)&buf, v51 + 1);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v52 = (std::string *)buf.__r_.__value_.__r.__words[0];
              if (v51)
              {
                if (*(char *)(a4 + 23) >= 0)
                  v53 = (const void *)a4;
                else
                  v53 = *(const void **)a4;
                memmove(v52, v53, v51);
              }
              *(_WORD *)((char *)&v52->__r_.__value_.__l.__data_ + v51) = 47;
              v54 = *(char *)(a4 + 47);
              if (v54 >= 0)
                v55 = (const std::string::value_type *)(a4 + 24);
              else
                v55 = *(const std::string::value_type **)(a4 + 24);
              if (v54 >= 0)
                v56 = *(unsigned __int8 *)(a4 + 47);
              else
                v56 = *(_QWORD *)(a4 + 32);
              v57 = std::string::append(&buf, v55, v56);
              v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
              v201.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v58;
              v57->__r_.__value_.__l.__size_ = 0;
              v57->__r_.__value_.__r.__words[2] = 0;
              v57->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              v59 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
              v60 = v201.__r_.__value_.__r.__words[0];
              v61 = sub_10016F694(a4);
              v62 = *(_QWORD *)(a1 + 20);
              v63 = &v201;
              if (v59 < 0)
                v63 = (std::string *)v60;
              v64 = *(_QWORD *)(a4 + 72);
              v65 = *(_QWORD *)(a4 + 80);
              if (v166)
                v66 = 76;
              else
                v66 = 46;
              v67 = *(_QWORD *)(a1 + 4);
              v68 = *(_QWORD *)(a1 + 12);
              if (v165)
                v69 = 67;
              else
                v69 = 46;
              LODWORD(v202.__r_.__value_.__l.__data_) = 136385027;
              *(std::string::size_type *)((char *)v202.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
              WORD2(v202.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = v169;
              WORD1(v202.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(v202.__r_.__value_.__r.__words[2]) = v168;
              v203 = 1024;
              v204 = v167;
              v205 = 1024;
              v206 = v69;
              v207 = 1024;
              v208 = v66;
              v209 = 1026;
              v210 = a6;
              v211 = 2050;
              v212 = v61;
              v213 = 2050;
              v214 = a2;
              v215 = 2049;
              v216 = v30;
              v217 = 2049;
              v218 = v31;
              v219 = 2049;
              v220 = v42;
              v221 = 2049;
              v222 = v29;
              v223 = 2050;
              v224 = v62;
              v225 = 2049;
              v226 = v64;
              v227 = 2049;
              v228 = v65;
              v229 = 2049;
              v230 = v67;
              v231 = 2049;
              v232 = v68;
              _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{public}.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{private}.1lf, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocation, %{private}f, %{private}f,", (uint8_t *)&v202, 0x9Eu);
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v201.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&v202, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102174760);
              loga = (os_log_t)qword_1022A0068;
              sub_100914D68((const void **)a4, &v201);
              v70 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
              v71 = v201.__r_.__value_.__r.__words[0];
              v72 = sub_10016F694(a4);
              v73 = *(_QWORD *)(a1 + 20);
              v74 = &v201;
              if (v70 < 0)
                v74 = (std::string *)v71;
              v75 = *(_QWORD *)(a4 + 72);
              v76 = *(_QWORD *)(a4 + 80);
              if (v166)
                v77 = 76;
              else
                v77 = 46;
              v78 = *(_QWORD *)(a1 + 4);
              v79 = *(_QWORD *)(a1 + 12);
              if (v165)
                v80 = 67;
              else
                v80 = 46;
              LODWORD(buf.__r_.__value_.__l.__data_) = 136385027;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v169;
              WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf.__r_.__value_.__r.__words[2]) = v168;
              v171 = 1024;
              v172 = v167;
              v173 = 1024;
              v174 = v80;
              v175 = 1024;
              v176 = v77;
              v177 = 1026;
              v178 = a6;
              v179 = 2050;
              v180 = v72;
              v181 = 2050;
              v182 = a2;
              v183 = 2049;
              v184 = v30;
              v185 = 2049;
              v186 = v31;
              v187 = 2049;
              v188 = v42;
              v189 = 2049;
              v190 = v29;
              v191 = 2050;
              v192 = v73;
              v193 = 2049;
              v194 = v75;
              v195 = 2049;
              v196 = v76;
              v197 = 2049;
              v198 = v78;
              v199 = 2049;
              v200 = v79;
              _os_log_send_and_compose_impl(2, 0, &v202, 1628, &_mh_execute_header, loga, 0, "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{public}.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{private}.1lf, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocation, %{private}f, %{private}f,", &buf, 158);
              v82 = v81;
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v201.__r_.__value_.__l.__data_);
LABEL_319:
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v82);
              if (v82 != &v202)
                free(v82);
              goto LABEL_171;
            }
            goto LABEL_171;
          }
        }
LABEL_67:
        if (v30 > 0.0)
          goto LABEL_69;
        goto LABEL_68;
    }
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102174760);
  v17 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
  {
    sub_100071A00(a1, &v202);
    v18 = (v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v202
        : (std::string *)v202.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Fence: location, why are you unknown?, %{private}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&v202, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102174760);
    v19 = qword_1022A0068;
    sub_100071A00(a1, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &buf;
    else
      v20 = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v201.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v201.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
    _os_log_send_and_compose_impl(2, 0, &v202, 1628, &_mh_execute_header, v19, 16, "Fence: location, why are you unknown?, %{private}s", &v201, 12);
    v22 = v21;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v22);
    if (v22 != &v202)
      free(v22);
  }
LABEL_30:
  v14 = *a5;
LABEL_31:
  result = (_DWORD)v10 != 0;
  *(_DWORD *)a7 = v14;
  return result;
}

void sub_100B70A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a45 < 0)
    operator delete(a40);
  _Unwind_Resume(exception_object);
}

void sub_100B70B98(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100B70BC4(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100B70BF0(uint64_t a1, double ***a2)
{
  _QWORD *v2;
  _QWORD *v3;
  double **v5;
  double *v6;
  double *v7;
  double v8;
  long double v9;
  double v10;
  _QWORD *v11;
  double **v12;
  double *v13;
  double *v14;
  uint64_t v15;
  double v16;
  long double v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v3)
  {
    if (v2 + 2 == v3)
    {
      v12 = *a2;
      v14 = **a2;
      v13 = (*a2)[1];
      v15 = v2[1];
      *(_QWORD *)&v20 = *v2;
      *((_QWORD *)&v20 + 1) = v15;
      v21 = v20;
      v22 = v15;
      v19 = 0x3FF0000000000000;
      v16 = sub_100B711DC((uint64_t)&v19, v13, (double *)&v20, (double *)&v21);
      v17 = asin(sqrt(v16));
      v18 = (v17 + v17) * 6378135.0;
      if (v18 >= *v14)
        v18 = *v14;
      **v12 = v18;
    }
    else
    {
      do
      {
        v5 = *a2;
        v7 = **a2;
        v6 = (*a2)[1];
        v20 = *(_OWORD *)v2;
        v21 = v2[2];
        v22 = v2[3];
        v19 = 0x3FF0000000000000;
        v8 = sub_100B711DC((uint64_t)&v19, v6, (double *)&v20, (double *)&v21);
        v9 = asin(sqrt(v8));
        v10 = (v9 + v9) * 6378135.0;
        if (v10 >= *v7)
          v10 = *v7;
        **v5 = v10;
        v11 = v2 + 4;
        v2 += 2;
      }
      while (v11 != v3);
    }
  }
}

void sub_100B70D58(uint64_t a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_100B70DB8((uint64_t)exception, a1, a2);
}

void sub_100B70DA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int8x16_t sub_100B70DB8(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  int8x16_t result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_102174820;
  *(_QWORD *)(a1 + 8) = off_102174850;
  *(_QWORD *)(a1 + 16) = off_102174878;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = a3[1].i32[0];
  result = vextq_s8(*a3, *a3, 8uLL);
  *(int8x16_t *)(a1 + 32) = result;
  return result;
}

uint64_t sub_100B70DF0(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void sub_100B70E30()
{
  operator new();
}

void sub_100B70EFC()
{
  std::exception *v0;

  std::exception::~exception(v0);
  operator delete();
}

void sub_100B70F40(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_100B71128((uint64_t)exception, a1);
}

void sub_100B70F7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100B70F90(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  operator delete();
}

void sub_100B70FE0(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

void sub_100B71018(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  operator delete();
}

const char *sub_100B7106C()
{
  return "Boost.Geometry Empty-Input exception";
}

void sub_100B71078(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
}

void sub_100B710B0(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
  operator delete();
}

void sub_100B71104(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_100B71128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_10212A310;
  *(_QWORD *)(a1 + 8) = &off_102174898;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_10212A340;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_102174820;
  *(_QWORD *)(a1 + 8) = off_102174850;
  *(_QWORD *)(a1 + 16) = off_102174878;
  return a1;
}

void sub_100B711C8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

long double sub_100B711DC(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v13;
  unsigned __int8 v14;
  double v15;
  double v16;
  unsigned __int8 v17;
  double v18;
  double v19;
  unsigned __int8 v20;
  double v21;
  double v22;
  unsigned __int8 v23;
  double v24;
  double v25;
  unsigned __int8 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned __int8 v31;
  double v32;
  __double2 v33;
  __double2 v34;
  __double2 v35;
  __double2 v36;
  __double2 v37;
  long double v38;
  __double2 v39;
  long double v40;
  long double v41;
  double v42;
  long double v43;
  double v44;
  int v45;
  double v46;
  int v47;
  double v48;
  int v49;
  int v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;

  v7 = sub_100B7167C(a3, a2);
  v8 = sub_100B7167C(a3, a4);
  if (v8 != 0.0)
  {
    v10 = v8;
    if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_7;
    v11 = fabs(v8);
    v12 = 2.22044605e-16;
    if (v11 >= 1.0)
      v12 = v11 * 2.22044605e-16;
    if (v11 > v12)
    {
LABEL_7:
      v59 = v7;
      v57 = sub_100B7167C(a4, a2);
      v13 = *a3;
      v14 = atomic_load((unsigned __int8 *)&qword_1022A4130);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1022A4130))
      {
        qword_1022A4128 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_1022A4130);
      }
      v58 = v10;
      v15 = *(double *)&qword_1022A4128;
      v16 = a3[1];
      v17 = atomic_load((unsigned __int8 *)&qword_1022A4130);
      if ((v17 & 1) == 0)
      {
        v44 = a3[1];
        v45 = __cxa_guard_acquire(&qword_1022A4130);
        v16 = v44;
        if (v45)
        {
          qword_1022A4128 = 0x3F91DF46A2529D39;
          __cxa_guard_release(&qword_1022A4130);
          v16 = v44;
        }
      }
      v18 = *(double *)&qword_1022A4128;
      v19 = *a4;
      v20 = atomic_load((unsigned __int8 *)&qword_1022A4130);
      if ((v20 & 1) == 0)
      {
        v46 = v16;
        v47 = __cxa_guard_acquire(&qword_1022A4130);
        v16 = v46;
        if (v47)
        {
          qword_1022A4128 = 0x3F91DF46A2529D39;
          __cxa_guard_release(&qword_1022A4130);
          v16 = v46;
        }
      }
      v21 = *(double *)&qword_1022A4128;
      v22 = a4[1];
      v23 = atomic_load((unsigned __int8 *)&qword_1022A4130);
      if ((v23 & 1) == 0)
      {
        v48 = v16;
        v49 = __cxa_guard_acquire(&qword_1022A4130);
        v16 = v48;
        if (v49)
        {
          qword_1022A4128 = 0x3F91DF46A2529D39;
          __cxa_guard_release(&qword_1022A4130);
          v16 = v48;
        }
      }
      v24 = *(double *)&qword_1022A4128;
      v25 = *a2;
      v26 = atomic_load((unsigned __int8 *)&qword_1022A4130);
      if ((v26 & 1) == 0)
      {
        v56 = v16;
        v50 = __cxa_guard_acquire(&qword_1022A4130);
        v16 = v56;
        if (v50)
        {
          qword_1022A4128 = 0x3F91DF46A2529D39;
          __cxa_guard_release(&qword_1022A4130);
          v16 = v56;
        }
      }
      v27 = v13 * v15;
      v28 = v16 * v18;
      v53 = v22 * v24;
      v55 = v19 * v21;
      v29 = v25 * *(double *)&qword_1022A4128;
      v30 = a2[1];
      v31 = atomic_load((unsigned __int8 *)&qword_1022A4130);
      if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1022A4130))
      {
        qword_1022A4128 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_1022A4130);
      }
      v32 = v30 * *(double *)&qword_1022A4128;
      v33 = __sincos_stret(v29 - v27);
      v34 = __sincos_stret(v28);
      v51 = v29;
      v35 = __sincos_stret(v32);
      v52 = atan2(v33.__sinval * v35.__cosval, v33.__cosval * -(v34.__sinval * v35.__cosval) + v34.__cosval * v35.__sinval);
      v36 = __sincos_stret(v55 - v27);
      v37 = __sincos_stret(v53);
      v54 = atan2(v36.__sinval * v37.__cosval, v36.__cosval * -(v34.__sinval * v37.__cosval) + v34.__cosval * v37.__sinval);
      v38 = atan2(v34.__cosval * v36.__sinval, v34.__cosval * v37.__sinval * v36.__cosval - v34.__sinval * v37.__cosval)
          + -3.14159265;
      v39 = __sincos_stret(v51 - v55);
      v40 = atan2(v39.__sinval * v35.__cosval, v39.__cosval * -(v37.__sinval * v35.__cosval) + v37.__cosval * v35.__sinval)- v38;
      v7 = v59;
      v41 = v59 * cos(v52 - v54) / v58;
      v42 = cos(v40);
      if (v41 <= 0.0 || v57 * v42 / v58 <= 0.0)
      {
        if (v57 < v59)
          return v57;
      }
      else
      {
        v43 = sin(v52 - v54);
        return v59 * v43 * (v43 - v59 * v43) / (sqrt(0.25 - v59 * v43 * (v43 - v59 * v43)) + 0.5);
      }
    }
  }
  return v7;
}

long double sub_100B7167C(double *a1, double *a2)
{
  double v2;
  unsigned __int8 v3;
  double v4;
  double v5;
  unsigned __int8 v6;
  double v7;
  double v8;
  unsigned __int8 v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  double v13;
  long double v14;
  double v15;
  long double v16;
  long double v17;
  long double v18;
  double v19;
  long double v20;
  long double v21;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double *v32;
  double *v33;
  double *v34;
  double v35;
  double *v36;
  uint64_t v37;
  double v38;
  double v39;

  v2 = *a1;
  v3 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v3 & 1) == 0)
  {
    v32 = a2;
    v36 = a1;
    v23 = __cxa_guard_acquire(&qword_1022A4130);
    a2 = v32;
    a1 = v36;
    if (v23)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      a2 = v32;
      a1 = v36;
    }
  }
  v4 = *(double *)&qword_1022A4128;
  v5 = a1[1];
  v6 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v6 & 1) == 0)
  {
    v33 = a2;
    v37 = qword_1022A4128;
    v24 = __cxa_guard_acquire(&qword_1022A4130);
    v4 = *(double *)&v37;
    a2 = v33;
    if (v24)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v4 = *(double *)&v37;
      a2 = v33;
    }
  }
  v7 = *(double *)&qword_1022A4128;
  v8 = *a2;
  v9 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v9 & 1) == 0)
  {
    v34 = a2;
    v38 = v4;
    v28 = *a2;
    v30 = qword_1022A4128;
    v25 = __cxa_guard_acquire(&qword_1022A4130);
    v8 = v28;
    v7 = *(double *)&v30;
    v4 = v38;
    a2 = v34;
    if (v25)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v8 = v28;
      v7 = *(double *)&v30;
      v4 = v38;
      a2 = v34;
    }
  }
  v10 = *(double *)&qword_1022A4128;
  v11 = a2[1];
  v12 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v12 & 1) == 0)
  {
    v35 = a2[1];
    v39 = v4;
    v29 = v8;
    v31 = v7;
    v27 = qword_1022A4128;
    v26 = __cxa_guard_acquire(&qword_1022A4130);
    v10 = *(double *)&v27;
    v8 = v29;
    v7 = v31;
    v11 = v35;
    v4 = v39;
    if (v26)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v10 = *(double *)&v27;
      v8 = v29;
      v7 = v31;
      v11 = v35;
      v4 = v39;
    }
  }
  v13 = v8 * v10;
  v14 = v5 * v7;
  v15 = v2 * v4;
  v16 = v11 * *(double *)&qword_1022A4128;
  v17 = sin((v11 * *(double *)&qword_1022A4128 - v14) * 0.5);
  v18 = v17 * v17;
  v19 = cos(v14);
  v20 = v19 * cos(v16);
  v21 = sin((v13 - v15) * 0.5);
  return v18 + v20 * (v21 * v21);
}

void sub_100B71900(double *a1, uint64_t a2, double *a3)
{
  double *v5;
  double *v6;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  double *v14;
  double v15;
  char v16;
  double v17;
  uint64_t v18;
  char v19;

  v5 = *(double **)a2;
  v6 = *(double **)(a2 + 8);
  if ((unint64_t)v6 - *(_QWORD *)a2 >= 0x40)
  {
    v16 = 0;
    v17 = 0.0;
    v18 = 0;
    v19 = 0;
    if (v5 + 2 != v6)
    {
      do
      {
        if (!sub_100779378((uint64_t)&v16, a1, v5, v5 + 2, (uint64_t)&v17))
          break;
        v8 = v5 + 4;
        v5 += 2;
      }
      while (v8 != v6);
      if (v19)
        goto LABEL_6;
      if ((_DWORD)v18 && HIDWORD(v18) && (int)v18 >= 1)
      {
        if (!(LODWORD(v17) + HIDWORD(v17)))
          goto LABEL_13;
LABEL_6:
        sub_100B71AB8(a1, *(double ***)(a2 + 24), *(double ***)(a2 + 32), a3);
        return;
      }
      if (LODWORD(v17))
        goto LABEL_6;
    }
LABEL_13:
    v5 = *(double **)a2;
    v6 = *(double **)(a2 + 8);
  }
  if (v6 != v5)
  {
    v17 = *a3;
    v9 = v5 + 2;
    if (v5 + 2 == v6)
    {
      sub_100B711DC((uint64_t)&v17, a1, v5, v5);
      v12 = v5;
    }
    else
    {
      v10 = sub_100B711DC((uint64_t)&v17, a1, v5, v5 + 2);
      if (v5 + 4 == v6)
      {
LABEL_22:
        v12 = v5 + 2;
      }
      else
      {
        v11 = v10;
        while (1)
        {
          v12 = v9 + 2;
          v13 = sub_100B711DC((uint64_t)&v17, a1, v9, v9 + 2);
          if (v13 == 0.0)
            break;
          if (v13 < v11)
          {
            v11 = v13;
            v5 = v9;
          }
          v14 = v9 + 4;
          v9 += 2;
          if (v14 == v6)
            goto LABEL_22;
        }
        v5 = v9;
      }
    }
    v17 = *a3;
    v15 = sub_100B711DC((uint64_t)&v17, a1, v5, v12);
    asin(sqrt(v15));
  }
}

long double sub_100B71AB8(double *a1, double **a2, double **a3, double *a4)
{
  double v4;
  double **v7;
  double *v9;
  double *v10;
  double *v11;
  double *v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  long double v23;
  char v24;
  double v25;
  uint64_t v26;
  char v27;

  v4 = 0.0;
  if (a2 == a3)
    return v4;
  v7 = a2;
  while (1)
  {
    v9 = *v7;
    v10 = v7[1];
    if ((unint64_t)((char *)v10 - (char *)*v7) < 0x40)
      goto LABEL_14;
    v24 = 0;
    v25 = 0.0;
    v26 = 0;
    v27 = 0;
    if (v9 + 2 == v10)
      goto LABEL_14;
    do
    {
      if (!sub_100779378((uint64_t)&v24, a1, v9, v9 + 2, (uint64_t)&v25))
        break;
      v11 = v9 + 4;
      v9 += 2;
    }
    while (v11 != v10);
    if (v27)
      goto LABEL_14;
    if (!(_DWORD)v26 || !HIDWORD(v26) || (int)v26 < 1)
      break;
    if (LODWORD(v25) + HIDWORD(v25))
      goto LABEL_16;
LABEL_14:
    v7 += 3;
    if (v7 == a3)
      return v4;
  }
  if (!LODWORD(v25))
    goto LABEL_14;
LABEL_16:
  v13 = *v7;
  v14 = v7[1];
  if (v14 != *v7)
  {
    v25 = *a4;
    v15 = v13 + 2;
    if (v13 + 2 == v14)
    {
      sub_100B711DC((uint64_t)&v25, a1, v13, v13);
      v18 = v13;
    }
    else
    {
      v16 = sub_100B711DC((uint64_t)&v25, a1, v13, v13 + 2);
      if (v13 + 4 == v14)
      {
LABEL_24:
        v18 = v13 + 2;
      }
      else
      {
        v17 = v16;
        while (1)
        {
          v18 = v15 + 2;
          v19 = sub_100B711DC((uint64_t)&v25, a1, v15, v15 + 2);
          if (v19 == 0.0)
            break;
          if (v19 < v17)
          {
            v17 = v19;
            v13 = v15;
          }
          v20 = v15 + 4;
          v15 += 2;
          if (v20 == v14)
            goto LABEL_24;
        }
        v13 = v15;
      }
    }
    v25 = *a4;
    v21 = v25;
    v22 = sub_100B711DC((uint64_t)&v25, a1, v13, v18);
    v23 = asin(sqrt(v22));
    return v21 * (v23 + v23);
  }
  return v4;
}

uint64_t sub_100B71C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  sub_1004E5E40((uint64_t)&v9);
  v8 = (std::string *)&v9;
  v4 = sub_100B71D84(a1, &v8, (uint64_t)&v6);
  std::stringbuf::str(&v6, v10);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf(v10);
  std::ios::~ios(&v12);
  return v4;
}

void sub_100B71D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B71D84(uint64_t a1, std::string **a2, uint64_t a3)
{
  double **v6;
  double **v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (sub_100B722FC((double **)a1, a2, a3))
  {
    v6 = *(double ***)(a1 + 24);
    v7 = *(double ***)(a1 + 32);
    while (v6 != v7)
    {
      if ((sub_100B74494(v6, a2, a3) & 1) == 0)
        return 0;
      v6 += 3;
    }
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    v9 = sub_100B71F74(a1, &v17, a2, a3);
    if ((_QWORD)v18 == *((_QWORD *)&v17 + 1))
    {
      if (!v9)
        goto LABEL_15;
      v11 = 0;
      v12 = 0;
      v10 = (_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * ((*((_QWORD *)&v19 + 1) + (_QWORD)v19) / 0x14uLL));
    }
    else
    {
      if (!v9)
        goto LABEL_15;
      v10 = (_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * ((*((_QWORD *)&v19 + 1) + (_QWORD)v19) / 0x14uLL));
      v11 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14))
          + 200 * ((unint64_t)v19 % 0x14);
      v12 = *v10 + 200 * ((*((_QWORD *)&v19 + 1) + (_QWORD)v19) % 0x14uLL);
    }
    if (sub_100B801DC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (double **)a1, (_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14)), v11, (uint64_t)v10, v12, a2, a3))
    {
      if ((_QWORD)v18 == *((_QWORD *)&v17 + 1))
      {
        v13 = 0;
        v15 = 0;
        v14 = (_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * ((*((_QWORD *)&v19 + 1) + (_QWORD)v19) / 0x14uLL));
      }
      else
      {
        v13 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14))
            + 200 * ((unint64_t)v19 % 0x14);
        v14 = (_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * ((*((_QWORD *)&v19 + 1) + (_QWORD)v19) / 0x14uLL));
        v15 = *v14 + 200 * ((*((_QWORD *)&v19 + 1) + (_QWORD)v19) % 0x14uLL);
      }
      v8 = sub_100B720D0(a1, (_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14)), v13, (uint64_t)v14, v15, a2);
      goto LABEL_18;
    }
LABEL_15:
    v8 = 0;
LABEL_18:
    sub_100B90260(&v17);
    return v8;
  }
  return 0;
}

void sub_100B71F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100B90260((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100B71F74(uint64_t a1, _QWORD *a2, std::string **a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  int v16;
  char v17;
  void *__p;
  void *v19;
  uint64_t v20;

  v12 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_100B74754(a1, (uint64_t)&v12 + 1, (float64x2_t **)&__p, a4, 0, 0xAuLL);
  v15[0] = a1;
  v15[1] = a4;
  v15[2] = (char *)&v12 + 1;
  v15[3] = a2;
  v15[4] = &v12;
  v16 = 0;
  v17 = 1;
  v13 = a4;
  v14 = a4;
  sub_100B772C0((uint64_t *)&__p, (uint64_t)v15, (uint64_t)&v14, (uint64_t)&v13, 0x10uLL);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  v8 = v12;
  if ((_BYTE)v12)
  {
    v9 = a2[1];
    if (a2[2] == v9
      || *(_QWORD *)(v9 + 8 * (a2[4] / 0x14uLL)) + 200 * (a2[4] % 0x14uLL) == *(_QWORD *)(v9
                                                                                        + 8
                                                                                        * ((a2[5] + a2[4])
                                                                                         / 0x14uLL))
                                                                            + 200 * ((a2[5] + a2[4]) % 0x14uLL))
    {
      sub_10191B738();
    }
    sub_100B72AF4(a3, 21);
    sub_100B7FCB4(*a3, a2, v10);
  }
  else
  {
    sub_100B72AF4(a3, 0);
  }
  return v8 == 0;
}

void sub_100B720B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B720D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string **a6)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v18;
  const char *v19;
  unint64_t v20[2];
  uint64_t *v21;
  _QWORD *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  sub_100B8F288(v20, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3) + 1);
  if (a3 != a5)
  {
    while (1)
    {
      v24 = (unint64_t)(*(_QWORD *)(a3 + 64) + 1);
      v10 = sub_100B8F3E8(&v21, &v24, &v24);
      v24 = (unint64_t)(*(_QWORD *)(a3 + 144) + 1);
      v11 = sub_100B8F3E8(&v21, &v24, &v24);
      v12 = sub_100B8EF70((uint64_t)v20, a3);
      v13 = (uint64_t)v12;
      *(_QWORD *)&v24 = v10;
      v25 = (uint64_t)v12;
      if (v22 == (_QWORD **)v10)
        break;
      if (v22 == (_QWORD **)v12)
      {
        v18 = 203;
        v19 = "v2 != m_vertices.end()";
LABEL_14:
        __assert_rtn("add_edge", "complement_graph.hpp", v18, v19);
      }
      sub_100B8F9D0((uint64_t **)(v23 + 24 * v10[4]), (uint64_t)&v25, &v25);
      sub_100B8F9D0((uint64_t **)(v23 + 24 * *(_QWORD *)(v25 + 32)), (uint64_t)&v24, (uint64_t *)&v24);
      *(_QWORD *)&v24 = v11;
      v25 = v13;
      if (v22 == (_QWORD **)v11)
        break;
      sub_100B8F9D0((uint64_t **)(v23 + 24 * v11[4]), (uint64_t)&v25, &v25);
      sub_100B8F9D0((uint64_t **)(v23 + 24 * *(_QWORD *)(v25 + 32)), (uint64_t)&v24, (uint64_t *)&v24);
      a3 += 200;
      if (a3 - *a2 == 4000)
      {
        v14 = a2[1];
        ++a2;
        a3 = v14;
      }
      if (a3 == a5)
        goto LABEL_8;
    }
    v18 = 202;
    v19 = "v1 != m_vertices.end()";
    goto LABEL_14;
  }
LABEL_8:
  v15 = sub_100B8F150(v20);
  if (v15)
    v16 = 32;
  else
    v16 = 0;
  sub_100B72AF4(a6, v16);
  *(_QWORD *)&v24 = &v23;
  sub_100B8F370((void ***)&v24);
  sub_100008848((uint64_t)&v21, v22[0]);
  return v15 ^ 1u;
}

void sub_100B722D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100B8F244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B722FC(double **a1, std::string **a2, uint64_t a3)
{
  double *v6;
  double *v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t result;
  double *v12;
  std::string **v13;
  int v14;
  double *v15;
  double *v16;
  double *v17;
  char v18;
  double *v19[2];

  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    sub_100B72AF4(a2, 0);
  }
  else
  {
    do
    {
      v8 = (*(_QWORD *)v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((_QWORD)v6[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      v9 = !v8;
      if (!v8)
        break;
      v6 += 2;
    }
    while (v6 != v7);
    if (v9)
      v10 = 60;
    else
      v10 = 0;
    sub_100B72AF4(a2, v10);
    result = 0;
    if ((v9 & 1) != 0)
      return result;
  }
  v12 = a1[1];
  if ((unint64_t)((char *)v12 - (char *)*a1) <= 0x3F)
  {
    v13 = a2;
    v14 = 10;
LABEL_21:
    sub_100B72AF4(v13, v14);
    return 0;
  }
  v19[0] = *a1;
  v19[1] = v12;
  if (sub_100B7246C(v19) <= 3)
  {
    v13 = a2;
    v14 = 11;
    goto LABEL_21;
  }
  result = sub_100B725F8(a1, a2, a3);
  if ((_DWORD)result)
  {
    v15 = *a1;
    v16 = a1[1];
    if ((unint64_t)((char *)v16 - (char *)*a1) >= 0x20)
    {
      v17 = v15 + 2;
      while (v17 != v16 && (sub_100B72CA4(v15, v15 + 2) & 1) == 0)
      {
        v17 = v15 + 4;
        v15 += 2;
      }
    }
    sub_100B72AF4(a2, 0);
    v18 = sub_100B72758(a1, a2, a3);
    result = 0;
    if ((v18 & 1) == 0)
      return sub_100B729A4(a1, a2);
  }
  return result;
}

unint64_t sub_100B7246C(double **a1)
{
  double *v1;
  double *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22;
  double v23;

  v2 = *a1;
  v1 = a1[1];
  v3 = (char *)v1 - (char *)*a1;
  if (v3 < 0x20)
    return v3 >> 4;
  v6 = 0;
  do
  {
    v4 = v6 + 1;
    if (v2 == v1)
      break;
    v7 = v2;
    while (1)
    {
      v23 = *v7;
      v22 = v7[1];
      sub_100778A68(&v23, &v22, 1);
      v8 = v22;
      v9 = v23;
      v10 = *v2;
      v22 = v2[1];
      v23 = v10;
      sub_100778A68(&v23, &v22, 1);
      if (v9 != v23)
      {
        if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        v12 = vabdd_f64(v9, v23);
        v13 = fabs(v9);
        v14 = fabs(v23);
        if (v13 >= v14)
          v14 = v13;
        v15 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 > v15)
          break;
      }
      if (v8 != v22)
      {
        if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        v17 = vabdd_f64(v8, v22);
        v18 = fabs(v8);
        v19 = fabs(v22);
        if (v18 >= v19)
          v19 = v18;
        v20 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
        if (v17 > v20)
          break;
      }
      v7 += 2;
      if (v7 == v1)
        return v4;
    }
    if (v7 == v1)
      break;
    v2 = v7;
  }
  while (v6++ < 4);
  return v4;
}

uint64_t sub_100B725F8(double **a1, std::string **a2, uint64_t a3)
{
  double *v3;
  double *v4;
  double v6;
  double v7;
  double v8;
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  double v21;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    sub_10191B760((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *v3;
  v20 = v3[1];
  v21 = v6;
  sub_100778A68(&v21, &v20, 1);
  v7 = v20;
  v8 = v21;
  v21 = *(v4 - 2);
  v20 = *(v4 - 1);
  sub_100778A68(&v21, &v20, 1);
  if (v8 != v21)
  {
    if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_22;
    }
    v11 = vabdd_f64(v8, v21);
    v12 = fabs(v8);
    v13 = fabs(v21);
    if (v12 >= v13)
      v13 = v12;
    v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
    if (v11 > v14)
      goto LABEL_22;
  }
  if (v7 == v20)
    goto LABEL_4;
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_22;
  }
  v15 = vabdd_f64(v7, v20);
  v16 = fabs(v7);
  v17 = fabs(v20);
  if (v16 >= v17)
    v17 = v16;
  v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
  if (v15 <= v18)
  {
LABEL_4:
    v9 = 0;
    v10 = 1;
  }
  else
  {
LABEL_22:
    v10 = 0;
    v9 = 20;
  }
  sub_100B72AF4(a2, v9);
  return v10;
}

uint64_t sub_100B72758(double **a1, std::string **a2, uint64_t a3)
{
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v6 = *a1;
  v5 = a1[1];
  v27 = v6;
  v28 = v5;
  v7 = sub_100B72F14(v6, v5);
  if (v5 != v7)
  {
    v8 = v7;
    v9 = sub_100B72F14(v7, v5);
    if (v5 != v9)
    {
      do
      {
        v10 = v9;
        if (!sub_10077970C(v9, v8, v6))
        {
          v11 = *(_OWORD *)v10;
          v12 = *(_OWORD *)v6;
          v30 = *(_OWORD *)v8;
          v31 = v11;
          v29 = v12;
          if ((int)sub_100B73154((double *)&v31, (double *)&v30, (double *)&v29) <= 0)
          {
            sub_100B72AF4(a2, 12);
            sub_100B73A50(*a2, 0, (uint64_t)v8);
            return 1;
          }
        }
        v9 = sub_100B72F14(v10, v28);
        v6 = v8;
        v8 = v10;
      }
      while (v5 != v9);
      if (v27 == v28)
        sub_10191B760((uint64_t)v9, v13, v14);
      v15 = *((_QWORD *)v27 + 1);
      *(double *)&v31 = *v27;
      *(_QWORD *)&v30 = v15;
      sub_100778A68((double *)&v31, (double *)&v30, 1);
      v16 = *(double *)&v31;
      v17 = *(double *)&v30;
      *(double *)&v31 = *(v28 - 2);
      *(double *)&v30 = *(v28 - 1);
      sub_100778A68((double *)&v31, (double *)&v30, 1);
      if (v16 == *(double *)&v31)
        goto LABEL_27;
      if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((unint64_t)v31 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v19 = vabdd_f64(v16, *(double *)&v31);
        v20 = fabs(v16);
        v21 = fabs(*(double *)&v31);
        if (v20 >= v21)
          v21 = v20;
        v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 <= v22)
        {
LABEL_27:
          if (v17 == *(double *)&v30)
            return sub_100B73074((uint64_t *)&v27, a2, a3, 0);
          if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && ((unint64_t)v30 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v23 = vabdd_f64(v17, *(double *)&v30);
            v24 = fabs(v17);
            v25 = fabs(*(double *)&v30);
            if (v24 >= v25)
              v25 = v24;
            v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
            if (v23 <= v26)
              return sub_100B73074((uint64_t *)&v27, a2, a3, 0);
          }
        }
      }
    }
  }
  sub_100B72AF4(a2, 0);
  return 0;
}

uint64_t sub_100B729A4(_QWORD *a1, std::string **a2)
{
  double *v3;
  double *v4;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  uint64_t v21;

  v3 = (double *)a1[1];
  v4 = (double *)(*a1 + 16);
  if ((unint64_t)v3 - *a1 < 0x40 || v4 == v3)
    goto LABEL_27;
  v6 = 0;
  v7 = 0.0;
  do
  {
    v8 = *(v4 - 2);
    v9 = *v4;
    if (v8 != *v4)
    {
      if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_11;
      }
      v11 = vabdd_f64(v8, v9);
      v12 = fabs(v8);
      v13 = fabs(v9);
      if (v12 < v13)
        v12 = v13;
      v14 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
      if (v11 > v14)
      {
LABEL_11:
        v7 = v7 + sub_100778CD4(v4 - 2, v4);
        v6 += sub_100778F24(v4 - 2, v4);
      }
    }
    v4 += 2;
  }
  while (v4 != v3);
  if ((v6 & 1) != 0)
  {
    v15 = (double)((v6 >> 1) + 1);
    v16 = fabs(v7);
    v17 = -v16;
    v18 = -(v16 - v15 * 6.28318531);
    v19 = -(v17 + v15 * 6.28318531);
    if (v7 <= 0.0)
      v7 = v18;
    else
      v7 = v19;
  }
  if (v7 <= 0.0)
  {
LABEL_27:
    v21 = 0;
    v20 = 22;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  sub_100B72AF4(a2, v20);
  return v21;
}

_QWORD *sub_100B72AF4(std::string **a1, int a2)
{
  std::string *v4;
  std::string *v5;
  const char *v6;
  size_t v7;
  std::string __str;

  v4 = *a1;
  sub_1015A2E04(&__str, "");
  std::string::operator=(v4 + 3, &__str);
  sub_1004ADDC8((uint64_t)&v4->__r_.__value_.__l.__size_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::ios_base::clear((std::ios_base *)((char *)*a1 + *(_QWORD *)((*a1)->__r_.__value_.__r.__words[0] - 24)), 0);
  v5 = *a1;
  if (a2 > 39)
  {
    switch(a2)
    {
      case '(':
        v6 = "Multi-polygon has intersecting interiors";
        break;
      case '2':
        v6 = "Box has corners in wrong order";
        break;
      case '<':
        v6 = "Geometry has point(s) with invalid coordinate(s)";
        break;
      default:
LABEL_12:
        v6 = "";
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 10:
        v6 = "Geometry has too few points";
        break;
      case 11:
        v6 = "Geometry has wrong topological dimension";
        break;
      case 12:
        v6 = "Geometry has spikes";
        break;
      case 13:
        v6 = "Geometry has duplicate (consecutive) points";
        break;
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
        goto LABEL_12;
      case 20:
        v6 = "Geometry is defined as closed but is open";
        break;
      case 21:
        v6 = "Geometry has invalid self-intersections";
        break;
      case 22:
        v6 = "Geometry has wrong orientation";
        break;
      case 30:
        v6 = "Geometry has interior rings defined outside the outer boundary";
        break;
      case 31:
        v6 = "Geometry has nested interior rings";
        break;
      case 32:
        v6 = "Geometry has disconnected interior";
        break;
      default:
        if (a2)
          goto LABEL_12;
        v6 = "Geometry is valid";
        break;
    }
  }
  v7 = strlen(v6);
  return sub_100263F7C(v5, (uint64_t)v6, v7);
}

void sub_100B72C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B72CA4(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _BOOL4 v12;
  double v13;
  double v14;
  _BOOL4 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v3 = *a1;
  v2 = a1[1];
  v5 = *a2;
  v4 = a2[1];
  if (*a1 == *a2)
    goto LABEL_2;
  v7 = fabs(v5);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v12 = fabs(v3) == 180.0;
  }
  else
  {
    if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v8 = vabdd_f64(v3, v5);
      v9 = fabs(v3);
      if (v9 < v7)
        v9 = v7;
      v10 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
      if (v8 <= v10)
        goto LABEL_2;
    }
    v11 = fabs(v3);
    v12 = v11 == 180.0;
    if (v11 != 180.0)
    {
      v13 = fabs(v11 + -180.0);
      if (v11 < 180.0)
        v11 = 180.0;
      if (v11 >= 1.0)
        v14 = v11 * 2.22044605e-16;
      else
        v14 = 2.22044605e-16;
      v12 = v13 <= v14;
    }
  }
  if (v7 == 180.0)
  {
    v16 = 1;
  }
  else
  {
    if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_35;
    v17 = fabs(v7 + -180.0);
    if (v7 < 180.0)
      v7 = 180.0;
    if (v7 >= 1.0)
      v18 = v7 * 2.22044605e-16;
    else
      v18 = 2.22044605e-16;
    v16 = v17 <= v18;
  }
  if (v12 && v16)
  {
LABEL_2:
    if (v2 == v4)
      return 1;
    if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v22 = vabdd_f64(v2, v4);
      v23 = fabs(v2);
      v24 = fabs(v4);
      if (v23 < v24)
        v23 = v24;
      v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
      if (v22 <= v25)
        return 1;
    }
    return 0;
  }
LABEL_35:
  if (v2 == v4)
  {
    v19 = fabs(v2);
  }
  else
  {
    if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    v26 = vabdd_f64(v2, v4);
    v19 = fabs(v2);
    v27 = fabs(v4);
    if (v19 >= v27)
      v27 = v19;
    v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
    if (v26 > v28)
      return 0;
  }
  if (v19 == 90.0)
    goto LABEL_2;
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v20 = fabs(v19 + -90.0);
    if (v19 < 90.0)
      v19 = 90.0;
    v21 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
    if (v20 <= v21)
      goto LABEL_2;
  }
  return 0;
}

double *sub_100B72F14(double *a1, double *a2)
{
  double *v2;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  double v20;

  v2 = a2;
  if (a1 != a2)
  {
    v4 = a1 + 2;
    if (a1 + 2 == a2)
      return v2;
    while (1)
    {
      v20 = *v4;
      v19 = v4[1];
      sub_100778A68(&v20, &v19, 1);
      v5 = v19;
      v6 = v20;
      v7 = *a1;
      v19 = a1[1];
      v20 = v7;
      sub_100778A68(&v20, &v19, 1);
      if (v6 != v20)
      {
        if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        v9 = vabdd_f64(v6, v20);
        v10 = fabs(v6);
        v11 = fabs(v20);
        if (v10 >= v11)
          v11 = v10;
        v12 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
        if (v9 > v12)
          break;
      }
      if (v5 != v19)
      {
        if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        v14 = vabdd_f64(v5, v19);
        v15 = fabs(v5);
        v16 = fabs(v19);
        if (v15 >= v16)
          v16 = v15;
        v17 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
        if (v14 > v17)
          break;
      }
      v4 += 2;
      if (v4 == v2)
        return v2;
    }
    return v4;
  }
  return v2;
}

uint64_t sub_100B73074(uint64_t *a1, std::string **a2, uint64_t a3, int a4)
{
  double *v7;
  uint64_t v8;
  double *v9;
  __int128 v10;
  __int128 v11;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v7 = (double *)*a1;
  v8 = sub_100B74328(a1[1], *a1);
  v9 = sub_100B72F14(v7, (double *)a1[1]);
  if (sub_10077970C(v9, v7, (double *)(v8 - 16))
    || (v10 = *(_OWORD *)v9,
        v11 = *(_OWORD *)(v8 - 16),
        v15 = *(_OWORD *)v7,
        v16 = v10,
        v14 = v11,
        (int)sub_100B73154((double *)&v16, (double *)&v15, (double *)&v14) > 0))
  {
    sub_100B72AF4(a2, 0);
    return 0;
  }
  else
  {
    if (a4)
      v13 = 0;
    else
      v13 = 12;
    sub_100B72AF4(a2, v13);
    sub_100B73A50(*a2, a4, (uint64_t)v7);
    return a4 ^ 1u;
  }
}

uint64_t sub_100B73154(double *a1, double *a2, double *a3)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  _BOOL4 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _BOOL4 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  _BOOL4 v41;
  double v42;
  double v43;
  double v44;
  char v45;
  char v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  unsigned __int8 v53;
  double v54;
  double v55;
  int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  BOOL v62;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  unint64_t v70;
  BOOL v71;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  unsigned __int8 v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double *v89;
  double *v90;
  double *v91;
  int v92;
  int v93;
  double *v94;
  double *v95;
  double *v96;
  int v97;
  int v98;
  double v99;
  int v100;

  v3 = atomic_load((unsigned __int8 *)&qword_1022F9BA8);
  if ((v3 & 1) == 0)
  {
    v89 = a1;
    v90 = a3;
    v91 = a2;
    v92 = __cxa_guard_acquire(&qword_1022F9BA8);
    a2 = v91;
    a3 = v90;
    v93 = v92;
    a1 = v89;
    if (v93)
    {
      qword_1022F9BA0 = 0x4056800000000000;
      __cxa_guard_release(&qword_1022F9BA8);
      a1 = v89;
      a2 = v91;
      a3 = v90;
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1022F9BB8);
  if ((v4 & 1) == 0)
  {
    v94 = a1;
    v95 = a3;
    v96 = a2;
    v97 = __cxa_guard_acquire(&qword_1022F9BB8);
    a2 = v96;
    a3 = v95;
    v98 = v97;
    a1 = v94;
    if (v98)
    {
      qword_1022F9BB0 = 0x4056800000000000;
      __cxa_guard_release(&qword_1022F9BB8);
      a1 = v94;
      a2 = v96;
      a3 = v95;
    }
  }
  v5 = *a1;
  v6 = a1[1];
  v8 = *a2;
  v7 = a2[1];
  v10 = *a3;
  v9 = a3[1];
  if (*a2 == *a1)
    goto LABEL_15;
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v31 = vabdd_f64(v8, v5);
    v32 = fabs(v8);
    v33 = fabs(v5);
    if (v32 < v33)
      v32 = v33;
    v34 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
    if (v31 <= v34)
    {
LABEL_15:
      if (v7 == v6)
        return 0;
      if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v12 = vabdd_f64(v7, v6);
        v13 = fabs(v7);
        v14 = fabs(v6);
        if (v13 < v14)
          v13 = v14;
        v15 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 <= v15)
          return 0;
      }
    }
  }
  if (v8 == v10)
    goto LABEL_40;
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v18 = vabdd_f64(v8, v10);
    v19 = fabs(v8);
    v20 = fabs(v10);
    if (v19 < v20)
      v19 = v20;
    v21 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
    if (v18 <= v21)
    {
LABEL_40:
      if (v7 == v9)
        return 0;
      if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v22 = vabdd_f64(v7, v9);
        v23 = fabs(v7);
        v24 = fabs(v9);
        if (v23 < v24)
          v23 = v24;
        v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
        if (v22 <= v25)
          return 0;
      }
    }
  }
  v26 = fabs(v6);
  if (*(double *)&qword_1022F9BA0 == v26)
  {
    v27 = 1;
  }
  else if ((qword_1022F9BA0 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v27 = 0;
  }
  else
  {
    v28 = vabdd_f64(*(double *)&qword_1022F9BA0, v26);
    v29 = fabs(*(double *)&qword_1022F9BA0);
    if (v29 >= v26)
      v26 = v29;
    if (v26 >= 1.0)
      v30 = v26 * 2.22044605e-16;
    else
      v30 = 2.22044605e-16;
    v27 = v28 <= v30;
  }
  v35 = fabs(v7);
  if (*(double *)&qword_1022F9BA0 == v35)
  {
    v36 = 1;
  }
  else if ((qword_1022F9BA0 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v36 = 0;
  }
  else
  {
    v37 = vabdd_f64(*(double *)&qword_1022F9BA0, v35);
    v38 = fabs(*(double *)&qword_1022F9BA0);
    if (v38 < v35)
      v38 = v35;
    if (v38 >= 1.0)
      v39 = v38 * 2.22044605e-16;
    else
      v39 = 2.22044605e-16;
    v36 = v37 <= v39;
  }
  v40 = fabs(v9);
  if (*(double *)&qword_1022F9BB0 != v40)
  {
    if ((qword_1022F9BB0 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      v41 = 0;
      if (!v36)
        goto LABEL_95;
    }
    else
    {
      v42 = vabdd_f64(*(double *)&qword_1022F9BB0, v40);
      v43 = fabs(*(double *)&qword_1022F9BB0);
      if (v43 >= v40)
        v40 = v43;
      if (v40 >= 1.0)
        v44 = v40 * 2.22044605e-16;
      else
        v44 = 2.22044605e-16;
      v41 = v42 <= v44;
      if (!v36)
        goto LABEL_95;
    }
    goto LABEL_83;
  }
  v41 = 1;
  if (v36)
  {
LABEL_83:
    if (!v27)
      goto LABEL_94;
    v45 = (v6 >= 0.0) ^ (v7 < 0.0);
    if (v6 > 0.0)
      v45 = 0;
    if (v7 > 0.0)
      v45 = v6 > 0.0;
    if ((v45 & 1) == 0)
    {
LABEL_94:
      if (!v41)
        goto LABEL_95;
      v46 = (v7 < 0.0) ^ (v9 >= 0.0);
      if (v9 > 0.0)
        v46 = 0;
      if (v7 > 0.0)
        v46 = v9 > 0.0;
      if ((v46 & 1) == 0)
        goto LABEL_95;
    }
    return 0;
  }
LABEL_95:
  v47 = vabdd_f64(v5, v8);
  v48 = 180.0;
  if (v47 == 180.0)
    goto LABEL_96;
  v49 = v5 - v8;
  if (COERCE__INT64(fabs(v5 - v8)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v58 = fabs(v47 + -180.0);
    v48 = 180.0;
    if (v47 < 180.0)
      v47 = 180.0;
    v59 = v47 >= 1.0 ? v47 * 2.22044605e-16 : 2.22044605e-16;
    if (v58 <= v59)
      goto LABEL_96;
  }
  v48 = 180.0;
  if (v49 <= 180.0)
  {
    if (v49 >= -180.0)
      goto LABEL_97;
    v48 = fmod(v49 + -180.0, 360.0) + 180.0;
    goto LABEL_96;
  }
  v60 = fmod(v49 + 180.0, 360.0);
  v49 = v60 + -180.0;
  if (v60 + -180.0 == -180.0)
    goto LABEL_96;
  v61 = COERCE__INT64(fabs(v60 + -180.0)) - 1;
  v62 = (unint64_t)(COERCE__INT64(fabs(v60 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
     && v61 > 0xFFFFFFFFFFFFELL;
  if (!v62 || *(_QWORD *)&v49 == 0)
  {
    v48 = 180.0;
    v64 = fabs(v49 + 180.0);
    v65 = fabs(v49);
    if (v65 < 180.0)
      v65 = 180.0;
    v66 = v65 >= 1.0 ? v65 * 2.22044605e-16 : 2.22044605e-16;
    if (v64 <= v66)
LABEL_96:
      v49 = v48;
  }
LABEL_97:
  v50 = vabdd_f64(v10, v8);
  v51 = 180.0;
  if (v50 == 180.0)
    goto LABEL_98;
  v52 = v10 - v8;
  if ((*(_QWORD *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v67 = fabs(v50 + -180.0);
    v51 = 180.0;
    if (v50 < 180.0)
      v50 = 180.0;
    v68 = v50 >= 1.0 ? v50 * 2.22044605e-16 : 2.22044605e-16;
    if (v67 <= v68)
      goto LABEL_98;
  }
  v51 = 180.0;
  if (v52 > 180.0)
  {
    v69 = fmod(v52 + 180.0, 360.0);
    v52 = v69 + -180.0;
    if (v69 + -180.0 != -180.0)
    {
      v70 = COERCE__INT64(fabs(v69 + -180.0)) - 1;
      v71 = (unint64_t)(COERCE__INT64(fabs(v69 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
         && v70 > 0xFFFFFFFFFFFFELL;
      if (v71 && *(_QWORD *)&v52 != 0)
        goto LABEL_99;
      v51 = 180.0;
      v73 = fabs(v52 + 180.0);
      v74 = fabs(v52);
      if (v74 < 180.0)
        v74 = 180.0;
      v75 = v74 >= 1.0 ? v74 * 2.22044605e-16 : 2.22044605e-16;
      if (v73 > v75)
        goto LABEL_99;
    }
    goto LABEL_98;
  }
  if (v52 < -180.0)
  {
    v51 = fmod(v52 + -180.0, 360.0) + 180.0;
LABEL_98:
    v52 = v51;
  }
LABEL_99:
  v53 = atomic_load((unsigned __int8 *)&qword_1022F9BC8);
  if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_1022F9BC8))
  {
    qword_1022F9BC0 = 0x4066800000000000;
    __cxa_guard_release(&qword_1022F9BC8);
  }
  v54 = fabs(v49);
  v55 = *(double *)&qword_1022F9BC0;
  if (v54 == *(double *)&qword_1022F9BC0)
    goto LABEL_101;
  v57 = v6 - v7;
  if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (qword_1022F9BC0 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_160;
  }
  v76 = vabdd_f64(v54, *(double *)&qword_1022F9BC0);
  v77 = fabs(*(double *)&qword_1022F9BC0);
  if (v54 >= v77)
    v77 = v54;
  v78 = v77 >= 1.0 ? v77 * 2.22044605e-16 : 2.22044605e-16;
  if (v76 <= v78)
  {
LABEL_101:
    v56 = 0;
    if (v6 + v7 < 0.0)
      v55 = -*(double *)&qword_1022F9BC0;
    v57 = v55 - (v6 + v7);
  }
  else
  {
LABEL_160:
    v56 = 1;
  }
  v79 = atomic_load((unsigned __int8 *)&qword_1022F9BC8);
  if ((v79 & 1) == 0)
  {
    v99 = v57;
    v100 = __cxa_guard_acquire(&qword_1022F9BC8);
    v57 = v99;
    if (v100)
    {
      qword_1022F9BC0 = 0x4066800000000000;
      __cxa_guard_release(&qword_1022F9BC8);
      v57 = v99;
    }
  }
  v80 = fabs(v52);
  if (v80 == *(double *)&qword_1022F9BC0)
    goto LABEL_163;
  v82 = v9 - v7;
  if ((*(_QWORD *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (qword_1022F9BC0 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v83 = vabdd_f64(v80, *(double *)&qword_1022F9BC0);
    v84 = fabs(*(double *)&qword_1022F9BC0);
    if (v80 >= v84)
      v84 = v80;
    v85 = v84 >= 1.0 ? v84 * 2.22044605e-16 : 2.22044605e-16;
    if (v83 <= v85)
    {
LABEL_163:
      v81 = v7 + v9;
      if (v7 + v9 >= 0.0)
        v82 = *(double *)&qword_1022F9BC0 - v81;
      else
        v82 = -*(double *)&qword_1022F9BC0 - v81;
      v80 = 0.0;
    }
  }
  if (v56)
    v86 = v54;
  else
    v86 = 0.0;
  if (v80 >= v86)
    v80 = v86;
  if (v27 || v36 || v41)
    v80 = 0.0;
  v87 = fabs(v57);
  v88 = fabs(v82);
  if (v88 < v87)
    v87 = v88;
  if (v80 >= v87)
  {
    v57 = v49;
    v82 = v52;
  }
  if (v82 > 0.0 != v57 <= 0.0)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

void sub_100B73A50(_QWORD *a1, char a2, uint64_t a3)
{
  _QWORD *v4;
  double *v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  double *v24;
  void *v25;
  char v26;
  void *v27[2];
  unsigned __int8 v28;
  void *v29[2];
  unsigned __int8 v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *__p;
  char v38;

  if ((a2 & 1) == 0)
  {
    v4 = sub_100263F7C(a1, (uint64_t)". A spike point was found with apex at ", 39);
    sub_1015A2E04(v22, ", ");
    sub_1015A2E04(v20, "(");
    sub_1015A2E04(v18, ")");
    sub_1015A2E04(v16, ", ");
    sub_1015A2E04(v14, "(");
    sub_1015A2E04(v12, ")");
    sub_1015A2E04(v10, ", ");
    sub_100B73D38(a3, (__int128 *)v22, (__int128 *)v20, (__int128 *)v18, (__int128 *)v16, (__int128 *)v14, (__int128 *)v12, (__int128 *)v10, (uint64_t)&v24);
    v5 = v24;
    if ((v28 & 0x80u) == 0)
      v6 = v27;
    else
      v6 = (void **)v27[0];
    if ((v28 & 0x80u) == 0)
      v7 = v28;
    else
      v7 = (uint64_t)v27[1];
    sub_100263F7C(v4, (uint64_t)v6, v7);
    sub_100B73DFC(v4, v5, (uint64_t)&v25);
    if ((v30 & 0x80u) == 0)
      v8 = v29;
    else
      v8 = (void **)v29[0];
    if ((v30 & 0x80u) == 0)
      v9 = v30;
    else
      v9 = (uint64_t)v29[1];
    sub_100263F7C(v4, (uint64_t)v8, v9);
    std::ostream::flush(v4);
    if (v38 < 0)
      operator delete(__p);
    if (v36 < 0)
      operator delete(v35);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    if ((char)v30 < 0)
      operator delete(v29[0]);
    if ((char)v28 < 0)
      operator delete(v27[0]);
    if (v26 < 0)
      operator delete(v25);
    if (v11 < 0)
      operator delete(v10[0]);
    if (v13 < 0)
      operator delete(v12[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    if (v21 < 0)
      operator delete(v20[0]);
    if (v23 < 0)
      operator delete(v22[0]);
  }
}

void sub_100B73C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(exception_object);
}

void sub_100B73D38(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>)
{
  void *__dst[2];
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;

  sub_100B73F00((char *)__dst, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)a9 = a1;
  sub_100B74114((char *)(a9 + 8), (__int128 *)__dst);
  if (v24 < 0)
    operator delete(__p);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(__dst[0]);
}

void sub_100B73DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10065C930((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B73DFC(_QWORD *a1, double *a2, uint64_t a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  void *__p[2];
  uint64_t v13;

  sub_1015A2E04(__p, "");
  if (v13 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v13 >= 0)
    v7 = HIBYTE(v13);
  else
    v7 = (uint64_t)__p[1];
  v8 = sub_100263F7C(a1, (uint64_t)v6, v7);
  std::ostream::operator<<(v8, *a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a3 + 16);
  }
  if (v13 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v13 >= 0)
    v10 = HIBYTE(v13);
  else
    v10 = (uint64_t)__p[1];
  v11 = sub_100263F7C(a1, (uint64_t)v9, v10);
  std::ostream::operator<<(v11, a2[1]);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_100B73EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100B73F00(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7, __int128 *a8)
{
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE *v21;
  __int128 v22;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v15;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v16 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v16;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4(__dst + 48, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v17 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *((_OWORD *)__dst + 3) = v17;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4(__dst + 72, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v18 = *a5;
    *((_QWORD *)__dst + 11) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(__dst + 72) = v18;
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_100115CE4(__dst + 96, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v19 = *a6;
    *((_QWORD *)__dst + 14) = *((_QWORD *)a6 + 2);
    *((_OWORD *)__dst + 6) = v19;
  }
  if (*((char *)a7 + 23) < 0)
  {
    sub_100115CE4(__dst + 120, *(void **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v20 = *a7;
    *((_QWORD *)__dst + 17) = *((_QWORD *)a7 + 2);
    *(_OWORD *)(__dst + 120) = v20;
  }
  v21 = __dst + 144;
  if (*((char *)a8 + 23) < 0)
  {
    sub_100115CE4(v21, *(void **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v22 = *a8;
    *((_QWORD *)__dst + 20) = *((_QWORD *)a8 + 2);
    *(_OWORD *)v21 = v22;
  }
  return __dst;
}

void sub_100B74080(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_100B74114(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_100115CE4(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_100115CE4(__dst + 96, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_100115CE4(__dst + 120, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  v10 = __dst + 144;
  if (*((char *)a2 + 167) < 0)
  {
    sub_100115CE4(v10, *((void **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v11 = a2[9];
    *((_QWORD *)__dst + 20) = *((_QWORD *)a2 + 20);
    *(_OWORD *)v10 = v11;
  }
  return __dst;
}

void sub_100B74294(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B74328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  double v21;

  v2 = a2;
  if (a1 != a2)
  {
    v4 = a1 - 16;
    if (a1 - 16 == a2)
      return v2;
    v5 = a1 - 16;
    while (1)
    {
      v6 = *(double *)(v5 - 16);
      v5 -= 16;
      v21 = v6;
      v20 = *(double *)(v5 + 8);
      sub_100778A68(&v21, &v20, 1);
      v7 = v20;
      v8 = v21;
      v21 = *(double *)(a1 - 16);
      v20 = *(double *)(a1 - 8);
      sub_100778A68(&v21, &v20, 1);
      if (v8 != v21)
      {
        if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        v10 = vabdd_f64(v8, v21);
        v11 = fabs(v8);
        v12 = fabs(v21);
        if (v11 >= v12)
          v12 = v11;
        v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
        if (v10 > v13)
          break;
      }
      if (v7 != v20)
      {
        if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        v15 = vabdd_f64(v7, v20);
        v16 = fabs(v7);
        v17 = fabs(v20);
        if (v16 >= v17)
          v17 = v16;
        v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
        if (v15 > v18)
          break;
      }
      v4 = v5;
      if (v5 == v2)
        return v2;
    }
    return v4;
  }
  return v2;
}

uint64_t sub_100B74494(double **a1, std::string **a2, uint64_t a3)
{
  double *v6;
  double *v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t result;
  double *v12;
  std::string **v13;
  int v14;
  double *v15;
  double *v16;
  double *v17;
  char v18;
  double *v19[2];

  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    sub_100B72AF4(a2, 0);
  }
  else
  {
    do
    {
      v8 = (*(_QWORD *)v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((_QWORD)v6[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      v9 = !v8;
      if (!v8)
        break;
      v6 += 2;
    }
    while (v6 != v7);
    if (v9)
      v10 = 60;
    else
      v10 = 0;
    sub_100B72AF4(a2, v10);
    result = 0;
    if ((v9 & 1) != 0)
      return result;
  }
  v12 = a1[1];
  if ((unint64_t)((char *)v12 - (char *)*a1) <= 0x3F)
  {
    v13 = a2;
    v14 = 10;
LABEL_21:
    sub_100B72AF4(v13, v14);
    return 0;
  }
  v19[0] = *a1;
  v19[1] = v12;
  if (sub_100B7246C(v19) <= 3)
  {
    v13 = a2;
    v14 = 11;
    goto LABEL_21;
  }
  result = sub_100B725F8(a1, a2, a3);
  if ((_DWORD)result)
  {
    v15 = *a1;
    v16 = a1[1];
    if ((unint64_t)((char *)v16 - (char *)*a1) >= 0x20)
    {
      v17 = v15 + 2;
      while (v17 != v16 && (sub_100B72CA4(v15, v15 + 2) & 1) == 0)
      {
        v17 = v15 + 4;
        v15 += 2;
      }
    }
    sub_100B72AF4(a2, 0);
    v18 = sub_100B72758(a1, a2, a3);
    result = 0;
    if ((v18 & 1) == 0)
      return sub_100B74604(a1, a2);
  }
  return result;
}

uint64_t sub_100B74604(_QWORD *a1, std::string **a2)
{
  double *v3;
  double *v4;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  uint64_t v21;

  v3 = (double *)a1[1];
  v4 = (double *)(*a1 + 16);
  if ((unint64_t)v3 - *a1 < 0x40 || v4 == v3)
    goto LABEL_27;
  v6 = 0;
  v7 = 0.0;
  do
  {
    v8 = *(v4 - 2);
    v9 = *v4;
    if (v8 != *v4)
    {
      if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_11;
      }
      v11 = vabdd_f64(v8, v9);
      v12 = fabs(v8);
      v13 = fabs(v9);
      if (v12 < v13)
        v12 = v13;
      v14 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
      if (v11 > v14)
      {
LABEL_11:
        v7 = v7 + sub_100778CD4(v4 - 2, v4);
        v6 += sub_100778F24(v4 - 2, v4);
      }
    }
    v4 += 2;
  }
  while (v4 != v3);
  if ((v6 & 1) != 0)
  {
    v15 = (double)((v6 >> 1) + 1);
    v16 = fabs(v7);
    v17 = -v16;
    v18 = -(v16 - v15 * 6.28318531);
    v19 = -(v17 + v15 * 6.28318531);
    if (v7 <= 0.0)
      v7 = v18;
    else
      v7 = v19;
  }
  if (v7 >= 0.0)
  {
LABEL_27:
    v21 = 0;
    v20 = 22;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  sub_100B72AF4(a2, v20);
  return v21;
}

void sub_100B74754(uint64_t a1, uint64_t a2, float64x2_t **a3, uint64_t a4, int a5, unint64_t a6)
{
  uint64_t v11;
  double *v12;
  double *v13;
  double **v14;
  double **v15;
  uint64_t v16;
  double *v17;
  double *v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  a3[1] = *a3;
  v11 = a5;
  v12 = *(double **)a1;
  v13 = *(double **)(a1 + 8);
  if ((unint64_t)v13 - *(_QWORD *)a1 >= 0x20)
  {
    v31 = a5;
    v32 = -1;
    v33 = -1;
    sub_100B74894(a3, v12, v13, a2, a4, (uint64_t)&v31, a6);
  }
  v15 = *(double ***)(a1 + 24);
  v14 = *(double ***)(a1 + 32);
  if (v15 != v14)
  {
    v16 = 0;
    do
    {
      v17 = *v15;
      v18 = v15[1];
      if ((unint64_t)((char *)v18 - (char *)*v15) >= 0x20)
      {
        v31 = v11;
        v32 = -1;
        v33 = v16;
        sub_100B74894(a3, v17, v18, a2, a4, (uint64_t)&v31, a6);
        v14 = *(double ***)(a1 + 32);
      }
      ++v16;
      v15 += 3;
    }
    while (v15 != v14);
  }
  v19 = *a3;
  v20 = a3[1];
  if (*a3 != v20)
  {
    __asm { FMOV            V0.2D, #1.0 }
    do
    {
      v26 = v19[2];
      v27 = v19[3];
      v28 = vabsq_f64(v26);
      v29 = vsubq_f64(v26, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v28), (int8x16_t)xmmword_101C17300, (int8x16_t)vmulq_f64(v28, (float64x2_t)xmmword_101C17300)));
      v30 = vabsq_f64(v27);
      v19[2] = v29;
      v19[3] = vaddq_f64(v27, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v30), (int8x16_t)xmmword_101C17300, (int8x16_t)vmulq_f64(v30, (float64x2_t)xmmword_101C17300)));
      v19 = (float64x2_t *)((char *)v19 + 120);
    }
    while (v19 != v20);
  }
}

void sub_100B74894(_QWORD *a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  double *v7;
  char *v9;
  unint64_t v10;
  double *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  double v26;
  double v27;
  BOOL v28;
  double v30;
  double v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  int64x2_t *v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  char *v61;
  char *v62;
  int64x2_t *v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  __int128 v70;
  double *v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  int64x2_t *v85;
  char *v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  char *v93;
  char *v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  char *v101;
  unint64_t v102;
  int64x2_t v104;
  int64x2_t v105;
  uint64_t v106;
  unint64_t *v108;
  char v109;
  __int128 v111;
  __int128 v112;
  _BYTE v113[32];
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  uint64_t v119;
  uint64_t v120;
  double *v121;
  uint64_t v122;
  double *v123[4];

  if (a3 == a2)
    return;
  v7 = a2;
  v116.i64[0] = -1;
  v116.i64[1] = -1;
  v117 = 0uLL;
  v118.i8[0] = 0;
  v118.i64[1] = -1;
  LOWORD(v119) = 0;
  v104 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v114 = v105;
  v115 = v104;
  *(_QWORD *)v113 = 0;
  memset(&v113[8], 255, 24);
  v9 = (char *)a1[1];
  v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3);
  v112 = *(_OWORD *)a2;
  v11 = a2 + 2;
  if (a2 + 2 == a3)
    goto LABEL_121;
  v102 = v10;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v106 = ((char *)a3 - (char *)a2) >> 4;
  v108 = a1 + 2;
  v109 = 1;
  do
  {
    v15 = v7[3];
    v7 = v11;
    *((double *)&v111 + 1) = v15;
    v16 = *v11;
    *(double *)&v111 = v16;
    v17 = *(double *)&v112;
    v18 = vabdd_f64(v16, *(double *)&v112);
    v19 = 180.0;
    if (v18 == 180.0)
      goto LABEL_5;
    v20 = v16 - *(double *)&v112;
    if (COERCE__INT64(fabs(v16 - *(double *)&v112)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v26 = fabs(v18 + -180.0);
      if (v18 < 180.0)
        v18 = 180.0;
      v27 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
      v28 = v26 > v27;
      v19 = 180.0;
      if (!v28)
        goto LABEL_5;
    }
    if (v20 <= 180.0)
    {
      if (v20 < -180.0)
      {
        v19 = fmod(v20 + -180.0, 360.0) + 180.0;
LABEL_5:
        v20 = v19;
      }
    }
    else
    {
      v20 = fmod(v20 + 180.0, 360.0) + -180.0;
      v19 = 180.0;
      if (v20 == -180.0)
        goto LABEL_5;
      v28 = ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
         && (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (!v28 || *(_QWORD *)&v20 == 0)
      {
        v30 = fabs(v20 + 180.0);
        v31 = fabs(v20);
        if (v31 < 180.0)
          v31 = 180.0;
        v32 = v31 >= 1.0 ? v31 * 2.22044605e-16 : 2.22044605e-16;
        v28 = v30 > v32;
        v19 = 180.0;
        if (!v28)
          goto LABEL_5;
      }
    }
    if (v20 >= 0.0)
      v21 = 0;
    else
      v21 = -1;
    if (v20 > 0.0)
      v22 = 1;
    else
      v22 = v21;
    if (v15 >= *((double *)&v112 + 1))
      v23 = 0;
    else
      v23 = -1;
    if (v15 > *((double *)&v112 + 1))
      v24 = 1;
    else
      v24 = v23;
    if (v22)
      goto LABEL_72;
    if (v17 != v16)
    {
      if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_71;
      }
      v34 = vabdd_f64(v17, v16);
      v35 = fabs(v17);
      v36 = fabs(v16);
      if (v35 < v36)
        v35 = v36;
      v37 = v35 >= 1.0 ? v35 * 2.22044605e-16 : 2.22044605e-16;
      if (v34 > v37)
        goto LABEL_71;
    }
    if (*((double *)&v112 + 1) != v15)
    {
      if ((*((_QWORD *)&v112 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_71;
      }
      v38 = vabdd_f64(*((double *)&v112 + 1), v15);
      v39 = fabs(*((double *)&v112 + 1));
      v40 = fabs(v15);
      if (v39 < v40)
        v39 = v40;
      v41 = v39 >= 1.0 ? v39 * 2.22044605e-16 : 2.22044605e-16;
      if (v38 > v41)
      {
LABEL_71:
        v22 = 0;
LABEL_72:
        v25 = 0;
        if (!v12)
          goto LABEL_96;
        goto LABEL_73;
      }
    }
    v25 = 1;
    v22 = -99;
    v24 = -99;
    if (!v12)
      goto LABEL_96;
LABEL_73:
    if (v22 == *(_DWORD *)v113 && v12 <= a7 && v24 == *(_DWORD *)&v113[4])
    {
      v123[0] = (double *)&v112;
      v123[1] = (double *)&v111;
      sub_100B75914((double *)v114.i64, v123);
      goto LABEL_99;
    }
    v42 = a1[1];
    if (!v118.i8[0])
      v102 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v42 - *a1) >> 3);
    if (v42 >= *v108)
    {
      v50 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v42 - *a1) >> 3);
      v51 = v50 + 1;
      if (v50 + 1 > 0x222222222222222)
        goto LABEL_125;
      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v108 - *a1) >> 3) > v51)
        v51 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v108 - *a1) >> 3);
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*v108 - *a1) >> 3) >= 0x111111111111111)
        v52 = 0x222222222222222;
      else
        v52 = v51;
      if (v52)
        v53 = (char *)sub_100313328((uint64_t)v108, v52);
      else
        v53 = 0;
      v54 = (int64x2_t *)&v53[120 * v50];
      v55 = *(int64x2_t *)v113;
      v56 = *(int64x2_t *)&v113[16];
      v57 = v115;
      v54[2] = v114;
      v54[3] = v57;
      *v54 = v55;
      v54[1] = v56;
      v58 = v116;
      v59 = v117;
      v60 = v118;
      v54[7].i64[0] = v119;
      v54[5] = v59;
      v54[6] = v60;
      v54[4] = v58;
      v62 = (char *)*a1;
      v61 = (char *)a1[1];
      v63 = v54;
      if (v61 != (char *)*a1)
      {
        do
        {
          v64 = *(int64x2_t *)(v61 - 120);
          v65 = *(int64x2_t *)(v61 - 104);
          v66 = *(int64x2_t *)(v61 - 88);
          *(int64x2_t *)((char *)v63 - 72) = *(int64x2_t *)(v61 - 72);
          *(int64x2_t *)((char *)v63 - 88) = v66;
          *(int64x2_t *)((char *)v63 - 104) = v65;
          *(int64x2_t *)((char *)v63 - 120) = v64;
          v67 = *(int64x2_t *)(v61 - 56);
          v68 = *(int64x2_t *)(v61 - 40);
          v69 = *(int64x2_t *)(v61 - 24);
          v63[-1].i16[4] = *((_WORD *)v61 - 4);
          *(int64x2_t *)((char *)v63 - 24) = v69;
          *(int64x2_t *)((char *)v63 - 40) = v68;
          *(int64x2_t *)((char *)v63 - 56) = v67;
          v63 = (int64x2_t *)((char *)v63 - 120);
          v61 -= 120;
        }
        while (v61 != v62);
        v61 = (char *)*a1;
      }
      v49 = &v54[7].i8[8];
      *a1 = v63;
      a1[1] = (char *)v54 + 120;
      a1[2] = &v53[120 * v52];
      if (v61)
        operator delete(v61);
    }
    else
    {
      v43 = *(_OWORD *)v113;
      v44 = *(_OWORD *)&v113[16];
      v45 = v115;
      *(int64x2_t *)(v42 + 32) = v114;
      *(int64x2_t *)(v42 + 48) = v45;
      *(_OWORD *)v42 = v43;
      *(_OWORD *)(v42 + 16) = v44;
      v46 = v116;
      v47 = v117;
      v48 = v118;
      *(_QWORD *)(v42 + 112) = v119;
      *(int64x2_t *)(v42 + 80) = v47;
      *(int64x2_t *)(v42 + 96) = v48;
      *(int64x2_t *)(v42 + 64) = v46;
      v49 = (char *)(v42 + 120);
    }
    a1[1] = v49;
    memset(&v113[8], 255, 24);
    v116.i64[0] = -1;
    v116.i64[1] = -1;
    v117 = 0uLL;
    v118.i8[0] = 0;
    *(_QWORD *)v113 = 0;
    v114 = v105;
    v115 = v104;
    v118.i64[1] = -1;
    LOWORD(v119) = 0;
LABEL_96:
    *(_OWORD *)&v113[8] = *(_OWORD *)a6;
    *(_QWORD *)&v113[24] = *(_QWORD *)(a6 + 16);
    v118.i8[0] = v25;
    v118.i64[1] = v13;
    v116.i64[0] = v14;
    v117.i64[1] = v106;
    if (!(v25 & 1 | ((v109 & 1) == 0)))
    {
      v109 = 0;
      LOBYTE(v119) = 1;
    }
    *(_DWORD *)v113 = v22;
    *(_DWORD *)&v113[4] = v24;
    v70 = v111;
    v122 = *((_QWORD *)&v112 + 1);
    v123[0] = (double *)v112;
    sub_100778A68((double *)v123, (double *)&v122, 1);
    v72 = v122;
    v71 = v123[0];
    v122 = *((_QWORD *)&v70 + 1);
    v123[0] = (double *)v70;
    sub_100778A68((double *)v123, (double *)&v122, 1);
    v74 = v122;
    v73 = v123[0];
    v122 = v72;
    v123[0] = v71;
    v120 = v74;
    v121 = v73;
    sub_100B750FC((double *)v123, (double *)&v122, (double *)&v121, (double *)&v120);
    v114.i64[0] = (uint64_t)v123[0];
    v114.i64[1] = v122;
    v115.i64[0] = (uint64_t)v121;
    v115.i64[1] = v120;
LABEL_99:
    ++v14;
    v12 = v117.i64[0] + 1;
    v116.i64[1] = v14;
    ++v117.i64[0];
    v13 += v25 ^ 1u;
    v112 = v111;
    v11 = v7 + 2;
  }
  while (v7 + 2 != a3);
  v9 = (char *)a1[1];
  if (v12)
  {
    v10 = v102;
    if (!v118.i8[0])
      v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3);
    if ((unint64_t)v9 >= *v108)
    {
      v81 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3);
      if (v81 + 1 > 0x222222222222222)
LABEL_125:
        sub_100259694();
      v82 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v108 - *a1) >> 3);
      if (v82 <= v81 + 1)
        v82 = v81 + 1;
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*v108 - *a1) >> 3) >= 0x111111111111111)
        v83 = 0x222222222222222;
      else
        v83 = v82;
      if (v83)
        v84 = (char *)sub_100313328((uint64_t)v108, v83);
      else
        v84 = 0;
      v85 = (int64x2_t *)&v84[120 * v81];
      v86 = &v84[120 * v83];
      v87 = *(int64x2_t *)v113;
      v88 = *(int64x2_t *)&v113[16];
      v89 = v115;
      v85[2] = v114;
      v85[3] = v89;
      *v85 = v87;
      v85[1] = v88;
      v90 = v116;
      v91 = v117;
      v92 = v118;
      v85[7].i64[0] = v119;
      v85[5] = v91;
      v85[6] = v92;
      v85[4] = v90;
      v9 = &v85[7].i8[8];
      v94 = (char *)*a1;
      v93 = (char *)a1[1];
      if (v93 != (char *)*a1)
      {
        do
        {
          v95 = *(int64x2_t *)(v93 - 120);
          v96 = *(int64x2_t *)(v93 - 104);
          v97 = *(int64x2_t *)(v93 - 88);
          *(int64x2_t *)((char *)v85 - 72) = *(int64x2_t *)(v93 - 72);
          *(int64x2_t *)((char *)v85 - 88) = v97;
          *(int64x2_t *)((char *)v85 - 104) = v96;
          *(int64x2_t *)((char *)v85 - 120) = v95;
          v98 = *(int64x2_t *)(v93 - 56);
          v99 = *(int64x2_t *)(v93 - 40);
          v100 = *(int64x2_t *)(v93 - 24);
          v85[-1].i16[4] = *((_WORD *)v93 - 4);
          *(int64x2_t *)((char *)v85 - 24) = v100;
          *(int64x2_t *)((char *)v85 - 40) = v99;
          *(int64x2_t *)((char *)v85 - 56) = v98;
          v85 = (int64x2_t *)((char *)v85 - 120);
          v93 -= 120;
        }
        while (v93 != v94);
        v93 = (char *)*a1;
      }
      *a1 = v85;
      a1[1] = v9;
      a1[2] = v86;
      if (v93)
        operator delete(v93);
    }
    else
    {
      v75 = *(_OWORD *)v113;
      v76 = *(_OWORD *)&v113[16];
      v77 = v115;
      *((int64x2_t *)v9 + 2) = v114;
      *((int64x2_t *)v9 + 3) = v77;
      *(_OWORD *)v9 = v75;
      *((_OWORD *)v9 + 1) = v76;
      v78 = v116;
      v79 = v117;
      v80 = v118;
      *((_QWORD *)v9 + 14) = v119;
      *((int64x2_t *)v9 + 5) = v79;
      *((int64x2_t *)v9 + 6) = v80;
      *((int64x2_t *)v9 + 4) = v78;
      v9 += 120;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = v102;
  }
LABEL_121:
  v101 = (char *)*a1;
  if (v10 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3) && !v101[120 * v10 + 96])
    v101[120 * v10 + 113] = 1;
}

void sub_100B750FC(double *a1, double *a2, double *a3, double *a4)
{
  double v8;
  unsigned __int8 v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  double v13;
  double v14;
  unsigned __int8 v15;
  double v16;
  double v17;
  unsigned __int8 v18;
  double v19;
  double v20;
  __double2 v21;
  __double2 v22;
  __double2 v23;
  double v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;

  sub_100B75378(a1, a2, a3, a4);
  v8 = *a1;
  v9 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1022A4130))
  {
    qword_1022A4128 = 0x3F91DF46A2529D39;
    __cxa_guard_release(&qword_1022A4130);
  }
  v10 = *(double *)&qword_1022A4128;
  v11 = *a2;
  v12 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1022A4130))
  {
    qword_1022A4128 = 0x3F91DF46A2529D39;
    __cxa_guard_release(&qword_1022A4130);
  }
  v13 = *(double *)&qword_1022A4128;
  v14 = *a3;
  v15 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1022A4130))
  {
    qword_1022A4128 = 0x3F91DF46A2529D39;
    __cxa_guard_release(&qword_1022A4130);
  }
  v16 = *(double *)&qword_1022A4128;
  v17 = *a4;
  v18 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v18 & 1) == 0)
  {
    v27 = *a4;
    v28 = qword_1022A4128;
    v26 = __cxa_guard_acquire(&qword_1022A4130);
    v17 = v27;
    v16 = *(double *)&v28;
    if (v26)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v17 = v27;
      v16 = *(double *)&v28;
    }
  }
  v19 = v8 * v10;
  v20 = v17 * *(double *)&qword_1022A4128;
  v21 = __sincos_stret(v14 * v16 - v19);
  v22 = __sincos_stret(v11 * v13);
  v23 = __sincos_stret(v20);
  v24 = atan2(v21.__sinval * v23.__cosval, v21.__cosval * -(v22.__sinval * v23.__cosval) + v22.__cosval * v23.__sinval);
  v25 = atan2(v22.__cosval * v21.__sinval, v22.__cosval * v23.__sinval * v21.__cosval - v22.__sinval * v23.__cosval);
  sub_100B7554C(a1, a2, a3, a4, v24, v25);
}

_QWORD *sub_100B75378(_QWORD *result, double *a2, _QWORD *a3, double *a4)
{
  double v4;
  double v5;
  _BOOL4 v6;
  double v7;
  double v8;
  double v9;
  _BOOL4 v10;
  double v11;
  double v12;
  BOOL v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v4 = fabs(*a2);
  v5 = 90.0;
  if (v4 == 90.0)
  {
    v6 = 1;
  }
  else if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v6 = 0;
  }
  else
  {
    v7 = fabs(v4 + -90.0);
    if (v4 < 90.0)
      v4 = 90.0;
    if (v4 >= 1.0)
      v8 = v4 * 2.22044605e-16;
    else
      v8 = 2.22044605e-16;
    v6 = v7 <= v8;
  }
  v9 = fabs(*a4);
  if (v9 == 90.0)
  {
    v10 = 1;
  }
  else
  {
    if ((*(_QWORD *)a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v10 = 0;
      v13 = !v6;
      v14 = 1;
      goto LABEL_24;
    }
    v11 = fabs(v9 + -90.0);
    if (v9 >= 90.0)
      v5 = v9;
    if (v5 >= 1.0)
      v12 = v5 * 2.22044605e-16;
    else
      v12 = 2.22044605e-16;
    v10 = v11 <= v12;
  }
  v13 = !v6;
  v14 = !v10;
  if (v6 && (v14 & 1) == 0)
  {
    *result = 0;
    *a3 = 0;
    goto LABEL_29;
  }
LABEL_24:
  if (v13 || v10)
  {
    if (((v6 | v14) & 1) == 0)
      *a3 = *result;
  }
  else
  {
    v10 = 0;
    *result = *a3;
  }
LABEL_29:
  v15 = *(double *)result;
  v16 = *(double *)a3;
  if (*(double *)result == *(double *)a3)
  {
    v17 = *a2;
    v18 = *a4;
    if (*a2 <= *a4)
      return result;
    goto LABEL_37;
  }
  if (v6 || v10)
    sub_10191B784();
  if (v15 > v16)
  {
    *(double *)result = v16;
    *(double *)a3 = v15;
    v19 = *a2;
    *a2 = *a4;
    *a4 = v19;
    v15 = *(double *)result;
    v16 = *(double *)a3;
  }
  if (vabdd_f64(v15, v16) > 180.0)
  {
    v20 = v15 + 360.0;
    *(double *)result = v20;
    *result = *a3;
    *(double *)a3 = v20;
    v17 = *a2;
    v18 = *a4;
LABEL_37:
    *a2 = v18;
    *a4 = v17;
  }
  return result;
}

void sub_100B7554C(double *a1, double *a2, double *a3, double *a4, double a5, double a6)
{
  double v9;
  unsigned __int8 v10;
  double v11;
  double v12;
  unsigned __int8 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unsigned __int8 v25;
  double v28;
  long double v29;
  double v30;
  double v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;

  if (*a1 > *a3)
    sub_10191B7AC();
  v9 = *a2;
  v10 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v10 & 1) == 0)
  {
    v39 = a6;
    v34 = __cxa_guard_acquire(&qword_1022A4130);
    a6 = v39;
    if (v34)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      a6 = v39;
    }
  }
  v11 = *(double *)&qword_1022A4128;
  v12 = *a4;
  v13 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v13 & 1) == 0)
  {
    v38 = *a4;
    v40 = a6;
    v37 = qword_1022A4128;
    v35 = __cxa_guard_acquire(&qword_1022A4130);
    v11 = *(double *)&v37;
    v12 = v38;
    a6 = v40;
    if (v35)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      v11 = *(double *)&v37;
      v12 = v38;
      a6 = v40;
    }
  }
  if (a5 != a6)
  {
    if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_14;
    }
    v14 = vabdd_f64(a5, a6);
    v15 = fabs(a5);
    v16 = fabs(a6);
    if (v15 < v16)
      v15 = v16;
    v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_14:
      v18 = *a2;
      if (*a2 <= *a4)
      {
        v19 = v9 * v11;
        v20 = a6;
      }
      else
      {
        v19 = v12 * *(double *)&qword_1022A4128;
        *a2 = *a4;
        *a4 = v18;
        v20 = a5;
        a5 = a6;
      }
      if (a5 == v20)
        goto LABEL_46;
      if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v21 = vabdd_f64(a5, v20);
        v22 = fabs(a5);
        v23 = fabs(v20);
        if (v22 < v23)
          v22 = v23;
        v24 = v22 >= 1.0 ? v22 * 2.22044605e-16 : 2.22044605e-16;
        if (v21 <= v24)
LABEL_46:
          sub_10191B7D4();
      }
      v25 = atomic_load((unsigned __int8 *)&qword_1022F9BD8);
      if ((v25 & 1) == 0)
      {
        v41 = v19;
        v36 = __cxa_guard_acquire(&qword_1022F9BD8);
        v19 = v41;
        if (v36)
        {
          qword_1022F9BD0 = 0x3FF921FB54442D18;
          __cxa_guard_release(&qword_1022F9BD8);
          v19 = v41;
        }
      }
      if (a5 >= v20)
      {
        if (a5 <= *(double *)&qword_1022F9BD0 || *(double *)&qword_1022F9BD0 <= v20)
          return;
      }
      else if (a5 >= *(double *)&qword_1022F9BD0 || *(double *)&qword_1022F9BD0 >= v20)
      {
        return;
      }
      v28 = cos(v19);
      v29 = sin(a5);
      v30 = acos(fabs(v28 * v29));
      if (*a2 + *a4 >= 0.0)
      {
        v33 = atomic_load((unsigned __int8 *)&qword_1022F9BE8);
        if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1022F9BE8))
        {
          qword_1022F9BE0 = 0x404CA5DC1A63C1F8;
          __cxa_guard_release(&qword_1022F9BE8);
        }
        if (*a4 < v30 * *(double *)&qword_1022F9BE0)
          *a4 = v30 * *(double *)&qword_1022F9BE0;
      }
      else
      {
        v31 = -v30;
        v32 = atomic_load((unsigned __int8 *)&qword_1022F9BE8);
        if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_1022F9BE8))
        {
          qword_1022F9BE0 = 0x404CA5DC1A63C1F8;
          __cxa_guard_release(&qword_1022F9BE8);
        }
        if (*a2 > *(double *)&qword_1022F9BE0 * v31)
          *a2 = *(double *)&qword_1022F9BE0 * v31;
      }
    }
  }
}

void sub_100B75914(double *a1, double **a2)
{
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BOOL4 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26[8];

  v3 = a2[1];
  v4 = **a2;
  v5 = *v3;
  v6 = v3[1];
  v25 = (*a2)[1];
  v26[0] = v4;
  sub_100778A68(v26, &v25, 1);
  v8 = v25;
  v7 = v26[0];
  v25 = v6;
  v26[0] = v5;
  sub_100778A68(v26, &v25, 1);
  v9 = v25;
  v24 = v8;
  v25 = v7;
  v22 = v9;
  v23 = v26[0];
  sub_100B750FC(&v25, &v24, &v23, &v22);
  v26[0] = v25;
  v26[1] = v24;
  v26[2] = v23;
  v26[3] = v22;
  v10 = *a1;
  v11 = 1.79769313e308;
  v12 = a1[2];
  v13 = a1[3];
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v12 == -1.79769313e308 && v13 == -1.79769313e308)
  {
    v14 = -1.79769313e308;
    v15 = -1.79769313e308;
    v16 = 1.79769313e308;
  }
  else
  {
    v24 = a1[1];
    v25 = v10;
    v22 = v13;
    v23 = v12;
    v17 = vabdd_f64(v10, v12);
    if (v17 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v10 - v12)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v18 = 0;
      }
      else
      {
        v19 = vabdd_f64(360.0, v17);
        v20 = fmax(v17, 360.0);
        if (v20 >= 1.0)
          v21 = v20 * 2.22044605e-16;
        else
          v21 = 2.22044605e-16;
        v18 = v19 <= v21;
      }
    }
    else
    {
      v18 = 1;
    }
    sub_100B76020(&v25, &v24, &v23, &v22, v18);
    v11 = v24;
    v16 = v25;
    v14 = v22;
    v15 = v23;
  }
  v26[4] = v16;
  v26[5] = v11;
  v26[6] = v15;
  v26[7] = v14;
  sub_100B75ACC((uint64_t)v26, a1);
}

void sub_100B75ACC(uint64_t a1, _QWORD *a2)
{
  double v4;
  double v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint64_t v51;
  uint64_t v52;
  void *__p;
  char *v54;
  _QWORD v55[2];

  v46 = sub_100B767D0(a1, a1 + 64);
  v4 = *(double *)(a1 + 24);
  v5 = *(double *)(a1 + 56);
  v6 = a1;
  if (v4 < v5)
  {
    if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_6;
    }
    v42 = vabdd_f64(v5, v4);
    v43 = fabs(v5);
    v44 = fabs(v4);
    if (v43 >= v44)
      v44 = v43;
    v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
    v6 = a1;
    if (v42 > v45)
LABEL_6:
      v6 = a1 + 32;
  }
  v8 = 0;
  v9 = 0;
  __p = 0;
  v54 = 0;
  v55[0] = 0;
  v49 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v48 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  do
  {
    v10 = (float64x2_t *)(a1 + 32 * v9);
    v11 = *v10;
    v50 = v10[1];
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v10, v48), (int32x4_t)vceqq_f64(v50, v49))))) & 1) != 0)
    {
      v47 = *v10;
      if (v11.f64[1] != 90.0)
      {
        if ((*(_QWORD *)&v11.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_17;
        v11.f64[0] = fabs(v11.f64[1] + -90.0);
        v12 = fabs(v11.f64[1]);
        if (v12 < 90.0)
          v12 = 90.0;
        v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
        if (v11.f64[0] > v13)
        {
LABEL_17:
          if (v50.f64[1] != -90.0)
          {
            if ((*(_QWORD *)&v50.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              goto LABEL_34;
            v14 = fabs(v50.f64[1] + 90.0);
            v15 = fabs(v50.f64[1]);
            if (v15 < 90.0)
              v15 = 90.0;
            v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
            if (v14 > v16)
            {
LABEL_34:
              if (v50.f64[0] <= 180.0)
                goto LABEL_26;
              if ((*(_QWORD *)&v50.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                goto LABEL_35;
              v17 = fabs(v50.f64[0] + -180.0);
              v18 = fabs(v50.f64[0]);
              if (v18 < 180.0)
                v18 = 180.0;
              v19 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
              if (v17 <= v19)
              {
LABEL_26:
                if ((unint64_t)v8 < v55[0])
                {
                  *v8 = *(_QWORD *)&v47.f64[0];
                  v8[1] = *(_QWORD *)&v50.f64[0];
                  v8 += 2;
LABEL_79:
                  v54 = (char *)v8;
                  goto LABEL_80;
                }
                v21 = ((char *)v8 - (_BYTE *)__p) >> 4;
                if ((unint64_t)(v21 + 1) >> 60)
                  sub_100259694();
                v22 = (uint64_t)(v55[0] - (_QWORD)__p) >> 3;
                if (v22 <= v21 + 1)
                  v22 = v21 + 1;
                if (v55[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
                  v23 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v23 = v22;
                if (v23)
                  v24 = (char *)sub_10028E224((uint64_t)v55, v23);
                else
                  v24 = 0;
                v29 = &v24[16 * v21];
                *(float64_t *)v29 = v47.f64[0];
                *((_QWORD *)v29 + 1) = *(_QWORD *)&v50.f64[0];
                v31 = (char *)__p;
                v30 = v54;
                v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v31);
LABEL_76:
                  v30 = (char *)__p;
                }
              }
              else
              {
LABEL_35:
                if ((unint64_t)v8 >= v55[0])
                {
                  v25 = ((char *)v8 - (_BYTE *)__p) >> 4;
                  if ((unint64_t)(v25 + 1) >> 60)
                    sub_100259694();
                  v26 = (uint64_t)(v55[0] - (_QWORD)__p) >> 3;
                  if (v26 <= v25 + 1)
                    v26 = v25 + 1;
                  if (v55[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
                    v27 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v27 = v26;
                  if (v27)
                    v28 = (char *)sub_10028E224((uint64_t)v55, v27);
                  else
                    v28 = 0;
                  v33 = &v28[16 * v25];
                  *(float64_t *)v33 = v47.f64[0];
                  *((_QWORD *)v33 + 1) = 0x4066800000000000;
                  v35 = (char *)__p;
                  v34 = v54;
                  v36 = v33;
                  if (v54 != __p)
                  {
                    do
                    {
                      *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
                      v36 -= 16;
                      v34 -= 16;
                    }
                    while (v34 != v35);
                    v34 = (char *)__p;
                  }
                  v20 = v33 + 16;
                  __p = v36;
                  v54 = v33 + 16;
                  v55[0] = &v28[16 * v27];
                  if (v34)
                    operator delete(v34);
                }
                else
                {
                  *v8 = *(_QWORD *)&v47.f64[0];
                  v8[1] = 0x4066800000000000;
                  v20 = v8 + 2;
                }
                v54 = (char *)v20;
                v37 = v50.f64[0] + -360.0;
                if ((unint64_t)v20 < v55[0])
                {
                  *v20 = 0xC066800000000000;
                  *((double *)v20 + 1) = v37;
                  v8 = v20 + 2;
                  goto LABEL_79;
                }
                v38 = ((char *)v20 - (_BYTE *)__p) >> 4;
                if ((unint64_t)(v38 + 1) >> 60)
                  sub_100259694();
                v39 = (uint64_t)(v55[0] - (_QWORD)__p) >> 3;
                if (v39 <= v38 + 1)
                  v39 = v38 + 1;
                if (v55[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
                  v23 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v23 = v39;
                if (v23)
                  v24 = (char *)sub_10028E224((uint64_t)v55, v23);
                else
                  v24 = 0;
                v29 = &v24[16 * v38];
                *(_QWORD *)v29 = 0xC066800000000000;
                *((double *)v29 + 1) = v37;
                v40 = (char *)__p;
                v30 = v54;
                v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v40);
                  goto LABEL_76;
                }
              }
              v8 = v29 + 16;
              __p = v32;
              v54 = v29 + 16;
              v55[0] = &v24[16 * v23];
              if (v30)
                operator delete(v30);
              goto LABEL_79;
            }
          }
        }
      }
    }
LABEL_80:
    ++v9;
  }
  while (v9 != 2);
  v51 = 0;
  v52 = 0;
  sub_100B76358((uint64_t *)&__p, (double *)&v52, (double *)&v51);
  v41 = v51;
  *a2 = v52;
  a2[1] = *(_QWORD *)(v46 + 8);
  a2[2] = v41;
  a2[3] = *(_QWORD *)(v6 + 24);
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100B75FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100B76020(double *a1, double *a2, double *a3, double *a4, int a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double result;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  sub_100778A68(a1, a2, 0);
  sub_100778A68(a3, a4, 0);
  v10 = *a2;
  if (*a2 == -90.0)
    goto LABEL_9;
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v15 = 90.0;
    v16 = fabs(v10 + 90.0);
    v17 = fabs(v10);
    if (v17 >= 90.0)
      v15 = v17;
    v18 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 <= v18)
    {
LABEL_9:
      v11 = *a4;
      if (*a4 == -90.0)
        goto LABEL_20;
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v12 = fabs(v11 + 90.0);
        v13 = fabs(v11);
        if (v13 < 90.0)
          v13 = 90.0;
        v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 <= v14)
          goto LABEL_20;
      }
    }
  }
  if (v10 != 90.0)
  {
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_60;
    v33 = fabs(v10 + -90.0);
    v34 = fabs(v10);
    if (v34 < 90.0)
      v34 = 90.0;
    v35 = v34 >= 1.0 ? v34 * 2.22044605e-16 : 2.22044605e-16;
    if (v33 > v35)
      goto LABEL_60;
  }
  v19 = *a4;
  if (*a4 == 90.0)
    goto LABEL_20;
  if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_60;
  v36 = fabs(v19 + -90.0);
  v37 = fabs(v19);
  if (v37 < 90.0)
    v37 = 90.0;
  v38 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
  if (v36 <= v38)
  {
LABEL_20:
    *a3 = 0.0;
    *a1 = 0.0;
    v20 = 0.0;
  }
  else
  {
LABEL_60:
    if (a5)
    {
      *a1 = -180.0;
      v39 = 180.0;
LABEL_64:
      *a3 = v39;
      v20 = *a1;
      goto LABEL_21;
    }
    v20 = *a1;
    if (*a1 > *a3)
    {
      v39 = *a3 + 360.0;
      goto LABEL_64;
    }
  }
LABEL_21:
  v21 = *a3;
  if (*a3 < v20)
  {
    if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }
    v22 = vabdd_f64(v20, v21);
    v23 = fabs(v20);
    v24 = fabs(v21);
    if (v23 < v24)
      v23 = v24;
    v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
    if (v22 > v25)
LABEL_65:
      sub_10191B84C();
  }
  if (v20 < -180.0)
  {
    if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((v26 = vabdd_f64(-180.0, v20), v27 = fmax(fabs(v20), 180.0), v27 >= 1.0)
        ? (v28 = v27 * 2.22044605e-16)
        : (v28 = 2.22044605e-16),
          v26 > v28))
    {
      sub_10191B824();
    }
  }
  v29 = v21 - v20;
  result = 360.0;
  if (v29 > 360.0)
  {
    if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_67;
    v31 = fabs(v29 + -360.0);
    v32 = fabs(v29);
    if (v32 >= 360.0)
      result = v32;
    result = result >= 1.0 ? result * 2.22044605e-16 : 2.22044605e-16;
    if (v31 > result)
LABEL_67:
      sub_10191B7FC();
  }
  return result;
}

void sub_100B76358(uint64_t *a1, double *a2, double *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;

  *a3 = 0.0;
  *a2 = 0.0;
  v5 = (_QWORD *)*a1;
  v6 = (_QWORD *)a1[1];
  if (v5 != v6)
  {
    *a2 = *(double *)sub_100B769A8(v5, v6);
    v8 = *a1;
    v9 = a1[1];
    v10 = *a1 + 16;
    if (*a1 != v9 && v10 != v9)
    {
      do
      {
        v49 = *(double *)(v8 + 8);
        v50 = *(double *)(v10 + 8);
        if (v49 < v50)
        {
          if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_87;
          }
          v52 = vabdd_f64(v50, v49);
          v53 = fabs(v50);
          v54 = fabs(v49);
          if (v53 >= v54)
            v54 = v53;
          v55 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
          if (v52 > v55)
LABEL_87:
            v8 = v10;
        }
        v10 += 16;
      }
      while (v10 != v9);
    }
    v12 = *(double *)(v8 + 8);
    *a3 = v12;
    v13 = v12 - *a2;
    if (v13 > 180.0)
    {
      if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_61;
      v14 = fabs(v13 + -180.0);
      v15 = fabs(v13);
      if (v15 < 180.0)
        v15 = 180.0;
      v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 > v16)
      {
LABEL_61:
        v56 = 0.0;
        v57 = 0.0;
        v17 = sub_100B76864(a1, &v57, &v56);
        v18 = *a3;
        v19 = *a2;
        if (*a3 < *a2)
        {
          if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_100;
          }
          v20 = vabdd_f64(v19, v18);
          v21 = fabs(v19);
          v22 = fabs(v18);
          if (v21 < v22)
            v21 = v22;
          v23 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v20 > v23)
LABEL_100:
            sub_10191B93C();
        }
        if (v18 > 180.0)
        {
          if ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_102;
          v24 = fabs(v18 + -180.0);
          v25 = fabs(v18);
          if (v25 < 180.0)
            v25 = 180.0;
          v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
          if (v24 > v26)
LABEL_102:
            sub_10191B914();
        }
        if (v19 < -180.0)
        {
          if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((v27 = vabdd_f64(-180.0, v19), v28 = fmax(fabs(v19), 180.0), v28 >= 1.0)
              ? (v29 = v28 * 2.22044605e-16)
              : (v29 = 2.22044605e-16),
                v27 > v29))
          {
            sub_10191B8EC();
          }
        }
        v30 = v57;
        if (v56 < v57)
        {
          if ((*(_QWORD *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_101;
          }
          v31 = vabdd_f64(v57, v56);
          v32 = fabs(v57);
          v33 = fabs(v56);
          if (v32 < v33)
            v32 = v33;
          v34 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
          if (v31 > v34)
LABEL_101:
            sub_10191B8C4();
        }
        if (v56 > 180.0)
        {
          if ((*(_QWORD *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_104;
          v35 = fabs(v56 + -180.0);
          v36 = fabs(v56);
          if (v36 < 180.0)
            v36 = 180.0;
          v37 = v36 >= 1.0 ? v36 * 2.22044605e-16 : 2.22044605e-16;
          if (v35 > v37)
LABEL_104:
            sub_10191B89C();
        }
        if (v57 < -180.0)
        {
          if ((*(_QWORD *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((v38 = vabdd_f64(-180.0, v57), v39 = fmax(fabs(v57), 180.0), v39 >= 1.0)
              ? (v40 = v39 * 2.22044605e-16)
              : (v40 = 2.22044605e-16),
                v38 > v40))
          {
            sub_10191B874();
          }
        }
        if (v17 > 0.0)
        {
          if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            if (v19 + 360.0 - v18 >= v17)
              return;
          }
          else
          {
            v41 = fabs(v17);
            v42 = 2.22044605e-16;
            if (v41 >= 1.0)
              v42 = v41 * 2.22044605e-16;
            if (v41 <= v42)
              return;
            v43 = v19 + 360.0 - v18;
            if (v43 >= v17)
              return;
            v44 = ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (!v44 || *(_QWORD *)&v43 == 0)
            {
              v46 = vabdd_f64(v17, v43);
              v47 = fabs(v43);
              if (v41 >= v47)
                v47 = v41;
              v48 = v47 >= 1.0 ? v47 * 2.22044605e-16 : 2.22044605e-16;
              if (v46 <= v48)
                return;
            }
          }
          *a2 = v56;
          *a3 = v30 + 360.0;
        }
      }
    }
  }
}

uint64_t sub_100B767D0(uint64_t result, uint64_t a2)
{
  uint64_t i;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;

  if (result != a2)
  {
    for (i = result + 32; i != a2; i += 32)
    {
      v3 = *(double *)(i + 8);
      v4 = *(double *)(result + 8);
      if (v3 < v4)
      {
        if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }
        v6 = vabdd_f64(v4, v3);
        v7 = fabs(v4);
        v8 = fabs(v3);
        if (v7 >= v8)
          v8 = v7;
        v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9)
LABEL_8:
          result = i;
      }
    }
  }
  return result;
}

double sub_100B76864(uint64_t *a1, double *a2, double *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  __int128 v21;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v13 = 0;
  v14 = 0.0;
  v15 = 0.0;
  sub_100B76A3C(a1, (uint64_t *)&v16);
  while (1)
  {
    v5 = v16;
    v6 = v17;
    if (v16 == v17)
      break;
    v19 = *(_OWORD *)v16;
    if ((char *)v17 - (char *)v16 >= 17)
    {
      v21 = *(_OWORD *)v16;
      v7 = sub_100B77028(v16, (uint64_t)&v20, (unint64_t)((char *)v17 - (char *)v16) >> 4);
      v8 = v6 - 2;
      if (v6 - 2 == v7)
      {
        *v7 = v21;
        *((_BYTE *)v7 + 8) = BYTE8(v21);
      }
      else
      {
        v9 = *v8;
        *((_BYTE *)v7 + 8) = *((_BYTE *)v6 - 8);
        *v7 = v9;
        *v8 = v21;
        *((_BYTE *)v6 - 8) = BYTE8(v21);
        sub_100B77130((uint64_t)v5, (uint64_t)(v7 + 2), (uint64_t)&v20, ((char *)(v7 + 2) - (char *)v5) >> 4);
      }
      v6 = v17;
    }
    v17 = v6 - 2;
    sub_100B76B28((uint64_t)&v13, &v19, (uint64_t *)&v16);
  }
  v10 = v14;
  v11 = v15;
  *a2 = v14;
  *a3 = v11;
  if (v5)
  {
    v17 = v5;
    operator delete(v5);
  }
  return v11 - v10;
}

void sub_100B76988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100B769A8(_QWORD *result, _QWORD *a2)
{
  _QWORD *i;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;

  if (result != a2)
  {
    for (i = result + 2; i != a2; i += 2)
    {
      v3 = *(double *)i;
      v4 = *(double *)result;
      if (*(double *)i < *(double *)result)
      {
        if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }
        v6 = vabdd_f64(v4, v3);
        v7 = fabs(v4);
        v8 = fabs(v3);
        if (v7 >= v8)
          v8 = v7;
        v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9)
LABEL_8:
          result = i;
      }
    }
  }
  return result;
}

void sub_100B76A3C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;

  if (*a2 != a2[1])
    sub_10191B964();
  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  sub_100B76C98((char *)&v16, v3, v4, v5);
  v7 = (uint64_t)v16;
  v6 = v17;
  v8 = v17 - v16;
  if (v17 - v16 >= 17)
  {
    v9 = v8 >> 4;
    v10 = (unint64_t)((v8 >> 4) - 2) >> 1;
    v11 = v10 + 1;
    v12 = (uint64_t *)&v16[16 * v10];
    do
    {
      sub_100B76D18(v7, (uint64_t)&v19, v9, v12);
      v12 -= 2;
      --v11;
    }
    while (v11);
    v7 = (uint64_t)v16;
    v6 = v17;
  }
  v13 = (_BYTE *)*a2;
  *a2 = v7;
  a2[1] = (uint64_t)v6;
  v14 = v18;
  v15 = a2[2];
  v16 = v13;
  v18 = v15;
  a2[2] = v14;
  if (v13)
  {
    v17 = v13;
    operator delete(v13);
  }
}

void sub_100B76B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B76B28(uint64_t result, _BYTE *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)result;
  if (a2[8])
  {
    *(_QWORD *)result = v4 + 1;
    v5 = *(_QWORD *)a2;
    v6 = a3[2];
    v7 = a3[1];
    if (v7 >= v6)
    {
      v13 = (uint64_t)(v7 - *a3) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        sub_100259694();
      v15 = v6 - *a3;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)sub_10028E224((uint64_t)(a3 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[16 * v13];
      v19 = &v17[16 * v16];
      *(_QWORD *)v18 = v5;
      v18[8] = 0;
      v8 = (uint64_t)(v18 + 16);
      v21 = (_BYTE *)*a3;
      v20 = (_BYTE *)a3[1];
      if (v20 != (_BYTE *)*a3)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 2);
          v20 -= 16;
          v23 = v20[8];
          *((_QWORD *)v18 - 2) = v22;
          v18 -= 16;
          v18[8] = v23;
        }
        while (v20 != v21);
        v20 = (_BYTE *)*a3;
      }
      *a3 = (uint64_t)v18;
      a3[1] = v8;
      a3[2] = (uint64_t)v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v8 = v7 + 16;
    }
    a3[1] = v8;
    return sub_100B77130(*a3, v8, (uint64_t)&v24, (v8 - *a3) >> 4);
  }
  else
  {
    v9 = v4 - 1;
    *(_QWORD *)result = v9;
    if (!v9)
    {
      v10 = *a3;
      if (*a3 != a3[1])
      {
        if (!*(_BYTE *)(v10 + 8))
          sub_10191B98C();
        v11 = **(double **)v10;
        v12 = *(double *)(*(_QWORD *)a2 + 8);
        if (v11 - v12 > *(double *)(result + 16) - *(double *)(result + 8))
        {
          *(double *)(result + 8) = v12;
          *(double *)(result + 16) = v11;
        }
      }
    }
  }
  return result;
}

char *sub_100B76C98(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t i;

  if (a4)
  {
    v6 = result;
    result = sub_1002AE87C(result, a4);
    for (i = *((_QWORD *)v6 + 1); a2 != a3; i += 16)
    {
      *(_QWORD *)i = a2;
      *(_BYTE *)(i + 8) = 1;
      a2 += 16;
    }
    *((_QWORD *)v6 + 1) = i;
  }
  return result;
}

void sub_100B76CFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B76D18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  double v10;
  double v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  uint64_t v30;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;

  if (a3 < 2)
    return result;
  v4 = (uint64_t)a4 - result;
  v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 4)
    return result;
  v6 = v4 >> 3;
  v7 = (v4 >> 3) | 1;
  v8 = (uint64_t *)(result + 16 * v7);
  v9 = v6 + 2;
  if (v9 >= a3)
    goto LABEL_11;
  v10 = *(double *)(v8[2] + 8 * (*((_BYTE *)v8 + 24) == 0));
  v11 = *(double *)(*v8 + 8 * (*((_BYTE *)v8 + 8) == 0));
  if (v10 != v11)
  {
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }
    v45 = vabdd_f64(v10, v11);
    v46 = fabs(v10);
    v47 = fabs(v11);
    if (v46 < v47)
      v46 = v47;
    v48 = v46 >= 1.0 ? v46 * 2.22044605e-16 : 2.22044605e-16;
    if (v45 > v48)
    {
LABEL_65:
      if (v10 >= v11)
        goto LABEL_11;
LABEL_10:
      v8 += 2;
      v7 = v9;
      goto LABEL_11;
    }
  }
  if (*((_BYTE *)v8 + 24))
    v12 = *((_BYTE *)v8 + 8) == 0;
  else
    v12 = 0;
  if (v12)
    goto LABEL_10;
LABEL_11:
  v13 = *((unsigned __int8 *)a4 + 8);
  v14 = *((_BYTE *)a4 + 8) == 0;
  v15 = *a4;
  v16 = *(double *)(*a4 + 8 * (*((_BYTE *)a4 + 8) == 0));
  v17 = *(double *)(*v8 + 8 * (*((_BYTE *)v8 + 8) == 0));
  if (v16 == v17)
    goto LABEL_85;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_19;
  }
  v41 = vabdd_f64(v16, v17);
  v42 = fabs(v16);
  v43 = fabs(v17);
  if (v42 < v43)
    v42 = v43;
  v44 = v42 >= 1.0 ? v42 * 2.22044605e-16 : 2.22044605e-16;
  if (v41 <= v44)
  {
LABEL_85:
    if (*((_BYTE *)a4 + 8) && !*((_BYTE *)v8 + 8))
      return result;
  }
  else
  {
LABEL_19:
    if (v16 < v17)
      return result;
  }
  v19 = *v8;
  *((_BYTE *)a4 + 8) = *((_BYTE *)v8 + 8);
  *a4 = v19;
  if (v5 < v7)
    goto LABEL_68;
  v20 = 8 * v14;
  while (1)
  {
    v21 = v8;
    v22 = 2 * v7;
    v7 = (2 * v7) | 1;
    v8 = (uint64_t *)(result + 16 * v7);
    v23 = v22 + 2;
    if (v23 < a3)
    {
      v24 = *(double *)(v8[2] + 8 * (*((_BYTE *)v8 + 24) == 0));
      v25 = *(double *)(*v8 + 8 * (*((_BYTE *)v8 + 8) == 0));
      if (v24 == v25)
        goto LABEL_86;
      if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_45;
      }
      v36 = vabdd_f64(v24, v25);
      v37 = fabs(v24);
      v38 = fabs(v25);
      if (v37 < v38)
        v37 = v38;
      v39 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
      if (v36 <= v39)
      {
LABEL_86:
        if (*((_BYTE *)v8 + 24))
          v26 = *((_BYTE *)v8 + 8) == 0;
        else
          v26 = 0;
        if (!v26)
          goto LABEL_30;
      }
      else
      {
LABEL_45:
        if (v24 >= v25)
          goto LABEL_30;
      }
      v8 += 2;
      v7 = v23;
    }
LABEL_30:
    v27 = *(double *)(v15 + v20);
    v28 = *(double *)(*v8 + 8 * (*((_BYTE *)v8 + 8) == 0));
    if (v27 == v28)
      break;
    if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v32 = vabdd_f64(v27, v28);
      v33 = fabs(v27);
      v34 = fabs(v28);
      if (v33 < v34)
        v33 = v34;
      v35 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
      if (v32 <= v35)
        break;
    }
    if (v27 < v28)
      goto LABEL_67;
LABEL_39:
    v30 = *v8;
    *((_BYTE *)v21 + 8) = *((_BYTE *)v8 + 8);
    *v21 = v30;
    if (v5 < v7)
      goto LABEL_68;
  }
  if (!v13 || *((_BYTE *)v8 + 8))
    goto LABEL_39;
LABEL_67:
  v8 = v21;
LABEL_68:
  *v8 = v15;
  *((_BYTE *)v8 + 8) = v13;
  return result;
}

uint64_t *sub_100B77028(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  BOOL v11;
  uint64_t v12;
  double v14;
  double v15;
  double v16;
  double v17;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    result += 2 * v3 + 2;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 >= a3)
      goto LABEL_12;
    v9 = *(double *)(result[2] + 8 * (*((_BYTE *)result + 24) == 0));
    v10 = *(double *)(*result + 8 * (*((_BYTE *)result + 8) == 0));
    if (v9 == v10)
      goto LABEL_29;
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_18;
    }
    v14 = vabdd_f64(v9, v10);
    v15 = fabs(v9);
    v16 = fabs(v10);
    if (v15 < v16)
      v15 = v16;
    v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v17)
    {
LABEL_29:
      if (*((_BYTE *)result + 24))
        v11 = *((_BYTE *)result + 8) == 0;
      else
        v11 = 0;
      if (v11)
      {
LABEL_11:
        result += 2;
        v3 = v8;
      }
    }
    else
    {
LABEL_18:
      if (v9 < v10)
        goto LABEL_11;
    }
LABEL_12:
    v12 = *result;
    *((_BYTE *)v6 + 8) = *((_BYTE *)result + 8);
    *v6 = v12;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_100B77130(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  double v12;
  double v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (uint64_t *)(result + 16 * (v4 >> 1));
    v9 = *(_QWORD *)(a2 - 16);
    v7 = a2 - 16;
    v8 = v9;
    v10 = *(unsigned __int8 *)(v7 + 8);
    v11 = *(_BYTE *)(v7 + 8) == 0;
    v12 = *(double *)(v9 + 8 * (*(_BYTE *)(v7 + 8) == 0));
    v13 = *(double *)(*v6 + 8 * (*((_BYTE *)v6 + 8) == 0));
    if (v12 == v13)
      goto LABEL_42;
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_10;
    }
    v27 = vabdd_f64(v12, v13);
    v28 = fabs(v12);
    v29 = fabs(v13);
    if (v28 < v29)
      v28 = v29;
    v30 = v28 >= 1.0 ? v28 * 2.22044605e-16 : 2.22044605e-16;
    if (v27 <= v30)
    {
LABEL_42:
      if (!*(_BYTE *)(v7 + 8) || *((_BYTE *)v6 + 8))
        return result;
    }
    else
    {
LABEL_10:
      if (v12 >= v13)
        return result;
    }
    v15 = *v6;
    *(_BYTE *)(v7 + 8) = *((_BYTE *)v6 + 8);
    *(_QWORD *)v7 = v15;
    if (v4 >= 2)
    {
      v17 = 8 * v11;
      while (1)
      {
        v18 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v16 = (uint64_t *)(result + 16 * v5);
        v19 = *(double *)(v8 + v17);
        v20 = *(double *)(*v16 + 8 * (*((_BYTE *)v16 + 8) == 0));
        if (v19 == v20)
          goto LABEL_43;
        if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_23;
        }
        v23 = vabdd_f64(v19, v20);
        v24 = fabs(v19);
        v25 = fabs(v20);
        if (v24 < v25)
          v24 = v25;
        v26 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
        if (v23 <= v26)
        {
LABEL_43:
          if (!v10 || *((_BYTE *)v16 + 8))
            break;
        }
        else
        {
LABEL_23:
          if (v19 >= v20)
            break;
        }
        v22 = *v16;
        *((_BYTE *)v6 + 8) = *((_BYTE *)v16 + 8);
        *v6 = v22;
        v6 = (uint64_t *)(result + 16 * v5);
        if (v18 <= 1)
          goto LABEL_13;
      }
    }
    v16 = v6;
LABEL_13:
    *v16 = v8;
    *((_BYTE *)v16 + 8) = v10;
  }
  return result;
}

uint64_t sub_100B772C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v26[2];
  void *__p;
  char *v28;
  char *v29;
  char v30;

  v8 = *a1;
  v7 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v7 - *a1) >> 3) <= a5)
  {
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      while (1)
      {
        v23 = v8;
        v8 += 120;
        v24 = v8;
        if (v8 != v7)
          break;
LABEL_26:
        v22 = 1;
        if (v8 == v7)
          return v22;
      }
      while ((sub_100B779C8(a2, v23, v24) & 1) != 0)
      {
        v7 = v24 + 120;
        v24 = v7;
        if (v7 == a1[1])
          goto LABEL_26;
      }
      return 0;
    }
  }
  else
  {
    __p = 0;
    v28 = 0;
    v29 = 0;
    v26[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v26[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    if (v8 != v7)
    {
      do
      {
        sub_100B77C14((double *)v26, (double *)(v8 + 32));
        v12 = v28;
        if (v28 >= v29)
        {
          v14 = (v28 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            sub_100259694();
          v15 = (v29 - (_BYTE *)__p) >> 2;
          if (v15 <= v14 + 1)
            v15 = v14 + 1;
          if ((unint64_t)(v29 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v17 = (char *)sub_10025E6A0((uint64_t)&v29, v16);
          else
            v17 = 0;
          v18 = (uint64_t *)&v17[8 * v14];
          *v18 = v8;
          v13 = (char *)(v18 + 1);
          v20 = (char *)__p;
          v19 = v28;
          if (v28 != __p)
          {
            do
            {
              v21 = *((_QWORD *)v19 - 1);
              v19 -= 8;
              *--v18 = v21;
            }
            while (v19 != v20);
            v19 = (char *)__p;
          }
          __p = v18;
          v28 = v13;
          v29 = &v17[8 * v16];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_QWORD *)v28 = v8;
          v13 = v12 + 8;
        }
        v28 = v13;
        v8 += 120;
      }
      while (v8 != a1[1]);
    }
    v22 = sub_100B774F0((double *)v26, (uint64_t **)&__p, 0, a5, a2, a3, a4, (uint64_t)&v30);
    if (__p)
    {
      v28 = (char *)__p;
      operator delete(__p);
    }
  }
  return v22;
}

void sub_100B774D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B774F0(double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  int64x2_t v37;
  int64x2_t v38;
  void *__p;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  uint64_t *v46;
  uint64_t v47;
  double v48[2];
  __int128 v49;
  __int128 v50;
  double v51;
  uint64_t v52;
  int64x2_t v53;
  int64x2_t v54;

  v14 = (*a1 + a1[2]) * 0.5;
  v15 = *((_OWORD *)a1 + 1);
  v50 = *(_OWORD *)a1;
  v52 = *((_QWORD *)&v15 + 1);
  v48[1] = *((double *)&v50 + 1);
  v49 = v15;
  v51 = v14;
  v48[0] = v14;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  __p = 0;
  v40 = 0;
  v41 = 0;
  sub_100B77E0C((double *)&v50, v48, a2, &v45, &v42, &__p);
  v16 = (uint64_t *)__p;
  if (__p == v40)
    goto LABEL_37;
  v37 = 0u;
  v38 = 0u;
  v53 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v54 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v17 = -(uint64_t)__p;
  do
  {
    sub_100B77C14((double *)v53.i64, (double *)(*v16++ + 32));
    v17 -= 8;
  }
  while (v16 != v40);
  v37 = v53;
  v38 = v54;
  v18 = (uint64_t *)__p;
  if (a3 > 0x63 || (-v17 - (uint64_t)__p) >> 3 < a4)
  {
    if (v16 != __p)
    {
      while (1)
      {
        v19 = v18++;
        v20 = v18;
        if (v18 != v16)
          break;
LABEL_12:
        if (v18 == v16)
          goto LABEL_13;
      }
      while ((sub_100B779C8(a5, *v19, *v20) & 1) != 0)
      {
        v16 = v20 + 1;
        v20 = v16;
        if (v16 == v40)
          goto LABEL_12;
      }
      goto LABEL_40;
    }
  }
  else
  {
    if (!sub_100B78430((double *)v37.i64, (uint64_t **)&__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_40;
    v16 = v40;
  }
LABEL_13:
  v21 = (uint64_t *)__p;
  if (a4 <= ((char *)v16 - (_BYTE *)__p) >> 3 && a3 <= 0x63 && ((char *)v46 - (_BYTE *)v45) >> 3 >= a4)
  {
    if (sub_100B79108((double *)v37.i64, (uint64_t **)&__p, (uint64_t **)&v45, a3 + 1, a4, a5, a6, a7, a6, a7, a8))
    {
      v16 = v40;
      goto LABEL_25;
    }
LABEL_40:
    v29 = 0;
    goto LABEL_41;
  }
  if (__p != v16)
  {
    v22 = v46;
    if (v45 != v46)
    {
      while (1)
      {
        v23 = (uint64_t *)v45;
        if (v45 != v22)
          break;
LABEL_24:
        if (++v21 == v16)
          goto LABEL_25;
      }
      while ((sub_100B779C8(a5, *v21, *v23) & 1) != 0)
      {
        if (++v23 == v46)
        {
          v16 = v40;
          v22 = v23;
          goto LABEL_24;
        }
      }
      goto LABEL_40;
    }
  }
LABEL_25:
  v24 = (uint64_t *)__p;
  if (a4 > ((char *)v16 - (_BYTE *)__p) >> 3 || a3 > 0x63 || ((char *)v43 - (_BYTE *)v42) >> 3 < a4)
  {
    if (__p != v16)
    {
      v25 = v43;
      if (v42 != v43)
      {
        while (1)
        {
          v26 = (uint64_t *)v42;
          if (v42 != v25)
            break;
LABEL_36:
          if (++v24 == v16)
            goto LABEL_37;
        }
        while ((sub_100B779C8(a5, *v24, *v26) & 1) != 0)
        {
          if (++v26 == v43)
          {
            v16 = v40;
            v25 = v26;
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
    }
  }
  else if ((sub_100B79108((double *)v37.i64, (uint64_t **)&__p, (uint64_t **)&v42, a3 + 1, a4, a5, a6, a7, a6, a7, a8) & 1) == 0)
  {
    goto LABEL_40;
  }
LABEL_37:
  v28 = (uint64_t *)v45;
  v27 = v46;
  if (a3 > 0x63 || ((char *)v46 - (_BYTE *)v45) >> 3 < a4)
  {
LABEL_51:
    while (v28 != v27)
    {
      v31 = v28++;
      v32 = v28;
      if (v28 != v27)
      {
        while ((sub_100B779C8(a5, *v31, *v32) & 1) != 0)
        {
          v27 = v32 + 1;
          v32 = v27;
          if (v27 == v46)
            goto LABEL_51;
        }
        goto LABEL_40;
      }
    }
  }
  else if (!sub_100B78430((double *)&v50, (uint64_t **)&v45, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_40;
  }
  v34 = (uint64_t *)v42;
  v33 = v43;
  if (a3 > 0x63 || ((char *)v43 - (_BYTE *)v42) >> 3 < a4)
  {
    if (v42 != v43)
    {
      while (1)
      {
        v35 = v34++;
        v36 = v34;
        if (v34 != v33)
          break;
LABEL_59:
        v29 = 1;
        if (v34 == v33)
          goto LABEL_41;
      }
      while ((sub_100B779C8(a5, *v35, *v36) & 1) != 0)
      {
        v33 = v36 + 1;
        v36 = v33;
        if (v33 == v43)
          goto LABEL_59;
      }
      goto LABEL_40;
    }
    v29 = 1;
  }
  else
  {
    v29 = sub_100B78430(v48, (uint64_t **)&v42, a3 + 1, a4, a5, a6, a7, a8);
  }
LABEL_41:
  if (__p)
  {
    v40 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v42)
  {
    v43 = (uint64_t *)v42;
    operator delete(v42);
  }
  if (v45)
  {
    v46 = (uint64_t *)v45;
    operator delete(v45);
  }
  return v29;
}

void sub_100B77970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B779C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  BOOL v19;
  double v21;
  double v22;
  double v23;

  v6 = *(double *)(a2 + 32);
  v7 = *(double *)(a2 + 48);
  if (v7 - v6 < 360.0)
  {
    v8 = *(double *)(a3 + 32);
    v9 = *(double *)(a3 + 48);
    v10 = v9 - v8;
    if (v9 - v8 < 360.0)
    {
      v11 = vabdd_f64(v8, v6);
      v12 = 180.0;
      if (v11 != 180.0)
      {
        v13 = v8 - v6;
        if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_23;
        v17 = fabs(v11 + -180.0);
        v12 = 180.0;
        if (v11 < 180.0)
          v11 = 180.0;
        v18 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
        if (v17 > v18)
        {
LABEL_23:
          v12 = 180.0;
          if (v13 <= 180.0)
          {
            if (v13 >= -180.0)
              goto LABEL_5;
            v12 = fmod(v13 + -180.0, 360.0) + 180.0;
          }
          else
          {
            v13 = fmod(v13 + 180.0, 360.0) + -180.0;
            if (v13 != -180.0)
            {
              v19 = ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
                 && (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
              if (v19 && *(_QWORD *)&v13 != 0)
                goto LABEL_5;
              v12 = 180.0;
              v21 = fabs(v13 + 180.0);
              v22 = fabs(v13);
              if (v22 < 180.0)
                v22 = 180.0;
              v23 = v22 >= 1.0 ? v22 * 2.22044605e-16 : 2.22044605e-16;
              if (v21 > v23)
              {
LABEL_5:
                if (v13 < 0.0)
                  v13 = v13 + 360.0;
                v14 = v6 + v13;
                v15 = v10 + v6 + v13 + -360.0;
                if (vabdd_f64(v15, v9) < 180.0)
                  v15 = v9;
                if (v14 > v7 && v15 < v6)
                  return 1;
                goto LABEL_11;
              }
            }
          }
        }
      }
      v13 = v12;
      goto LABEL_5;
    }
  }
LABEL_11:
  if (*(double *)(a2 + 56) >= *(double *)(a3 + 40)
    && *(double *)(a2 + 40) <= *(double *)(a3 + 56)
    && !(*(unsigned __int8 *)(a2 + 96) | *(unsigned __int8 *)(a3 + 96)))
  {
    return sub_100B79908(*(unsigned int *)(a1 + 40), *(_QWORD **)a1, a2, *(_DWORD *)(a1 + 40), *(__int128 ***)a1, a3, 0, *(unsigned __int8 *)(a1 + 44), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 24), *(_BYTE **)(a1 + 32));
  }
  return 1;
}

void sub_100B77C14(double *a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v10;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v25;
  _BOOL4 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37[8];

  v3 = *a2;
  v4 = a2[2];
  v5 = a2[3];
  v6 = 1.79769313e308;
  if (*a2 == 1.79769313e308 && a2[1] == 1.79769313e308 && v4 == -1.79769313e308 && v5 == -1.79769313e308)
  {
    v12 = -1.79769313e308;
    v13 = -1.79769313e308;
    v14 = 1.79769313e308;
  }
  else
  {
    v36 = a2[1];
    v37[0] = v3;
    v34 = v5;
    v35 = v4;
    v10 = vabdd_f64(v3, v4);
    if (v10 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v3 - v4)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v11 = 0;
      }
      else
      {
        v15 = vabdd_f64(360.0, v10);
        v16 = fmax(v10, 360.0);
        if (v16 >= 1.0)
          v17 = v16 * 2.22044605e-16;
        else
          v17 = 2.22044605e-16;
        v11 = v15 <= v17;
      }
    }
    else
    {
      v11 = 1;
    }
    sub_100B76020(v37, &v36, &v35, &v34, v11);
    v6 = v36;
    v14 = v37[0];
    v12 = v34;
    v13 = v35;
  }
  v37[0] = v14;
  v37[1] = v6;
  v37[2] = v13;
  v37[3] = v12;
  v18 = *a1;
  v19 = a1[2];
  v20 = a1[3];
  v21 = 1.79769313e308;
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v19 == -1.79769313e308 && v20 == -1.79769313e308)
  {
    v27 = -1.79769313e308;
    v28 = -1.79769313e308;
    v29 = 1.79769313e308;
  }
  else
  {
    v35 = a1[1];
    v36 = v18;
    v33 = v20;
    v34 = v19;
    v25 = vabdd_f64(v18, v19);
    if (v25 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v18 - v19)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v26 = 0;
      }
      else
      {
        v30 = vabdd_f64(360.0, v25);
        v31 = fmax(v25, 360.0);
        if (v31 >= 1.0)
          v32 = v31 * 2.22044605e-16;
        else
          v32 = 2.22044605e-16;
        v26 = v30 <= v32;
      }
    }
    else
    {
      v26 = 1;
    }
    sub_100B76020(&v36, &v35, &v34, &v33, v26);
    v21 = v35;
    v29 = v36;
    v27 = v33;
    v28 = v34;
  }
  v37[4] = v29;
  v37[5] = v21;
  v37[6] = v28;
  v37[7] = v27;
  sub_100B75ACC((uint64_t)v37, a1);
}

void sub_100B77E0C(double *a1, double *a2, uint64_t **a3, void **a4, void **a5, void **a6)
{
  uint64_t *v6;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _BOOL4 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  double v40;
  double v41;
  BOOL v42;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  double v51;
  double v52;
  double v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    v82 = (uint64_t)(a6 + 2);
    v83 = (uint64_t)(a5 + 2);
    v84 = (uint64_t)(a4 + 2);
    while (1)
    {
      v13 = *v6;
      v14 = *a1;
      v15 = a1[2];
      v16 = *(double *)(*v6 + 32);
      v17 = *(double *)(*v6 + 48);
      v18 = v17 - v16;
      if (v15 - *a1 < 360.0 && v18 < 360.0)
        break;
LABEL_13:
      if (a1[3] >= *(double *)(v13 + 40))
      {
        v24 = a1[1] <= *(double *)(v13 + 56);
        goto LABEL_16;
      }
LABEL_14:
      v24 = 0;
LABEL_16:
      v25 = *a2;
      v26 = a2[2];
      if (v26 - *a2 < 360.0 && v18 < 360.0)
      {
        v27 = vabdd_f64(v16, v25);
        v28 = 180.0;
        if (v27 == 180.0)
          goto LABEL_19;
        v29 = v16 - v25;
        if (COERCE__INT64(fabs(v16 - v25)) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_73;
        v47 = fabs(v27 + -180.0);
        if (v27 < 180.0)
          v27 = 180.0;
        v48 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
        v42 = v47 > v48;
        v28 = 180.0;
        if (v42)
        {
LABEL_73:
          if (v29 <= 180.0)
          {
            if (v29 < -180.0)
            {
              v28 = fmod(v29 + -180.0, 360.0) + 180.0;
              goto LABEL_19;
            }
          }
          else
          {
            v29 = fmod(v29 + 180.0, 360.0) + -180.0;
            v28 = 180.0;
            if (v29 == -180.0)
              goto LABEL_19;
            v49 = ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (!v49 || *(_QWORD *)&v29 == 0)
            {
              v51 = fabs(v29 + 180.0);
              v52 = fabs(v29);
              if (v52 < 180.0)
                v52 = 180.0;
              v53 = v52 >= 1.0 ? v52 * 2.22044605e-16 : 2.22044605e-16;
              v42 = v51 > v53;
              v28 = 180.0;
              if (!v42)
                goto LABEL_19;
            }
          }
        }
        else
        {
LABEL_19:
          v29 = v28;
        }
        if (v29 < 0.0)
          v29 = v29 + 360.0;
        v30 = v25 + v29;
        v31 = v18 + v25 + v29 + -360.0;
        if (vabdd_f64(v31, v17) < 180.0)
          v31 = v17;
        if (v30 > v26 && v31 < v25)
          goto LABEL_28;
      }
      if (a2[3] >= *(double *)(v13 + 40) && a2[1] <= *(double *)(v13 + 56))
      {
        if (v24)
        {
          v55 = a6[1];
          v54 = (unint64_t)a6[2];
          if ((unint64_t)v55 >= v54)
          {
            v64 = ((char *)v55 - (_BYTE *)*a6) >> 3;
            if ((unint64_t)(v64 + 1) >> 61)
              sub_100259694();
            v65 = v54 - (_QWORD)*a6;
            v66 = v65 >> 2;
            if (v65 >> 2 <= (unint64_t)(v64 + 1))
              v66 = v64 + 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
              v67 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v67 = v66;
            if (v67)
            {
              v68 = (char *)sub_10025E6A0(v82, v67);
              v13 = *v6;
            }
            else
            {
              v68 = 0;
            }
            v74 = &v68[8 * v64];
            *(_QWORD *)v74 = v13;
            v56 = v74 + 8;
            v76 = (char *)*a6;
            v75 = (char *)a6[1];
            if (v75 != *a6)
            {
              do
              {
                v77 = *((_QWORD *)v75 - 1);
                v75 -= 8;
                *((_QWORD *)v74 - 1) = v77;
                v74 -= 8;
              }
              while (v75 != v76);
              v75 = (char *)*a6;
            }
            *a6 = v74;
            a6[1] = v56;
            a6[2] = &v68[8 * v67];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *v55 = v13;
            v56 = v55 + 1;
          }
          a6[1] = v56;
        }
        else
        {
          v58 = a5[1];
          v57 = (unint64_t)a5[2];
          if ((unint64_t)v58 >= v57)
          {
            v69 = ((char *)v58 - (_BYTE *)*a5) >> 3;
            if ((unint64_t)(v69 + 1) >> 61)
              sub_100259694();
            v70 = v57 - (_QWORD)*a5;
            v71 = v70 >> 2;
            if (v70 >> 2 <= (unint64_t)(v69 + 1))
              v71 = v69 + 1;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
              v72 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v72 = v71;
            if (v72)
            {
              v73 = (char *)sub_10025E6A0(v83, v72);
              v13 = *v6;
            }
            else
            {
              v73 = 0;
            }
            v78 = &v73[8 * v69];
            *(_QWORD *)v78 = v13;
            v59 = v78 + 8;
            v80 = (char *)*a5;
            v79 = (char *)a5[1];
            if (v79 != *a5)
            {
              do
              {
                v81 = *((_QWORD *)v79 - 1);
                v79 -= 8;
                *((_QWORD *)v78 - 1) = v81;
                v78 -= 8;
              }
              while (v79 != v80);
              v79 = (char *)*a5;
            }
            *a5 = v78;
            a5[1] = v59;
            a5[2] = &v73[8 * v72];
            if (v79)
              operator delete(v79);
          }
          else
          {
            *v58 = v13;
            v59 = v58 + 1;
          }
          a5[1] = v59;
        }
        goto LABEL_103;
      }
LABEL_28:
      if (v24)
      {
        v33 = a4[1];
        v32 = (unint64_t)a4[2];
        if ((unint64_t)v33 >= v32)
        {
          v35 = ((char *)v33 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v35 + 1) >> 61)
            sub_100259694();
          v36 = v32 - (_QWORD)*a4;
          v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1))
            v37 = v35 + 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          if (v38)
          {
            v39 = (char *)sub_10025E6A0(v84, v38);
            v13 = *v6;
          }
          else
          {
            v39 = 0;
          }
          v60 = &v39[8 * v35];
          *(_QWORD *)v60 = v13;
          v34 = v60 + 8;
          v62 = (char *)*a4;
          v61 = (char *)a4[1];
          if (v61 != *a4)
          {
            do
            {
              v63 = *((_QWORD *)v61 - 1);
              v61 -= 8;
              *((_QWORD *)v60 - 1) = v63;
              v60 -= 8;
            }
            while (v61 != v62);
            v61 = (char *)*a4;
          }
          *a4 = v60;
          a4[1] = v34;
          a4[2] = &v39[8 * v38];
          if (v61)
            operator delete(v61);
        }
        else
        {
          *v33 = v13;
          v34 = v33 + 1;
        }
        a4[1] = v34;
      }
LABEL_103:
      if (++v6 == a3[1])
        return;
    }
    v19 = vabdd_f64(v16, v14);
    v20 = 180.0;
    if (v19 == 180.0)
      goto LABEL_6;
    v21 = v16 - v14;
    if (COERCE__INT64(fabs(v16 - v14)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v40 = fabs(v19 + -180.0);
      if (v19 < 180.0)
        v19 = 180.0;
      v41 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
      v42 = v40 > v41;
      v20 = 180.0;
      if (!v42)
        goto LABEL_6;
    }
    if (v21 <= 180.0)
    {
      if (v21 < -180.0)
      {
        v20 = fmod(v21 + -180.0, 360.0) + 180.0;
LABEL_6:
        v21 = v20;
      }
    }
    else
    {
      v21 = fmod(v21 + 180.0, 360.0) + -180.0;
      v20 = 180.0;
      if (v21 == -180.0)
        goto LABEL_6;
      v42 = ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
         && (*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (!v42 || *(_QWORD *)&v21 == 0)
      {
        v44 = fabs(v21 + 180.0);
        v45 = fabs(v21);
        if (v45 < 180.0)
          v45 = 180.0;
        v46 = v45 >= 1.0 ? v45 * 2.22044605e-16 : 2.22044605e-16;
        v42 = v44 > v46;
        v20 = 180.0;
        if (!v42)
          goto LABEL_6;
      }
    }
    if (v21 < 0.0)
      v21 = v21 + 360.0;
    v22 = v14 + v21;
    v23 = v18 + v14 + v21 + -360.0;
    if (vabdd_f64(v23, v17) < 180.0)
      v23 = v17;
    if (v22 > v15 && v23 < v14)
      goto LABEL_14;
    goto LABEL_13;
  }
}

uint64_t sub_100B78430(double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v14;
  double v15;
  double v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  int64x2_t v39;
  int64x2_t v40;
  void *__p;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  uint64_t v49;
  double v50[2];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  double v54;
  int64x2_t v55;
  int64x2_t v56;

  v14 = a1[1];
  v15 = a1[3];
  v52 = *(_OWORD *)a1;
  v16 = (v14 + v15) * 0.5;
  v53 = *((_QWORD *)a1 + 2);
  v17 = *((_OWORD *)a1 + 1);
  *(_QWORD *)&v50[0] = v52;
  v51 = v17;
  v54 = v16;
  v50[1] = v16;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  __p = 0;
  v42 = 0;
  v43 = 0;
  sub_100B77E0C((double *)&v52, v50, a2, &v47, &v44, &__p);
  v18 = (uint64_t *)__p;
  if (__p == v42)
    goto LABEL_37;
  v39 = 0u;
  v40 = 0u;
  v55 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v56 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v19 = -(uint64_t)__p;
  do
  {
    sub_100B77C14((double *)v55.i64, (double *)(*v18++ + 32));
    v19 -= 8;
  }
  while (v18 != v42);
  v39 = v55;
  v40 = v56;
  v20 = (uint64_t *)__p;
  if (a3 > 0x63 || (-v19 - (uint64_t)__p) >> 3 < a4)
  {
    if (v18 != __p)
    {
      while (1)
      {
        v21 = v20++;
        v22 = v20;
        if (v20 != v18)
          break;
LABEL_12:
        if (v20 == v18)
          goto LABEL_13;
      }
      while ((sub_100B779C8(a5, *v21, *v22) & 1) != 0)
      {
        v18 = v22 + 1;
        v22 = v18;
        if (v18 == v42)
          goto LABEL_12;
      }
      goto LABEL_40;
    }
  }
  else
  {
    if (!sub_100B774F0(&v39, &__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_40;
    v18 = v42;
  }
LABEL_13:
  v23 = (uint64_t *)__p;
  if (a4 <= ((char *)v18 - (_BYTE *)__p) >> 3 && a3 <= 0x63 && ((char *)v48 - (_BYTE *)v47) >> 3 >= a4)
  {
    if (sub_100B78914((double *)v39.i64, (uint64_t **)&__p, (uint64_t **)&v47, a3 + 1, a4, a5, a6, a7, a6, a7, a8))
    {
      v18 = v42;
      goto LABEL_25;
    }
LABEL_40:
    v31 = 0;
    goto LABEL_41;
  }
  if (__p != v18)
  {
    v24 = v48;
    if (v47 != v48)
    {
      while (1)
      {
        v25 = (uint64_t *)v47;
        if (v47 != v24)
          break;
LABEL_24:
        if (++v23 == v18)
          goto LABEL_25;
      }
      while ((sub_100B779C8(a5, *v23, *v25) & 1) != 0)
      {
        if (++v25 == v48)
        {
          v18 = v42;
          v24 = v25;
          goto LABEL_24;
        }
      }
      goto LABEL_40;
    }
  }
LABEL_25:
  v26 = (uint64_t *)__p;
  if (a4 > ((char *)v18 - (_BYTE *)__p) >> 3 || a3 > 0x63 || ((char *)v45 - (_BYTE *)v44) >> 3 < a4)
  {
    if (__p != v18)
    {
      v27 = v45;
      if (v44 != v45)
      {
        while (1)
        {
          v28 = (uint64_t *)v44;
          if (v44 != v27)
            break;
LABEL_36:
          if (++v26 == v18)
            goto LABEL_37;
        }
        while ((sub_100B779C8(a5, *v26, *v28) & 1) != 0)
        {
          if (++v28 == v45)
          {
            v18 = v42;
            v27 = v28;
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
    }
  }
  else if ((sub_100B78914((double *)v39.i64, (uint64_t **)&__p, (uint64_t **)&v44, a3 + 1, a4, a5, a6, a7, a6, a7, a8) & 1) == 0)
  {
    goto LABEL_40;
  }
LABEL_37:
  v30 = (uint64_t *)v47;
  v29 = v48;
  if (a3 > 0x63 || ((char *)v48 - (_BYTE *)v47) >> 3 < a4)
  {
LABEL_51:
    while (v30 != v29)
    {
      v33 = v30++;
      v34 = v30;
      if (v30 != v29)
      {
        while ((sub_100B779C8(a5, *v33, *v34) & 1) != 0)
        {
          v29 = v34 + 1;
          v34 = v29;
          if (v29 == v48)
            goto LABEL_51;
        }
        goto LABEL_40;
      }
    }
  }
  else if (!sub_100B774F0(&v52, &v47, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_40;
  }
  v36 = (uint64_t *)v44;
  v35 = v45;
  if (a3 > 0x63 || ((char *)v45 - (_BYTE *)v44) >> 3 < a4)
  {
    if (v44 != v45)
    {
      while (1)
      {
        v37 = v36++;
        v38 = v36;
        if (v36 != v35)
          break;
LABEL_59:
        v31 = 1;
        if (v36 == v35)
          goto LABEL_41;
      }
      while ((sub_100B779C8(a5, *v37, *v38) & 1) != 0)
      {
        v35 = v38 + 1;
        v38 = v35;
        if (v35 == v45)
          goto LABEL_59;
      }
      goto LABEL_40;
    }
    v31 = 1;
  }
  else
  {
    v31 = sub_100B774F0(v50, &v44, a3 + 1, a4, a5, a6, a7, a8);
  }
LABEL_41:
  if (__p)
  {
    v42 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v44)
  {
    v45 = (uint64_t *)v44;
    operator delete(v44);
  }
  if (v47)
  {
    v48 = (uint64_t *)v47;
    operator delete(v47);
  }
  return v31;
}

void sub_100B788BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B78914(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  int64x2_t v34;
  int64x2_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  int64x2_t v55;
  int64x2_t v56;
  void *__p;
  uint64_t *v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  uint64_t v71;
  void *v72;
  uint64_t *v73;
  uint64_t v74;
  double v75[2];
  __int128 v76;
  __int128 v77;
  double v78;
  uint64_t v79;
  int64x2_t v80;
  int64x2_t v81;

  v17 = (*a1 + a1[2]) * 0.5;
  v18 = *((_OWORD *)a1 + 1);
  v77 = *(_OWORD *)a1;
  v79 = *((_QWORD *)&v18 + 1);
  v75[1] = *((double *)&v77 + 1);
  v76 = v18;
  v78 = v17;
  v75[0] = v17;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  __p = 0;
  v58 = 0;
  v59 = 0;
  sub_100B77E0C((double *)&v77, v75, a2, &v72, &v69, &v66);
  sub_100B77E0C((double *)&v77, v75, a3, &v63, &v60, &__p);
  v20 = (uint64_t *)v66;
  v19 = v67;
  if (v66 != v67)
  {
    v21 = v58;
    if (a5 > ((char *)v67 - (_BYTE *)v66) >> 3 || a4 > 0x63 || ((char *)v58 - (_BYTE *)__p) >> 3 < a5)
    {
      if (__p != v58)
      {
        while (1)
        {
          v22 = (uint64_t *)__p;
          if (__p != v21)
            break;
LABEL_8:
          if (++v20 == v19)
            goto LABEL_18;
        }
        while ((sub_100B779C8(a6, *v20, *v22) & 1) != 0)
        {
          if (++v22 == v58)
          {
            v19 = v67;
            v21 = v22;
            goto LABEL_8;
          }
        }
        goto LABEL_95;
      }
    }
    else
    {
      v55 = 0u;
      v56 = 0u;
      v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_100B77C14((double *)v80.i64, (double *)(*v20++ + 32));
      while (v20 != v67);
      v24 = v80.i64[1];
      v23 = v80.i64[0];
      v26 = v81.i64[1];
      v25 = v81.i64[0];
      v27 = (uint64_t *)__p;
      if (__p != v58)
      {
        do
          sub_100B77C14((double *)v80.i64, (double *)(*v27++ + 32));
        while (v27 != v58);
        v24 = v80.i64[1];
        v23 = v80.i64[0];
        v26 = v81.i64[1];
        v25 = v81.i64[0];
      }
      v55.i64[0] = v23;
      v55.i64[1] = v24;
      v56.i64[0] = v25;
      v56.i64[1] = v26;
      if ((sub_100B79108((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
        goto LABEL_95;
    }
LABEL_18:
    v28 = v64;
    if (a5 > ((char *)v64 - (_BYTE *)v63) >> 3)
    {
      v30 = (uint64_t *)v66;
      v29 = v67;
      goto LABEL_21;
    }
    v30 = (uint64_t *)v66;
    v29 = v67;
    if (a5 > ((char *)v61 - (_BYTE *)v60) >> 3 || a4 > 0x63 || ((char *)v67 - (_BYTE *)v66) >> 3 < a5)
    {
LABEL_21:
      if (v63 != v64 && v30 != v29)
      {
        while (1)
        {
          v31 = (uint64_t *)v63;
          if (v63 != v28)
            break;
LABEL_27:
          if (++v30 == v29)
          {
            v30 = (uint64_t *)v66;
            goto LABEL_29;
          }
        }
        while ((sub_100B779C8(a6, *v30, *v31) & 1) != 0)
        {
          if (++v31 == v64)
          {
            v29 = v67;
            v28 = v31;
            goto LABEL_27;
          }
        }
        goto LABEL_95;
      }
LABEL_29:
      if (v30 != v29)
      {
        v32 = v61;
        if (v60 != v61)
        {
          while (1)
          {
            v33 = (uint64_t *)v60;
            if (v60 != v32)
              break;
LABEL_35:
            if (++v30 == v29)
              goto LABEL_44;
          }
          while ((sub_100B779C8(a6, *v30, *v33) & 1) != 0)
          {
            if (++v33 == v61)
            {
              v29 = v67;
              v32 = v33;
              goto LABEL_35;
            }
          }
          goto LABEL_95;
        }
      }
      goto LABEL_44;
    }
    v55 = 0u;
    v56 = 0u;
    v34 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v35 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v80 = v34;
    v81 = v35;
    if (v66 != v67)
    {
      do
        sub_100B77C14((double *)v80.i64, (double *)(*v30++ + 32));
      while (v30 != v67);
      v34 = v80;
      v35 = v81;
    }
    v55 = v34;
    v56 = v35;
    if (!sub_100B79108((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_100B79108((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }
LABEL_44:
  v37 = (uint64_t *)__p;
  v36 = v58;
  if (__p == v58)
    goto LABEL_58;
  v39 = (uint64_t *)v72;
  v38 = v73;
  if (a5 > ((char *)v73 - (_BYTE *)v72) >> 3
    || a5 > ((char *)v70 - (_BYTE *)v69) >> 3
    || a4 > 0x63
    || ((char *)v58 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v39 != v38)
    {
      v40 = (uint64_t *)__p;
      if (__p != v36)
      {
        while ((sub_100B779C8(a6, *v39, *v40) & 1) != 0)
        {
          if (++v40 == v58)
          {
            v38 = v73;
            v36 = v40;
            goto LABEL_52;
          }
        }
        goto LABEL_95;
      }
LABEL_52:
      ++v39;
    }
    v42 = (uint64_t *)v69;
    v41 = v70;
    if (v69 == v70 || __p == v36)
      goto LABEL_58;
    while (1)
    {
      v50 = (uint64_t *)__p;
      if (__p != v36)
        break;
LABEL_79:
      if (++v42 == v41)
        goto LABEL_58;
    }
    while ((sub_100B779C8(a6, *v42, *v50) & 1) != 0)
    {
      if (++v50 == v58)
      {
        v41 = v70;
        v36 = v50;
        goto LABEL_79;
      }
    }
    goto LABEL_95;
  }
  v55 = 0u;
  v56 = 0u;
  v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_100B77C14((double *)v80.i64, (double *)(*v37++ + 32));
  while (v37 != v58);
  v55 = v80;
  v56 = v81;
  if (sub_100B79108((double *)v55.i64, (uint64_t **)&v72, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if ((sub_100B79108((double *)v55.i64, (uint64_t **)&v69, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_58:
      v45 = (uint64_t *)v72;
      v44 = v73;
      if (a5 > ((char *)v73 - (_BYTE *)v72) >> 3 || a4 > 0x63 || ((char *)v64 - (_BYTE *)v63) >> 3 < a5)
      {
        if (v72 != v73)
        {
          v46 = v64;
          if (v63 != v64)
          {
            while (1)
            {
              v47 = (uint64_t *)v63;
              if (v63 != v46)
                break;
LABEL_69:
              if (++v45 == v44)
                goto LABEL_70;
            }
            while ((sub_100B779C8(a6, *v45, *v47) & 1) != 0)
            {
              if (++v47 == v64)
              {
                v44 = v73;
                v46 = v47;
                goto LABEL_69;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100B79108((double *)&v77, (uint64_t **)&v72, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_70:
      v49 = (uint64_t *)v69;
      v48 = v70;
      if (a5 > ((char *)v70 - (_BYTE *)v69) >> 3 || a4 > 0x63 || ((char *)v61 - (_BYTE *)v60) >> 3 < a5)
      {
        if (v69 != v70)
        {
          v51 = v61;
          if (v60 != v61)
          {
            while (1)
            {
              v52 = (uint64_t *)v60;
              if (v60 != v51)
                break;
LABEL_87:
              if (++v49 == v48)
                goto LABEL_88;
            }
            while ((sub_100B779C8(a6, *v49, *v52) & 1) != 0)
            {
              if (++v52 == v61)
              {
                v48 = v70;
                v51 = v52;
                goto LABEL_87;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100B79108(v75, (uint64_t **)&v69, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_88:
      v53 = 1;
      goto LABEL_96;
    }
  }
LABEL_95:
  v53 = 0;
LABEL_96:
  if (__p)
  {
    v58 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v60)
  {
    v61 = (uint64_t *)v60;
    operator delete(v60);
  }
  if (v63)
  {
    v64 = (uint64_t *)v63;
    operator delete(v63);
  }
  if (v66)
  {
    v67 = (uint64_t *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (uint64_t *)v69;
    operator delete(v69);
  }
  if (v72)
  {
    v73 = (uint64_t *)v72;
    operator delete(v72);
  }
  return v53;
}

void sub_100B79064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B79108(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v17;
  double v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  int64x2_t v35;
  int64x2_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  int64x2_t v56;
  int64x2_t v57;
  void *__p;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  void *v70;
  uint64_t *v71;
  uint64_t v72;
  void *v73;
  uint64_t *v74;
  uint64_t v75;
  double v76[2];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  double v80;
  int64x2_t v81;
  int64x2_t v82;

  v17 = *(_OWORD *)a1;
  v18 = (a1[1] + a1[3]) * 0.5;
  v79 = *((_QWORD *)a1 + 2);
  v19 = *((_OWORD *)a1 + 1);
  *(_QWORD *)&v76[0] = v17;
  v77 = v19;
  v78 = v17;
  v80 = v18;
  v76[1] = v18;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_100B77E0C((double *)&v78, v76, a2, &v73, &v70, &v67);
  sub_100B77E0C((double *)&v78, v76, a3, &v64, &v61, &__p);
  v21 = (uint64_t *)v67;
  v20 = v68;
  if (v67 != v68)
  {
    v22 = v59;
    if (a5 > ((char *)v68 - (_BYTE *)v67) >> 3 || a4 > 0x63 || ((char *)v59 - (_BYTE *)__p) >> 3 < a5)
    {
      if (__p != v59)
      {
        while (1)
        {
          v23 = (uint64_t *)__p;
          if (__p != v22)
            break;
LABEL_8:
          if (++v21 == v20)
            goto LABEL_18;
        }
        while ((sub_100B779C8(a6, *v21, *v23) & 1) != 0)
        {
          if (++v23 == v59)
          {
            v20 = v68;
            v22 = v23;
            goto LABEL_8;
          }
        }
        goto LABEL_95;
      }
    }
    else
    {
      v56 = 0u;
      v57 = 0u;
      v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_100B77C14((double *)v81.i64, (double *)(*v21++ + 32));
      while (v21 != v68);
      v25 = v81.i64[1];
      v24 = v81.i64[0];
      v27 = v82.i64[1];
      v26 = v82.i64[0];
      v28 = (uint64_t *)__p;
      if (__p != v59)
      {
        do
          sub_100B77C14((double *)v81.i64, (double *)(*v28++ + 32));
        while (v28 != v59);
        v25 = v81.i64[1];
        v24 = v81.i64[0];
        v27 = v82.i64[1];
        v26 = v82.i64[0];
      }
      v56.i64[0] = v24;
      v56.i64[1] = v25;
      v57.i64[0] = v26;
      v57.i64[1] = v27;
      if ((sub_100B78914(&v56, &v67, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
        goto LABEL_95;
    }
LABEL_18:
    v29 = v65;
    if (a5 > ((char *)v65 - (_BYTE *)v64) >> 3)
    {
      v31 = (uint64_t *)v67;
      v30 = v68;
      goto LABEL_21;
    }
    v31 = (uint64_t *)v67;
    v30 = v68;
    if (a5 > ((char *)v62 - (_BYTE *)v61) >> 3 || a4 > 0x63 || ((char *)v68 - (_BYTE *)v67) >> 3 < a5)
    {
LABEL_21:
      if (v64 != v65 && v31 != v30)
      {
        while (1)
        {
          v32 = (uint64_t *)v64;
          if (v64 != v29)
            break;
LABEL_27:
          if (++v31 == v30)
          {
            v31 = (uint64_t *)v67;
            goto LABEL_29;
          }
        }
        while ((sub_100B779C8(a6, *v31, *v32) & 1) != 0)
        {
          if (++v32 == v65)
          {
            v30 = v68;
            v29 = v32;
            goto LABEL_27;
          }
        }
        goto LABEL_95;
      }
LABEL_29:
      if (v31 != v30)
      {
        v33 = v62;
        if (v61 != v62)
        {
          while (1)
          {
            v34 = (uint64_t *)v61;
            if (v61 != v33)
              break;
LABEL_35:
            if (++v31 == v30)
              goto LABEL_44;
          }
          while ((sub_100B779C8(a6, *v31, *v34) & 1) != 0)
          {
            if (++v34 == v62)
            {
              v30 = v68;
              v33 = v34;
              goto LABEL_35;
            }
          }
          goto LABEL_95;
        }
      }
      goto LABEL_44;
    }
    v56 = 0u;
    v57 = 0u;
    v35 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v36 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v81 = v35;
    v82 = v36;
    if (v67 != v68)
    {
      do
        sub_100B77C14((double *)v81.i64, (double *)(*v31++ + 32));
      while (v31 != v68);
      v35 = v81;
      v36 = v82;
    }
    v56 = v35;
    v57 = v36;
    if (!sub_100B78914(&v56, &v67, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_100B78914(&v56, &v67, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }
LABEL_44:
  v38 = (uint64_t *)__p;
  v37 = v59;
  if (__p == v59)
    goto LABEL_58;
  v40 = (uint64_t *)v73;
  v39 = v74;
  if (a5 > ((char *)v74 - (_BYTE *)v73) >> 3
    || a5 > ((char *)v71 - (_BYTE *)v70) >> 3
    || a4 > 0x63
    || ((char *)v59 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v40 != v39)
    {
      v41 = (uint64_t *)__p;
      if (__p != v37)
      {
        while ((sub_100B779C8(a6, *v40, *v41) & 1) != 0)
        {
          if (++v41 == v59)
          {
            v39 = v74;
            v37 = v41;
            goto LABEL_52;
          }
        }
        goto LABEL_95;
      }
LABEL_52:
      ++v40;
    }
    v43 = (uint64_t *)v70;
    v42 = v71;
    if (v70 == v71 || __p == v37)
      goto LABEL_58;
    while (1)
    {
      v51 = (uint64_t *)__p;
      if (__p != v37)
        break;
LABEL_79:
      if (++v43 == v42)
        goto LABEL_58;
    }
    while ((sub_100B779C8(a6, *v43, *v51) & 1) != 0)
    {
      if (++v51 == v59)
      {
        v42 = v71;
        v37 = v51;
        goto LABEL_79;
      }
    }
    goto LABEL_95;
  }
  v56 = 0u;
  v57 = 0u;
  v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_100B77C14((double *)v81.i64, (double *)(*v38++ + 32));
  while (v38 != v59);
  v56 = v81;
  v57 = v82;
  if (sub_100B78914(&v56, &v73, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if ((sub_100B78914(&v56, &v70, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_58:
      v46 = (uint64_t *)v73;
      v45 = v74;
      if (a5 > ((char *)v74 - (_BYTE *)v73) >> 3 || a4 > 0x63 || ((char *)v65 - (_BYTE *)v64) >> 3 < a5)
      {
        if (v73 != v74)
        {
          v47 = v65;
          if (v64 != v65)
          {
            while (1)
            {
              v48 = (uint64_t *)v64;
              if (v64 != v47)
                break;
LABEL_69:
              if (++v46 == v45)
                goto LABEL_70;
            }
            while ((sub_100B779C8(a6, *v46, *v48) & 1) != 0)
            {
              if (++v48 == v65)
              {
                v45 = v74;
                v47 = v48;
                goto LABEL_69;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100B78914(&v78, &v73, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_70:
      v50 = (uint64_t *)v70;
      v49 = v71;
      if (a5 > ((char *)v71 - (_BYTE *)v70) >> 3 || a4 > 0x63 || ((char *)v62 - (_BYTE *)v61) >> 3 < a5)
      {
        if (v70 != v71)
        {
          v52 = v62;
          if (v61 != v62)
          {
            while (1)
            {
              v53 = (uint64_t *)v61;
              if (v61 != v52)
                break;
LABEL_87:
              if (++v50 == v49)
                goto LABEL_88;
            }
            while ((sub_100B779C8(a6, *v50, *v53) & 1) != 0)
            {
              if (++v53 == v62)
              {
                v49 = v71;
                v52 = v53;
                goto LABEL_87;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100B78914(v76, &v70, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_88:
      v54 = 1;
      goto LABEL_96;
    }
  }
LABEL_95:
  v54 = 0;
LABEL_96:
  if (__p)
  {
    v59 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v61)
  {
    v62 = (uint64_t *)v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = (uint64_t *)v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = (uint64_t *)v67;
    operator delete(v67);
  }
  if (v70)
  {
    v71 = (uint64_t *)v70;
    operator delete(v70);
  }
  if (v73)
  {
    v74 = (uint64_t *)v73;
    operator delete(v73);
  }
  return v54;
}

void sub_100B79864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B79908(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, __int128 **a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, _BYTE *a12)
{
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 *v19;
  double *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  double *v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  _OWORD *v34;
  double *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __int128 *v41;
  __int128 *v42;
  __int128 *v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  int v61;
  int v62;
  BOOL v63;
  unint64_t v65;
  __int128 *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t result;
  int v73;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _OWORD *v80;
  _OWORD *v81;
  __int128 *v83;
  _OWORD *v84;
  _OWORD *v85;
  __int128 *v86;
  int v88;
  __int128 *v89;
  int v90;
  double *v91;
  __int128 v92;
  int v93;
  char v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[7];
  char v106;
  char v107;
  _QWORD v108[7];
  char v109;
  char v110;
  _QWORD *v111;
  unint64_t v112;

  v12 = (_QWORD *)a6;
  v13 = a4;
  v14 = a3;
  v88 = a1;
  if ((!*(_BYTE *)(a3 + 96) || (unint64_t)(*(_QWORD *)(a3 + 80) + 1) >= *(_QWORD *)(a3 + 88))
    && (!*(_BYTE *)(a6 + 96) || (unint64_t)(*(_QWORD *)(a6 + 80) + 1) >= *(_QWORD *)(a6 + 88)))
  {
    v15 = *(_QWORD *)(a3 + 24);
    if ((v15 & 0x8000000000000000) == 0)
    {
      v16 = a2[3];
      if (0xAAAAAAAAAAAAAAABLL * ((a2[4] - v16) >> 3) < v15)
        sub_10191B9B4(a1, (uint64_t)a2, a3);
      a2 = (_QWORD *)(v16 + 24 * v15);
    }
    v17 = (_OWORD *)*a2;
    v18 = *(_QWORD *)(a6 + 24);
    v81 = (_OWORD *)a2[1];
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = a5[3];
      if (0xAAAAAAAAAAAAAAABLL * (((char *)a5[4] - (char *)v19) >> 3) < v18)
        sub_10191B9B4(a1, (uint64_t)a2, a3);
      a5 = (__int128 **)v19 + 3 * v18;
    }
    v89 = *a5;
    v86 = a5[1];
    v20 = (double *)(a6 + 32);
    v90 = *(_DWORD *)a6;
    v21 = *(_DWORD *)a3;
    v22 = *(_QWORD *)(a3 + 104);
    v23 = *(_QWORD *)(a3 + 64);
    v24 = *(_QWORD *)(a3 + 72);
    v25 = &v17[v23];
    v80 = (_OWORD *)*a2;
    if (v23 != v24)
    {
      v27 = (double *)(a3 + 32);
      v28 = 16 * v24 - 16 * v23;
      v29 = v25;
      while (1)
      {
        v30 = v29[1];
        ++v29;
        v92 = v30;
        if (!sub_100B7A204(v21, (double *)&v92, v27, v20))
          break;
        ++v23;
        ++v22;
        v25 = v29;
        v28 -= 16;
        if (!v28)
          return 1;
      }
      v12 = (_QWORD *)a6;
      v13 = a4;
      v14 = a3;
      v17 = v80;
    }
    v77 = &v17[v24];
    if (v25 != v77)
    {
      v31 = &v17[v25 != v17];
      v32 = v81;
      v85 = v25 + 1;
      if (v25 + 1 != v81)
        v31 = v25 + 1;
      v33 = v31 + 1;
      v34 = &v17[v31 != v17];
      if (v33 != v81)
        v34 = v33;
      v84 = v34;
      v35 = (double *)(v14 + 32);
      v36 = -v21;
      v78 = v13;
      v79 = v12;
      v91 = (double *)(v14 + 32);
      v73 = -v21;
      while (1)
      {
        v92 = *v25;
        if (sub_100B7A204(v36, (double *)&v92, v35, v20))
          return 1;
        v108[0] = v14;
        v108[1] = v23;
        v108[2] = v25;
        v108[3] = v85;
        v108[4] = v84;
        v108[5] = v17;
        v108[6] = v32;
        v109 = 1;
        v110 = 0;
        v38 = v12[8];
        v37 = v12[9];
        v39 = &v89[v38];
        v40 = v12[13];
        if (v38 != v37)
        {
          v67 = 16 * v37 - 16 * v38;
          v68 = &v89[v38];
          while (1)
          {
            v69 = v68[1];
            ++v68;
            v92 = v69;
            if (!sub_100B7A204(v90, (double *)&v92, v20, v91))
              break;
            ++v38;
            ++v40;
            v39 = v68;
            v67 -= 16;
            if (!v67)
              goto LABEL_78;
          }
        }
        v76 = &v89[v37];
        if (v39 != v76)
          break;
LABEL_78:
        ++v22;
        v12 = v79;
LABEL_79:
        ++v25;
        v70 = v85;
        ++v23;
        v71 = v84 + 1;
        v17 = v80;
        v32 = v81;
        if (v84 + 1 == v81)
          v71 = &v80[v84 != v80];
        v84 = v71;
        ++v85;
        result = 1;
        v14 = a3;
        v35 = v91;
        v36 = v73;
        if (v70 == v77)
          return result;
      }
      v41 = &v89[v39 != v89];
      v42 = v39 + 1;
      if (v39 + 1 != v86)
        v41 = v39 + 1;
      v43 = v41 + 1;
      v44 = &v89[v41 != v89];
      if (v43 != v86)
        v44 = v43;
      v83 = v44;
      ++v22;
      v12 = v79;
      while (1)
      {
        v92 = *v39;
        if (sub_100B7A204(-v90, (double *)&v92, v20, v91))
          goto LABEL_79;
        *(_QWORD *)&v45 = -1;
        *((_QWORD *)&v45 + 1) = -1;
        if (v88 == a4 && *(_QWORD *)(a3 + 16) == v79[2] && *(_QWORD *)(a3 + 24) == v79[3])
        {
          if (a7)
          {
            if (v23 >= v38 || (a8 & 1) == 0)
            {
              if (v23 >= v38)
                goto LABEL_70;
              goto LABEL_44;
            }
LABEL_41:
            if (v40 == v22 || !v23 && *(_QWORD *)(a3 + 88) - 2 <= v38)
              goto LABEL_70;
            goto LABEL_44;
          }
          if (a8)
            goto LABEL_41;
        }
LABEL_44:
        v46 = 0;
        v105[0] = v79;
        v105[1] = v38;
        v105[2] = v39;
        v105[3] = v42;
        v105[4] = v83;
        v105[5] = v89;
        v105[6] = v86;
        v106 = 0;
        v107 = 0;
        v93 = 0;
        v94 = 0;
        v95 = -1;
        v96 = 0;
        do
        {
          v47 = (char *)&v92 + v46;
          *((_DWORD *)v47 + 10) = 0;
          *((_OWORD *)v47 + 3) = v45;
          *((_OWORD *)v47 + 4) = v45;
          *((_QWORD *)v47 + 10) = -1;
          *(_OWORD *)(v47 + 88) = xmmword_101C16BA0;
          v46 += 80;
          *((_QWORD *)v47 + 13) = 0;
          *((_QWORD *)v47 + 14) = 0;
        }
        while (v46 != 160);
        v97 = v88;
        v98 = *(_OWORD *)(a3 + 16);
        v99 = v23;
        v100 = -1;
        v101 = v78;
        v102 = *((_OWORD *)v79 + 1);
        v103 = v38;
        v104 = -1;
        v48 = a11[5];
        v49 = sub_100B79F80((uint64_t)v108, (uint64_t)v105, (uint64_t)&v92, a9, a10, a11);
        if (a11[5] < v48)
          sub_10191B9B4((uint64_t)v49, v50, v51);
        v52 = a11[4];
        v53 = a11[1];
        v54 = (_QWORD *)(v53 + 8 * (v52 / 0x14));
        if (a11[2] == v53)
          v55 = 0;
        else
          v55 = *v54 + 200 * (v52 % 0x14);
        v111 = v54;
        v112 = v55;
        sub_100B7FC10(&v111, v48);
        v56 = a11[1];
        if (a11[2] == v56)
        {
          v58 = 0;
        }
        else
        {
          v57 = a11[5] + a11[4];
          v58 = *(_QWORD *)(v56 + 8 * (v57 / 0x14)) + 200 * (v57 % 0x14);
        }
        v59 = v112;
        if (v58 != v112)
        {
          v60 = v111;
          while (*(_QWORD *)(v59 + 64) != *(_QWORD *)(v59 + 144))
          {
            v61 = *(_DWORD *)(v59 + 16);
            v62 = *(_DWORD *)(v59 + 40);
            v63 = v61 == 4 && v62 == 2;
            if (!v63 && (v61 != 3 || v62 != 2))
              break;
            if (*(_DWORD *)(v59 + 120) != 2)
              break;
            v59 += 200;
            if (v59 - *v60 == 4000)
            {
              v65 = v60[1];
              ++v60;
              v59 = v65;
            }
            if (v59 == v58)
              goto LABEL_69;
          }
          result = 0;
          *a12 = 1;
          return result;
        }
LABEL_69:
        *a12 = 0;
LABEL_70:
        ++v39;
        ++v38;
        v66 = v83 + 1;
        if (v83 + 1 == v86)
          v66 = &v89[v83 != v89];
        v83 = v66;
        ++v40;
        v63 = v42++ == v76;
        if (v63)
          goto LABEL_79;
      }
    }
  }
  return 1;
}

_QWORD *sub_100B79F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BOOL4 v21;
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[32];
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[3];
  _QWORD v34[3];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  char v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v6 = a6;
  v48 = a6;
  v32[0] = a1;
  v32[1] = a2;
  v33[1] = a1;
  v33[2] = a2;
  v34[1] = a2;
  v34[2] = a1;
  sub_100B7BB50(a1, a2, (uint64_t)&v35);
  v46 = a4;
  v47 = a5;
  if (v41 == 100)
    return v6;
  v15 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)v30 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v30[16] = v15;
  v31 = *(_QWORD *)(a3 + 192);
  v16 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v26[16] = *(_OWORD *)(a3 + 96);
  v27 = v16;
  v17 = *(_OWORD *)(a3 + 144);
  v28 = *(_OWORD *)(a3 + 128);
  v29 = v17;
  v18 = *(_OWORD *)(a3 + 48);
  v25[0] = *(_OWORD *)(a3 + 32);
  v25[1] = v18;
  v19 = *(_OWORD *)(a3 + 80);
  v25[2] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)v26 = v19;
  v20 = *(_OWORD *)(a3 + 16);
  v23 = *(_OWORD *)a3;
  v24 = v20;
  if (v41 > 0x6Cu)
  {
    if (v41 == 116)
    {
      sub_100B7AED4(a1, a2, (uint64_t)&v23, (__int128 *)&v35, (uint64_t)&v41, (uint64_t)v33);
LABEL_21:
      sub_100B7F820(v6, (uint64_t)&v23);
      return v6;
    }
    if (v41 == 109)
    {
      if (v45 == 1)
        sub_100B7A884(a1, a2, (uint64_t)&v23, (__int128 *)&v35, (uint64_t)&v41, (uint64_t)v33);
      else
        sub_100B7ABAC(a2, a1, (uint64_t)&v23, (__int128 *)&v35, (uint64_t)&v41, (uint64_t)v34);
      goto LABEL_21;
    }
  }
  else
  {
    if (v41 == 99)
    {
      if (!v42)
      {
        if (v44)
        {
          sub_100B7B3C4(a1, a2, (uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v41, (uint64_t)v33);
        }
        else
        {
          sub_100B7B8B8(a1, a2, (uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v41, (uint64_t)v33);
          LODWORD(v24) = 5;
        }
        goto LABEL_21;
      }
      sub_100B7B6A8(a1, a2, &v23, &v48, (uint64_t)v32, (uint64_t)v33);
      return v48;
    }
    if (v41 == 105)
    {
      LODWORD(v24) = 2;
      if (!v35)
        sub_10191B9D8(v12, v13, v14);
      v23 = v36;
      *(_OWORD *)&v26[8] = v37;
      *(_QWORD *)&v26[24] = v38;
      *(_OWORD *)&v30[8] = v39;
      *(_QWORD *)&v30[24] = v40;
      v21 = v43 == 1;
      DWORD2(v25[5 * (v43 != 1)]) = 1;
      DWORD2(v25[5 * v21]) = 2;
      goto LABEL_21;
    }
  }
  if (v41 == 101 && !v42)
  {
    sub_100B7B8B8(a1, a2, (uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v41, (uint64_t)v33);
    goto LABEL_21;
  }
  return v6;
}

BOOL sub_100B7A204(int a1, double *a2, double *a3, double *a4)
{
  _BOOL8 result;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _BOOL4 v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  BOOL v24;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  BOOL v41;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  BOOL v48;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  unint64_t v56;
  BOOL v57;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  BOOL v64;
  double v66;
  double v67;
  double v68;

  result = 0;
  v6 = *a2;
  v7 = *a4;
  v8 = a4[2];
  v9 = *a2 > v8 || v6 < v7;
  if (v9 && v8 - v7 < 360.0)
  {
    v11 = v6 - v7;
    v12 = vabdd_f64(v6, v7);
    v13 = 180.0;
    if (v12 != 180.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v6 - v7)) > 0x7FEFFFFFFFFFFFFFLL
        || ((v21 = fabs(v12 + -180.0), v13 = 180.0, v12 >= 180.0) ? (v22 = v12) : (v22 = 180.0),
            v22 >= 1.0 ? (v23 = v22 * 2.22044605e-16) : (v23 = 2.22044605e-16),
            v21 > v23))
      {
        v13 = 180.0;
        if (v11 <= 180.0)
        {
          v14 = v6 - v7;
          if (v11 >= -180.0)
            goto LABEL_9;
          v13 = fmod(v11 + -180.0, 360.0) + 180.0;
        }
        else
        {
          v14 = fmod(v11 + 180.0, 360.0) + -180.0;
          if (v14 != -180.0)
          {
            v24 = ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (v24 && *(_QWORD *)&v14 != 0)
              goto LABEL_9;
            v13 = 180.0;
            v26 = fabs(v14 + 180.0);
            v27 = fabs(v14);
            if (v27 < 180.0)
              v27 = 180.0;
            v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
            if (v26 > v28)
            {
LABEL_9:
              if (v14 < 0.0)
                v14 = v14 + 360.0;
              if (v7 + v14 <= v8)
                return 0;
              if (a1 != -1)
              {
                if (a1 == 1)
                {
                  v15 = 180.0;
                  if (v12 != 180.0)
                  {
                    if (COERCE_UNSIGNED_INT64(fabs(v6 - v7)) > 0x7FEFFFFFFFFFFFFFLL
                      || ((v36 = fabs(v12 + -180.0), v15 = 180.0, v12 >= 180.0) ? (v37 = v12) : (v37 = 180.0),
                          v37 >= 1.0 ? (v38 = v37 * 2.22044605e-16) : (v38 = 2.22044605e-16),
                          v36 > v38))
                    {
                      v15 = 180.0;
                      if (v11 <= 180.0)
                      {
                        if (v11 >= -180.0)
                          goto LABEL_16;
                        v15 = fmod(v11 + -180.0, 360.0) + 180.0;
                      }
                      else
                      {
                        v39 = fmod(v11 + 180.0, 360.0);
                        v11 = v39 + -180.0;
                        if (v39 + -180.0 != -180.0)
                        {
                          v40 = COERCE__INT64(fabs(v39 + -180.0)) - 1;
                          v41 = (unint64_t)(COERCE__INT64(fabs(v39 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
                             && v40 > 0xFFFFFFFFFFFFELL;
                          if (v41 && *(_QWORD *)&v11 != 0)
                            goto LABEL_16;
                          v15 = 180.0;
                          v43 = fabs(v11 + 180.0);
                          v44 = fabs(v11);
                          if (v44 < 180.0)
                            v44 = 180.0;
                          v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
                          if (v43 > v45)
                          {
LABEL_16:
                            v16 = vabdd_f64(*a3, v7);
                            v17 = 180.0;
                            if (v16 != 180.0)
                            {
                              v18 = *a3 - v7;
                              if (COERCE_UNSIGNED_INT64(fabs(v18)) > 0x7FEFFFFFFFFFFFFFLL)
                                goto LABEL_92;
                              v46 = fabs(v16 + -180.0);
                              v17 = 180.0;
                              if (v16 < 180.0)
                                v16 = 180.0;
                              v47 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
                              if (v46 > v47)
                              {
LABEL_92:
                                v17 = 180.0;
                                if (v18 <= 180.0)
                                {
                                  if (v18 >= -180.0)
                                    goto LABEL_18;
                                  v17 = fmod(v18 + -180.0, 360.0) + 180.0;
                                }
                                else
                                {
                                  v18 = fmod(v18 + 180.0, 360.0) + -180.0;
                                  if (v18 != -180.0)
                                  {
                                    v48 = ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
                                       && (*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
                                    if (v48 && *(_QWORD *)&v18 != 0)
                                      goto LABEL_18;
                                    v17 = 180.0;
                                    v50 = fabs(v18 + 180.0);
                                    v51 = fabs(v18);
                                    if (v51 < 180.0)
                                      v51 = 180.0;
                                    v52 = v51 >= 1.0 ? v51 * 2.22044605e-16 : 2.22044605e-16;
                                    if (v50 > v52)
                                      goto LABEL_18;
                                  }
                                }
                              }
                            }
                            v18 = v17;
LABEL_18:
                            v19 = v11 < 0.0;
                            if (v18 > 0.0)
                              v19 = 0;
                            v20 = v18 > v11;
                            return !v20 && v19;
                          }
                        }
                      }
                    }
                  }
                  v11 = v15;
                  goto LABEL_16;
                }
                return 0;
              }
              v29 = vabdd_f64(v6, v8);
              v30 = 180.0;
              if (v29 != 180.0)
              {
                v31 = v6 - v8;
                if (COERCE__INT64(fabs(v6 - v8)) > 0x7FEFFFFFFFFFFFFFLL)
                  goto LABEL_116;
                v53 = fabs(v29 + -180.0);
                v30 = 180.0;
                if (v29 < 180.0)
                  v29 = 180.0;
                v54 = v29 >= 1.0 ? v29 * 2.22044605e-16 : 2.22044605e-16;
                if (v53 > v54)
                {
LABEL_116:
                  v30 = 180.0;
                  if (v31 <= 180.0)
                  {
                    if (v31 >= -180.0)
                      goto LABEL_49;
                    v30 = fmod(v31 + -180.0, 360.0) + 180.0;
                  }
                  else
                  {
                    v55 = fmod(v31 + 180.0, 360.0);
                    v31 = v55 + -180.0;
                    if (v55 + -180.0 != -180.0)
                    {
                      v56 = COERCE__INT64(fabs(v55 + -180.0)) - 1;
                      v57 = (unint64_t)(COERCE__INT64(fabs(v55 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
                         && v56 > 0xFFFFFFFFFFFFELL;
                      if (v57 && *(_QWORD *)&v31 != 0)
                        goto LABEL_49;
                      v30 = 180.0;
                      v59 = fabs(v31 + 180.0);
                      v60 = fabs(v31);
                      if (v60 < 180.0)
                        v60 = 180.0;
                      v61 = v60 >= 1.0 ? v60 * 2.22044605e-16 : 2.22044605e-16;
                      if (v59 > v61)
                      {
LABEL_49:
                        v32 = a3[2];
                        v33 = vabdd_f64(v32, v8);
                        v34 = 180.0;
                        if (v33 != 180.0)
                        {
                          v35 = v32 - v8;
                          if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                            goto LABEL_140;
                          v62 = fabs(v33 + -180.0);
                          v34 = 180.0;
                          if (v33 < 180.0)
                            v33 = 180.0;
                          v63 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
                          if (v62 > v63)
                          {
LABEL_140:
                            v34 = 180.0;
                            if (v35 <= 180.0)
                            {
                              if (v35 >= -180.0)
                                goto LABEL_51;
                              v34 = fmod(v35 + -180.0, 360.0) + 180.0;
                            }
                            else
                            {
                              v35 = fmod(v35 + 180.0, 360.0) + -180.0;
                              if (v35 != -180.0)
                              {
                                v64 = ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
                                   && (*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
                                if (v64 && *(_QWORD *)&v35 != 0)
                                  goto LABEL_51;
                                v34 = 180.0;
                                v66 = fabs(v35 + 180.0);
                                v67 = fabs(v35);
                                if (v67 < 180.0)
                                  v67 = 180.0;
                                v68 = v67 >= 1.0 ? v67 * 2.22044605e-16 : 2.22044605e-16;
                                if (v66 > v68)
                                  goto LABEL_51;
                              }
                            }
                          }
                        }
                        v35 = v34;
LABEL_51:
                        v19 = v31 > 0.0;
                        if (v35 < 0.0)
                          v19 = 0;
                        v20 = v31 > v35;
                        return !v20 && v19;
                      }
                    }
                  }
                }
              }
              v31 = v30;
              goto LABEL_49;
            }
          }
        }
      }
    }
    v14 = v13;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_100B7A884(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  uint64_t result;
  int v28;
  uint64_t v29;
  double *v30;
  double *v31;
  int v32;
  uint64_t v33;
  double *v34;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;

  v8 = 0;
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(__int128 *)((char *)a4 + 8);
  v9 = a3 + 40;
  v10 = 1;
  __asm { FMOV            V1.2D, #1.0 }
  do
  {
    v15 = v10;
    v16 = *(_DWORD *)(a5 + 4 * v8 + 36);
    if (v16 == -1)
    {
      v18 = v9 + 80 * v8;
      *(_OWORD *)(v18 + 48) = xmmword_101C16BA0;
      *(_QWORD *)(v18 + 64) = 0;
    }
    else if (v16 == 1)
    {
      v17 = v9 + 80 * v8;
      *(_OWORD *)(v17 + 48) = _Q1;
      *(_QWORD *)(v17 + 64) = 0x412E848000000000;
    }
    else
    {
      if ((v15 & 1) != 0)
        v19 = (__int128 *)((char *)a4 + 40);
      else
        v19 = a4 + 4;
      v20 = *v19;
      v21 = v9 + 80 * v8;
      *(_QWORD *)(v21 + 64) = *((_QWORD *)v19 + 2);
      *(_OWORD *)(v21 + 48) = v20;
    }
    v10 = 0;
    v8 = 1;
  }
  while ((v15 & 1) != 0);
  v22 = *(_DWORD *)(a5 + 28);
  v23 = *(_QWORD *)(a6 + 8);
  v24 = *(_QWORD *)(a6 + 16);
  v26 = *(double **)(v23 + 16);
  v25 = *(double **)(v23 + 24);
  if (!*(_BYTE *)(v24 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(_QWORD *)(v24 + 32);
    *(_BYTE *)(v24 + 80) = 1;
  }
  result = sub_10077970C(v26, v25, (double *)(v24 + 64));
  v28 = result;
  if (v22 + (_DWORD)result)
  {
    v29 = *(_QWORD *)(a6 + 16);
    v30 = *(double **)(v29 + 16);
    v31 = *(double **)(v29 + 24);
    if (!*(_BYTE *)(v29 + 80))
    {
      sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v29 + 24), v29 + 32);
      *(_OWORD *)(v29 + 64) = *(_OWORD *)*(_QWORD *)(v29 + 32);
      *(_BYTE *)(v29 + 80) = 1;
    }
    v32 = sub_10077970C(v30, v31, (double *)(v29 + 64));
    v33 = *(_QWORD *)(a6 + 16);
    v34 = *(double **)(v33 + 24);
    if (!*(_BYTE *)(v33 + 80))
    {
      sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v33 + 24), v33 + 32);
      *(_OWORD *)(v33 + 64) = *(_OWORD *)*(_QWORD *)(v33 + 32);
      *(_BYTE *)(v33 + 80) = 1;
    }
    result = sub_10077970C(v34, (double *)(v33 + 64), *(double **)(*(_QWORD *)(a6 + 8) + 24));
    if ((v28 & v22) == 0xFFFFFFFF && v32 == 1)
    {
      *(_DWORD *)(a3 + 40) = 2;
      *(_DWORD *)(a3 + 120) = 2;
      *(_BYTE *)(a3 + 20) = 1;
    }
    else
    {
      v36 = result;
      if (v22 == 1 && v28 == 1 && v32 == -1)
      {
        *(_DWORD *)(a3 + 40) = 1;
        if ((_DWORD)result == -1)
          v37 = 1;
        else
          v37 = 3;
        *(_DWORD *)(a3 + 120) = v37;
        *(_BYTE *)(a3 + 20) = 1;
      }
      else if (v22 == v28 && v22 == v32)
      {
        v38 = (v32 == 1) ^ ((_DWORD)result == 0);
        if ((_DWORD)result * v22 == -1)
        {
          v39 = sub_10077970C(*(double **)(*(_QWORD *)(a6 + 8) + 16), *(double **)(*(_QWORD *)(a6 + 8) + 24), *(double **)(*(_QWORD *)(a6 + 16) + 24));
          result = sub_100B7F7B8(a6);
          if ((_DWORD)result * v39 == 1)
          {
            result = sub_10077970C(*(double **)(*(_QWORD *)(a6 + 16) + 16), *(double **)(*(_QWORD *)(a6 + 16) + 24), *(double **)(*(_QWORD *)(a6 + 8) + 24));
            if ((_DWORD)result * v36 == -1)
              v38 ^= 1u;
          }
        }
        *(_DWORD *)(v9 + 80 * v38) = 1;
        *(_DWORD *)(v9 + 80 * (v38 ^ 1)) = 2;
        *(_BYTE *)(a3 + 20) = 1;
      }
      else if (v28)
      {
        *(_DWORD *)(a3 + 16) = 8;
      }
      else
      {
        if (v22 == v32)
        {
          v40 = 4;
          *(_DWORD *)(a3 + 40) = 4;
        }
        else
        {
          if (v32 == 1)
            v41 = 2;
          else
            v41 = 1;
          *(_DWORD *)(a3 + 40) = v41;
          v40 = 3;
        }
        *(_DWORD *)(a3 + 120) = v40;
      }
    }
  }
  else
  {
    *(_DWORD *)(v9 + 80 * ((_DWORD)result != -1)) = 1;
    *(_DWORD *)(v9 + 80 * ((_DWORD)result == -1)) = 2;
  }
  return result;
}

uint64_t sub_100B7ABAC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  uint64_t result;
  int v28;
  uint64_t v29;
  double *v30;
  double *v31;
  int v32;
  uint64_t v33;
  double *v34;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;

  v8 = 0;
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(__int128 *)((char *)a4 + 8);
  v9 = a3 + 40;
  v10 = 1;
  __asm { FMOV            V1.2D, #1.0 }
  do
  {
    v15 = v10;
    v16 = *(_DWORD *)(a5 + 4 * v8 + 36);
    if (v16 == -1)
    {
      v18 = v9 + 80 * v8;
      *(_OWORD *)(v18 + 48) = xmmword_101C16BA0;
      *(_QWORD *)(v18 + 64) = 0;
    }
    else if (v16 == 1)
    {
      v17 = v9 + 80 * v8;
      *(_OWORD *)(v17 + 48) = _Q1;
      *(_QWORD *)(v17 + 64) = 0x412E848000000000;
    }
    else
    {
      if ((v15 & 1) != 0)
        v19 = (__int128 *)((char *)a4 + 40);
      else
        v19 = a4 + 4;
      v20 = *v19;
      v21 = v9 + 80 * v8;
      *(_QWORD *)(v21 + 64) = *((_QWORD *)v19 + 2);
      *(_OWORD *)(v21 + 48) = v20;
    }
    v10 = 0;
    v8 = 1;
  }
  while ((v15 & 1) != 0);
  v22 = *(_DWORD *)(a5 + 20);
  v23 = *(_QWORD *)(a6 + 8);
  v24 = *(_QWORD *)(a6 + 16);
  v26 = *(double **)(v23 + 16);
  v25 = *(double **)(v23 + 24);
  if (!*(_BYTE *)(v24 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(_QWORD *)(v24 + 32);
    *(_BYTE *)(v24 + 80) = 1;
  }
  result = sub_10077970C(v26, v25, (double *)(v24 + 64));
  v28 = result;
  if (!(v22 + (_DWORD)result))
  {
    *(_DWORD *)(v9 + 80 * ((_DWORD)result == -1)) = 1;
    *(_DWORD *)(v9 + 80 * ((_DWORD)result != -1)) = 2;
    return result;
  }
  v29 = *(_QWORD *)(a6 + 16);
  v30 = *(double **)(v29 + 16);
  v31 = *(double **)(v29 + 24);
  if (!*(_BYTE *)(v29 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v29 + 24), v29 + 32);
    *(_OWORD *)(v29 + 64) = *(_OWORD *)*(_QWORD *)(v29 + 32);
    *(_BYTE *)(v29 + 80) = 1;
  }
  v32 = sub_10077970C(v30, v31, (double *)(v29 + 64));
  v33 = *(_QWORD *)(a6 + 16);
  v34 = *(double **)(v33 + 24);
  if (!*(_BYTE *)(v33 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v33 + 24), v33 + 32);
    *(_OWORD *)(v33 + 64) = *(_OWORD *)*(_QWORD *)(v33 + 32);
    *(_BYTE *)(v33 + 80) = 1;
  }
  result = sub_10077970C(v34, (double *)(v33 + 64), *(double **)(*(_QWORD *)(a6 + 8) + 24));
  if ((v28 & v22) == 0xFFFFFFFF && v32 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 120) = 2;
LABEL_31:
    *(_BYTE *)(a3 + 20) = 1;
    return result;
  }
  v36 = result;
  if (v22 == 1 && v28 == 1 && v32 == -1)
  {
    if ((_DWORD)result == -1)
      v37 = 1;
    else
      v37 = 3;
    *(_DWORD *)(a3 + 40) = v37;
    *(_DWORD *)(a3 + 120) = 1;
    goto LABEL_31;
  }
  if (v22 == v28 && v22 == v32)
  {
    v38 = (v32 == 1) ^ ((_DWORD)result != 0);
    if ((_DWORD)result * v22 == -1)
    {
      v39 = sub_10077970C(*(double **)(*(_QWORD *)(a6 + 8) + 16), *(double **)(*(_QWORD *)(a6 + 8) + 24), *(double **)(*(_QWORD *)(a6 + 16) + 24));
      result = sub_100B7F7B8(a6);
      if ((_DWORD)result * v39 == 1)
      {
        result = sub_10077970C(*(double **)(*(_QWORD *)(a6 + 16) + 16), *(double **)(*(_QWORD *)(a6 + 16) + 24), *(double **)(*(_QWORD *)(a6 + 8) + 24));
        if ((_DWORD)result * v36 == -1)
          v38 ^= 1u;
      }
    }
    *(_DWORD *)(v9 + 80 * v38) = 1;
    *(_DWORD *)(v9 + 80 * (v38 ^ 1)) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v28)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else if (v22 == v32)
  {
    *(_DWORD *)(a3 + 40) = 4;
    *(_DWORD *)(a3 + 120) = 4;
  }
  else
  {
    if (v32 == 1)
      v40 = 2;
    else
      v40 = 1;
    *(_DWORD *)(a3 + 120) = v40;
    *(_DWORD *)(a3 + 40) = 3;
  }
  return result;
}

uint64_t sub_100B7AED4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double *v32;
  int v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  double *v39;
  double *v40;
  int v41;
  uint64_t v42;
  double *v43;
  double *v44;
  uint64_t result;
  int v47;
  char v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  double *v53;
  double *v54;
  int v55;
  uint64_t v56;
  double *v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  int v61;
  int v62;
  int v64;
  int v65;
  int v66;
  int v67;

  v9 = 0;
  *(_DWORD *)(a3 + 16) = 3;
  *(_OWORD *)a3 = *(__int128 *)((char *)a4 + 8);
  v10 = a3 + 40;
  v11 = 1;
  __asm { FMOV            V1.2D, #1.0 }
  do
  {
    v16 = v11;
    v17 = *(_DWORD *)(a5 + 4 * v9 + 36);
    if (v17 == -1)
    {
      v19 = v10 + 80 * v9;
      *(_OWORD *)(v19 + 48) = xmmword_101C16BA0;
      *(_QWORD *)(v19 + 64) = 0;
    }
    else if (v17 == 1)
    {
      v18 = v10 + 80 * v9;
      *(_OWORD *)(v18 + 48) = _Q1;
      *(_QWORD *)(v18 + 64) = 0x412E848000000000;
    }
    else
    {
      if ((v16 & 1) != 0)
        v20 = (__int128 *)((char *)a4 + 40);
      else
        v20 = a4 + 4;
      v21 = *v20;
      v22 = v10 + 80 * v9;
      *(_QWORD *)(v22 + 64) = *((_QWORD *)v20 + 2);
      *(_OWORD *)(v22 + 48) = v21;
    }
    v11 = 0;
    v9 = 1;
  }
  while ((v16 & 1) != 0);
  v24 = *(_QWORD *)(a6 + 8);
  v23 = *(_QWORD *)(a6 + 16);
  v26 = *(double **)(v23 + 16);
  v25 = *(double **)(v23 + 24);
  if (!*(_BYTE *)(v24 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 8), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(_QWORD *)(v24 + 32);
    *(_BYTE *)(v24 + 80) = 1;
  }
  v27 = sub_10077970C(v26, v25, (double *)(v24 + 64));
  v28 = *(_DWORD *)(a5 + 28);
  v29 = *(_QWORD *)(a6 + 8);
  v30 = *(_QWORD *)(a6 + 16);
  v32 = *(double **)(v29 + 16);
  v31 = *(double **)(v29 + 24);
  if (!*(_BYTE *)(v30 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v30 + 24), v30 + 32);
    *(_OWORD *)(v30 + 64) = *(_OWORD *)*(_QWORD *)(v30 + 32);
    *(_BYTE *)(v30 + 80) = 1;
  }
  v33 = sub_10077970C(v32, v31, (double *)(v30 + 64));
  if (v33 * v28 == -1)
  {
    v52 = *(_QWORD *)(a6 + 8);
    v53 = *(double **)(v52 + 16);
    v54 = *(double **)(v52 + 24);
    if (!*(_BYTE *)(v52 + 80))
    {
      sub_100B7E7B0(*(_QWORD *)(a6 + 8), *(double **)(v52 + 24), v52 + 32);
      *(_OWORD *)(v52 + 64) = *(_OWORD *)*(_QWORD *)(v52 + 32);
      *(_BYTE *)(v52 + 80) = 1;
    }
    result = sub_10077970C(v53, v54, (double *)(v52 + 64));
    if ((_DWORD)result == v28)
    {
      if (!v27)
      {
        *(_DWORD *)(a3 + 40) = 3;
        v60 = v33 == 1;
        goto LABEL_105;
      }
      if (v27 == v33)
      {
        if (v33 == 1)
          v55 = 1;
        else
          v55 = 2;
        *(_DWORD *)(a3 + 40) = v55;
        goto LABEL_103;
      }
    }
    if ((_DWORD)result == v33)
    {
      v56 = *(_QWORD *)(a6 + 16);
      v57 = *(double **)(v56 + 24);
      if (!*(_BYTE *)(v56 + 80))
      {
        sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v56 + 24), v56 + 32);
        *(_OWORD *)(v56 + 64) = *(_OWORD *)*(_QWORD *)(v56 + 32);
        *(_BYTE *)(v56 + 80) = 1;
      }
      v58 = *(_QWORD *)(a6 + 8);
      if (!*(_BYTE *)(v58 + 80))
      {
        sub_100B7E7B0(v58, *(double **)(v58 + 24), v58 + 32);
        *(_OWORD *)(v58 + 64) = *(_OWORD *)*(_QWORD *)(v58 + 32);
        *(_BYTE *)(v58 + 80) = 1;
      }
      result = sub_10077970C(v57, (double *)(v56 + 64), (double *)(v58 + 64));
      if (!(_DWORD)result)
        goto LABEL_72;
      if ((_DWORD)result == v33)
      {
        if (v33 == 1)
          v59 = 1;
        else
          v59 = 2;
        *(_DWORD *)(a3 + 40) = v59;
        if (v33 == 1)
          v55 = 2;
        else
          v55 = 1;
        goto LABEL_103;
      }
    }
    v60 = v33 == 1;
    if (v33 == 1)
      v61 = 2;
    else
      v61 = 1;
    *(_DWORD *)(a3 + 40) = v61;
LABEL_105:
    if (v60)
      v51 = 1;
    else
      v51 = 2;
    goto LABEL_108;
  }
  v34 = *(_QWORD *)(a6 + 16);
  v35 = *(double **)(v34 + 24);
  if (!*(_BYTE *)(v34 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v34 + 24), v34 + 32);
    *(_OWORD *)(v34 + 64) = *(_OWORD *)*(_QWORD *)(v34 + 32);
    *(_BYTE *)(v34 + 80) = 1;
  }
  v36 = *(_QWORD *)(a6 + 8);
  if (!*(_BYTE *)(v36 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 8), *(double **)(v36 + 24), v36 + 32);
    *(_OWORD *)(v36 + 64) = *(_OWORD *)*(_QWORD *)(v36 + 32);
    *(_BYTE *)(v36 + 80) = 1;
  }
  v37 = sub_10077970C(v35, (double *)(v34 + 64), (double *)(v36 + 64));
  v38 = *(_QWORD *)(a6 + 8);
  v39 = *(double **)(v38 + 16);
  v40 = *(double **)(v38 + 24);
  if (!*(_BYTE *)(v38 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 8), *(double **)(v38 + 24), v38 + 32);
    *(_OWORD *)(v38 + 64) = *(_OWORD *)*(_QWORD *)(v38 + 32);
    *(_BYTE *)(v38 + 80) = 1;
  }
  v41 = sub_10077970C(v39, v40, (double *)(v38 + 64));
  v42 = *(_QWORD *)(a6 + 16);
  v43 = *(double **)(v42 + 16);
  v44 = *(double **)(v42 + 24);
  if (!*(_BYTE *)(v42 + 80))
  {
    sub_100B7E7B0(v42, *(double **)(v42 + 24), v42 + 32);
    *(_OWORD *)(v42 + 64) = *(_OWORD *)*(_QWORD *)(v42 + 32);
    *(_BYTE *)(v42 + 80) = 1;
  }
  result = sub_10077970C(v43, v44, (double *)(v42 + 64));
  if (v33)
    _ZF = 1;
  else
    _ZF = (_DWORD)result * v28 == 1;
  v47 = !_ZF;
  if (v41 != v28 && v41 != v33 && (v33 | v28 || v41 == -1))
  {
    if ((_DWORD)result == 1)
      v62 = 2;
    else
      v62 = 1;
    *(_DWORD *)(a3 + 40) = v62;
    if (v33 == 1 || v28 == 1)
      v64 = 1;
    else
      v64 = 2;
    if (v47)
      v64 = 3;
    *(_DWORD *)(a3 + 120) = v64;
    if ((v47 & 1) == 0)
      goto LABEL_89;
    return result;
  }
  if (v37)
    v48 = 1;
  else
    v48 = v47;
  if ((v48 & 1) == 0)
  {
LABEL_72:
    v51 = 4;
    *(_DWORD *)(a3 + 40) = 4;
LABEL_108:
    *(_DWORD *)(a3 + 120) = v51;
    return result;
  }
  if (!v27)
  {
    *(_DWORD *)(a3 + 40) = 3;
    if ((_DWORD)result == 1)
      v65 = 2;
    else
      v65 = 1;
    if (v47)
      v51 = 3;
    else
      v51 = v65;
    goto LABEL_108;
  }
  if (v27 == v37 && (_DWORD)result * v27 != -1)
  {
    if ((_DWORD)result == 1)
      v49 = 1;
    else
      v49 = 2;
    *(_DWORD *)(a3 + 40) = v49;
    if ((_DWORD)result == 1)
      v50 = 2;
    else
      v50 = 1;
    if (v47)
      v51 = 3;
    else
      v51 = v50;
    goto LABEL_108;
  }
  if (!(v37 + (_DWORD)result))
  {
    if ((_DWORD)result == 1)
      v66 = 2;
    else
      v66 = 1;
    *(_DWORD *)(a3 + 40) = v66;
    if ((_DWORD)result == 1)
      v55 = 1;
    else
      v55 = 2;
LABEL_103:
    *(_DWORD *)(a3 + 120) = v55;
    *(_BYTE *)(a3 + 20) = 1;
    return result;
  }
  if (v27 == -(int)result)
  {
    if ((_DWORD)result == 1)
      v67 = 2;
    else
      v67 = 1;
    *(_DWORD *)(a3 + 40) = v67;
    *(_DWORD *)(a3 + 120) = v67;
    if (v47)
    {
      v51 = 3;
      goto LABEL_108;
    }
LABEL_89:
    *(_BYTE *)(a3 + 20) = 1;
  }
  return result;
}

double sub_100B7B3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  double *v26;
  double *v27;
  int v28;
  uint64_t v29;
  double *v30;
  double *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double v44;
  double v45;
  double result;

  v10 = *(double *)(a4 + 80);
  v11 = *(double *)(a4 + 136);
  if (vabdd_f64(v10, v11) >= 50.0)
  {
    v16 = v10 < v11;
  }
  else
  {
    v12 = *(double *)(a4 + 72);
    if (v12 == 0.0)
      sub_10191B9FC(a1, a2, a3);
    v13 = *(double *)(a4 + 128);
    if (v13 == 0.0)
      sub_10191BA20(a1, a2, a3);
    v14 = *(double *)(a4 + 64) / v12;
    v15 = *(double *)(a4 + 120) / v13;
    if (v14 == v15)
    {
      v16 = 0;
    }
    else if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
           || (*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      v16 = 1;
    }
    else
    {
      v17 = vabdd_f64(v14, v15);
      v18 = fabs(v14);
      v19 = fabs(v15);
      if (v18 < v19)
        v18 = v19;
      if (v18 >= 1.0)
        v20 = v18 * 2.22044605e-16;
      else
        v20 = 2.22044605e-16;
      v16 = v17 > v20;
    }
    if (v14 >= v15)
      v16 = 0;
  }
  *(_DWORD *)(a3 + 16) = 5;
  if (*(_QWORD *)a4 <= (unint64_t)v16)
    sub_10191B9D8(a1, a2, a3);
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v16 + 8);
  v21 = a4 + 56 * v16;
  v22 = *(_OWORD *)(v21 + 40);
  *(_QWORD *)(a3 + 104) = *(_QWORD *)(v21 + 56);
  *(_OWORD *)(a3 + 88) = v22;
  v23 = *(_OWORD *)(v21 + 64);
  *(_QWORD *)(a3 + 184) = *(_QWORD *)(v21 + 80);
  *(_OWORD *)(a3 + 168) = v23;
  v24 = *(_DWORD *)(a5 + 36);
  if (!v24)
    sub_10191BA44();
  v25 = *(_QWORD *)(a6 + 8);
  v26 = *(double **)(v25 + 16);
  v27 = *(double **)(v25 + 24);
  if (!*(_BYTE *)(v25 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 8), *(double **)(v25 + 24), v25 + 32);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)*(_QWORD *)(v25 + 32);
    *(_BYTE *)(v25 + 80) = 1;
  }
  v28 = sub_10077970C(v26, v27, (double *)(v25 + 64));
  v29 = *(_QWORD *)(a6 + 16);
  v30 = *(double **)(v29 + 16);
  v31 = *(double **)(v29 + 24);
  if (!*(_BYTE *)(v29 + 80))
  {
    sub_100B7E7B0(v29, *(double **)(v29 + 24), v29 + 32);
    *(_OWORD *)(v29 + 64) = *(_OWORD *)*(_QWORD *)(v29 + 32);
    *(_BYTE *)(v29 + 80) = 1;
  }
  v32 = sub_10077970C(v30, v31, (double *)(v29 + 64));
  v33 = v32;
  if (v24 == 1)
    v34 = v28;
  else
    v34 = v32;
  if (v34 * v24 == 1)
    v35 = 1;
  else
    v35 = 2;
  if (v34 * v24 == 1)
    v36 = 2;
  else
    v36 = 1;
  if (v34)
  {
    v37 = v36;
  }
  else
  {
    v35 = 4;
    v37 = 4;
  }
  *(_DWORD *)(a3 + 40) = v35;
  *(_DWORD *)(a3 + 120) = v37;
  if (v28)
  {
    v38 = *(double **)(a1 + 24);
    v39 = *(double *)a3;
    v40 = *(double *)(a3 + 8);
    v41 = *v38;
    v42 = v38[1];
  }
  else
  {
    if (!*(_BYTE *)(a1 + 80))
    {
      sub_100B7E7B0(a1, *(double **)(a1 + 24), a1 + 32);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)*(_QWORD *)(a1 + 32);
      *(_BYTE *)(a1 + 80) = 1;
    }
    v39 = *(double *)a3;
    v40 = *(double *)(a3 + 8);
    v41 = *(double *)(a1 + 64);
    v42 = *(double *)(a1 + 72);
  }
  *(double *)(a3 + 112) = (v40 - v42) * (v40 - v42) + (v39 - v41) * (v39 - v41);
  if (v33)
  {
    v43 = *(double **)(a2 + 24);
    v44 = *v43;
    v45 = v43[1];
  }
  else
  {
    if (!*(_BYTE *)(a2 + 80))
    {
      sub_100B7E7B0(a2, *(double **)(a2 + 24), a2 + 32);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)*(_QWORD *)(a2 + 32);
      *(_BYTE *)(a2 + 80) = 1;
      v39 = *(double *)a3;
      v40 = *(double *)(a3 + 8);
    }
    v44 = *(double *)(a2 + 64);
    v45 = *(double *)(a2 + 72);
  }
  result = (v40 - v45) * (v40 - v45) + (v39 - v44) * (v39 - v44);
  *(double *)(a3 + 192) = result;
  return result;
}

double sub_100B7B6A8(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD **a4, uint64_t a5, uint64_t a6)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[32];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  uint64_t v45;

  v9 = a3[11];
  *(_OWORD *)v44 = a3[10];
  *(_OWORD *)&v44[16] = v9;
  v45 = *((_QWORD *)a3 + 24);
  v10 = a3[7];
  *(_OWORD *)&v40[16] = a3[6];
  v41 = v10;
  v11 = a3[9];
  v42 = a3[8];
  v43 = v11;
  v12 = a3[3];
  v37 = a3[2];
  v38 = v12;
  v13 = a3[5];
  v39 = a3[4];
  *(_OWORD *)v40 = v13;
  v14 = a3[1];
  v35 = *a3;
  v36 = v14;
  v15 = *(_DWORD *)(a5 + 256);
  if (*(_DWORD *)(a5 + 252) != 1)
    goto LABEL_12;
  v16 = *(_QWORD *)(a6 + 8);
  v17 = *(double **)(v16 + 16);
  v18 = *(double **)(v16 + 24);
  if (!*(_BYTE *)(v16 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 8), *(double **)(v16 + 24), v16 + 32);
    *(_OWORD *)(v16 + 64) = *(_OWORD *)*(_QWORD *)(v16 + 32);
    *(_BYTE *)(v16 + 80) = 1;
  }
  v19 = sub_10077970C(v17, v18, (double *)(v16 + 64));
  switch((_DWORD)v19)
  {
    case 1:
      v22 = 2;
      break;
    case 0:
      goto LABEL_12;
    case 0xFFFFFFFF:
      v22 = 1;
      break;
    default:
      goto LABEL_10;
  }
  DWORD2(v37) = v22;
LABEL_10:
  DWORD2(v41) = 3;
  LODWORD(v36) = 5;
  if (*(_QWORD *)(a5 + 64) <= 1uLL)
    sub_10191B9D8(v19, v20, v21);
  v35 = *(_OWORD *)(a5 + 88);
  *(_OWORD *)&v40[8] = *(_OWORD *)(a5 + 160);
  v23 = *(_QWORD *)(a5 + 176);
  *(_OWORD *)&v44[8] = *(_OWORD *)(a5 + 184);
  v24 = *(_QWORD *)(a5 + 200);
  *(_QWORD *)&v40[24] = v23;
  *(_QWORD *)&v44[24] = v24;
  *(_QWORD *)&v14 = sub_100B7F820(*a4, (uint64_t)&v35).n128_u64[0];
LABEL_12:
  if (v15 != 1)
    return *(double *)&v14;
  v25 = *(_QWORD *)(a6 + 16);
  v26 = *(double **)(v25 + 16);
  v27 = *(double **)(v25 + 24);
  if (!*(_BYTE *)(v25 + 80))
  {
    sub_100B7E7B0(v25, *(double **)(v25 + 24), v25 + 32);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)*(_QWORD *)(v25 + 32);
    *(_BYTE *)(v25 + 80) = 1;
  }
  v28 = sub_10077970C(v26, v27, (double *)(v25 + 64));
  switch((_DWORD)v28)
  {
    case 1:
      v31 = 2;
      break;
    case 0:
      return *(double *)&v14;
    case 0xFFFFFFFF:
      v31 = 1;
      break;
    default:
      goto LABEL_21;
  }
  DWORD2(v41) = v31;
LABEL_21:
  DWORD2(v37) = 3;
  LODWORD(v36) = 5;
  if (!*(_QWORD *)(a5 + 64))
    sub_10191B9D8(v28, v29, v30);
  v35 = *(_OWORD *)(a5 + 72);
  *(_OWORD *)&v40[8] = *(_OWORD *)(a5 + 104);
  v32 = *(_QWORD *)(a5 + 120);
  *(_OWORD *)&v44[8] = *(_OWORD *)(a5 + 128);
  v33 = *(_QWORD *)(a5 + 144);
  *(_QWORD *)&v40[24] = v32;
  *(_QWORD *)&v44[24] = v33;
  *(_QWORD *)&v14 = sub_100B7F820(*a4, (uint64_t)&v35).n128_u64[0];
  return *(double *)&v14;
}

uint64_t sub_100B7B8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _BOOL4 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  double *v27;
  double *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double *v33;
  uint64_t result;
  int v35;
  BOOL v36;
  int v37;

  v8 = *(double *)(a4 + 80);
  v9 = *(double *)(a4 + 136);
  if (vabdd_f64(v8, v9) >= 50.0)
  {
    v14 = v8 < v9;
  }
  else
  {
    v10 = *(double *)(a4 + 72);
    if (v10 == 0.0)
      sub_10191B9FC(a1, a2, a3);
    v11 = *(double *)(a4 + 128);
    if (v11 == 0.0)
      sub_10191BA20(a1, a2, a3);
    v12 = *(double *)(a4 + 64) / v10;
    v13 = *(double *)(a4 + 120) / v11;
    if (v12 == v13)
    {
      v14 = 0;
    }
    else if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
           || (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      v14 = 1;
    }
    else
    {
      v15 = vabdd_f64(v12, v13);
      v16 = fabs(v12);
      v17 = fabs(v13);
      if (v16 < v17)
        v16 = v17;
      if (v16 >= 1.0)
        v18 = v16 * 2.22044605e-16;
      else
        v18 = 2.22044605e-16;
      v14 = v15 > v18;
    }
    if (v12 >= v13)
      v14 = 0;
  }
  *(_DWORD *)(a3 + 16) = 6;
  if (*(_QWORD *)a4 <= (unint64_t)v14)
    sub_10191B9D8(a1, a2, a3);
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v14 + 8);
  v19 = a4 + 56 * v14;
  v20 = *(_OWORD *)(v19 + 40);
  *(_QWORD *)(a3 + 104) = *(_QWORD *)(v19 + 56);
  *(_OWORD *)(a3 + 88) = v20;
  v21 = *(_OWORD *)(v19 + 64);
  *(_QWORD *)(a3 + 184) = *(_QWORD *)(v19 + 80);
  *(_OWORD *)(a3 + 168) = v21;
  v22 = *(_QWORD *)(a6 + 16);
  v23 = *(double **)(v22 + 24);
  if (!*(_BYTE *)(v22 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 16), *(double **)(v22 + 24), v22 + 32);
    *(_OWORD *)(v22 + 64) = *(_OWORD *)*(_QWORD *)(v22 + 32);
    *(_BYTE *)(v22 + 80) = 1;
  }
  v24 = *(_QWORD *)(a6 + 8);
  if (!*(_BYTE *)(v24 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 8), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(_QWORD *)(v24 + 32);
    *(_BYTE *)(v24 + 80) = 1;
  }
  v25 = sub_10077970C(v23, (double *)(v22 + 64), (double *)(v24 + 64));
  v26 = *(_QWORD *)(a6 + 8);
  v27 = *(double **)(v26 + 16);
  v28 = *(double **)(v26 + 24);
  if (!*(_BYTE *)(v26 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 8), *(double **)(v26 + 24), v26 + 32);
    *(_OWORD *)(v26 + 64) = *(_OWORD *)*(_QWORD *)(v26 + 32);
    *(_BYTE *)(v26 + 80) = 1;
  }
  v29 = sub_10077970C(v27, v28, (double *)(v26 + 64));
  v30 = *(_QWORD *)(a6 + 8);
  v31 = *(_QWORD *)(a6 + 16);
  v33 = *(double **)(v30 + 16);
  v32 = *(double **)(v30 + 24);
  if (!*(_BYTE *)(v31 + 80))
  {
    sub_100B7E7B0(v31, *(double **)(v31 + 24), v31 + 32);
    *(_OWORD *)(v31 + 64) = *(_OWORD *)*(_QWORD *)(v31 + 32);
    *(_BYTE *)(v31 + 80) = 1;
  }
  result = sub_10077970C(v33, v32, (double *)(v31 + 64));
  if (v25 || v29 != (_DWORD)result)
  {
    if ((_DWORD)result * v29 == -1)
      v36 = v29 == -1;
    else
      v36 = v25 == -1;
    if (v36)
      v37 = 2;
    else
      v37 = 1;
    *(_DWORD *)(a3 + 40) = v37;
    if (v36)
      v35 = 1;
    else
      v35 = 2;
  }
  else
  {
    v35 = 4;
    *(_DWORD *)(a3 + 40) = 4;
  }
  *(_DWORD *)(a3 + 120) = v35;
  return result;
}

void sub_100B7BB50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  BOOL v39;
  char v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  char v58;
  char v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  int v67;
  int v68;
  double v69;
  int v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int16 v83;
  int v84;
  unint64_t v85;
  BOOL v86;
  double v88;
  double v89;
  double v90;
  unint64_t v91;
  BOOL v92;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  int v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  char *v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  char *v118;
  unsigned __int8 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  double v124;
  uint64_t v125;
  char *v126;
  double v127;
  double v128;
  double v129;
  double v130;
  uint64_t v131;
  char *v132;
  double v133;
  double v134;
  double v135;
  double v136;
  uint64_t v137;
  char *v138;
  double v139;
  double v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  unsigned int v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  unsigned int v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  uint64_t v188;
  char *v189;
  double v190;
  double v191;
  double v192;
  uint64_t v193;
  char *v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  int v201;
  double v202;
  double v203;
  double v204;
  int v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  uint64_t v232;
  char *v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  double v238;
  double v239;
  double v240;
  double v241;
  int v242;
  double v243;
  __int128 v244;
  double v245;
  __int128 v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  __int128 v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  unint64_t v262;
  unint64_t v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  _QWORD *v276[2];
  uint64_t v277[2];
  char v278;
  double v279;
  double v280;
  double v281;
  __int128 v282;
  __int128 v283;
  _BYTE v284[32];
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  _OWORD v291[3];

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD **)(a2 + 16);
  v6 = *(_QWORD **)(a2 + 24);
  v277[0] = v5;
  v277[1] = v4;
  v276[0] = v7;
  v276[1] = v6;
  v8 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)&v282 = *(_QWORD *)v5;
  v278 = 0;
  *(_QWORD *)&v291[0] = v8;
  sub_100778A68((double *)&v282, (double *)v291, 1);
  v9 = *(double *)&v282;
  v10 = *(double *)v291;
  v11 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)&v282 = *(_QWORD *)v4;
  *(_QWORD *)&v291[0] = v11;
  sub_100778A68((double *)&v282, (double *)v291, 1);
  if (v9 != *(double *)&v282)
  {
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((unint64_t)v282 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_21;
    }
    v13 = vabdd_f64(v9, *(double *)&v282);
    v14 = fabs(v9);
    v15 = fabs(*(double *)&v282);
    if (v14 >= v15)
      v15 = v14;
    v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v13 > v16)
      goto LABEL_21;
  }
  if (v10 == *(double *)v291)
    goto LABEL_3;
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v291[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_21;
  }
  v17 = vabdd_f64(v10, *(double *)v291);
  v18 = fabs(v10);
  v19 = fabs(*(double *)v291);
  if (v18 >= v19)
    v19 = v18;
  v20 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
  if (v17 <= v20)
LABEL_3:
    v12 = 1;
  else
LABEL_21:
    v12 = 0;
  v21 = v7[1];
  *(_QWORD *)&v282 = *v7;
  *(_QWORD *)&v291[0] = v21;
  sub_100778A68((double *)&v282, (double *)v291, 1);
  v22 = *(double *)&v282;
  v23 = *(double *)v291;
  v24 = v6[1];
  *(_QWORD *)&v282 = *v6;
  *(_QWORD *)&v291[0] = v24;
  sub_100778A68((double *)&v282, (double *)v291, 1);
  if (v22 != *(double *)&v282)
  {
    if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((unint64_t)v282 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_51;
    }
    v31 = vabdd_f64(v22, *(double *)&v282);
    v32 = fabs(v22);
    v33 = fabs(*(double *)&v282);
    if (v32 >= v33)
      v33 = v32;
    v34 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
    if (v31 > v34)
      goto LABEL_51;
  }
  if (v23 == *(double *)v291)
  {
    if (v12)
      goto LABEL_25;
    v39 = 1;
  }
  else
  {
    if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v291[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
LABEL_51:
      v39 = 0;
      goto LABEL_53;
    }
    v35 = vabdd_f64(v23, *(double *)v291);
    v36 = fabs(v23);
    v37 = fabs(*(double *)v291);
    if (v36 >= v37)
      v37 = v36;
    if (v37 >= 1.0)
      v38 = v37 * 2.22044605e-16;
    else
      v38 = 2.22044605e-16;
    v39 = v35 <= v38;
    if (v35 <= v38)
      v40 = v12;
    else
      v40 = 0;
    if ((v40 & 1) != 0)
    {
LABEL_25:
      v25 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)&v282 = *(_QWORD *)v5;
      *(_QWORD *)&v291[0] = v25;
      sub_100778A68((double *)&v282, (double *)v291, 1);
      v26 = *(double *)&v282;
      v27 = *(double *)v291;
      v28 = v6[1];
      *(_QWORD *)&v282 = *v6;
      *(_QWORD *)&v291[0] = v28;
      sub_100778A68((double *)&v282, (double *)v291, 1);
      if (v26 != *(double *)&v282)
      {
        if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v282 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_180;
        }
        v110 = vabdd_f64(v26, *(double *)&v282);
        v111 = fabs(v26);
        v112 = fabs(*(double *)&v282);
        if (v111 >= v112)
          v112 = v111;
        v113 = v112 >= 1.0 ? v112 * 2.22044605e-16 : 2.22044605e-16;
        if (v110 > v113)
          goto LABEL_180;
      }
      if (v27 != *(double *)v291)
      {
        if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v291[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_180;
        }
        v133 = vabdd_f64(v27, *(double *)v291);
        v134 = fabs(v27);
        v135 = fabs(*(double *)v291);
        if (v134 >= v135)
          v135 = v134;
        v136 = v135 >= 1.0 ? v135 * 2.22044605e-16 : 2.22044605e-16;
        if (v133 > v136)
        {
LABEL_180:
          *(_QWORD *)&v282 = 0;
          v137 = 40;
          do
          {
            v138 = (char *)&v282 + v137;
            *(_OWORD *)v138 = xmmword_101C16BA0;
            *((_QWORD *)v138 + 2) = 0;
            *((_QWORD *)v138 + 3) = 0;
            *((_OWORD *)v138 + 2) = xmmword_101BAFDC0;
            v138[48] = 0;
            v137 += 56;
          }
          while (v138 + 56 != (char *)v291);
          goto LABEL_457;
        }
      }
      v29 = 40;
      do
      {
        v30 = (char *)&v282 + v29;
        *(_OWORD *)v30 = xmmword_101C16BA0;
        *((_QWORD *)v30 + 2) = 0;
        *((_QWORD *)v30 + 3) = 0;
        *((_OWORD *)v30 + 2) = xmmword_101BAFDC0;
        v30[48] = 0;
        v29 += 56;
      }
      while (v30 + 56 != (char *)v291);
      goto LABEL_71;
    }
  }
LABEL_53:
  v273 = sub_100B7D820((double *)v5);
  v274 = v41;
  v275 = v42;
  v270 = sub_100B7D820((double *)v4);
  v271 = v43;
  v272 = v44;
  v267 = sub_100B7D820((double *)v7);
  v268 = v45;
  v269 = v46;
  v47 = sub_100B7D820((double *)v6);
  v264 = v47;
  v265 = v48;
  v266 = v49;
  v262 = 0;
  v263 = 0;
  v50 = v268;
  v51 = v269;
  v52 = v268 * v49 - v269 * v48;
  v53 = v267;
  v54 = v269 * v47 - v267 * v49;
  v55 = v267 * v48 - v268 * v47;
  v259 = v52;
  v260 = v54;
  v261 = v55;
  v258 = 0.0;
  if (v39)
  {
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 1;
    goto LABEL_57;
  }
  v60 = 1.0 - (v49 * v269 + v268 * v48 + v267 * v47);
  v258 = v60;
  if (v60 == 0.0)
    goto LABEL_56;
  v85 = COERCE__INT64(fabs(1.0 - (v49 * v269 + v268 * v48 + v267 * v47))) - 1;
  v86 = (unint64_t)(COERCE__INT64(fabs(1.0 - (v49 * v269 + v268 * v48 + v267 * v47))) - 0x10000000000000) >> 53 > 0x3FE
     && v85 > 0xFFFFFFFFFFFFELL;
  if (!v86 || *(_QWORD *)&v60 == 0)
  {
    v88 = fabs(v60);
    v89 = 2.22044605e-16;
    if (v88 >= 1.0)
      v89 = v88 * 2.22044605e-16;
    if (v88 <= v89)
    {
LABEL_56:
      v56 = 0;
      v57 = 0;
      v258 = 0.0;
      v59 = 1;
      v58 = 1;
      goto LABEL_57;
    }
  }
  v90 = v55 * v275 + v54 * v274 + v52 * v273;
  if (v90 == 0.0)
    goto LABEL_85;
  if (COERCE_UNSIGNED_INT64(fabs(v55 * v275 + v54 * v274 + v52 * v273)) >= 0x7FF0000000000000)
  {
    if (v90 > 0.0)
      v57 = 1;
    else
      v57 = -1;
  }
  else
  {
    v163 = fabs(v90);
    v164 = 2.22044605e-16;
    if (v163 >= 1.0)
      v164 = v163 * 2.22044605e-16;
    if (v90 > 0.0)
      v57 = 1;
    else
      v57 = -1;
    if (v163 <= v164)
LABEL_85:
      v57 = 0;
  }
  v185 = v55 * v272 + v54 * v271 + v52 * v270;
  if (v185 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(v55 * v272 + v54 * v271 + v52 * v270)) >= 0x7FF0000000000000)
    {
      if (v185 > 0.0)
        v56 = 1;
      else
        v56 = -1;
      goto LABEL_312;
    }
    v186 = fabs(v185);
    v187 = 2.22044605e-16;
    if (v186 >= 1.0)
      v187 = v186 * 2.22044605e-16;
    if (v185 > 0.0)
      v56 = 1;
    else
      v56 = -1;
    if (v186 > v187)
      goto LABEL_312;
  }
  v56 = 0;
LABEL_312:
  v262 = __PAIR64__(v56, v57);
  if (v56 * v57 == 1)
  {
    *(_QWORD *)&v282 = 0;
    v188 = 40;
    do
    {
      v189 = (char *)&v282 + v188;
      *(_OWORD *)v189 = xmmword_101C16BA0;
      *((_QWORD *)v189 + 2) = 0;
      *((_QWORD *)v189 + 3) = 0;
      *((_OWORD *)v189 + 2) = xmmword_101BAFDC0;
      v189[48] = 0;
      v188 += 56;
    }
    while (v189 + 56 != (char *)v291);
    goto LABEL_457;
  }
  v59 = 0;
  v58 = 0;
LABEL_57:
  v62 = v274;
  v61 = v275;
  v63 = v273;
  v64 = v274 * v272 - v275 * v271;
  v65 = v275 * v270 - v273 * v272;
  v66 = v273 * v271 - v274 * v270;
  v255 = v64;
  v256 = v65;
  v257 = v66;
  *((_QWORD *)&v254 + 1) = 0;
  if ((v12 & 1) != 0)
  {
    v67 = 0;
    v68 = 0;
    goto LABEL_61;
  }
  v69 = 1.0 - (v272 * v275 + v274 * v271 + v273 * v270);
  *((double *)&v254 + 1) = v69;
  if (v69 == 0.0)
    goto LABEL_60;
  v91 = COERCE__INT64(fabs(1.0 - (v272 * v275 + v274 * v271 + v273 * v270))) - 1;
  v92 = (unint64_t)(COERCE__INT64(fabs(1.0 - (v272 * v275 + v274 * v271 + v273 * v270))) - 0x10000000000000) >> 53 > 0x3FE
     && v91 > 0xFFFFFFFFFFFFELL;
  if (!v92 || *(_QWORD *)&v69 == 0)
  {
    v94 = fabs(v69);
    v95 = 2.22044605e-16;
    if (v94 >= 1.0)
      v95 = v94 * 2.22044605e-16;
    if (v94 <= v95)
    {
LABEL_60:
      v67 = 0;
      v68 = 0;
      *((_QWORD *)&v254 + 1) = 0;
      v58 = 1;
      goto LABEL_61;
    }
  }
  v96 = v269 * v66 + v65 * v268 + v64 * v267;
  if (v96 == 0.0)
    goto LABEL_98;
  if (COERCE_UNSIGNED_INT64(fabs(v269 * v66 + v65 * v268 + v64 * v267)) >= 0x7FF0000000000000)
  {
    if (v96 > 0.0)
      v68 = 1;
    else
      v68 = -1;
  }
  else
  {
    v165 = fabs(v96);
    v166 = 2.22044605e-16;
    if (v165 >= 1.0)
      v166 = v165 * 2.22044605e-16;
    if (v96 > 0.0)
      v68 = 1;
    else
      v68 = -1;
    if (v165 <= v166)
LABEL_98:
      v68 = 0;
  }
  v190 = v49 * v66 + v65 * v48 + v64 * v47;
  if (v190 != 0.0)
  {
    if ((*(_QWORD *)&v190 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v190 > 0.0)
        v67 = 1;
      else
        v67 = -1;
      goto LABEL_333;
    }
    v191 = fabs(v190);
    v192 = 2.22044605e-16;
    if (v191 >= 1.0)
      v192 = v191 * 2.22044605e-16;
    if (v190 > 0.0)
      v67 = 1;
    else
      v67 = -1;
    if (v191 > v192)
      goto LABEL_333;
  }
  v67 = 0;
LABEL_333:
  v263 = __PAIR64__(v67, v68);
  if (v67 * v68 == 1)
  {
    *(_QWORD *)&v282 = 0;
    v193 = 40;
    do
    {
      v194 = (char *)&v282 + v193;
      *(_OWORD *)v194 = xmmword_101C16BA0;
      *((_QWORD *)v194 + 2) = 0;
      *((_QWORD *)v194 + 3) = 0;
      *((_OWORD *)v194 + 2) = xmmword_101BAFDC0;
      v194[48] = 0;
      v193 += 56;
    }
    while (v194 + 56 != (char *)v291);
    goto LABEL_457;
  }
  v195 = sqrt(v66 * v66 + v65 * v65 + v64 * v64);
  if (v195 != 0.0)
  {
    if (*(_QWORD *)&v195 >> 52 > 0x7FEuLL)
      goto LABEL_345;
    v196 = fabs(v195);
    v197 = 2.22044605e-16;
    if (v196 >= 1.0)
      v197 = v196 * 2.22044605e-16;
    if (v196 > v197)
    {
LABEL_345:
      v70 = 0;
      v64 = v64 / v195;
      v65 = v65 / v195;
      v255 = v64;
      v256 = v65;
      v66 = v66 / v195;
      v257 = v66;
      if ((v59 & 1) == 0)
        goto LABEL_62;
LABEL_66:
      if (!v70)
      {
        v84 = 1;
        goto LABEL_104;
      }
      v72 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)&v282 = *(_QWORD *)v5;
      *(_QWORD *)&v291[0] = v72;
      sub_100778A68((double *)&v282, (double *)v291, 1);
      v73 = *(double *)&v282;
      v74 = *(double *)v291;
      v75 = v6[1];
      *(_QWORD *)&v282 = *v6;
      *(_QWORD *)&v291[0] = v75;
      sub_100778A68((double *)&v282, (double *)v291, 1);
      if (v73 != *(double *)&v282)
      {
        if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v282 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_169;
        }
        v106 = vabdd_f64(v73, *(double *)&v282);
        v107 = fabs(v73);
        v108 = fabs(*(double *)&v282);
        if (v107 >= v108)
          v108 = v107;
        v109 = v108 >= 1.0 ? v108 * 2.22044605e-16 : 2.22044605e-16;
        if (v106 > v109)
          goto LABEL_169;
      }
      if (v74 != *(double *)v291)
      {
        if ((*(_QWORD *)&v74 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v291[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_169;
        }
        v127 = vabdd_f64(v74, *(double *)v291);
        v128 = fabs(v74);
        v129 = fabs(*(double *)v291);
        if (v128 >= v129)
          v129 = v128;
        v130 = v129 >= 1.0 ? v129 * 2.22044605e-16 : 2.22044605e-16;
        if (v127 > v130)
        {
LABEL_169:
          *(_QWORD *)&v282 = 0;
          v131 = 40;
          do
          {
            v132 = (char *)&v282 + v131;
            *(_OWORD *)v132 = xmmword_101C16BA0;
            *((_QWORD *)v132 + 2) = 0;
            *((_QWORD *)v132 + 3) = 0;
            *((_OWORD *)v132 + 2) = xmmword_101BAFDC0;
            v132[48] = 0;
            v131 += 56;
          }
          while (v132 + 56 != (char *)v291);
          goto LABEL_457;
        }
      }
      v76 = 40;
      do
      {
        v77 = (char *)&v282 + v76;
        *(_OWORD *)v77 = xmmword_101C16BA0;
        *((_QWORD *)v77 + 2) = 0;
        *((_QWORD *)v77 + 3) = 0;
        *((_OWORD *)v77 + 2) = xmmword_101BAFDC0;
        v77[48] = 0;
        v76 += 56;
      }
      while (v77 + 56 != (char *)v291);
LABEL_71:
      *(_QWORD *)&v282 = 1;
      *((_QWORD *)&v282 + 1) = *(_QWORD *)v277[0];
      *(_QWORD *)&v283 = *(_QWORD *)(v277[0] + 8);
      memset((char *)v291 + 2, 0, 40);
      v78 = v288;
      *(_OWORD *)(a3 + 96) = v287;
      *(_OWORD *)(a3 + 112) = v78;
      *(_OWORD *)(a3 + 128) = v289;
      v79 = *(_OWORD *)&v284[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v284;
      *(_OWORD *)(a3 + 48) = v79;
      v80 = v286;
      *(_OWORD *)(a3 + 64) = v285;
      *(_OWORD *)(a3 + 80) = v80;
      v81 = v283;
      *(_OWORD *)a3 = v282;
      *(_OWORD *)(a3 + 16) = v81;
      v82 = v291[1];
      *(_OWORD *)(a3 + 154) = v291[0];
      *(_QWORD *)(a3 + 144) = v290;
      v83 = 48;
LABEL_458:
      *(_WORD *)(a3 + 152) = v83;
LABEL_459:
      *(_OWORD *)(a3 + 170) = v82;
      *(_OWORD *)(a3 + 180) = *(_OWORD *)((char *)&v291[1] + 10);
      return;
    }
  }
  if (!v57 || !v56)
  {
    v56 = 0;
    v57 = 0;
    v262 = 0;
  }
LABEL_61:
  v70 = 1;
  if ((v59 & 1) != 0)
    goto LABEL_66;
LABEL_62:
  v71 = sqrt(v55 * v55 + v54 * v54 + v52 * v52);
  if (v71 == 0.0)
    goto LABEL_64;
  if (*(_QWORD *)&v71 >> 52 <= 0x7FEuLL)
  {
    v97 = fabs(v71);
    v98 = 2.22044605e-16;
    if (v97 >= 1.0)
      v98 = v97 * 2.22044605e-16;
    if (v97 <= v98)
    {
LABEL_64:
      if (!v68 || !v67)
      {
        v67 = 0;
        v68 = 0;
        v263 = 0;
      }
      goto LABEL_66;
    }
  }
  v84 = 0;
  v52 = v52 / v71;
  v54 = v54 / v71;
  v259 = v52;
  v260 = v54;
  v55 = v55 / v71;
  v261 = v55;
LABEL_104:
  v99 = v68 | v67;
  if (!(v57 | v56))
  {
    if (!v99)
      goto LABEL_137;
    v105 = (char *)&v263 + 4;
    LODWORD(v263) = 0;
LABEL_136:
    *(_DWORD *)v105 = 0;
LABEL_137:
    v100 = v66 * v55 + v65 * v54 + v64 * v52;
    if (!v70)
    {
LABEL_108:
      if (v84)
      {
        v248 = 0.0;
        if (sub_100B7D950((double *)v5, (double *)v4, (double *)v7, (uint64_t)v6, &v273, (uint64_t)&v270, &v255, &v267, &v264, (double *)&v254 + 1, &v248, v58))
        {
          v102 = v248;
          v103 = *((double *)&v254 + 1);
          v279 = v248;
          v280 = *((double *)&v254 + 1);
          if (*((double *)&v254 + 1) < 0.0)
          {
            v102 = -v248;
            v103 = -*((double *)&v254 + 1);
            v279 = -v248;
            v280 = -*((double *)&v254 + 1);
          }
          v104 = 0.0;
          if (v103 != 0.0)
            v104 = v102 * 1000000.0 / v103;
          v281 = v104;
          sub_100B7E958(v276, (uint64_t)&v279, 0, a3);
          return;
        }
        *(_QWORD *)&v282 = 0;
        v143 = 40;
        do
        {
          v144 = (char *)&v282 + v143;
          *(_OWORD *)v144 = xmmword_101C16BA0;
          *((_QWORD *)v144 + 2) = 0;
          *((_QWORD *)v144 + 3) = 0;
          *((_OWORD *)v144 + 2) = xmmword_101BAFDC0;
          v144[48] = 0;
          v143 += 56;
        }
        while (v144 + 56 != (char *)v291);
LABEL_457:
        memset((char *)v291 + 2, 0, 40);
        v234 = v288;
        *(_OWORD *)(a3 + 96) = v287;
        *(_OWORD *)(a3 + 112) = v234;
        *(_OWORD *)(a3 + 128) = v289;
        v235 = *(_OWORD *)&v284[16];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)v284;
        *(_OWORD *)(a3 + 48) = v235;
        v236 = v286;
        *(_OWORD *)(a3 + 64) = v285;
        *(_OWORD *)(a3 + 80) = v236;
        v237 = v283;
        *(_OWORD *)a3 = v282;
        *(_OWORD *)(a3 + 16) = v237;
        v82 = v291[1];
        *(_OWORD *)(a3 + 154) = v291[0];
        *(_QWORD *)(a3 + 144) = v290;
        v83 = 100;
        goto LABEL_458;
      }
      v252 = 0.0;
      v253 = 0.0;
      v251 = 0.0;
      if ((v53 * -v62 + v63 * v50) * v66 + v65 * (v51 * -v63 + v61 * v53) + v64 * (v50 * -v61 + v62 * v51) >= 0.0)
        v124 = 1.0 - (v51 * v61 + v62 * v50 + v63 * v53);
      else
        v124 = -(1.0 - (v51 * v61 + v62 * v50 + v63 * v53));
      if (v124 <= -2.0)
        v124 = v124 + 4.0;
      *(double *)&v254 = v124;
      if (sub_100B7EC04((double *)&v254, (double *)v5, (double *)v7))
      {
        *(_QWORD *)&v254 = 0;
      }
      else
      {
        *(double *)&v282 = *((double *)&v254 + 1) - *(double *)&v254;
        if (sub_100B7EC04((double *)&v282, (double *)v4, (double *)v7))
          *(_QWORD *)&v254 = *((_QWORD *)&v254 + 1);
      }
      v145 = 1.0 - (v266 * v275 + v274 * v265 + v273 * v264);
      if ((v273 * v265 - v274 * v264) * v257 + v256 * (v275 * v264 - v273 * v266) + v255 * (v274 * v266 - v275 * v265) < 0.0)
        v145 = -v145;
      if (v145 <= -2.0)
        v145 = v145 + 4.0;
      v253 = v145;
      if (sub_100B7EC04(&v253, (double *)v5, (double *)v6))
      {
        v253 = 0.0;
      }
      else
      {
        *(double *)&v282 = *((double *)&v254 + 1) - v253;
        if (sub_100B7EC04((double *)&v282, (double *)v4, (double *)v6))
          v253 = *((double *)&v254 + 1);
      }
      v146 = 1.0 - (v275 * v269 + v268 * v274 + v267 * v273);
      if ((v267 * v274 - v268 * v273) * v261 + v260 * (v269 * v273 - v267 * v275) + v259 * (v268 * v275 - v269 * v274) < 0.0)
        v146 = -v146;
      if (v146 <= -2.0)
        v146 = v146 + 4.0;
      v252 = v146;
      if (sub_100B7EC04(&v252, (double *)v7, (double *)v5))
      {
        v252 = 0.0;
      }
      else
      {
        *(double *)&v282 = v258 - v252;
        if (sub_100B7EC04((double *)&v282, (double *)v6, (double *)v5))
          v252 = v258;
      }
      v147 = 1.0 - (v272 * v269 + v268 * v271 + v267 * v270);
      if ((v267 * v271 - v268 * v270) * v261 + v260 * (v269 * v270 - v267 * v272) + v259 * (v268 * v272 - v269 * v271) < 0.0)
        v147 = -v147;
      if (v147 <= -2.0)
        v147 = v147 + 4.0;
      v251 = v147;
      if (sub_100B7EC04(&v251, (double *)v7, (double *)v4))
      {
        v251 = 0.0;
      }
      else
      {
        *(double *)&v282 = v258 - v251;
        if (sub_100B7EC04((double *)&v282, (double *)v6, (double *)v4))
        {
          v148 = v258;
          v251 = v258;
          goto LABEL_222;
        }
      }
      v148 = v258;
LABEL_222:
      v279 = v252;
      v280 = v148;
      v149 = v252;
      v150 = v148;
      if (v148 < 0.0)
      {
        v149 = -v252;
        v150 = -v148;
        v279 = -v252;
        v280 = -v148;
      }
      v151 = 0.0;
      if (v150 != 0.0)
        v151 = v149 * 1000000.0 / v150;
      v281 = v151;
      v248 = v251;
      v249 = v148;
      v152 = v251;
      v153 = v148;
      if (v148 < 0.0)
      {
        v152 = -v251;
        v153 = -v148;
        v248 = -v251;
        v249 = -v148;
      }
      v154 = 0.0;
      if (v153 != 0.0)
        v154 = v152 * 1000000.0 / v153;
      v250 = v154;
      v155 = *((double *)&v254 + 1);
      v246 = v254;
      v157 = *((double *)&v254 + 1);
      v156 = *(double *)&v254;
      if (*((double *)&v254 + 1) < 0.0)
      {
        v156 = -*(double *)&v254;
        v157 = -*((double *)&v254 + 1);
        *(double *)&v246 = -*(double *)&v254;
        *((double *)&v246 + 1) = -*((double *)&v254 + 1);
      }
      v158 = 0.0;
      if (v157 != 0.0)
        v158 = v156 * 1000000.0 / v157;
      v247 = v158;
      *(double *)&v244 = v253;
      *((_QWORD *)&v244 + 1) = *((_QWORD *)&v254 + 1);
      v159 = v253;
      v160 = *((double *)&v254 + 1);
      if (*((double *)&v254 + 1) < 0.0)
      {
        v159 = -v253;
        v160 = -*((double *)&v254 + 1);
        *(double *)&v244 = -v253;
        *((double *)&v244 + 1) = -*((double *)&v254 + 1);
      }
      v161 = 0.0;
      if (v160 != 0.0)
        v161 = v159 * 1000000.0 / v160;
      v245 = v161;
      if (*(double *)&v254 == 0.0
        || ((unint64_t)v254 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((v167 = vabdd_f64(0.0, *(double *)&v254), v168 = fmax(fabs(*(double *)&v254), 0.0), v168 >= 1.0)
          ? (v169 = v168 * 2.22044605e-16)
          : (v169 = 2.22044605e-16),
            v167 <= v169))
      {
        v162 = 1;
        goto LABEL_263;
      }
      if (v253 == 0.0
        || (*(_QWORD *)&v253 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((v198 = vabdd_f64(0.0, v253), v199 = fmax(fabs(v253), 0.0), v199 >= 1.0)
          ? (v200 = v199 * 2.22044605e-16)
          : (v200 = 2.22044605e-16),
            v198 <= v200))
      {
        v162 = 3;
        goto LABEL_263;
      }
      if (*(double *)&v254 >= v253)
      {
        if (*(double *)&v254 >= 0.0)
        {
          if (v253 <= 0.0)
            v162 = 2;
          else
            v162 = 4;
LABEL_263:
          if (*((double *)&v254 + 1) == *(double *)&v254)
          {
LABEL_264:
            v170 = 1;
            goto LABEL_367;
          }
          if ((*((_QWORD *)&v254 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            if (*((double *)&v254 + 1) != v253)
              goto LABEL_281;
          }
          else
          {
            if (((unint64_t)v254 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              v171 = vabdd_f64(*((double *)&v254 + 1), *(double *)&v254);
              v172 = fabs(*((double *)&v254 + 1));
              v173 = fabs(*(double *)&v254);
              if (v172 < v173)
                v172 = v173;
              v174 = v172 >= 1.0 ? v172 * 2.22044605e-16 : 2.22044605e-16;
              if (v171 <= v174)
                goto LABEL_264;
            }
            if (*((double *)&v254 + 1) != v253)
            {
              if ((*(_QWORD *)&v253 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                goto LABEL_281;
              v175 = vabdd_f64(*((double *)&v254 + 1), v253);
              v176 = fabs(*((double *)&v254 + 1));
              v177 = fabs(v253);
              if (v176 < v177)
                v176 = v177;
              v178 = v176 >= 1.0 ? v176 * 2.22044605e-16 : 2.22044605e-16;
              if (v175 > v178)
              {
LABEL_281:
                if (*(double *)&v254 >= v253)
                {
                  if (*((double *)&v254 + 1) <= *(double *)&v254)
                  {
                    if (*((double *)&v254 + 1) >= v253)
                      v170 = 2;
                    else
                      v170 = 4;
                    goto LABEL_367;
                  }
                }
                else if (*((double *)&v254 + 1) >= *(double *)&v254)
                {
                  if (*((double *)&v254 + 1) <= v253)
                    v170 = 2;
                  else
                    v170 = 4;
                  goto LABEL_367;
                }
                v170 = 0;
LABEL_367:
                if (v252 == 0.0
                  || (*(_QWORD *)&v252 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && ((v202 = vabdd_f64(0.0, v252), v203 = fmax(fabs(v252), 0.0), v203 >= 1.0)
                    ? (v204 = v203 * 2.22044605e-16)
                    : (v204 = 2.22044605e-16),
                      v202 <= v204))
                {
                  v201 = 1;
                  goto LABEL_376;
                }
                if (v251 == 0.0
                  || (*(_QWORD *)&v251 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && ((v214 = vabdd_f64(0.0, v251), v215 = fmax(fabs(v251), 0.0), v215 >= 1.0)
                    ? (v216 = v215 * 2.22044605e-16)
                    : (v216 = 2.22044605e-16),
                      v214 <= v216))
                {
                  v201 = 3;
                  goto LABEL_376;
                }
                if (v252 >= v251)
                {
                  if (v252 >= 0.0)
                  {
                    if (v251 <= 0.0)
                      v201 = 2;
                    else
                      v201 = 4;
LABEL_376:
                    if (v148 == v252)
                    {
LABEL_377:
                      v205 = 1;
                      goto LABEL_418;
                    }
                    if ((*(_QWORD *)&v148 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                    {
                      if (v148 != v251)
                        goto LABEL_394;
                    }
                    else
                    {
                      if ((*(_QWORD *)&v252 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                      {
                        v206 = vabdd_f64(v148, v252);
                        v207 = fabs(v148);
                        v208 = fabs(v252);
                        if (v207 < v208)
                          v207 = v208;
                        v209 = v207 >= 1.0 ? v207 * 2.22044605e-16 : 2.22044605e-16;
                        if (v206 <= v209)
                          goto LABEL_377;
                      }
                      if (v148 != v251)
                      {
                        if ((*(_QWORD *)&v251 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                          goto LABEL_394;
                        v210 = vabdd_f64(v148, v251);
                        v211 = fabs(v148);
                        v212 = fabs(v251);
                        if (v211 < v212)
                          v211 = v212;
                        v213 = v211 >= 1.0 ? v211 * 2.22044605e-16 : 2.22044605e-16;
                        if (v210 > v213)
                        {
LABEL_394:
                          if (v252 >= v251)
                          {
                            if (v148 <= v252)
                            {
                              if (v148 >= v251)
                                v205 = 2;
                              else
                                v205 = 4;
LABEL_418:
                              if (v162 == 3)
                              {
                                v279 = v148;
                                v280 = v148;
                                v224 = v148;
                                if (v148 < 0.0)
                                {
                                  v224 = -v148;
                                  v279 = -v148;
                                  v280 = -v148;
                                }
                                v225 = 0.0;
                                v226 = 0.0;
                                if (v224 != 0.0)
                                  v226 = v224 * 1000000.0 / v224;
                                v281 = v226;
                                *(_QWORD *)&v244 = 0;
                                v227 = *((double *)&v254 + 1);
                                *((_QWORD *)&v244 + 1) = *((_QWORD *)&v254 + 1);
                                if (*((double *)&v254 + 1) < 0.0)
                                {
                                  *(_QWORD *)&v244 = 0x8000000000000000;
                                  v227 = -*((double *)&v254 + 1);
                                  *((double *)&v244 + 1) = -*((double *)&v254 + 1);
                                  v225 = -0.0;
                                }
                                v228 = v225 / v227;
                                if (v227 == 0.0)
                                  v228 = 0.0;
                                v245 = v228;
                              }
                              else if (v162 == 1)
                              {
                                v279 = 0.0;
                                v280 = v148;
                                v217 = 0.0;
                                v218 = 0.0;
                                v219 = v148;
                                if (v148 < 0.0)
                                {
                                  v279 = -0.0;
                                  v219 = -v148;
                                  v280 = -v148;
                                  v218 = -0.0;
                                }
                                v220 = v218 / v219;
                                if (v219 == 0.0)
                                  v221 = 0.0;
                                else
                                  v221 = v220;
                                v281 = v221;
                                *(_QWORD *)&v246 = 0;
                                *((_QWORD *)&v246 + 1) = *((_QWORD *)&v254 + 1);
                                v222 = *((double *)&v254 + 1);
                                if (*((double *)&v254 + 1) < 0.0)
                                {
                                  *(_QWORD *)&v246 = 0x8000000000000000;
                                  v222 = -*((double *)&v254 + 1);
                                  *((double *)&v246 + 1) = -*((double *)&v254 + 1);
                                  v217 = -0.0;
                                }
                                v223 = v217 / v222;
                                if (v222 == 0.0)
                                  v223 = 0.0;
                                v247 = v223;
                              }
                              if (v170 == 3)
                              {
                                v248 = v148;
                                v249 = v148;
                                if (v148 < 0.0)
                                {
                                  v148 = -v148;
                                  v248 = v148;
                                  v249 = v148;
                                }
                                v230 = 0.0;
                                if (v148 != 0.0)
                                  v230 = v148 * 1000000.0 / v148;
                                v250 = v230;
                                *(_QWORD *)&v244 = *((_QWORD *)&v254 + 1);
                                *((_QWORD *)&v244 + 1) = *((_QWORD *)&v254 + 1);
                                if (*((double *)&v254 + 1) < 0.0)
                                {
                                  v155 = -*((double *)&v254 + 1);
                                  *(double *)&v244 = -*((double *)&v254 + 1);
                                  *((double *)&v244 + 1) = -*((double *)&v254 + 1);
                                }
                                v231 = 0.0;
                                if (v155 != 0.0)
                                  v231 = v155 * 1000000.0 / v155;
                                v245 = v231;
                              }
                              else if (v170 == 1)
                              {
                                v248 = 0.0;
                                v249 = v148;
                                if (v148 >= 0.0)
                                {
                                  v229 = 0.0;
                                }
                                else
                                {
                                  v248 = -0.0;
                                  v148 = -v148;
                                  v249 = v148;
                                  v229 = -0.0;
                                }
                                v238 = v229 / v148;
                                if (v148 == 0.0)
                                  v239 = 0.0;
                                else
                                  v239 = v238;
                                v250 = v239;
                                *(_QWORD *)&v246 = *((_QWORD *)&v254 + 1);
                                *((_QWORD *)&v246 + 1) = *((_QWORD *)&v254 + 1);
                                if (*((double *)&v254 + 1) < 0.0)
                                {
                                  v155 = -*((double *)&v254 + 1);
                                  *(double *)&v246 = -*((double *)&v254 + 1);
                                  *((double *)&v246 + 1) = -*((double *)&v254 + 1);
                                }
                                v240 = 0.0;
                                if (v155 != 0.0)
                                  v240 = v155 * 1000000.0 / v155;
                                v247 = v240;
                              }
                              else if (!(v162 | v170) || v162 >= 4 && v170 >= 4)
                              {
                                *(_QWORD *)&v282 = 0;
                                v232 = 40;
                                do
                                {
                                  v233 = (char *)&v282 + v232;
                                  *(_OWORD *)v233 = xmmword_101C16BA0;
                                  *((_QWORD *)v233 + 2) = 0;
                                  *((_QWORD *)v233 + 3) = 0;
                                  *((_OWORD *)v233 + 2) = xmmword_101BAFDC0;
                                  v233[48] = 0;
                                  v232 += 56;
                                }
                                while (v233 + 56 != (char *)v291);
                                goto LABEL_457;
                              }
                              sub_100B7DB4C((uint64_t)v277, (uint64_t)v276, v100 < 0.0, v162, v170, v201, v205, (uint64_t)&v279, a3, (uint64_t)&v248, &v246, &v244);
                              return;
                            }
                          }
                          else if (v148 >= v252)
                          {
                            if (v148 <= v251)
                              v205 = 2;
                            else
                              v205 = 4;
                            goto LABEL_418;
                          }
                          v205 = 0;
                          goto LABEL_418;
                        }
                      }
                    }
                    v205 = 3;
                    goto LABEL_418;
                  }
                }
                else if (v252 <= 0.0)
                {
                  if (v251 >= 0.0)
                    v201 = 2;
                  else
                    v201 = 4;
                  goto LABEL_376;
                }
                v201 = 0;
                goto LABEL_376;
              }
            }
          }
          v170 = 3;
          goto LABEL_367;
        }
      }
      else if (*(double *)&v254 <= 0.0)
      {
        if (v253 >= 0.0)
          v162 = 2;
        else
          v162 = 4;
        goto LABEL_263;
      }
      v162 = 0;
      goto LABEL_263;
    }
LABEL_138:
    v279 = 0.0;
    if (sub_100B7D950((double *)v7, (double *)v6, (double *)v5, v4, &v267, (uint64_t)&v264, &v259, &v273, &v270, &v258, &v279, v58))
    {
      if (v258 >= 0.0)
        v114 = v279;
      else
        v114 = -v279;
      if (v258 >= 0.0)
        v115 = v258;
      else
        v115 = -v258;
      v116 = 0.0;
      if (v115 != 0.0)
        v116 = v114 * 1000000.0 / v115;
      v117 = 40;
      do
      {
        v118 = (char *)&v282 + v117;
        *(_OWORD *)v118 = xmmword_101C16BA0;
        *((_QWORD *)v118 + 2) = 0;
        *((_QWORD *)v118 + 3) = 0;
        *((_OWORD *)v118 + 2) = xmmword_101BAFDC0;
        v118[48] = 0;
        v117 += 56;
      }
      while (v118 + 56 != (char *)v291);
      *(_QWORD *)&v282 = 1;
      *((_QWORD *)&v282 + 1) = *(_QWORD *)v277[0];
      *(_QWORD *)&v283 = *(_QWORD *)(v277[0] + 8);
      v119 = atomic_load((unsigned __int8 *)&qword_1022F9C08);
      if ((v119 & 1) == 0)
      {
        v243 = v115;
        v241 = v116;
        v242 = __cxa_guard_acquire(&qword_1022F9C08);
        v116 = v241;
        v115 = v243;
        if (v242)
        {
          xmmword_1022F9BF0 = xmmword_101C16BA0;
          qword_1022F9C00 = 0;
          __cxa_guard_release(&qword_1022F9C08);
          v116 = v241;
          v115 = v243;
        }
      }
      BYTE8(v286) = 1;
      *(_OWORD *)&v284[8] = xmmword_1022F9BF0;
      *(_QWORD *)&v284[24] = qword_1022F9C00;
      *(double *)&v285 = v114;
      *((double *)&v285 + 1) = v115;
      *(double *)&v286 = v116;
      memset((char *)v291 + 2, 0, 40);
      v120 = v288;
      *(_OWORD *)(a3 + 96) = v287;
      *(_OWORD *)(a3 + 112) = v120;
      *(_OWORD *)(a3 + 128) = v289;
      *(_QWORD *)(a3 + 144) = v290;
      v121 = *(_OWORD *)&v284[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v284;
      *(_OWORD *)(a3 + 48) = v121;
      v122 = v286;
      *(_OWORD *)(a3 + 64) = v285;
      *(_OWORD *)(a3 + 80) = v122;
      v123 = v283;
      *(_OWORD *)a3 = v282;
      *(_OWORD *)(a3 + 16) = v123;
      *(_WORD *)(a3 + 152) = 48;
      v82 = v291[1];
      *(_OWORD *)(a3 + 154) = v291[0];
      goto LABEL_459;
    }
    *(_QWORD *)&v282 = 0;
    v125 = 40;
    do
    {
      v126 = (char *)&v282 + v125;
      *(_OWORD *)v126 = xmmword_101C16BA0;
      *((_QWORD *)v126 + 2) = 0;
      *((_QWORD *)v126 + 3) = 0;
      *((_OWORD *)v126 + 2) = xmmword_101BAFDC0;
      v126[48] = 0;
      v125 += 56;
    }
    while (v126 + 56 != (char *)v291);
    goto LABEL_457;
  }
  if (!v99)
  {
    v105 = (char *)&v262 + 4;
    LODWORD(v262) = 0;
    goto LABEL_136;
  }
  v100 = v66 * v55 + v65 * v54 + v64 * v52;
  v101 = fabs(v100);
  if (v101 == 1.0
    || COERCE_UNSIGNED_INT64(fabs(v66 * v55 + v65 * v54 + v64 * v52)) <= 0x7FEFFFFFFFFFFFFFLL
    && ((v139 = fabs(v101 + -1.0), v101 >= 1.0) ? (v140 = v101 * 2.22044605e-16) : (v140 = 2.22044605e-16), v139 <= v140))
  {
    v262 = 0;
    v263 = 0;
    if (!v70)
      goto LABEL_108;
    goto LABEL_138;
  }
  if ((v70 | v84) == 1)
  {
    *(_QWORD *)&v282 = 0;
    v141 = 40;
    do
    {
      v142 = (char *)&v282 + v141;
      *(_OWORD *)v142 = xmmword_101C16BA0;
      *((_QWORD *)v142 + 2) = 0;
      *((_QWORD *)v142 + 3) = 0;
      *((_OWORD *)v142 + 2) = xmmword_101BAFDC0;
      v142[48] = 0;
      v141 += 56;
    }
    while (v142 + 56 != (char *)v291);
    goto LABEL_457;
  }
  LODWORD(v246) = 0;
  v279 = 0.0;
  v248 = 0.0;
  if (sub_100B7DD5C((double *)v5, (double *)v4, (double *)v7, (double *)v6, &v273, &v270, &v267, &v264, &v255, &v259, (uint64_t)&v278, &v262, (double *)&v254 + 1, &v258, (double *)v291, &v279, &v248, (int *)&v246))
  {
    *(_QWORD *)&v286 = &v278;
    v179 = v279;
    v180 = *((double *)&v254 + 1);
    *((double *)&v283 + 1) = v279;
    *(_QWORD *)v284 = *((_QWORD *)&v254 + 1);
    if (*((double *)&v254 + 1) < 0.0)
    {
      v179 = -v279;
      v180 = -*((double *)&v254 + 1);
      *((double *)&v283 + 1) = -v279;
      *(double *)v284 = -*((double *)&v254 + 1);
    }
    v181 = 0.0;
    if (v180 != 0.0)
      v181 = v179 * 1000000.0 / v180;
    v182 = v248;
    *(double *)&v284[8] = v181;
    *(double *)&v284[16] = v248;
    v183 = v258;
    *(double *)&v284[24] = v258;
    if (v258 < 0.0)
    {
      v182 = -v248;
      v183 = -v258;
      *(double *)&v284[16] = -v248;
      *(double *)&v284[24] = -v258;
    }
    v184 = 0.0;
    if (v183 != 0.0)
      v184 = v182 * 1000000.0 / v183;
    *(double *)&v285 = v184;
    v282 = v291[0];
    *(_QWORD *)&v283 = *(_QWORD *)&v291[1];
    DWORD2(v285) = v246;
    sub_100B7E588((int *)&v262, (uint64_t)&v282, v277, (uint64_t *)v276, a3);
  }
  else
  {
    sub_100B7D738(a3);
  }
}

double sub_100B7D738@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  _OWORD v9[9];
  uint64_t v10;
  _BYTE v11[48];

  *(_QWORD *)&v9[0] = 0;
  v1 = 40;
  do
  {
    v2 = (char *)v9 + v1;
    *(_OWORD *)v2 = xmmword_101C16BA0;
    *((_QWORD *)v2 + 2) = 0;
    *((_QWORD *)v2 + 3) = 0;
    *((_OWORD *)v2 + 2) = xmmword_101BAFDC0;
    v2[48] = 0;
    v1 += 56;
  }
  while (v2 + 56 != v11);
  memset(&v11[8], 0, 32);
  v3 = v9[7];
  *(_OWORD *)(a1 + 96) = v9[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v9[8];
  v4 = v9[3];
  *(_OWORD *)(a1 + 32) = v9[2];
  *(_OWORD *)(a1 + 48) = v4;
  v5 = v9[5];
  *(_OWORD *)(a1 + 64) = v9[4];
  *(_OWORD *)(a1 + 80) = v5;
  v6 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)&v11[22];
  *(_OWORD *)(a1 + 154) = *(_OWORD *)&v11[6];
  *(_QWORD *)&v11[40] = 0;
  *(_QWORD *)(a1 + 144) = v10;
  *(_WORD *)(a1 + 152) = 100;
  *(_OWORD *)(a1 + 170) = v7;
  result = *(double *)&v11[32];
  *(_OWORD *)(a1 + 180) = *(_OWORD *)&v11[32];
  return result;
}

double sub_100B7D820(double *a1)
{
  double v1;
  unsigned __int8 v2;
  double v3;
  double v4;
  unsigned __int8 v5;
  double v6;
  double cosval;
  int v9;
  double *v10;

  v1 = *a1;
  v2 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v2 & 1) == 0)
  {
    v10 = a1;
    v9 = __cxa_guard_acquire(&qword_1022A4130);
    a1 = v10;
    if (v9)
    {
      qword_1022A4128 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1022A4130);
      a1 = v10;
    }
  }
  v3 = *(double *)&qword_1022A4128;
  v4 = a1[1];
  v5 = atomic_load((unsigned __int8 *)&qword_1022A4130);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1022A4130))
  {
    qword_1022A4128 = 0x3F91DF46A2529D39;
    __cxa_guard_release(&qword_1022A4130);
  }
  v6 = v1 * v3;
  cosval = __sincos_stret(v4 * *(double *)&qword_1022A4128).__cosval;
  return __sincos_stret(v6).__cosval * cosval;
}

BOOL sub_100B7D950(double *a1, double *a2, double *a3, uint64_t a4, double *a5, uint64_t a6, double *a7, double *a8, double *a9, double *a10, double *a11, char a12)
{
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char v29;
  char v30;

  v29 = 1;
  v17 = 1.0 - sub_100B7ED90(a7, a5, a8, (BOOL *)&v29);
  *a11 = v17;
  if (!v29)
  {
    v17 = -v17;
    *a11 = v17;
  }
  if (v17 <= -2.0)
    *a11 = v17 + 4.0;
  if (sub_100B7EC04(a11, a1, a3))
    goto LABEL_6;
  v28 = *a10 - *a11;
  if (sub_100B7EC04(&v28, a2, a3))
  {
    v18 = *a10;
    goto LABEL_9;
  }
  if ((a12 & 1) != 0)
  {
    v30 = 1;
    v20 = 1.0 - sub_100B7ED90(a7, a5, a9, (BOOL *)&v30);
    if (!v30)
      v20 = -v20;
    v21 = v20 + 4.0;
    if (v20 > -2.0)
      v21 = v20;
    if (v21 == 0.0)
      goto LABEL_6;
    if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v22 = fabs(v21);
      v23 = 2.22044605e-16;
      if (v22 >= 1.0)
        v23 = v22 * 2.22044605e-16;
      if (v22 <= v23)
      {
LABEL_6:
        *a11 = 0.0;
        return 1;
      }
    }
    v18 = *a10;
    v24 = *a10 - v21;
    if (v24 == 0.0)
      goto LABEL_9;
    if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v25 = fabs(v24);
      v26 = 2.22044605e-16;
      if (v25 >= 1.0)
        v26 = v25 * 2.22044605e-16;
      if (v25 <= v26)
      {
LABEL_9:
        *a11 = v18;
        return 1;
      }
    }
  }
  else
  {
    v18 = *a10;
  }
  v27 = *a11;
  if (v18 < 0.0)
    v27 = -*a11;
  if (v27 < 0.0)
    return 0;
  if (v18 < 0.0)
    v18 = -v18;
  return v27 <= v18;
}

void sub_100B7DB4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 *a11, __int128 *a12)
{
  int v14;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  unsigned int v22;
  int v23;
  int v25;
  unsigned int v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  unsigned int v31;
  int v32;
  _BOOL4 v34;
  _BOOL4 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  _OWORD v43[9];
  uint64_t v44;
  _BYTE v45[34];

  v14 = a3;
  if ((a5 & 0xFFFFFFFD) == 1)
    v16 = 0;
  else
    v16 = -1;
  v17 = (a4 - 4) < 0xFFFFFFFD;
  v18 = (a4 & 0xFFFFFFFD) != 1;
  v19 = (a4 & 0xFFFFFFFD) != 1 || (a4 - 4) < 0xFFFFFFFD;
  if ((a4 - 4) <= 0xFFFFFFFC)
    v18 = 0;
  if (a5 == 2)
    v20 = 1;
  else
    v20 = v16;
  if (a5 == 2)
    v21 = v18;
  else
    v21 = (a4 - 4) < 0xFFFFFFFD;
  v22 = a5 - 1;
  if ((a5 & 0xFFFFFFFD) == 1)
    v23 = !v19;
  else
    v23 = v21;
  if ((a5 & 0xFFFFFFFD) != 1 || v22 >= 3)
    v25 = !v19;
  else
    v25 = v23 + 1;
  sub_100B7EDE8(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v43, a10, a11, a12);
  memset(&v45[2], 0, 32);
  v26 = a7 & 0xFFFFFFFD;
  v27 = (a6 - 4) < 0xFFFFFFFD;
  v28 = (a6 & 0xFFFFFFFD) != 1;
  v29 = (a6 & 0xFFFFFFFD) != 1 || (a6 - 4) < 0xFFFFFFFD;
  if ((a6 - 4) <= 0xFFFFFFFC)
    v28 = 0;
  v30 = !v29;
  if (a7 != 2)
    v28 = (a6 - 4) < 0xFFFFFFFD;
  v31 = a7 - 1;
  if (v26 == 1)
    v32 = v30;
  else
    v32 = v28;
  if (v26 == 1 && v31 < 3)
    v30 = v32 + 1;
  v34 = v23 == 0;
  if (v22 < 3)
    v34 = v17;
  v35 = v32 == 0;
  if (v31 >= 3)
    v27 = v35;
  if (v25 == 1 && v30 == 1 && v34 && v27)
  {
    if (v14)
    {
      if (v20)
        v36 = 102;
      else
        v36 = 116;
    }
    else
    {
      v36 = 97;
    }
  }
  else
  {
    v36 = 99;
    if (v25 == 2 && v30 == 2)
      v36 = 101;
  }
  v37 = v43[7];
  *(_OWORD *)(a9 + 96) = v43[6];
  *(_OWORD *)(a9 + 112) = v37;
  *(_OWORD *)(a9 + 128) = v43[8];
  v38 = v43[3];
  *(_OWORD *)(a9 + 32) = v43[2];
  *(_OWORD *)(a9 + 48) = v38;
  v39 = v43[5];
  *(_OWORD *)(a9 + 64) = v43[4];
  *(_OWORD *)(a9 + 80) = v39;
  v40 = v43[1];
  *(_OWORD *)a9 = v43[0];
  *(_OWORD *)(a9 + 16) = v40;
  v41 = *(_OWORD *)&v45[16];
  *(_OWORD *)(a9 + 154) = *(_OWORD *)v45;
  if (v26 == 1)
    v42 = 0;
  else
    v42 = -1;
  if (a7 == 2)
    v42 = 1;
  *(_QWORD *)(a9 + 144) = v44;
  *(_BYTE *)(a9 + 152) = v36;
  *(_BYTE *)(a9 + 153) = v14;
  *(_OWORD *)(a9 + 170) = v41;
  *(_WORD *)(a9 + 186) = *(_WORD *)&v45[32];
  *(_DWORD *)(a9 + 188) = v20;
  *(_DWORD *)(a9 + 192) = v42;
}

uint64_t sub_100B7DD5C(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, uint64_t a11, _DWORD *a12, double *a13, double *a14, double *a15, double *a16, double *a17, int *a18)
{
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  _BOOL4 v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  _BOOL4 v40;
  double v41;
  double v42;
  uint64_t result;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  int v92;
  double *v93;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  double v100;
  double v101;
  double v102[2];

  sub_100B7F5A4(a9, a10, (double *)&v99, (double *)&v97);
  v24 = a5[1];
  v23 = a5[2];
  v25 = (*a5 * *((double *)&v99 + 1) - v24 * *(double *)&v99) * a9[2]
      + a9[1] * (v23 * *(double *)&v99 - *a5 * v100)
      + *a9 * (v24 * v100 - v23 * *((double *)&v99 + 1));
  v26 = 1.0 - (v100 * v23 + v24 * *((double *)&v99 + 1) + *a5 * *(double *)&v99);
  if (v25 < 0.0)
    v26 = -v26;
  if (v26 <= -2.0)
    v26 = v26 + 4.0;
  *a16 = v26;
  *(_OWORD *)a15 = v99;
  a15[2] = v100;
  v27 = *a16;
  v93 = a6;
  if (*a16 >= 0.0)
  {
    if (v27 <= *a13)
      goto LABEL_19;
    v28 = v27 - *a13;
  }
  else
  {
    v28 = -v27;
  }
  if (v28 > 0.0)
  {
    if (v27 + -2.0 <= -2.0)
      v29 = v27 + -2.0 + 4.0;
    else
      v29 = v27 + -2.0;
    if (v29 >= 0.0)
    {
      v30 = 0.0;
      if (v29 > *a13)
        v30 = v29 - *a13;
    }
    else
    {
      v30 = -v29;
    }
    if (v30 < v28)
    {
      *a16 = v29;
      *(_OWORD *)a15 = v97;
      *((_QWORD *)a15 + 2) = v98;
      v27 = *a16;
    }
  }
LABEL_19:
  v31 = -*a13;
  if (*a13 >= 0.0)
    v31 = *a13;
  v32 = -v27;
  if (*a13 >= 0.0)
    v32 = v27;
  v33 = v32 <= v31 && v32 >= 0.0;
  v34 = fabs(v27);
  v35 = vabdd_f64(*a13, v27);
  if (v35 > 0.00000001 && v34 > 0.00000001 && !v33)
    return 0;
  LOBYTE(v102[0]) = 1;
  v37 = 1.0 - sub_100B7ED90(a10, a7, a15, (BOOL *)v102);
  *a17 = v37;
  if (!LOBYTE(v102[0]))
  {
    v37 = -v37;
    *a17 = v37;
  }
  if (v37 <= -2.0)
  {
    v37 = v37 + 4.0;
    *a17 = v37;
  }
  v38 = -*a14;
  if (*a14 >= 0.0)
    v38 = *a14;
  v39 = -v37;
  if (*a14 >= 0.0)
    v39 = v37;
  v40 = v39 <= v38 && v39 >= 0.0;
  v41 = fabs(v37);
  v42 = vabdd_f64(*a14, v37);
  if (v42 > 0.00000001 && v41 > 0.00000001 && !v40)
    return 0;
  if (v34 <= 0.00000001)
  {
    if (v41 > 0.00000001)
      goto LABEL_88;
    v44 = *a1;
    v101 = a1[1];
    v102[0] = v44;
    sub_100778A68(v102, &v101, 1);
    v45 = v101;
    v46 = v102[0];
    v47 = *a3;
    v101 = a3[1];
    v102[0] = v47;
    sub_100778A68(v102, &v101, 1);
    if (v46 != v102[0])
    {
      if ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_88;
      }
      v48 = vabdd_f64(v46, v102[0]);
      v49 = fabs(v46);
      v50 = fabs(v102[0]);
      if (v49 >= v50)
        v50 = v49;
      v51 = v50 >= 1.0 ? v50 * 2.22044605e-16 : 2.22044605e-16;
      if (v48 > v51)
        goto LABEL_88;
    }
    if (v45 == v101)
      goto LABEL_50;
    if ((*(_QWORD *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_88;
    }
    v52 = vabdd_f64(v45, v101);
    v53 = fabs(v45);
    v54 = fabs(v101);
    if (v53 >= v54)
      v54 = v53;
    v55 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
    if (v52 <= v55)
    {
LABEL_50:
      *a16 = 0.0;
      *a17 = 0.0;
    }
    else
    {
LABEL_88:
      if (v42 > 0.00000001)
        goto LABEL_89;
      v56 = *a1;
      v101 = a1[1];
      v102[0] = v56;
      sub_100778A68(v102, &v101, 1);
      v57 = v101;
      v58 = v102[0];
      v59 = *a4;
      v101 = a4[1];
      v102[0] = v59;
      sub_100778A68(v102, &v101, 1);
      if (v58 != v102[0])
      {
        if ((*(_QWORD *)&v58 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_89;
        }
        v60 = vabdd_f64(v58, v102[0]);
        v61 = fabs(v58);
        v62 = fabs(v102[0]);
        if (v61 >= v62)
          v62 = v61;
        v63 = v62 >= 1.0 ? v62 * 2.22044605e-16 : 2.22044605e-16;
        if (v60 > v63)
          goto LABEL_89;
      }
      if (v57 != v101)
      {
        if ((*(_QWORD *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_89;
        }
        v64 = vabdd_f64(v57, v101);
        v65 = fabs(v57);
        v66 = fabs(v101);
        if (v65 >= v66)
          v66 = v65;
        v67 = v66 >= 1.0 ? v66 * 2.22044605e-16 : 2.22044605e-16;
        if (v64 > v67)
          goto LABEL_89;
      }
      *a16 = 0.0;
      *a17 = *a14;
    }
LABEL_143:
    result = 1;
    *a18 = 1;
    return result;
  }
LABEL_89:
  if (v35 <= 0.00000001)
  {
    if (v41 > 0.00000001)
      goto LABEL_131;
    v68 = *a2;
    v101 = a2[1];
    v102[0] = v68;
    sub_100778A68(v102, &v101, 1);
    v69 = v101;
    v70 = v102[0];
    v71 = *a3;
    v101 = a3[1];
    v102[0] = v71;
    sub_100778A68(v102, &v101, 1);
    if (v70 != v102[0])
    {
      if ((*(_QWORD *)&v70 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_131;
      }
      v72 = vabdd_f64(v70, v102[0]);
      v73 = fabs(v70);
      v74 = fabs(v102[0]);
      if (v73 >= v74)
        v74 = v73;
      v75 = v74 >= 1.0 ? v74 * 2.22044605e-16 : 2.22044605e-16;
      if (v72 > v75)
        goto LABEL_131;
    }
    if (v69 == v101)
      goto LABEL_93;
    if ((*(_QWORD *)&v69 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_131;
    }
    v76 = vabdd_f64(v69, v101);
    v77 = fabs(v69);
    v78 = fabs(v101);
    if (v77 >= v78)
      v78 = v77;
    v79 = v78 >= 1.0 ? v78 * 2.22044605e-16 : 2.22044605e-16;
    if (v76 <= v79)
    {
LABEL_93:
      *a16 = *a13;
      *a17 = 0.0;
    }
    else
    {
LABEL_131:
      if (v42 > 0.00000001)
        goto LABEL_132;
      v80 = *a2;
      v101 = a2[1];
      v102[0] = v80;
      sub_100778A68(v102, &v101, 1);
      v81 = v101;
      v82 = v102[0];
      v83 = *a4;
      v101 = a4[1];
      v102[0] = v83;
      sub_100778A68(v102, &v101, 1);
      if (v82 != v102[0])
      {
        if ((*(_QWORD *)&v82 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_132;
        }
        v84 = vabdd_f64(v82, v102[0]);
        v85 = fabs(v82);
        v86 = fabs(v102[0]);
        if (v85 >= v86)
          v86 = v85;
        v87 = v86 >= 1.0 ? v86 * 2.22044605e-16 : 2.22044605e-16;
        if (v84 > v87)
          goto LABEL_132;
      }
      if (v81 != v101)
      {
        if ((*(_QWORD *)&v81 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_132;
        }
        v88 = vabdd_f64(v81, v101);
        v89 = fabs(v81);
        v90 = fabs(v101);
        if (v89 >= v90)
          v90 = v89;
        v91 = v90 >= 1.0 ? v90 * 2.22044605e-16 : 2.22044605e-16;
        if (v88 > v91)
          goto LABEL_132;
      }
      *a16 = *a13;
      *a17 = *a14;
    }
LABEL_147:
    v92 = 2;
    goto LABEL_148;
  }
LABEL_132:
  if (v33)
  {
    if (v41 <= 0.00000001 && !a12[2])
    {
      sub_100B7EB8C(a5, (uint64_t)v93, a9, a7, a16);
      *a17 = 0.0;
      v92 = 3;
LABEL_148:
      *a18 = v92;
      return 1;
    }
    if (v42 <= 0.00000001 && !a12[3])
    {
      sub_100B7EB8C(a5, (uint64_t)v93, a9, a8, a16);
      *a17 = *a14;
      v92 = 4;
      goto LABEL_148;
    }
  }
  if (v40)
  {
    if (v34 <= 0.00000001 && !*a12)
    {
      *a16 = 0.0;
      sub_100B7EB8C(a7, (uint64_t)a8, a10, a5, a17);
      goto LABEL_143;
    }
    if (v35 <= 0.00000001 && !a12[1])
    {
      *a16 = *a13;
      sub_100B7EB8C(a7, (uint64_t)a8, a10, v93, a17);
      goto LABEL_147;
    }
  }
  *a18 = 0;
  return v33 & v40;
}

__n128 sub_100B7E588@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  BOOL v22;
  _OWORD v23[2];
  _BYTE v24[32];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v8 = 40;
  do
  {
    v9 = (char *)v23 + v8;
    *(_OWORD *)v9 = xmmword_101C16BA0;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = 0;
    *((_OWORD *)v9 + 2) = xmmword_101BAFDC0;
    v9[48] = 0;
    v8 += 56;
  }
  while (v9 + 56 != (char *)&v31);
  *(_QWORD *)&v23[0] = 1;
  sub_100B7F620(a2, (uint64_t)v23 + 8, a3, a4);
  BYTE8(v26) = 1;
  *(_OWORD *)&v24[8] = *(_OWORD *)(a2 + 24);
  *(_QWORD *)&v24[24] = *(_QWORD *)(a2 + 40);
  v25 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)&v26 = *(_QWORD *)(a2 + 64);
  v10 = *a1;
  v11 = a1[2];
  v12 = a1[3];
  if (!(*a1 | v11))
  {
    v11 = -1;
    if (v12 == 1)
      v14 = -1;
    else
      v14 = 1;
    if (v12 == 1)
      v15 = 1;
    else
      v15 = -1;
    v16 = 102;
    goto LABEL_25;
  }
  v13 = a1[1];
  if (!(v13 | v12))
  {
    if (v11 == 1)
      v14 = -1;
    else
      v14 = 1;
    if (v11 == 1)
      v15 = 1;
    else
      v15 = -1;
    v11 = 1;
    v16 = 116;
    v10 = 1;
    goto LABEL_43;
  }
  if (!(v13 | v11))
  {
    if (v12 == 1)
      v14 = 1;
    else
      v14 = -1;
    v10 = -1;
    v11 = 1;
    goto LABEL_41;
  }
  if (!(v10 | v12))
  {
    if (v11 == 1)
      v14 = 1;
    else
      v14 = -1;
    v10 = 1;
    v11 = -1;
LABEL_41:
    v16 = 97;
    goto LABEL_42;
  }
  if (v11)
  {
    if (v10)
    {
      if (v12)
      {
        if (v13)
        {
          v11 = -1;
          if (v12 == 1)
            v14 = -1;
          else
            v14 = 1;
          if (v12 == 1)
            v15 = 1;
          else
            v15 = -1;
          v16 = 105;
LABEL_25:
          v10 = -1;
          goto LABEL_43;
        }
        v10 = 0;
        if (v12 == 1)
          v14 = 1;
        else
          v14 = -1;
        v11 = 1;
      }
      else
      {
        v11 = 0;
        if (v13 == 1)
          v14 = 1;
        else
          v14 = -1;
        v10 = 1;
      }
      v16 = 109;
LABEL_42:
      v15 = v14;
      goto LABEL_43;
    }
    v22 = v12 == 1;
    v11 = -1;
    if (v12 == 1)
      v14 = -1;
    else
      v14 = 1;
  }
  else
  {
    v22 = v12 == 1;
    v10 = -1;
    if (v12 == 1)
      v14 = -1;
    else
      v14 = 1;
  }
  if (v22)
    v15 = a1[3];
  else
    v15 = -1;
  v16 = 115;
LABEL_43:
  v17 = v28;
  *(_OWORD *)(a5 + 96) = v27;
  *(_OWORD *)(a5 + 112) = v17;
  *(_OWORD *)(a5 + 128) = v29;
  *(_QWORD *)(a5 + 144) = v30;
  v18 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a5 + 32) = *(_OWORD *)v24;
  *(_OWORD *)(a5 + 48) = v18;
  v19 = v26;
  *(_OWORD *)(a5 + 64) = v25;
  *(_OWORD *)(a5 + 80) = v19;
  v20 = v23[1];
  *(_OWORD *)a5 = v23[0];
  *(_OWORD *)(a5 + 16) = v20;
  *(_BYTE *)(a5 + 152) = v16;
  *(_BYTE *)(a5 + 153) = 0;
  *(_DWORD *)(a5 + 156) = v11;
  *(_DWORD *)(a5 + 160) = v10;
  *(_DWORD *)(a5 + 164) = v14;
  *(_DWORD *)(a5 + 168) = v15;
  result = *(__n128 *)a1;
  *(_OWORD *)(a5 + 172) = *(_OWORD *)a1;
  *(_DWORD *)(a5 + 188) = v11;
  *(_DWORD *)(a5 + 192) = v10;
  return result;
}

void sub_100B7E7B0(uint64_t a1, double *a2, uint64_t a3)
{
  unint64_t v5;
  double v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double v26;

  v5 = 0;
  v7 = *a2;
  v6 = a2[1];
  v8 = *(double **)a3;
  while (1)
  {
    v9 = *v8;
    v10 = v8[1];
    v25 = v6;
    v26 = v7;
    sub_100778A68(&v26, &v25, 1);
    v11 = v25;
    v12 = v26;
    v25 = v10;
    v26 = v9;
    sub_100778A68(&v26, &v25, 1);
    if (v12 != v26)
    {
      if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }
      v14 = vabdd_f64(v12, v26);
      v15 = fabs(v12);
      v16 = fabs(v26);
      if (v15 >= v16)
        v16 = v15;
      v17 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 > v17)
        break;
    }
    if (v11 != v25)
    {
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }
      v19 = vabdd_f64(v11, v25);
      v20 = fabs(v11);
      v21 = fabs(v25);
      if (v20 >= v21)
        v21 = v20;
      v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
      if (v19 > v22)
        break;
    }
    if (v5 >= *(_QWORD *)(*(_QWORD *)a1 + 88))
      break;
    v23 = *(double **)a3;
    v8 = (double *)(*(_QWORD *)a3 + 16);
    *(_QWORD *)a3 = v8;
    if (v8 == *(double **)(a3 + 16))
    {
      v24 = *(double **)(a3 + 8);
      *(_QWORD *)a3 = v24;
      if (*(_BYTE *)(a3 + 24))
      {
        v8 = v24 + 2;
        *(_QWORD *)a3 = v24 + 2;
        if (v23 == v24)
        {
          *(_QWORD *)a3 = v24;
          v8 = v23;
        }
      }
      else
      {
        v8 = v24;
      }
    }
    ++v5;
  }
}

__n128 sub_100B7E958@<Q0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[48];

  v4 = 40;
  do
  {
    v5 = (char *)&v20 + v4;
    *(_OWORD *)v5 = xmmword_101C16BA0;
    *((_QWORD *)v5 + 2) = 0;
    *((_QWORD *)v5 + 3) = 0;
    *((_OWORD *)v5 + 2) = xmmword_101BAFDC0;
    v5[48] = 0;
    v4 += 56;
  }
  while (v5 + 56 != v29);
  *(_QWORD *)&v20 = 1;
  v6 = *a1;
  *((_QWORD *)&v20 + 1) = **a1;
  *(_QWORD *)&v21 = v6[1];
  v7 = atomic_load((unsigned __int8 *)&qword_1022F9C08);
  if (a3)
  {
    if ((v7 & 1) == 0)
    {
      v16 = a2;
      v18 = a4;
      v14 = __cxa_guard_acquire(&qword_1022F9C08);
      a2 = v16;
      a4 = v18;
      if (v14)
      {
        xmmword_1022F9BF0 = xmmword_101C16BA0;
        qword_1022F9C00 = 0;
        __cxa_guard_release(&qword_1022F9C08);
        a2 = v16;
        a4 = v18;
      }
    }
    BYTE8(v24) = 1;
    *(_OWORD *)&v22[8] = xmmword_1022F9BF0;
    *(_QWORD *)&v22[24] = qword_1022F9C00;
    v23 = *(_OWORD *)a2;
    *(_QWORD *)&v24 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    if ((v7 & 1) == 0)
    {
      v17 = a2;
      v19 = a4;
      v15 = __cxa_guard_acquire(&qword_1022F9C08);
      a2 = v17;
      a4 = v19;
      if (v15)
      {
        xmmword_1022F9BF0 = xmmword_101C16BA0;
        qword_1022F9C00 = 0;
        __cxa_guard_release(&qword_1022F9C08);
        a2 = v17;
        a4 = v19;
      }
    }
    BYTE8(v24) = 1;
    *(_OWORD *)&v22[8] = *(_OWORD *)a2;
    *(_QWORD *)&v22[24] = *(_QWORD *)(a2 + 16);
    v23 = xmmword_1022F9BF0;
    *(_QWORD *)&v24 = qword_1022F9C00;
  }
  memset(&v29[8], 0, 32);
  v8 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v8;
  *(_OWORD *)(a4 + 128) = v27;
  v9 = *(_OWORD *)&v22[16];
  *(_OWORD *)(a4 + 32) = *(_OWORD *)v22;
  *(_OWORD *)(a4 + 48) = v9;
  v10 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v10;
  v11 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v11;
  v12 = *(_OWORD *)&v29[22];
  *(_OWORD *)(a4 + 154) = *(_OWORD *)&v29[6];
  *(_QWORD *)&v29[40] = 0;
  *(_QWORD *)(a4 + 144) = v28;
  *(_WORD *)(a4 + 152) = 48;
  *(_OWORD *)(a4 + 170) = v12;
  result = *(__n128 *)&v29[32];
  *(_OWORD *)(a4 + 180) = *(_OWORD *)&v29[32];
  return result;
}

double sub_100B7EB8C(double *a1, uint64_t a2, double *a3, double *a4, double *a5)
{
  double result;
  char v7;

  v7 = 1;
  result = 1.0 - sub_100B7ED90(a3, a1, a4, (BOOL *)&v7);
  *a5 = result;
  if (!v7)
  {
    result = -result;
    *a5 = result;
  }
  if (result <= -2.0)
  {
    result = result + 4.0;
    *a5 = result;
  }
  return result;
}

BOOL sub_100B7EC04(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v3 = *a1;
  v4 = fabs(*a1);
  if (v4 > 0.00000001)
    return 0;
  if (v3 == 0.0)
    return 1;
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v7 = 2.22044605e-16;
    if (v4 >= 1.0)
      v7 = v4 * 2.22044605e-16;
    if (v4 <= v7)
      return 1;
  }
  v8 = *a2;
  v20 = a2[1];
  v21 = v8;
  sub_100778A68(&v21, &v20, 1);
  v9 = v20;
  v10 = v21;
  v11 = *a3;
  v20 = a3[1];
  v21 = v11;
  sub_100778A68(&v21, &v20, 1);
  if (v10 != v21)
  {
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    v16 = vabdd_f64(v10, v21);
    v17 = fabs(v10);
    v18 = fabs(v21);
    if (v17 >= v18)
      v18 = v17;
    v19 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 > v19)
      return 0;
  }
  if (v9 == v20)
    return 1;
  if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  v12 = vabdd_f64(v9, v20);
  v13 = fabs(v9);
  v14 = fabs(v20);
  if (v13 >= v14)
    v14 = v13;
  v15 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
  return v12 <= v15;
}

double sub_100B7ED90(double *a1, double *a2, double *a3, BOOL *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v5 = a3[1];
  v4 = a3[2];
  v7 = a2[1];
  v6 = a2[2];
  v8 = *a3;
  v9 = *a2;
  *a4 = (*a2 * v5 - v7 * *a3) * a1[2] + a1[1] * (v6 * *a3 - *a2 * v4) + *a1 * (v7 * v4 - v6 * v5) >= 0.0;
  return v4 * v6 + v7 * v5 + v9 * v8;
}

void sub_100B7EDE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 *a11, __int128 *a12)
{
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  BOOL v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  __int128 *v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  __int128 *v116;
  __int128 *v117;
  __int128 *v118;
  __int128 *v119;
  __int128 *v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  __int128 *v129;
  __int128 *v130;
  __int128 *v131;
  __int128 *v132;
  __int128 v133;
  double v134;
  double v135;
  __int128 v136;

  v13 = a11;
  v12 = a12;
  v14 = a10;
  *(_QWORD *)a9 = 0;
  v15 = (__int128 *)(a9 + 40);
  v16 = 40;
  v17 = xmmword_101C16BA0;
  do
  {
    v18 = a9 + v16;
    *(_OWORD *)v18 = xmmword_101C16BA0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_OWORD *)(v18 + 32) = xmmword_101BAFDC0;
    *(_BYTE *)(v18 + 48) = 0;
    v16 += 56;
  }
  while (v18 + 56 != a9 + 152);
  v134 = 0.0;
  v135 = 0.0;
  v136 = xmmword_101BAFDC0;
  v133 = xmmword_101C16BA0;
  if ((a4 - 1) > 2)
  {
    v22 = 0;
  }
  else
  {
    v19 = *(_QWORD **)a1;
    *(_QWORD *)(a9 + 8) = **(_QWORD **)a1;
    *(_QWORD *)(a9 + 16) = v19[1];
    LOBYTE(v19) = atomic_load((unsigned __int8 *)&qword_1022F9C08);
    if ((v19 & 1) == 0)
    {
      v87 = a1;
      v116 = (__int128 *)(a9 + 40);
      v122 = a9;
      v104 = a2;
      v110 = a7;
      v84 = a5;
      v95 = a6;
      v80 = a8;
      v65 = __cxa_guard_acquire(&qword_1022F9C08);
      v17 = xmmword_101C16BA0;
      v14 = a10;
      a2 = v104;
      a9 = v122;
      v12 = a12;
      v15 = v116;
      a8 = v80;
      a6 = v95;
      a5 = v84;
      a7 = v110;
      v66 = v65;
      a1 = v87;
      v13 = a11;
      if (v66)
      {
        xmmword_1022F9BF0 = xmmword_101C16BA0;
        qword_1022F9C00 = 0;
        __cxa_guard_release(&qword_1022F9C08);
        v17 = xmmword_101C16BA0;
        a1 = v87;
        v13 = a11;
        v14 = a10;
        a2 = v104;
        a9 = v122;
        v12 = a12;
        v15 = v116;
        a8 = v80;
        a6 = v95;
        a5 = v84;
        a7 = v110;
      }
    }
    v20 = qword_1022F9C00;
    *(_BYTE *)(a9 + 88) = 1;
    *(_OWORD *)(a9 + 40) = xmmword_1022F9BF0;
    *(_QWORD *)(a9 + 56) = v20;
    *(_OWORD *)(a9 + 64) = *(_OWORD *)a8;
    *(_QWORD *)(a9 + 80) = *(_QWORD *)(a8 + 16);
    v21 = atomic_load((unsigned __int8 *)&qword_1022F9C08);
    if ((v21 & 1) == 0)
    {
      v88 = a1;
      v91 = v13;
      v117 = v15;
      v123 = a9;
      v101 = v14;
      v105 = a2;
      v111 = a7;
      v85 = a5;
      v96 = a6;
      v128 = v12;
      v82 = v17;
      v67 = __cxa_guard_acquire(&qword_1022F9C08);
      v17 = v82;
      v14 = v101;
      a2 = v105;
      a9 = v123;
      v12 = v128;
      v15 = v117;
      a6 = v96;
      a5 = v85;
      a7 = v111;
      v68 = v67;
      a1 = v88;
      v13 = v91;
      if (v68)
      {
        xmmword_1022F9BF0 = v82;
        qword_1022F9C00 = 0;
        __cxa_guard_release(&qword_1022F9C08);
        v17 = v82;
        a1 = v88;
        v13 = v91;
        v14 = v101;
        a2 = v105;
        a9 = v123;
        v12 = v128;
        v15 = v117;
        a6 = v96;
        a5 = v85;
        a7 = v111;
      }
    }
    v133 = xmmword_1022F9BF0;
    v134 = *(double *)&qword_1022F9C00;
    v22 = 1;
  }
  if (a6 == 2)
  {
    v23 = v22;
    v24 = a9 + 16 * v22;
    v25 = *(_QWORD **)a2;
    *(_QWORD *)(v24 + 8) = **(_QWORD **)a2;
    *(_QWORD *)(v24 + 16) = v25[1];
    a3 = a9 + 56 * v22 + 40;
    LOBYTE(v24) = atomic_load((unsigned __int8 *)&qword_1022F9C08);
    if ((v24 & 1) == 0)
    {
      v89 = a1;
      v92 = v13;
      v118 = v15;
      v124 = a9;
      v102 = v14;
      v106 = a2;
      v112 = a7;
      v86 = a5;
      v97 = v22;
      v129 = v12;
      v79 = v22;
      v81 = a9 + 56 * v22 + 40;
      v83 = v17;
      v69 = __cxa_guard_acquire(&qword_1022F9C08);
      v23 = v79;
      a3 = v81;
      v14 = v102;
      a2 = v106;
      a9 = v124;
      v12 = v129;
      v22 = v97;
      v15 = v118;
      a5 = v86;
      a7 = v112;
      v70 = v69;
      a1 = v89;
      v13 = v92;
      if (v70)
      {
        xmmword_1022F9BF0 = v83;
        qword_1022F9C00 = 0;
        __cxa_guard_release(&qword_1022F9C08);
        v23 = v79;
        a3 = v81;
        a1 = v89;
        v13 = v92;
        v14 = v102;
        a2 = v106;
        a9 = v124;
        v12 = v129;
        v22 = v97;
        v15 = v118;
        a5 = v86;
        a7 = v112;
      }
    }
    v26 = qword_1022F9C00;
    v27 = a9 + 56 * v23;
    *(_BYTE *)(v27 + 88) = 1;
    v28 = xmmword_1022F9BF0;
    v29 = *v13;
    *(_OWORD *)a3 = *v13;
    v30 = *((_QWORD *)v13 + 2);
    *(_QWORD *)(a3 + 16) = v30;
    *(_OWORD *)(v27 + 64) = v28;
    *(_QWORD *)(v27 + 80) = v26;
    v31 = (char *)&v133 + 24 * v23;
    *(_OWORD *)v31 = v29;
    *((_QWORD *)v31 + 2) = v30;
    ++v22;
  }
  if ((a5 - 1) <= 2 && v22 <= 1)
  {
    v32 = v22;
    v33 = a9 + 16 * v22;
    v34 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)(v33 + 8) = *v34;
    *(_QWORD *)(v33 + 16) = v34[1];
    v35 = a9 + 56 * v22 + 40;
    LOBYTE(v33) = atomic_load((unsigned __int8 *)&qword_1022F9C28);
    if ((v33 & 1) == 0)
    {
      v119 = v15;
      v125 = a9;
      v103 = v14;
      v107 = a2;
      v113 = a7;
      v98 = v22;
      v130 = v12;
      v90 = a9 + 56 * v22 + 40;
      v93 = v22;
      v71 = __cxa_guard_acquire(&qword_1022F9C28);
      v35 = v90;
      v32 = v93;
      v14 = v103;
      a2 = v107;
      a9 = v125;
      v12 = v130;
      v22 = v98;
      v15 = v119;
      a7 = v113;
      if (v71)
      {
        __asm { FMOV            V0.2D, #1.0 }
        xmmword_1022F9C10 = _Q0;
        qword_1022F9C20 = 0x412E848000000000;
        __cxa_guard_release(&qword_1022F9C28);
        v35 = v90;
        v32 = v93;
        v14 = v103;
        a2 = v107;
        a9 = v125;
        v12 = v130;
        v22 = v98;
        v15 = v119;
        a7 = v113;
      }
    }
    v36 = qword_1022F9C20;
    v37 = a9 + 56 * v32;
    a1 = 1;
    *(_BYTE *)(v37 + 88) = 1;
    *(_OWORD *)v35 = xmmword_1022F9C10;
    *(_QWORD *)(v35 + 16) = v36;
    *(_OWORD *)(v37 + 64) = *(_OWORD *)v14;
    *(_QWORD *)(v37 + 80) = *(_QWORD *)(v14 + 16);
    v38 = atomic_load((unsigned __int8 *)&qword_1022F9C28);
    if ((v38 & 1) == 0)
    {
      v120 = v15;
      v126 = a9;
      v108 = a2;
      v114 = a7;
      v99 = v22;
      v131 = v12;
      v94 = v32;
      a1 = __cxa_guard_acquire(&qword_1022F9C28);
      v32 = v94;
      a9 = v126;
      v12 = v131;
      v22 = v99;
      v15 = v120;
      a7 = v114;
      a2 = v108;
      if ((_DWORD)a1)
      {
        __asm { FMOV            V0.2D, #1.0 }
        xmmword_1022F9C10 = _Q0;
        qword_1022F9C20 = 0x412E848000000000;
        __cxa_guard_release(&qword_1022F9C28);
        v32 = v94;
        a9 = v126;
        v12 = v131;
        v22 = v99;
        v15 = v120;
        a7 = v114;
        a2 = v108;
      }
    }
    v39 = qword_1022F9C20;
    v40 = (char *)&v133 + 24 * v32;
    *(_OWORD *)v40 = xmmword_1022F9C10;
    *((_QWORD *)v40 + 2) = v39;
    ++v22;
  }
  if (a7 == 2 && v22 <= 1)
  {
    v41 = v22;
    v42 = a9 + 16 * v22;
    v43 = *(_QWORD **)(a2 + 8);
    *(_QWORD *)(v42 + 8) = *v43;
    *(_QWORD *)(v42 + 16) = v43[1];
    v44 = a9 + 56 * v22 + 40;
    v45 = atomic_load((unsigned __int8 *)&qword_1022F9C28);
    if ((v45 & 1) == 0)
    {
      v121 = v15;
      v127 = a9;
      v100 = v22;
      v132 = v12;
      v109 = a9 + 56 * v22 + 40;
      v115 = v22;
      a1 = __cxa_guard_acquire(&qword_1022F9C28);
      v44 = v109;
      v41 = v115;
      a9 = v127;
      v12 = v132;
      v22 = v100;
      v15 = v121;
      if ((_DWORD)a1)
      {
        __asm { FMOV            V0.2D, #1.0 }
        xmmword_1022F9C10 = _Q0;
        qword_1022F9C20 = 0x412E848000000000;
        __cxa_guard_release(&qword_1022F9C28);
        v44 = v109;
        v41 = v115;
        a9 = v127;
        v12 = v132;
        v22 = v100;
        v15 = v121;
      }
    }
    v46 = qword_1022F9C20;
    v47 = a9 + 56 * v41;
    *(_BYTE *)(v47 + 88) = 1;
    v48 = xmmword_1022F9C10;
    v49 = *v12;
    *(_OWORD *)v44 = *v12;
    v50 = *((_QWORD *)v12 + 2);
    *(_QWORD *)(v44 + 16) = v50;
    *(_OWORD *)(v47 + 64) = v48;
    *(_QWORD *)(v47 + 80) = v46;
    v51 = (char *)&v133 + 24 * v41;
    *(_OWORD *)v51 = v49;
    *((_QWORD *)v51 + 2) = v50;
    ++v22;
  }
  if (v22 == 2)
  {
    if (vabdd_f64(*((double *)&v136 + 1), v134) >= 50.0)
    {
      if (*((double *)&v136 + 1) >= v134)
        goto LABEL_39;
      goto LABEL_38;
    }
    if (*(double *)&v136 == 0.0)
      sub_10191B9FC(a1, a2, a3);
    if (*((double *)&v133 + 1) == 0.0)
      sub_10191BA20(a1, a2, a3);
    v52 = v135 / *(double *)&v136;
    v53 = *(double *)&v133 / *((double *)&v133 + 1);
    if (v135 / *(double *)&v136 != *(double *)&v133 / *((double *)&v133 + 1))
    {
      if (COERCE_UNSIGNED_INT64(fabs(v135 / *(double *)&v136)) > 0x7FEFFFFFFFFFFFFFLL
        || COERCE_UNSIGNED_INT64(fabs(*(double *)&v133 / *((double *)&v133 + 1))) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v58 = 1;
      }
      else
      {
        v54 = vabdd_f64(v52, v53);
        v55 = fabs(v52);
        v56 = fabs(v53);
        if (v55 < v56)
          v55 = v56;
        v57 = v55 >= 1.0 ? v55 * 2.22044605e-16 : 2.22044605e-16;
        v58 = v54 > v57;
      }
      if (v52 < v53 && v58)
      {
LABEL_38:
        v59 = *((_QWORD *)v15 + 6);
        v61 = v15[1];
        v60 = v15[2];
        v62 = *v15;
        v63 = *(_OWORD *)(a9 + 112);
        *v15 = *(_OWORD *)(a9 + 96);
        v15[1] = v63;
        v15[2] = *(_OWORD *)(a9 + 128);
        *((_BYTE *)v15 + 48) = *(_BYTE *)(a9 + 144);
        *(_OWORD *)(a9 + 96) = v62;
        *(_OWORD *)(a9 + 112) = v61;
        *(_OWORD *)(a9 + 128) = v60;
        *(_BYTE *)(a9 + 144) = v59;
        v64 = *(_OWORD *)(a9 + 8);
        *(_OWORD *)(a9 + 8) = *(_OWORD *)(a9 + 24);
        *(_OWORD *)(a9 + 24) = v64;
      }
    }
  }
LABEL_39:
  *(_QWORD *)a9 = v22;
}

uint64_t sub_100B7F5A4(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v5 = a2[1];
  v4 = a2[2];
  v7 = a1[1];
  v6 = a1[2];
  v8 = v7 * v4 - v6 * v5;
  v9 = v6 * *a2 - *a1 * v4;
  v10 = *a1 * v5 - v7 * *a2;
  a3[1] = v9;
  a3[2] = v10;
  v11 = sqrt(v10 * v10 + v9 * v9 + v8 * v8);
  *a3 = v8 / v11;
  *a4 = -(v8 / v11);
  v12 = a3[1] / v11;
  a3[1] = v12;
  a4[1] = -v12;
  v13 = a3[2] / v11;
  a3[2] = v13;
  a4[2] = -v13;
  return 1;
}

double sub_100B7F620(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  double result;
  uint64_t v6;
  uint64_t v7;

  switch(*(_DWORD *)(a1 + 72))
  {
    case 0:
      result = sub_100B7F698((_QWORD *)a1);
      *(double *)a2 = result;
      *(_QWORD *)(a2 + 8) = v6;
      return result;
    case 1:
      v7 = *a3;
      goto LABEL_7;
    case 2:
      v7 = a3[1];
      goto LABEL_7;
    case 3:
      v7 = *a4;
      goto LABEL_7;
    default:
      v7 = a4[1];
LABEL_7:
      *(_QWORD *)a2 = *(_QWORD *)v7;
      result = *(double *)(v7 + 8);
      *(double *)(a2 + 8) = result;
      return result;
  }
}

double sub_100B7F698(_QWORD *a1)
{
  long double v1;
  long double v2;
  long double v3;
  unsigned __int8 v4;
  double v5;
  unsigned __int8 v6;
  long double v7;
  double v9;
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v2 = *(double *)a1;
  v1 = *((double *)a1 + 1);
  v3 = *((double *)a1 + 2);
  v4 = atomic_load((unsigned __int8 *)&qword_1022F9BE8);
  if ((v4 & 1) == 0)
  {
    v13 = *(double *)a1;
    v9 = *((double *)a1 + 1);
    v10 = __cxa_guard_acquire(&qword_1022F9BE8);
    v1 = v9;
    v2 = v13;
    if (v10)
    {
      qword_1022F9BE0 = 0x404CA5DC1A63C1F8;
      __cxa_guard_release(&qword_1022F9BE8);
      v1 = v9;
      v2 = v13;
    }
  }
  v5 = *(double *)&qword_1022F9BE0;
  v6 = atomic_load((unsigned __int8 *)&qword_1022F9BE8);
  if ((v6 & 1) == 0)
  {
    v12 = v1;
    v14 = v2;
    v11 = __cxa_guard_acquire(&qword_1022F9BE8);
    v1 = v12;
    v2 = v14;
    if (v11)
    {
      qword_1022F9BE0 = 0x404CA5DC1A63C1F8;
      __cxa_guard_release(&qword_1022F9BE8);
      v1 = v12;
      v2 = v14;
    }
  }
  v7 = v5 * atan2(v1, v2);
  v15 = asin(v3) * *(double *)&qword_1022F9BE0;
  v16 = v7;
  sub_100778A68(&v16, &v15, 1);
  return v16;
}

uint64_t sub_100B7F7B8(uint64_t a1)
{
  uint64_t v2;
  double *v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(double **)(v2 + 24);
  if (!*(_BYTE *)(v2 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a1 + 8), *(double **)(v2 + 24), v2 + 32);
    *(_OWORD *)(v2 + 64) = *(_OWORD *)*(_QWORD *)(v2 + 32);
    *(_BYTE *)(v2 + 80) = 1;
  }
  return sub_10077970C(v3, (double *)(v2 + 64), *(double **)(*(_QWORD *)(a1 + 16) + 24));
}

__n128 sub_100B7F820(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 20 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B7F8FC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x14)) + 200 * (v7 % 0x14);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 96) = v13;
  result = *(__n128 *)(a2 + 144);
  v16 = *(_OWORD *)(a2 + 160);
  v17 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(v8 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 176) = v17;
  *(__n128 *)(v8 + 144) = result;
  ++a1[5];
  return result;
}

void sub_100B7F8FC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x14;
  v4 = v2 - 20;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFA0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFA0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFA0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100B7FBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B7FC10(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x70A3D70A3D70A3D7 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 19 - v3;
      v6 = &v2[-(v5 / 0x14)];
      *result = v6;
      v4 = *v6 + 200 * (20 * (v5 / 0x14) - v5) + 3800;
    }
    else
    {
      *result = &v2[v3 / 0x14];
      v4 = v2[v3 / 0x14] + 200 * (v3 % 0x14);
    }
    result[1] = v4;
  }
  return result;
}

_QWORD *sub_100B7FCB4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  double *v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  double *v67;
  void *v68;
  char v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *__p;
  char v81;

  v3 = a2[1];
  if (a2[2] == v3
    || (v4 = a2[4],
        v5 = *(_QWORD *)(v3 + 8 * (v4 / 0x14)),
        v6 = v4 % 0x14,
        v7 = v5 + 200 * (v4 % 0x14),
        v7 == *(_QWORD *)(v3 + 8 * ((a2[5] + v4) / 0x14)) + 200 * ((a2[5] + v4) % 0x14)))
  {
    sub_10191B760((uint64_t)a1, (uint64_t)a2, a3);
  }
  v9 = sub_100263F7C(a1, (uint64_t)". A self-intersection point was found at ", 41);
  sub_1015A2E04(v65, ", ");
  sub_1015A2E04(v63, "(");
  sub_1015A2E04(v61, ")");
  sub_1015A2E04(v59, ", ");
  sub_1015A2E04(v57, "(");
  sub_1015A2E04(v55, ")");
  sub_1015A2E04(v53, ", ");
  sub_100B73D38(v7, (__int128 *)v65, (__int128 *)v63, (__int128 *)v61, (__int128 *)v59, (__int128 *)v57, (__int128 *)v55, (__int128 *)v53, (uint64_t)&v67);
  v10 = v67;
  if ((v71 & 0x80u) == 0)
    v11 = v70;
  else
    v11 = (void **)v70[0];
  if ((v71 & 0x80u) == 0)
    v12 = v71;
  else
    v12 = (uint64_t)v70[1];
  sub_100263F7C(v9, (uint64_t)v11, v12);
  sub_100B73DFC(v9, v10, (uint64_t)&v68);
  if ((v73 & 0x80u) == 0)
    v13 = v72;
  else
    v13 = (void **)v72[0];
  if ((v73 & 0x80u) == 0)
    v14 = v73;
  else
    v14 = (uint64_t)v72[1];
  sub_100263F7C(v9, (uint64_t)v13, v14);
  std::ostream::flush(v9);
  if (v81 < 0)
    operator delete(__p);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if ((char)v73 < 0)
    operator delete(v72[0]);
  if ((char)v71 < 0)
    operator delete(v70[0]);
  if (v69 < 0)
    operator delete(v68);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  v15 = sub_100263F7C(a1, (uint64_t)"; method: ", 10);
  v16 = *(int *)(v5 + 200 * v6 + 16);
  v17 = 63;
  if (v16 <= 8)
    v17 = aDitmces[v16];
  LOBYTE(v67) = v17;
  v18 = sub_100263F7C(v15, (uint64_t)&v67, 1);
  v19 = sub_100263F7C(v18, (uint64_t)"; operations: ", 14);
  v20 = v5 + 200 * v6;
  v21 = *(unsigned int *)(v20 + 40);
  if (v21 >= 6)
    v22 = 63;
  else
    v22 = 0x6F637869752DuLL >> (8 * v21);
  LOBYTE(v67) = v22;
  v23 = sub_100263F7C(v19, (uint64_t)&v67, 1);
  v24 = sub_100263F7C(v23, (uint64_t)"/", 1);
  v25 = *(unsigned int *)(v20 + 120);
  if (v25 >= 6)
    v26 = 63;
  else
    v26 = 0x6F637869752DuLL >> (8 * v25);
  LOBYTE(v67) = v26;
  v27 = sub_100263F7C(v24, (uint64_t)&v67, 1);
  sub_100263F7C(v27, (uint64_t)"; segment IDs {source, multi, ring, segment}: ", 46);
  v28 = *(_QWORD *)(v20 + 48);
  v29 = *(_QWORD *)(v20 + 56);
  v30 = *(_QWORD *)(v20 + 64);
  v31 = *(_QWORD *)(v20 + 72);
  v32 = sub_100263F7C(a1, (uint64_t)"{", 1);
  v33 = (_QWORD *)std::ostream::operator<<(v32, v28);
  v34 = sub_100263F7C(v33, (uint64_t)", ", 2);
  v35 = (_QWORD *)std::ostream::operator<<(v34, v29);
  v36 = sub_100263F7C(v35, (uint64_t)", ", 2);
  v37 = (_QWORD *)std::ostream::operator<<(v36, v30);
  v38 = sub_100263F7C(v37, (uint64_t)", ", 2);
  v39 = (_QWORD *)std::ostream::operator<<(v38, v31);
  sub_100263F7C(v39, (uint64_t)"}", 1);
  sub_100263F7C(a1, (uint64_t)"/", 1);
  v40 = *(_QWORD *)(v20 + 128);
  v41 = *(_QWORD *)(v20 + 136);
  v42 = *(_QWORD *)(v20 + 144);
  v43 = *(_QWORD *)(v20 + 152);
  v44 = sub_100263F7C(a1, (uint64_t)"{", 1);
  v45 = (_QWORD *)std::ostream::operator<<(v44, v40);
  v46 = sub_100263F7C(v45, (uint64_t)", ", 2);
  v47 = (_QWORD *)std::ostream::operator<<(v46, v41);
  v48 = sub_100263F7C(v47, (uint64_t)", ", 2);
  v49 = (_QWORD *)std::ostream::operator<<(v48, v42);
  v50 = sub_100263F7C(v49, (uint64_t)", ", 2);
  v51 = (_QWORD *)std::ostream::operator<<(v50, v43);
  return sub_100263F7C(v51, (uint64_t)"}", 1);
}

void sub_100B80120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(exception_object);
}

BOOL sub_100B801DC(uint64_t a1, uint64_t a2, double **a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, std::string **a8, uint64_t a9)
{
  uint64_t v10;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD **v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  double *v27;
  _QWORD **v28;
  double *v29;
  double *v30;
  BOOL v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD **v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  _BOOL8 v54;
  int v55;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  void *__p;
  char *v66;
  char *v67;
  uint64_t *v68;
  _QWORD *v69[2];

  v10 = a5;
  v69[0] = 0;
  v69[1] = 0;
  v13 = v69;
  v68 = (uint64_t *)v69;
  if (a5 != a7)
  {
    v14 = a5;
    v15 = a4;
    while (1)
    {
      v16 = (uint64_t *)(v14 + 144);
      v17 = *(_QWORD *)(v14 + 144);
      if (*(_QWORD *)(v14 + 64) == -1)
        break;
      if (v17 == -1)
      {
        v16 = (uint64_t *)(v14 + 64);
LABEL_7:
        sub_100210784(&v68, v16, v16);
      }
      v14 += 200;
      if (v14 - *v15 == 4000)
      {
        v18 = v15[1];
        ++v15;
        v14 = v18;
      }
      if (v14 == a7)
        goto LABEL_11;
    }
    if (v17 == -1)
      __assert_rtn("are_holes_inside", "polygon.hpp", 284, "tit->operations[1].seg_id.ring_index != -1");
    goto LABEL_7;
  }
LABEL_11:
  if (a1 != a2)
  {
    v19 = 0;
    v20 = a1;
    v59 = a2;
    do
    {
      v21 = v69[0];
      if (!v69[0])
        goto LABEL_22;
      v22 = v13;
      do
      {
        v23 = v21;
        v24 = v22;
        v25 = v21[4];
        v26 = v21 + 1;
        if (v25 >= v19)
        {
          v26 = v23;
          v22 = (_QWORD **)v23;
        }
        v21 = (_QWORD *)*v26;
      }
      while (v21);
      if (v22 == v13)
        goto LABEL_22;
      if (v25 < v19)
        v23 = v24;
      if (v19 < v23[4])
      {
LABEL_22:
        v27 = *(double **)v20;
        if (*(_QWORD *)v20 == *(_QWORD *)(v20 + 8))
          __assert_rtn("front", "range.hpp", 121, "!boost::empty(rng)");
        v28 = v13;
        v30 = *a3;
        v29 = a3[1];
        if ((unint64_t)((char *)v29 - (char *)*a3) < 0x40
          || (LOBYTE(__p) = 0, v63 = 0uLL, LOBYTE(v64) = 0, v30 + 2 == v29))
        {
LABEL_76:
          sub_100B72AF4(a8, 30);
          v54 = 0;
          goto LABEL_77;
        }
        do
        {
          v31 = sub_100779378((uint64_t)&__p, v27, v30, v30 + 2, (uint64_t)&v63);
          v32 = v30 + 4 != v29 && v31;
          v30 += 2;
        }
        while (v32);
        a2 = v59;
        if (!(_BYTE)v64)
        {
          if (DWORD2(v63) && HIDWORD(v63) && SDWORD2(v63) >= 1)
          {
            if (!((_DWORD)v63 + DWORD1(v63)))
              goto LABEL_76;
          }
          else if (!(_DWORD)v63)
          {
            goto LABEL_76;
          }
        }
        v13 = v28;
      }
      v20 += 24;
      ++v19;
    }
    while (v20 != a2);
  }
  v33 = a4;
  while (v10 != a7)
  {
    sub_100210784(&v68, (uint64_t *)(v10 + 64), (uint64_t *)(v10 + 64));
    sub_100210784(&v68, (uint64_t *)(v10 + 144), (uint64_t *)(v10 + 144));
    v10 += 200;
    if (v10 - *v33 == 4000)
    {
      v34 = v33[1];
      ++v33;
      v10 = v34;
    }
  }
  __p = 0;
  v66 = 0;
  v67 = 0;
  if (a1 != a2)
  {
    v35 = 0;
    v36 = 0;
    do
    {
      v37 = v69[0];
      if (!v69[0])
        goto LABEL_53;
      v38 = v13;
      do
      {
        v39 = v37;
        v40 = v38;
        v41 = v37[4];
        v42 = v37 + 1;
        if (v41 >= v36)
        {
          v42 = v39;
          v38 = (_QWORD **)v39;
        }
        v37 = (_QWORD *)*v42;
      }
      while (v37);
      if (v38 == v13)
        goto LABEL_53;
      if (v41 < v36)
        v39 = v40;
      if (v36 < v39[4])
      {
LABEL_53:
        if (v35 >= v67)
        {
          v44 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (_BYTE *)__p) >> 4);
          v45 = v44 + 1;
          if (v44 + 1 > 0x555555555555555)
            sub_100259694();
          if (0x5555555555555556 * ((v67 - (_BYTE *)__p) >> 4) > v45)
            v45 = 0x5555555555555556 * ((v67 - (_BYTE *)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((v67 - (_BYTE *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v46 = 0x555555555555555;
          else
            v46 = v45;
          if (v46)
            v47 = (char *)sub_100313718((uint64_t)&v67, v46);
          else
            v47 = 0;
          v48 = &v47[48 * v44];
          *(_QWORD *)v48 = a1;
          v48[40] = 0;
          v50 = (char *)__p;
          v49 = v66;
          v51 = v48;
          if (v66 != __p)
          {
            do
            {
              v52 = *((_OWORD *)v49 - 3);
              v53 = *((_OWORD *)v49 - 2);
              *(_OWORD *)(v51 - 23) = *(_OWORD *)(v49 - 23);
              *((_OWORD *)v51 - 3) = v52;
              *((_OWORD *)v51 - 2) = v53;
              v51 -= 48;
              v49 -= 48;
            }
            while (v49 != v50);
            v49 = v50;
          }
          v35 = v48 + 48;
          __p = v51;
          v66 = v48 + 48;
          v67 = &v47[48 * v46];
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_QWORD *)v35 = a1;
          v43 = v63;
          *(_OWORD *)(v35 + 24) = v64;
          *(_OWORD *)(v35 + 8) = v43;
          v35[40] = 0;
          v35 += 48;
        }
        v66 = v35;
      }
      a1 += 24;
      ++v36;
    }
    while (a1 != a2);
  }
  LOBYTE(v63) = 0;
  *((_QWORD *)&v63 + 1) = a9;
  v61 = a9;
  v62 = a9;
  sub_100B806A4((uint64_t *)&__p, (uint64_t)&v63, (uint64_t)&v62, (uint64_t)&v61, 0x10uLL);
  v54 = (_BYTE)v63 == 0;
  if ((_BYTE)v63)
    v55 = 31;
  else
    v55 = 0;
  sub_100B72AF4(a8, v55);
  if (__p)
  {
    v66 = (char *)__p;
    operator delete(__p);
  }
LABEL_77:
  sub_100008848((uint64_t)&v68, v69[0]);
  return v54;
}

void sub_100B80654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  sub_100008848((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100B806A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  double ***v7;
  uint64_t v8;
  uint64_t v12;
  double ***v13;
  double **v14;
  double **v15;
  unsigned __int8 *v16;
  BOOL v17;
  void *__p;
  void *v20;
  uint64_t v21;
  char v22;
  _OWORD v23[2];

  v8 = *a1;
  v7 = (double ***)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 4) <= a5)
  {
    if ((double ***)v8 == v7)
    {
      return 1;
    }
    else
    {
      while (1)
      {
        v13 = (double ***)v8;
        v8 += 48;
        if ((double ***)v8 != v7)
          break;
LABEL_19:
        if ((double ***)v8 == v7)
          return 1;
      }
      v7 = (double ***)v8;
      while (1)
      {
        if (!*(_BYTE *)a2)
        {
          v14 = *v13;
          v15 = *v7;
          v16 = *(unsigned __int8 **)(a2 + 8);
          strcpy((char *)v23, "FFFFFFFFF");
          sub_100B83710(v14, v15, (unsigned __int8 *)v23, v16);
          if (!BYTE9(v23[0]))
          {
            v17 = LOBYTE(v23[0]) != 84 && LOBYTE(v23[0]) - 48 >= 0xA;
            if (!v17
              || BYTE1(v23[0]) == 84
              || BYTE1(v23[0]) - 48 <= 9
              || BYTE3(v23[0]) == 84
              || BYTE3(v23[0]) - 48 < 0xA)
            {
              break;
            }
          }
        }
        v7 += 6;
        if (v7 == (double ***)a1[1])
          goto LABEL_19;
      }
      v12 = 0;
      *(_BYTE *)a2 = 1;
    }
  }
  else
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    v23[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v23[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    sub_100B8089C(a1, (double *)v23, &__p);
    v12 = sub_100B809CC((double *)v23, (uint64_t **)&__p, 0, a5, a2, a3, a4, (uint64_t)&v22);
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_100B80878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100B8089C(uint64_t *a1, double *a2, void **a3)
{
  uint64_t v3;
  uint64_t v7;
  double *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v3 = *a1;
  if (*a1 != a1[1])
  {
    v7 = (uint64_t)(a3 + 2);
    do
    {
      v8 = (double *)sub_100B80F20(v3);
      sub_100B77C14(a2, v8);
      v10 = (uint64_t *)a3[1];
      v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        v12 = ((char *)v10 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          sub_100259694();
        v13 = v9 - (_QWORD)*a3;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)sub_10025E6A0(v7, v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[8 * v12];
        *v17 = v3;
        v11 = v17 + 1;
        v19 = (char *)*a3;
        v18 = (char *)a3[1];
        if (v18 != *a3)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = (char *)*a3;
        }
        *a3 = v17;
        a3[1] = v11;
        a3[2] = &v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v10 = v3;
        v11 = v10 + 1;
      }
      a3[1] = v11;
      v3 += 48;
    }
    while (v3 != a1[1]);
  }
}

uint64_t sub_100B809CC(double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  double *v17;
  double ****v18;
  double ****v19;
  double **v20;
  double **v21;
  unsigned __int8 *v22;
  BOOL v23;
  double ****v24;
  double ****v25;
  double ****v26;
  double **v27;
  double **v28;
  unsigned __int8 *v29;
  BOOL v30;
  double ****v31;
  double ****v32;
  uint64_t v33;
  double ****v34;
  double **v35;
  double **v36;
  unsigned __int8 *v37;
  BOOL v38;
  int64x2_t v41;
  int64x2_t v42;
  void *__p;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  double ****v47;
  uint64_t v48;
  void *v49;
  double ****v50;
  uint64_t v51;
  double v52[2];
  __int128 v53;
  __int128 v54;
  double v55;
  uint64_t v56;
  int64x2_t v57;
  int64x2_t v58;

  v13 = (*a1 + a1[2]) * 0.5;
  v14 = *((_OWORD *)a1 + 1);
  v54 = *(_OWORD *)a1;
  v56 = *((_QWORD *)&v14 + 1);
  v52[1] = *((double *)&v54 + 1);
  v53 = v14;
  v55 = v13;
  v52[0] = v13;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  __p = 0;
  v44 = 0;
  v45 = 0;
  sub_100B8121C((double *)&v54, v52, a2, &v49, &v46, &__p, a7);
  v15 = (uint64_t *)__p;
  if (__p != v44)
  {
    v41 = 0u;
    v42 = 0u;
    v57 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v58 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v16 = -(uint64_t)__p;
    do
    {
      v17 = (double *)sub_100B80F20(*v15);
      sub_100B77C14((double *)v57.i64, v17);
      ++v15;
      v16 -= 8;
    }
    while (v15 != v44);
    v41 = v57;
    v42 = v58;
    v18 = (double ****)__p;
    if (a3 > 0x63 || -((uint64_t)__p + v16) >> 3 < a4)
    {
      if (v15 != __p)
      {
        while (1)
        {
          v19 = v18++;
          if (v18 != (double ****)v15)
            break;
LABEL_23:
          if (v18 == (double ****)v15)
            goto LABEL_24;
        }
        v15 = (uint64_t *)v18;
        while (1)
        {
          if (!*(_BYTE *)a5)
          {
            v20 = **v19;
            v21 = *(double ***)*v15;
            v22 = *(unsigned __int8 **)(a5 + 8);
            strcpy(v57.i8, "FFFFFFFFF");
            sub_100B83710(v20, v21, (unsigned __int8 *)&v57, v22);
            if (!v57.i8[9])
            {
              v23 = v57.u8[0] != 84 && v57.u8[0] - 48 >= 0xA;
              if (!v23
                || v57.u8[1] == 84
                || v57.u8[1] - 48 <= 9
                || v57.u8[3] == 84
                || v57.u8[3] - 48 < 0xA)
              {
                break;
              }
            }
          }
          if (++v15 == v44)
            goto LABEL_23;
        }
        *(_BYTE *)a5 = 1;
        goto LABEL_50;
      }
    }
    else if (!sub_100B818B0((double *)v41.i64, (uint64_t **)&__p, a3 + 1, a4, a5, a6, a7, a8))
    {
LABEL_50:
      v33 = 0;
      goto LABEL_69;
    }
LABEL_24:
    if (!sub_100B81508((double *)v41.i64, (uint64_t **)&__p, (uint64_t **)&v49, a3, a4, a5, a6, a7, a8)
      || (sub_100B81508((double *)v41.i64, (uint64_t **)&__p, (uint64_t **)&v46, a3, a4, a5, a6, a7, a8) & 1) == 0)
    {
      goto LABEL_50;
    }
  }
  v25 = (double ****)v49;
  v24 = v50;
  if (a3 > 0x63 || ((char *)v50 - (_BYTE *)v49) >> 3 < a4)
  {
    if (v49 != v50)
    {
      while (1)
      {
        v26 = v25++;
        if (v25 != v24)
          break;
LABEL_45:
        if (v25 == v24)
          goto LABEL_46;
      }
      v24 = v25;
      while (1)
      {
        if (!*(_BYTE *)a5)
        {
          v27 = **v26;
          v28 = **v24;
          v29 = *(unsigned __int8 **)(a5 + 8);
          strcpy(v57.i8, "FFFFFFFFF");
          sub_100B83710(v27, v28, (unsigned __int8 *)&v57, v29);
          if (!v57.i8[9])
          {
            v30 = v57.u8[0] != 84 && v57.u8[0] - 48 >= 0xA;
            if (!v30
              || v57.u8[1] == 84
              || v57.u8[1] - 48 <= 9
              || v57.u8[3] == 84
              || v57.u8[3] - 48 < 0xA)
            {
              goto LABEL_68;
            }
          }
        }
        if (++v24 == v50)
          goto LABEL_45;
      }
    }
  }
  else if (!sub_100B818B0((double *)&v54, (uint64_t **)&v49, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_50;
  }
LABEL_46:
  v32 = (double ****)v46;
  v31 = v47;
  if (a3 <= 0x63 && ((char *)v47 - (_BYTE *)v46) >> 3 >= a4)
  {
    v33 = sub_100B818B0(v52, (uint64_t **)&v46, a3 + 1, a4, a5, a6, a7, a8);
    goto LABEL_69;
  }
  if (v46 != v47)
  {
    while (1)
    {
      v34 = v32++;
      if (v32 != v31)
        break;
LABEL_66:
      v33 = 1;
      if (v32 == v31)
        goto LABEL_69;
    }
    v31 = v32;
    while (1)
    {
      if (!*(_BYTE *)a5)
      {
        v35 = **v34;
        v36 = **v31;
        v37 = *(unsigned __int8 **)(a5 + 8);
        strcpy(v57.i8, "FFFFFFFFF");
        sub_100B83710(v35, v36, (unsigned __int8 *)&v57, v37);
        if (!v57.i8[9])
        {
          v38 = v57.u8[0] != 84 && v57.u8[0] - 48 >= 0xA;
          if (!v38
            || v57.u8[1] == 84
            || v57.u8[1] - 48 <= 9
            || v57.u8[3] == 84
            || v57.u8[3] - 48 < 0xA)
          {
            break;
          }
        }
      }
      if (++v31 == v47)
        goto LABEL_66;
    }
LABEL_68:
    v33 = 0;
    *(_BYTE *)a5 = 1;
    goto LABEL_69;
  }
  v33 = 1;
LABEL_69:
  if (__p)
  {
    v44 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v46)
  {
    v47 = (double ****)v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = (double ****)v49;
    operator delete(v49);
  }
  return v33;
}

void sub_100B80ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B80F20(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];

  if (!*(_BYTE *)(a1 + 40))
  {
    v2 = **(double ***)a1;
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if ((unint64_t)(v3 - (_QWORD)v2) <= 0x1F)
      v4 = 0;
    else
      v4 = -1;
    sub_100B80F94(v2, (unint64_t)(v3 - (_QWORD)v2) < 0x20, (double *)(v3 + 16 * v4), (unint64_t)(v3 - (_QWORD)v2) < 0x20, (uint64_t)v7);
    v5 = v7[1];
    *(_OWORD *)(a1 + 8) = v7[0];
    *(_OWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1 + 8;
}

void sub_100B80F94(double *a1, unsigned __int8 a2, double *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v19;
  _BOOL4 v20;
  double *v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double *v27[2];
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double *v32[8];

  *(int64x2_t *)a5 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a5 + 16) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a1 != a3)
  {
    v7 = a2;
    v8 = a1 + 2;
    v9 = a2 ? a1 : a1 + 2;
    v32[0] = a1;
    v32[1] = v9;
    sub_100B81168(v32, (double *)a5);
    if (v8 != a3)
    {
      v10 = v8;
      do
      {
        if (v7)
          v11 = v8;
        else
          v11 = v8 + 2;
        v27[0] = v8;
        v27[1] = v11;
        sub_100B81168(v27, (double *)v32);
        v12 = *(double *)a5;
        v13 = *(double *)(a5 + 16);
        v14 = *(double *)(a5 + 24);
        v15 = 0x7FEFFFFFFFFFFFFFLL;
        if (*(double *)a5 == 1.79769313e308
          && *(double *)(a5 + 8) == 1.79769313e308
          && v13 == -1.79769313e308
          && v14 == -1.79769313e308)
        {
          v21 = (double *)0xFFEFFFFFFFFFFFFFLL;
          v22 = (double *)0xFFEFFFFFFFFFFFFFLL;
          v23 = 0x7FEFFFFFFFFFFFFFLL;
        }
        else
        {
          v30 = *(_QWORD *)(a5 + 8);
          v31 = *(_QWORD *)&v12;
          v28 = v14;
          v29 = v13;
          v19 = vabdd_f64(v12, v13);
          if (v19 < 360.0)
          {
            if (COERCE_UNSIGNED_INT64(fabs(v12 - v13)) > 0x7FEFFFFFFFFFFFFFLL)
            {
              v20 = 0;
            }
            else
            {
              v24 = vabdd_f64(360.0, v19);
              v25 = fmax(v19, 360.0);
              if (v25 >= 1.0)
                v26 = v25 * 2.22044605e-16;
              else
                v26 = 2.22044605e-16;
              v20 = v24 <= v26;
            }
          }
          else
          {
            v20 = 1;
          }
          sub_100B76020((double *)&v31, (double *)&v30, &v29, &v28, v20);
          v15 = v30;
          v23 = v31;
          v21 = *(double **)&v28;
          v22 = *(double **)&v29;
        }
        v10 += 2;
        v32[4] = (double *)v23;
        v32[5] = (double *)v15;
        v32[6] = v22;
        v32[7] = v21;
        sub_100B75ACC((uint64_t)v32, (_QWORD *)a5);
        v8 += 2;
      }
      while (v10 != a3);
    }
  }
}

double sub_100B81168(double **a1, double *a2)
{
  double *v2;
  double *v3;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;

  v2 = *a1;
  if (!*a1)
    sub_10191BA6C();
  v3 = a1[1];
  if (!v3)
    sub_10191BA94();
  v5 = *v2;
  v6 = *v3;
  v7 = *((_QWORD *)v3 + 1);
  v18 = *((_QWORD *)v2 + 1);
  v19 = v5;
  sub_100778A68(&v19, (double *)&v18, 1);
  v9 = v18;
  v8 = v19;
  v18 = v7;
  v19 = v6;
  sub_100778A68(&v19, (double *)&v18, 1);
  v11 = v18;
  v10 = v19;
  v18 = v9;
  v19 = v8;
  v16 = v11;
  v17 = v10;
  sub_100B750FC(&v19, (double *)&v18, &v17, (double *)&v16);
  v13 = v18;
  result = v19;
  v15 = v16;
  v14 = v17;
  *a2 = v19;
  *((_QWORD *)a2 + 1) = v13;
  a2[2] = v14;
  *((_QWORD *)a2 + 3) = v15;
  return result;
}

void sub_100B8121C(double *a1, double *a2, uint64_t **a3, void **a4, void **a5, void **a6, uint64_t a7)
{
  uint64_t *v7;
  _BOOL4 v15;
  _BOOL4 v16;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v7 = *a3;
  if (*a3 != a3[1])
  {
    v54 = (uint64_t)(a5 + 2);
    v55 = (uint64_t)(a4 + 2);
    v56 = (uint64_t)(a6 + 2);
    do
    {
      v15 = sub_100B816A4(a7, a1, *v7);
      v16 = sub_100B816A4(a7, a2, *v7);
      if (!v15 || !v16)
      {
        if (v15)
        {
          v19 = (uint64_t *)a4[1];
          v18 = (unint64_t)a4[2];
          if ((unint64_t)v19 >= v18)
          {
            v32 = ((char *)v19 - (_BYTE *)*a4) >> 3;
            if ((unint64_t)(v32 + 1) >> 61)
              sub_100259694();
            v33 = v18 - (_QWORD)*a4;
            v34 = v33 >> 2;
            if (v33 >> 2 <= (unint64_t)(v32 + 1))
              v34 = v32 + 1;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v34;
            if (v35)
              v36 = (char *)sub_10025E6A0(v55, v35);
            else
              v36 = 0;
            v46 = (uint64_t *)&v36[8 * v32];
            *v46 = *v7;
            v20 = v46 + 1;
            v48 = (char *)*a4;
            v47 = (char *)a4[1];
            if (v47 != *a4)
            {
              do
              {
                v49 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *--v46 = v49;
              }
              while (v47 != v48);
              v47 = (char *)*a4;
            }
            *a4 = v46;
            a4[1] = v20;
            a4[2] = &v36[8 * v35];
            if (v47)
              operator delete(v47);
          }
          else
          {
            *v19 = *v7;
            v20 = v19 + 1;
          }
          a4[1] = v20;
        }
        else if (v16)
        {
          v25 = (uint64_t *)a5[1];
          v24 = (unint64_t)a5[2];
          if ((unint64_t)v25 >= v24)
          {
            v41 = ((char *)v25 - (_BYTE *)*a5) >> 3;
            if ((unint64_t)(v41 + 1) >> 61)
              sub_100259694();
            v42 = v24 - (_QWORD)*a5;
            v43 = v42 >> 2;
            if (v42 >> 2 <= (unint64_t)(v41 + 1))
              v43 = v41 + 1;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
              v44 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v44 = v43;
            if (v44)
              v45 = (char *)sub_10025E6A0(v54, v44);
            else
              v45 = 0;
            v50 = (uint64_t *)&v45[8 * v41];
            *v50 = *v7;
            v26 = v50 + 1;
            v52 = (char *)*a5;
            v51 = (char *)a5[1];
            if (v51 != *a5)
            {
              do
              {
                v53 = *((_QWORD *)v51 - 1);
                v51 -= 8;
                *--v50 = v53;
              }
              while (v51 != v52);
              v51 = (char *)*a5;
            }
            *a5 = v50;
            a5[1] = v26;
            a5[2] = &v45[8 * v44];
            if (v51)
              operator delete(v51);
          }
          else
          {
            *v25 = *v7;
            v26 = v25 + 1;
          }
          a5[1] = v26;
        }
      }
      else
      {
        v22 = (uint64_t *)a6[1];
        v21 = (unint64_t)a6[2];
        if ((unint64_t)v22 >= v21)
        {
          v27 = ((char *)v22 - (_BYTE *)*a6) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_100259694();
          v28 = v21 - (_QWORD)*a6;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
            v31 = (char *)sub_10025E6A0(v56, v30);
          else
            v31 = 0;
          v37 = (uint64_t *)&v31[8 * v27];
          *v37 = *v7;
          v23 = v37 + 1;
          v39 = (char *)*a6;
          v38 = (char *)a6[1];
          if (v38 != *a6)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *--v37 = v40;
            }
            while (v38 != v39);
            v38 = (char *)*a6;
          }
          *a6 = v37;
          a6[1] = v23;
          a6[2] = &v31[8 * v30];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v22 = *v7;
          v23 = v22 + 1;
        }
        a6[1] = v23;
      }
      ++v7;
    }
    while (v7 != a3[1]);
  }
}

uint64_t sub_100B81508(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  double **v15;
  double **v16;
  unsigned __int8 *v17;
  BOOL v18;
  uint64_t result;
  char v20[16];

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_100B82B58(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 == v12)
    return 1;
  v14 = a3[1];
  if (*a3 == v14)
    return 1;
  while (*a3 == v14)
  {
LABEL_19:
    if (++v13 == v12)
      return 1;
  }
  v14 = *a3;
  while (1)
  {
    if (!*(_BYTE *)a6)
    {
      v15 = *(double ***)*v13;
      v16 = *(double ***)*v14;
      v17 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v20, "FFFFFFFFF");
      sub_100B83710(v15, v16, (unsigned __int8 *)v20, v17);
      if (!v20[9])
      {
        v18 = v20[0] != 84 && v20[0] - 48 >= 0xA;
        if (!v18
          || v20[1] == 84
          || v20[1] - 48 <= 9
          || v20[3] == 84
          || v20[3] - 48 <= 9)
        {
          break;
        }
      }
    }
    if (++v14 == a3[1])
    {
      v12 = a2[1];
      goto LABEL_19;
    }
  }
  result = 0;
  *(_BYTE *)a6 = 1;
  return result;
}

BOOL sub_100B816A4(uint64_t a1, double *a2, uint64_t a3)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  BOOL v18;
  double v20;
  double v21;
  double v22;

  v4 = (double *)sub_100B80F20(a3);
  v5 = *v4;
  v6 = v4[2];
  if (v6 - *v4 >= 360.0)
    return v4[3] >= a2[1] && v4[1] <= a2[3];
  v7 = *a2;
  v8 = a2[2];
  v9 = v8 - *a2;
  if (v9 >= 360.0)
    return v4[3] >= a2[1] && v4[1] <= a2[3];
  v10 = vabdd_f64(v7, v5);
  v11 = 180.0;
  if (v10 == 180.0)
    goto LABEL_4;
  v12 = v7 - v5;
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v16 = fabs(v10 + -180.0);
    v11 = 180.0;
    if (v10 < 180.0)
      v10 = 180.0;
    v17 = v10 >= 1.0 ? v10 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 <= v17)
      goto LABEL_4;
  }
  v11 = 180.0;
  if (v12 <= 180.0)
  {
    if (v12 >= -180.0)
      goto LABEL_5;
    v11 = fmod(v12 + -180.0, 360.0) + 180.0;
LABEL_4:
    v12 = v11;
    goto LABEL_5;
  }
  v12 = fmod(v12 + 180.0, 360.0) + -180.0;
  if (v12 == -180.0)
    goto LABEL_4;
  v18 = ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v18 || *(_QWORD *)&v12 == 0)
  {
    v11 = 180.0;
    v20 = fabs(v12 + 180.0);
    v21 = fabs(v12);
    if (v21 < 180.0)
      v21 = 180.0;
    v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
    if (v20 <= v22)
      goto LABEL_4;
  }
LABEL_5:
  if (v12 < 0.0)
    v12 = v12 + 360.0;
  v13 = v5 + v12;
  v14 = v9 + v5 + v12 + -360.0;
  if (vabdd_f64(v14, v8) < 180.0)
    v14 = v8;
  if (v13 > v6 && v14 < v5)
    return 0;
  return v4[3] >= a2[1] && v4[1] <= a2[3];
}

uint64_t sub_100B818B0(double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v13;
  double v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  double *v18;
  double ****v19;
  double ****v20;
  double **v21;
  double **v22;
  unsigned __int8 *v23;
  BOOL v24;
  double ****v25;
  double ****v26;
  double ****v27;
  double **v28;
  double **v29;
  unsigned __int8 *v30;
  BOOL v31;
  double ****v32;
  double ****v33;
  uint64_t v34;
  double ****v35;
  double **v36;
  double **v37;
  unsigned __int8 *v38;
  BOOL v39;
  int64x2_t v42;
  int64x2_t v43;
  void *__p;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  double ****v48;
  uint64_t v49;
  void *v50;
  double ****v51;
  uint64_t v52;
  double v53[2];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  double v57;
  int64x2_t v58;
  int64x2_t v59;

  v13 = *(_OWORD *)a1;
  v14 = (a1[1] + a1[3]) * 0.5;
  v56 = *((_QWORD *)a1 + 2);
  v15 = *((_OWORD *)a1 + 1);
  *(_QWORD *)&v53[0] = v13;
  v54 = v15;
  v55 = v13;
  v57 = v14;
  v53[1] = v14;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  __p = 0;
  v45 = 0;
  v46 = 0;
  sub_100B8121C((double *)&v55, v53, a2, &v50, &v47, &__p, a7);
  v16 = (uint64_t *)__p;
  if (__p != v45)
  {
    v42 = 0u;
    v43 = 0u;
    v58 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v59 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v17 = -(uint64_t)__p;
    do
    {
      v18 = (double *)sub_100B80F20(*v16);
      sub_100B77C14((double *)v58.i64, v18);
      ++v16;
      v17 -= 8;
    }
    while (v16 != v45);
    v42 = v58;
    v43 = v59;
    v19 = (double ****)__p;
    if (a3 > 0x63 || -((uint64_t)__p + v17) >> 3 < a4)
    {
      if (v16 != __p)
      {
        while (1)
        {
          v20 = v19++;
          if (v19 != (double ****)v16)
            break;
LABEL_23:
          if (v19 == (double ****)v16)
            goto LABEL_24;
        }
        v16 = (uint64_t *)v19;
        while (1)
        {
          if (!*(_BYTE *)a5)
          {
            v21 = **v20;
            v22 = *(double ***)*v16;
            v23 = *(unsigned __int8 **)(a5 + 8);
            strcpy(v58.i8, "FFFFFFFFF");
            sub_100B83710(v21, v22, (unsigned __int8 *)&v58, v23);
            if (!v58.i8[9])
            {
              v24 = v58.u8[0] != 84 && v58.u8[0] - 48 >= 0xA;
              if (!v24
                || v58.u8[1] == 84
                || v58.u8[1] - 48 <= 9
                || v58.u8[3] == 84
                || v58.u8[3] - 48 < 0xA)
              {
                break;
              }
            }
          }
          if (++v16 == v45)
            goto LABEL_23;
        }
        *(_BYTE *)a5 = 1;
        goto LABEL_50;
      }
    }
    else if (!sub_100B809CC(&v42, &__p, a3 + 1, a4, a5, a6, a7, a8))
    {
LABEL_50:
      v34 = 0;
      goto LABEL_69;
    }
LABEL_24:
    if (!sub_100B81E10((double *)v42.i64, (uint64_t **)&__p, (uint64_t **)&v50, a3, a4, a5, a6, a7, a8)
      || (sub_100B81E10((double *)v42.i64, (uint64_t **)&__p, (uint64_t **)&v47, a3, a4, a5, a6, a7, a8) & 1) == 0)
    {
      goto LABEL_50;
    }
  }
  v26 = (double ****)v50;
  v25 = v51;
  if (a3 > 0x63 || ((char *)v51 - (_BYTE *)v50) >> 3 < a4)
  {
    if (v50 != v51)
    {
      while (1)
      {
        v27 = v26++;
        if (v26 != v25)
          break;
LABEL_45:
        if (v26 == v25)
          goto LABEL_46;
      }
      v25 = v26;
      while (1)
      {
        if (!*(_BYTE *)a5)
        {
          v28 = **v27;
          v29 = **v25;
          v30 = *(unsigned __int8 **)(a5 + 8);
          strcpy(v58.i8, "FFFFFFFFF");
          sub_100B83710(v28, v29, (unsigned __int8 *)&v58, v30);
          if (!v58.i8[9])
          {
            v31 = v58.u8[0] != 84 && v58.u8[0] - 48 >= 0xA;
            if (!v31
              || v58.u8[1] == 84
              || v58.u8[1] - 48 <= 9
              || v58.u8[3] == 84
              || v58.u8[3] - 48 < 0xA)
            {
              goto LABEL_68;
            }
          }
        }
        if (++v25 == v51)
          goto LABEL_45;
      }
    }
  }
  else if (!sub_100B809CC(&v55, &v50, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_50;
  }
LABEL_46:
  v33 = (double ****)v47;
  v32 = v48;
  if (a3 <= 0x63 && ((char *)v48 - (_BYTE *)v47) >> 3 >= a4)
  {
    v34 = sub_100B809CC(v53, &v47, a3 + 1, a4, a5, a6, a7, a8);
    goto LABEL_69;
  }
  if (v47 != v48)
  {
    while (1)
    {
      v35 = v33++;
      if (v33 != v32)
        break;
LABEL_66:
      v34 = 1;
      if (v33 == v32)
        goto LABEL_69;
    }
    v32 = v33;
    while (1)
    {
      if (!*(_BYTE *)a5)
      {
        v36 = **v35;
        v37 = **v32;
        v38 = *(unsigned __int8 **)(a5 + 8);
        strcpy(v58.i8, "FFFFFFFFF");
        sub_100B83710(v36, v37, (unsigned __int8 *)&v58, v38);
        if (!v58.i8[9])
        {
          v39 = v58.u8[0] != 84 && v58.u8[0] - 48 >= 0xA;
          if (!v39
            || v58.u8[1] == 84
            || v58.u8[1] - 48 <= 9
            || v58.u8[3] == 84
            || v58.u8[3] - 48 < 0xA)
          {
            break;
          }
        }
      }
      if (++v32 == v48)
        goto LABEL_66;
    }
LABEL_68:
    v34 = 0;
    *(_BYTE *)a5 = 1;
    goto LABEL_69;
  }
  v34 = 1;
LABEL_69:
  if (__p)
  {
    v45 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v47)
  {
    v48 = (double ****)v47;
    operator delete(v47);
  }
  if (v50)
  {
    v51 = (double ****)v50;
    operator delete(v50);
  }
  return v34;
}

void sub_100B81DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B81E10(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  double **v15;
  double **v16;
  unsigned __int8 *v17;
  BOOL v18;
  uint64_t result;
  char v20[16];

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_100B81FAC(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 == v12)
    return 1;
  v14 = a3[1];
  if (*a3 == v14)
    return 1;
  while (*a3 == v14)
  {
LABEL_19:
    if (++v13 == v12)
      return 1;
  }
  v14 = *a3;
  while (1)
  {
    if (!*(_BYTE *)a6)
    {
      v15 = *(double ***)*v13;
      v16 = *(double ***)*v14;
      v17 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v20, "FFFFFFFFF");
      sub_100B83710(v15, v16, (unsigned __int8 *)v20, v17);
      if (!v20[9])
      {
        v18 = v20[0] != 84 && v20[0] - 48 >= 0xA;
        if (!v18
          || v20[1] == 84
          || v20[1] - 48 <= 9
          || v20[3] == 84
          || v20[3] - 48 <= 9)
        {
          break;
        }
      }
    }
    if (++v14 == a3[1])
    {
      v12 = a2[1];
      goto LABEL_19;
    }
  }
  result = 0;
  *(_BYTE *)a6 = 1;
  return result;
}

uint64_t sub_100B81FAC(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t *v19;
  double ****v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  double *v27;
  double **v28;
  double **v29;
  unsigned __int8 *v30;
  BOOL v31;
  double ****v32;
  uint64_t *v33;
  uint64_t *v34;
  double **v35;
  double **v36;
  unsigned __int8 *v37;
  BOOL v38;
  double ****v39;
  double **v40;
  double **v41;
  unsigned __int8 *v42;
  BOOL v43;
  int64x2_t v44;
  int64x2_t v45;
  double *v46;
  uint64_t *v47;
  double ****v48;
  double ****v49;
  double ****v50;
  double **v51;
  double **v52;
  unsigned __int8 *v53;
  BOOL v54;
  double ****v55;
  double ****v56;
  double ****v58;
  double ****v59;
  double ****v60;
  double **v61;
  double **v62;
  unsigned __int8 *v63;
  BOOL v64;
  double ****v65;
  double ****v66;
  double ****v67;
  double **v68;
  double **v69;
  unsigned __int8 *v70;
  BOOL v71;
  uint64_t v72;
  double *v73;
  double **v74;
  double **v75;
  unsigned __int8 *v76;
  BOOL v77;
  int64x2_t v80;
  int64x2_t v81;
  void *__p;
  double ****v83;
  uint64_t v84;
  void *v85;
  double ****v86;
  uint64_t v87;
  void *v88;
  double ****v89;
  uint64_t v90;
  void *v91;
  uint64_t *v92;
  uint64_t v93;
  void *v94;
  double ****v95;
  uint64_t v96;
  void *v97;
  double ****v98;
  uint64_t v99;
  double v100[2];
  __int128 v101;
  __int128 v102;
  double v103;
  uint64_t v104;
  int64x2_t v105;
  int64x2_t v106;

  v16 = (*a1 + a1[2]) * 0.5;
  v17 = *((_OWORD *)a1 + 1);
  v102 = *(_OWORD *)a1;
  v104 = *((_QWORD *)&v17 + 1);
  v100[1] = *((double *)&v102 + 1);
  v101 = v17;
  v103 = v16;
  v100[0] = v16;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  __p = 0;
  v83 = 0;
  v84 = 0;
  sub_100B8121C((double *)&v102, v100, a2, &v97, &v94, &v91, a8);
  sub_100B8121C((double *)&v102, v100, a3, &v88, &v85, &__p, a10);
  v19 = (uint64_t *)v91;
  v18 = v92;
  if (v91 == v92)
    goto LABEL_77;
  v20 = v83;
  if (a5 > ((char *)v92 - (_BYTE *)v91) >> 3 || a4 > 0x63 || ((char *)v83 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v83)
    {
      while (__p == v20)
      {
LABEL_28:
        if (++v19 == v18)
          goto LABEL_29;
      }
      v20 = (double ****)__p;
      while (1)
      {
        if (!*(_BYTE *)a6)
        {
          v28 = *(double ***)*v19;
          v29 = **v20;
          v30 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v105.i8, "FFFFFFFFF");
          sub_100B83710(v28, v29, (unsigned __int8 *)&v105, v30);
          if (!v105.i8[9])
          {
            v31 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
            if (!v31
              || v105.u8[1] == 84
              || v105.u8[1] - 48 <= 9
              || v105.u8[3] == 84
              || v105.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }
        if (++v20 == v83)
        {
          v18 = v92;
          goto LABEL_28;
        }
      }
    }
  }
  else
  {
    v80 = 0u;
    v81 = 0u;
    v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v106 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      v21 = (double *)sub_100B80F20(*v19);
      sub_100B77C14((double *)v105.i64, v21);
      ++v19;
    }
    while (v19 != v92);
    v23 = v105.i64[1];
    v22 = v105.i64[0];
    v25 = v106.i64[1];
    v24 = v106.i64[0];
    v26 = (uint64_t *)__p;
    if (__p != v83)
    {
      do
      {
        v27 = (double *)sub_100B80F20(*v26);
        sub_100B77C14((double *)v105.i64, v27);
        ++v26;
      }
      while (v26 != (uint64_t *)v83);
      v23 = v105.i64[1];
      v22 = v105.i64[0];
      v25 = v106.i64[1];
      v24 = v106.i64[0];
    }
    v80.i64[0] = v22;
    v80.i64[1] = v23;
    v81.i64[0] = v24;
    v81.i64[1] = v25;
    if ((sub_100B82B58(&v80, &v91, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      goto LABEL_155;
  }
LABEL_29:
  v32 = v89;
  if (a5 > ((char *)v89 - (_BYTE *)v88) >> 3)
  {
    v34 = (uint64_t *)v91;
    v33 = v92;
    goto LABEL_32;
  }
  v34 = (uint64_t *)v91;
  v33 = v92;
  if (a5 > ((char *)v86 - (_BYTE *)v85) >> 3 || a4 > 0x63 || ((char *)v92 - (_BYTE *)v91) >> 3 < a5)
  {
LABEL_32:
    if (v88 != v89 && v34 != v33)
    {
      while (v88 == v32)
      {
LABEL_49:
        if (++v34 == v33)
        {
          v34 = (uint64_t *)v91;
          goto LABEL_51;
        }
      }
      v32 = (double ****)v88;
      while (1)
      {
        if (!*(_BYTE *)a6)
        {
          v35 = *(double ***)*v34;
          v36 = **v32;
          v37 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v105.i8, "FFFFFFFFF");
          sub_100B83710(v35, v36, (unsigned __int8 *)&v105, v37);
          if (!v105.i8[9])
          {
            v38 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
            if (!v38
              || v105.u8[1] == 84
              || v105.u8[1] - 48 <= 9
              || v105.u8[3] == 84
              || v105.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }
        if (++v32 == v89)
        {
          v33 = v92;
          goto LABEL_49;
        }
      }
    }
LABEL_51:
    if (v34 != v33)
    {
      v39 = v86;
      if (v85 != v86)
      {
        while (v85 == v39)
        {
LABEL_68:
          if (++v34 == v33)
            goto LABEL_77;
        }
        v39 = (double ****)v85;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            v40 = *(double ***)*v34;
            v41 = **v39;
            v42 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100B83710(v40, v41, (unsigned __int8 *)&v105, v42);
            if (!v105.i8[9])
            {
              v43 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v43
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v39 == v86)
          {
            v33 = v92;
            goto LABEL_68;
          }
        }
      }
    }
    goto LABEL_77;
  }
  v80 = 0u;
  v81 = 0u;
  v44 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v45 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v105 = v44;
  v106 = v45;
  if (v91 != v92)
  {
    do
    {
      v46 = (double *)sub_100B80F20(*v34);
      sub_100B77C14((double *)v105.i64, v46);
      ++v34;
    }
    while (v34 != v92);
    v44 = v105;
    v45 = v106;
  }
  v80 = v44;
  v81 = v45;
  if (!sub_100B82B58(&v80, &v91, &v88, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_100B82B58(&v80, &v91, &v85, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }
LABEL_77:
  v47 = (uint64_t *)__p;
  v48 = v83;
  if (__p != v83)
  {
    v50 = (double ****)v97;
    v49 = v98;
    if (a5 > ((char *)v98 - (_BYTE *)v97) >> 3
      || a5 > ((char *)v95 - (_BYTE *)v94) >> 3
      || a4 > 0x63
      || ((char *)v83 - (_BYTE *)__p) >> 3 < a5)
    {
      if (v97 != v98)
      {
        while (__p == v48)
        {
LABEL_96:
          if (++v50 == v49)
            goto LABEL_97;
        }
        v48 = (double ****)__p;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            v51 = **v50;
            v52 = **v48;
            v53 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100B83710(v51, v52, (unsigned __int8 *)&v105, v53);
            if (!v105.i8[9])
            {
              v54 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v54
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v48 == v83)
          {
            v49 = v98;
            goto LABEL_96;
          }
        }
      }
LABEL_97:
      v56 = (double ****)v94;
      v55 = v95;
      if (v94 != v95 && __p != v48)
      {
        while (__p == v48)
        {
LABEL_171:
          if (++v56 == v55)
            goto LABEL_102;
        }
        v48 = (double ****)__p;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            v74 = **v56;
            v75 = **v48;
            v76 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100B83710(v74, v75, (unsigned __int8 *)&v105, v76);
            if (!v105.i8[9])
            {
              v77 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v77
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v48 == v83)
          {
            v55 = v95;
            goto LABEL_171;
          }
        }
      }
    }
    else
    {
      v80 = 0u;
      v81 = 0u;
      v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v106 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        v73 = (double *)sub_100B80F20(*v47);
        sub_100B77C14((double *)v105.i64, v73);
        ++v47;
      }
      while (v47 != (uint64_t *)v83);
      v80 = v105;
      v81 = v106;
      if (!sub_100B82B58(&v80, &v97, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
        || (sub_100B82B58(&v80, &v94, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_155;
      }
    }
  }
LABEL_102:
  v59 = (double ****)v97;
  v58 = v98;
  if (a5 > ((char *)v98 - (_BYTE *)v97) >> 3 || a4 > 0x63 || ((char *)v89 - (_BYTE *)v88) >> 3 < a5)
  {
    if (v97 != v98)
    {
      v60 = v89;
      if (v88 != v89)
      {
        while (v88 == v60)
        {
LABEL_120:
          if (++v59 == v58)
            goto LABEL_125;
        }
        v60 = (double ****)v88;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            v61 = **v59;
            v62 = **v60;
            v63 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100B83710(v61, v62, (unsigned __int8 *)&v105, v63);
            if (!v105.i8[9])
            {
              v64 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v64
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v60 == v89)
          {
            v58 = v98;
            goto LABEL_120;
          }
        }
      }
    }
  }
  else if ((sub_100B82B58(&v102, &v97, &v88, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }
LABEL_125:
  v66 = (double ****)v94;
  v65 = v95;
  if (a5 <= ((char *)v95 - (_BYTE *)v94) >> 3 && a4 <= 0x63 && ((char *)v86 - (_BYTE *)v85) >> 3 >= a5)
  {
    if ((sub_100B82B58(v100, &v94, &v85, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_148:
      v72 = 1;
      goto LABEL_174;
    }
LABEL_155:
    v72 = 0;
    goto LABEL_174;
  }
  if (v94 == v95)
    goto LABEL_148;
  v67 = v86;
  if (v85 == v86)
    goto LABEL_148;
  while (v85 == v67)
  {
LABEL_143:
    if (++v66 == v65)
      goto LABEL_148;
  }
  v67 = (double ****)v85;
  while (1)
  {
    if (!*(_BYTE *)a6)
    {
      v68 = **v66;
      v69 = **v67;
      v70 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v105.i8, "FFFFFFFFF");
      sub_100B83710(v68, v69, (unsigned __int8 *)&v105, v70);
      if (!v105.i8[9])
      {
        v71 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
        if (!v71
          || v105.u8[1] == 84
          || v105.u8[1] - 48 <= 9
          || v105.u8[3] == 84
          || v105.u8[3] - 48 < 0xA)
        {
          break;
        }
      }
    }
    if (++v67 == v86)
    {
      v65 = v95;
      goto LABEL_143;
    }
  }
LABEL_173:
  v72 = 0;
  *(_BYTE *)a6 = 1;
LABEL_174:
  if (__p)
  {
    v83 = (double ****)__p;
    operator delete(__p);
  }
  if (v85)
  {
    v86 = (double ****)v85;
    operator delete(v85);
  }
  if (v88)
  {
    v89 = (double ****)v88;
    operator delete(v88);
  }
  if (v91)
  {
    v92 = (uint64_t *)v91;
    operator delete(v91);
  }
  if (v94)
  {
    v95 = (double ****)v94;
    operator delete(v94);
  }
  if (v97)
  {
    v98 = (double ****)v97;
    operator delete(v97);
  }
  return v72;
}

void sub_100B82AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  if (a34)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B82B58(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  double v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  double ****v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  double *v28;
  double **v29;
  double **v30;
  unsigned __int8 *v31;
  BOOL v32;
  double ****v33;
  uint64_t *v34;
  uint64_t *v35;
  double **v36;
  double **v37;
  unsigned __int8 *v38;
  BOOL v39;
  double ****v40;
  double **v41;
  double **v42;
  unsigned __int8 *v43;
  BOOL v44;
  int64x2_t v45;
  int64x2_t v46;
  double *v47;
  uint64_t *v48;
  double ****v49;
  double ****v50;
  double ****v51;
  double **v52;
  double **v53;
  unsigned __int8 *v54;
  BOOL v55;
  double ****v56;
  double ****v57;
  double ****v59;
  double ****v60;
  double ****v61;
  double **v62;
  double **v63;
  unsigned __int8 *v64;
  BOOL v65;
  double ****v66;
  double ****v67;
  double ****v68;
  double **v69;
  double **v70;
  unsigned __int8 *v71;
  BOOL v72;
  uint64_t v73;
  double *v74;
  double **v75;
  double **v76;
  unsigned __int8 *v77;
  BOOL v78;
  int64x2_t v81;
  int64x2_t v82;
  void *__p;
  double ****v84;
  uint64_t v85;
  void *v86;
  double ****v87;
  uint64_t v88;
  void *v89;
  double ****v90;
  uint64_t v91;
  void *v92;
  uint64_t *v93;
  uint64_t v94;
  void *v95;
  double ****v96;
  uint64_t v97;
  void *v98;
  double ****v99;
  uint64_t v100;
  double v101[2];
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  double v105;
  int64x2_t v106;
  int64x2_t v107;

  v16 = *(_OWORD *)a1;
  v17 = (a1[1] + a1[3]) * 0.5;
  v104 = *((_QWORD *)a1 + 2);
  v18 = *((_OWORD *)a1 + 1);
  *(_QWORD *)&v101[0] = v16;
  v102 = v18;
  v103 = v16;
  v105 = v17;
  v101[1] = v17;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  __p = 0;
  v84 = 0;
  v85 = 0;
  sub_100B8121C((double *)&v103, v101, a2, &v98, &v95, &v92, a8);
  sub_100B8121C((double *)&v103, v101, a3, &v89, &v86, &__p, a10);
  v20 = (uint64_t *)v92;
  v19 = v93;
  if (v92 == v93)
    goto LABEL_77;
  v21 = v84;
  if (a5 > ((char *)v93 - (_BYTE *)v92) >> 3 || a4 > 0x63 || ((char *)v84 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v84)
    {
      while (__p == v21)
      {
LABEL_28:
        if (++v20 == v19)
          goto LABEL_29;
      }
      v21 = (double ****)__p;
      while (1)
      {
        if (!*(_BYTE *)a6)
        {
          v29 = *(double ***)*v20;
          v30 = **v21;
          v31 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v106.i8, "FFFFFFFFF");
          sub_100B83710(v29, v30, (unsigned __int8 *)&v106, v31);
          if (!v106.i8[9])
          {
            v32 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
            if (!v32
              || v106.u8[1] == 84
              || v106.u8[1] - 48 <= 9
              || v106.u8[3] == 84
              || v106.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }
        if (++v21 == v84)
        {
          v19 = v93;
          goto LABEL_28;
        }
      }
    }
  }
  else
  {
    v81 = 0u;
    v82 = 0u;
    v106 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v107 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      v22 = (double *)sub_100B80F20(*v20);
      sub_100B77C14((double *)v106.i64, v22);
      ++v20;
    }
    while (v20 != v93);
    v24 = v106.i64[1];
    v23 = v106.i64[0];
    v26 = v107.i64[1];
    v25 = v107.i64[0];
    v27 = (uint64_t *)__p;
    if (__p != v84)
    {
      do
      {
        v28 = (double *)sub_100B80F20(*v27);
        sub_100B77C14((double *)v106.i64, v28);
        ++v27;
      }
      while (v27 != (uint64_t *)v84);
      v24 = v106.i64[1];
      v23 = v106.i64[0];
      v26 = v107.i64[1];
      v25 = v107.i64[0];
    }
    v81.i64[0] = v23;
    v81.i64[1] = v24;
    v82.i64[0] = v25;
    v82.i64[1] = v26;
    if ((sub_100B81FAC((double *)v81.i64, (uint64_t **)&v92, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      goto LABEL_155;
  }
LABEL_29:
  v33 = v90;
  if (a5 > ((char *)v90 - (_BYTE *)v89) >> 3)
  {
    v35 = (uint64_t *)v92;
    v34 = v93;
    goto LABEL_32;
  }
  v35 = (uint64_t *)v92;
  v34 = v93;
  if (a5 > ((char *)v87 - (_BYTE *)v86) >> 3 || a4 > 0x63 || ((char *)v93 - (_BYTE *)v92) >> 3 < a5)
  {
LABEL_32:
    if (v89 != v90 && v35 != v34)
    {
      while (v89 == v33)
      {
LABEL_49:
        if (++v35 == v34)
        {
          v35 = (uint64_t *)v92;
          goto LABEL_51;
        }
      }
      v33 = (double ****)v89;
      while (1)
      {
        if (!*(_BYTE *)a6)
        {
          v36 = *(double ***)*v35;
          v37 = **v33;
          v38 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v106.i8, "FFFFFFFFF");
          sub_100B83710(v36, v37, (unsigned __int8 *)&v106, v38);
          if (!v106.i8[9])
          {
            v39 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
            if (!v39
              || v106.u8[1] == 84
              || v106.u8[1] - 48 <= 9
              || v106.u8[3] == 84
              || v106.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }
        if (++v33 == v90)
        {
          v34 = v93;
          goto LABEL_49;
        }
      }
    }
LABEL_51:
    if (v35 != v34)
    {
      v40 = v87;
      if (v86 != v87)
      {
        while (v86 == v40)
        {
LABEL_68:
          if (++v35 == v34)
            goto LABEL_77;
        }
        v40 = (double ****)v86;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            v41 = *(double ***)*v35;
            v42 = **v40;
            v43 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100B83710(v41, v42, (unsigned __int8 *)&v106, v43);
            if (!v106.i8[9])
            {
              v44 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v44
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v40 == v87)
          {
            v34 = v93;
            goto LABEL_68;
          }
        }
      }
    }
    goto LABEL_77;
  }
  v81 = 0u;
  v82 = 0u;
  v45 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v46 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v106 = v45;
  v107 = v46;
  if (v92 != v93)
  {
    do
    {
      v47 = (double *)sub_100B80F20(*v35);
      sub_100B77C14((double *)v106.i64, v47);
      ++v35;
    }
    while (v35 != v93);
    v45 = v106;
    v46 = v107;
  }
  v81 = v45;
  v82 = v46;
  if (!sub_100B81FAC((double *)v81.i64, (uint64_t **)&v92, (uint64_t **)&v89, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_100B81FAC((double *)v81.i64, (uint64_t **)&v92, (uint64_t **)&v86, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }
LABEL_77:
  v48 = (uint64_t *)__p;
  v49 = v84;
  if (__p != v84)
  {
    v51 = (double ****)v98;
    v50 = v99;
    if (a5 > ((char *)v99 - (_BYTE *)v98) >> 3
      || a5 > ((char *)v96 - (_BYTE *)v95) >> 3
      || a4 > 0x63
      || ((char *)v84 - (_BYTE *)__p) >> 3 < a5)
    {
      if (v98 != v99)
      {
        while (__p == v49)
        {
LABEL_96:
          if (++v51 == v50)
            goto LABEL_97;
        }
        v49 = (double ****)__p;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            v52 = **v51;
            v53 = **v49;
            v54 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100B83710(v52, v53, (unsigned __int8 *)&v106, v54);
            if (!v106.i8[9])
            {
              v55 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v55
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v49 == v84)
          {
            v50 = v99;
            goto LABEL_96;
          }
        }
      }
LABEL_97:
      v57 = (double ****)v95;
      v56 = v96;
      if (v95 != v96 && __p != v49)
      {
        while (__p == v49)
        {
LABEL_171:
          if (++v57 == v56)
            goto LABEL_102;
        }
        v49 = (double ****)__p;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            v75 = **v57;
            v76 = **v49;
            v77 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100B83710(v75, v76, (unsigned __int8 *)&v106, v77);
            if (!v106.i8[9])
            {
              v78 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v78
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v49 == v84)
          {
            v56 = v96;
            goto LABEL_171;
          }
        }
      }
    }
    else
    {
      v81 = 0u;
      v82 = 0u;
      v106 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v107 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        v74 = (double *)sub_100B80F20(*v48);
        sub_100B77C14((double *)v106.i64, v74);
        ++v48;
      }
      while (v48 != (uint64_t *)v84);
      v81 = v106;
      v82 = v107;
      if (!sub_100B81FAC((double *)v81.i64, (uint64_t **)&v98, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_100B81FAC((double *)v81.i64, (uint64_t **)&v95, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_155;
      }
    }
  }
LABEL_102:
  v60 = (double ****)v98;
  v59 = v99;
  if (a5 > ((char *)v99 - (_BYTE *)v98) >> 3 || a4 > 0x63 || ((char *)v90 - (_BYTE *)v89) >> 3 < a5)
  {
    if (v98 != v99)
    {
      v61 = v90;
      if (v89 != v90)
      {
        while (v89 == v61)
        {
LABEL_120:
          if (++v60 == v59)
            goto LABEL_125;
        }
        v61 = (double ****)v89;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            v62 = **v60;
            v63 = **v61;
            v64 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100B83710(v62, v63, (unsigned __int8 *)&v106, v64);
            if (!v106.i8[9])
            {
              v65 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v65
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v61 == v90)
          {
            v59 = v99;
            goto LABEL_120;
          }
        }
      }
    }
  }
  else if ((sub_100B81FAC((double *)&v103, (uint64_t **)&v98, (uint64_t **)&v89, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }
LABEL_125:
  v67 = (double ****)v95;
  v66 = v96;
  if (a5 <= ((char *)v96 - (_BYTE *)v95) >> 3 && a4 <= 0x63 && ((char *)v87 - (_BYTE *)v86) >> 3 >= a5)
  {
    if ((sub_100B81FAC(v101, (uint64_t **)&v95, (uint64_t **)&v86, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_148:
      v73 = 1;
      goto LABEL_174;
    }
LABEL_155:
    v73 = 0;
    goto LABEL_174;
  }
  if (v95 == v96)
    goto LABEL_148;
  v68 = v87;
  if (v86 == v87)
    goto LABEL_148;
  while (v86 == v68)
  {
LABEL_143:
    if (++v67 == v66)
      goto LABEL_148;
  }
  v68 = (double ****)v86;
  while (1)
  {
    if (!*(_BYTE *)a6)
    {
      v69 = **v67;
      v70 = **v68;
      v71 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v106.i8, "FFFFFFFFF");
      sub_100B83710(v69, v70, (unsigned __int8 *)&v106, v71);
      if (!v106.i8[9])
      {
        v72 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
        if (!v72
          || v106.u8[1] == 84
          || v106.u8[1] - 48 <= 9
          || v106.u8[3] == 84
          || v106.u8[3] - 48 < 0xA)
        {
          break;
        }
      }
    }
    if (++v68 == v87)
    {
      v66 = v96;
      goto LABEL_143;
    }
  }
LABEL_173:
  v73 = 0;
  *(_BYTE *)a6 = 1;
LABEL_174:
  if (__p)
  {
    v84 = (double ****)__p;
    operator delete(__p);
  }
  if (v86)
  {
    v87 = (double ****)v86;
    operator delete(v86);
  }
  if (v89)
  {
    v90 = (double ****)v89;
    operator delete(v89);
  }
  if (v92)
  {
    v93 = (uint64_t *)v92;
    operator delete(v92);
  }
  if (v95)
  {
    v96 = (double ****)v95;
    operator delete(v95);
  }
  if (v98)
  {
    v99 = (double ****)v98;
    operator delete(v98);
  }
  return v73;
}

void sub_100B8366C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  if (a34)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_100B83710(double **a1, double **a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  _QWORD *v8;
  BOOL v9;
  _BOOL4 v10;
  _BOOL4 v12;
  int v13;
  int v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  _BOOL4 v19;
  int v20;
  double **v21;
  _QWORD v22[2];
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26[3];
  int v27;
  unsigned __int8 *v28[3];
  int v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;

  if (!a3[9])
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v30[0] = a3;
    v30[1] = a1;
    v30[2] = a2;
    LOBYTE(v21) = 0;
    sub_100B84530(0, a1, 1, a2, (uint64_t)a4, (uint64_t)&v21, (uint64_t)&v31, (uint64_t)v30);
    v8 = v31;
    if (a3[9])
      goto LABEL_34;
    v28[0] = a3;
    v28[1] = a4;
    v28[2] = (unsigned __int8 *)a2;
    v9 = *a3 == 70 || a3[3] == 70;
    v10 = !v9;
    v29 = v10 | 2;
    if (v31 == v32)
    {
      sub_100B86958(v28, (uint64_t)a1);
      v8 = v31;
      if (a3[9])
        goto LABEL_34;
    }
    v26[0] = a3;
    v26[1] = a4;
    v26[2] = (unsigned __int8 *)a1;
    v12 = *a3 != 70 && a3[1] != 70;
    v27 = v12 | 2;
    if (v8 != v32 || (sub_100B86AB0(v26, (uint64_t)a2), !a3[9]))
    {
      if (v31 != v32)
      {
        if (*a3 == 70 || a3[3] == 70)
        {
          sub_100B839B8((uint64_t)v31, v32);
          v21 = 0;
          memset(v22, 0, 14);
          sub_100B83A0C((uint64_t)a3, (uint64_t)&v21, (uint64_t)v31, (uint64_t)v32);
          if (a3[9])
            goto LABEL_33;
          v17 = *a3;
          v18 = a3[3];
          if (v17 == 70 || v18 == 70)
          {
            v21 = a1;
            v22[0] = a2;
            LOBYTE(v22[1]) = 0;
            v23 = a3;
            v24 = a4;
            v19 = v17 != 70;
            if (v18 == 70)
              v20 = 2;
            else
              v20 = 6;
            v25 = v20 | v19;
            sub_100B83A9C((uint64_t)&v21, v31, v32);
            if (a3[9])
              goto LABEL_33;
            if (*a3 == 70)
              goto LABEL_21;
          }
        }
        if (a3[1] == 70)
        {
LABEL_21:
          sub_100B83F78((uint64_t)v31, v32);
          v21 = 0;
          memset(v22, 0, 14);
          sub_100B83FCC((uint64_t)a3, (uint64_t)&v21, (uint64_t)v31, (uint64_t)v32);
          if (!a3[9])
          {
            v13 = *a3;
            v14 = a3[1];
            if (v13 == 70 || v14 == 70)
            {
              v21 = a2;
              v22[0] = a1;
              LOBYTE(v22[1]) = 0;
              v23 = a3;
              v24 = a4;
              v15 = v13 != 70;
              if (v14 == 70)
                v16 = 2;
              else
                v16 = 6;
              v25 = v16 | v15;
              sub_100B8405C((uint64_t)&v21, v31, v32);
            }
          }
        }
      }
    }
LABEL_33:
    v8 = v31;
LABEL_34:
    if (v8)
    {
      v32 = v8;
      operator delete(v8);
    }
  }
}

void sub_100B83984(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_100B839B8(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v5;

  v2 = 126 - 2 * __clz(0x8F5C28F5C28F5C29 * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (_QWORD *)a1)
    v3 = 0;
  else
    v3 = v2;
  return sub_100B86C08(a1, a2, (uint64_t)&v5, v3, 1);
}

uint64_t sub_100B83A0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v8;

  if (a3 != a4)
  {
    v5 = a3;
    v7 = (unsigned __int8 *)result;
    v8 = a3;
    while (1)
    {
      result = sub_100B8A910(a2, v7, v5);
      if (v7[9])
        break;
      v8 += 200;
      v5 += 200;
      if (v8 == a4)
        return sub_100B8AA58(a2, v7);
    }
  }
  return result;
}

uint64_t sub_100B83A9C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  char v22;
  _QWORD *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  int v32;
  int v33;
  char v34;
  _QWORD *v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = a2[8];
    v42 = -1;
    if ((v6 & 0x8000000000000000) == 0)
    {
      do
      {
        result = sub_100B8AC64(v5);
        ++v42;
      }
      while (v42 < v6);
    }
    v7 = v4 + 25;
    if (v4 + 25 == a3)
    {
      v8 = v4;
LABEL_65:
      v32 = *(_DWORD *)(v5 + 40);
      if ((~v32 & 6) != 0)
      {
        if (v8 != a3)
        {
          LOBYTE(v33) = 0;
          v34 = 0;
          v35 = v8;
          do
          {
            while (1)
            {
              v36 = *((_DWORD *)v35 + 10);
              if (v36 != 2)
                break;
              if (*((_DWORD *)v35 + 30) != 2)
                goto LABEL_89;
              v34 = 1;
              v16 = v35 == v4;
              v35 += 25;
              if (v16)
                goto LABEL_79;
            }
            if (v36 != 1)
              goto LABEL_89;
            v33 = *((_DWORD *)v35 + 30);
            if (v33 != 1)
              goto LABEL_89;
            v16 = v35 == v4;
            v35 += 25;
          }
          while (!v16);
          if ((v34 & 1) == 0)
            goto LABEL_84;
          LOBYTE(v33) = 1;
LABEL_79:
          v37 = *(unsigned __int8 **)(v5 + 24);
          if (*v37 - 58 <= 0xFFFFFFF7)
          {
            *v37 = 50;
            v32 = *(_DWORD *)(v5 + 40);
            v37 = *(unsigned __int8 **)(v5 + 24);
          }
          v38 = v32 | 1;
          *(_DWORD *)(v5 + 40) = v38;
          if (v37[3] - 58 <= 0xFFFFFFF6)
          {
            v37[3] = 49;
            v38 = *(_DWORD *)(v5 + 40);
          }
          v32 = v38 | 4;
          *(_DWORD *)(v5 + 40) = v32;
          if ((v33 & 1) != 0)
          {
LABEL_84:
            v32 |= 2u;
            *(_DWORD *)(v5 + 40) = v32;
          }
        }
        v39 = v32 == 7 || *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
        *(_BYTE *)(v5 + 16) = v39;
      }
LABEL_89:
      v40 = v8[8];
      v46 = v40 + 1;
      if (v40 <= -2)
      {
        do
        {
          result = sub_100B8AC64(v5);
          v41 = v46++;
        }
        while (v41 < -1);
      }
    }
    else
    {
      v8 = v4;
      while (1)
      {
        v4 = v7;
        if (v8[7] == v8[32])
        {
          v9 = v8[8];
          v10 = v8[33];
          if (v9 != v10)
          {
            v11 = *(_DWORD *)(v5 + 40);
            if ((~v11 & 6) != 0)
            {
              LOBYTE(v12) = 0;
              v13 = 0;
              v14 = v8;
              do
              {
                while (1)
                {
                  v15 = *((_DWORD *)v14 + 10);
                  if (v15 != 2)
                    break;
                  if (*((_DWORD *)v14 + 30) != 2)
                    goto LABEL_61;
                  v13 = 1;
                  v16 = v14 == v8;
                  v14 += 25;
                  if (v16)
                    goto LABEL_21;
                }
                if (v15 != 1)
                  goto LABEL_61;
                v12 = *((_DWORD *)v14 + 30);
                if (v12 != 1)
                  goto LABEL_61;
                v16 = v14 == v8;
                v14 += 25;
              }
              while (!v16);
              if ((v13 & 1) == 0)
                goto LABEL_26;
              LOBYTE(v12) = 1;
LABEL_21:
              v17 = *(unsigned __int8 **)(v5 + 24);
              if (*v17 - 58 <= 0xFFFFFFF7)
              {
                *v17 = 50;
                v11 = *(_DWORD *)(v5 + 40);
                v17 = *(unsigned __int8 **)(v5 + 24);
              }
              v18 = v11 | 1;
              *(_DWORD *)(v5 + 40) = v18;
              if (v17[3] - 58 <= 0xFFFFFFF6)
              {
                v17[3] = 49;
                v18 = *(_DWORD *)(v5 + 40);
              }
              v11 = v18 | 4;
              if ((v12 & 1) != 0)
LABEL_26:
                v11 |= 2u;
              *(_DWORD *)(v5 + 40) = v11;
              v19 = v11 == 7 || *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
              *(_BYTE *)(v5 + 16) = v19;
              v9 = v8[8];
              v10 = v8[33];
            }
LABEL_61:
            for (i = v9 + 1; ; i = v45 + 1)
            {
              v45 = i;
              if (i >= v10)
                break;
              result = sub_100B8AC64(v5);
            }
          }
        }
        else
        {
          v20 = *(_DWORD *)(v5 + 40);
          if ((~v20 & 6) != 0)
          {
            LOBYTE(v21) = 0;
            v22 = 0;
            v23 = v8;
            do
            {
              while (1)
              {
                v24 = *((_DWORD *)v23 + 10);
                if (v24 != 2)
                  break;
                if (*((_DWORD *)v23 + 30) != 2)
                  goto LABEL_52;
                v22 = 1;
                v16 = v23 == v8;
                v23 += 25;
                if (v16)
                  goto LABEL_42;
              }
              if (v24 != 1)
                goto LABEL_52;
              v21 = *((_DWORD *)v23 + 30);
              if (v21 != 1)
                goto LABEL_52;
              v16 = v23 == v8;
              v23 += 25;
            }
            while (!v16);
            if ((v22 & 1) == 0)
              goto LABEL_47;
            LOBYTE(v21) = 1;
LABEL_42:
            v25 = *(unsigned __int8 **)(v5 + 24);
            if (*v25 - 58 <= 0xFFFFFFF7)
            {
              *v25 = 50;
              v20 = *(_DWORD *)(v5 + 40);
              v25 = *(unsigned __int8 **)(v5 + 24);
            }
            v26 = v20 | 1;
            *(_DWORD *)(v5 + 40) = v26;
            if (v25[3] - 58 <= 0xFFFFFFF6)
            {
              v25[3] = 49;
              v26 = *(_DWORD *)(v5 + 40);
            }
            v20 = v26 | 4;
            if ((v21 & 1) != 0)
LABEL_47:
              v20 |= 2u;
            *(_DWORD *)(v5 + 40) = v20;
            v27 = v20 == 7 || *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
            *(_BYTE *)(v5 + 16) = v27;
          }
LABEL_52:
          v28 = v8[8];
          v43 = v28 + 1;
          if (v28 <= -2)
          {
            do
            {
              result = sub_100B8AC64(v5);
              v29 = v43++;
            }
            while (v29 < -1);
          }
          v30 = v8[33];
          v44 = -1;
          if ((v30 & 0x8000000000000000) == 0)
          {
            do
            {
              result = sub_100B8AC64(v5);
              ++v44;
            }
            while (v44 < v30);
          }
        }
        if (*(_BYTE *)(v5 + 16))
          break;
        v8 += 25;
        v7 = v4 + 25;
        if (v4 + 25 == a3)
          goto LABEL_65;
      }
    }
  }
  return result;
}

double sub_100B83F78(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v5;

  v2 = 126 - 2 * __clz(0x8F5C28F5C28F5C29 * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (_QWORD *)a1)
    v3 = 0;
  else
    v3 = v2;
  return sub_100B8ADC8(a1, a2, (uint64_t)&v5, v3, 1);
}

uint64_t sub_100B83FCC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v8;

  if (a3 != a4)
  {
    v5 = a3;
    v7 = (unsigned __int8 *)result;
    v8 = a3;
    while (1)
    {
      result = sub_100B8EAB8(a2, v7, v5);
      if (v7[9])
        break;
      v8 += 200;
      v5 += 200;
      if (v8 == a4)
        return sub_100B8EC00(a2, v7);
    }
  }
  return result;
}

uint64_t sub_100B8405C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  char v22;
  _QWORD *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  int v32;
  int v33;
  char v34;
  _QWORD *v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = a2[18];
    v42 = -1;
    if ((v6 & 0x8000000000000000) == 0)
    {
      do
      {
        result = sub_100B8EE0C(v5);
        ++v42;
      }
      while (v42 < v6);
    }
    v7 = v4 + 25;
    if (v4 + 25 == a3)
    {
      v8 = v4;
LABEL_65:
      v32 = *(_DWORD *)(v5 + 40);
      if ((~v32 & 6) != 0)
      {
        if (v8 != a3)
        {
          LOBYTE(v33) = 0;
          v34 = 0;
          v35 = v8;
          do
          {
            while (1)
            {
              v36 = *((_DWORD *)v35 + 10);
              if (v36 != 2)
                break;
              if (*((_DWORD *)v35 + 30) != 2)
                goto LABEL_89;
              v34 = 1;
              v16 = v35 == v4;
              v35 += 25;
              if (v16)
                goto LABEL_79;
            }
            if (v36 != 1)
              goto LABEL_89;
            v33 = *((_DWORD *)v35 + 30);
            if (v33 != 1)
              goto LABEL_89;
            v16 = v35 == v4;
            v35 += 25;
          }
          while (!v16);
          if ((v34 & 1) == 0)
            goto LABEL_84;
          LOBYTE(v33) = 1;
LABEL_79:
          v37 = *(unsigned __int8 **)(v5 + 24);
          if (*v37 - 58 <= 0xFFFFFFF7)
          {
            *v37 = 50;
            v32 = *(_DWORD *)(v5 + 40);
            v37 = *(unsigned __int8 **)(v5 + 24);
          }
          v38 = v32 | 1;
          *(_DWORD *)(v5 + 40) = v38;
          if (v37[1] - 58 <= 0xFFFFFFF6)
          {
            v37[1] = 49;
            v38 = *(_DWORD *)(v5 + 40);
          }
          v32 = v38 | 4;
          *(_DWORD *)(v5 + 40) = v32;
          if ((v33 & 1) != 0)
          {
LABEL_84:
            v32 |= 2u;
            *(_DWORD *)(v5 + 40) = v32;
          }
        }
        v39 = v32 == 7 || *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
        *(_BYTE *)(v5 + 16) = v39;
      }
LABEL_89:
      v40 = v8[18];
      v46 = v40 + 1;
      if (v40 <= -2)
      {
        do
        {
          result = sub_100B8EE0C(v5);
          v41 = v46++;
        }
        while (v41 < -1);
      }
    }
    else
    {
      v8 = v4;
      while (1)
      {
        v4 = v7;
        if (v8[17] == v8[42])
        {
          v9 = v8[18];
          v10 = v8[43];
          if (v9 != v10)
          {
            v11 = *(_DWORD *)(v5 + 40);
            if ((~v11 & 6) != 0)
            {
              LOBYTE(v12) = 0;
              v13 = 0;
              v14 = v8;
              do
              {
                while (1)
                {
                  v15 = *((_DWORD *)v14 + 10);
                  if (v15 != 2)
                    break;
                  if (*((_DWORD *)v14 + 30) != 2)
                    goto LABEL_61;
                  v13 = 1;
                  v16 = v14 == v8;
                  v14 += 25;
                  if (v16)
                    goto LABEL_21;
                }
                if (v15 != 1)
                  goto LABEL_61;
                v12 = *((_DWORD *)v14 + 30);
                if (v12 != 1)
                  goto LABEL_61;
                v16 = v14 == v8;
                v14 += 25;
              }
              while (!v16);
              if ((v13 & 1) == 0)
                goto LABEL_26;
              LOBYTE(v12) = 1;
LABEL_21:
              v17 = *(unsigned __int8 **)(v5 + 24);
              if (*v17 - 58 <= 0xFFFFFFF7)
              {
                *v17 = 50;
                v11 = *(_DWORD *)(v5 + 40);
                v17 = *(unsigned __int8 **)(v5 + 24);
              }
              v18 = v11 | 1;
              *(_DWORD *)(v5 + 40) = v18;
              if (v17[1] - 58 <= 0xFFFFFFF6)
              {
                v17[1] = 49;
                v18 = *(_DWORD *)(v5 + 40);
              }
              v11 = v18 | 4;
              if ((v12 & 1) != 0)
LABEL_26:
                v11 |= 2u;
              *(_DWORD *)(v5 + 40) = v11;
              v19 = v11 == 7 || *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
              *(_BYTE *)(v5 + 16) = v19;
              v9 = v8[18];
              v10 = v8[43];
            }
LABEL_61:
            for (i = v9 + 1; ; i = v45 + 1)
            {
              v45 = i;
              if (i >= v10)
                break;
              result = sub_100B8EE0C(v5);
            }
          }
        }
        else
        {
          v20 = *(_DWORD *)(v5 + 40);
          if ((~v20 & 6) != 0)
          {
            LOBYTE(v21) = 0;
            v22 = 0;
            v23 = v8;
            do
            {
              while (1)
              {
                v24 = *((_DWORD *)v23 + 10);
                if (v24 != 2)
                  break;
                if (*((_DWORD *)v23 + 30) != 2)
                  goto LABEL_52;
                v22 = 1;
                v16 = v23 == v8;
                v23 += 25;
                if (v16)
                  goto LABEL_42;
              }
              if (v24 != 1)
                goto LABEL_52;
              v21 = *((_DWORD *)v23 + 30);
              if (v21 != 1)
                goto LABEL_52;
              v16 = v23 == v8;
              v23 += 25;
            }
            while (!v16);
            if ((v22 & 1) == 0)
              goto LABEL_47;
            LOBYTE(v21) = 1;
LABEL_42:
            v25 = *(unsigned __int8 **)(v5 + 24);
            if (*v25 - 58 <= 0xFFFFFFF7)
            {
              *v25 = 50;
              v20 = *(_DWORD *)(v5 + 40);
              v25 = *(unsigned __int8 **)(v5 + 24);
            }
            v26 = v20 | 1;
            *(_DWORD *)(v5 + 40) = v26;
            if (v25[1] - 58 <= 0xFFFFFFF6)
            {
              v25[1] = 49;
              v26 = *(_DWORD *)(v5 + 40);
            }
            v20 = v26 | 4;
            if ((v21 & 1) != 0)
LABEL_47:
              v20 |= 2u;
            *(_DWORD *)(v5 + 40) = v20;
            v27 = v20 == 7 || *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
            *(_BYTE *)(v5 + 16) = v27;
          }
LABEL_52:
          v28 = v8[18];
          v43 = v28 + 1;
          if (v28 <= -2)
          {
            do
            {
              result = sub_100B8EE0C(v5);
              v29 = v43++;
            }
            while (v29 < -1);
          }
          v30 = v8[43];
          v44 = -1;
          if ((v30 & 0x8000000000000000) == 0)
          {
            do
            {
              result = sub_100B8EE0C(v5);
              ++v44;
            }
            while (v44 < v30);
          }
        }
        if (*(_BYTE *)(v5 + 16))
          break;
        v8 += 25;
        v7 = v4 + 25;
        if (v4 + 25 == a3)
          goto LABEL_65;
      }
    }
  }
  return result;
}

void sub_100B84530(int a1, double **a2, int a3, double **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double *v30;
  double *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *__p;
  float64x2_t *v51;
  uint64_t v52;
  double *v53;
  double *v54;
  uint64_t v55;

  v53 = 0;
  v54 = 0;
  v55 = 0;
  __p = 0;
  v51 = 0;
  v52 = 0;
  v16 = *a2;
  v17 = a2[1];
  if ((unint64_t)((char *)v17 - (char *)v16) > 0x1F)
  {
    v42 = 0;
    v43 = -1;
    v44 = -1;
    sub_100B74894(&v53, v16, v17, a6, a5, (uint64_t)&v42, 0xAuLL);
    v18 = v53;
    v19 = v54;
    if (v53 != v54)
    {
      __asm { FMOV            V0.2D, #1.0 }
      do
      {
        v25 = *(float64x2_t *)(v18 + 4);
        v26 = *(float64x2_t *)(v18 + 6);
        v27 = vabsq_f64(v25);
        v28 = vsubq_f64(v25, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v27), (int8x16_t)xmmword_101C17300, (int8x16_t)vmulq_f64(v27, (float64x2_t)xmmword_101C17300)));
        v29 = vabsq_f64(v26);
        *((float64x2_t *)v18 + 2) = v28;
        *((float64x2_t *)v18 + 3) = vaddq_f64(v26, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v29), (int8x16_t)xmmword_101C17300, (int8x16_t)vmulq_f64(v29, (float64x2_t)xmmword_101C17300)));
        v18 += 15;
      }
      while (v18 != v19);
    }
  }
  v51 = 0;
  v30 = *a4;
  v31 = a4[1];
  if ((unint64_t)((char *)v31 - (char *)*a4) > 0x1F)
  {
    v42 = 1;
    v43 = -1;
    v44 = -1;
    sub_100B74894(&__p, v30, v31, a6, a5, (uint64_t)&v42, 0xAuLL);
    v32 = (float64x2_t *)__p;
    v33 = v51;
    if (__p != v51)
    {
      __asm { FMOV            V0.2D, #1.0 }
      do
      {
        v35 = v32[2];
        v36 = v32[3];
        v37 = vabsq_f64(v35);
        v38 = vsubq_f64(v35, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v37), (int8x16_t)xmmword_101C17300, (int8x16_t)vmulq_f64(v37, (float64x2_t)xmmword_101C17300)));
        v39 = vabsq_f64(v36);
        v32[2] = v38;
        v32[3] = vaddq_f64(v36, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v39), (int8x16_t)xmmword_101C17300, (int8x16_t)vmulq_f64(v39, (float64x2_t)xmmword_101C17300)));
        v32 = (float64x2_t *)((char *)v32 + 120);
      }
      while (v32 != v33);
    }
  }
  LODWORD(v42) = a1;
  v43 = (uint64_t)a2;
  LODWORD(v44) = a3;
  v45 = a4;
  v46 = a5;
  v47 = a6;
  v48 = a7;
  v49 = a8;
  v40 = a5;
  v41 = a5;
  sub_100B84744(&v53, (double **)&__p, (uint64_t)&v42, (uint64_t)&v41, (uint64_t)&v40, (uint64_t)&v41, (uint64_t)&v40, 0x10uLL);
  if (__p)
  {
    v51 = (float64x2_t *)__p;
    operator delete(__p);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
}

void sub_100B84714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;
  void *v22;

  if (__p)
    operator delete(__p);
  v22 = *(void **)(v20 - 88);
  if (v22)
  {
    *(_QWORD *)(v20 - 80) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B84744(double **a1, double **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  double *v11;
  double *v12;
  double *v14;
  double *v15;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  double **v23;
  char *v24;
  char *v25;
  double *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  double **v33;
  char *v34;
  char *v35;
  double *v36;
  uint64_t v37;
  double *v38;
  double *v39;
  _OWORD v44[2];
  void *__p;
  char *v46;
  char *v47;
  void *v48;
  char *v49;
  char *v50;
  char v51;

  v12 = *a1;
  v11 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * (v11 - *a1) <= a8 || (v15 = *a2, v14 = a2[1], 0xEEEEEEEEEEEEEEEFLL * (v14 - *a2) <= a8))
  {
    if (v12 == v11)
    {
      return 1;
    }
    else
    {
      v38 = a2[1];
      while (1)
      {
        v39 = *a2;
        if (*a2 != v38)
          break;
LABEL_50:
        v12 += 15;
        if (v12 == v11)
          return 1;
      }
      while ((sub_100B8529C(a3, v12, v39) & 1) != 0)
      {
        v39 += 15;
        if (v39 == a2[1])
        {
          v11 = a1[1];
          v38 = v39;
          goto LABEL_50;
        }
      }
      return 0;
    }
  }
  else
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    __p = 0;
    v46 = 0;
    v47 = 0;
    v44[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v44[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    if (v12 != v11)
    {
      do
      {
        sub_100B77C14((double *)v44, v12 + 4);
        v17 = v49;
        if (v49 >= v50)
        {
          v19 = (v49 - (_BYTE *)v48) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
LABEL_54:
            sub_100259694();
          v20 = (v50 - (_BYTE *)v48) >> 2;
          if (v20 <= v19 + 1)
            v20 = v19 + 1;
          if ((unint64_t)(v50 - (_BYTE *)v48) >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v22 = (char *)sub_10025E6A0((uint64_t)&v50, v21);
          else
            v22 = 0;
          v23 = (double **)&v22[8 * v19];
          *v23 = v12;
          v18 = (char *)(v23 + 1);
          v25 = (char *)v48;
          v24 = v49;
          if (v49 != v48)
          {
            do
            {
              v26 = (double *)*((_QWORD *)v24 - 1);
              v24 -= 8;
              *--v23 = v26;
            }
            while (v24 != v25);
            v24 = (char *)v48;
          }
          v48 = v23;
          v49 = v18;
          v50 = &v22[8 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_QWORD *)v49 = v12;
          v18 = v17 + 8;
        }
        v49 = v18;
        v12 += 15;
      }
      while (v12 != a1[1]);
      v15 = *a2;
      v14 = a2[1];
    }
    if (v15 != v14)
    {
      do
      {
        sub_100B77C14((double *)v44, v15 + 4);
        v27 = v46;
        if (v46 >= v47)
        {
          v29 = (v46 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            goto LABEL_54;
          v30 = (v47 - (_BYTE *)__p) >> 2;
          if (v30 <= v29 + 1)
            v30 = v29 + 1;
          if ((unint64_t)(v47 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          if (v31)
            v32 = (char *)sub_10025E6A0((uint64_t)&v47, v31);
          else
            v32 = 0;
          v33 = (double **)&v32[8 * v29];
          *v33 = v15;
          v28 = (char *)(v33 + 1);
          v35 = (char *)__p;
          v34 = v46;
          if (v46 != __p)
          {
            do
            {
              v36 = (double *)*((_QWORD *)v34 - 1);
              v34 -= 8;
              *--v33 = v36;
            }
            while (v34 != v35);
            v34 = (char *)__p;
          }
          __p = v33;
          v46 = v28;
          v47 = &v32[8 * v31];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_QWORD *)v46 = v15;
          v28 = v27 + 8;
        }
        v46 = v28;
        v15 += 15;
      }
      while (v15 != a2[1]);
    }
    v37 = sub_100B84AA8((double *)v44, (uint64_t **)&v48, (uint64_t **)&__p, 0, a8, a3, a4, a5, a6, a7, (uint64_t)&v51);
    if (__p)
    {
      v46 = (char *)__p;
      operator delete(__p);
    }
    if (v48)
    {
      v49 = (char *)v48;
      operator delete(v48);
    }
  }
  return v37;
}

void sub_100B84A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B84AA8(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v17;
  __int128 v18;
  double **v19;
  double **v20;
  double **v21;
  double **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double **v27;
  double **v28;
  double **v29;
  double **v30;
  double **v31;
  double **v32;
  double **v33;
  int64x2_t v34;
  int64x2_t v35;
  double **v36;
  double **v37;
  double **v38;
  double **v39;
  double **v40;
  double **v41;
  double **v42;
  double **v44;
  double **v45;
  double **v46;
  double **v47;
  double **v48;
  double **v49;
  double **v50;
  double **v51;
  double **v52;
  uint64_t v53;
  int64x2_t v55;
  int64x2_t v56;
  void *__p;
  double **v58;
  uint64_t v59;
  void *v60;
  double **v61;
  uint64_t v62;
  void *v63;
  double **v64;
  uint64_t v65;
  void *v66;
  double **v67;
  uint64_t v68;
  void *v69;
  double **v70;
  uint64_t v71;
  void *v72;
  double **v73;
  uint64_t v74;
  double v75[2];
  __int128 v76;
  __int128 v77;
  double v78;
  uint64_t v79;
  int64x2_t v80;
  int64x2_t v81;

  v17 = (*a1 + a1[2]) * 0.5;
  v18 = *((_OWORD *)a1 + 1);
  v77 = *(_OWORD *)a1;
  v79 = *((_QWORD *)&v18 + 1);
  v75[1] = *((double *)&v77 + 1);
  v76 = v18;
  v78 = v17;
  v75[0] = v17;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  __p = 0;
  v58 = 0;
  v59 = 0;
  sub_100B77E0C((double *)&v77, v75, a2, &v72, &v69, &v66);
  sub_100B77E0C((double *)&v77, v75, a3, &v63, &v60, &__p);
  v20 = (double **)v66;
  v19 = v67;
  if (v66 != v67)
  {
    v21 = v58;
    if (a5 > ((char *)v67 - (_BYTE *)v66) >> 3 || a4 > 0x63 || ((char *)v58 - (_BYTE *)__p) >> 3 < a5)
    {
      if (__p != v58)
      {
        while (1)
        {
          v22 = (double **)__p;
          if (__p != v21)
            break;
LABEL_8:
          if (++v20 == v19)
            goto LABEL_18;
        }
        while ((sub_100B8529C(a6, *v20, *v22) & 1) != 0)
        {
          if (++v22 == v58)
          {
            v19 = v67;
            v21 = v22;
            goto LABEL_8;
          }
        }
        goto LABEL_95;
      }
    }
    else
    {
      v55 = 0u;
      v56 = 0u;
      v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_100B77C14((double *)v80.i64, *v20++ + 4);
      while (v20 != v67);
      v24 = v80.i64[1];
      v23 = v80.i64[0];
      v26 = v81.i64[1];
      v25 = v81.i64[0];
      v27 = (double **)__p;
      if (__p != v58)
      {
        do
          sub_100B77C14((double *)v80.i64, *v27++ + 4);
        while (v27 != v58);
        v24 = v80.i64[1];
        v23 = v80.i64[0];
        v26 = v81.i64[1];
        v25 = v81.i64[0];
      }
      v55.i64[0] = v23;
      v55.i64[1] = v24;
      v56.i64[0] = v25;
      v56.i64[1] = v26;
      if ((sub_100B854D8((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
        goto LABEL_95;
    }
LABEL_18:
    v28 = v64;
    if (a5 > ((char *)v64 - (_BYTE *)v63) >> 3)
    {
      v30 = (double **)v66;
      v29 = v67;
      goto LABEL_21;
    }
    v30 = (double **)v66;
    v29 = v67;
    if (a5 > ((char *)v61 - (_BYTE *)v60) >> 3 || a4 > 0x63 || ((char *)v67 - (_BYTE *)v66) >> 3 < a5)
    {
LABEL_21:
      if (v63 != v64 && v30 != v29)
      {
        while (1)
        {
          v31 = (double **)v63;
          if (v63 != v28)
            break;
LABEL_27:
          if (++v30 == v29)
          {
            v30 = (double **)v66;
            goto LABEL_29;
          }
        }
        while ((sub_100B8529C(a6, *v30, *v31) & 1) != 0)
        {
          if (++v31 == v64)
          {
            v29 = v67;
            v28 = v31;
            goto LABEL_27;
          }
        }
        goto LABEL_95;
      }
LABEL_29:
      if (v30 != v29)
      {
        v32 = v61;
        if (v60 != v61)
        {
          while (1)
          {
            v33 = (double **)v60;
            if (v60 != v32)
              break;
LABEL_35:
            if (++v30 == v29)
              goto LABEL_44;
          }
          while ((sub_100B8529C(a6, *v30, *v33) & 1) != 0)
          {
            if (++v33 == v61)
            {
              v29 = v67;
              v32 = v33;
              goto LABEL_35;
            }
          }
          goto LABEL_95;
        }
      }
      goto LABEL_44;
    }
    v55 = 0u;
    v56 = 0u;
    v34 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v35 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v80 = v34;
    v81 = v35;
    if (v66 != v67)
    {
      do
        sub_100B77C14((double *)v80.i64, *v30++ + 4);
      while (v30 != v67);
      v34 = v80;
      v35 = v81;
    }
    v55 = v34;
    v56 = v35;
    if (!sub_100B854D8((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_100B854D8((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }
LABEL_44:
  v37 = (double **)__p;
  v36 = v58;
  if (__p == v58)
    goto LABEL_58;
  v39 = (double **)v72;
  v38 = v73;
  if (a5 > ((char *)v73 - (_BYTE *)v72) >> 3
    || a5 > ((char *)v70 - (_BYTE *)v69) >> 3
    || a4 > 0x63
    || ((char *)v58 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v39 != v38)
    {
      v40 = (double **)__p;
      if (__p != v36)
      {
        while ((sub_100B8529C(a6, *v39, *v40) & 1) != 0)
        {
          if (++v40 == v58)
          {
            v38 = v73;
            v36 = v40;
            goto LABEL_52;
          }
        }
        goto LABEL_95;
      }
LABEL_52:
      ++v39;
    }
    v42 = (double **)v69;
    v41 = v70;
    if (v69 == v70 || __p == v36)
      goto LABEL_58;
    while (1)
    {
      v50 = (double **)__p;
      if (__p != v36)
        break;
LABEL_79:
      if (++v42 == v41)
        goto LABEL_58;
    }
    while ((sub_100B8529C(a6, *v42, *v50) & 1) != 0)
    {
      if (++v50 == v58)
      {
        v41 = v70;
        v36 = v50;
        goto LABEL_79;
      }
    }
    goto LABEL_95;
  }
  v55 = 0u;
  v56 = 0u;
  v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_100B77C14((double *)v80.i64, *v37++ + 4);
  while (v37 != v58);
  v55 = v80;
  v56 = v81;
  if (sub_100B854D8((double *)v55.i64, (uint64_t **)&v72, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if ((sub_100B854D8((double *)v55.i64, (uint64_t **)&v69, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_58:
      v45 = (double **)v72;
      v44 = v73;
      if (a5 > ((char *)v73 - (_BYTE *)v72) >> 3 || a4 > 0x63 || ((char *)v64 - (_BYTE *)v63) >> 3 < a5)
      {
        if (v72 != v73)
        {
          v46 = v64;
          if (v63 != v64)
          {
            while (1)
            {
              v47 = (double **)v63;
              if (v63 != v46)
                break;
LABEL_69:
              if (++v45 == v44)
                goto LABEL_70;
            }
            while ((sub_100B8529C(a6, *v45, *v47) & 1) != 0)
            {
              if (++v47 == v64)
              {
                v44 = v73;
                v46 = v47;
                goto LABEL_69;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100B854D8((double *)&v77, (uint64_t **)&v72, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_70:
      v49 = (double **)v69;
      v48 = v70;
      if (a5 > ((char *)v70 - (_BYTE *)v69) >> 3 || a4 > 0x63 || ((char *)v61 - (_BYTE *)v60) >> 3 < a5)
      {
        if (v69 != v70)
        {
          v51 = v61;
          if (v60 != v61)
          {
            while (1)
            {
              v52 = (double **)v60;
              if (v60 != v51)
                break;
LABEL_87:
              if (++v49 == v48)
                goto LABEL_88;
            }
            while ((sub_100B8529C(a6, *v49, *v52) & 1) != 0)
            {
              if (++v52 == v61)
              {
                v48 = v70;
                v51 = v52;
                goto LABEL_87;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100B854D8(v75, (uint64_t **)&v69, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_88:
      v53 = 1;
      goto LABEL_96;
    }
  }
LABEL_95:
  v53 = 0;
LABEL_96:
  if (__p)
  {
    v58 = (double **)__p;
    operator delete(__p);
  }
  if (v60)
  {
    v61 = (double **)v60;
    operator delete(v60);
  }
  if (v63)
  {
    v64 = (double **)v63;
    operator delete(v63);
  }
  if (v66)
  {
    v67 = (double **)v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (double **)v69;
    operator delete(v69);
  }
  if (v72)
  {
    v73 = (double **)v72;
    operator delete(v72);
  }
  return v53;
}

void sub_100B851F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B8529C(uint64_t a1, double *a2, double *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  BOOL v19;
  double v21;
  double v22;
  double v23;

  v6 = a2[4];
  v7 = a2[6];
  if (v7 - v6 >= 360.0)
    goto LABEL_11;
  v8 = a3[4];
  v9 = a3[6];
  v10 = v9 - v8;
  if (v9 - v8 >= 360.0)
    goto LABEL_11;
  v11 = vabdd_f64(v8, v6);
  v12 = 180.0;
  if (v11 == 180.0)
    goto LABEL_4;
  v13 = v8 - v6;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v17 = fabs(v11 + -180.0);
    v12 = 180.0;
    if (v11 < 180.0)
      v11 = 180.0;
    v18 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
    if (v17 <= v18)
      goto LABEL_4;
  }
  v12 = 180.0;
  if (v13 <= 180.0)
  {
    if (v13 >= -180.0)
      goto LABEL_5;
    v12 = fmod(v13 + -180.0, 360.0) + 180.0;
LABEL_4:
    v13 = v12;
    goto LABEL_5;
  }
  v13 = fmod(v13 + 180.0, 360.0) + -180.0;
  if (v13 == -180.0)
    goto LABEL_4;
  v19 = ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v19 || *(_QWORD *)&v13 == 0)
  {
    v12 = 180.0;
    v21 = fabs(v13 + 180.0);
    v22 = fabs(v13);
    if (v22 < 180.0)
      v22 = 180.0;
    v23 = v22 >= 1.0 ? v22 * 2.22044605e-16 : 2.22044605e-16;
    if (v21 <= v23)
      goto LABEL_4;
  }
LABEL_5:
  if (v13 < 0.0)
    v13 = v13 + 360.0;
  v14 = v6 + v13;
  v15 = v10 + v6 + v13 + -360.0;
  if (vabdd_f64(v15, v9) < 180.0)
    v15 = v9;
  if (v14 > v7 && v15 < v6)
    return 1;
LABEL_11:
  if (a2[7] < a3[5] || a2[5] > a3[7])
    return 1;
  return sub_100B85CD8(*(_DWORD *)a1, *(_QWORD **)(a1 + 8), (uint64_t)a2, *(_DWORD *)(a1 + 16), *(__int128 ***)(a1 + 24), (uint64_t)a3, 0, 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 ***)(a1 + 56));
}

uint64_t sub_100B854D8(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v17;
  double v18;
  __int128 v19;
  double **v20;
  double **v21;
  double **v22;
  double **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double **v28;
  double **v29;
  double **v30;
  double **v31;
  double **v32;
  double **v33;
  double **v34;
  int64x2_t v35;
  int64x2_t v36;
  double **v37;
  double **v38;
  double **v39;
  double **v40;
  double **v41;
  double **v42;
  double **v43;
  double **v45;
  double **v46;
  double **v47;
  double **v48;
  double **v49;
  double **v50;
  double **v51;
  double **v52;
  double **v53;
  uint64_t v54;
  int64x2_t v56;
  int64x2_t v57;
  void *__p;
  double **v59;
  uint64_t v60;
  void *v61;
  double **v62;
  uint64_t v63;
  void *v64;
  double **v65;
  uint64_t v66;
  void *v67;
  double **v68;
  uint64_t v69;
  void *v70;
  double **v71;
  uint64_t v72;
  void *v73;
  double **v74;
  uint64_t v75;
  double v76[2];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  double v80;
  int64x2_t v81;
  int64x2_t v82;

  v17 = *(_OWORD *)a1;
  v18 = (a1[1] + a1[3]) * 0.5;
  v79 = *((_QWORD *)a1 + 2);
  v19 = *((_OWORD *)a1 + 1);
  *(_QWORD *)&v76[0] = v17;
  v77 = v19;
  v78 = v17;
  v80 = v18;
  v76[1] = v18;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_100B77E0C((double *)&v78, v76, a2, &v73, &v70, &v67);
  sub_100B77E0C((double *)&v78, v76, a3, &v64, &v61, &__p);
  v21 = (double **)v67;
  v20 = v68;
  if (v67 != v68)
  {
    v22 = v59;
    if (a5 > ((char *)v68 - (_BYTE *)v67) >> 3 || a4 > 0x63 || ((char *)v59 - (_BYTE *)__p) >> 3 < a5)
    {
      if (__p != v59)
      {
        while (1)
        {
          v23 = (double **)__p;
          if (__p != v22)
            break;
LABEL_8:
          if (++v21 == v20)
            goto LABEL_18;
        }
        while ((sub_100B8529C(a6, *v21, *v23) & 1) != 0)
        {
          if (++v23 == v59)
          {
            v20 = v68;
            v22 = v23;
            goto LABEL_8;
          }
        }
        goto LABEL_95;
      }
    }
    else
    {
      v56 = 0u;
      v57 = 0u;
      v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_100B77C14((double *)v81.i64, *v21++ + 4);
      while (v21 != v68);
      v25 = v81.i64[1];
      v24 = v81.i64[0];
      v27 = v82.i64[1];
      v26 = v82.i64[0];
      v28 = (double **)__p;
      if (__p != v59)
      {
        do
          sub_100B77C14((double *)v81.i64, *v28++ + 4);
        while (v28 != v59);
        v25 = v81.i64[1];
        v24 = v81.i64[0];
        v27 = v82.i64[1];
        v26 = v82.i64[0];
      }
      v56.i64[0] = v24;
      v56.i64[1] = v25;
      v57.i64[0] = v26;
      v57.i64[1] = v27;
      if ((sub_100B84AA8(&v56, &v67, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
        goto LABEL_95;
    }
LABEL_18:
    v29 = v65;
    if (a5 > ((char *)v65 - (_BYTE *)v64) >> 3)
    {
      v31 = (double **)v67;
      v30 = v68;
      goto LABEL_21;
    }
    v31 = (double **)v67;
    v30 = v68;
    if (a5 > ((char *)v62 - (_BYTE *)v61) >> 3 || a4 > 0x63 || ((char *)v68 - (_BYTE *)v67) >> 3 < a5)
    {
LABEL_21:
      if (v64 != v65 && v31 != v30)
      {
        while (1)
        {
          v32 = (double **)v64;
          if (v64 != v29)
            break;
LABEL_27:
          if (++v31 == v30)
          {
            v31 = (double **)v67;
            goto LABEL_29;
          }
        }
        while ((sub_100B8529C(a6, *v31, *v32) & 1) != 0)
        {
          if (++v32 == v65)
          {
            v30 = v68;
            v29 = v32;
            goto LABEL_27;
          }
        }
        goto LABEL_95;
      }
LABEL_29:
      if (v31 != v30)
      {
        v33 = v62;
        if (v61 != v62)
        {
          while (1)
          {
            v34 = (double **)v61;
            if (v61 != v33)
              break;
LABEL_35:
            if (++v31 == v30)
              goto LABEL_44;
          }
          while ((sub_100B8529C(a6, *v31, *v34) & 1) != 0)
          {
            if (++v34 == v62)
            {
              v30 = v68;
              v33 = v34;
              goto LABEL_35;
            }
          }
          goto LABEL_95;
        }
      }
      goto LABEL_44;
    }
    v56 = 0u;
    v57 = 0u;
    v35 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v36 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v81 = v35;
    v82 = v36;
    if (v67 != v68)
    {
      do
        sub_100B77C14((double *)v81.i64, *v31++ + 4);
      while (v31 != v68);
      v35 = v81;
      v36 = v82;
    }
    v56 = v35;
    v57 = v36;
    if (!sub_100B84AA8(&v56, &v67, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_100B84AA8(&v56, &v67, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }
LABEL_44:
  v38 = (double **)__p;
  v37 = v59;
  if (__p == v59)
    goto LABEL_58;
  v40 = (double **)v73;
  v39 = v74;
  if (a5 > ((char *)v74 - (_BYTE *)v73) >> 3
    || a5 > ((char *)v71 - (_BYTE *)v70) >> 3
    || a4 > 0x63
    || ((char *)v59 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v40 != v39)
    {
      v41 = (double **)__p;
      if (__p != v37)
      {
        while ((sub_100B8529C(a6, *v40, *v41) & 1) != 0)
        {
          if (++v41 == v59)
          {
            v39 = v74;
            v37 = v41;
            goto LABEL_52;
          }
        }
        goto LABEL_95;
      }
LABEL_52:
      ++v40;
    }
    v43 = (double **)v70;
    v42 = v71;
    if (v70 == v71 || __p == v37)
      goto LABEL_58;
    while (1)
    {
      v51 = (double **)__p;
      if (__p != v37)
        break;
LABEL_79:
      if (++v43 == v42)
        goto LABEL_58;
    }
    while ((sub_100B8529C(a6, *v43, *v51) & 1) != 0)
    {
      if (++v51 == v59)
      {
        v42 = v71;
        v37 = v51;
        goto LABEL_79;
      }
    }
    goto LABEL_95;
  }
  v56 = 0u;
  v57 = 0u;
  v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_100B77C14((double *)v81.i64, *v38++ + 4);
  while (v38 != v59);
  v56 = v81;
  v57 = v82;
  if (sub_100B84AA8(&v56, &v73, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if ((sub_100B84AA8(&v56, &v70, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
LABEL_58:
      v46 = (double **)v73;
      v45 = v74;
      if (a5 > ((char *)v74 - (_BYTE *)v73) >> 3 || a4 > 0x63 || ((char *)v65 - (_BYTE *)v64) >> 3 < a5)
      {
        if (v73 != v74)
        {
          v47 = v65;
          if (v64 != v65)
          {
            while (1)
            {
              v48 = (double **)v64;
              if (v64 != v47)
                break;
LABEL_69:
              if (++v46 == v45)
                goto LABEL_70;
            }
            while ((sub_100B8529C(a6, *v46, *v48) & 1) != 0)
            {
              if (++v48 == v65)
              {
                v45 = v74;
                v47 = v48;
                goto LABEL_69;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100B84AA8(&v78, &v73, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_70:
      v50 = (double **)v70;
      v49 = v71;
      if (a5 > ((char *)v71 - (_BYTE *)v70) >> 3 || a4 > 0x63 || ((char *)v62 - (_BYTE *)v61) >> 3 < a5)
      {
        if (v70 != v71)
        {
          v52 = v62;
          if (v61 != v62)
          {
            while (1)
            {
              v53 = (double **)v61;
              if (v61 != v52)
                break;
LABEL_87:
              if (++v50 == v49)
                goto LABEL_88;
            }
            while ((sub_100B8529C(a6, *v50, *v53) & 1) != 0)
            {
              if (++v53 == v62)
              {
                v49 = v71;
                v52 = v53;
                goto LABEL_87;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100B84AA8(v76, &v70, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_88:
      v54 = 1;
      goto LABEL_96;
    }
  }
LABEL_95:
  v54 = 0;
LABEL_96:
  if (__p)
  {
    v59 = (double **)__p;
    operator delete(__p);
  }
  if (v61)
  {
    v62 = (double **)v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = (double **)v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = (double **)v67;
    operator delete(v67);
  }
  if (v70)
  {
    v71 = (double **)v70;
    operator delete(v70);
  }
  if (v73)
  {
    v74 = (double **)v73;
    operator delete(v73);
  }
  return v54;
}

void sub_100B85C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B85CD8(int a1, _QWORD *a2, uint64_t a3, int a4, __int128 **a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 **a12)
{
  _QWORD *i;
  double *v13;
  _OWORD *v14;
  _OWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t result;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  _OWORD *v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  int v67;
  double *v68;
  __int128 *v69;
  __int128 *v70;
  uint64_t v71;
  double *v72;
  double *v73;
  __int128 v74;
  int v75;
  char v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[7];
  char v88;
  char v89;
  _QWORD v90[7];
  char v91;
  char v92;

  i = (_QWORD *)a6;
  v13 = (double *)a3;
  if (*(_BYTE *)(a3 + 96) && (unint64_t)(*(_QWORD *)(a3 + 80) + 1) < *(_QWORD *)(a3 + 88)
    || *(_BYTE *)(a6 + 96) && (unint64_t)(*(_QWORD *)(a6 + 80) + 1) < *(_QWORD *)(a6 + 88))
  {
    return 1;
  }
  v14 = (_OWORD *)*a2;
  v15 = (_OWORD *)a2[1];
  v69 = a5[1];
  v70 = *a5;
  v67 = *(_DWORD *)a6;
  v73 = (double *)(a6 + 32);
  v16 = *(_DWORD *)a3;
  v17 = *(_QWORD *)(a3 + 104);
  v19 = *(_QWORD *)(a3 + 64);
  v18 = *(_QWORD *)(a3 + 72);
  v20 = (_OWORD *)(*a2 + 16 * v19);
  if (v19 != v18)
  {
    v71 = *(_QWORD *)(a3 + 72);
    v21 = &v14[v19];
    v22 = 16 * v18 - 16 * v19;
    v23 = v21;
    while (1)
    {
      v24 = v21[1];
      ++v21;
      v74 = v24;
      if (!sub_100B7A204(v16, (double *)&v74, v13 + 4, v73))
        break;
      ++v19;
      ++v17;
      v23 = v21;
      v22 -= 16;
      if (!v22)
        return 1;
    }
    i = (_QWORD *)a6;
    v20 = v23;
    v18 = v71;
  }
  result = 1;
  v55 = &v14[v18];
  if (v20 != v55)
  {
    v26 = &v14[v20 != v14];
    v60 = v20 + 1;
    if (v20 + 1 != v15)
      v26 = v20 + 1;
    v27 = v26 + 1;
    v28 = &v14[v26 != v14];
    if (v27 != v15)
      v28 = v27;
    v59 = v28;
    v72 = v13 + 4;
    v68 = v13;
    v53 = v15;
    v54 = v14;
    while (1)
    {
      v74 = *v20;
      if (sub_100B7A204(-v16, (double *)&v74, v72, v73))
        return 1;
      v90[0] = v13;
      v90[1] = v19;
      v58 = v20;
      v90[2] = v20;
      v90[3] = v60;
      v90[4] = v59;
      v90[5] = v14;
      v90[6] = v15;
      v91 = 1;
      v92 = 0;
      v29 = i[8];
      v30 = i[9];
      v31 = &v70[v29];
      v32 = i[13];
      v61 = v17;
      if (v29 != v30)
      {
        v48 = 16 * v30 - 16 * v29;
        v49 = &v70[v29];
        while (1)
        {
          v50 = v49[1];
          ++v49;
          v74 = v50;
          if (!sub_100B7A204(v67, (double *)&v74, v73, v72))
            break;
          ++v29;
          ++v32;
          v31 = v49;
          v48 -= 16;
          if (!v48)
            goto LABEL_61;
        }
      }
      v63 = &v70[v30];
      if (v31 != v63)
        break;
LABEL_61:
      v17 = v61 + 1;
      i = (_QWORD *)a6;
      v13 = v68;
      v15 = v53;
      v14 = v54;
LABEL_62:
      v20 = v58 + 1;
      v51 = v60;
      ++v19;
      v52 = v59 + 1;
      if (v59 + 1 == v15)
        v52 = &v14[v59 != v14];
      v59 = v52;
      ++v60;
      if (v51 == v55)
        return 1;
    }
    v33 = v31 + 1;
    v34 = &v70[v31 != v70];
    if (v31 + 1 != v69)
      v34 = v31 + 1;
    v35 = v34 + 1;
    v36 = &v70[v34 != v70];
    if (v35 == v69)
      v37 = v36;
    else
      v37 = v35;
    v62 = v61 + 1;
    i = (_QWORD *)a6;
    while (1)
    {
      v74 = *v31;
      if (sub_100B7A204(-v67, (double *)&v74, v73, v72))
      {
LABEL_57:
        v13 = v68;
        v15 = v53;
        v14 = v54;
        v17 = v62;
        goto LABEL_62;
      }
      *(_QWORD *)&v38 = -1;
      *((_QWORD *)&v38 + 1) = -1;
      if (a1 == a4 && *((_QWORD *)v68 + 2) == i[2] && *((_QWORD *)v68 + 3) == i[3])
      {
        if (a7)
        {
          if (v19 < v29 && (a8 & 1) != 0)
          {
LABEL_37:
            if (v32 == v62 || !v19 && *((_QWORD *)v68 + 11) - 2 <= v29)
              goto LABEL_52;
            goto LABEL_40;
          }
          if (v19 >= v29)
            goto LABEL_52;
        }
        else if (a8)
        {
          goto LABEL_37;
        }
      }
LABEL_40:
      v39 = 0;
      v87[0] = i;
      v87[1] = v29;
      v87[2] = v31;
      v87[3] = v33;
      v87[4] = v37;
      v87[5] = v70;
      v87[6] = v69;
      v88 = 0;
      v89 = 0;
      v75 = 0;
      v76 = 0;
      v77 = -1;
      v78 = 0;
      do
      {
        v40 = (char *)&v74 + v39;
        *((_DWORD *)v40 + 10) = 0;
        *((_OWORD *)v40 + 3) = v38;
        *((_OWORD *)v40 + 4) = v38;
        *((_QWORD *)v40 + 10) = -1;
        *(_OWORD *)(v40 + 88) = xmmword_101C16BA0;
        v39 += 80;
        *((_QWORD *)v40 + 13) = 0;
        *((_QWORD *)v40 + 14) = 0;
      }
      while (v39 != 160);
      v79 = a1;
      v80 = *((_OWORD *)v68 + 1);
      v81 = v19;
      v82 = -1;
      v83 = a4;
      v84 = *((_OWORD *)i + 1);
      v85 = v29;
      v86 = -1;
      v41 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a11 + 8) - *(_QWORD *)a11) >> 3);
      v42 = sub_100B86264((uint64_t)v90, (uint64_t)v87, (uint64_t)&v74, a9, a10, (void **)a11);
      v45 = *(_QWORD *)(a11 + 8);
      if (0x8F5C28F5C28F5C29 * ((v45 - *(_QWORD *)a11) >> 3) < v41)
        sub_10191B9B4((uint64_t)v42, v43, v44);
      v46 = *(_QWORD *)a11 + 200 * v41;
      for (i = (_QWORD *)a6; v46 != v45; v46 += 200)
      {
        if (*(_DWORD *)(v46 + 40) == 4 && **a12 - 58 <= 0xFFFFFFF7)
          **a12 = 50;
        if (*(_DWORD *)(v46 + 120) == 4 && **a12 - 58 <= 0xFFFFFFF7)
          **a12 = 50;
      }
      if ((*a12)[9])
        return 0;
LABEL_52:
      ++v31;
      ++v29;
      if (v37 + 1 == v69)
        v37 = &v70[v37 != v70];
      else
        ++v37;
      ++v32;
      if (v33++ == v63)
        goto LABEL_57;
    }
  }
  return result;
}

void **sub_100B86264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  void **v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BOOL4 v21;
  void **v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[32];
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[3];
  _QWORD v35[3];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  char v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;

  v6 = a6;
  v49 = a6;
  v33[0] = a1;
  v33[1] = a2;
  v34[1] = a1;
  v34[2] = a2;
  v35[1] = a2;
  v35[2] = a1;
  sub_100B7BB50(a1, a2, (uint64_t)&v36);
  v47 = a4;
  v48 = a5;
  if (v42 == 100)
    return v6;
  v15 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)v31 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v31[16] = v15;
  v32 = *(_QWORD *)(a3 + 192);
  v16 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v27[16] = *(_OWORD *)(a3 + 96);
  v28 = v16;
  v17 = *(_OWORD *)(a3 + 144);
  v29 = *(_OWORD *)(a3 + 128);
  v30 = v17;
  v18 = *(_OWORD *)(a3 + 48);
  v26[0] = *(_OWORD *)(a3 + 32);
  v26[1] = v18;
  v19 = *(_OWORD *)(a3 + 80);
  v26[2] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)v27 = v19;
  v20 = *(_OWORD *)(a3 + 16);
  v24 = *(_OWORD *)a3;
  v25 = v20;
  if (v42 > 0x6Cu)
  {
    if (v42 == 116)
    {
      sub_100B7AED4(a1, a2, (uint64_t)&v24, (__int128 *)&v36, (uint64_t)&v42, (uint64_t)v34);
LABEL_21:
      v23 = v6;
      sub_100B864F0(&v23, (uint64_t)&v24);
      return v6;
    }
    if (v42 == 109)
    {
      if (v46 == 1)
        sub_100B7A884(a1, a2, (uint64_t)&v24, (__int128 *)&v36, (uint64_t)&v42, (uint64_t)v34);
      else
        sub_100B7ABAC(a2, a1, (uint64_t)&v24, (__int128 *)&v36, (uint64_t)&v42, (uint64_t)v35);
      goto LABEL_21;
    }
  }
  else
  {
    if (v42 == 99)
    {
      if (!v43)
      {
        if (v45)
        {
          sub_100B7B3C4(a1, a2, (uint64_t)&v24, (uint64_t)&v36, (uint64_t)&v42, (uint64_t)v34);
        }
        else
        {
          sub_100B7B8B8(a1, a2, (uint64_t)&v24, (uint64_t)&v36, (uint64_t)&v42, (uint64_t)v34);
          LODWORD(v25) = 5;
        }
        goto LABEL_21;
      }
      sub_100B866F0(a1, a2, &v24, &v49, (uint64_t)v33, (uint64_t)v34);
      return v49;
    }
    if (v42 == 105)
    {
      LODWORD(v25) = 2;
      if (!v36)
        sub_10191B9D8(v12, v13, v14);
      v24 = v37;
      *(_OWORD *)&v27[8] = v38;
      *(_OWORD *)&v31[8] = v40;
      *(_QWORD *)&v27[24] = v39;
      *(_QWORD *)&v31[24] = v41;
      v21 = v44 == 1;
      DWORD2(v26[5 * (v44 != 1)]) = 1;
      DWORD2(v26[5 * v21]) = 2;
      goto LABEL_21;
    }
  }
  if (v42 == 101 && !v43)
  {
    sub_100B7B8B8(a1, a2, (uint64_t)&v24, (uint64_t)&v36, (uint64_t)&v42, (uint64_t)v34);
    goto LABEL_21;
  }
  return v6;
}

void ***sub_100B864F0(void ***a1, uint64_t a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v20 = 0x8F5C28F5C28F5C29 * ((v5 - (_BYTE *)*v4) >> 3);
    v21 = v20 + 1;
    if (v20 + 1 > 0x147AE147AE147AELL)
      sub_100259694();
    v22 = 0x8F5C28F5C28F5C29 * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0xA3D70A3D70A3D7)
      v23 = 0x147AE147AE147AELL;
    else
      v23 = v21;
    if (v23)
      v24 = (char *)sub_100B86910(v7, v23);
    else
      v24 = 0;
    v25 = &v24[200 * v20];
    v26 = &v24[200 * v23];
    *(_OWORD *)v25 = *(_OWORD *)a2;
    v27 = *(_OWORD *)(a2 + 16);
    v28 = *(_OWORD *)(a2 + 32);
    v29 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v25 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v25 + 4) = v29;
    *((_OWORD *)v25 + 1) = v27;
    *((_OWORD *)v25 + 2) = v28;
    v30 = *(_OWORD *)(a2 + 80);
    v31 = *(_OWORD *)(a2 + 96);
    v32 = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v25 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v25 + 8) = v32;
    *((_OWORD *)v25 + 5) = v30;
    *((_OWORD *)v25 + 6) = v31;
    v33 = *(_OWORD *)(a2 + 144);
    v34 = *(_OWORD *)(a2 + 160);
    v35 = *(_OWORD *)(a2 + 176);
    *((_QWORD *)v25 + 24) = *(_QWORD *)(a2 + 192);
    *((_OWORD *)v25 + 10) = v34;
    *((_OWORD *)v25 + 11) = v35;
    *((_OWORD *)v25 + 9) = v33;
    v19 = v25 + 200;
    v37 = (char *)*v4;
    v36 = (char *)v4[1];
    if (v36 != *v4)
    {
      do
      {
        *(_OWORD *)(v25 - 200) = *(_OWORD *)(v36 - 200);
        v38 = *(_OWORD *)(v36 - 184);
        v39 = *(_OWORD *)(v36 - 168);
        v40 = *(_OWORD *)(v36 - 152);
        *(_OWORD *)(v25 - 136) = *(_OWORD *)(v36 - 136);
        *(_OWORD *)(v25 - 152) = v40;
        *(_OWORD *)(v25 - 168) = v39;
        *(_OWORD *)(v25 - 184) = v38;
        v41 = *(_OWORD *)(v36 - 120);
        v42 = *(_OWORD *)(v36 - 104);
        v43 = *(_OWORD *)(v36 - 88);
        *(_OWORD *)(v25 - 72) = *(_OWORD *)(v36 - 72);
        *(_OWORD *)(v25 - 88) = v43;
        *(_OWORD *)(v25 - 104) = v42;
        *(_OWORD *)(v25 - 120) = v41;
        v44 = *(_OWORD *)(v36 - 56);
        v45 = *(_OWORD *)(v36 - 40);
        v46 = *(_OWORD *)(v36 - 24);
        *((_QWORD *)v25 - 1) = *((_QWORD *)v36 - 1);
        *(_OWORD *)(v25 - 24) = v46;
        *(_OWORD *)(v25 - 40) = v45;
        *(_OWORD *)(v25 - 56) = v44;
        v25 -= 200;
        v36 -= 200;
      }
      while (v36 != v37);
      v36 = (char *)*v4;
    }
    *v4 = v25;
    v4[1] = v19;
    v4[2] = v26;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    v11 = *(_OWORD *)(a2 + 32);
    v12 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v5 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v5 + 4) = v12;
    *((_OWORD *)v5 + 1) = v10;
    *((_OWORD *)v5 + 2) = v11;
    v13 = *(_OWORD *)(a2 + 80);
    v14 = *(_OWORD *)(a2 + 96);
    v15 = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v5 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v5 + 8) = v15;
    *((_OWORD *)v5 + 5) = v13;
    *((_OWORD *)v5 + 6) = v14;
    v16 = *(_OWORD *)(a2 + 144);
    v17 = *(_OWORD *)(a2 + 160);
    v18 = *(_OWORD *)(a2 + 176);
    *((_QWORD *)v5 + 24) = *(_QWORD *)(a2 + 192);
    *((_OWORD *)v5 + 10) = v17;
    *((_OWORD *)v5 + 11) = v18;
    *((_OWORD *)v5 + 9) = v16;
    v19 = v5 + 200;
  }
  v4[1] = v19;
  return a1;
}

void sub_100B866F0(uint64_t a1, uint64_t a2, __int128 *a3, void ***a4, uint64_t a5, uint64_t a6)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[32];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  uint64_t v45;

  v9 = a3[11];
  *(_OWORD *)v44 = a3[10];
  *(_OWORD *)&v44[16] = v9;
  v45 = *((_QWORD *)a3 + 24);
  v10 = a3[7];
  *(_OWORD *)&v40[16] = a3[6];
  v41 = v10;
  v11 = a3[9];
  v42 = a3[8];
  v43 = v11;
  v12 = a3[3];
  v37 = a3[2];
  v38 = v12;
  v13 = a3[5];
  v39 = a3[4];
  *(_OWORD *)v40 = v13;
  v14 = a3[1];
  v35 = *a3;
  v36 = v14;
  v15 = *(_DWORD *)(a5 + 256);
  if (*(_DWORD *)(a5 + 252) != 1)
    goto LABEL_12;
  v16 = *(_QWORD *)(a6 + 8);
  v17 = *(double **)(v16 + 16);
  v18 = *(double **)(v16 + 24);
  if (!*(_BYTE *)(v16 + 80))
  {
    sub_100B7E7B0(*(_QWORD *)(a6 + 8), *(double **)(v16 + 24), v16 + 32);
    *(_OWORD *)(v16 + 64) = *(_OWORD *)*(_QWORD *)(v16 + 32);
    *(_BYTE *)(v16 + 80) = 1;
  }
  v19 = sub_10077970C(v17, v18, (double *)(v16 + 64));
  switch((_DWORD)v19)
  {
    case 1:
      v22 = 2;
      break;
    case 0:
      goto LABEL_12;
    case 0xFFFFFFFF:
      v22 = 1;
      break;
    default:
      goto LABEL_10;
  }
  DWORD2(v37) = v22;
LABEL_10:
  DWORD2(v41) = 3;
  LODWORD(v36) = 5;
  if (*(_QWORD *)(a5 + 64) <= 1uLL)
    sub_10191B9D8(v19, v20, v21);
  v35 = *(_OWORD *)(a5 + 88);
  *(_OWORD *)&v40[8] = *(_OWORD *)(a5 + 160);
  v23 = *(_QWORD *)(a5 + 176);
  *(_OWORD *)&v44[8] = *(_OWORD *)(a5 + 184);
  v24 = *(_QWORD *)(a5 + 200);
  *(_QWORD *)&v40[24] = v23;
  *(_QWORD *)&v44[24] = v24;
  v34 = *a4;
  sub_100B864F0(&v34, (uint64_t)&v35);
LABEL_12:
  if (v15 != 1)
    return;
  v25 = *(_QWORD *)(a6 + 16);
  v26 = *(double **)(v25 + 16);
  v27 = *(double **)(v25 + 24);
  if (!*(_BYTE *)(v25 + 80))
  {
    sub_100B7E7B0(v25, *(double **)(v25 + 24), v25 + 32);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)*(_QWORD *)(v25 + 32);
    *(_BYTE *)(v25 + 80) = 1;
  }
  v28 = sub_10077970C(v26, v27, (double *)(v25 + 64));
  switch((_DWORD)v28)
  {
    case 1:
      v31 = 2;
      goto LABEL_20;
    case 0:
      return;
    case 0xFFFFFFFF:
      v31 = 1;
LABEL_20:
      DWORD2(v41) = v31;
      break;
  }
  DWORD2(v37) = 3;
  LODWORD(v36) = 5;
  if (!*(_QWORD *)(a5 + 64))
    sub_10191B9D8(v28, v29, v30);
  v35 = *(_OWORD *)(a5 + 72);
  *(_OWORD *)&v40[8] = *(_OWORD *)(a5 + 104);
  v32 = *(_QWORD *)(a5 + 120);
  *(_OWORD *)&v44[8] = *(_OWORD *)(a5 + 128);
  v33 = *(_QWORD *)(a5 + 144);
  *(_QWORD *)&v40[24] = v32;
  *(_QWORD *)&v44[24] = v33;
  v34 = *a4;
  sub_100B864F0(&v34, (uint64_t)&v35);
}

void *sub_100B86910(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL)
    sub_10025955C();
  return operator new(200 * a2);
}

BOOL sub_100B86958(unsigned __int8 **a1, uint64_t a2)
{
  int v2;
  unsigned __int8 *v4;
  double *v5;
  double *v6;
  double *v7;
  int v8;
  _BYTE *v10;
  double v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = *((_DWORD *)a1 + 6);
  if (v2 == 3)
    return 0;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    return 1;
  *(_OWORD *)v11 = *(_OWORD *)*(_QWORD *)a2;
  v4 = a1[2];
  v5 = *(double **)v4;
  v6 = (double *)*((_QWORD *)v4 + 1);
  if ((unint64_t)v6 - *(_QWORD *)v4 < 0x40)
    goto LABEL_9;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      if (!sub_100779378((uint64_t)&v12, v11, v5, v5 + 2, (uint64_t)&v13))
        break;
      v7 = v5 + 4;
      v5 += 2;
    }
    while (v7 != v6);
    if (!v15)
    {
      if ((_DWORD)v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!((_DWORD)v13 + HIDWORD(v13)))
          goto LABEL_8;
      }
      else if (!(_DWORD)v13)
      {
        goto LABEL_8;
      }
      v10 = *a1;
      if (**a1 - 58 <= 0xFFFFFFF7)
      {
        *v10 = 50;
        v10 = *a1;
      }
      if (v10[3] - 58 <= 0xFFFFFFF6)
        v10[3] = 49;
      v8 = *((_DWORD *)a1 + 6) | 1;
      goto LABEL_10;
    }
  }
LABEL_8:
  v2 = *((_DWORD *)a1 + 6);
LABEL_9:
  v8 = v2 | 2;
LABEL_10:
  *((_DWORD *)a1 + 6) = v8;
  if (v8 == 3)
    return 0;
  return (*a1)[9] == 0;
}

BOOL sub_100B86AB0(unsigned __int8 **a1, uint64_t a2)
{
  int v2;
  unsigned __int8 *v4;
  double *v5;
  double *v6;
  double *v7;
  int v8;
  _BYTE *v10;
  double v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = *((_DWORD *)a1 + 6);
  if (v2 == 3)
    return 0;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    return 1;
  *(_OWORD *)v11 = *(_OWORD *)*(_QWORD *)a2;
  v4 = a1[2];
  v5 = *(double **)v4;
  v6 = (double *)*((_QWORD *)v4 + 1);
  if ((unint64_t)v6 - *(_QWORD *)v4 < 0x40)
    goto LABEL_9;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      if (!sub_100779378((uint64_t)&v12, v11, v5, v5 + 2, (uint64_t)&v13))
        break;
      v7 = v5 + 4;
      v5 += 2;
    }
    while (v7 != v6);
    if (!v15)
    {
      if ((_DWORD)v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!((_DWORD)v13 + HIDWORD(v13)))
          goto LABEL_8;
      }
      else if (!(_DWORD)v13)
      {
        goto LABEL_8;
      }
      v10 = *a1;
      if (**a1 - 58 <= 0xFFFFFFF7)
      {
        *v10 = 50;
        v10 = *a1;
      }
      if (v10[1] - 58 <= 0xFFFFFFF6)
        v10[1] = 49;
      v8 = *((_DWORD *)a1 + 6) | 1;
      goto LABEL_10;
    }
  }
LABEL_8:
  v2 = *((_DWORD *)a1 + 6);
LABEL_9:
  v8 = v2 | 2;
LABEL_10:
  *((_DWORD *)a1 + 6) = v8;
  if (v8 == 3)
    return 0;
  return (*a1)[9] == 0;
}

double sub_100B86C08(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  BOOL v40;
  double result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

uint64_t sub_100B871F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[32];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if (result == a2)
    return result;
  v64 = v3;
  v65 = v4;
  v6 = result;
  v7 = result + 200;
  if (result + 200 == a2)
    return result;
  v8 = 0;
  v9 = result;
  do
  {
    v10 = v9;
    v9 = v7;
    v11 = *(_QWORD *)(v10 + 248);
    v12 = *(_QWORD *)(v10 + 48);
    if (v11 == v12)
    {
      v13 = *(_QWORD *)(v10 + 256);
      v14 = *(_QWORD *)(v10 + 56);
      v15 = v13 < v14;
      if (v13 == v14)
      {
        v16 = *(_QWORD *)(v10 + 264);
        v17 = *(_QWORD *)(v10 + 64);
        v15 = v16 < v17;
        if (v16 == v17)
          v15 = *(_OWORD *)(v10 + 272) < *(_OWORD *)(v10 + 72);
      }
      if (!v15)
      {
        if (*(_QWORD *)(v10 + 272) != *(_QWORD *)(v10 + 72))
          goto LABEL_33;
        if (*(_QWORD *)(v10 + 264) != *(_QWORD *)(v10 + 64))
          goto LABEL_33;
        if (v13 != v14)
          goto LABEL_33;
        if (*(_QWORD *)(v10 + 280) != *(_QWORD *)(v10 + 80))
          goto LABEL_33;
        result = sub_100B88E88(v9, v10, a3);
        if (!(_DWORD)result)
          goto LABEL_33;
      }
    }
    else if (v11 >= v12)
    {
      goto LABEL_33;
    }
    v18 = *(_OWORD *)(v9 + 48);
    v54 = *(_OWORD *)(v9 + 32);
    v55 = v18;
    v19 = *(_OWORD *)(v9 + 112);
    v57 = *(_OWORD *)(v9 + 96);
    v58 = v19;
    v20 = *(_OWORD *)(v9 + 80);
    *(_OWORD *)v56 = *(_OWORD *)(v9 + 64);
    *(_OWORD *)&v56[16] = v20;
    v63 = *(_QWORD *)(v9 + 192);
    v21 = *(_OWORD *)(v9 + 176);
    v61 = *(_OWORD *)(v9 + 160);
    v62 = v21;
    v22 = *(_OWORD *)(v9 + 144);
    v59 = *(_OWORD *)(v9 + 128);
    v60 = v22;
    v23 = *(_OWORD *)(v9 + 16);
    v52 = *(_OWORD *)v9;
    v53 = v23;
    v24 = *(_OWORD *)(v10 + 176);
    *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
    *(_OWORD *)(v9 + 176) = v24;
    *(_QWORD *)(v9 + 192) = *(_QWORD *)(v10 + 192);
    v25 = *(_OWORD *)(v10 + 112);
    *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
    *(_OWORD *)(v9 + 112) = v25;
    v26 = *(_OWORD *)(v10 + 144);
    *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
    *(_OWORD *)(v9 + 144) = v26;
    v27 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(v9 + 48) = v27;
    v28 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v9 + 80) = v28;
    v29 = *(_OWORD *)(v10 + 16);
    v30 = v6;
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v29;
    if (v10 == v6)
      goto LABEL_32;
    v31 = v8;
    while (1)
    {
      v32 = v6 + v31;
      v33 = *(_QWORD *)(v6 + v31 - 152);
      if ((_QWORD)v55 == v33)
        break;
      if ((uint64_t)v55 >= v33)
        goto LABEL_31;
LABEL_29:
      v10 -= 200;
      v37 = *(_OWORD *)(v6 + v31 - 24);
      *(_OWORD *)(v32 + 160) = *(_OWORD *)(v6 + v31 - 40);
      *(_OWORD *)(v32 + 176) = v37;
      *(_QWORD *)(v32 + 192) = *(_QWORD *)(v6 + v31 - 8);
      v38 = *(_OWORD *)(v6 + v31 - 88);
      *(_OWORD *)(v32 + 96) = *(_OWORD *)(v6 + v31 - 104);
      *(_OWORD *)(v32 + 112) = v38;
      v39 = *(_OWORD *)(v6 + v31 - 56);
      *(_OWORD *)(v32 + 128) = *(_OWORD *)(v6 + v31 - 72);
      *(_OWORD *)(v32 + 144) = v39;
      v40 = *(_OWORD *)(v6 + v31 - 152);
      *(_OWORD *)(v32 + 32) = *(_OWORD *)(v6 + v31 - 168);
      *(_OWORD *)(v32 + 48) = v40;
      v41 = *(_OWORD *)(v6 + v31 - 120);
      *(_OWORD *)(v32 + 64) = *(_OWORD *)(v6 + v31 - 136);
      *(_OWORD *)(v32 + 80) = v41;
      v42 = *(_OWORD *)(v6 + v31 - 184);
      *(_OWORD *)v32 = *(_OWORD *)(v6 + v31 - 200);
      *(_OWORD *)(v32 + 16) = v42;
      v31 -= 200;
      if (!v31)
      {
        v30 = v6;
        goto LABEL_32;
      }
    }
    v34 = *(_QWORD *)(v32 - 144);
    v35 = *((_QWORD *)&v55 + 1) < v34;
    if (*((_QWORD *)&v55 + 1) == v34)
    {
      v36 = *(_QWORD *)(v6 + v31 - 136);
      v35 = *(_QWORD *)v56 < v36;
      if (*(_QWORD *)v56 == v36)
        v35 = *(_OWORD *)&v56[8] < *(_OWORD *)(v6 + v31 - 128);
    }
    if (v35)
      goto LABEL_29;
    if (*(_OWORD *)v56 == *(_OWORD *)(v6 + v31 - 136)
      && *((_QWORD *)&v55 + 1) == v34
      && *(_QWORD *)&v56[16] == *(_QWORD *)(v6 + v31 - 120))
    {
      result = sub_100B88E88((uint64_t)&v52, v6 + v31 - 200, a3);
      if (!(_DWORD)result)
      {
        v30 = v6 + v31;
        goto LABEL_32;
      }
      goto LABEL_29;
    }
LABEL_31:
    v30 = v10;
LABEL_32:
    *(_OWORD *)v30 = v52;
    v43 = v53;
    v44 = v54;
    v45 = *(_OWORD *)v56;
    *(_OWORD *)(v30 + 48) = v55;
    *(_OWORD *)(v30 + 64) = v45;
    *(_OWORD *)(v30 + 16) = v43;
    *(_OWORD *)(v30 + 32) = v44;
    v46 = *(_OWORD *)&v56[16];
    v47 = v57;
    v48 = v59;
    *(_OWORD *)(v30 + 112) = v58;
    *(_OWORD *)(v30 + 128) = v48;
    *(_OWORD *)(v30 + 80) = v46;
    *(_OWORD *)(v30 + 96) = v47;
    v49 = v60;
    v50 = v61;
    v51 = v62;
    *(_QWORD *)(v30 + 192) = v63;
    *(_OWORD *)(v30 + 160) = v50;
    *(_OWORD *)(v30 + 176) = v51;
    *(_OWORD *)(v30 + 144) = v49;
LABEL_33:
    v7 = v9 + 200;
    v8 += 200;
  }
  while (v9 + 200 != a2);
  return result;
}

double sub_100B874E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a1 != a2)
  {
    v59 = v3;
    v60 = v4;
    v6 = a1;
    while (1)
    {
      while (1)
      {
        if (v6 + 200 == a2)
          return result;
        v7 = (_QWORD *)v6;
        v6 += 200;
        v8 = v7[31];
        v9 = v7[6];
        if (v8 != v9)
          break;
        v10 = v7[32];
        v11 = v7[7];
        v13 = __OFSUB__(v10, v11);
        v12 = v10 - v11 < 0;
        if (v10 == v11)
        {
          v14 = v7[33];
          v15 = v7[8];
          v13 = __OFSUB__(v14, v15);
          v12 = v14 - v15 < 0;
          if (v14 == v15)
          {
            v16 = v7[35];
            v17 = v7[10];
            v13 = __OFSUB__(v16, v17);
            v12 = v16 - v17 < 0;
            if (v16 == v17)
            {
              v18 = v7[34];
              v19 = v7[9];
              v13 = __OFSUB__(v18, v19);
              v12 = v18 - v19 < 0;
            }
          }
        }
        if (v12 != v13
          || v7[34] == v7[9]
          && v7[33] == v7[8]
          && v10 == v11
          && v7[35] == v7[10]
          && sub_100B88E88(v6, (uint64_t)v7, a3))
        {
          goto LABEL_17;
        }
      }
      if (v8 < v9)
      {
LABEL_17:
        v21 = *(_OWORD *)(v6 + 176);
        v56 = *(_OWORD *)(v6 + 160);
        v57 = v21;
        v58 = *(_QWORD *)(v6 + 192);
        v22 = *(_OWORD *)(v6 + 112);
        v52 = *(_OWORD *)(v6 + 96);
        v53 = v22;
        v23 = *(_OWORD *)(v6 + 144);
        v54 = *(_OWORD *)(v6 + 128);
        v55 = v23;
        v24 = *(_OWORD *)(v6 + 48);
        v48 = *(_OWORD *)(v6 + 32);
        v49 = v24;
        v25 = *(_OWORD *)(v6 + 80);
        v50 = *(_OWORD *)(v6 + 64);
        v51 = v25;
        v26 = *(_OWORD *)(v6 + 16);
        v27 = v6;
        v46 = *(_OWORD *)v6;
        v47 = v26;
        while (1)
        {
          v28 = *(_OWORD *)(v27 - 56);
          v29 = *(_OWORD *)(v27 - 24);
          *(_OWORD *)(v27 + 160) = *(_OWORD *)(v27 - 40);
          *(_OWORD *)(v27 + 176) = v29;
          *(_QWORD *)(v27 + 192) = *(_QWORD *)(v27 - 8);
          v30 = *(_OWORD *)(v27 - 120);
          v31 = *(_OWORD *)(v27 - 88);
          *(_OWORD *)(v27 + 96) = *(_OWORD *)(v27 - 104);
          *(_OWORD *)(v27 + 112) = v31;
          *(_OWORD *)(v27 + 128) = *(_OWORD *)(v27 - 72);
          *(_OWORD *)(v27 + 144) = v28;
          v32 = *(_OWORD *)(v27 - 184);
          v33 = *(_OWORD *)(v27 - 152);
          *(_OWORD *)(v27 + 32) = *(_OWORD *)(v27 - 168);
          *(_OWORD *)(v27 + 48) = v33;
          *(_OWORD *)(v27 + 64) = *(_OWORD *)(v27 - 136);
          *(_OWORD *)(v27 + 80) = v30;
          *(_OWORD *)v27 = *(_OWORD *)(v27 - 200);
          *(_OWORD *)(v27 + 16) = v32;
          v34 = *(_QWORD *)(v27 - 352);
          if ((_QWORD)v49 != v34)
          {
            if ((uint64_t)v49 >= v34)
              break;
            goto LABEL_29;
          }
          v35 = *(_QWORD *)(v27 - 344);
          v37 = __OFSUB__(*((_QWORD *)&v49 + 1), v35);
          v36 = *((_QWORD *)&v49 + 1) - v35 < 0;
          if (*((_QWORD *)&v49 + 1) != v35)
            goto LABEL_22;
          v38 = *(_QWORD *)(v27 - 336);
          v37 = __OFSUB__((_QWORD)v50, v38);
          v36 = (uint64_t)v50 - v38 < 0;
          if ((_QWORD)v50 == v38
            && (v39 = *(_QWORD *)(v27 - 320),
                v37 = __OFSUB__((_QWORD)v51, v39),
                v36 = (uint64_t)v51 - v39 < 0,
                (_QWORD)v51 == v39))
          {
            if (*((uint64_t *)&v50 + 1) < *(_QWORD *)(v27 - 328))
              goto LABEL_29;
          }
          else
          {
LABEL_22:
            if (v36 != v37)
              goto LABEL_29;
          }
          if (v50 != *(_OWORD *)(v27 - 336)
            || *((_QWORD *)&v49 + 1) != v35
            || (_QWORD)v51 != *(_QWORD *)(v27 - 320)
            || (sub_100B88E88((uint64_t)&v46, v27 - 400, a3) & 1) == 0)
          {
            break;
          }
LABEL_29:
          v27 -= 200;
        }
        v40 = v54;
        *(_OWORD *)(v27 - 56) = v55;
        v41 = v57;
        *(_OWORD *)(v27 - 40) = v56;
        *(_OWORD *)(v27 - 24) = v41;
        v42 = v50;
        *(_OWORD *)(v27 - 120) = v51;
        v43 = v53;
        *(_OWORD *)(v27 - 104) = v52;
        *(_OWORD *)(v27 - 88) = v43;
        *(_OWORD *)(v27 - 72) = v40;
        v44 = v46;
        *(_OWORD *)(v27 - 184) = v47;
        result = *(double *)&v48;
        v45 = v49;
        *(_OWORD *)(v27 - 168) = v48;
        *(_OWORD *)(v27 - 152) = v45;
        *(_OWORD *)(v27 - 136) = v42;
        *(_QWORD *)(v27 - 8) = v58;
        *(_OWORD *)(v27 - 200) = v44;
      }
    }
  }
  return result;
}

uint64_t sub_100B8777C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  if (v6 == v7)
  {
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = v8 < v9;
    if (v8 == v9)
    {
      v11 = *(_QWORD *)(a2 + 64);
      v12 = *(_QWORD *)(a1 + 64);
      v10 = v11 < v12;
      if (v11 == v12)
        v10 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
    }
    if (!v10)
    {
      if (*(_QWORD *)(a2 + 72) != *(_QWORD *)(a1 + 72)
        || *(_QWORD *)(a2 + 64) != *(_QWORD *)(a1 + 64)
        || v8 != v9
        || *(_QWORD *)(a2 + 80) != *(_QWORD *)(a1 + 80)
        || (v13 = sub_100B88E88(a2, a1, a3), v6 = *(_QWORD *)(a2 + 48), (v13 & 1) == 0))
      {
LABEL_11:
        v14 = *(_QWORD *)(a3 + 48);
        if (v14 == v6)
        {
          v15 = *(_QWORD *)(a3 + 56);
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v15 < v16;
          if (v15 == v16)
          {
            v18 = *(_QWORD *)(a3 + 64);
            v19 = *(_QWORD *)(a2 + 64);
            v17 = v18 < v19;
            if (v18 == v19)
              v17 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
          }
          if (v17)
            goto LABEL_47;
          if (*(_QWORD *)(a3 + 72) == *(_QWORD *)(a2 + 72) && *(_QWORD *)(a3 + 64) == *(_QWORD *)(a2 + 64))
          {
            result = 0;
            if (v15 != v16)
              return result;
            if (*(_QWORD *)(a3 + 80) != *(_QWORD *)(a2 + 80))
              return result;
            result = sub_100B88E88(a3, a2, a3);
            if (!(_DWORD)result)
              return result;
LABEL_47:
            v140 = *(_OWORD *)(a2 + 160);
            v145 = *(_OWORD *)(a2 + 176);
            v150 = *(_QWORD *)(a2 + 192);
            v120 = *(_OWORD *)(a2 + 96);
            v125 = *(_OWORD *)(a2 + 112);
            v130 = *(_OWORD *)(a2 + 128);
            v135 = *(_OWORD *)(a2 + 144);
            v100 = *(_OWORD *)(a2 + 32);
            v105 = *(_OWORD *)(a2 + 48);
            v110 = *(_OWORD *)(a2 + 64);
            v115 = *(_OWORD *)(a2 + 80);
            v90 = *(_OWORD *)a2;
            v95 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a2 = *(_OWORD *)a3;
            v54 = *(_OWORD *)(a3 + 16);
            v55 = *(_OWORD *)(a3 + 32);
            v56 = *(_OWORD *)(a3 + 64);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
            *(_OWORD *)(a2 + 64) = v56;
            *(_OWORD *)(a2 + 16) = v54;
            *(_OWORD *)(a2 + 32) = v55;
            v57 = *(_OWORD *)(a3 + 80);
            v58 = *(_OWORD *)(a3 + 96);
            v59 = *(_OWORD *)(a3 + 128);
            *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
            *(_OWORD *)(a2 + 128) = v59;
            *(_OWORD *)(a2 + 80) = v57;
            *(_OWORD *)(a2 + 96) = v58;
            v60 = *(_OWORD *)(a3 + 144);
            v61 = *(_OWORD *)(a3 + 160);
            v62 = *(_OWORD *)(a3 + 176);
            *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
            *(_OWORD *)(a2 + 160) = v61;
            *(_OWORD *)(a2 + 176) = v62;
            *(_OWORD *)(a2 + 144) = v60;
            *(_OWORD *)(a3 + 160) = v140;
            *(_OWORD *)(a3 + 176) = v145;
            *(_QWORD *)(a3 + 192) = v150;
            *(_OWORD *)(a3 + 96) = v120;
            *(_OWORD *)(a3 + 112) = v125;
            *(_OWORD *)(a3 + 128) = v130;
            *(_OWORD *)(a3 + 144) = v135;
            *(_OWORD *)(a3 + 32) = v100;
            *(_OWORD *)(a3 + 48) = v105;
            *(_OWORD *)(a3 + 64) = v110;
            *(_OWORD *)(a3 + 80) = v115;
            *(_OWORD *)a3 = v90;
            *(_OWORD *)(a3 + 16) = v95;
            v63 = *(_QWORD *)(a2 + 48);
            v64 = *(_QWORD *)(a1 + 48);
            if (v63 == v64)
            {
              v65 = *(_QWORD *)(a2 + 56);
              v66 = *(_QWORD *)(a1 + 56);
              v67 = v65 < v66;
              if (v65 == v66)
              {
                v68 = *(_QWORD *)(a2 + 64);
                v69 = *(_QWORD *)(a1 + 64);
                v67 = v68 < v69;
                if (v68 == v69)
                  v67 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
              }
              if (!v67)
              {
                if (*(_QWORD *)(a2 + 72) != *(_QWORD *)(a1 + 72) || *(_QWORD *)(a2 + 64) != *(_QWORD *)(a1 + 64))
                  return 1;
                result = 1;
                if (v65 != v66 || *(_QWORD *)(a2 + 80) != *(_QWORD *)(a1 + 80))
                  return result;
                if (!sub_100B88E88(a2, a1, a3))
                  return 1;
              }
            }
            else if (v63 >= v64)
            {
              return 1;
            }
            v142 = *(_OWORD *)(a1 + 160);
            v147 = *(_OWORD *)(a1 + 176);
            v152 = *(_QWORD *)(a1 + 192);
            v122 = *(_OWORD *)(a1 + 96);
            v127 = *(_OWORD *)(a1 + 112);
            v132 = *(_OWORD *)(a1 + 128);
            v137 = *(_OWORD *)(a1 + 144);
            v102 = *(_OWORD *)(a1 + 32);
            v107 = *(_OWORD *)(a1 + 48);
            v112 = *(_OWORD *)(a1 + 64);
            v117 = *(_OWORD *)(a1 + 80);
            v92 = *(_OWORD *)a1;
            v97 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            v79 = *(_OWORD *)(a2 + 16);
            v80 = *(_OWORD *)(a2 + 32);
            v81 = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 64) = v81;
            *(_OWORD *)(a1 + 16) = v79;
            *(_OWORD *)(a1 + 32) = v80;
            v82 = *(_OWORD *)(a2 + 80);
            v83 = *(_OWORD *)(a2 + 96);
            v84 = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 128) = v84;
            *(_OWORD *)(a1 + 80) = v82;
            *(_OWORD *)(a1 + 96) = v83;
            v85 = *(_OWORD *)(a2 + 144);
            v86 = *(_OWORD *)(a2 + 160);
            v87 = *(_OWORD *)(a2 + 176);
            *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
            *(_OWORD *)(a1 + 160) = v86;
            *(_OWORD *)(a1 + 176) = v87;
            *(_OWORD *)(a1 + 144) = v85;
            *(_OWORD *)(a2 + 160) = v142;
            *(_OWORD *)(a2 + 176) = v147;
            *(_QWORD *)(a2 + 192) = v152;
            *(_OWORD *)(a2 + 96) = v122;
            *(_OWORD *)(a2 + 112) = v127;
            *(_OWORD *)(a2 + 128) = v132;
            *(_OWORD *)(a2 + 144) = v137;
            *(_OWORD *)(a2 + 32) = v102;
            *(_OWORD *)(a2 + 48) = v107;
            *(_OWORD *)(a2 + 64) = v112;
            *(_OWORD *)(a2 + 80) = v117;
            result = 2;
            *(_OWORD *)a2 = v92;
            *(_OWORD *)(a2 + 16) = v97;
            return result;
          }
        }
        else if (v14 < v6)
        {
          goto LABEL_47;
        }
        return 0;
      }
    }
  }
  else if (v6 >= v7)
  {
    goto LABEL_11;
  }
  v21 = *(_QWORD *)(a3 + 48);
  if (v21 != v6)
  {
    if (v21 >= v6)
      goto LABEL_33;
LABEL_45:
    v139 = *(_OWORD *)(a1 + 160);
    v144 = *(_OWORD *)(a1 + 176);
    v149 = *(_QWORD *)(a1 + 192);
    v119 = *(_OWORD *)(a1 + 96);
    v124 = *(_OWORD *)(a1 + 112);
    v129 = *(_OWORD *)(a1 + 128);
    v134 = *(_OWORD *)(a1 + 144);
    v99 = *(_OWORD *)(a1 + 32);
    v104 = *(_OWORD *)(a1 + 48);
    v109 = *(_OWORD *)(a1 + 64);
    v114 = *(_OWORD *)(a1 + 80);
    v89 = *(_OWORD *)a1;
    v94 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    v43 = *(_OWORD *)(a3 + 16);
    v44 = *(_OWORD *)(a3 + 32);
    v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 64) = v45;
    *(_OWORD *)(a1 + 16) = v43;
    *(_OWORD *)(a1 + 32) = v44;
    v46 = *(_OWORD *)(a3 + 80);
    v47 = *(_OWORD *)(a3 + 96);
    v48 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a1 + 128) = v48;
    *(_OWORD *)(a1 + 80) = v46;
    *(_OWORD *)(a1 + 96) = v47;
    v49 = *(_OWORD *)(a3 + 144);
    v50 = *(_OWORD *)(a3 + 160);
    v51 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a1 + 160) = v50;
    *(_OWORD *)(a1 + 176) = v51;
    *(_OWORD *)(a1 + 144) = v49;
    *(_OWORD *)(a3 + 160) = v139;
    *(_OWORD *)(a3 + 176) = v144;
    *(_QWORD *)(a3 + 192) = v149;
    *(_OWORD *)(a3 + 96) = v119;
    *(_OWORD *)(a3 + 112) = v124;
    *(_OWORD *)(a3 + 128) = v129;
    *(_OWORD *)(a3 + 144) = v134;
    *(_OWORD *)(a3 + 32) = v99;
    *(_OWORD *)(a3 + 48) = v104;
    *(_OWORD *)(a3 + 64) = v109;
    *(_OWORD *)(a3 + 80) = v114;
    v53 = v89;
    v52 = v94;
    result = 1;
LABEL_61:
    *(_OWORD *)a3 = v53;
    *(_OWORD *)(a3 + 16) = v52;
    return result;
  }
  v22 = *(_QWORD *)(a3 + 56);
  v23 = *(_QWORD *)(a2 + 56);
  v24 = v22 < v23;
  if (v22 == v23)
  {
    v25 = *(_QWORD *)(a3 + 64);
    v26 = *(_QWORD *)(a2 + 64);
    v24 = v25 < v26;
    if (v25 == v26)
      v24 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
  }
  if (v24
    || *(_QWORD *)(a3 + 72) == *(_QWORD *)(a2 + 72)
    && *(_QWORD *)(a3 + 64) == *(_QWORD *)(a2 + 64)
    && v22 == v23
    && *(_QWORD *)(a3 + 80) == *(_QWORD *)(a2 + 80)
    && sub_100B88E88(a3, a2, a3))
  {
    goto LABEL_45;
  }
LABEL_33:
  v138 = *(_OWORD *)(a1 + 160);
  v143 = *(_OWORD *)(a1 + 176);
  v148 = *(_QWORD *)(a1 + 192);
  v118 = *(_OWORD *)(a1 + 96);
  v123 = *(_OWORD *)(a1 + 112);
  v128 = *(_OWORD *)(a1 + 128);
  v133 = *(_OWORD *)(a1 + 144);
  v98 = *(_OWORD *)(a1 + 32);
  v103 = *(_OWORD *)(a1 + 48);
  v108 = *(_OWORD *)(a1 + 64);
  v113 = *(_OWORD *)(a1 + 80);
  v88 = *(_OWORD *)a1;
  v93 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v27 = *(_OWORD *)(a2 + 16);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v28;
  v30 = *(_OWORD *)(a2 + 80);
  v31 = *(_OWORD *)(a2 + 96);
  v32 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 80) = v30;
  *(_OWORD *)(a1 + 96) = v31;
  v33 = *(_OWORD *)(a2 + 144);
  v34 = *(_OWORD *)(a2 + 160);
  v35 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v34;
  *(_OWORD *)(a1 + 176) = v35;
  *(_OWORD *)(a1 + 144) = v33;
  *(_OWORD *)(a2 + 160) = v138;
  *(_OWORD *)(a2 + 176) = v143;
  *(_QWORD *)(a2 + 192) = v148;
  *(_OWORD *)(a2 + 96) = v118;
  *(_OWORD *)(a2 + 112) = v123;
  *(_OWORD *)(a2 + 128) = v128;
  *(_OWORD *)(a2 + 144) = v133;
  *(_OWORD *)(a2 + 32) = v98;
  *(_OWORD *)(a2 + 48) = v103;
  *(_OWORD *)(a2 + 64) = v108;
  *(_OWORD *)(a2 + 80) = v113;
  *(_OWORD *)a2 = v88;
  *(_OWORD *)(a2 + 16) = v93;
  v36 = *(_QWORD *)(a3 + 48);
  v37 = *(_QWORD *)(a2 + 48);
  if (v36 != v37)
  {
    if (v36 >= v37)
      return 1;
    goto LABEL_60;
  }
  v38 = *(_QWORD *)(a3 + 56);
  v39 = *(_QWORD *)(a2 + 56);
  v40 = v38 < v39;
  if (v38 == v39)
  {
    v41 = *(_QWORD *)(a3 + 64);
    v42 = *(_QWORD *)(a2 + 64);
    v40 = v41 < v42;
    if (v41 == v42)
      v40 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
  }
  if (v40)
  {
LABEL_60:
    v141 = *(_OWORD *)(a2 + 160);
    v146 = *(_OWORD *)(a2 + 176);
    v151 = *(_QWORD *)(a2 + 192);
    v121 = *(_OWORD *)(a2 + 96);
    v126 = *(_OWORD *)(a2 + 112);
    v131 = *(_OWORD *)(a2 + 128);
    v136 = *(_OWORD *)(a2 + 144);
    v101 = *(_OWORD *)(a2 + 32);
    v106 = *(_OWORD *)(a2 + 48);
    v111 = *(_OWORD *)(a2 + 64);
    v116 = *(_OWORD *)(a2 + 80);
    v91 = *(_OWORD *)a2;
    v96 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v70 = *(_OWORD *)(a3 + 16);
    v71 = *(_OWORD *)(a3 + 32);
    v72 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 16) = v70;
    *(_OWORD *)(a2 + 32) = v71;
    v73 = *(_OWORD *)(a3 + 80);
    v74 = *(_OWORD *)(a3 + 96);
    v75 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v75;
    *(_OWORD *)(a2 + 80) = v73;
    *(_OWORD *)(a2 + 96) = v74;
    v76 = *(_OWORD *)(a3 + 144);
    v77 = *(_OWORD *)(a3 + 160);
    v78 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v77;
    *(_OWORD *)(a2 + 176) = v78;
    *(_OWORD *)(a2 + 144) = v76;
    *(_OWORD *)(a3 + 160) = v141;
    *(_OWORD *)(a3 + 176) = v146;
    *(_QWORD *)(a3 + 192) = v151;
    *(_OWORD *)(a3 + 96) = v121;
    *(_OWORD *)(a3 + 112) = v126;
    *(_OWORD *)(a3 + 128) = v131;
    *(_OWORD *)(a3 + 144) = v136;
    *(_OWORD *)(a3 + 32) = v101;
    *(_OWORD *)(a3 + 48) = v106;
    *(_OWORD *)(a3 + 64) = v111;
    *(_OWORD *)(a3 + 80) = v116;
    v53 = v91;
    v52 = v96;
    result = 2;
    goto LABEL_61;
  }
  if (*(_QWORD *)(a3 + 72) != *(_QWORD *)(a2 + 72) || *(_QWORD *)(a3 + 64) != *(_QWORD *)(a2 + 64))
    return 1;
  result = 1;
  if (v38 == v39 && *(_QWORD *)(a3 + 80) == *(_QWORD *)(a2 + 80))
  {
    if (!sub_100B88E88(a3, a2, a3))
      return 1;
    goto LABEL_60;
  }
  return result;
}

unint64_t sub_100B87E60(__int128 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t j;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  j = a2;
  v5 = a1[11];
  v112 = a1[10];
  v113 = v5;
  v114 = *((_QWORD *)a1 + 24);
  v6 = a1[7];
  v108 = a1[6];
  v109 = v6;
  v7 = a1[9];
  v110 = a1[8];
  v111 = v7;
  v8 = a1[3];
  v104 = a1[2];
  v105 = v8;
  v9 = a1[5];
  v106 = a1[4];
  v107 = v9;
  v10 = a1[1];
  v102 = *a1;
  v103 = v10;
  v11 = a2 - 200;
  v12 = *(_QWORD *)(a2 - 152);
  if ((_QWORD)v8 != v12)
  {
    if ((uint64_t)v105 >= v12)
      goto LABEL_11;
LABEL_27:
    for (i = (unint64_t)a1 + 200; ; i += 200)
    {
      v27 = *(_QWORD *)(i + 48);
      if ((_QWORD)v105 == v27)
      {
        v28 = *(_QWORD *)(i + 56);
        v30 = __OFSUB__(*((_QWORD *)&v105 + 1), v28);
        v29 = *((_QWORD *)&v105 + 1) - v28 < 0;
        if (*((_QWORD *)&v105 + 1) == v28)
        {
          v31 = *(_QWORD *)(i + 64);
          v30 = __OFSUB__((_QWORD)v106, v31);
          v29 = (uint64_t)v106 - v31 < 0;
          if ((_QWORD)v106 == v31)
          {
            v32 = *(_QWORD *)(i + 80);
            v30 = __OFSUB__((_QWORD)v107, v32);
            v29 = (uint64_t)v107 - v32 < 0;
            if ((_QWORD)v107 == v32)
            {
              v33 = *(_QWORD *)(i + 72);
              v30 = __OFSUB__(*((_QWORD *)&v106 + 1), v33);
              v29 = *((_QWORD *)&v106 + 1) - v33 < 0;
            }
          }
        }
        if (v29 != v30
          || v106 == *(_OWORD *)(i + 64)
          && *((_QWORD *)&v105 + 1) == v28
          && (_QWORD)v107 == *(_QWORD *)(i + 80)
          && (sub_100B88E88((uint64_t)&v102, i, a3) & 1) != 0)
        {
          goto LABEL_41;
        }
      }
      else if ((uint64_t)v105 < v27)
      {
        goto LABEL_41;
      }
    }
  }
  v13 = *(_QWORD *)(a2 - 144);
  v15 = __OFSUB__(*((_QWORD *)&v105 + 1), v13);
  v14 = *((_QWORD *)&v105 + 1) - v13 < 0;
  if (*((_QWORD *)&v105 + 1) == v13)
  {
    v16 = *(_QWORD *)(a2 - 136);
    v15 = __OFSUB__((_QWORD)v106, v16);
    v14 = (uint64_t)v106 - v16 < 0;
    if ((_QWORD)v106 == v16)
    {
      v17 = *(_QWORD *)(a2 - 120);
      v15 = __OFSUB__((_QWORD)v107, v17);
      v14 = (uint64_t)v107 - v17 < 0;
      if ((_QWORD)v107 == v17)
      {
        v18 = *(_QWORD *)(a2 - 128);
        v15 = __OFSUB__(*((_QWORD *)&v106 + 1), v18);
        v14 = *((_QWORD *)&v106 + 1) - v18 < 0;
      }
    }
  }
  if (v14 != v15
    || v106 == *(_OWORD *)(a2 - 136)
    && (_QWORD)v107 == *(_QWORD *)(a2 - 120)
    && *((_QWORD *)&v105 + 1) == v13
    && sub_100B88E88((uint64_t)&v102, a2 - 200, a3))
  {
    goto LABEL_27;
  }
LABEL_11:
  for (i = (unint64_t)a1 + 200; i < j; i += 200)
  {
    v20 = *(_QWORD *)(i + 48);
    if ((_QWORD)v105 == v20)
    {
      v21 = *(_QWORD *)(i + 56);
      v23 = __OFSUB__(*((_QWORD *)&v105 + 1), v21);
      v22 = *((_QWORD *)&v105 + 1) - v21 < 0;
      if (*((_QWORD *)&v105 + 1) == v21)
      {
        v24 = *(_QWORD *)(i + 64);
        v23 = __OFSUB__((_QWORD)v106, v24);
        v22 = (uint64_t)v106 - v24 < 0;
        if ((_QWORD)v106 == v24)
        {
          v25 = *(_QWORD *)(i + 80);
          v23 = __OFSUB__((_QWORD)v107, v25);
          v22 = (uint64_t)v107 - v25 < 0;
          if ((_QWORD)v107 == v25)
          {
            v26 = *(_QWORD *)(i + 72);
            v23 = __OFSUB__(*((_QWORD *)&v106 + 1), v26);
            v22 = *((_QWORD *)&v106 + 1) - v26 < 0;
          }
        }
      }
      if (v22 != v23
        || v106 == *(_OWORD *)(i + 64)
        && *((_QWORD *)&v105 + 1) == v21
        && (_QWORD)v107 == *(_QWORD *)(i + 80)
        && (sub_100B88E88((uint64_t)&v102, i, a3) & 1) != 0)
      {
        break;
      }
    }
    else if ((uint64_t)v105 < v20)
    {
      break;
    }
  }
LABEL_41:
  if (i < j)
  {
    for (j = v11; ; j -= 200)
    {
      v34 = *(_QWORD *)(j + 48);
      if ((_QWORD)v105 == v34)
      {
        v35 = *(_QWORD *)(j + 56);
        v37 = __OFSUB__(*((_QWORD *)&v105 + 1), v35);
        v36 = *((_QWORD *)&v105 + 1) - v35 < 0;
        if (*((_QWORD *)&v105 + 1) == v35)
        {
          v38 = *(_QWORD *)(j + 64);
          v37 = __OFSUB__((_QWORD)v106, v38);
          v36 = (uint64_t)v106 - v38 < 0;
          if ((_QWORD)v106 == v38)
          {
            v39 = *(_QWORD *)(j + 80);
            v37 = __OFSUB__((_QWORD)v107, v39);
            v36 = (uint64_t)v107 - v39 < 0;
            if ((_QWORD)v107 == v39)
            {
              v40 = *(_QWORD *)(j + 72);
              v37 = __OFSUB__(*((_QWORD *)&v106 + 1), v40);
              v36 = *((_QWORD *)&v106 + 1) - v40 < 0;
            }
          }
        }
        if (v36 == v37
          && (v106 != *(_OWORD *)(j + 64)
           || *((_QWORD *)&v105 + 1) != v35
           || (_QWORD)v107 != *(_QWORD *)(j + 80)
           || (sub_100B88E88((uint64_t)&v102, j, a3) & 1) == 0))
        {
          break;
        }
      }
      else if ((uint64_t)v105 >= v34)
      {
        break;
      }
    }
  }
LABEL_81:
  while (i < j)
  {
    v115 = *(_OWORD *)i;
    v41 = *(_OWORD *)(i + 16);
    v42 = *(_OWORD *)(i + 32);
    v43 = *(_OWORD *)(i + 64);
    v118 = *(_OWORD *)(i + 48);
    v119 = v43;
    v116 = v41;
    v117 = v42;
    v44 = *(_OWORD *)(i + 80);
    v45 = *(_OWORD *)(i + 96);
    v46 = *(_OWORD *)(i + 128);
    v122 = *(_OWORD *)(i + 112);
    v123 = v46;
    v120 = v44;
    v121 = v45;
    v47 = *(_OWORD *)(i + 144);
    v48 = *(_OWORD *)(i + 160);
    v49 = *(_OWORD *)(i + 176);
    v127 = *(_QWORD *)(i + 192);
    v125 = v48;
    v126 = v49;
    v124 = v47;
    *(_OWORD *)i = *(_OWORD *)j;
    v50 = *(_OWORD *)(j + 16);
    v51 = *(_OWORD *)(j + 32);
    v52 = *(_OWORD *)(j + 64);
    *(_OWORD *)(i + 48) = *(_OWORD *)(j + 48);
    *(_OWORD *)(i + 64) = v52;
    *(_OWORD *)(i + 16) = v50;
    *(_OWORD *)(i + 32) = v51;
    v53 = *(_OWORD *)(j + 80);
    v54 = *(_OWORD *)(j + 96);
    v55 = *(_OWORD *)(j + 128);
    *(_OWORD *)(i + 112) = *(_OWORD *)(j + 112);
    *(_OWORD *)(i + 128) = v55;
    *(_OWORD *)(i + 80) = v53;
    *(_OWORD *)(i + 96) = v54;
    v56 = *(_OWORD *)(j + 144);
    v57 = *(_OWORD *)(j + 160);
    v58 = *(_OWORD *)(j + 176);
    *(_QWORD *)(i + 192) = *(_QWORD *)(j + 192);
    *(_OWORD *)(i + 160) = v57;
    *(_OWORD *)(i + 176) = v58;
    *(_OWORD *)(i + 144) = v56;
    *(_OWORD *)j = v115;
    v59 = v116;
    v60 = v117;
    v61 = v119;
    *(_OWORD *)(j + 48) = v118;
    *(_OWORD *)(j + 64) = v61;
    *(_OWORD *)(j + 16) = v59;
    *(_OWORD *)(j + 32) = v60;
    v62 = v120;
    v63 = v121;
    v64 = v123;
    *(_OWORD *)(j + 112) = v122;
    *(_OWORD *)(j + 128) = v64;
    *(_OWORD *)(j + 80) = v62;
    *(_OWORD *)(j + 96) = v63;
    v65 = v124;
    v66 = v125;
    v67 = v126;
    *(_QWORD *)(j + 192) = v127;
    *(_OWORD *)(j + 160) = v66;
    *(_OWORD *)(j + 176) = v67;
    *(_OWORD *)(j + 144) = v65;
    do
    {
      while (1)
      {
        i += 200;
        v68 = *(_QWORD *)(i + 48);
        if ((_QWORD)v105 == v68)
          break;
        if ((uint64_t)v105 < v68)
          goto LABEL_71;
      }
      v69 = *(_QWORD *)(i + 56);
      v71 = __OFSUB__(*((_QWORD *)&v105 + 1), v69);
      v70 = *((_QWORD *)&v105 + 1) - v69 < 0;
      if (*((_QWORD *)&v105 + 1) == v69)
      {
        v72 = *(_QWORD *)(i + 64);
        v71 = __OFSUB__((_QWORD)v106, v72);
        v70 = (uint64_t)v106 - v72 < 0;
        if ((_QWORD)v106 == v72)
        {
          v73 = *(_QWORD *)(i + 80);
          v71 = __OFSUB__((_QWORD)v107, v73);
          v70 = (uint64_t)v107 - v73 < 0;
          if ((_QWORD)v107 == v73)
          {
            v74 = *(_QWORD *)(i + 72);
            v71 = __OFSUB__(*((_QWORD *)&v106 + 1), v74);
            v70 = *((_QWORD *)&v106 + 1) - v74 < 0;
          }
        }
      }
    }
    while (v70 == v71
         && (v106 != *(_OWORD *)(i + 64)
          || (_QWORD)v107 != *(_QWORD *)(i + 80)
          || *((_QWORD *)&v105 + 1) != v69
          || !sub_100B88E88((uint64_t)&v102, i, a3)));
    do
    {
LABEL_71:
      while (1)
      {
        j -= 200;
        v75 = *(_QWORD *)(j + 48);
        if ((_QWORD)v105 == v75)
          break;
        if ((uint64_t)v105 >= v75)
          goto LABEL_81;
      }
      v76 = *(_QWORD *)(j + 56);
      v78 = __OFSUB__(*((_QWORD *)&v105 + 1), v76);
      v77 = *((_QWORD *)&v105 + 1) - v76 < 0;
      if (*((_QWORD *)&v105 + 1) == v76)
      {
        v79 = *(_QWORD *)(j + 64);
        v78 = __OFSUB__((_QWORD)v106, v79);
        v77 = (uint64_t)v106 - v79 < 0;
        if ((_QWORD)v106 == v79)
        {
          v80 = *(_QWORD *)(j + 80);
          v78 = __OFSUB__((_QWORD)v107, v80);
          v77 = (uint64_t)v107 - v80 < 0;
          if ((_QWORD)v107 == v80)
          {
            v81 = *(_QWORD *)(j + 72);
            v78 = __OFSUB__(*((_QWORD *)&v106 + 1), v81);
            v77 = *((_QWORD *)&v106 + 1) - v81 < 0;
          }
        }
      }
    }
    while (v77 != v78
         || v106 == *(_OWORD *)(j + 64)
         && *((_QWORD *)&v105 + 1) == v76
         && (_QWORD)v107 == *(_QWORD *)(j + 80)
         && (sub_100B88E88((uint64_t)&v102, j, a3) & 1) != 0);
  }
  v82 = (__int128 *)(i - 200);
  if ((__int128 *)(i - 200) != a1)
  {
    *a1 = *v82;
    v83 = *(_OWORD *)(i - 184);
    v84 = *(_OWORD *)(i - 168);
    v85 = *(_OWORD *)(i - 136);
    a1[3] = *(_OWORD *)(i - 152);
    a1[4] = v85;
    a1[1] = v83;
    a1[2] = v84;
    v86 = *(_OWORD *)(i - 120);
    v87 = *(_OWORD *)(i - 104);
    v88 = *(_OWORD *)(i - 72);
    a1[7] = *(_OWORD *)(i - 88);
    a1[8] = v88;
    a1[5] = v86;
    a1[6] = v87;
    v89 = *(_OWORD *)(i - 56);
    v90 = *(_OWORD *)(i - 40);
    v91 = *(_OWORD *)(i - 24);
    *((_QWORD *)a1 + 24) = *(_QWORD *)(i - 8);
    a1[10] = v90;
    a1[11] = v91;
    a1[9] = v89;
  }
  *v82 = v102;
  v92 = v103;
  v93 = v104;
  v94 = v106;
  *(_OWORD *)(i - 152) = v105;
  *(_OWORD *)(i - 136) = v94;
  *(_OWORD *)(i - 184) = v92;
  *(_OWORD *)(i - 168) = v93;
  v95 = v107;
  v96 = v108;
  v97 = v110;
  *(_OWORD *)(i - 88) = v109;
  *(_OWORD *)(i - 72) = v97;
  *(_OWORD *)(i - 120) = v95;
  *(_OWORD *)(i - 104) = v96;
  v98 = v111;
  v99 = v112;
  v100 = v113;
  *(_QWORD *)(i - 8) = v114;
  *(_OWORD *)(i - 40) = v99;
  *(_OWORD *)(i - 24) = v100;
  *(_OWORD *)(i - 56) = v98;
  return i;
}

unint64_t sub_100B88424(__int128 *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;

  v5 = 0;
  v111 = *((_QWORD *)a1 + 24);
  v6 = a1[11];
  v109 = a1[10];
  v110 = v6;
  v7 = a1[7];
  v105 = a1[6];
  v106 = v7;
  v8 = a1[9];
  v107 = a1[8];
  v108 = v8;
  v9 = a1[3];
  v101 = a1[2];
  v102 = v9;
  v10 = a1[5];
  v103 = a1[4];
  v104 = v10;
  v11 = a1[1];
  v99 = *a1;
  v100 = v11;
  while (1)
  {
    v12 = (uint64_t)a1 + v5;
    v13 = *(_QWORD *)((char *)a1 + v5 + 248);
    if (v13 == (_QWORD)v102)
      break;
    if (v13 >= (uint64_t)v102)
      goto LABEL_15;
LABEL_14:
    v5 += 200;
  }
  v14 = *(_QWORD *)(v12 + 256);
  v16 = __OFSUB__(v14, *((_QWORD *)&v102 + 1));
  v15 = v14 - *((_QWORD *)&v102 + 1) < 0;
  if (v14 == *((_QWORD *)&v102 + 1))
  {
    v17 = *(_QWORD *)((char *)a1 + v5 + 264);
    v16 = __OFSUB__(v17, (_QWORD)v103);
    v15 = v17 - (uint64_t)v103 < 0;
    if (v17 == (_QWORD)v103)
    {
      v18 = *(_QWORD *)((char *)a1 + v5 + 280);
      v16 = __OFSUB__(v18, (_QWORD)v104);
      v15 = v18 - (uint64_t)v104 < 0;
      if (v18 == (_QWORD)v104)
      {
        v19 = *(_QWORD *)((char *)a1 + v5 + 272);
        v16 = __OFSUB__(v19, *((_QWORD *)&v103 + 1));
        v15 = v19 - *((_QWORD *)&v103 + 1) < 0;
      }
    }
  }
  if (v15 != v16
    || *(__int128 *)((char *)a1 + v5 + 264) == v103
    && v14 == *((_QWORD *)&v102 + 1)
    && *(_QWORD *)((char *)a1 + v5 + 280) == (_QWORD)v104
    && (sub_100B88E88(v12 + 200, (uint64_t)&v99, a3) & 1) != 0)
  {
    goto LABEL_14;
  }
LABEL_15:
  v20 = (unint64_t)a1 + v5;
  v21 = (unint64_t)a1 + v5 + 200;
  if (v5)
  {
    do
    {
      while (1)
      {
        a2 -= 25;
        v22 = a2[6];
        if (v22 == (_QWORD)v102)
          break;
        if (v22 < (uint64_t)v102)
          goto LABEL_46;
      }
      v23 = a2[7];
      v25 = __OFSUB__(v23, *((_QWORD *)&v102 + 1));
      v24 = v23 - *((_QWORD *)&v102 + 1) < 0;
      if (v23 == *((_QWORD *)&v102 + 1))
      {
        v26 = a2[8];
        v25 = __OFSUB__(v26, (_QWORD)v103);
        v24 = v26 - (uint64_t)v103 < 0;
        if (v26 == (_QWORD)v103)
        {
          v27 = a2[10];
          v25 = __OFSUB__(v27, (_QWORD)v104);
          v24 = v27 - (uint64_t)v104 < 0;
          if (v27 == (_QWORD)v104)
          {
            v28 = a2[9];
            v25 = __OFSUB__(v28, *((_QWORD *)&v103 + 1));
            v24 = v28 - *((_QWORD *)&v103 + 1) < 0;
          }
        }
      }
    }
    while (v24 == v25
         && (*((_OWORD *)a2 + 4) != v103
          || v23 != *((_QWORD *)&v102 + 1)
          || a2[10] != (_QWORD)v104
          || !sub_100B88E88((uint64_t)a2, (uint64_t)&v99, a3)));
  }
  else
  {
    do
    {
      if (v21 >= (unint64_t)a2)
        break;
      while (1)
      {
        a2 -= 25;
        v29 = a2[6];
        if (v29 == (_QWORD)v102)
          break;
        if (v29 < (uint64_t)v102 || v21 >= (unint64_t)a2)
          goto LABEL_46;
      }
      v31 = a2[7];
      v33 = __OFSUB__(v31, *((_QWORD *)&v102 + 1));
      v32 = v31 - *((_QWORD *)&v102 + 1) < 0;
      if (v31 == *((_QWORD *)&v102 + 1))
      {
        v34 = a2[8];
        v33 = __OFSUB__(v34, (_QWORD)v103);
        v32 = v34 - (uint64_t)v103 < 0;
        if (v34 == (_QWORD)v103)
        {
          v35 = a2[10];
          v33 = __OFSUB__(v35, (_QWORD)v104);
          v32 = v35 - (uint64_t)v104 < 0;
          if (v35 == (_QWORD)v104)
          {
            v36 = a2[9];
            v33 = __OFSUB__(v36, *((_QWORD *)&v103 + 1));
            v32 = v36 - *((_QWORD *)&v103 + 1) < 0;
          }
        }
      }
    }
    while (v32 == v33
         && (*((_OWORD *)a2 + 4) != v103
          || v31 != *((_QWORD *)&v102 + 1)
          || a2[10] != (_QWORD)v104
          || (sub_100B88E88((uint64_t)a2, (uint64_t)&v99, a3) & 1) == 0));
  }
LABEL_46:
  if (v21 < (unint64_t)a2)
  {
    v37 = (unint64_t)a1 + v5 + 200;
    v38 = (unint64_t)a2;
    do
    {
      v112 = *(_OWORD *)v37;
      v39 = *(_OWORD *)(v37 + 16);
      v40 = *(_OWORD *)(v37 + 32);
      v41 = *(_OWORD *)(v37 + 64);
      v115 = *(_OWORD *)(v37 + 48);
      v116 = v41;
      v113 = v39;
      v114 = v40;
      v42 = *(_OWORD *)(v37 + 80);
      v43 = *(_OWORD *)(v37 + 96);
      v44 = *(_OWORD *)(v37 + 128);
      v119 = *(_OWORD *)(v37 + 112);
      v120 = v44;
      v117 = v42;
      v118 = v43;
      v45 = *(_OWORD *)(v37 + 144);
      v46 = *(_OWORD *)(v37 + 160);
      v47 = *(_OWORD *)(v37 + 176);
      v124 = *(_QWORD *)(v37 + 192);
      v122 = v46;
      v123 = v47;
      v121 = v45;
      *(_OWORD *)v37 = *(_OWORD *)v38;
      v48 = *(_OWORD *)(v38 + 16);
      v49 = *(_OWORD *)(v38 + 32);
      v50 = *(_OWORD *)(v38 + 64);
      *(_OWORD *)(v37 + 48) = *(_OWORD *)(v38 + 48);
      *(_OWORD *)(v37 + 64) = v50;
      *(_OWORD *)(v37 + 16) = v48;
      *(_OWORD *)(v37 + 32) = v49;
      v51 = *(_OWORD *)(v38 + 80);
      v52 = *(_OWORD *)(v38 + 96);
      v53 = *(_OWORD *)(v38 + 128);
      *(_OWORD *)(v37 + 112) = *(_OWORD *)(v38 + 112);
      *(_OWORD *)(v37 + 128) = v53;
      *(_OWORD *)(v37 + 80) = v51;
      *(_OWORD *)(v37 + 96) = v52;
      v54 = *(_OWORD *)(v38 + 144);
      v55 = *(_OWORD *)(v38 + 160);
      v56 = *(_OWORD *)(v38 + 176);
      *(_QWORD *)(v37 + 192) = *(_QWORD *)(v38 + 192);
      *(_OWORD *)(v37 + 160) = v55;
      *(_OWORD *)(v37 + 176) = v56;
      *(_OWORD *)(v37 + 144) = v54;
      *(_OWORD *)v38 = v112;
      v57 = v113;
      v58 = v114;
      v59 = v116;
      *(_OWORD *)(v38 + 48) = v115;
      *(_OWORD *)(v38 + 64) = v59;
      *(_OWORD *)(v38 + 16) = v57;
      *(_OWORD *)(v38 + 32) = v58;
      v60 = v117;
      v61 = v118;
      v62 = v120;
      *(_OWORD *)(v38 + 112) = v119;
      *(_OWORD *)(v38 + 128) = v62;
      *(_OWORD *)(v38 + 80) = v60;
      *(_OWORD *)(v38 + 96) = v61;
      v63 = v121;
      v64 = v122;
      v65 = v123;
      *(_QWORD *)(v38 + 192) = v124;
      *(_OWORD *)(v38 + 160) = v64;
      *(_OWORD *)(v38 + 176) = v65;
      *(_OWORD *)(v38 + 144) = v63;
      do
      {
        while (1)
        {
          v37 += 200;
          v66 = *(_QWORD *)(v37 + 48);
          if (v66 == (_QWORD)v102)
            break;
          if (v66 >= (uint64_t)v102)
            goto LABEL_63;
        }
        v67 = *(_QWORD *)(v37 + 56);
        v69 = __OFSUB__(v67, *((_QWORD *)&v102 + 1));
        v68 = v67 - *((_QWORD *)&v102 + 1) < 0;
        if (v67 == *((_QWORD *)&v102 + 1))
        {
          v70 = *(_QWORD *)(v37 + 64);
          v69 = __OFSUB__(v70, (_QWORD)v103);
          v68 = v70 - (uint64_t)v103 < 0;
          if (v70 == (_QWORD)v103)
          {
            v71 = *(_QWORD *)(v37 + 80);
            v69 = __OFSUB__(v71, (_QWORD)v104);
            v68 = v71 - (uint64_t)v104 < 0;
            if (v71 == (_QWORD)v104)
            {
              v72 = *(_QWORD *)(v37 + 72);
              v69 = __OFSUB__(v72, *((_QWORD *)&v103 + 1));
              v68 = v72 - *((_QWORD *)&v103 + 1) < 0;
            }
          }
        }
      }
      while (v68 != v69
           || *(_OWORD *)(v37 + 64) == v103
           && *(_QWORD *)(v37 + 80) == (_QWORD)v104
           && v67 == *((_QWORD *)&v102 + 1)
           && sub_100B88E88(v37, (uint64_t)&v99, a3));
      do
      {
LABEL_63:
        while (1)
        {
          v38 -= 200;
          v73 = *(_QWORD *)(v38 + 48);
          if (v73 == (_QWORD)v102)
            break;
          if (v73 < (uint64_t)v102)
            goto LABEL_73;
        }
        v74 = *(_QWORD *)(v38 + 56);
        v76 = __OFSUB__(v74, *((_QWORD *)&v102 + 1));
        v75 = v74 - *((_QWORD *)&v102 + 1) < 0;
        if (v74 == *((_QWORD *)&v102 + 1))
        {
          v77 = *(_QWORD *)(v38 + 64);
          v76 = __OFSUB__(v77, (_QWORD)v103);
          v75 = v77 - (uint64_t)v103 < 0;
          if (v77 == (_QWORD)v103)
          {
            v78 = *(_QWORD *)(v38 + 80);
            v76 = __OFSUB__(v78, (_QWORD)v104);
            v75 = v78 - (uint64_t)v104 < 0;
            if (v78 == (_QWORD)v104)
            {
              v79 = *(_QWORD *)(v38 + 72);
              v76 = __OFSUB__(v79, *((_QWORD *)&v103 + 1));
              v75 = v79 - *((_QWORD *)&v103 + 1) < 0;
            }
          }
        }
      }
      while (v75 == v76
           && (*(_OWORD *)(v38 + 64) != v103
            || v74 != *((_QWORD *)&v102 + 1)
            || *(_QWORD *)(v38 + 80) != (_QWORD)v104
            || !sub_100B88E88(v38, (uint64_t)&v99, a3)));
LABEL_73:
      ;
    }
    while (v37 < v38);
    v20 = v37 - 200;
  }
  if ((__int128 *)v20 != a1)
  {
    *a1 = *(_OWORD *)v20;
    v80 = *(_OWORD *)(v20 + 16);
    v81 = *(_OWORD *)(v20 + 32);
    v82 = *(_OWORD *)(v20 + 64);
    a1[3] = *(_OWORD *)(v20 + 48);
    a1[4] = v82;
    a1[1] = v80;
    a1[2] = v81;
    v83 = *(_OWORD *)(v20 + 80);
    v84 = *(_OWORD *)(v20 + 96);
    v85 = *(_OWORD *)(v20 + 128);
    a1[7] = *(_OWORD *)(v20 + 112);
    a1[8] = v85;
    a1[5] = v83;
    a1[6] = v84;
    v86 = *(_OWORD *)(v20 + 144);
    v87 = *(_OWORD *)(v20 + 160);
    v88 = *(_OWORD *)(v20 + 176);
    *((_QWORD *)a1 + 24) = *(_QWORD *)(v20 + 192);
    a1[10] = v87;
    a1[11] = v88;
    a1[9] = v86;
  }
  *(_OWORD *)v20 = v99;
  v89 = v100;
  v90 = v101;
  v91 = v103;
  *(_OWORD *)(v20 + 48) = v102;
  *(_OWORD *)(v20 + 64) = v91;
  *(_OWORD *)(v20 + 16) = v89;
  *(_OWORD *)(v20 + 32) = v90;
  v92 = v104;
  v93 = v105;
  v94 = v107;
  *(_OWORD *)(v20 + 112) = v106;
  *(_OWORD *)(v20 + 128) = v94;
  *(_OWORD *)(v20 + 80) = v92;
  *(_OWORD *)(v20 + 96) = v93;
  v95 = v108;
  v96 = v109;
  v97 = v110;
  *(_QWORD *)(v20 + 192) = v111;
  *(_OWORD *)(v20 + 160) = v96;
  *(_OWORD *)(v20 + 176) = v97;
  *(_OWORD *)(v20 + 144) = v95;
  return v20;
}

BOOL sub_100B88970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _BOOL8 result;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v5 = 0x8F5C28F5C28F5C29 * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (_OWORD *)(a2 - 200);
      v8 = *(_QWORD *)(a2 - 152);
      v9 = *(_QWORD *)(a1 + 48);
      if (v8 != v9)
      {
        if (v8 >= v9)
          return result;
        goto LABEL_52;
      }
      v10 = *(_QWORD *)(a2 - 144);
      v11 = *(_QWORD *)(a1 + 56);
      v12 = v10 < v11;
      if (v10 == v11)
      {
        v13 = *(_QWORD *)(a2 - 136);
        v14 = *(_QWORD *)(a1 + 64);
        v12 = v13 < v14;
        if (v13 == v14)
          v12 = *(_OWORD *)(a2 - 128) < *(_OWORD *)(a1 + 72);
      }
      if (v12)
        goto LABEL_52;
      if (*(_QWORD *)(a2 - 128) == *(_QWORD *)(a1 + 72)
        && *(_QWORD *)(a2 - 136) == *(_QWORD *)(a1 + 64)
        && v10 == v11
        && *(_QWORD *)(a2 - 120) == *(_QWORD *)(a1 + 80))
      {
        if (!sub_100B88E88(a2 - 200, a1, a3))
          return 1;
LABEL_52:
        v62 = *(_OWORD *)(a1 + 176);
        v93 = *(_OWORD *)(a1 + 160);
        v94 = v62;
        v95 = *(_QWORD *)(a1 + 192);
        v63 = *(_OWORD *)(a1 + 112);
        v89 = *(_OWORD *)(a1 + 96);
        v90 = v63;
        v64 = *(_OWORD *)(a1 + 144);
        v91 = *(_OWORD *)(a1 + 128);
        v92 = v64;
        v65 = *(_OWORD *)(a1 + 48);
        v85 = *(_OWORD *)(a1 + 32);
        v86 = v65;
        v66 = *(_OWORD *)(a1 + 80);
        v87 = *(_OWORD *)(a1 + 64);
        v88 = v66;
        v67 = *(_OWORD *)(a1 + 16);
        v83 = *(_OWORD *)a1;
        v84 = v67;
        *(_OWORD *)a1 = *v7;
        v68 = *(_OWORD *)(a2 - 184);
        v69 = *(_OWORD *)(a2 - 168);
        v70 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 64) = v70;
        *(_OWORD *)(a1 + 16) = v68;
        *(_OWORD *)(a1 + 32) = v69;
        v71 = *(_OWORD *)(a2 - 120);
        v72 = *(_OWORD *)(a2 - 104);
        v73 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 128) = v73;
        *(_OWORD *)(a1 + 80) = v71;
        *(_OWORD *)(a1 + 96) = v72;
        v74 = *(_OWORD *)(a2 - 56);
        v75 = *(_OWORD *)(a2 - 40);
        v76 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 160) = v75;
        *(_OWORD *)(a1 + 176) = v76;
        *(_OWORD *)(a1 + 144) = v74;
        v77 = v94;
        *(_OWORD *)(a2 - 40) = v93;
        *(_OWORD *)(a2 - 24) = v77;
        *(_QWORD *)(a2 - 8) = v95;
        v78 = v90;
        *(_OWORD *)(a2 - 104) = v89;
        *(_OWORD *)(a2 - 88) = v78;
        v79 = v92;
        *(_OWORD *)(a2 - 72) = v91;
        *(_OWORD *)(a2 - 56) = v79;
        v80 = v86;
        *(_OWORD *)(a2 - 168) = v85;
        *(_OWORD *)(a2 - 152) = v80;
        v81 = v88;
        *(_OWORD *)(a2 - 136) = v87;
        *(_OWORD *)(a2 - 120) = v81;
        v82 = v84;
        result = 1;
        *v7 = v83;
        *(_OWORD *)(a2 - 184) = v82;
      }
      return result;
    case 3uLL:
      sub_100B8777C(a1, a1 + 200, a2 - 200);
      return 1;
    case 4uLL:
      sub_100B89250(a1, a1 + 200, a1 + 400, a2 - 200);
      return 1;
    case 5uLL:
      sub_100B89688(a1, a1 + 200, a1 + 400, a1 + 600, a2 - 200);
      return 1;
    default:
      v15 = a1 + 400;
      sub_100B8777C(a1, a1 + 200, a1 + 400);
      v17 = a1 + 600;
      if (a1 + 600 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
LABEL_16:
  v20 = *(_QWORD *)(v17 + 48);
  v21 = *(_QWORD *)(v15 + 48);
  if (v20 == v21)
  {
    v22 = *(_QWORD *)(v17 + 56);
    v23 = *(_QWORD *)(v15 + 56);
    v24 = v22 < v23;
    if (v22 == v23)
    {
      v25 = *(_QWORD *)(v17 + 64);
      v26 = *(_QWORD *)(v15 + 64);
      v24 = v25 < v26;
      if (v25 == v26)
        v24 = *(_OWORD *)(v17 + 72) < *(_OWORD *)(v15 + 72);
    }
    if (!v24
      && (*(_QWORD *)(v17 + 72) != *(_QWORD *)(v15 + 72)
       || *(_QWORD *)(v17 + 64) != *(_QWORD *)(v15 + 64)
       || v22 != v23
       || *(_QWORD *)(v17 + 80) != *(_QWORD *)(v15 + 80)
       || !sub_100B88E88(v17, v15, v16)))
    {
      goto LABEL_45;
    }
  }
  else if (v20 >= v21)
  {
    goto LABEL_45;
  }
  v27 = *(_OWORD *)(v17 + 48);
  v85 = *(_OWORD *)(v17 + 32);
  v86 = v27;
  v28 = *(_OWORD *)(v17 + 112);
  v89 = *(_OWORD *)(v17 + 96);
  v90 = v28;
  v29 = *(_OWORD *)(v17 + 80);
  v87 = *(_OWORD *)(v17 + 64);
  v88 = v29;
  v95 = *(_QWORD *)(v17 + 192);
  v30 = *(_OWORD *)(v17 + 176);
  v93 = *(_OWORD *)(v17 + 160);
  v94 = v30;
  v31 = *(_OWORD *)(v17 + 144);
  v91 = *(_OWORD *)(v17 + 128);
  v92 = v31;
  v32 = *(_OWORD *)(v17 + 16);
  v83 = *(_OWORD *)v17;
  v84 = v32;
  v33 = *(_OWORD *)(v15 + 176);
  *(_OWORD *)(v17 + 160) = *(_OWORD *)(v15 + 160);
  *(_OWORD *)(v17 + 176) = v33;
  *(_QWORD *)(v17 + 192) = *(_QWORD *)(v15 + 192);
  v34 = *(_OWORD *)(v15 + 112);
  *(_OWORD *)(v17 + 96) = *(_OWORD *)(v15 + 96);
  *(_OWORD *)(v17 + 112) = v34;
  v35 = *(_OWORD *)(v15 + 144);
  *(_OWORD *)(v17 + 128) = *(_OWORD *)(v15 + 128);
  *(_OWORD *)(v17 + 144) = v35;
  v36 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v17 + 48) = v36;
  v37 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(v17 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(v17 + 80) = v37;
  v38 = *(_OWORD *)(v15 + 16);
  v39 = a1;
  *(_OWORD *)v17 = *(_OWORD *)v15;
  *(_OWORD *)(v17 + 16) = v38;
  if (v15 == a1)
    goto LABEL_44;
  v40 = v18;
  while (1)
  {
    v41 = a1 + v40;
    v42 = (_OWORD *)(a1 + v40 + 200);
    v43 = *(_QWORD *)(a1 + v40 + 248);
    if ((_QWORD)v86 == v43)
    {
      v44 = *(_QWORD *)(v41 + 256);
      v45 = *((_QWORD *)&v86 + 1) < v44;
      if (*((_QWORD *)&v86 + 1) == v44)
      {
        v46 = *(_QWORD *)(a1 + v40 + 264);
        v45 = (uint64_t)v87 < v46;
        if ((_QWORD)v87 == v46)
          v45 = (__int128)__PAIR128__(v88, *((unint64_t *)&v87 + 1)) < *(_OWORD *)(a1 + v40 + 272);
      }
      if (!v45)
      {
        if (v87 != *(_OWORD *)(a1 + v40 + 264)
          || *((_QWORD *)&v86 + 1) != v44
          || (_QWORD)v88 != *(_QWORD *)(a1 + v40 + 280))
        {
LABEL_43:
          v39 = v15;
LABEL_44:
          *(_OWORD *)v39 = v83;
          v53 = v84;
          v54 = v85;
          v55 = v87;
          *(_OWORD *)(v39 + 48) = v86;
          *(_OWORD *)(v39 + 64) = v55;
          *(_OWORD *)(v39 + 16) = v53;
          *(_OWORD *)(v39 + 32) = v54;
          v56 = v88;
          v57 = v89;
          v58 = v91;
          *(_OWORD *)(v39 + 112) = v90;
          *(_OWORD *)(v39 + 128) = v58;
          *(_OWORD *)(v39 + 80) = v56;
          *(_OWORD *)(v39 + 96) = v57;
          v59 = v92;
          v60 = v93;
          v61 = v94;
          *(_QWORD *)(v39 + 192) = v95;
          *(_OWORD *)(v39 + 160) = v60;
          *(_OWORD *)(v39 + 176) = v61;
          *(_OWORD *)(v39 + 144) = v59;
          if (++v19 == 8)
            return v17 + 200 == a2;
LABEL_45:
          v15 = v17;
          v18 += 200;
          v17 += 200;
          if (v17 == a2)
            return 1;
          goto LABEL_16;
        }
        if (!sub_100B88E88((uint64_t)&v83, a1 + v40 + 200, v16))
        {
          v39 = a1 + v40 + 400;
          goto LABEL_44;
        }
      }
    }
    else if ((uint64_t)v86 >= v43)
    {
      goto LABEL_43;
    }
    v15 -= 200;
    v47 = *(_OWORD *)(a1 + v40 + 376);
    *(_OWORD *)(v41 + 560) = *(_OWORD *)(a1 + v40 + 360);
    *(_OWORD *)(v41 + 576) = v47;
    *(_QWORD *)(v41 + 592) = *(_QWORD *)(a1 + v40 + 392);
    v48 = *(_OWORD *)(a1 + v40 + 312);
    *(_OWORD *)(v41 + 496) = *(_OWORD *)(a1 + v40 + 296);
    *(_OWORD *)(v41 + 512) = v48;
    v49 = *(_OWORD *)(a1 + v40 + 344);
    *(_OWORD *)(v41 + 528) = *(_OWORD *)(a1 + v40 + 328);
    *(_OWORD *)(v41 + 544) = v49;
    v50 = *(_OWORD *)(a1 + v40 + 248);
    *(_OWORD *)(v41 + 432) = *(_OWORD *)(a1 + v40 + 232);
    *(_OWORD *)(v41 + 448) = v50;
    v51 = *(_OWORD *)(a1 + v40 + 280);
    *(_OWORD *)(v41 + 464) = *(_OWORD *)(a1 + v40 + 264);
    *(_OWORD *)(v41 + 480) = v51;
    v52 = *(_OWORD *)(a1 + v40 + 216);
    v40 -= 200;
    *(_OWORD *)(v41 + 400) = *v42;
    *(_OWORD *)(v41 + 416) = v52;
    if (v40 == -400)
    {
      v39 = a1;
      goto LABEL_44;
    }
  }
}

uint64_t sub_100B88E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  _BOOL4 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  if (vabdd_f64(*(double *)(a1 + 104), *(double *)(a2 + 104)) < 50.0)
  {
    v5 = *(double *)(a1 + 96);
    if (v5 == 0.0)
      sub_10191BABC();
    v6 = *(double *)(a2 + 96);
    if (v6 == 0.0)
      sub_10191BAE4();
    v7 = *(double *)(a1 + 88) / v5;
    v8 = *(double *)(a2 + 88) / v6;
    if (v7 == v8)
      goto LABEL_36;
    if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v15 = vabdd_f64(v7, v8);
      v16 = fabs(v7);
      v17 = fabs(v8);
      if (v16 < v17)
        v16 = v17;
      v18 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
      if (v15 <= v18)
      {
LABEL_36:
        v9 = *(double *)a1;
        v38 = *(double *)(a1 + 8);
        v39 = v9;
        sub_100778A68(&v39, &v38, 1);
        v10 = v38;
        v11 = v39;
        v12 = *(double *)a2;
        v38 = *(double *)(a2 + 8);
        v39 = v12;
        sub_100778A68(&v39, &v38, 1);
        if (v11 == v39)
          goto LABEL_61;
        if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v19 = vabdd_f64(v11, v39);
          v20 = fabs(v11);
          v21 = fabs(v39);
          if (v20 >= v21)
            v21 = v20;
          v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v19 <= v22)
          {
LABEL_61:
            if (v10 == v38)
              return sub_100B89148((uint64_t)&unk_1022F9C30, a1, a2);
            if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              v23 = vabdd_f64(v10, v38);
              v24 = fabs(v10);
              v25 = fabs(v38);
              if (v24 >= v25)
                v25 = v24;
              v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
              if (v23 <= v26)
                return sub_100B89148((uint64_t)&unk_1022F9C30, a1, a2);
            }
          }
        }
      }
    }
  }
  v27 = *(double *)(a1 + 104);
  v28 = *(double *)(a2 + 104);
  if (vabdd_f64(v27, v28) >= 50.0)
    return v27 < v28;
  v29 = *(double *)(a1 + 96);
  if (v29 == 0.0)
    sub_10191B9FC(a1, a2, a3);
  v30 = *(double *)(a2 + 96);
  if (v30 == 0.0)
    sub_10191BA20(a1, a2, a3);
  v31 = *(double *)(a1 + 88) / v29;
  v32 = *(double *)(a2 + 88) / v30;
  if (v31 == v32)
  {
    v33 = 0;
  }
  else if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v33 = 1;
  }
  else
  {
    v34 = vabdd_f64(v31, v32);
    v35 = fabs(v31);
    v36 = fabs(v32);
    if (v35 < v36)
      v35 = v36;
    if (v35 >= 1.0)
      v37 = v35 * 2.22044605e-16;
    else
      v37 = 2.22044605e-16;
    v33 = v34 > v37;
  }
  return v31 < v32 && v33;
}

uint64_t sub_100B89148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v14;

  if (*(_QWORD *)(a2 + 136) != *(_QWORD *)(a3 + 136))
  {
    v7 = *(int *)(a2 + 40);
    v8 = (char *)dword_101C17434;
    if (v7 <= 5)
    {
      v6 = dword_101C17434[v7];
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a3 + 144);
  if (v3 == v4)
  {
    v5 = *(int *)(a2 + 40);
    if (v5 > 5)
      v6 = -1;
    else
      v6 = dword_101C17434[v5];
    v12 = *(int *)(a3 + 40);
    if (v12 <= 5)
    {
      v11 = dword_101C17434[v12];
      return v6 < v11;
    }
    goto LABEL_18;
  }
  if (v3 == -1)
  {
    v9 = *(_DWORD *)(a2 + 40);
    if (v9 == 1)
      return 0;
    if (v9 != 2)
    {
LABEL_10:
      v8 = "";
      if (v9 <= 5)
      {
        v6 = *(_DWORD *)&aDitmces[4 * v9 + 9];
        goto LABEL_13;
      }
LABEL_12:
      v6 = -1;
LABEL_13:
      v10 = *(int *)(a3 + 40);
      if (v10 <= 5)
      {
        v11 = *(_DWORD *)&v8[4 * v10];
        return v6 < v11;
      }
LABEL_18:
      v11 = -1;
      return v6 < v11;
    }
  }
  else
  {
    if (v4 != -1)
    {
LABEL_9:
      v9 = *(_DWORD *)(a2 + 40);
      goto LABEL_10;
    }
    v14 = *(_DWORD *)(a3 + 40);
    if (v14 != 1)
    {
      if (v14 != 2)
        goto LABEL_9;
      return 0;
    }
  }
  return 1;
}

__n128 sub_100B89250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  sub_100B8777C(a1, a2, a3);
  v10 = *(_QWORD *)(a4 + 48);
  v11 = *(_QWORD *)(a3 + 48);
  if (v10 != v11)
  {
    if (v10 >= v11)
      return result;
LABEL_13:
    v88 = *(_OWORD *)(a3 + 160);
    v91 = *(_OWORD *)(a3 + 176);
    v94 = *(_QWORD *)(a3 + 192);
    v76 = *(_OWORD *)(a3 + 96);
    v79 = *(_OWORD *)(a3 + 112);
    v82 = *(_OWORD *)(a3 + 128);
    v85 = *(_OWORD *)(a3 + 144);
    v64 = *(_OWORD *)(a3 + 32);
    v67 = *(_OWORD *)(a3 + 48);
    v70 = *(_OWORD *)(a3 + 64);
    v73 = *(_OWORD *)(a3 + 80);
    v58 = *(_OWORD *)a3;
    v61 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v17 = *(_OWORD *)(a4 + 16);
    v18 = *(_OWORD *)(a4 + 32);
    v19 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v19;
    *(_OWORD *)(a3 + 16) = v17;
    *(_OWORD *)(a3 + 32) = v18;
    v20 = *(_OWORD *)(a4 + 80);
    v21 = *(_OWORD *)(a4 + 96);
    v22 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v22;
    *(_OWORD *)(a3 + 80) = v20;
    *(_OWORD *)(a3 + 96) = v21;
    v23 = *(_OWORD *)(a4 + 144);
    v24 = *(_OWORD *)(a4 + 160);
    v25 = *(_OWORD *)(a4 + 176);
    *(_QWORD *)(a3 + 192) = *(_QWORD *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v24;
    *(_OWORD *)(a3 + 176) = v25;
    *(_OWORD *)(a3 + 144) = v23;
    *(_OWORD *)(a4 + 160) = v88;
    *(_OWORD *)(a4 + 176) = v91;
    *(_QWORD *)(a4 + 192) = v94;
    *(_OWORD *)(a4 + 96) = v76;
    *(_OWORD *)(a4 + 112) = v79;
    *(_OWORD *)(a4 + 128) = v82;
    *(_OWORD *)(a4 + 144) = v85;
    *(_OWORD *)(a4 + 32) = v64;
    *(_OWORD *)(a4 + 48) = v67;
    *(_OWORD *)(a4 + 64) = v70;
    *(_OWORD *)(a4 + 80) = v73;
    result = v61;
    *(_OWORD *)a4 = v58;
    *(__n128 *)(a4 + 16) = v61;
    v26 = *(_QWORD *)(a3 + 48);
    v27 = *(_QWORD *)(a2 + 48);
    if (v26 == v27)
    {
      v28 = *(_QWORD *)(a3 + 56);
      v29 = *(_QWORD *)(a2 + 56);
      v30 = v28 < v29;
      if (v28 == v29)
      {
        v31 = *(_QWORD *)(a3 + 64);
        v32 = *(_QWORD *)(a2 + 64);
        v30 = v31 < v32;
        if (v31 == v32)
          v30 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
      }
      if (!v30
        && (*(_QWORD *)(a3 + 72) != *(_QWORD *)(a2 + 72)
         || *(_QWORD *)(a3 + 64) != *(_QWORD *)(a2 + 64)
         || v28 != v29
         || *(_QWORD *)(a3 + 80) != *(_QWORD *)(a2 + 80)
         || !sub_100B88E88(a3, a2, v8)))
      {
        return result;
      }
    }
    else if (v26 >= v27)
    {
      return result;
    }
    v89 = *(_OWORD *)(a2 + 160);
    v92 = *(_OWORD *)(a2 + 176);
    v95 = *(_QWORD *)(a2 + 192);
    v77 = *(_OWORD *)(a2 + 96);
    v80 = *(_OWORD *)(a2 + 112);
    v83 = *(_OWORD *)(a2 + 128);
    v86 = *(_OWORD *)(a2 + 144);
    v65 = *(_OWORD *)(a2 + 32);
    v68 = *(_OWORD *)(a2 + 48);
    v71 = *(_OWORD *)(a2 + 64);
    v74 = *(_OWORD *)(a2 + 80);
    v59 = *(_OWORD *)a2;
    v62 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v33 = *(_OWORD *)(a3 + 16);
    v34 = *(_OWORD *)(a3 + 32);
    v35 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v35;
    *(_OWORD *)(a2 + 16) = v33;
    *(_OWORD *)(a2 + 32) = v34;
    v36 = *(_OWORD *)(a3 + 80);
    v37 = *(_OWORD *)(a3 + 96);
    v38 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v38;
    *(_OWORD *)(a2 + 80) = v36;
    *(_OWORD *)(a2 + 96) = v37;
    v39 = *(_OWORD *)(a3 + 144);
    v40 = *(_OWORD *)(a3 + 160);
    v41 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v40;
    *(_OWORD *)(a2 + 176) = v41;
    *(_OWORD *)(a2 + 144) = v39;
    *(_OWORD *)(a3 + 160) = v89;
    *(_OWORD *)(a3 + 176) = v92;
    *(_QWORD *)(a3 + 192) = v95;
    *(_OWORD *)(a3 + 96) = v77;
    *(_OWORD *)(a3 + 112) = v80;
    *(_OWORD *)(a3 + 128) = v83;
    *(_OWORD *)(a3 + 144) = v86;
    *(_OWORD *)(a3 + 32) = v65;
    *(_OWORD *)(a3 + 48) = v68;
    *(_OWORD *)(a3 + 64) = v71;
    *(_OWORD *)(a3 + 80) = v74;
    result = v62;
    *(_OWORD *)a3 = v59;
    *(__n128 *)(a3 + 16) = v62;
    v42 = *(_QWORD *)(a2 + 48);
    v43 = *(_QWORD *)(a1 + 48);
    if (v42 == v43)
    {
      v44 = *(_QWORD *)(a2 + 56);
      v45 = *(_QWORD *)(a1 + 56);
      v46 = v44 < v45;
      if (v44 == v45)
      {
        v47 = *(_QWORD *)(a2 + 64);
        v48 = *(_QWORD *)(a1 + 64);
        v46 = v47 < v48;
        if (v47 == v48)
          v46 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
      }
      if (!v46
        && (*(_QWORD *)(a2 + 72) != *(_QWORD *)(a1 + 72)
         || *(_QWORD *)(a2 + 64) != *(_QWORD *)(a1 + 64)
         || v44 != v45
         || *(_QWORD *)(a2 + 80) != *(_QWORD *)(a1 + 80)
         || !sub_100B88E88(a2, a1, v8)))
      {
        return result;
      }
    }
    else if (v42 >= v43)
    {
      return result;
    }
    v90 = *(_OWORD *)(a1 + 160);
    v93 = *(_OWORD *)(a1 + 176);
    v96 = *(_QWORD *)(a1 + 192);
    v78 = *(_OWORD *)(a1 + 96);
    v81 = *(_OWORD *)(a1 + 112);
    v84 = *(_OWORD *)(a1 + 128);
    v87 = *(_OWORD *)(a1 + 144);
    v66 = *(_OWORD *)(a1 + 32);
    v69 = *(_OWORD *)(a1 + 48);
    v72 = *(_OWORD *)(a1 + 64);
    v75 = *(_OWORD *)(a1 + 80);
    v60 = *(_OWORD *)a1;
    v63 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v49 = *(_OWORD *)(a2 + 16);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v51;
    *(_OWORD *)(a1 + 16) = v49;
    *(_OWORD *)(a1 + 32) = v50;
    v52 = *(_OWORD *)(a2 + 80);
    v53 = *(_OWORD *)(a2 + 96);
    v54 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v54;
    *(_OWORD *)(a1 + 80) = v52;
    *(_OWORD *)(a1 + 96) = v53;
    v55 = *(_OWORD *)(a2 + 144);
    v56 = *(_OWORD *)(a2 + 160);
    v57 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v56;
    *(_OWORD *)(a1 + 176) = v57;
    *(_OWORD *)(a1 + 144) = v55;
    *(_OWORD *)(a2 + 160) = v90;
    *(_OWORD *)(a2 + 176) = v93;
    *(_QWORD *)(a2 + 192) = v96;
    *(_OWORD *)(a2 + 96) = v78;
    *(_OWORD *)(a2 + 112) = v81;
    *(_OWORD *)(a2 + 128) = v84;
    *(_OWORD *)(a2 + 144) = v87;
    *(_OWORD *)(a2 + 32) = v66;
    *(_OWORD *)(a2 + 48) = v69;
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 80) = v75;
    result = v63;
    *(_OWORD *)a2 = v60;
    *(__n128 *)(a2 + 16) = v63;
    return result;
  }
  v12 = *(_QWORD *)(a4 + 56);
  v13 = *(_QWORD *)(a3 + 56);
  v14 = v12 < v13;
  if (v12 == v13)
  {
    v15 = *(_QWORD *)(a4 + 64);
    v16 = *(_QWORD *)(a3 + 64);
    v14 = v15 < v16;
    if (v15 == v16)
      v14 = *(_OWORD *)(a4 + 72) < *(_OWORD *)(a3 + 72);
  }
  if (v14
    || *(_QWORD *)(a4 + 72) == *(_QWORD *)(a3 + 72)
    && *(_QWORD *)(a4 + 64) == *(_QWORD *)(a3 + 64)
    && v12 == v13
    && *(_QWORD *)(a4 + 80) == *(_QWORD *)(a3 + 80)
    && sub_100B88E88(a4, a3, v8))
  {
    goto LABEL_13;
  }
  return result;
}

__n128 sub_100B89688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  result.n128_u64[0] = sub_100B89250(a1, a2, a3, a4).n128_u64[0];
  v12 = *(_QWORD *)(a5 + 48);
  v13 = *(_QWORD *)(a4 + 48);
  if (v12 != v13)
  {
    if (v12 >= v13)
      return result;
LABEL_13:
    v116 = *(_OWORD *)(a4 + 160);
    v120 = *(_OWORD *)(a4 + 176);
    v124 = *(_QWORD *)(a4 + 192);
    v100 = *(_OWORD *)(a4 + 96);
    v104 = *(_OWORD *)(a4 + 112);
    v108 = *(_OWORD *)(a4 + 128);
    v112 = *(_OWORD *)(a4 + 144);
    v84 = *(_OWORD *)(a4 + 32);
    v88 = *(_OWORD *)(a4 + 48);
    v92 = *(_OWORD *)(a4 + 64);
    v96 = *(_OWORD *)(a4 + 80);
    v76 = *(_OWORD *)a4;
    v80 = *(__n128 *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v19 = *(_OWORD *)(a5 + 16);
    v20 = *(_OWORD *)(a5 + 32);
    v21 = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v21;
    *(_OWORD *)(a4 + 16) = v19;
    *(_OWORD *)(a4 + 32) = v20;
    v22 = *(_OWORD *)(a5 + 80);
    v23 = *(_OWORD *)(a5 + 96);
    v24 = *(_OWORD *)(a5 + 128);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = v24;
    *(_OWORD *)(a4 + 80) = v22;
    *(_OWORD *)(a4 + 96) = v23;
    v25 = *(_OWORD *)(a5 + 144);
    v26 = *(_OWORD *)(a5 + 160);
    v27 = *(_OWORD *)(a5 + 176);
    *(_QWORD *)(a4 + 192) = *(_QWORD *)(a5 + 192);
    *(_OWORD *)(a4 + 160) = v26;
    *(_OWORD *)(a4 + 176) = v27;
    *(_OWORD *)(a4 + 144) = v25;
    *(_OWORD *)(a5 + 160) = v116;
    *(_OWORD *)(a5 + 176) = v120;
    *(_QWORD *)(a5 + 192) = v124;
    *(_OWORD *)(a5 + 96) = v100;
    *(_OWORD *)(a5 + 112) = v104;
    *(_OWORD *)(a5 + 128) = v108;
    *(_OWORD *)(a5 + 144) = v112;
    *(_OWORD *)(a5 + 32) = v84;
    *(_OWORD *)(a5 + 48) = v88;
    *(_OWORD *)(a5 + 64) = v92;
    *(_OWORD *)(a5 + 80) = v96;
    result = v80;
    *(_OWORD *)a5 = v76;
    *(__n128 *)(a5 + 16) = v80;
    v28 = *(_QWORD *)(a4 + 48);
    v29 = *(_QWORD *)(a3 + 48);
    if (v28 == v29)
    {
      v30 = *(_QWORD *)(a4 + 56);
      v31 = *(_QWORD *)(a3 + 56);
      v32 = v30 < v31;
      if (v30 == v31)
      {
        v33 = *(_QWORD *)(a4 + 64);
        v34 = *(_QWORD *)(a3 + 64);
        v32 = v33 < v34;
        if (v33 == v34)
          v32 = *(_OWORD *)(a4 + 72) < *(_OWORD *)(a3 + 72);
      }
      if (!v32
        && (*(_QWORD *)(a4 + 72) != *(_QWORD *)(a3 + 72)
         || *(_QWORD *)(a4 + 64) != *(_QWORD *)(a3 + 64)
         || v30 != v31
         || *(_QWORD *)(a4 + 80) != *(_QWORD *)(a3 + 80)
         || !sub_100B88E88(a4, a3, v10)))
      {
        return result;
      }
    }
    else if (v28 >= v29)
    {
      return result;
    }
    v117 = *(_OWORD *)(a3 + 160);
    v121 = *(_OWORD *)(a3 + 176);
    v125 = *(_QWORD *)(a3 + 192);
    v101 = *(_OWORD *)(a3 + 96);
    v105 = *(_OWORD *)(a3 + 112);
    v109 = *(_OWORD *)(a3 + 128);
    v113 = *(_OWORD *)(a3 + 144);
    v85 = *(_OWORD *)(a3 + 32);
    v89 = *(_OWORD *)(a3 + 48);
    v93 = *(_OWORD *)(a3 + 64);
    v97 = *(_OWORD *)(a3 + 80);
    v77 = *(_OWORD *)a3;
    v81 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v35 = *(_OWORD *)(a4 + 16);
    v36 = *(_OWORD *)(a4 + 32);
    v37 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v37;
    *(_OWORD *)(a3 + 16) = v35;
    *(_OWORD *)(a3 + 32) = v36;
    v38 = *(_OWORD *)(a4 + 80);
    v39 = *(_OWORD *)(a4 + 96);
    v40 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v40;
    *(_OWORD *)(a3 + 80) = v38;
    *(_OWORD *)(a3 + 96) = v39;
    v41 = *(_OWORD *)(a4 + 144);
    v42 = *(_OWORD *)(a4 + 160);
    v43 = *(_OWORD *)(a4 + 176);
    *(_QWORD *)(a3 + 192) = *(_QWORD *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v42;
    *(_OWORD *)(a3 + 176) = v43;
    *(_OWORD *)(a3 + 144) = v41;
    *(_OWORD *)(a4 + 160) = v117;
    *(_OWORD *)(a4 + 176) = v121;
    *(_QWORD *)(a4 + 192) = v125;
    *(_OWORD *)(a4 + 96) = v101;
    *(_OWORD *)(a4 + 112) = v105;
    *(_OWORD *)(a4 + 128) = v109;
    *(_OWORD *)(a4 + 144) = v113;
    *(_OWORD *)(a4 + 32) = v85;
    *(_OWORD *)(a4 + 48) = v89;
    *(_OWORD *)(a4 + 64) = v93;
    *(_OWORD *)(a4 + 80) = v97;
    result = v81;
    *(_OWORD *)a4 = v77;
    *(__n128 *)(a4 + 16) = v81;
    v44 = *(_QWORD *)(a3 + 48);
    v45 = *(_QWORD *)(a2 + 48);
    if (v44 == v45)
    {
      v46 = *(_QWORD *)(a3 + 56);
      v47 = *(_QWORD *)(a2 + 56);
      v48 = v46 < v47;
      if (v46 == v47)
      {
        v49 = *(_QWORD *)(a3 + 64);
        v50 = *(_QWORD *)(a2 + 64);
        v48 = v49 < v50;
        if (v49 == v50)
          v48 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
      }
      if (!v48
        && (*(_QWORD *)(a3 + 72) != *(_QWORD *)(a2 + 72)
         || *(_QWORD *)(a3 + 64) != *(_QWORD *)(a2 + 64)
         || v46 != v47
         || *(_QWORD *)(a3 + 80) != *(_QWORD *)(a2 + 80)
         || !sub_100B88E88(a3, a2, v10)))
      {
        return result;
      }
    }
    else if (v44 >= v45)
    {
      return result;
    }
    v118 = *(_OWORD *)(a2 + 160);
    v122 = *(_OWORD *)(a2 + 176);
    v126 = *(_QWORD *)(a2 + 192);
    v102 = *(_OWORD *)(a2 + 96);
    v106 = *(_OWORD *)(a2 + 112);
    v110 = *(_OWORD *)(a2 + 128);
    v114 = *(_OWORD *)(a2 + 144);
    v86 = *(_OWORD *)(a2 + 32);
    v90 = *(_OWORD *)(a2 + 48);
    v94 = *(_OWORD *)(a2 + 64);
    v98 = *(_OWORD *)(a2 + 80);
    v78 = *(_OWORD *)a2;
    v82 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v51 = *(_OWORD *)(a3 + 16);
    v52 = *(_OWORD *)(a3 + 32);
    v53 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v53;
    *(_OWORD *)(a2 + 16) = v51;
    *(_OWORD *)(a2 + 32) = v52;
    v54 = *(_OWORD *)(a3 + 80);
    v55 = *(_OWORD *)(a3 + 96);
    v56 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v56;
    *(_OWORD *)(a2 + 80) = v54;
    *(_OWORD *)(a2 + 96) = v55;
    v57 = *(_OWORD *)(a3 + 144);
    v58 = *(_OWORD *)(a3 + 160);
    v59 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v58;
    *(_OWORD *)(a2 + 176) = v59;
    *(_OWORD *)(a2 + 144) = v57;
    *(_OWORD *)(a3 + 160) = v118;
    *(_OWORD *)(a3 + 176) = v122;
    *(_QWORD *)(a3 + 192) = v126;
    *(_OWORD *)(a3 + 96) = v102;
    *(_OWORD *)(a3 + 112) = v106;
    *(_OWORD *)(a3 + 128) = v110;
    *(_OWORD *)(a3 + 144) = v114;
    *(_OWORD *)(a3 + 32) = v86;
    *(_OWORD *)(a3 + 48) = v90;
    *(_OWORD *)(a3 + 64) = v94;
    *(_OWORD *)(a3 + 80) = v98;
    result = v82;
    *(_OWORD *)a3 = v78;
    *(__n128 *)(a3 + 16) = v82;
    v60 = *(_QWORD *)(a2 + 48);
    v61 = *(_QWORD *)(a1 + 48);
    if (v60 == v61)
    {
      v62 = *(_QWORD *)(a2 + 56);
      v63 = *(_QWORD *)(a1 + 56);
      v64 = v62 < v63;
      if (v62 == v63)
      {
        v65 = *(_QWORD *)(a2 + 64);
        v66 = *(_QWORD *)(a1 + 64);
        v64 = v65 < v66;
        if (v65 == v66)
          v64 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
      }
      if (!v64
        && (*(_QWORD *)(a2 + 72) != *(_QWORD *)(a1 + 72)
         || *(_QWORD *)(a2 + 64) != *(_QWORD *)(a1 + 64)
         || v62 != v63
         || *(_QWORD *)(a2 + 80) != *(_QWORD *)(a1 + 80)
         || !sub_100B88E88(a2, a1, v10)))
      {
        return result;
      }
    }
    else if (v60 >= v61)
    {
      return result;
    }
    v119 = *(_OWORD *)(a1 + 160);
    v123 = *(_OWORD *)(a1 + 176);
    v127 = *(_QWORD *)(a1 + 192);
    v103 = *(_OWORD *)(a1 + 96);
    v107 = *(_OWORD *)(a1 + 112);
    v111 = *(_OWORD *)(a1 + 128);
    v115 = *(_OWORD *)(a1 + 144);
    v87 = *(_OWORD *)(a1 + 32);
    v91 = *(_OWORD *)(a1 + 48);
    v95 = *(_OWORD *)(a1 + 64);
    v99 = *(_OWORD *)(a1 + 80);
    v79 = *(_OWORD *)a1;
    v83 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v67 = *(_OWORD *)(a2 + 16);
    v68 = *(_OWORD *)(a2 + 32);
    v69 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v69;
    *(_OWORD *)(a1 + 16) = v67;
    *(_OWORD *)(a1 + 32) = v68;
    v70 = *(_OWORD *)(a2 + 80);
    v71 = *(_OWORD *)(a2 + 96);
    v72 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v72;
    *(_OWORD *)(a1 + 80) = v70;
    *(_OWORD *)(a1 + 96) = v71;
    v73 = *(_OWORD *)(a2 + 144);
    v74 = *(_OWORD *)(a2 + 160);
    v75 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v74;
    *(_OWORD *)(a1 + 176) = v75;
    *(_OWORD *)(a1 + 144) = v73;
    *(_OWORD *)(a2 + 160) = v119;
    *(_OWORD *)(a2 + 176) = v123;
    *(_QWORD *)(a2 + 192) = v127;
    *(_OWORD *)(a2 + 96) = v103;
    *(_OWORD *)(a2 + 112) = v107;
    *(_OWORD *)(a2 + 128) = v111;
    *(_OWORD *)(a2 + 144) = v115;
    *(_OWORD *)(a2 + 32) = v87;
    *(_OWORD *)(a2 + 48) = v91;
    *(_OWORD *)(a2 + 64) = v95;
    *(_OWORD *)(a2 + 80) = v99;
    result = v83;
    *(_OWORD *)a2 = v79;
    *(__n128 *)(a2 + 16) = v83;
    return result;
  }
  v14 = *(_QWORD *)(a5 + 56);
  v15 = *(_QWORD *)(a4 + 56);
  v16 = v14 < v15;
  if (v14 == v15)
  {
    v17 = *(_QWORD *)(a5 + 64);
    v18 = *(_QWORD *)(a4 + 64);
    v16 = v17 < v18;
    if (v17 == v18)
      v16 = *(_OWORD *)(a5 + 72) < *(_OWORD *)(a4 + 72);
  }
  if (v16
    || *(_QWORD *)(a5 + 72) == *(_QWORD *)(a4 + 72)
    && *(_QWORD *)(a5 + 64) == *(_QWORD *)(a4 + 64)
    && v14 == v15
    && *(_QWORD *)(a5 + 80) == *(_QWORD *)(a4 + 80)
    && sub_100B88E88(a5, a4, v10))
  {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_100B89C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v4 = a3;
  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) / 200;
    if (a2 - a1 >= 201)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 200 * v10;
      do
      {
        sub_100B89FC4(a1, a4, v9, v12);
        v12 -= 200;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != v4)
    {
      v14 = a2;
      while (1)
      {
        v15 = *(_QWORD *)(v14 + 48);
        v16 = *(_QWORD *)(a1 + 48);
        if (v15 == v16)
          break;
        if (v15 < v16)
          goto LABEL_19;
LABEL_20:
        v14 += 200;
        if (v14 == v4)
        {
          v13 = v4;
          goto LABEL_22;
        }
      }
      v17 = *(_QWORD *)(v14 + 56);
      v18 = *(_QWORD *)(a1 + 56);
      v19 = v17 < v18;
      if (v17 == v18)
      {
        v20 = *(_QWORD *)(v14 + 64);
        v21 = *(_QWORD *)(a1 + 64);
        v19 = v20 < v21;
        if (v20 == v21)
          v19 = *(_OWORD *)(v14 + 72) < *(_OWORD *)(a1 + 72);
      }
      if (!v19
        && (*(_QWORD *)(v14 + 72) != *(_QWORD *)(a1 + 72)
         || *(_QWORD *)(v14 + 64) != *(_QWORD *)(a1 + 64)
         || v17 != v18
         || *(_QWORD *)(v14 + 80) != *(_QWORD *)(a1 + 80)
         || !sub_100B88E88(v14, a1, a3)))
      {
        goto LABEL_20;
      }
LABEL_19:
      v64 = *(_OWORD *)(v14 + 160);
      v66 = *(_OWORD *)(v14 + 176);
      v68 = *(_QWORD *)(v14 + 192);
      v56 = *(_OWORD *)(v14 + 96);
      v58 = *(_OWORD *)(v14 + 112);
      v60 = *(_OWORD *)(v14 + 128);
      v62 = *(_OWORD *)(v14 + 144);
      v48 = *(_OWORD *)(v14 + 32);
      v50 = *(_OWORD *)(v14 + 48);
      v52 = *(_OWORD *)(v14 + 64);
      v54 = *(_OWORD *)(v14 + 80);
      v44 = *(_OWORD *)v14;
      v46 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v14 = *(_OWORD *)a1;
      v22 = *(_OWORD *)(a1 + 16);
      v23 = *(_OWORD *)(a1 + 32);
      v24 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v14 + 64) = v24;
      *(_OWORD *)(v14 + 16) = v22;
      *(_OWORD *)(v14 + 32) = v23;
      v25 = *(_OWORD *)(a1 + 80);
      v26 = *(_OWORD *)(a1 + 96);
      v27 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v14 + 112) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v14 + 128) = v27;
      *(_OWORD *)(v14 + 80) = v25;
      *(_OWORD *)(v14 + 96) = v26;
      v28 = *(_OWORD *)(a1 + 144);
      v29 = *(_OWORD *)(a1 + 160);
      v30 = *(_OWORD *)(a1 + 176);
      *(_QWORD *)(v14 + 192) = *(_QWORD *)(a1 + 192);
      *(_OWORD *)(v14 + 160) = v29;
      *(_OWORD *)(v14 + 176) = v30;
      *(_OWORD *)(v14 + 144) = v28;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v66;
      *(_QWORD *)(a1 + 192) = v68;
      *(_OWORD *)(a1 + 96) = v56;
      *(_OWORD *)(a1 + 112) = v58;
      *(_OWORD *)(a1 + 128) = v60;
      *(_OWORD *)(a1 + 144) = v62;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v50;
      *(_OWORD *)(a1 + 64) = v52;
      *(_OWORD *)(a1 + 80) = v54;
      *(_OWORD *)a1 = v44;
      *(_OWORD *)(a1 + 16) = v46;
      sub_100B89FC4(a1, a4, v9, a1);
      goto LABEL_20;
    }
LABEL_22:
    if (v8 >= 201)
    {
      v31 = v8 / 0xC8uLL;
      v32 = a2 - 200;
      do
      {
        v65 = *(_OWORD *)(a1 + 160);
        v67 = *(_OWORD *)(a1 + 176);
        v69 = *(_QWORD *)(a1 + 192);
        v57 = *(_OWORD *)(a1 + 96);
        v59 = *(_OWORD *)(a1 + 112);
        v61 = *(_OWORD *)(a1 + 128);
        v63 = *(_OWORD *)(a1 + 144);
        v49 = *(_OWORD *)(a1 + 32);
        v51 = *(_OWORD *)(a1 + 48);
        v53 = *(_OWORD *)(a1 + 64);
        v55 = *(_OWORD *)(a1 + 80);
        v45 = *(_OWORD *)a1;
        v47 = *(_OWORD *)(a1 + 16);
        v33 = sub_100B8A480(a1, a4, v31);
        if (v32 == v33)
        {
          *(_OWORD *)(v33 + 160) = v65;
          *(_OWORD *)(v33 + 176) = v67;
          *(_QWORD *)(v33 + 192) = v69;
          *(_OWORD *)(v33 + 96) = v57;
          *(_OWORD *)(v33 + 112) = v59;
          *(_OWORD *)(v33 + 128) = v61;
          *(_OWORD *)(v33 + 144) = v63;
          *(_OWORD *)(v33 + 32) = v49;
          *(_OWORD *)(v33 + 48) = v51;
          *(_OWORD *)(v33 + 64) = v53;
          *(_OWORD *)(v33 + 80) = v55;
          *(_OWORD *)v33 = v45;
          *(_OWORD *)(v33 + 16) = v47;
        }
        else
        {
          *(_OWORD *)v33 = *(_OWORD *)v32;
          v34 = *(_OWORD *)(v32 + 16);
          v35 = *(_OWORD *)(v32 + 32);
          v36 = *(_OWORD *)(v32 + 64);
          *(_OWORD *)(v33 + 48) = *(_OWORD *)(v32 + 48);
          *(_OWORD *)(v33 + 64) = v36;
          *(_OWORD *)(v33 + 16) = v34;
          *(_OWORD *)(v33 + 32) = v35;
          v37 = *(_OWORD *)(v32 + 80);
          v38 = *(_OWORD *)(v32 + 96);
          v39 = *(_OWORD *)(v32 + 128);
          *(_OWORD *)(v33 + 112) = *(_OWORD *)(v32 + 112);
          *(_OWORD *)(v33 + 128) = v39;
          *(_OWORD *)(v33 + 80) = v37;
          *(_OWORD *)(v33 + 96) = v38;
          v40 = *(_OWORD *)(v32 + 144);
          v41 = *(_OWORD *)(v32 + 160);
          v42 = *(_OWORD *)(v32 + 176);
          *(_QWORD *)(v33 + 192) = *(_QWORD *)(v32 + 192);
          *(_OWORD *)(v33 + 160) = v41;
          *(_OWORD *)(v33 + 176) = v42;
          *(_OWORD *)(v33 + 144) = v40;
          *(_OWORD *)(v32 + 160) = v65;
          *(_OWORD *)(v32 + 176) = v67;
          *(_QWORD *)(v32 + 192) = v69;
          *(_OWORD *)(v32 + 96) = v57;
          *(_OWORD *)(v32 + 112) = v59;
          *(_OWORD *)(v32 + 128) = v61;
          *(_OWORD *)(v32 + 144) = v63;
          *(_OWORD *)(v32 + 32) = v49;
          *(_OWORD *)(v32 + 48) = v51;
          *(_OWORD *)(v32 + 64) = v53;
          *(_OWORD *)(v32 + 80) = v55;
          *(_OWORD *)v32 = v45;
          *(_OWORD *)(v32 + 16) = v47;
          sub_100B8A60C(a1, v33 + 200, a4, 0x8F5C28F5C28F5C29 * ((v33 + 200 - a1) >> 3));
        }
        v32 -= 200;
        v19 = v31-- <= 2;
      }
      while (!v19);
    }
    return v13;
  }
  return v4;
}

__n128 sub_100B89FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  __n128 result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  BOOL v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __n128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v6 = a3 - 2;
  if (a3 < 2)
    return result;
  v92 = v4;
  v93 = v5;
  v9 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < (uint64_t)(0x8F5C28F5C28F5C29 * ((a4 - a1) >> 3)))
    return result;
  v11 = (0x1EB851EB851EB852 * ((a4 - a1) >> 3)) | 1;
  v12 = a1 + 200 * v11;
  v13 = 0x1EB851EB851EB852 * ((a4 - a1) >> 3) + 2;
  if (v13 >= a3)
    goto LABEL_20;
  v14 = *(_QWORD *)(a1 + 200 * v11 + 48);
  v15 = *(_QWORD *)(v12 + 248);
  if (v14 == v15)
  {
    v16 = *(_QWORD *)(a1 + 200 * v11 + 56);
    v17 = *(_QWORD *)(v12 + 256);
    v18 = v16 < v17;
    if (v16 == v17)
    {
      v19 = *(_QWORD *)(a1 + 200 * v11 + 64);
      v20 = *(_QWORD *)(v12 + 264);
      v18 = v19 < v20;
      if (v19 == v20)
        v18 = *(_OWORD *)(a1 + 200 * v11 + 72) < *(_OWORD *)(v12 + 272);
    }
    if (!v18)
    {
      if (*(_QWORD *)(a1 + 200 * v11 + 72) != *(_QWORD *)(v12 + 272)
        || *(_QWORD *)(a1 + 200 * v11 + 64) != *(_QWORD *)(v12 + 264))
      {
        goto LABEL_20;
      }
      v21 = v16 == v17 && *(_QWORD *)(a1 + 200 * v11 + 80) == *(_QWORD *)(v12 + 280);
      if (!v21 || !sub_100B88E88(a1 + 200 * v11, v12 + 200, a3))
        goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v14 < v15)
  {
LABEL_19:
    v12 += 200;
    v11 = v13;
  }
LABEL_20:
  v23 = *(_QWORD *)(v12 + 48);
  v24 = *(_QWORD *)(a4 + 48);
  if (v23 == v24)
  {
    v25 = *(_QWORD *)(v12 + 56);
    v26 = *(_QWORD *)(a4 + 56);
    v27 = v25 < v26;
    if (v25 == v26)
    {
      v28 = *(_QWORD *)(v12 + 64);
      v29 = *(_QWORD *)(a4 + 64);
      v27 = v28 < v29;
      if (v28 == v29)
        v27 = *(_OWORD *)(v12 + 72) < *(_OWORD *)(a4 + 72);
    }
    if (v27)
      return result;
    if (*(_QWORD *)(v12 + 72) == *(_QWORD *)(a4 + 72) && *(_QWORD *)(v12 + 64) == *(_QWORD *)(a4 + 64))
    {
      v30 = v25 == v26 && *(_QWORD *)(v12 + 80) == *(_QWORD *)(a4 + 80);
      if (v30 && (sub_100B88E88(v12, a4, a3) & 1) != 0)
        return result;
    }
  }
  else if (v23 < v24)
  {
    return result;
  }
  v31 = *(_OWORD *)(a4 + 176);
  v89 = *(_OWORD *)(a4 + 160);
  v90 = v31;
  v91 = *(_QWORD *)(a4 + 192);
  v32 = *(_OWORD *)(a4 + 112);
  v85 = *(_OWORD *)(a4 + 96);
  v86 = v32;
  v33 = *(__n128 *)(a4 + 144);
  v87 = *(_OWORD *)(a4 + 128);
  v88 = v33;
  v34 = *(_OWORD *)(a4 + 48);
  v81 = *(_OWORD *)(a4 + 32);
  v82 = v34;
  v35 = *(_OWORD *)(a4 + 80);
  v83 = *(_OWORD *)(a4 + 64);
  v84 = v35;
  v36 = *(_OWORD *)(a4 + 16);
  v79 = *(_OWORD *)a4;
  v80 = v36;
  *(_OWORD *)a4 = *(_OWORD *)v12;
  v37 = *(_OWORD *)(v12 + 16);
  v38 = *(_OWORD *)(v12 + 32);
  v39 = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(a4 + 64) = v39;
  *(_OWORD *)(a4 + 16) = v37;
  *(_OWORD *)(a4 + 32) = v38;
  v40 = *(_OWORD *)(v12 + 80);
  v41 = *(_OWORD *)(v12 + 96);
  v42 = *(_OWORD *)(v12 + 128);
  *(_OWORD *)(a4 + 112) = *(_OWORD *)(v12 + 112);
  *(_OWORD *)(a4 + 128) = v42;
  *(_OWORD *)(a4 + 80) = v40;
  *(_OWORD *)(a4 + 96) = v41;
  v43 = *(_OWORD *)(v12 + 144);
  v44 = *(_OWORD *)(v12 + 160);
  v45 = *(_OWORD *)(v12 + 176);
  *(_QWORD *)(a4 + 192) = *(_QWORD *)(v12 + 192);
  *(_OWORD *)(a4 + 160) = v44;
  *(_OWORD *)(a4 + 176) = v45;
  *(_OWORD *)(a4 + 144) = v43;
  if (v9 < v11)
    goto LABEL_70;
  while (1)
  {
    v46 = v12;
    v47 = 2 * v11;
    v11 = (2 * v11) | 1;
    v12 = a1 + 200 * v11;
    v48 = v47 + 2;
    if (v47 + 2 >= a3)
      goto LABEL_53;
    v49 = *(_QWORD *)(a1 + 200 * v11 + 48);
    v50 = *(_QWORD *)(v12 + 248);
    if (v49 != v50)
    {
      if (v49 >= v50)
        goto LABEL_53;
LABEL_52:
      v12 += 200;
      v11 = v48;
      goto LABEL_53;
    }
    v51 = *(_QWORD *)(a1 + 200 * v11 + 56);
    v52 = *(_QWORD *)(v12 + 256);
    v53 = v51 < v52;
    if (v51 == v52)
    {
      v54 = *(_QWORD *)(a1 + 200 * v11 + 64);
      v55 = *(_QWORD *)(v12 + 264);
      v53 = v54 < v55;
      if (v54 == v55)
        v53 = *(_OWORD *)(a1 + 200 * v11 + 72) < *(_OWORD *)(v12 + 272);
    }
    if (v53)
      goto LABEL_52;
    if (*(_QWORD *)(a1 + 200 * v11 + 72) == *(_QWORD *)(v12 + 272)
      && *(_QWORD *)(a1 + 200 * v11 + 64) == *(_QWORD *)(v12 + 264))
    {
      v56 = v51 == v52 && *(_QWORD *)(a1 + 200 * v11 + 80) == *(_QWORD *)(v12 + 280);
      if (v56 && sub_100B88E88(a1 + 200 * v11, v12 + 200, a3))
        goto LABEL_52;
    }
LABEL_53:
    v57 = *(_QWORD *)(v12 + 48);
    if (v57 == (_QWORD)v82)
      break;
    if (v57 < (uint64_t)v82)
      goto LABEL_69;
LABEL_67:
    *(_OWORD *)v46 = *(_OWORD *)v12;
    v62 = *(_OWORD *)(v12 + 16);
    v63 = *(_OWORD *)(v12 + 32);
    v64 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v46 + 48) = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(v46 + 64) = v64;
    *(_OWORD *)(v46 + 16) = v62;
    *(_OWORD *)(v46 + 32) = v63;
    v65 = *(_OWORD *)(v12 + 80);
    v66 = *(_OWORD *)(v12 + 96);
    v67 = *(_OWORD *)(v12 + 128);
    *(_OWORD *)(v46 + 112) = *(_OWORD *)(v12 + 112);
    *(_OWORD *)(v46 + 128) = v67;
    *(_OWORD *)(v46 + 80) = v65;
    *(_OWORD *)(v46 + 96) = v66;
    v68 = *(_OWORD *)(v12 + 144);
    v69 = *(_OWORD *)(v12 + 160);
    v70 = *(_OWORD *)(v12 + 176);
    *(_QWORD *)(v46 + 192) = *(_QWORD *)(v12 + 192);
    *(_OWORD *)(v46 + 160) = v69;
    *(_OWORD *)(v46 + 176) = v70;
    *(_OWORD *)(v46 + 144) = v68;
    if (v9 < v11)
      goto LABEL_70;
  }
  v58 = *(_QWORD *)(v12 + 56);
  v59 = v58 < *((_QWORD *)&v82 + 1);
  if (v58 == *((_QWORD *)&v82 + 1))
  {
    v60 = *(_QWORD *)(v12 + 64);
    v59 = v60 < (uint64_t)v83;
    if (v60 == (_QWORD)v83)
      v59 = *(_OWORD *)(v12 + 72) < (__int128)__PAIR128__(v84, *((unint64_t *)&v83 + 1));
  }
  if (!v59)
  {
    if (*(_OWORD *)(v12 + 64) != v83)
      goto LABEL_67;
    v61 = v58 == *((_QWORD *)&v82 + 1) && *(_QWORD *)(v12 + 80) == (_QWORD)v84;
    if (!v61 || (sub_100B88E88(v12, (uint64_t)&v79, a3) & 1) == 0)
      goto LABEL_67;
  }
LABEL_69:
  v12 = v46;
LABEL_70:
  *(_OWORD *)v12 = v79;
  v71 = v80;
  v72 = v81;
  v73 = v83;
  *(_OWORD *)(v12 + 48) = v82;
  *(_OWORD *)(v12 + 64) = v73;
  *(_OWORD *)(v12 + 16) = v71;
  *(_OWORD *)(v12 + 32) = v72;
  v74 = v84;
  v75 = v85;
  v76 = v87;
  *(_OWORD *)(v12 + 112) = v86;
  *(_OWORD *)(v12 + 128) = v76;
  *(_OWORD *)(v12 + 80) = v74;
  *(_OWORD *)(v12 + 96) = v75;
  result = v88;
  v77 = v89;
  v78 = v90;
  *(_QWORD *)(v12 + 192) = v91;
  *(_OWORD *)(v12 + 160) = v77;
  *(_OWORD *)(v12 + 176) = v78;
  *(__n128 *)(v12 + 144) = result;
  return result;
}

uint64_t sub_100B8A480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    v9 = v5 + 1;
    a1 += 200 * (v5 + 1);
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 >= a3)
      goto LABEL_21;
    v12 = *(_QWORD *)(v8 + 200 * v9 + 48);
    v13 = *(_QWORD *)(a1 + 248);
    if (v12 != v13)
    {
      if (v12 >= v13)
        goto LABEL_21;
LABEL_20:
      a1 += 200;
      v5 = v11;
      goto LABEL_21;
    }
    v14 = *(_QWORD *)(v8 + 200 * v9 + 56);
    v15 = *(_QWORD *)(a1 + 256);
    v16 = v14 < v15;
    if (v14 == v15)
    {
      v17 = *(_QWORD *)(v8 + 200 * v9 + 64);
      v18 = *(_QWORD *)(a1 + 264);
      v16 = v17 < v18;
      if (v17 == v18)
        v16 = *(_OWORD *)(v8 + 200 * v9 + 72) < *(_OWORD *)(a1 + 272);
    }
    if (v16)
      goto LABEL_20;
    if (*(_QWORD *)(v8 + 200 * v9 + 72) == *(_QWORD *)(a1 + 272)
      && *(_QWORD *)(v8 + 200 * v9 + 64) == *(_QWORD *)(a1 + 264))
    {
      v19 = *(_QWORD *)(v8 + 200 * v9 + 80);
      v20 = v14 == v15 && v19 == *(_QWORD *)(a1 + 280);
      if (v20 && sub_100B88E88(a1, a1 + 200, a3))
        goto LABEL_20;
    }
LABEL_21:
    *(_OWORD *)v8 = *(_OWORD *)a1;
    v21 = *(_OWORD *)(a1 + 16);
    v22 = *(_OWORD *)(a1 + 32);
    v23 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v8 + 64) = v23;
    *(_OWORD *)(v8 + 16) = v21;
    *(_OWORD *)(v8 + 32) = v22;
    v24 = *(_OWORD *)(a1 + 80);
    v25 = *(_OWORD *)(a1 + 96);
    v26 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v8 + 112) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v8 + 128) = v26;
    *(_OWORD *)(v8 + 80) = v24;
    *(_OWORD *)(v8 + 96) = v25;
    v27 = *(_OWORD *)(a1 + 144);
    v28 = *(_OWORD *)(a1 + 160);
    v29 = *(_OWORD *)(a1 + 176);
    *(_QWORD *)(v8 + 192) = *(_QWORD *)(a1 + 192);
    *(_OWORD *)(v8 + 160) = v28;
    *(_OWORD *)(v8 + 176) = v29;
    *(_OWORD *)(v8 + 144) = v27;
  }
  while (v5 <= v7);
  return a1;
}

__n128 sub_100B8A60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __n128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v4 = a4 - 2;
  if (a4 < 2)
    return result;
  v6 = v4 >> 1;
  v7 = (__int128 *)(a1 + 200 * (v4 >> 1));
  v8 = (__int128 *)(a2 - 200);
  v9 = *((_QWORD *)v7 + 6);
  v10 = *(_QWORD *)(a2 - 152);
  if (v9 == v10)
  {
    v11 = *(_QWORD *)(a1 + 200 * v6 + 56);
    v12 = *(_QWORD *)(a2 - 144);
    v13 = v11 < v12;
    if (v11 == v12)
    {
      v14 = *(_QWORD *)(a1 + 200 * v6 + 64);
      v15 = *(_QWORD *)(a2 - 136);
      v13 = v14 < v15;
      if (v14 == v15)
        v13 = *(_OWORD *)(a1 + 200 * v6 + 72) < *(_OWORD *)(a2 - 128);
    }
    if (!v13)
    {
      if (*(_QWORD *)(a1 + 200 * v6 + 72) != *(_QWORD *)(a2 - 128)
        || *(_QWORD *)(a1 + 200 * v6 + 64) != *(_QWORD *)(a2 - 136))
      {
        return result;
      }
      v16 = v11 == v12 && *(_QWORD *)(a1 + 200 * v6 + 80) == *(_QWORD *)(a2 - 120);
      if (!v16 || !sub_100B88E88(a1 + 200 * (v4 >> 1), a2 - 200, a3))
        return result;
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  v18 = v8[11];
  v67 = v8[10];
  v68 = v18;
  v69 = *((_QWORD *)v8 + 24);
  v19 = v8[7];
  v63 = v8[6];
  v64 = v19;
  v20 = (__n128)v8[9];
  v65 = v8[8];
  v66 = v20;
  v21 = v8[3];
  v59 = v8[2];
  v60 = v21;
  v22 = v8[5];
  v61 = v8[4];
  v62 = v22;
  v23 = v8[1];
  v57 = *v8;
  v58 = v23;
  *v8 = *v7;
  v24 = v7[1];
  v25 = v7[2];
  v26 = v7[4];
  v8[3] = v7[3];
  v8[4] = v26;
  v8[1] = v24;
  v8[2] = v25;
  v27 = v7[5];
  v28 = v7[6];
  v29 = v7[8];
  v8[7] = v7[7];
  v8[8] = v29;
  v8[5] = v27;
  v8[6] = v28;
  v30 = v7[9];
  v31 = v7[10];
  v32 = v7[11];
  *((_QWORD *)v8 + 24) = *((_QWORD *)v7 + 24);
  v8[10] = v31;
  v8[11] = v32;
  v8[9] = v30;
  if (v4 < 2)
    goto LABEL_35;
  while (1)
  {
    v33 = v7;
    v34 = v6 - 1;
    v6 = (v6 - 1) >> 1;
    v7 = (__int128 *)(a1 + 200 * v6);
    v35 = *((_QWORD *)v7 + 6);
    if (v35 == (_QWORD)v60)
      break;
    if (v35 >= (uint64_t)v60)
      goto LABEL_34;
LABEL_32:
    *v33 = *v7;
    v40 = v7[1];
    v41 = v7[2];
    v42 = v7[4];
    v33[3] = v7[3];
    v33[4] = v42;
    v33[1] = v40;
    v33[2] = v41;
    v43 = v7[5];
    v44 = v7[6];
    v45 = v7[8];
    v33[7] = v7[7];
    v33[8] = v45;
    v33[5] = v43;
    v33[6] = v44;
    v46 = v7[9];
    v47 = v7[10];
    v48 = v7[11];
    *((_QWORD *)v33 + 24) = *((_QWORD *)v7 + 24);
    v33[10] = v47;
    v33[11] = v48;
    v33[9] = v46;
    if (v34 <= 1)
      goto LABEL_35;
  }
  v36 = *(_QWORD *)(a1 + 200 * v6 + 56);
  v37 = v36 < *((_QWORD *)&v60 + 1);
  if (v36 == *((_QWORD *)&v60 + 1))
  {
    v38 = *(_QWORD *)(a1 + 200 * v6 + 64);
    v37 = v38 < (uint64_t)v61;
    if (v38 == (_QWORD)v61)
      v37 = *(_OWORD *)(a1 + 200 * v6 + 72) < (__int128)__PAIR128__(v62, *((unint64_t *)&v61 + 1));
  }
  if (v37)
    goto LABEL_32;
  if (*(_OWORD *)(a1 + 200 * v6 + 64) == v61)
  {
    v39 = v36 == *((_QWORD *)&v60 + 1) && *(_QWORD *)(a1 + 200 * v6 + 80) == (_QWORD)v62;
    if (v39 && sub_100B88E88(a1 + 200 * v6, (uint64_t)&v57, a3))
      goto LABEL_32;
  }
LABEL_34:
  v7 = v33;
LABEL_35:
  *v7 = v57;
  v49 = v58;
  v50 = v59;
  v51 = v61;
  v7[3] = v60;
  v7[4] = v51;
  v7[1] = v49;
  v7[2] = v50;
  v52 = v62;
  v53 = v63;
  v54 = v65;
  v7[7] = v64;
  v7[8] = v54;
  v7[5] = v52;
  v7[6] = v53;
  result = v66;
  v55 = v67;
  v56 = v68;
  *((_QWORD *)v7 + 24) = v69;
  v7[10] = v55;
  v7[11] = v56;
  v7[9] = (__int128)result;
  return result;
}

uint64_t sub_100B8A910(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = *(_DWORD *)(a3 + 40);
  if ((v3 - 5) >= 0xFFFFFFFC)
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = !*(_QWORD *)result
      || *(_QWORD *)(a3 + 56) != *(_QWORD *)(v7 + 8)
      || *(_QWORD *)(a3 + 64) != *(_QWORD *)(v7 + 16);
    *(_QWORD *)result = a3 + 48;
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      if (*(_BYTE *)(v6 + 21))
      {
        if (v8 || (result = sub_100B8AAA4(result, a3), v3 != 1) || (result & 1) == 0)
          *(_BYTE *)(v6 + 21) = 0;
      }
      if (*(_BYTE *)(v6 + 20))
      {
        if (v8 || (result = sub_100B8AAA4(*(_QWORD *)(v6 + 8), a3), (result & 1) == 0))
        {
          if (*a2 - 58 <= 0xFFFFFFF7)
            *a2 = 50;
          if (a2[3] - 58 <= 0xFFFFFFF6)
            a2[3] = 49;
        }
        else if (v3 == 2)
        {
          goto LABEL_25;
        }
        *(_BYTE *)(v6 + 20) = 0;
      }
    }
    if (v3 != 2)
    {
      if (v3 == 1)
        *(_BYTE *)(v6 + 21) = 1;
      goto LABEL_27;
    }
LABEL_25:
    if (*(_DWORD *)(a3 + 120) != 2)
      *(_BYTE *)(v6 + 20) = 1;
LABEL_27:
    *(_QWORD *)(v6 + 8) = a3;
    *(_DWORD *)(v6 + 16) = v3;
  }
  return result;
}

uint64_t sub_100B8AA58(uint64_t result, unsigned __int8 *a2)
{
  if (*(_BYTE *)(result + 21))
    *(_BYTE *)(result + 21) = 0;
  if (*(_BYTE *)(result + 20))
  {
    if (*a2 - 58 <= 0xFFFFFFF7)
      *a2 = 50;
    if (a2[3] - 58 <= 0xFFFFFFF6)
      a2[3] = 49;
    *(_BYTE *)(result + 20) = 0;
  }
  return result;
}

uint64_t sub_100B8AAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;

  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56) || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
    return 0;
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a2 + 72);
  if (v3 != v4)
  {
    v5 = *(double *)(a2 + 88);
    if (v5 == 0.0)
    {
      if (v3 + 1 != v4)
        return 0;
    }
    else
    {
      if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        return 0;
      v6 = fabs(v5);
      v7 = 2.22044605e-16;
      if (v6 >= 1.0)
        v7 = v6 * 2.22044605e-16;
      v8 = v3 + 1;
      if (v6 > v7 || v8 != v4)
        return 0;
    }
  }
  v10 = *(double *)a1;
  v23 = *(double *)(a1 + 8);
  v24 = v10;
  sub_100778A68(&v24, &v23, 1);
  v11 = v23;
  v12 = v24;
  v13 = *(double *)a2;
  v23 = *(double *)(a2 + 8);
  v24 = v13;
  sub_100778A68(&v24, &v23, 1);
  if (v12 == v24)
    goto LABEL_34;
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v15 = vabdd_f64(v12, v24);
    v16 = fabs(v12);
    v17 = fabs(v24);
    if (v16 >= v17)
      v17 = v16;
    v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v15 <= v18)
    {
LABEL_34:
      if (v11 == v23)
        return 1;
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v19 = vabdd_f64(v11, v23);
        v20 = fabs(v11);
        v21 = fabs(v23);
        if (v20 >= v21)
          v21 = v20;
        v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 <= v22)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100B8AC64(uint64_t result)
{
  int v1;
  uint64_t v2;
  double *v3;
  double **v4;
  double *v5;
  double *v6;
  double *v7;
  int v8;
  BOOL v9;
  unsigned __int8 *v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v1 = *(_DWORD *)(result + 40);
  if (v1 == 7)
    return result;
  v2 = result;
  v3 = **(double ***)result;
  if (v3 == *(double **)(*(_QWORD *)result + 8))
    return result;
  v4 = *(double ***)(result + 8);
  v5 = *v4;
  v6 = v4[1];
  if ((unint64_t)((char *)v6 - (char *)*v4) < 0x40)
    goto LABEL_9;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      result = sub_100779378((uint64_t)&v12, v3, v5, v5 + 2, (uint64_t)&v13);
      if (!(_DWORD)result)
        break;
      v7 = v5 + 4;
      v5 += 2;
    }
    while (v7 != v6);
    if (!v15)
    {
      if ((_DWORD)v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!((_DWORD)v13 + HIDWORD(v13)))
          goto LABEL_8;
      }
      else if (!(_DWORD)v13)
      {
        goto LABEL_8;
      }
      v10 = *(unsigned __int8 **)(v2 + 24);
      if (*v10 - 58 <= 0xFFFFFFF7)
      {
        *v10 = 50;
        v10 = *(unsigned __int8 **)(v2 + 24);
      }
      v11 = *(_DWORD *)(v2 + 40) | 1;
      *(_DWORD *)(v2 + 40) = v11;
      if (v10[3] - 58 <= 0xFFFFFFF6)
      {
        v10[3] = 49;
        v11 = *(_DWORD *)(v2 + 40);
      }
      v8 = v11 | 4;
      goto LABEL_10;
    }
  }
LABEL_8:
  v1 = *(_DWORD *)(v2 + 40);
LABEL_9:
  v8 = v1 | 2;
LABEL_10:
  *(_DWORD *)(v2 + 40) = v8;
  v9 = v8 == 7 || *(_BYTE *)(*(_QWORD *)(v2 + 24) + 9) != 0;
  *(_BYTE *)(v2 + 16) = v9;
  return result;
}

double sub_100B8ADC8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  BOOL v40;
  double result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

uint64_t sub_100B8B3B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[32];
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if (result == a2)
    return result;
  v64 = v3;
  v65 = v4;
  v6 = result;
  v7 = result + 200;
  if (result + 200 == a2)
    return result;
  v8 = 0;
  v9 = result;
  do
  {
    v10 = v9;
    v9 = v7;
    v11 = *(_QWORD *)(v10 + 328);
    v12 = *(_QWORD *)(v10 + 128);
    if (v11 == v12)
    {
      v13 = *(_QWORD *)(v10 + 336);
      v14 = *(_QWORD *)(v10 + 136);
      v15 = v13 < v14;
      if (v13 == v14)
      {
        v16 = *(_QWORD *)(v10 + 344);
        v17 = *(_QWORD *)(v10 + 144);
        v15 = v16 < v17;
        if (v16 == v17)
          v15 = *(_OWORD *)(v10 + 352) < *(_OWORD *)(v10 + 152);
      }
      if (!v15)
      {
        if (*(_QWORD *)(v10 + 352) != *(_QWORD *)(v10 + 152))
          goto LABEL_33;
        if (*(_QWORD *)(v10 + 344) != *(_QWORD *)(v10 + 144))
          goto LABEL_33;
        if (v13 != v14)
          goto LABEL_33;
        if (*(_QWORD *)(v10 + 360) != *(_QWORD *)(v10 + 160))
          goto LABEL_33;
        result = sub_100B8D030(v9, v10, a3);
        if (!(_DWORD)result)
          goto LABEL_33;
      }
    }
    else if (v11 >= v12)
    {
      goto LABEL_33;
    }
    v18 = *(_OWORD *)(v9 + 48);
    v54 = *(_OWORD *)(v9 + 32);
    v55 = v18;
    v19 = *(_OWORD *)(v9 + 112);
    v58 = *(_OWORD *)(v9 + 96);
    v59 = v19;
    v20 = *(_OWORD *)(v9 + 80);
    v56 = *(_OWORD *)(v9 + 64);
    v57 = v20;
    v63 = *(_QWORD *)(v9 + 192);
    v21 = *(_OWORD *)(v9 + 176);
    *(_OWORD *)&v61[16] = *(_OWORD *)(v9 + 160);
    v62 = v21;
    v22 = *(_OWORD *)(v9 + 144);
    v60 = *(_OWORD *)(v9 + 128);
    *(_OWORD *)v61 = v22;
    v23 = *(_OWORD *)(v9 + 16);
    v52 = *(_OWORD *)v9;
    v53 = v23;
    v24 = *(_OWORD *)(v10 + 176);
    *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
    *(_OWORD *)(v9 + 176) = v24;
    *(_QWORD *)(v9 + 192) = *(_QWORD *)(v10 + 192);
    v25 = *(_OWORD *)(v10 + 112);
    *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
    *(_OWORD *)(v9 + 112) = v25;
    v26 = *(_OWORD *)(v10 + 144);
    *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
    *(_OWORD *)(v9 + 144) = v26;
    v27 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(v9 + 48) = v27;
    v28 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v9 + 80) = v28;
    v29 = *(_OWORD *)(v10 + 16);
    v30 = v6;
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v29;
    if (v10 == v6)
      goto LABEL_32;
    v31 = v8;
    while (1)
    {
      v32 = v6 + v31;
      v33 = *(_QWORD *)(v6 + v31 - 72);
      if ((_QWORD)v60 == v33)
        break;
      if ((uint64_t)v60 >= v33)
        goto LABEL_31;
LABEL_29:
      v10 -= 200;
      v37 = *(_OWORD *)(v6 + v31 - 24);
      *(_OWORD *)(v32 + 160) = *(_OWORD *)(v6 + v31 - 40);
      *(_OWORD *)(v32 + 176) = v37;
      *(_QWORD *)(v32 + 192) = *(_QWORD *)(v6 + v31 - 8);
      v38 = *(_OWORD *)(v6 + v31 - 88);
      *(_OWORD *)(v32 + 96) = *(_OWORD *)(v6 + v31 - 104);
      *(_OWORD *)(v32 + 112) = v38;
      v39 = *(_OWORD *)(v6 + v31 - 56);
      *(_OWORD *)(v32 + 128) = *(_OWORD *)(v6 + v31 - 72);
      *(_OWORD *)(v32 + 144) = v39;
      v40 = *(_OWORD *)(v6 + v31 - 152);
      *(_OWORD *)(v32 + 32) = *(_OWORD *)(v6 + v31 - 168);
      *(_OWORD *)(v32 + 48) = v40;
      v41 = *(_OWORD *)(v6 + v31 - 120);
      *(_OWORD *)(v32 + 64) = *(_OWORD *)(v6 + v31 - 136);
      *(_OWORD *)(v32 + 80) = v41;
      v42 = *(_OWORD *)(v6 + v31 - 184);
      *(_OWORD *)v32 = *(_OWORD *)(v6 + v31 - 200);
      *(_OWORD *)(v32 + 16) = v42;
      v31 -= 200;
      if (!v31)
      {
        v30 = v6;
        goto LABEL_32;
      }
    }
    v34 = *(_QWORD *)(v32 - 64);
    v35 = *((_QWORD *)&v60 + 1) < v34;
    if (*((_QWORD *)&v60 + 1) == v34)
    {
      v36 = *(_QWORD *)(v6 + v31 - 56);
      v35 = *(_QWORD *)v61 < v36;
      if (*(_QWORD *)v61 == v36)
        v35 = *(_OWORD *)&v61[8] < *(_OWORD *)(v6 + v31 - 48);
    }
    if (v35)
      goto LABEL_29;
    if (*(_OWORD *)v61 == *(_OWORD *)(v6 + v31 - 56)
      && *((_QWORD *)&v60 + 1) == v34
      && *(_QWORD *)&v61[16] == *(_QWORD *)(v6 + v31 - 40))
    {
      result = sub_100B8D030((uint64_t)&v52, v6 + v31 - 200, a3);
      if (!(_DWORD)result)
      {
        v30 = v6 + v31;
        goto LABEL_32;
      }
      goto LABEL_29;
    }
LABEL_31:
    v30 = v10;
LABEL_32:
    *(_OWORD *)v30 = v52;
    v43 = v53;
    v44 = v54;
    v45 = v56;
    *(_OWORD *)(v30 + 48) = v55;
    *(_OWORD *)(v30 + 64) = v45;
    *(_OWORD *)(v30 + 16) = v43;
    *(_OWORD *)(v30 + 32) = v44;
    v46 = v57;
    v47 = v58;
    v48 = v60;
    *(_OWORD *)(v30 + 112) = v59;
    *(_OWORD *)(v30 + 128) = v48;
    *(_OWORD *)(v30 + 80) = v46;
    *(_OWORD *)(v30 + 96) = v47;
    v49 = *(_OWORD *)v61;
    v50 = *(_OWORD *)&v61[16];
    v51 = v62;
    *(_QWORD *)(v30 + 192) = v63;
    *(_OWORD *)(v30 + 160) = v50;
    *(_OWORD *)(v30 + 176) = v51;
    *(_OWORD *)(v30 + 144) = v49;
LABEL_33:
    v7 = v9 + 200;
    v8 += 200;
  }
  while (v9 + 200 != a2);
  return result;
}

double sub_100B8B6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a1 != a2)
  {
    v59 = v3;
    v60 = v4;
    v6 = a1;
    while (1)
    {
      while (1)
      {
        if (v6 + 200 == a2)
          return result;
        v7 = (_QWORD *)v6;
        v6 += 200;
        v8 = v7[41];
        v9 = v7[16];
        if (v8 != v9)
          break;
        v10 = v7[42];
        v11 = v7[17];
        v13 = __OFSUB__(v10, v11);
        v12 = v10 - v11 < 0;
        if (v10 == v11)
        {
          v14 = v7[43];
          v15 = v7[18];
          v13 = __OFSUB__(v14, v15);
          v12 = v14 - v15 < 0;
          if (v14 == v15)
          {
            v16 = v7[45];
            v17 = v7[20];
            v13 = __OFSUB__(v16, v17);
            v12 = v16 - v17 < 0;
            if (v16 == v17)
            {
              v18 = v7[44];
              v19 = v7[19];
              v13 = __OFSUB__(v18, v19);
              v12 = v18 - v19 < 0;
            }
          }
        }
        if (v12 != v13
          || v7[44] == v7[19]
          && v7[43] == v7[18]
          && v10 == v11
          && v7[45] == v7[20]
          && sub_100B8D030(v6, (uint64_t)v7, a3))
        {
          goto LABEL_17;
        }
      }
      if (v8 < v9)
      {
LABEL_17:
        v21 = *(_OWORD *)(v6 + 176);
        v56 = *(_OWORD *)(v6 + 160);
        v57 = v21;
        v58 = *(_QWORD *)(v6 + 192);
        v22 = *(_OWORD *)(v6 + 112);
        v52 = *(_OWORD *)(v6 + 96);
        v53 = v22;
        v23 = *(_OWORD *)(v6 + 144);
        v54 = *(_OWORD *)(v6 + 128);
        v55 = v23;
        v24 = *(_OWORD *)(v6 + 48);
        v48 = *(_OWORD *)(v6 + 32);
        v49 = v24;
        v25 = *(_OWORD *)(v6 + 80);
        v50 = *(_OWORD *)(v6 + 64);
        v51 = v25;
        v26 = *(_OWORD *)(v6 + 16);
        v27 = v6;
        v46 = *(_OWORD *)v6;
        v47 = v26;
        while (1)
        {
          v28 = *(_OWORD *)(v27 - 56);
          v29 = *(_OWORD *)(v27 - 24);
          *(_OWORD *)(v27 + 160) = *(_OWORD *)(v27 - 40);
          *(_OWORD *)(v27 + 176) = v29;
          *(_QWORD *)(v27 + 192) = *(_QWORD *)(v27 - 8);
          v30 = *(_OWORD *)(v27 - 120);
          v31 = *(_OWORD *)(v27 - 88);
          *(_OWORD *)(v27 + 96) = *(_OWORD *)(v27 - 104);
          *(_OWORD *)(v27 + 112) = v31;
          *(_OWORD *)(v27 + 128) = *(_OWORD *)(v27 - 72);
          *(_OWORD *)(v27 + 144) = v28;
          v32 = *(_OWORD *)(v27 - 184);
          v33 = *(_OWORD *)(v27 - 152);
          *(_OWORD *)(v27 + 32) = *(_OWORD *)(v27 - 168);
          *(_OWORD *)(v27 + 48) = v33;
          *(_OWORD *)(v27 + 64) = *(_OWORD *)(v27 - 136);
          *(_OWORD *)(v27 + 80) = v30;
          *(_OWORD *)v27 = *(_OWORD *)(v27 - 200);
          *(_OWORD *)(v27 + 16) = v32;
          v34 = *(_QWORD *)(v27 - 272);
          if ((_QWORD)v54 != v34)
          {
            if ((uint64_t)v54 >= v34)
              break;
            goto LABEL_29;
          }
          v35 = *(_QWORD *)(v27 - 264);
          v37 = __OFSUB__(*((_QWORD *)&v54 + 1), v35);
          v36 = *((_QWORD *)&v54 + 1) - v35 < 0;
          if (*((_QWORD *)&v54 + 1) != v35)
            goto LABEL_22;
          v38 = *(_QWORD *)(v27 - 256);
          v37 = __OFSUB__((_QWORD)v55, v38);
          v36 = (uint64_t)v55 - v38 < 0;
          if ((_QWORD)v55 == v38
            && (v39 = *(_QWORD *)(v27 - 240),
                v37 = __OFSUB__((_QWORD)v56, v39),
                v36 = (uint64_t)v56 - v39 < 0,
                (_QWORD)v56 == v39))
          {
            if (*((uint64_t *)&v55 + 1) < *(_QWORD *)(v27 - 248))
              goto LABEL_29;
          }
          else
          {
LABEL_22:
            if (v36 != v37)
              goto LABEL_29;
          }
          if (v55 != *(_OWORD *)(v27 - 256)
            || *((_QWORD *)&v54 + 1) != v35
            || (_QWORD)v56 != *(_QWORD *)(v27 - 240)
            || (sub_100B8D030((uint64_t)&v46, v27 - 400, a3) & 1) == 0)
          {
            break;
          }
LABEL_29:
          v27 -= 200;
        }
        v40 = v54;
        *(_OWORD *)(v27 - 56) = v55;
        v41 = v57;
        *(_OWORD *)(v27 - 40) = v56;
        *(_OWORD *)(v27 - 24) = v41;
        v42 = v50;
        *(_OWORD *)(v27 - 120) = v51;
        v43 = v53;
        *(_OWORD *)(v27 - 104) = v52;
        *(_OWORD *)(v27 - 88) = v43;
        *(_OWORD *)(v27 - 72) = v40;
        v44 = v46;
        *(_OWORD *)(v27 - 184) = v47;
        result = *(double *)&v48;
        v45 = v49;
        *(_OWORD *)(v27 - 168) = v48;
        *(_OWORD *)(v27 - 152) = v45;
        *(_OWORD *)(v27 - 136) = v42;
        *(_QWORD *)(v27 - 8) = v58;
        *(_OWORD *)(v27 - 200) = v44;
      }
    }
  }
  return result;
}

uint64_t sub_100B8B924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v6 = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a1 + 128);
  if (v6 == v7)
  {
    v8 = *(_QWORD *)(a2 + 136);
    v9 = *(_QWORD *)(a1 + 136);
    v10 = v8 < v9;
    if (v8 == v9)
    {
      v11 = *(_QWORD *)(a2 + 144);
      v12 = *(_QWORD *)(a1 + 144);
      v10 = v11 < v12;
      if (v11 == v12)
        v10 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
    }
    if (!v10)
    {
      if (*(_QWORD *)(a2 + 152) != *(_QWORD *)(a1 + 152)
        || *(_QWORD *)(a2 + 144) != *(_QWORD *)(a1 + 144)
        || v8 != v9
        || *(_QWORD *)(a2 + 160) != *(_QWORD *)(a1 + 160)
        || (v13 = sub_100B8D030(a2, a1, a3), v6 = *(_QWORD *)(a2 + 128), (v13 & 1) == 0))
      {
LABEL_11:
        v14 = *(_QWORD *)(a3 + 128);
        if (v14 == v6)
        {
          v15 = *(_QWORD *)(a3 + 136);
          v16 = *(_QWORD *)(a2 + 136);
          v17 = v15 < v16;
          if (v15 == v16)
          {
            v18 = *(_QWORD *)(a3 + 144);
            v19 = *(_QWORD *)(a2 + 144);
            v17 = v18 < v19;
            if (v18 == v19)
              v17 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
          }
          if (v17)
            goto LABEL_47;
          if (*(_QWORD *)(a3 + 152) == *(_QWORD *)(a2 + 152) && *(_QWORD *)(a3 + 144) == *(_QWORD *)(a2 + 144))
          {
            result = 0;
            if (v15 != v16)
              return result;
            if (*(_QWORD *)(a3 + 160) != *(_QWORD *)(a2 + 160))
              return result;
            result = sub_100B8D030(a3, a2, a3);
            if (!(_DWORD)result)
              return result;
LABEL_47:
            v140 = *(_OWORD *)(a2 + 160);
            v145 = *(_OWORD *)(a2 + 176);
            v150 = *(_QWORD *)(a2 + 192);
            v120 = *(_OWORD *)(a2 + 96);
            v125 = *(_OWORD *)(a2 + 112);
            v130 = *(_OWORD *)(a2 + 128);
            v135 = *(_OWORD *)(a2 + 144);
            v100 = *(_OWORD *)(a2 + 32);
            v105 = *(_OWORD *)(a2 + 48);
            v110 = *(_OWORD *)(a2 + 64);
            v115 = *(_OWORD *)(a2 + 80);
            v90 = *(_OWORD *)a2;
            v95 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a2 = *(_OWORD *)a3;
            v54 = *(_OWORD *)(a3 + 16);
            v55 = *(_OWORD *)(a3 + 32);
            v56 = *(_OWORD *)(a3 + 64);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
            *(_OWORD *)(a2 + 64) = v56;
            *(_OWORD *)(a2 + 16) = v54;
            *(_OWORD *)(a2 + 32) = v55;
            v57 = *(_OWORD *)(a3 + 80);
            v58 = *(_OWORD *)(a3 + 96);
            v59 = *(_OWORD *)(a3 + 128);
            *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
            *(_OWORD *)(a2 + 128) = v59;
            *(_OWORD *)(a2 + 80) = v57;
            *(_OWORD *)(a2 + 96) = v58;
            v60 = *(_OWORD *)(a3 + 144);
            v61 = *(_OWORD *)(a3 + 160);
            v62 = *(_OWORD *)(a3 + 176);
            *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
            *(_OWORD *)(a2 + 160) = v61;
            *(_OWORD *)(a2 + 176) = v62;
            *(_OWORD *)(a2 + 144) = v60;
            *(_OWORD *)(a3 + 160) = v140;
            *(_OWORD *)(a3 + 176) = v145;
            *(_QWORD *)(a3 + 192) = v150;
            *(_OWORD *)(a3 + 96) = v120;
            *(_OWORD *)(a3 + 112) = v125;
            *(_OWORD *)(a3 + 128) = v130;
            *(_OWORD *)(a3 + 144) = v135;
            *(_OWORD *)(a3 + 32) = v100;
            *(_OWORD *)(a3 + 48) = v105;
            *(_OWORD *)(a3 + 64) = v110;
            *(_OWORD *)(a3 + 80) = v115;
            *(_OWORD *)a3 = v90;
            *(_OWORD *)(a3 + 16) = v95;
            v63 = *(_QWORD *)(a2 + 128);
            v64 = *(_QWORD *)(a1 + 128);
            if (v63 == v64)
            {
              v65 = *(_QWORD *)(a2 + 136);
              v66 = *(_QWORD *)(a1 + 136);
              v67 = v65 < v66;
              if (v65 == v66)
              {
                v68 = *(_QWORD *)(a2 + 144);
                v69 = *(_QWORD *)(a1 + 144);
                v67 = v68 < v69;
                if (v68 == v69)
                  v67 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
              }
              if (!v67)
              {
                if (*(_QWORD *)(a2 + 152) != *(_QWORD *)(a1 + 152) || *(_QWORD *)(a2 + 144) != *(_QWORD *)(a1 + 144))
                  return 1;
                result = 1;
                if (v65 != v66 || *(_QWORD *)(a2 + 160) != *(_QWORD *)(a1 + 160))
                  return result;
                if (!sub_100B8D030(a2, a1, a3))
                  return 1;
              }
            }
            else if (v63 >= v64)
            {
              return 1;
            }
            v142 = *(_OWORD *)(a1 + 160);
            v147 = *(_OWORD *)(a1 + 176);
            v152 = *(_QWORD *)(a1 + 192);
            v122 = *(_OWORD *)(a1 + 96);
            v127 = *(_OWORD *)(a1 + 112);
            v132 = *(_OWORD *)(a1 + 128);
            v137 = *(_OWORD *)(a1 + 144);
            v102 = *(_OWORD *)(a1 + 32);
            v107 = *(_OWORD *)(a1 + 48);
            v112 = *(_OWORD *)(a1 + 64);
            v117 = *(_OWORD *)(a1 + 80);
            v92 = *(_OWORD *)a1;
            v97 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            v79 = *(_OWORD *)(a2 + 16);
            v80 = *(_OWORD *)(a2 + 32);
            v81 = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 64) = v81;
            *(_OWORD *)(a1 + 16) = v79;
            *(_OWORD *)(a1 + 32) = v80;
            v82 = *(_OWORD *)(a2 + 80);
            v83 = *(_OWORD *)(a2 + 96);
            v84 = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 128) = v84;
            *(_OWORD *)(a1 + 80) = v82;
            *(_OWORD *)(a1 + 96) = v83;
            v85 = *(_OWORD *)(a2 + 144);
            v86 = *(_OWORD *)(a2 + 160);
            v87 = *(_OWORD *)(a2 + 176);
            *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
            *(_OWORD *)(a1 + 160) = v86;
            *(_OWORD *)(a1 + 176) = v87;
            *(_OWORD *)(a1 + 144) = v85;
            *(_OWORD *)(a2 + 160) = v142;
            *(_OWORD *)(a2 + 176) = v147;
            *(_QWORD *)(a2 + 192) = v152;
            *(_OWORD *)(a2 + 96) = v122;
            *(_OWORD *)(a2 + 112) = v127;
            *(_OWORD *)(a2 + 128) = v132;
            *(_OWORD *)(a2 + 144) = v137;
            *(_OWORD *)(a2 + 32) = v102;
            *(_OWORD *)(a2 + 48) = v107;
            *(_OWORD *)(a2 + 64) = v112;
            *(_OWORD *)(a2 + 80) = v117;
            result = 2;
            *(_OWORD *)a2 = v92;
            *(_OWORD *)(a2 + 16) = v97;
            return result;
          }
        }
        else if (v14 < v6)
        {
          goto LABEL_47;
        }
        return 0;
      }
    }
  }
  else if (v6 >= v7)
  {
    goto LABEL_11;
  }
  v21 = *(_QWORD *)(a3 + 128);
  if (v21 != v6)
  {
    if (v21 >= v6)
      goto LABEL_33;
LABEL_45:
    v139 = *(_OWORD *)(a1 + 160);
    v144 = *(_OWORD *)(a1 + 176);
    v149 = *(_QWORD *)(a1 + 192);
    v119 = *(_OWORD *)(a1 + 96);
    v124 = *(_OWORD *)(a1 + 112);
    v129 = *(_OWORD *)(a1 + 128);
    v134 = *(_OWORD *)(a1 + 144);
    v99 = *(_OWORD *)(a1 + 32);
    v104 = *(_OWORD *)(a1 + 48);
    v109 = *(_OWORD *)(a1 + 64);
    v114 = *(_OWORD *)(a1 + 80);
    v89 = *(_OWORD *)a1;
    v94 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    v43 = *(_OWORD *)(a3 + 16);
    v44 = *(_OWORD *)(a3 + 32);
    v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 64) = v45;
    *(_OWORD *)(a1 + 16) = v43;
    *(_OWORD *)(a1 + 32) = v44;
    v46 = *(_OWORD *)(a3 + 80);
    v47 = *(_OWORD *)(a3 + 96);
    v48 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a1 + 128) = v48;
    *(_OWORD *)(a1 + 80) = v46;
    *(_OWORD *)(a1 + 96) = v47;
    v49 = *(_OWORD *)(a3 + 144);
    v50 = *(_OWORD *)(a3 + 160);
    v51 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a1 + 160) = v50;
    *(_OWORD *)(a1 + 176) = v51;
    *(_OWORD *)(a1 + 144) = v49;
    *(_OWORD *)(a3 + 160) = v139;
    *(_OWORD *)(a3 + 176) = v144;
    *(_QWORD *)(a3 + 192) = v149;
    *(_OWORD *)(a3 + 96) = v119;
    *(_OWORD *)(a3 + 112) = v124;
    *(_OWORD *)(a3 + 128) = v129;
    *(_OWORD *)(a3 + 144) = v134;
    *(_OWORD *)(a3 + 32) = v99;
    *(_OWORD *)(a3 + 48) = v104;
    *(_OWORD *)(a3 + 64) = v109;
    *(_OWORD *)(a3 + 80) = v114;
    v53 = v89;
    v52 = v94;
    result = 1;
LABEL_61:
    *(_OWORD *)a3 = v53;
    *(_OWORD *)(a3 + 16) = v52;
    return result;
  }
  v22 = *(_QWORD *)(a3 + 136);
  v23 = *(_QWORD *)(a2 + 136);
  v24 = v22 < v23;
  if (v22 == v23)
  {
    v25 = *(_QWORD *)(a3 + 144);
    v26 = *(_QWORD *)(a2 + 144);
    v24 = v25 < v26;
    if (v25 == v26)
      v24 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
  }
  if (v24
    || *(_QWORD *)(a3 + 152) == *(_QWORD *)(a2 + 152)
    && *(_QWORD *)(a3 + 144) == *(_QWORD *)(a2 + 144)
    && v22 == v23
    && *(_QWORD *)(a3 + 160) == *(_QWORD *)(a2 + 160)
    && sub_100B8D030(a3, a2, a3))
  {
    goto LABEL_45;
  }
LABEL_33:
  v138 = *(_OWORD *)(a1 + 160);
  v143 = *(_OWORD *)(a1 + 176);
  v148 = *(_QWORD *)(a1 + 192);
  v118 = *(_OWORD *)(a1 + 96);
  v123 = *(_OWORD *)(a1 + 112);
  v128 = *(_OWORD *)(a1 + 128);
  v133 = *(_OWORD *)(a1 + 144);
  v98 = *(_OWORD *)(a1 + 32);
  v103 = *(_OWORD *)(a1 + 48);
  v108 = *(_OWORD *)(a1 + 64);
  v113 = *(_OWORD *)(a1 + 80);
  v88 = *(_OWORD *)a1;
  v93 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v27 = *(_OWORD *)(a2 + 16);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v28;
  v30 = *(_OWORD *)(a2 + 80);
  v31 = *(_OWORD *)(a2 + 96);
  v32 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 80) = v30;
  *(_OWORD *)(a1 + 96) = v31;
  v33 = *(_OWORD *)(a2 + 144);
  v34 = *(_OWORD *)(a2 + 160);
  v35 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v34;
  *(_OWORD *)(a1 + 176) = v35;
  *(_OWORD *)(a1 + 144) = v33;
  *(_OWORD *)(a2 + 160) = v138;
  *(_OWORD *)(a2 + 176) = v143;
  *(_QWORD *)(a2 + 192) = v148;
  *(_OWORD *)(a2 + 96) = v118;
  *(_OWORD *)(a2 + 112) = v123;
  *(_OWORD *)(a2 + 128) = v128;
  *(_OWORD *)(a2 + 144) = v133;
  *(_OWORD *)(a2 + 32) = v98;
  *(_OWORD *)(a2 + 48) = v103;
  *(_OWORD *)(a2 + 64) = v108;
  *(_OWORD *)(a2 + 80) = v113;
  *(_OWORD *)a2 = v88;
  *(_OWORD *)(a2 + 16) = v93;
  v36 = *(_QWORD *)(a3 + 128);
  v37 = *(_QWORD *)(a2 + 128);
  if (v36 != v37)
  {
    if (v36 >= v37)
      return 1;
    goto LABEL_60;
  }
  v38 = *(_QWORD *)(a3 + 136);
  v39 = *(_QWORD *)(a2 + 136);
  v40 = v38 < v39;
  if (v38 == v39)
  {
    v41 = *(_QWORD *)(a3 + 144);
    v42 = *(_QWORD *)(a2 + 144);
    v40 = v41 < v42;
    if (v41 == v42)
      v40 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
  }
  if (v40)
  {
LABEL_60:
    v141 = *(_OWORD *)(a2 + 160);
    v146 = *(_OWORD *)(a2 + 176);
    v151 = *(_QWORD *)(a2 + 192);
    v121 = *(_OWORD *)(a2 + 96);
    v126 = *(_OWORD *)(a2 + 112);
    v131 = *(_OWORD *)(a2 + 128);
    v136 = *(_OWORD *)(a2 + 144);
    v101 = *(_OWORD *)(a2 + 32);
    v106 = *(_OWORD *)(a2 + 48);
    v111 = *(_OWORD *)(a2 + 64);
    v116 = *(_OWORD *)(a2 + 80);
    v91 = *(_OWORD *)a2;
    v96 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v70 = *(_OWORD *)(a3 + 16);
    v71 = *(_OWORD *)(a3 + 32);
    v72 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 16) = v70;
    *(_OWORD *)(a2 + 32) = v71;
    v73 = *(_OWORD *)(a3 + 80);
    v74 = *(_OWORD *)(a3 + 96);
    v75 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v75;
    *(_OWORD *)(a2 + 80) = v73;
    *(_OWORD *)(a2 + 96) = v74;
    v76 = *(_OWORD *)(a3 + 144);
    v77 = *(_OWORD *)(a3 + 160);
    v78 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v77;
    *(_OWORD *)(a2 + 176) = v78;
    *(_OWORD *)(a2 + 144) = v76;
    *(_OWORD *)(a3 + 160) = v141;
    *(_OWORD *)(a3 + 176) = v146;
    *(_QWORD *)(a3 + 192) = v151;
    *(_OWORD *)(a3 + 96) = v121;
    *(_OWORD *)(a3 + 112) = v126;
    *(_OWORD *)(a3 + 128) = v131;
    *(_OWORD *)(a3 + 144) = v136;
    *(_OWORD *)(a3 + 32) = v101;
    *(_OWORD *)(a3 + 48) = v106;
    *(_OWORD *)(a3 + 64) = v111;
    *(_OWORD *)(a3 + 80) = v116;
    v53 = v91;
    v52 = v96;
    result = 2;
    goto LABEL_61;
  }
  if (*(_QWORD *)(a3 + 152) != *(_QWORD *)(a2 + 152) || *(_QWORD *)(a3 + 144) != *(_QWORD *)(a2 + 144))
    return 1;
  result = 1;
  if (v38 == v39 && *(_QWORD *)(a3 + 160) == *(_QWORD *)(a2 + 160))
  {
    if (!sub_100B8D030(a3, a2, a3))
      return 1;
    goto LABEL_60;
  }
  return result;
}

unint64_t sub_100B8C008(__int128 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t j;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  j = a2;
  v5 = a1[11];
  v112 = a1[10];
  v113 = v5;
  v114 = *((_QWORD *)a1 + 24);
  v6 = a1[7];
  v108 = a1[6];
  v109 = v6;
  v7 = a1[9];
  v110 = a1[8];
  v111 = v7;
  v8 = a1[3];
  v104 = a1[2];
  v105 = v8;
  v9 = a1[5];
  v106 = a1[4];
  v107 = v9;
  v10 = a1[1];
  v102 = *a1;
  v103 = v10;
  v11 = a2 - 200;
  v12 = *(_QWORD *)(a2 - 72);
  if ((_QWORD)v110 != v12)
  {
    if ((uint64_t)v110 >= v12)
      goto LABEL_11;
LABEL_27:
    for (i = (unint64_t)a1 + 200; ; i += 200)
    {
      v27 = *(_QWORD *)(i + 128);
      if ((_QWORD)v110 == v27)
      {
        v28 = *(_QWORD *)(i + 136);
        v30 = __OFSUB__(*((_QWORD *)&v110 + 1), v28);
        v29 = *((_QWORD *)&v110 + 1) - v28 < 0;
        if (*((_QWORD *)&v110 + 1) == v28)
        {
          v31 = *(_QWORD *)(i + 144);
          v30 = __OFSUB__((_QWORD)v111, v31);
          v29 = (uint64_t)v111 - v31 < 0;
          if ((_QWORD)v111 == v31)
          {
            v32 = *(_QWORD *)(i + 160);
            v30 = __OFSUB__((_QWORD)v112, v32);
            v29 = (uint64_t)v112 - v32 < 0;
            if ((_QWORD)v112 == v32)
            {
              v33 = *(_QWORD *)(i + 152);
              v30 = __OFSUB__(*((_QWORD *)&v111 + 1), v33);
              v29 = *((_QWORD *)&v111 + 1) - v33 < 0;
            }
          }
        }
        if (v29 != v30
          || v111 == *(_OWORD *)(i + 144)
          && *((_QWORD *)&v110 + 1) == v28
          && (_QWORD)v112 == *(_QWORD *)(i + 160)
          && (sub_100B8D030((uint64_t)&v102, i, a3) & 1) != 0)
        {
          goto LABEL_41;
        }
      }
      else if ((uint64_t)v110 < v27)
      {
        goto LABEL_41;
      }
    }
  }
  v13 = *(_QWORD *)(a2 - 64);
  v15 = __OFSUB__(*((_QWORD *)&v110 + 1), v13);
  v14 = *((_QWORD *)&v110 + 1) - v13 < 0;
  if (*((_QWORD *)&v110 + 1) == v13)
  {
    v16 = *(_QWORD *)(a2 - 56);
    v15 = __OFSUB__((_QWORD)v111, v16);
    v14 = (uint64_t)v111 - v16 < 0;
    if ((_QWORD)v111 == v16)
    {
      v17 = *(_QWORD *)(a2 - 40);
      v15 = __OFSUB__((_QWORD)v112, v17);
      v14 = (uint64_t)v112 - v17 < 0;
      if ((_QWORD)v112 == v17)
      {
        v18 = *(_QWORD *)(a2 - 48);
        v15 = __OFSUB__(*((_QWORD *)&v111 + 1), v18);
        v14 = *((_QWORD *)&v111 + 1) - v18 < 0;
      }
    }
  }
  if (v14 != v15
    || v111 == *(_OWORD *)(a2 - 56)
    && (_QWORD)v112 == *(_QWORD *)(a2 - 40)
    && *((_QWORD *)&v110 + 1) == v13
    && sub_100B8D030((uint64_t)&v102, a2 - 200, a3))
  {
    goto LABEL_27;
  }
LABEL_11:
  for (i = (unint64_t)a1 + 200; i < j; i += 200)
  {
    v20 = *(_QWORD *)(i + 128);
    if ((_QWORD)v110 == v20)
    {
      v21 = *(_QWORD *)(i + 136);
      v23 = __OFSUB__(*((_QWORD *)&v110 + 1), v21);
      v22 = *((_QWORD *)&v110 + 1) - v21 < 0;
      if (*((_QWORD *)&v110 + 1) == v21)
      {
        v24 = *(_QWORD *)(i + 144);
        v23 = __OFSUB__((_QWORD)v111, v24);
        v22 = (uint64_t)v111 - v24 < 0;
        if ((_QWORD)v111 == v24)
        {
          v25 = *(_QWORD *)(i + 160);
          v23 = __OFSUB__((_QWORD)v112, v25);
          v22 = (uint64_t)v112 - v25 < 0;
          if ((_QWORD)v112 == v25)
          {
            v26 = *(_QWORD *)(i + 152);
            v23 = __OFSUB__(*((_QWORD *)&v111 + 1), v26);
            v22 = *((_QWORD *)&v111 + 1) - v26 < 0;
          }
        }
      }
      if (v22 != v23
        || v111 == *(_OWORD *)(i + 144)
        && *((_QWORD *)&v110 + 1) == v21
        && (_QWORD)v112 == *(_QWORD *)(i + 160)
        && (sub_100B8D030((uint64_t)&v102, i, a3) & 1) != 0)
      {
        break;
      }
    }
    else if ((uint64_t)v110 < v20)
    {
      break;
    }
  }
LABEL_41:
  if (i < j)
  {
    for (j = v11; ; j -= 200)
    {
      v34 = *(_QWORD *)(j + 128);
      if ((_QWORD)v110 == v34)
      {
        v35 = *(_QWORD *)(j + 136);
        v37 = __OFSUB__(*((_QWORD *)&v110 + 1), v35);
        v36 = *((_QWORD *)&v110 + 1) - v35 < 0;
        if (*((_QWORD *)&v110 + 1) == v35)
        {
          v38 = *(_QWORD *)(j + 144);
          v37 = __OFSUB__((_QWORD)v111, v38);
          v36 = (uint64_t)v111 - v38 < 0;
          if ((_QWORD)v111 == v38)
          {
            v39 = *(_QWORD *)(j + 160);
            v37 = __OFSUB__((_QWORD)v112, v39);
            v36 = (uint64_t)v112 - v39 < 0;
            if ((_QWORD)v112 == v39)
            {
              v40 = *(_QWORD *)(j + 152);
              v37 = __OFSUB__(*((_QWORD *)&v111 + 1), v40);
              v36 = *((_QWORD *)&v111 + 1) - v40 < 0;
            }
          }
        }
        if (v36 == v37
          && (v111 != *(_OWORD *)(j + 144)
           || *((_QWORD *)&v110 + 1) != v35
           || (_QWORD)v112 != *(_QWORD *)(j + 160)
           || (sub_100B8D030((uint64_t)&v102, j, a3) & 1) == 0))
        {
          break;
        }
      }
      else if ((uint64_t)v110 >= v34)
      {
        break;
      }
    }
  }
LABEL_81:
  while (i < j)
  {
    v115 = *(_OWORD *)i;
    v41 = *(_OWORD *)(i + 16);
    v42 = *(_OWORD *)(i + 32);
    v43 = *(_OWORD *)(i + 64);
    v118 = *(_OWORD *)(i + 48);
    v119 = v43;
    v116 = v41;
    v117 = v42;
    v44 = *(_OWORD *)(i + 80);
    v45 = *(_OWORD *)(i + 96);
    v46 = *(_OWORD *)(i + 128);
    v122 = *(_OWORD *)(i + 112);
    v123 = v46;
    v120 = v44;
    v121 = v45;
    v47 = *(_OWORD *)(i + 144);
    v48 = *(_OWORD *)(i + 160);
    v49 = *(_OWORD *)(i + 176);
    v127 = *(_QWORD *)(i + 192);
    v125 = v48;
    v126 = v49;
    v124 = v47;
    *(_OWORD *)i = *(_OWORD *)j;
    v50 = *(_OWORD *)(j + 16);
    v51 = *(_OWORD *)(j + 32);
    v52 = *(_OWORD *)(j + 64);
    *(_OWORD *)(i + 48) = *(_OWORD *)(j + 48);
    *(_OWORD *)(i + 64) = v52;
    *(_OWORD *)(i + 16) = v50;
    *(_OWORD *)(i + 32) = v51;
    v53 = *(_OWORD *)(j + 80);
    v54 = *(_OWORD *)(j + 96);
    v55 = *(_OWORD *)(j + 128);
    *(_OWORD *)(i + 112) = *(_OWORD *)(j + 112);
    *(_OWORD *)(i + 128) = v55;
    *(_OWORD *)(i + 80) = v53;
    *(_OWORD *)(i + 96) = v54;
    v56 = *(_OWORD *)(j + 144);
    v57 = *(_OWORD *)(j + 160);
    v58 = *(_OWORD *)(j + 176);
    *(_QWORD *)(i + 192) = *(_QWORD *)(j + 192);
    *(_OWORD *)(i + 160) = v57;
    *(_OWORD *)(i + 176) = v58;
    *(_OWORD *)(i + 144) = v56;
    *(_OWORD *)j = v115;
    v59 = v116;
    v60 = v117;
    v61 = v119;
    *(_OWORD *)(j + 48) = v118;
    *(_OWORD *)(j + 64) = v61;
    *(_OWORD *)(j + 16) = v59;
    *(_OWORD *)(j + 32) = v60;
    v62 = v120;
    v63 = v121;
    v64 = v123;
    *(_OWORD *)(j + 112) = v122;
    *(_OWORD *)(j + 128) = v64;
    *(_OWORD *)(j + 80) = v62;
    *(_OWORD *)(j + 96) = v63;
    v65 = v124;
    v66 = v125;
    v67 = v126;
    *(_QWORD *)(j + 192) = v127;
    *(_OWORD *)(j + 160) = v66;
    *(_OWORD *)(j + 176) = v67;
    *(_OWORD *)(j + 144) = v65;
    do
    {
      while (1)
      {
        i += 200;
        v68 = *(_QWORD *)(i + 128);
        if ((_QWORD)v110 == v68)
          break;
        if ((uint64_t)v110 < v68)
          goto LABEL_71;
      }
      v69 = *(_QWORD *)(i + 136);
      v71 = __OFSUB__(*((_QWORD *)&v110 + 1), v69);
      v70 = *((_QWORD *)&v110 + 1) - v69 < 0;
      if (*((_QWORD *)&v110 + 1) == v69)
      {
        v72 = *(_QWORD *)(i + 144);
        v71 = __OFSUB__((_QWORD)v111, v72);
        v70 = (uint64_t)v111 - v72 < 0;
        if ((_QWORD)v111 == v72)
        {
          v73 = *(_QWORD *)(i + 160);
          v71 = __OFSUB__((_QWORD)v112, v73);
          v70 = (uint64_t)v112 - v73 < 0;
          if ((_QWORD)v112 == v73)
          {
            v74 = *(_QWORD *)(i + 152);
            v71 = __OFSUB__(*((_QWORD *)&v111 + 1), v74);
            v70 = *((_QWORD *)&v111 + 1) - v74 < 0;
          }
        }
      }
    }
    while (v70 == v71
         && (v111 != *(_OWORD *)(i + 144)
          || (_QWORD)v112 != *(_QWORD *)(i + 160)
          || *((_QWORD *)&v110 + 1) != v69
          || !sub_100B8D030((uint64_t)&v102, i, a3)));
    do
    {
LABEL_71:
      while (1)
      {
        j -= 200;
        v75 = *(_QWORD *)(j + 128);
        if ((_QWORD)v110 == v75)
          break;
        if ((uint64_t)v110 >= v75)
          goto LABEL_81;
      }
      v76 = *(_QWORD *)(j + 136);
      v78 = __OFSUB__(*((_QWORD *)&v110 + 1), v76);
      v77 = *((_QWORD *)&v110 + 1) - v76 < 0;
      if (*((_QWORD *)&v110 + 1) == v76)
      {
        v79 = *(_QWORD *)(j + 144);
        v78 = __OFSUB__((_QWORD)v111, v79);
        v77 = (uint64_t)v111 - v79 < 0;
        if ((_QWORD)v111 == v79)
        {
          v80 = *(_QWORD *)(j + 160);
          v78 = __OFSUB__((_QWORD)v112, v80);
          v77 = (uint64_t)v112 - v80 < 0;
          if ((_QWORD)v112 == v80)
          {
            v81 = *(_QWORD *)(j + 152);
            v78 = __OFSUB__(*((_QWORD *)&v111 + 1), v81);
            v77 = *((_QWORD *)&v111 + 1) - v81 < 0;
          }
        }
      }
    }
    while (v77 != v78
         || v111 == *(_OWORD *)(j + 144)
         && *((_QWORD *)&v110 + 1) == v76
         && (_QWORD)v112 == *(_QWORD *)(j + 160)
         && (sub_100B8D030((uint64_t)&v102, j, a3) & 1) != 0);
  }
  v82 = (__int128 *)(i - 200);
  if ((__int128 *)(i - 200) != a1)
  {
    *a1 = *v82;
    v83 = *(_OWORD *)(i - 184);
    v84 = *(_OWORD *)(i - 168);
    v85 = *(_OWORD *)(i - 136);
    a1[3] = *(_OWORD *)(i - 152);
    a1[4] = v85;
    a1[1] = v83;
    a1[2] = v84;
    v86 = *(_OWORD *)(i - 120);
    v87 = *(_OWORD *)(i - 104);
    v88 = *(_OWORD *)(i - 72);
    a1[7] = *(_OWORD *)(i - 88);
    a1[8] = v88;
    a1[5] = v86;
    a1[6] = v87;
    v89 = *(_OWORD *)(i - 56);
    v90 = *(_OWORD *)(i - 40);
    v91 = *(_OWORD *)(i - 24);
    *((_QWORD *)a1 + 24) = *(_QWORD *)(i - 8);
    a1[10] = v90;
    a1[11] = v91;
    a1[9] = v89;
  }
  *v82 = v102;
  v92 = v103;
  v93 = v104;
  v94 = v106;
  *(_OWORD *)(i - 152) = v105;
  *(_OWORD *)(i - 136) = v94;
  *(_OWORD *)(i - 184) = v92;
  *(_OWORD *)(i - 168) = v93;
  v95 = v107;
  v96 = v108;
  v97 = v110;
  *(_OWORD *)(i - 88) = v109;
  *(_OWORD *)(i - 72) = v97;
  *(_OWORD *)(i - 120) = v95;
  *(_OWORD *)(i - 104) = v96;
  v98 = v111;
  v99 = v112;
  v100 = v113;
  *(_QWORD *)(i - 8) = v114;
  *(_OWORD *)(i - 40) = v99;
  *(_OWORD *)(i - 24) = v100;
  *(_OWORD *)(i - 56) = v98;
  return i;
}

unint64_t sub_100B8C5CC(__int128 *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;

  v5 = 0;
  v111 = *((_QWORD *)a1 + 24);
  v6 = a1[11];
  v109 = a1[10];
  v110 = v6;
  v7 = a1[7];
  v105 = a1[6];
  v106 = v7;
  v8 = a1[9];
  v107 = a1[8];
  v108 = v8;
  v9 = a1[3];
  v101 = a1[2];
  v102 = v9;
  v10 = a1[5];
  v103 = a1[4];
  v104 = v10;
  v11 = a1[1];
  v99 = *a1;
  v100 = v11;
  while (1)
  {
    v12 = (uint64_t)a1 + v5;
    v13 = *(_QWORD *)((char *)a1 + v5 + 328);
    if (v13 == (_QWORD)v107)
      break;
    if (v13 >= (uint64_t)v107)
      goto LABEL_15;
LABEL_14:
    v5 += 200;
  }
  v14 = *(_QWORD *)(v12 + 336);
  v16 = __OFSUB__(v14, *((_QWORD *)&v107 + 1));
  v15 = v14 - *((_QWORD *)&v107 + 1) < 0;
  if (v14 == *((_QWORD *)&v107 + 1))
  {
    v17 = *(_QWORD *)((char *)a1 + v5 + 344);
    v16 = __OFSUB__(v17, (_QWORD)v108);
    v15 = v17 - (uint64_t)v108 < 0;
    if (v17 == (_QWORD)v108)
    {
      v18 = *(_QWORD *)((char *)a1 + v5 + 360);
      v16 = __OFSUB__(v18, (_QWORD)v109);
      v15 = v18 - (uint64_t)v109 < 0;
      if (v18 == (_QWORD)v109)
      {
        v19 = *(_QWORD *)((char *)a1 + v5 + 352);
        v16 = __OFSUB__(v19, *((_QWORD *)&v108 + 1));
        v15 = v19 - *((_QWORD *)&v108 + 1) < 0;
      }
    }
  }
  if (v15 != v16
    || *(__int128 *)((char *)a1 + v5 + 344) == v108
    && v14 == *((_QWORD *)&v107 + 1)
    && *(_QWORD *)((char *)a1 + v5 + 360) == (_QWORD)v109
    && (sub_100B8D030(v12 + 200, (uint64_t)&v99, a3) & 1) != 0)
  {
    goto LABEL_14;
  }
LABEL_15:
  v20 = (unint64_t)a1 + v5;
  v21 = (unint64_t)a1 + v5 + 200;
  if (v5)
  {
    do
    {
      while (1)
      {
        a2 -= 25;
        v22 = a2[16];
        if (v22 == (_QWORD)v107)
          break;
        if (v22 < (uint64_t)v107)
          goto LABEL_46;
      }
      v23 = a2[17];
      v25 = __OFSUB__(v23, *((_QWORD *)&v107 + 1));
      v24 = v23 - *((_QWORD *)&v107 + 1) < 0;
      if (v23 == *((_QWORD *)&v107 + 1))
      {
        v26 = a2[18];
        v25 = __OFSUB__(v26, (_QWORD)v108);
        v24 = v26 - (uint64_t)v108 < 0;
        if (v26 == (_QWORD)v108)
        {
          v27 = a2[20];
          v25 = __OFSUB__(v27, (_QWORD)v109);
          v24 = v27 - (uint64_t)v109 < 0;
          if (v27 == (_QWORD)v109)
          {
            v28 = a2[19];
            v25 = __OFSUB__(v28, *((_QWORD *)&v108 + 1));
            v24 = v28 - *((_QWORD *)&v108 + 1) < 0;
          }
        }
      }
    }
    while (v24 == v25
         && (*((_OWORD *)a2 + 9) != v108
          || v23 != *((_QWORD *)&v107 + 1)
          || a2[20] != (_QWORD)v109
          || !sub_100B8D030((uint64_t)a2, (uint64_t)&v99, a3)));
  }
  else
  {
    do
    {
      if (v21 >= (unint64_t)a2)
        break;
      while (1)
      {
        a2 -= 25;
        v29 = a2[16];
        if (v29 == (_QWORD)v107)
          break;
        if (v29 < (uint64_t)v107 || v21 >= (unint64_t)a2)
          goto LABEL_46;
      }
      v31 = a2[17];
      v33 = __OFSUB__(v31, *((_QWORD *)&v107 + 1));
      v32 = v31 - *((_QWORD *)&v107 + 1) < 0;
      if (v31 == *((_QWORD *)&v107 + 1))
      {
        v34 = a2[18];
        v33 = __OFSUB__(v34, (_QWORD)v108);
        v32 = v34 - (uint64_t)v108 < 0;
        if (v34 == (_QWORD)v108)
        {
          v35 = a2[20];
          v33 = __OFSUB__(v35, (_QWORD)v109);
          v32 = v35 - (uint64_t)v109 < 0;
          if (v35 == (_QWORD)v109)
          {
            v36 = a2[19];
            v33 = __OFSUB__(v36, *((_QWORD *)&v108 + 1));
            v32 = v36 - *((_QWORD *)&v108 + 1) < 0;
          }
        }
      }
    }
    while (v32 == v33
         && (*((_OWORD *)a2 + 9) != v108
          || v31 != *((_QWORD *)&v107 + 1)
          || a2[20] != (_QWORD)v109
          || (sub_100B8D030((uint64_t)a2, (uint64_t)&v99, a3) & 1) == 0));
  }
LABEL_46:
  if (v21 < (unint64_t)a2)
  {
    v37 = (unint64_t)a1 + v5 + 200;
    v38 = (unint64_t)a2;
    do
    {
      v112 = *(_OWORD *)v37;
      v39 = *(_OWORD *)(v37 + 16);
      v40 = *(_OWORD *)(v37 + 32);
      v41 = *(_OWORD *)(v37 + 64);
      v115 = *(_OWORD *)(v37 + 48);
      v116 = v41;
      v113 = v39;
      v114 = v40;
      v42 = *(_OWORD *)(v37 + 80);
      v43 = *(_OWORD *)(v37 + 96);
      v44 = *(_OWORD *)(v37 + 128);
      v119 = *(_OWORD *)(v37 + 112);
      v120 = v44;
      v117 = v42;
      v118 = v43;
      v45 = *(_OWORD *)(v37 + 144);
      v46 = *(_OWORD *)(v37 + 160);
      v47 = *(_OWORD *)(v37 + 176);
      v124 = *(_QWORD *)(v37 + 192);
      v122 = v46;
      v123 = v47;
      v121 = v45;
      *(_OWORD *)v37 = *(_OWORD *)v38;
      v48 = *(_OWORD *)(v38 + 16);
      v49 = *(_OWORD *)(v38 + 32);
      v50 = *(_OWORD *)(v38 + 64);
      *(_OWORD *)(v37 + 48) = *(_OWORD *)(v38 + 48);
      *(_OWORD *)(v37 + 64) = v50;
      *(_OWORD *)(v37 + 16) = v48;
      *(_OWORD *)(v37 + 32) = v49;
      v51 = *(_OWORD *)(v38 + 80);
      v52 = *(_OWORD *)(v38 + 96);
      v53 = *(_OWORD *)(v38 + 128);
      *(_OWORD *)(v37 + 112) = *(_OWORD *)(v38 + 112);
      *(_OWORD *)(v37 + 128) = v53;
      *(_OWORD *)(v37 + 80) = v51;
      *(_OWORD *)(v37 + 96) = v52;
      v54 = *(_OWORD *)(v38 + 144);
      v55 = *(_OWORD *)(v38 + 160);
      v56 = *(_OWORD *)(v38 + 176);
      *(_QWORD *)(v37 + 192) = *(_QWORD *)(v38 + 192);
      *(_OWORD *)(v37 + 160) = v55;
      *(_OWORD *)(v37 + 176) = v56;
      *(_OWORD *)(v37 + 144) = v54;
      *(_OWORD *)v38 = v112;
      v57 = v113;
      v58 = v114;
      v59 = v116;
      *(_OWORD *)(v38 + 48) = v115;
      *(_OWORD *)(v38 + 64) = v59;
      *(_OWORD *)(v38 + 16) = v57;
      *(_OWORD *)(v38 + 32) = v58;
      v60 = v117;
      v61 = v118;
      v62 = v120;
      *(_OWORD *)(v38 + 112) = v119;
      *(_OWORD *)(v38 + 128) = v62;
      *(_OWORD *)(v38 + 80) = v60;
      *(_OWORD *)(v38 + 96) = v61;
      v63 = v121;
      v64 = v122;
      v65 = v123;
      *(_QWORD *)(v38 + 192) = v124;
      *(_OWORD *)(v38 + 160) = v64;
      *(_OWORD *)(v38 + 176) = v65;
      *(_OWORD *)(v38 + 144) = v63;
      do
      {
        while (1)
        {
          v37 += 200;
          v66 = *(_QWORD *)(v37 + 128);
          if (v66 == (_QWORD)v107)
            break;
          if (v66 >= (uint64_t)v107)
            goto LABEL_63;
        }
        v67 = *(_QWORD *)(v37 + 136);
        v69 = __OFSUB__(v67, *((_QWORD *)&v107 + 1));
        v68 = v67 - *((_QWORD *)&v107 + 1) < 0;
        if (v67 == *((_QWORD *)&v107 + 1))
        {
          v70 = *(_QWORD *)(v37 + 144);
          v69 = __OFSUB__(v70, (_QWORD)v108);
          v68 = v70 - (uint64_t)v108 < 0;
          if (v70 == (_QWORD)v108)
          {
            v71 = *(_QWORD *)(v37 + 160);
            v69 = __OFSUB__(v71, (_QWORD)v109);
            v68 = v71 - (uint64_t)v109 < 0;
            if (v71 == (_QWORD)v109)
            {
              v72 = *(_QWORD *)(v37 + 152);
              v69 = __OFSUB__(v72, *((_QWORD *)&v108 + 1));
              v68 = v72 - *((_QWORD *)&v108 + 1) < 0;
            }
          }
        }
      }
      while (v68 != v69
           || *(_OWORD *)(v37 + 144) == v108
           && *(_QWORD *)(v37 + 160) == (_QWORD)v109
           && v67 == *((_QWORD *)&v107 + 1)
           && sub_100B8D030(v37, (uint64_t)&v99, a3));
      do
      {
LABEL_63:
        while (1)
        {
          v38 -= 200;
          v73 = *(_QWORD *)(v38 + 128);
          if (v73 == (_QWORD)v107)
            break;
          if (v73 < (uint64_t)v107)
            goto LABEL_73;
        }
        v74 = *(_QWORD *)(v38 + 136);
        v76 = __OFSUB__(v74, *((_QWORD *)&v107 + 1));
        v75 = v74 - *((_QWORD *)&v107 + 1) < 0;
        if (v74 == *((_QWORD *)&v107 + 1))
        {
          v77 = *(_QWORD *)(v38 + 144);
          v76 = __OFSUB__(v77, (_QWORD)v108);
          v75 = v77 - (uint64_t)v108 < 0;
          if (v77 == (_QWORD)v108)
          {
            v78 = *(_QWORD *)(v38 + 160);
            v76 = __OFSUB__(v78, (_QWORD)v109);
            v75 = v78 - (uint64_t)v109 < 0;
            if (v78 == (_QWORD)v109)
            {
              v79 = *(_QWORD *)(v38 + 152);
              v76 = __OFSUB__(v79, *((_QWORD *)&v108 + 1));
              v75 = v79 - *((_QWORD *)&v108 + 1) < 0;
            }
          }
        }
      }
      while (v75 == v76
           && (*(_OWORD *)(v38 + 144) != v108
            || v74 != *((_QWORD *)&v107 + 1)
            || *(_QWORD *)(v38 + 160) != (_QWORD)v109
            || !sub_100B8D030(v38, (uint64_t)&v99, a3)));
LABEL_73:
      ;
    }
    while (v37 < v38);
    v20 = v37 - 200;
  }
  if ((__int128 *)v20 != a1)
  {
    *a1 = *(_OWORD *)v20;
    v80 = *(_OWORD *)(v20 + 16);
    v81 = *(_OWORD *)(v20 + 32);
    v82 = *(_OWORD *)(v20 + 64);
    a1[3] = *(_OWORD *)(v20 + 48);
    a1[4] = v82;
    a1[1] = v80;
    a1[2] = v81;
    v83 = *(_OWORD *)(v20 + 80);
    v84 = *(_OWORD *)(v20 + 96);
    v85 = *(_OWORD *)(v20 + 128);
    a1[7] = *(_OWORD *)(v20 + 112);
    a1[8] = v85;
    a1[5] = v83;
    a1[6] = v84;
    v86 = *(_OWORD *)(v20 + 144);
    v87 = *(_OWORD *)(v20 + 160);
    v88 = *(_OWORD *)(v20 + 176);
    *((_QWORD *)a1 + 24) = *(_QWORD *)(v20 + 192);
    a1[10] = v87;
    a1[11] = v88;
    a1[9] = v86;
  }
  *(_OWORD *)v20 = v99;
  v89 = v100;
  v90 = v101;
  v91 = v103;
  *(_OWORD *)(v20 + 48) = v102;
  *(_OWORD *)(v20 + 64) = v91;
  *(_OWORD *)(v20 + 16) = v89;
  *(_OWORD *)(v20 + 32) = v90;
  v92 = v104;
  v93 = v105;
  v94 = v107;
  *(_OWORD *)(v20 + 112) = v106;
  *(_OWORD *)(v20 + 128) = v94;
  *(_OWORD *)(v20 + 80) = v92;
  *(_OWORD *)(v20 + 96) = v93;
  v95 = v108;
  v96 = v109;
  v97 = v110;
  *(_QWORD *)(v20 + 192) = v111;
  *(_OWORD *)(v20 + 160) = v96;
  *(_OWORD *)(v20 + 176) = v97;
  *(_OWORD *)(v20 + 144) = v95;
  return v20;
}

BOOL sub_100B8CB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _BOOL8 result;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v5 = 0x8F5C28F5C28F5C29 * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (_OWORD *)(a2 - 200);
      v8 = *(_QWORD *)(a2 - 72);
      v9 = *(_QWORD *)(a1 + 128);
      if (v8 != v9)
      {
        if (v8 >= v9)
          return result;
        goto LABEL_52;
      }
      v10 = *(_QWORD *)(a2 - 64);
      v11 = *(_QWORD *)(a1 + 136);
      v12 = v10 < v11;
      if (v10 == v11)
      {
        v13 = *(_QWORD *)(a2 - 56);
        v14 = *(_QWORD *)(a1 + 144);
        v12 = v13 < v14;
        if (v13 == v14)
          v12 = *(_OWORD *)(a2 - 48) < *(_OWORD *)(a1 + 152);
      }
      if (v12)
        goto LABEL_52;
      if (*(_QWORD *)(a2 - 48) == *(_QWORD *)(a1 + 152)
        && *(_QWORD *)(a2 - 56) == *(_QWORD *)(a1 + 144)
        && v10 == v11
        && *(_QWORD *)(a2 - 40) == *(_QWORD *)(a1 + 160))
      {
        if (!sub_100B8D030(a2 - 200, a1, a3))
          return 1;
LABEL_52:
        v62 = *(_OWORD *)(a1 + 176);
        v93 = *(_OWORD *)(a1 + 160);
        v94 = v62;
        v95 = *(_QWORD *)(a1 + 192);
        v63 = *(_OWORD *)(a1 + 112);
        v89 = *(_OWORD *)(a1 + 96);
        v90 = v63;
        v64 = *(_OWORD *)(a1 + 144);
        v91 = *(_OWORD *)(a1 + 128);
        v92 = v64;
        v65 = *(_OWORD *)(a1 + 48);
        v85 = *(_OWORD *)(a1 + 32);
        v86 = v65;
        v66 = *(_OWORD *)(a1 + 80);
        v87 = *(_OWORD *)(a1 + 64);
        v88 = v66;
        v67 = *(_OWORD *)(a1 + 16);
        v83 = *(_OWORD *)a1;
        v84 = v67;
        *(_OWORD *)a1 = *v7;
        v68 = *(_OWORD *)(a2 - 184);
        v69 = *(_OWORD *)(a2 - 168);
        v70 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 64) = v70;
        *(_OWORD *)(a1 + 16) = v68;
        *(_OWORD *)(a1 + 32) = v69;
        v71 = *(_OWORD *)(a2 - 120);
        v72 = *(_OWORD *)(a2 - 104);
        v73 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 128) = v73;
        *(_OWORD *)(a1 + 80) = v71;
        *(_OWORD *)(a1 + 96) = v72;
        v74 = *(_OWORD *)(a2 - 56);
        v75 = *(_OWORD *)(a2 - 40);
        v76 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 160) = v75;
        *(_OWORD *)(a1 + 176) = v76;
        *(_OWORD *)(a1 + 144) = v74;
        v77 = v94;
        *(_OWORD *)(a2 - 40) = v93;
        *(_OWORD *)(a2 - 24) = v77;
        *(_QWORD *)(a2 - 8) = v95;
        v78 = v90;
        *(_OWORD *)(a2 - 104) = v89;
        *(_OWORD *)(a2 - 88) = v78;
        v79 = v92;
        *(_OWORD *)(a2 - 72) = v91;
        *(_OWORD *)(a2 - 56) = v79;
        v80 = v86;
        *(_OWORD *)(a2 - 168) = v85;
        *(_OWORD *)(a2 - 152) = v80;
        v81 = v88;
        *(_OWORD *)(a2 - 136) = v87;
        *(_OWORD *)(a2 - 120) = v81;
        v82 = v84;
        result = 1;
        *v7 = v83;
        *(_OWORD *)(a2 - 184) = v82;
      }
      return result;
    case 3uLL:
      sub_100B8B924(a1, a1 + 200, a2 - 200);
      return 1;
    case 4uLL:
      sub_100B8D3F8(a1, a1 + 200, a1 + 400, a2 - 200);
      return 1;
    case 5uLL:
      sub_100B8D830(a1, a1 + 200, a1 + 400, a1 + 600, a2 - 200);
      return 1;
    default:
      v15 = a1 + 400;
      sub_100B8B924(a1, a1 + 200, a1 + 400);
      v17 = a1 + 600;
      if (a1 + 600 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
LABEL_16:
  v20 = *(_QWORD *)(v17 + 128);
  v21 = *(_QWORD *)(v15 + 128);
  if (v20 == v21)
  {
    v22 = *(_QWORD *)(v17 + 136);
    v23 = *(_QWORD *)(v15 + 136);
    v24 = v22 < v23;
    if (v22 == v23)
    {
      v25 = *(_QWORD *)(v17 + 144);
      v26 = *(_QWORD *)(v15 + 144);
      v24 = v25 < v26;
      if (v25 == v26)
        v24 = *(_OWORD *)(v17 + 152) < *(_OWORD *)(v15 + 152);
    }
    if (!v24
      && (*(_QWORD *)(v17 + 152) != *(_QWORD *)(v15 + 152)
       || *(_QWORD *)(v17 + 144) != *(_QWORD *)(v15 + 144)
       || v22 != v23
       || *(_QWORD *)(v17 + 160) != *(_QWORD *)(v15 + 160)
       || !sub_100B8D030(v17, v15, v16)))
    {
      goto LABEL_45;
    }
  }
  else if (v20 >= v21)
  {
    goto LABEL_45;
  }
  v27 = *(_OWORD *)(v17 + 48);
  v85 = *(_OWORD *)(v17 + 32);
  v86 = v27;
  v28 = *(_OWORD *)(v17 + 112);
  v89 = *(_OWORD *)(v17 + 96);
  v90 = v28;
  v29 = *(_OWORD *)(v17 + 80);
  v87 = *(_OWORD *)(v17 + 64);
  v88 = v29;
  v95 = *(_QWORD *)(v17 + 192);
  v30 = *(_OWORD *)(v17 + 176);
  v93 = *(_OWORD *)(v17 + 160);
  v94 = v30;
  v31 = *(_OWORD *)(v17 + 144);
  v91 = *(_OWORD *)(v17 + 128);
  v92 = v31;
  v32 = *(_OWORD *)(v17 + 16);
  v83 = *(_OWORD *)v17;
  v84 = v32;
  v33 = *(_OWORD *)(v15 + 176);
  *(_OWORD *)(v17 + 160) = *(_OWORD *)(v15 + 160);
  *(_OWORD *)(v17 + 176) = v33;
  *(_QWORD *)(v17 + 192) = *(_QWORD *)(v15 + 192);
  v34 = *(_OWORD *)(v15 + 112);
  *(_OWORD *)(v17 + 96) = *(_OWORD *)(v15 + 96);
  *(_OWORD *)(v17 + 112) = v34;
  v35 = *(_OWORD *)(v15 + 144);
  *(_OWORD *)(v17 + 128) = *(_OWORD *)(v15 + 128);
  *(_OWORD *)(v17 + 144) = v35;
  v36 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v17 + 48) = v36;
  v37 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(v17 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(v17 + 80) = v37;
  v38 = *(_OWORD *)(v15 + 16);
  v39 = a1;
  *(_OWORD *)v17 = *(_OWORD *)v15;
  *(_OWORD *)(v17 + 16) = v38;
  if (v15 == a1)
    goto LABEL_44;
  v40 = v18;
  while (1)
  {
    v41 = a1 + v40;
    v42 = (_OWORD *)(a1 + v40 + 200);
    v43 = *(_QWORD *)(a1 + v40 + 328);
    if ((_QWORD)v91 == v43)
    {
      v44 = *(_QWORD *)(v41 + 336);
      v45 = *((_QWORD *)&v91 + 1) < v44;
      if (*((_QWORD *)&v91 + 1) == v44)
      {
        v46 = *(_QWORD *)(a1 + v40 + 344);
        v45 = (uint64_t)v92 < v46;
        if ((_QWORD)v92 == v46)
          v45 = (__int128)__PAIR128__(v93, *((unint64_t *)&v92 + 1)) < *(_OWORD *)(a1 + v40 + 352);
      }
      if (!v45)
      {
        if (v92 != *(_OWORD *)(a1 + v40 + 344)
          || *((_QWORD *)&v91 + 1) != v44
          || (_QWORD)v93 != *(_QWORD *)(a1 + v40 + 360))
        {
LABEL_43:
          v39 = v15;
LABEL_44:
          *(_OWORD *)v39 = v83;
          v53 = v84;
          v54 = v85;
          v55 = v87;
          *(_OWORD *)(v39 + 48) = v86;
          *(_OWORD *)(v39 + 64) = v55;
          *(_OWORD *)(v39 + 16) = v53;
          *(_OWORD *)(v39 + 32) = v54;
          v56 = v88;
          v57 = v89;
          v58 = v91;
          *(_OWORD *)(v39 + 112) = v90;
          *(_OWORD *)(v39 + 128) = v58;
          *(_OWORD *)(v39 + 80) = v56;
          *(_OWORD *)(v39 + 96) = v57;
          v59 = v92;
          v60 = v93;
          v61 = v94;
          *(_QWORD *)(v39 + 192) = v95;
          *(_OWORD *)(v39 + 160) = v60;
          *(_OWORD *)(v39 + 176) = v61;
          *(_OWORD *)(v39 + 144) = v59;
          if (++v19 == 8)
            return v17 + 200 == a2;
LABEL_45:
          v15 = v17;
          v18 += 200;
          v17 += 200;
          if (v17 == a2)
            return 1;
          goto LABEL_16;
        }
        if (!sub_100B8D030((uint64_t)&v83, a1 + v40 + 200, v16))
        {
          v39 = a1 + v40 + 400;
          goto LABEL_44;
        }
      }
    }
    else if ((uint64_t)v91 >= v43)
    {
      goto LABEL_43;
    }
    v15 -= 200;
    v47 = *(_OWORD *)(a1 + v40 + 376);
    *(_OWORD *)(v41 + 560) = *(_OWORD *)(a1 + v40 + 360);
    *(_OWORD *)(v41 + 576) = v47;
    *(_QWORD *)(v41 + 592) = *(_QWORD *)(a1 + v40 + 392);
    v48 = *(_OWORD *)(a1 + v40 + 312);
    *(_OWORD *)(v41 + 496) = *(_OWORD *)(a1 + v40 + 296);
    *(_OWORD *)(v41 + 512) = v48;
    v49 = *(_OWORD *)(a1 + v40 + 344);
    *(_OWORD *)(v41 + 528) = *(_OWORD *)(a1 + v40 + 328);
    *(_OWORD *)(v41 + 544) = v49;
    v50 = *(_OWORD *)(a1 + v40 + 248);
    *(_OWORD *)(v41 + 432) = *(_OWORD *)(a1 + v40 + 232);
    *(_OWORD *)(v41 + 448) = v50;
    v51 = *(_OWORD *)(a1 + v40 + 280);
    *(_OWORD *)(v41 + 464) = *(_OWORD *)(a1 + v40 + 264);
    *(_OWORD *)(v41 + 480) = v51;
    v52 = *(_OWORD *)(a1 + v40 + 216);
    v40 -= 200;
    *(_OWORD *)(v41 + 400) = *v42;
    *(_OWORD *)(v41 + 416) = v52;
    if (v40 == -400)
    {
      v39 = a1;
      goto LABEL_44;
    }
  }
}

uint64_t sub_100B8D030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  _BOOL4 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  if (vabdd_f64(*(double *)(a1 + 184), *(double *)(a2 + 184)) < 50.0)
  {
    v5 = *(double *)(a1 + 176);
    if (v5 == 0.0)
      sub_10191BABC();
    v6 = *(double *)(a2 + 176);
    if (v6 == 0.0)
      sub_10191BAE4();
    v7 = *(double *)(a1 + 168) / v5;
    v8 = *(double *)(a2 + 168) / v6;
    if (v7 == v8)
      goto LABEL_36;
    if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v15 = vabdd_f64(v7, v8);
      v16 = fabs(v7);
      v17 = fabs(v8);
      if (v16 < v17)
        v16 = v17;
      v18 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
      if (v15 <= v18)
      {
LABEL_36:
        v9 = *(double *)a1;
        v38 = *(double *)(a1 + 8);
        v39 = v9;
        sub_100778A68(&v39, &v38, 1);
        v10 = v38;
        v11 = v39;
        v12 = *(double *)a2;
        v38 = *(double *)(a2 + 8);
        v39 = v12;
        sub_100778A68(&v39, &v38, 1);
        if (v11 == v39)
          goto LABEL_61;
        if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v19 = vabdd_f64(v11, v39);
          v20 = fabs(v11);
          v21 = fabs(v39);
          if (v20 >= v21)
            v21 = v20;
          v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v19 <= v22)
          {
LABEL_61:
            if (v10 == v38)
              return sub_100B8D2F0((uint64_t)&unk_1022F9C31, a1, a2);
            if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              v23 = vabdd_f64(v10, v38);
              v24 = fabs(v10);
              v25 = fabs(v38);
              if (v24 >= v25)
                v25 = v24;
              v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
              if (v23 <= v26)
                return sub_100B8D2F0((uint64_t)&unk_1022F9C31, a1, a2);
            }
          }
        }
      }
    }
  }
  v27 = *(double *)(a1 + 184);
  v28 = *(double *)(a2 + 184);
  if (vabdd_f64(v27, v28) >= 50.0)
    return v27 < v28;
  v29 = *(double *)(a1 + 176);
  if (v29 == 0.0)
    sub_10191B9FC(a1, a2, a3);
  v30 = *(double *)(a2 + 176);
  if (v30 == 0.0)
    sub_10191BA20(a1, a2, a3);
  v31 = *(double *)(a1 + 168) / v29;
  v32 = *(double *)(a2 + 168) / v30;
  if (v31 == v32)
  {
    v33 = 0;
  }
  else if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v33 = 1;
  }
  else
  {
    v34 = vabdd_f64(v31, v32);
    v35 = fabs(v31);
    v36 = fabs(v32);
    if (v35 < v36)
      v35 = v36;
    if (v35 >= 1.0)
      v37 = v35 * 2.22044605e-16;
    else
      v37 = 2.22044605e-16;
    v33 = v34 > v37;
  }
  return v31 < v32 && v33;
}

uint64_t sub_100B8D2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v14;

  if (*(_QWORD *)(a2 + 56) != *(_QWORD *)(a3 + 56))
  {
    v7 = *(int *)(a2 + 120);
    v8 = (char *)dword_101C17434;
    if (v7 <= 5)
    {
      v6 = dword_101C17434[v7];
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a3 + 64);
  if (v3 == v4)
  {
    v5 = *(int *)(a2 + 120);
    if (v5 > 5)
      v6 = -1;
    else
      v6 = dword_101C17434[v5];
    v12 = *(int *)(a3 + 120);
    if (v12 <= 5)
    {
      v11 = dword_101C17434[v12];
      return v6 < v11;
    }
    goto LABEL_18;
  }
  if (v3 == -1)
  {
    v9 = *(_DWORD *)(a2 + 120);
    if (v9 == 1)
      return 0;
    if (v9 != 2)
    {
LABEL_10:
      v8 = "";
      if (v9 <= 5)
      {
        v6 = *(_DWORD *)&aDitmces[4 * v9 + 9];
        goto LABEL_13;
      }
LABEL_12:
      v6 = -1;
LABEL_13:
      v10 = *(int *)(a3 + 120);
      if (v10 <= 5)
      {
        v11 = *(_DWORD *)&v8[4 * v10];
        return v6 < v11;
      }
LABEL_18:
      v11 = -1;
      return v6 < v11;
    }
  }
  else
  {
    if (v4 != -1)
    {
LABEL_9:
      v9 = *(_DWORD *)(a2 + 120);
      goto LABEL_10;
    }
    v14 = *(_DWORD *)(a3 + 120);
    if (v14 != 1)
    {
      if (v14 != 2)
        goto LABEL_9;
      return 0;
    }
  }
  return 1;
}

__n128 sub_100B8D3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  sub_100B8B924(a1, a2, a3);
  v10 = *(_QWORD *)(a4 + 128);
  v11 = *(_QWORD *)(a3 + 128);
  if (v10 != v11)
  {
    if (v10 >= v11)
      return result;
LABEL_13:
    v88 = *(_OWORD *)(a3 + 160);
    v91 = *(_OWORD *)(a3 + 176);
    v94 = *(_QWORD *)(a3 + 192);
    v76 = *(_OWORD *)(a3 + 96);
    v79 = *(_OWORD *)(a3 + 112);
    v82 = *(_OWORD *)(a3 + 128);
    v85 = *(_OWORD *)(a3 + 144);
    v64 = *(_OWORD *)(a3 + 32);
    v67 = *(_OWORD *)(a3 + 48);
    v70 = *(_OWORD *)(a3 + 64);
    v73 = *(_OWORD *)(a3 + 80);
    v58 = *(_OWORD *)a3;
    v61 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v17 = *(_OWORD *)(a4 + 16);
    v18 = *(_OWORD *)(a4 + 32);
    v19 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v19;
    *(_OWORD *)(a3 + 16) = v17;
    *(_OWORD *)(a3 + 32) = v18;
    v20 = *(_OWORD *)(a4 + 80);
    v21 = *(_OWORD *)(a4 + 96);
    v22 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v22;
    *(_OWORD *)(a3 + 80) = v20;
    *(_OWORD *)(a3 + 96) = v21;
    v23 = *(_OWORD *)(a4 + 144);
    v24 = *(_OWORD *)(a4 + 160);
    v25 = *(_OWORD *)(a4 + 176);
    *(_QWORD *)(a3 + 192) = *(_QWORD *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v24;
    *(_OWORD *)(a3 + 176) = v25;
    *(_OWORD *)(a3 + 144) = v23;
    *(_OWORD *)(a4 + 160) = v88;
    *(_OWORD *)(a4 + 176) = v91;
    *(_QWORD *)(a4 + 192) = v94;
    *(_OWORD *)(a4 + 96) = v76;
    *(_OWORD *)(a4 + 112) = v79;
    *(_OWORD *)(a4 + 128) = v82;
    *(_OWORD *)(a4 + 144) = v85;
    *(_OWORD *)(a4 + 32) = v64;
    *(_OWORD *)(a4 + 48) = v67;
    *(_OWORD *)(a4 + 64) = v70;
    *(_OWORD *)(a4 + 80) = v73;
    result = v61;
    *(_OWORD *)a4 = v58;
    *(__n128 *)(a4 + 16) = v61;
    v26 = *(_QWORD *)(a3 + 128);
    v27 = *(_QWORD *)(a2 + 128);
    if (v26 == v27)
    {
      v28 = *(_QWORD *)(a3 + 136);
      v29 = *(_QWORD *)(a2 + 136);
      v30 = v28 < v29;
      if (v28 == v29)
      {
        v31 = *(_QWORD *)(a3 + 144);
        v32 = *(_QWORD *)(a2 + 144);
        v30 = v31 < v32;
        if (v31 == v32)
          v30 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
      }
      if (!v30
        && (*(_QWORD *)(a3 + 152) != *(_QWORD *)(a2 + 152)
         || *(_QWORD *)(a3 + 144) != *(_QWORD *)(a2 + 144)
         || v28 != v29
         || *(_QWORD *)(a3 + 160) != *(_QWORD *)(a2 + 160)
         || !sub_100B8D030(a3, a2, v8)))
      {
        return result;
      }
    }
    else if (v26 >= v27)
    {
      return result;
    }
    v89 = *(_OWORD *)(a2 + 160);
    v92 = *(_OWORD *)(a2 + 176);
    v95 = *(_QWORD *)(a2 + 192);
    v77 = *(_OWORD *)(a2 + 96);
    v80 = *(_OWORD *)(a2 + 112);
    v83 = *(_OWORD *)(a2 + 128);
    v86 = *(_OWORD *)(a2 + 144);
    v65 = *(_OWORD *)(a2 + 32);
    v68 = *(_OWORD *)(a2 + 48);
    v71 = *(_OWORD *)(a2 + 64);
    v74 = *(_OWORD *)(a2 + 80);
    v59 = *(_OWORD *)a2;
    v62 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v33 = *(_OWORD *)(a3 + 16);
    v34 = *(_OWORD *)(a3 + 32);
    v35 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v35;
    *(_OWORD *)(a2 + 16) = v33;
    *(_OWORD *)(a2 + 32) = v34;
    v36 = *(_OWORD *)(a3 + 80);
    v37 = *(_OWORD *)(a3 + 96);
    v38 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v38;
    *(_OWORD *)(a2 + 80) = v36;
    *(_OWORD *)(a2 + 96) = v37;
    v39 = *(_OWORD *)(a3 + 144);
    v40 = *(_OWORD *)(a3 + 160);
    v41 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v40;
    *(_OWORD *)(a2 + 176) = v41;
    *(_OWORD *)(a2 + 144) = v39;
    *(_OWORD *)(a3 + 160) = v89;
    *(_OWORD *)(a3 + 176) = v92;
    *(_QWORD *)(a3 + 192) = v95;
    *(_OWORD *)(a3 + 96) = v77;
    *(_OWORD *)(a3 + 112) = v80;
    *(_OWORD *)(a3 + 128) = v83;
    *(_OWORD *)(a3 + 144) = v86;
    *(_OWORD *)(a3 + 32) = v65;
    *(_OWORD *)(a3 + 48) = v68;
    *(_OWORD *)(a3 + 64) = v71;
    *(_OWORD *)(a3 + 80) = v74;
    result = v62;
    *(_OWORD *)a3 = v59;
    *(__n128 *)(a3 + 16) = v62;
    v42 = *(_QWORD *)(a2 + 128);
    v43 = *(_QWORD *)(a1 + 128);
    if (v42 == v43)
    {
      v44 = *(_QWORD *)(a2 + 136);
      v45 = *(_QWORD *)(a1 + 136);
      v46 = v44 < v45;
      if (v44 == v45)
      {
        v47 = *(_QWORD *)(a2 + 144);
        v48 = *(_QWORD *)(a1 + 144);
        v46 = v47 < v48;
        if (v47 == v48)
          v46 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
      }
      if (!v46
        && (*(_QWORD *)(a2 + 152) != *(_QWORD *)(a1 + 152)
         || *(_QWORD *)(a2 + 144) != *(_QWORD *)(a1 + 144)
         || v44 != v45
         || *(_QWORD *)(a2 + 160) != *(_QWORD *)(a1 + 160)
         || !sub_100B8D030(a2, a1, v8)))
      {
        return result;
      }
    }
    else if (v42 >= v43)
    {
      return result;
    }
    v90 = *(_OWORD *)(a1 + 160);
    v93 = *(_OWORD *)(a1 + 176);
    v96 = *(_QWORD *)(a1 + 192);
    v78 = *(_OWORD *)(a1 + 96);
    v81 = *(_OWORD *)(a1 + 112);
    v84 = *(_OWORD *)(a1 + 128);
    v87 = *(_OWORD *)(a1 + 144);
    v66 = *(_OWORD *)(a1 + 32);
    v69 = *(_OWORD *)(a1 + 48);
    v72 = *(_OWORD *)(a1 + 64);
    v75 = *(_OWORD *)(a1 + 80);
    v60 = *(_OWORD *)a1;
    v63 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v49 = *(_OWORD *)(a2 + 16);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v51;
    *(_OWORD *)(a1 + 16) = v49;
    *(_OWORD *)(a1 + 32) = v50;
    v52 = *(_OWORD *)(a2 + 80);
    v53 = *(_OWORD *)(a2 + 96);
    v54 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v54;
    *(_OWORD *)(a1 + 80) = v52;
    *(_OWORD *)(a1 + 96) = v53;
    v55 = *(_OWORD *)(a2 + 144);
    v56 = *(_OWORD *)(a2 + 160);
    v57 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v56;
    *(_OWORD *)(a1 + 176) = v57;
    *(_OWORD *)(a1 + 144) = v55;
    *(_OWORD *)(a2 + 160) = v90;
    *(_OWORD *)(a2 + 176) = v93;
    *(_QWORD *)(a2 + 192) = v96;
    *(_OWORD *)(a2 + 96) = v78;
    *(_OWORD *)(a2 + 112) = v81;
    *(_OWORD *)(a2 + 128) = v84;
    *(_OWORD *)(a2 + 144) = v87;
    *(_OWORD *)(a2 + 32) = v66;
    *(_OWORD *)(a2 + 48) = v69;
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 80) = v75;
    result = v63;
    *(_OWORD *)a2 = v60;
    *(__n128 *)(a2 + 16) = v63;
    return result;
  }
  v12 = *(_QWORD *)(a4 + 136);
  v13 = *(_QWORD *)(a3 + 136);
  v14 = v12 < v13;
  if (v12 == v13)
  {
    v15 = *(_QWORD *)(a4 + 144);
    v16 = *(_QWORD *)(a3 + 144);
    v14 = v15 < v16;
    if (v15 == v16)
      v14 = *(_OWORD *)(a4 + 152) < *(_OWORD *)(a3 + 152);
  }
  if (v14
    || *(_QWORD *)(a4 + 152) == *(_QWORD *)(a3 + 152)
    && *(_QWORD *)(a4 + 144) == *(_QWORD *)(a3 + 144)
    && v12 == v13
    && *(_QWORD *)(a4 + 160) == *(_QWORD *)(a3 + 160)
    && sub_100B8D030(a4, a3, v8))
  {
    goto LABEL_13;
  }
  return result;
}

__n128 sub_100B8D830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  result.n128_u64[0] = sub_100B8D3F8(a1, a2, a3, a4).n128_u64[0];
  v12 = *(_QWORD *)(a5 + 128);
  v13 = *(_QWORD *)(a4 + 128);
  if (v12 != v13)
  {
    if (v12 >= v13)
      return result;
LABEL_13:
    v116 = *(_OWORD *)(a4 + 160);
    v120 = *(_OWORD *)(a4 + 176);
    v124 = *(_QWORD *)(a4 + 192);
    v100 = *(_OWORD *)(a4 + 96);
    v104 = *(_OWORD *)(a4 + 112);
    v108 = *(_OWORD *)(a4 + 128);
    v112 = *(_OWORD *)(a4 + 144);
    v84 = *(_OWORD *)(a4 + 32);
    v88 = *(_OWORD *)(a4 + 48);
    v92 = *(_OWORD *)(a4 + 64);
    v96 = *(_OWORD *)(a4 + 80);
    v76 = *(_OWORD *)a4;
    v80 = *(__n128 *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v19 = *(_OWORD *)(a5 + 16);
    v20 = *(_OWORD *)(a5 + 32);
    v21 = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v21;
    *(_OWORD *)(a4 + 16) = v19;
    *(_OWORD *)(a4 + 32) = v20;
    v22 = *(_OWORD *)(a5 + 80);
    v23 = *(_OWORD *)(a5 + 96);
    v24 = *(_OWORD *)(a5 + 128);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = v24;
    *(_OWORD *)(a4 + 80) = v22;
    *(_OWORD *)(a4 + 96) = v23;
    v25 = *(_OWORD *)(a5 + 144);
    v26 = *(_OWORD *)(a5 + 160);
    v27 = *(_OWORD *)(a5 + 176);
    *(_QWORD *)(a4 + 192) = *(_QWORD *)(a5 + 192);
    *(_OWORD *)(a4 + 160) = v26;
    *(_OWORD *)(a4 + 176) = v27;
    *(_OWORD *)(a4 + 144) = v25;
    *(_OWORD *)(a5 + 160) = v116;
    *(_OWORD *)(a5 + 176) = v120;
    *(_QWORD *)(a5 + 192) = v124;
    *(_OWORD *)(a5 + 96) = v100;
    *(_OWORD *)(a5 + 112) = v104;
    *(_OWORD *)(a5 + 128) = v108;
    *(_OWORD *)(a5 + 144) = v112;
    *(_OWORD *)(a5 + 32) = v84;
    *(_OWORD *)(a5 + 48) = v88;
    *(_OWORD *)(a5 + 64) = v92;
    *(_OWORD *)(a5 + 80) = v96;
    result = v80;
    *(_OWORD *)a5 = v76;
    *(__n128 *)(a5 + 16) = v80;
    v28 = *(_QWORD *)(a4 + 128);
    v29 = *(_QWORD *)(a3 + 128);
    if (v28 == v29)
    {
      v30 = *(_QWORD *)(a4 + 136);
      v31 = *(_QWORD *)(a3 + 136);
      v32 = v30 < v31;
      if (v30 == v31)
      {
        v33 = *(_QWORD *)(a4 + 144);
        v34 = *(_QWORD *)(a3 + 144);
        v32 = v33 < v34;
        if (v33 == v34)
          v32 = *(_OWORD *)(a4 + 152) < *(_OWORD *)(a3 + 152);
      }
      if (!v32
        && (*(_QWORD *)(a4 + 152) != *(_QWORD *)(a3 + 152)
         || *(_QWORD *)(a4 + 144) != *(_QWORD *)(a3 + 144)
         || v30 != v31
         || *(_QWORD *)(a4 + 160) != *(_QWORD *)(a3 + 160)
         || !sub_100B8D030(a4, a3, v10)))
      {
        return result;
      }
    }
    else if (v28 >= v29)
    {
      return result;
    }
    v117 = *(_OWORD *)(a3 + 160);
    v121 = *(_OWORD *)(a3 + 176);
    v125 = *(_QWORD *)(a3 + 192);
    v101 = *(_OWORD *)(a3 + 96);
    v105 = *(_OWORD *)(a3 + 112);
    v109 = *(_OWORD *)(a3 + 128);
    v113 = *(_OWORD *)(a3 + 144);
    v85 = *(_OWORD *)(a3 + 32);
    v89 = *(_OWORD *)(a3 + 48);
    v93 = *(_OWORD *)(a3 + 64);
    v97 = *(_OWORD *)(a3 + 80);
    v77 = *(_OWORD *)a3;
    v81 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v35 = *(_OWORD *)(a4 + 16);
    v36 = *(_OWORD *)(a4 + 32);
    v37 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v37;
    *(_OWORD *)(a3 + 16) = v35;
    *(_OWORD *)(a3 + 32) = v36;
    v38 = *(_OWORD *)(a4 + 80);
    v39 = *(_OWORD *)(a4 + 96);
    v40 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v40;
    *(_OWORD *)(a3 + 80) = v38;
    *(_OWORD *)(a3 + 96) = v39;
    v41 = *(_OWORD *)(a4 + 144);
    v42 = *(_OWORD *)(a4 + 160);
    v43 = *(_OWORD *)(a4 + 176);
    *(_QWORD *)(a3 + 192) = *(_QWORD *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v42;
    *(_OWORD *)(a3 + 176) = v43;
    *(_OWORD *)(a3 + 144) = v41;
    *(_OWORD *)(a4 + 160) = v117;
    *(_OWORD *)(a4 + 176) = v121;
    *(_QWORD *)(a4 + 192) = v125;
    *(_OWORD *)(a4 + 96) = v101;
    *(_OWORD *)(a4 + 112) = v105;
    *(_OWORD *)(a4 + 128) = v109;
    *(_OWORD *)(a4 + 144) = v113;
    *(_OWORD *)(a4 + 32) = v85;
    *(_OWORD *)(a4 + 48) = v89;
    *(_OWORD *)(a4 + 64) = v93;
    *(_OWORD *)(a4 + 80) = v97;
    result = v81;
    *(_OWORD *)a4 = v77;
    *(__n128 *)(a4 + 16) = v81;
    v44 = *(_QWORD *)(a3 + 128);
    v45 = *(_QWORD *)(a2 + 128);
    if (v44 == v45)
    {
      v46 = *(_QWORD *)(a3 + 136);
      v47 = *(_QWORD *)(a2 + 136);
      v48 = v46 < v47;
      if (v46 == v47)
      {
        v49 = *(_QWORD *)(a3 + 144);
        v50 = *(_QWORD *)(a2 + 144);
        v48 = v49 < v50;
        if (v49 == v50)
          v48 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
      }
      if (!v48
        && (*(_QWORD *)(a3 + 152) != *(_QWORD *)(a2 + 152)
         || *(_QWORD *)(a3 + 144) != *(_QWORD *)(a2 + 144)
         || v46 != v47
         || *(_QWORD *)(a3 + 160) != *(_QWORD *)(a2 + 160)
         || !sub_100B8D030(a3, a2, v10)))
      {
        return result;
      }
    }
    else if (v44 >= v45)
    {
      return result;
    }
    v118 = *(_OWORD *)(a2 + 160);
    v122 = *(_OWORD *)(a2 + 176);
    v126 = *(_QWORD *)(a2 + 192);
    v102 = *(_OWORD *)(a2 + 96);
    v106 = *(_OWORD *)(a2 + 112);
    v110 = *(_OWORD *)(a2 + 128);
    v114 = *(_OWORD *)(a2 + 144);
    v86 = *(_OWORD *)(a2 + 32);
    v90 = *(_OWORD *)(a2 + 48);
    v94 = *(_OWORD *)(a2 + 64);
    v98 = *(_OWORD *)(a2 + 80);
    v78 = *(_OWORD *)a2;
    v82 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v51 = *(_OWORD *)(a3 + 16);
    v52 = *(_OWORD *)(a3 + 32);
    v53 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v53;
    *(_OWORD *)(a2 + 16) = v51;
    *(_OWORD *)(a2 + 32) = v52;
    v54 = *(_OWORD *)(a3 + 80);
    v55 = *(_OWORD *)(a3 + 96);
    v56 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v56;
    *(_OWORD *)(a2 + 80) = v54;
    *(_OWORD *)(a2 + 96) = v55;
    v57 = *(_OWORD *)(a3 + 144);
    v58 = *(_OWORD *)(a3 + 160);
    v59 = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v58;
    *(_OWORD *)(a2 + 176) = v59;
    *(_OWORD *)(a2 + 144) = v57;
    *(_OWORD *)(a3 + 160) = v118;
    *(_OWORD *)(a3 + 176) = v122;
    *(_QWORD *)(a3 + 192) = v126;
    *(_OWORD *)(a3 + 96) = v102;
    *(_OWORD *)(a3 + 112) = v106;
    *(_OWORD *)(a3 + 128) = v110;
    *(_OWORD *)(a3 + 144) = v114;
    *(_OWORD *)(a3 + 32) = v86;
    *(_OWORD *)(a3 + 48) = v90;
    *(_OWORD *)(a3 + 64) = v94;
    *(_OWORD *)(a3 + 80) = v98;
    result = v82;
    *(_OWORD *)a3 = v78;
    *(__n128 *)(a3 + 16) = v82;
    v60 = *(_QWORD *)(a2 + 128);
    v61 = *(_QWORD *)(a1 + 128);
    if (v60 == v61)
    {
      v62 = *(_QWORD *)(a2 + 136);
      v63 = *(_QWORD *)(a1 + 136);
      v64 = v62 < v63;
      if (v62 == v63)
      {
        v65 = *(_QWORD *)(a2 + 144);
        v66 = *(_QWORD *)(a1 + 144);
        v64 = v65 < v66;
        if (v65 == v66)
          v64 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
      }
      if (!v64
        && (*(_QWORD *)(a2 + 152) != *(_QWORD *)(a1 + 152)
         || *(_QWORD *)(a2 + 144) != *(_QWORD *)(a1 + 144)
         || v62 != v63
         || *(_QWORD *)(a2 + 160) != *(_QWORD *)(a1 + 160)
         || !sub_100B8D030(a2, a1, v10)))
      {
        return result;
      }
    }
    else if (v60 >= v61)
    {
      return result;
    }
    v119 = *(_OWORD *)(a1 + 160);
    v123 = *(_OWORD *)(a1 + 176);
    v127 = *(_QWORD *)(a1 + 192);
    v103 = *(_OWORD *)(a1 + 96);
    v107 = *(_OWORD *)(a1 + 112);
    v111 = *(_OWORD *)(a1 + 128);
    v115 = *(_OWORD *)(a1 + 144);
    v87 = *(_OWORD *)(a1 + 32);
    v91 = *(_OWORD *)(a1 + 48);
    v95 = *(_OWORD *)(a1 + 64);
    v99 = *(_OWORD *)(a1 + 80);
    v79 = *(_OWORD *)a1;
    v83 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v67 = *(_OWORD *)(a2 + 16);
    v68 = *(_OWORD *)(a2 + 32);
    v69 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v69;
    *(_OWORD *)(a1 + 16) = v67;
    *(_OWORD *)(a1 + 32) = v68;
    v70 = *(_OWORD *)(a2 + 80);
    v71 = *(_OWORD *)(a2 + 96);
    v72 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v72;
    *(_OWORD *)(a1 + 80) = v70;
    *(_OWORD *)(a1 + 96) = v71;
    v73 = *(_OWORD *)(a2 + 144);
    v74 = *(_OWORD *)(a2 + 160);
    v75 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v74;
    *(_OWORD *)(a1 + 176) = v75;
    *(_OWORD *)(a1 + 144) = v73;
    *(_OWORD *)(a2 + 160) = v119;
    *(_OWORD *)(a2 + 176) = v123;
    *(_QWORD *)(a2 + 192) = v127;
    *(_OWORD *)(a2 + 96) = v103;
    *(_OWORD *)(a2 + 112) = v107;
    *(_OWORD *)(a2 + 128) = v111;
    *(_OWORD *)(a2 + 144) = v115;
    *(_OWORD *)(a2 + 32) = v87;
    *(_OWORD *)(a2 + 48) = v91;
    *(_OWORD *)(a2 + 64) = v95;
    *(_OWORD *)(a2 + 80) = v99;
    result = v83;
    *(_OWORD *)a2 = v79;
    *(__n128 *)(a2 + 16) = v83;
    return result;
  }
  v14 = *(_QWORD *)(a5 + 136);
  v15 = *(_QWORD *)(a4 + 136);
  v16 = v14 < v15;
  if (v14 == v15)
  {
    v17 = *(_QWORD *)(a5 + 144);
    v18 = *(_QWORD *)(a4 + 144);
    v16 = v17 < v18;
    if (v17 == v18)
      v16 = *(_OWORD *)(a5 + 152) < *(_OWORD *)(a4 + 152);
  }
  if (v16
    || *(_QWORD *)(a5 + 152) == *(_QWORD *)(a4 + 152)
    && *(_QWORD *)(a5 + 144) == *(_QWORD *)(a4 + 144)
    && v14 == v15
    && *(_QWORD *)(a5 + 160) == *(_QWORD *)(a4 + 160)
    && sub_100B8D030(a5, a4, v10))
  {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_100B8DDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v4 = a3;
  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) / 200;
    if (a2 - a1 >= 201)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 200 * v10;
      do
      {
        sub_100B8E16C(a1, a4, v9, v12);
        v12 -= 200;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != v4)
    {
      v14 = a2;
      while (1)
      {
        v15 = *(_QWORD *)(v14 + 128);
        v16 = *(_QWORD *)(a1 + 128);
        if (v15 == v16)
          break;
        if (v15 < v16)
          goto LABEL_19;
LABEL_20:
        v14 += 200;
        if (v14 == v4)
        {
          v13 = v4;
          goto LABEL_22;
        }
      }
      v17 = *(_QWORD *)(v14 + 136);
      v18 = *(_QWORD *)(a1 + 136);
      v19 = v17 < v18;
      if (v17 == v18)
      {
        v20 = *(_QWORD *)(v14 + 144);
        v21 = *(_QWORD *)(a1 + 144);
        v19 = v20 < v21;
        if (v20 == v21)
          v19 = *(_OWORD *)(v14 + 152) < *(_OWORD *)(a1 + 152);
      }
      if (!v19
        && (*(_QWORD *)(v14 + 152) != *(_QWORD *)(a1 + 152)
         || *(_QWORD *)(v14 + 144) != *(_QWORD *)(a1 + 144)
         || v17 != v18
         || *(_QWORD *)(v14 + 160) != *(_QWORD *)(a1 + 160)
         || !sub_100B8D030(v14, a1, a3)))
      {
        goto LABEL_20;
      }
LABEL_19:
      v64 = *(_OWORD *)(v14 + 160);
      v66 = *(_OWORD *)(v14 + 176);
      v68 = *(_QWORD *)(v14 + 192);
      v56 = *(_OWORD *)(v14 + 96);
      v58 = *(_OWORD *)(v14 + 112);
      v60 = *(_OWORD *)(v14 + 128);
      v62 = *(_OWORD *)(v14 + 144);
      v48 = *(_OWORD *)(v14 + 32);
      v50 = *(_OWORD *)(v14 + 48);
      v52 = *(_OWORD *)(v14 + 64);
      v54 = *(_OWORD *)(v14 + 80);
      v44 = *(_OWORD *)v14;
      v46 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v14 = *(_OWORD *)a1;
      v22 = *(_OWORD *)(a1 + 16);
      v23 = *(_OWORD *)(a1 + 32);
      v24 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v14 + 64) = v24;
      *(_OWORD *)(v14 + 16) = v22;
      *(_OWORD *)(v14 + 32) = v23;
      v25 = *(_OWORD *)(a1 + 80);
      v26 = *(_OWORD *)(a1 + 96);
      v27 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v14 + 112) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v14 + 128) = v27;
      *(_OWORD *)(v14 + 80) = v25;
      *(_OWORD *)(v14 + 96) = v26;
      v28 = *(_OWORD *)(a1 + 144);
      v29 = *(_OWORD *)(a1 + 160);
      v30 = *(_OWORD *)(a1 + 176);
      *(_QWORD *)(v14 + 192) = *(_QWORD *)(a1 + 192);
      *(_OWORD *)(v14 + 160) = v29;
      *(_OWORD *)(v14 + 176) = v30;
      *(_OWORD *)(v14 + 144) = v28;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v66;
      *(_QWORD *)(a1 + 192) = v68;
      *(_OWORD *)(a1 + 96) = v56;
      *(_OWORD *)(a1 + 112) = v58;
      *(_OWORD *)(a1 + 128) = v60;
      *(_OWORD *)(a1 + 144) = v62;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v50;
      *(_OWORD *)(a1 + 64) = v52;
      *(_OWORD *)(a1 + 80) = v54;
      *(_OWORD *)a1 = v44;
      *(_OWORD *)(a1 + 16) = v46;
      sub_100B8E16C(a1, a4, v9, a1);
      goto LABEL_20;
    }
LABEL_22:
    if (v8 >= 201)
    {
      v31 = v8 / 0xC8uLL;
      v32 = a2 - 200;
      do
      {
        v65 = *(_OWORD *)(a1 + 160);
        v67 = *(_OWORD *)(a1 + 176);
        v69 = *(_QWORD *)(a1 + 192);
        v57 = *(_OWORD *)(a1 + 96);
        v59 = *(_OWORD *)(a1 + 112);
        v61 = *(_OWORD *)(a1 + 128);
        v63 = *(_OWORD *)(a1 + 144);
        v49 = *(_OWORD *)(a1 + 32);
        v51 = *(_OWORD *)(a1 + 48);
        v53 = *(_OWORD *)(a1 + 64);
        v55 = *(_OWORD *)(a1 + 80);
        v45 = *(_OWORD *)a1;
        v47 = *(_OWORD *)(a1 + 16);
        v33 = sub_100B8E628(a1, a4, v31);
        if (v32 == v33)
        {
          *(_OWORD *)(v33 + 160) = v65;
          *(_OWORD *)(v33 + 176) = v67;
          *(_QWORD *)(v33 + 192) = v69;
          *(_OWORD *)(v33 + 96) = v57;
          *(_OWORD *)(v33 + 112) = v59;
          *(_OWORD *)(v33 + 128) = v61;
          *(_OWORD *)(v33 + 144) = v63;
          *(_OWORD *)(v33 + 32) = v49;
          *(_OWORD *)(v33 + 48) = v51;
          *(_OWORD *)(v33 + 64) = v53;
          *(_OWORD *)(v33 + 80) = v55;
          *(_OWORD *)v33 = v45;
          *(_OWORD *)(v33 + 16) = v47;
        }
        else
        {
          *(_OWORD *)v33 = *(_OWORD *)v32;
          v34 = *(_OWORD *)(v32 + 16);
          v35 = *(_OWORD *)(v32 + 32);
          v36 = *(_OWORD *)(v32 + 64);
          *(_OWORD *)(v33 + 48) = *(_OWORD *)(v32 + 48);
          *(_OWORD *)(v33 + 64) = v36;
          *(_OWORD *)(v33 + 16) = v34;
          *(_OWORD *)(v33 + 32) = v35;
          v37 = *(_OWORD *)(v32 + 80);
          v38 = *(_OWORD *)(v32 + 96);
          v39 = *(_OWORD *)(v32 + 128);
          *(_OWORD *)(v33 + 112) = *(_OWORD *)(v32 + 112);
          *(_OWORD *)(v33 + 128) = v39;
          *(_OWORD *)(v33 + 80) = v37;
          *(_OWORD *)(v33 + 96) = v38;
          v40 = *(_OWORD *)(v32 + 144);
          v41 = *(_OWORD *)(v32 + 160);
          v42 = *(_OWORD *)(v32 + 176);
          *(_QWORD *)(v33 + 192) = *(_QWORD *)(v32 + 192);
          *(_OWORD *)(v33 + 160) = v41;
          *(_OWORD *)(v33 + 176) = v42;
          *(_OWORD *)(v33 + 144) = v40;
          *(_OWORD *)(v32 + 160) = v65;
          *(_OWORD *)(v32 + 176) = v67;
          *(_QWORD *)(v32 + 192) = v69;
          *(_OWORD *)(v32 + 96) = v57;
          *(_OWORD *)(v32 + 112) = v59;
          *(_OWORD *)(v32 + 128) = v61;
          *(_OWORD *)(v32 + 144) = v63;
          *(_OWORD *)(v32 + 32) = v49;
          *(_OWORD *)(v32 + 48) = v51;
          *(_OWORD *)(v32 + 64) = v53;
          *(_OWORD *)(v32 + 80) = v55;
          *(_OWORD *)v32 = v45;
          *(_OWORD *)(v32 + 16) = v47;
          sub_100B8E7B4(a1, v33 + 200, a4, 0x8F5C28F5C28F5C29 * ((v33 + 200 - a1) >> 3));
        }
        v32 -= 200;
        v19 = v31-- <= 2;
      }
      while (!v19);
    }
    return v13;
  }
  return v4;
}

__n128 sub_100B8E16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  __n128 result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  BOOL v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __n128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v6 = a3 - 2;
  if (a3 < 2)
    return result;
  v92 = v4;
  v93 = v5;
  v9 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < (uint64_t)(0x8F5C28F5C28F5C29 * ((a4 - a1) >> 3)))
    return result;
  v11 = (0x1EB851EB851EB852 * ((a4 - a1) >> 3)) | 1;
  v12 = a1 + 200 * v11;
  v13 = 0x1EB851EB851EB852 * ((a4 - a1) >> 3) + 2;
  if (v13 >= a3)
    goto LABEL_20;
  v14 = *(_QWORD *)(a1 + 200 * v11 + 128);
  v15 = *(_QWORD *)(v12 + 328);
  if (v14 == v15)
  {
    v16 = *(_QWORD *)(a1 + 200 * v11 + 136);
    v17 = *(_QWORD *)(v12 + 336);
    v18 = v16 < v17;
    if (v16 == v17)
    {
      v19 = *(_QWORD *)(a1 + 200 * v11 + 144);
      v20 = *(_QWORD *)(v12 + 344);
      v18 = v19 < v20;
      if (v19 == v20)
        v18 = *(_OWORD *)(a1 + 200 * v11 + 152) < *(_OWORD *)(v12 + 352);
    }
    if (!v18)
    {
      if (*(_QWORD *)(a1 + 200 * v11 + 152) != *(_QWORD *)(v12 + 352)
        || *(_QWORD *)(a1 + 200 * v11 + 144) != *(_QWORD *)(v12 + 344))
      {
        goto LABEL_20;
      }
      v21 = v16 == v17 && *(_QWORD *)(a1 + 200 * v11 + 160) == *(_QWORD *)(v12 + 360);
      if (!v21 || !sub_100B8D030(a1 + 200 * v11, v12 + 200, a3))
        goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v14 < v15)
  {
LABEL_19:
    v12 += 200;
    v11 = v13;
  }
LABEL_20:
  v23 = *(_QWORD *)(v12 + 128);
  v24 = *(_QWORD *)(a4 + 128);
  if (v23 == v24)
  {
    v25 = *(_QWORD *)(v12 + 136);
    v26 = *(_QWORD *)(a4 + 136);
    v27 = v25 < v26;
    if (v25 == v26)
    {
      v28 = *(_QWORD *)(v12 + 144);
      v29 = *(_QWORD *)(a4 + 144);
      v27 = v28 < v29;
      if (v28 == v29)
        v27 = *(_OWORD *)(v12 + 152) < *(_OWORD *)(a4 + 152);
    }
    if (v27)
      return result;
    if (*(_QWORD *)(v12 + 152) == *(_QWORD *)(a4 + 152) && *(_QWORD *)(v12 + 144) == *(_QWORD *)(a4 + 144))
    {
      v30 = v25 == v26 && *(_QWORD *)(v12 + 160) == *(_QWORD *)(a4 + 160);
      if (v30 && (sub_100B8D030(v12, a4, a3) & 1) != 0)
        return result;
    }
  }
  else if (v23 < v24)
  {
    return result;
  }
  v31 = *(_OWORD *)(a4 + 176);
  v89 = *(_OWORD *)(a4 + 160);
  v90 = v31;
  v91 = *(_QWORD *)(a4 + 192);
  v32 = *(_OWORD *)(a4 + 112);
  v85 = *(_OWORD *)(a4 + 96);
  v86 = v32;
  v33 = *(__n128 *)(a4 + 144);
  v87 = *(_OWORD *)(a4 + 128);
  v88 = v33;
  v34 = *(_OWORD *)(a4 + 48);
  v81 = *(_OWORD *)(a4 + 32);
  v82 = v34;
  v35 = *(_OWORD *)(a4 + 80);
  v83 = *(_OWORD *)(a4 + 64);
  v84 = v35;
  v36 = *(_OWORD *)(a4 + 16);
  v79 = *(_OWORD *)a4;
  v80 = v36;
  *(_OWORD *)a4 = *(_OWORD *)v12;
  v37 = *(_OWORD *)(v12 + 16);
  v38 = *(_OWORD *)(v12 + 32);
  v39 = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(a4 + 64) = v39;
  *(_OWORD *)(a4 + 16) = v37;
  *(_OWORD *)(a4 + 32) = v38;
  v40 = *(_OWORD *)(v12 + 80);
  v41 = *(_OWORD *)(v12 + 96);
  v42 = *(_OWORD *)(v12 + 128);
  *(_OWORD *)(a4 + 112) = *(_OWORD *)(v12 + 112);
  *(_OWORD *)(a4 + 128) = v42;
  *(_OWORD *)(a4 + 80) = v40;
  *(_OWORD *)(a4 + 96) = v41;
  v43 = *(_OWORD *)(v12 + 144);
  v44 = *(_OWORD *)(v12 + 160);
  v45 = *(_OWORD *)(v12 + 176);
  *(_QWORD *)(a4 + 192) = *(_QWORD *)(v12 + 192);
  *(_OWORD *)(a4 + 160) = v44;
  *(_OWORD *)(a4 + 176) = v45;
  *(_OWORD *)(a4 + 144) = v43;
  if (v9 < v11)
    goto LABEL_70;
  while (1)
  {
    v46 = v12;
    v47 = 2 * v11;
    v11 = (2 * v11) | 1;
    v12 = a1 + 200 * v11;
    v48 = v47 + 2;
    if (v47 + 2 >= a3)
      goto LABEL_53;
    v49 = *(_QWORD *)(a1 + 200 * v11 + 128);
    v50 = *(_QWORD *)(v12 + 328);
    if (v49 != v50)
    {
      if (v49 >= v50)
        goto LABEL_53;
LABEL_52:
      v12 += 200;
      v11 = v48;
      goto LABEL_53;
    }
    v51 = *(_QWORD *)(a1 + 200 * v11 + 136);
    v52 = *(_QWORD *)(v12 + 336);
    v53 = v51 < v52;
    if (v51 == v52)
    {
      v54 = *(_QWORD *)(a1 + 200 * v11 + 144);
      v55 = *(_QWORD *)(v12 + 344);
      v53 = v54 < v55;
      if (v54 == v55)
        v53 = *(_OWORD *)(a1 + 200 * v11 + 152) < *(_OWORD *)(v12 + 352);
    }
    if (v53)
      goto LABEL_52;
    if (*(_QWORD *)(a1 + 200 * v11 + 152) == *(_QWORD *)(v12 + 352)
      && *(_QWORD *)(a1 + 200 * v11 + 144) == *(_QWORD *)(v12 + 344))
    {
      v56 = v51 == v52 && *(_QWORD *)(a1 + 200 * v11 + 160) == *(_QWORD *)(v12 + 360);
      if (v56 && sub_100B8D030(a1 + 200 * v11, v12 + 200, a3))
        goto LABEL_52;
    }
LABEL_53:
    v57 = *(_QWORD *)(v12 + 128);
    if (v57 == (_QWORD)v87)
      break;
    if (v57 < (uint64_t)v87)
      goto LABEL_69;
LABEL_67:
    *(_OWORD *)v46 = *(_OWORD *)v12;
    v62 = *(_OWORD *)(v12 + 16);
    v63 = *(_OWORD *)(v12 + 32);
    v64 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v46 + 48) = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(v46 + 64) = v64;
    *(_OWORD *)(v46 + 16) = v62;
    *(_OWORD *)(v46 + 32) = v63;
    v65 = *(_OWORD *)(v12 + 80);
    v66 = *(_OWORD *)(v12 + 96);
    v67 = *(_OWORD *)(v12 + 128);
    *(_OWORD *)(v46 + 112) = *(_OWORD *)(v12 + 112);
    *(_OWORD *)(v46 + 128) = v67;
    *(_OWORD *)(v46 + 80) = v65;
    *(_OWORD *)(v46 + 96) = v66;
    v68 = *(_OWORD *)(v12 + 144);
    v69 = *(_OWORD *)(v12 + 160);
    v70 = *(_OWORD *)(v12 + 176);
    *(_QWORD *)(v46 + 192) = *(_QWORD *)(v12 + 192);
    *(_OWORD *)(v46 + 160) = v69;
    *(_OWORD *)(v46 + 176) = v70;
    *(_OWORD *)(v46 + 144) = v68;
    if (v9 < v11)
      goto LABEL_70;
  }
  v58 = *(_QWORD *)(v12 + 136);
  v59 = v58 < *((_QWORD *)&v87 + 1);
  if (v58 == *((_QWORD *)&v87 + 1))
  {
    v60 = *(_QWORD *)(v12 + 144);
    v59 = v60 < (int64_t)v88.n128_u64[0];
    if (v60 == v88.n128_u64[0])
      v59 = *(_OWORD *)(v12 + 152) < (__int128)__PAIR128__(v89, v88.n128_u64[1]);
  }
  if (!v59)
  {
    if (*(_OWORD *)(v12 + 144) != *(_OWORD *)&v88)
      goto LABEL_67;
    v61 = v58 == *((_QWORD *)&v87 + 1) && *(_QWORD *)(v12 + 160) == (_QWORD)v89;
    if (!v61 || (sub_100B8D030(v12, (uint64_t)&v79, a3) & 1) == 0)
      goto LABEL_67;
  }
LABEL_69:
  v12 = v46;
LABEL_70:
  *(_OWORD *)v12 = v79;
  v71 = v80;
  v72 = v81;
  v73 = v83;
  *(_OWORD *)(v12 + 48) = v82;
  *(_OWORD *)(v12 + 64) = v73;
  *(_OWORD *)(v12 + 16) = v71;
  *(_OWORD *)(v12 + 32) = v72;
  v74 = v84;
  v75 = v85;
  v76 = v87;
  *(_OWORD *)(v12 + 112) = v86;
  *(_OWORD *)(v12 + 128) = v76;
  *(_OWORD *)(v12 + 80) = v74;
  *(_OWORD *)(v12 + 96) = v75;
  result = v88;
  v77 = v89;
  v78 = v90;
  *(_QWORD *)(v12 + 192) = v91;
  *(_OWORD *)(v12 + 160) = v77;
  *(_OWORD *)(v12 + 176) = v78;
  *(__n128 *)(v12 + 144) = result;
  return result;
}

uint64_t sub_100B8E628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    v9 = v5 + 1;
    a1 += 200 * (v5 + 1);
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 >= a3)
      goto LABEL_21;
    v12 = *(_QWORD *)(v8 + 200 * v9 + 128);
    v13 = *(_QWORD *)(a1 + 328);
    if (v12 != v13)
    {
      if (v12 >= v13)
        goto LABEL_21;
LABEL_20:
      a1 += 200;
      v5 = v11;
      goto LABEL_21;
    }
    v14 = *(_QWORD *)(v8 + 200 * v9 + 136);
    v15 = *(_QWORD *)(a1 + 336);
    v16 = v14 < v15;
    if (v14 == v15)
    {
      v17 = *(_QWORD *)(v8 + 200 * v9 + 144);
      v18 = *(_QWORD *)(a1 + 344);
      v16 = v17 < v18;
      if (v17 == v18)
        v16 = *(_OWORD *)(v8 + 200 * v9 + 152) < *(_OWORD *)(a1 + 352);
    }
    if (v16)
      goto LABEL_20;
    if (*(_QWORD *)(v8 + 200 * v9 + 152) == *(_QWORD *)(a1 + 352)
      && *(_QWORD *)(v8 + 200 * v9 + 144) == *(_QWORD *)(a1 + 344))
    {
      v19 = *(_QWORD *)(v8 + 200 * v9 + 160);
      v20 = v14 == v15 && v19 == *(_QWORD *)(a1 + 360);
      if (v20 && sub_100B8D030(a1, a1 + 200, a3))
        goto LABEL_20;
    }
LABEL_21:
    *(_OWORD *)v8 = *(_OWORD *)a1;
    v21 = *(_OWORD *)(a1 + 16);
    v22 = *(_OWORD *)(a1 + 32);
    v23 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v8 + 64) = v23;
    *(_OWORD *)(v8 + 16) = v21;
    *(_OWORD *)(v8 + 32) = v22;
    v24 = *(_OWORD *)(a1 + 80);
    v25 = *(_OWORD *)(a1 + 96);
    v26 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v8 + 112) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v8 + 128) = v26;
    *(_OWORD *)(v8 + 80) = v24;
    *(_OWORD *)(v8 + 96) = v25;
    v27 = *(_OWORD *)(a1 + 144);
    v28 = *(_OWORD *)(a1 + 160);
    v29 = *(_OWORD *)(a1 + 176);
    *(_QWORD *)(v8 + 192) = *(_QWORD *)(a1 + 192);
    *(_OWORD *)(v8 + 160) = v28;
    *(_OWORD *)(v8 + 176) = v29;
    *(_OWORD *)(v8 + 144) = v27;
  }
  while (v5 <= v7);
  return a1;
}

__n128 sub_100B8E7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __n128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v4 = a4 - 2;
  if (a4 < 2)
    return result;
  v6 = v4 >> 1;
  v7 = (__int128 *)(a1 + 200 * (v4 >> 1));
  v8 = (__int128 *)(a2 - 200);
  v9 = *((_QWORD *)v7 + 16);
  v10 = *(_QWORD *)(a2 - 72);
  if (v9 == v10)
  {
    v11 = *(_QWORD *)(a1 + 200 * v6 + 136);
    v12 = *(_QWORD *)(a2 - 64);
    v13 = v11 < v12;
    if (v11 == v12)
    {
      v14 = *(_QWORD *)(a1 + 200 * v6 + 144);
      v15 = *(_QWORD *)(a2 - 56);
      v13 = v14 < v15;
      if (v14 == v15)
        v13 = *(_OWORD *)(a1 + 200 * v6 + 152) < *(_OWORD *)(a2 - 48);
    }
    if (!v13)
    {
      if (*(_QWORD *)(a1 + 200 * v6 + 152) != *(_QWORD *)(a2 - 48)
        || *(_QWORD *)(a1 + 200 * v6 + 144) != *(_QWORD *)(a2 - 56))
      {
        return result;
      }
      v16 = v11 == v12 && *(_QWORD *)(a1 + 200 * v6 + 160) == *(_QWORD *)(a2 - 40);
      if (!v16 || !sub_100B8D030(a1 + 200 * (v4 >> 1), a2 - 200, a3))
        return result;
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  v18 = v8[11];
  v67 = v8[10];
  v68 = v18;
  v69 = *((_QWORD *)v8 + 24);
  v19 = v8[7];
  v63 = v8[6];
  v64 = v19;
  v20 = (__n128)v8[9];
  v65 = v8[8];
  v66 = v20;
  v21 = v8[3];
  v59 = v8[2];
  v60 = v21;
  v22 = v8[5];
  v61 = v8[4];
  v62 = v22;
  v23 = v8[1];
  v57 = *v8;
  v58 = v23;
  *v8 = *v7;
  v24 = v7[1];
  v25 = v7[2];
  v26 = v7[4];
  v8[3] = v7[3];
  v8[4] = v26;
  v8[1] = v24;
  v8[2] = v25;
  v27 = v7[5];
  v28 = v7[6];
  v29 = v7[8];
  v8[7] = v7[7];
  v8[8] = v29;
  v8[5] = v27;
  v8[6] = v28;
  v30 = v7[9];
  v31 = v7[10];
  v32 = v7[11];
  *((_QWORD *)v8 + 24) = *((_QWORD *)v7 + 24);
  v8[10] = v31;
  v8[11] = v32;
  v8[9] = v30;
  if (v4 < 2)
    goto LABEL_35;
  while (1)
  {
    v33 = v7;
    v34 = v6 - 1;
    v6 = (v6 - 1) >> 1;
    v7 = (__int128 *)(a1 + 200 * v6);
    v35 = *((_QWORD *)v7 + 16);
    if (v35 == (_QWORD)v65)
      break;
    if (v35 >= (uint64_t)v65)
      goto LABEL_34;
LABEL_32:
    *v33 = *v7;
    v40 = v7[1];
    v41 = v7[2];
    v42 = v7[4];
    v33[3] = v7[3];
    v33[4] = v42;
    v33[1] = v40;
    v33[2] = v41;
    v43 = v7[5];
    v44 = v7[6];
    v45 = v7[8];
    v33[7] = v7[7];
    v33[8] = v45;
    v33[5] = v43;
    v33[6] = v44;
    v46 = v7[9];
    v47 = v7[10];
    v48 = v7[11];
    *((_QWORD *)v33 + 24) = *((_QWORD *)v7 + 24);
    v33[10] = v47;
    v33[11] = v48;
    v33[9] = v46;
    if (v34 <= 1)
      goto LABEL_35;
  }
  v36 = *(_QWORD *)(a1 + 200 * v6 + 136);
  v37 = v36 < *((_QWORD *)&v65 + 1);
  if (v36 == *((_QWORD *)&v65 + 1))
  {
    v38 = *(_QWORD *)(a1 + 200 * v6 + 144);
    v37 = v38 < (int64_t)v66.n128_u64[0];
    if (v38 == v66.n128_u64[0])
      v37 = *(_OWORD *)(a1 + 200 * v6 + 152) < (__int128)__PAIR128__(v67, v66.n128_u64[1]);
  }
  if (v37)
    goto LABEL_32;
  if (*(_OWORD *)(a1 + 200 * v6 + 144) == *(_OWORD *)&v66)
  {
    v39 = v36 == *((_QWORD *)&v65 + 1) && *(_QWORD *)(a1 + 200 * v6 + 160) == (_QWORD)v67;
    if (v39 && sub_100B8D030(a1 + 200 * v6, (uint64_t)&v57, a3))
      goto LABEL_32;
  }
LABEL_34:
  v7 = v33;
LABEL_35:
  *v7 = v57;
  v49 = v58;
  v50 = v59;
  v51 = v61;
  v7[3] = v60;
  v7[4] = v51;
  v7[1] = v49;
  v7[2] = v50;
  v52 = v62;
  v53 = v63;
  v54 = v65;
  v7[7] = v64;
  v7[8] = v54;
  v7[5] = v52;
  v7[6] = v53;
  result = v66;
  v55 = v67;
  v56 = v68;
  *((_QWORD *)v7 + 24) = v69;
  v7[10] = v55;
  v7[11] = v56;
  v7[9] = (__int128)result;
  return result;
}

uint64_t sub_100B8EAB8(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = *(_DWORD *)(a3 + 120);
  if ((v3 - 5) >= 0xFFFFFFFC)
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = !*(_QWORD *)result
      || *(_QWORD *)(a3 + 136) != *(_QWORD *)(v7 + 8)
      || *(_QWORD *)(a3 + 144) != *(_QWORD *)(v7 + 16);
    *(_QWORD *)result = a3 + 128;
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      if (*(_BYTE *)(v6 + 21))
      {
        if (v8 || (result = sub_100B8EC4C(result, a3), v3 != 1) || (result & 1) == 0)
          *(_BYTE *)(v6 + 21) = 0;
      }
      if (*(_BYTE *)(v6 + 20))
      {
        if (v8 || (result = sub_100B8EC4C(*(_QWORD *)(v6 + 8), a3), (result & 1) == 0))
        {
          if (*a2 - 58 <= 0xFFFFFFF7)
            *a2 = 50;
          if (a2[1] - 58 <= 0xFFFFFFF6)
            a2[1] = 49;
        }
        else if (v3 == 2)
        {
          goto LABEL_25;
        }
        *(_BYTE *)(v6 + 20) = 0;
      }
    }
    if (v3 != 2)
    {
      if (v3 == 1)
        *(_BYTE *)(v6 + 21) = 1;
      goto LABEL_27;
    }
LABEL_25:
    if (*(_DWORD *)(a3 + 40) != 2)
      *(_BYTE *)(v6 + 20) = 1;
LABEL_27:
    *(_QWORD *)(v6 + 8) = a3;
    *(_DWORD *)(v6 + 16) = v3;
  }
  return result;
}

uint64_t sub_100B8EC00(uint64_t result, unsigned __int8 *a2)
{
  if (*(_BYTE *)(result + 21))
    *(_BYTE *)(result + 21) = 0;
  if (*(_BYTE *)(result + 20))
  {
    if (*a2 - 58 <= 0xFFFFFFF7)
      *a2 = 50;
    if (a2[1] - 58 <= 0xFFFFFFF6)
      a2[1] = 49;
    *(_BYTE *)(result + 20) = 0;
  }
  return result;
}

uint64_t sub_100B8EC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;

  if (*(_QWORD *)(a1 + 136) != *(_QWORD *)(a2 + 136) || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144))
    return 0;
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a2 + 152);
  if (v3 != v4)
  {
    v5 = *(double *)(a2 + 168);
    if (v5 == 0.0)
    {
      if (v3 + 1 != v4)
        return 0;
    }
    else
    {
      if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        return 0;
      v6 = fabs(v5);
      v7 = 2.22044605e-16;
      if (v6 >= 1.0)
        v7 = v6 * 2.22044605e-16;
      v8 = v3 + 1;
      if (v6 > v7 || v8 != v4)
        return 0;
    }
  }
  v10 = *(double *)a1;
  v23 = *(double *)(a1 + 8);
  v24 = v10;
  sub_100778A68(&v24, &v23, 1);
  v11 = v23;
  v12 = v24;
  v13 = *(double *)a2;
  v23 = *(double *)(a2 + 8);
  v24 = v13;
  sub_100778A68(&v24, &v23, 1);
  if (v12 == v24)
    goto LABEL_34;
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v15 = vabdd_f64(v12, v24);
    v16 = fabs(v12);
    v17 = fabs(v24);
    if (v16 >= v17)
      v17 = v16;
    v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v15 <= v18)
    {
LABEL_34:
      if (v11 == v23)
        return 1;
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v19 = vabdd_f64(v11, v23);
        v20 = fabs(v11);
        v21 = fabs(v23);
        if (v20 >= v21)
          v21 = v20;
        v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 <= v22)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100B8EE0C(uint64_t result)
{
  int v1;
  uint64_t v2;
  double *v3;
  double **v4;
  double *v5;
  double *v6;
  double *v7;
  int v8;
  BOOL v9;
  unsigned __int8 *v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v1 = *(_DWORD *)(result + 40);
  if (v1 == 7)
    return result;
  v2 = result;
  v3 = **(double ***)result;
  if (v3 == *(double **)(*(_QWORD *)result + 8))
    return result;
  v4 = *(double ***)(result + 8);
  v5 = *v4;
  v6 = v4[1];
  if ((unint64_t)((char *)v6 - (char *)*v4) < 0x40)
    goto LABEL_9;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      result = sub_100779378((uint64_t)&v12, v3, v5, v5 + 2, (uint64_t)&v13);
      if (!(_DWORD)result)
        break;
      v7 = v5 + 4;
      v5 += 2;
    }
    while (v7 != v6);
    if (!v15)
    {
      if ((_DWORD)v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!((_DWORD)v13 + HIDWORD(v13)))
          goto LABEL_8;
      }
      else if (!(_DWORD)v13)
      {
        goto LABEL_8;
      }
      v10 = *(unsigned __int8 **)(v2 + 24);
      if (*v10 - 58 <= 0xFFFFFFF7)
      {
        *v10 = 50;
        v10 = *(unsigned __int8 **)(v2 + 24);
      }
      v11 = *(_DWORD *)(v2 + 40) | 1;
      *(_DWORD *)(v2 + 40) = v11;
      if (v10[1] - 58 <= 0xFFFFFFF6)
      {
        v10[1] = 49;
        v11 = *(_DWORD *)(v2 + 40);
      }
      v8 = v11 | 4;
      goto LABEL_10;
    }
  }
LABEL_8:
  v1 = *(_DWORD *)(v2 + 40);
LABEL_9:
  v8 = v1 | 2;
LABEL_10:
  *(_DWORD *)(v2 + 40) = v8;
  v9 = v8 == 7 || *(_BYTE *)(*(_QWORD *)(v2 + 24) + 9) != 0;
  *(_BYTE *)(v2 + 16) = v9;
  return result;
}

uint64_t *sub_100B8EF70(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  char v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD **v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;

  *(_QWORD *)&v26 = *(_QWORD *)(a1 + 8) + *(_QWORD *)a1;
  *((_QWORD *)&v26 + 1) = a2;
  v3 = sub_100B8F3E8((uint64_t **)(a1 + 16), &v26, &v26);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 56);
    v24 = 0;
    v25 = 0;
    v23 = &v24;
    v6 = *(_QWORD **)(a1 + 48);
    if ((unint64_t)v6 >= v5)
    {
      v10 = *(_QWORD *)(a1 + 40);
      v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v10) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v10) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v29 = a1 + 56;
      if (v14)
      {
        v15 = (char *)sub_1002596A8(a1 + 56, v14);
        v16 = v23;
      }
      else
      {
        v15 = 0;
        v16 = &v24;
      }
      v18 = &v15[24 * v11];
      *(_QWORD *)&v26 = v15;
      *((_QWORD *)&v26 + 1) = v18;
      v28 = &v15[24 * v14];
      *(_QWORD *)v18 = v16;
      v19 = v24;
      *((_QWORD *)v18 + 1) = v24;
      v20 = v18 + 8;
      v21 = v25;
      *((_QWORD *)v18 + 2) = v25;
      if (v21)
      {
        v19[2] = v20;
        v23 = &v24;
        v24 = 0;
        v25 = 0;
      }
      else
      {
        *(_QWORD *)v18 = v20;
      }
      v27 = v18 + 24;
      sub_100B8F7B4((uint64_t *)(a1 + 40), &v26);
      v17 = *(_QWORD **)(a1 + 48);
      sub_100B8F95C((void **)&v26);
    }
    else
    {
      *v6 = &v24;
      v7 = v24;
      v6[1] = v24;
      v8 = v6 + 1;
      v9 = v25;
      v6[2] = v25;
      if (v9)
      {
        v7[2] = v8;
        v23 = &v24;
        v24 = 0;
        v25 = 0;
      }
      else
      {
        *v6 = v8;
      }
      v17 = v6 + 3;
    }
    *(_QWORD *)(a1 + 48) = v17;
    sub_100008848((uint64_t)&v23, v24);
    ++*(_QWORD *)(a1 + 8);
  }
  return v3;
}

void sub_100B8F128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *a12)
{
  sub_100B8F95C(&a12);
  sub_100008848((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100B8F150(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  void *v8[3];
  void *__p;
  void *v10;

  sub_100B8FC60(v8, a1[1] + *a1);
  v2 = (_QWORD *)a1[2];
  if (v2 == a1 + 3)
  {
LABEL_10:
    v6 = 0;
  }
  else
  {
    while (((*(_QWORD *)((char *)v8[0] + ((v2[4] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v2[4]) & 1) != 0
         || (sub_100B8FA90((uint64_t)a1, (uint64_t)v2, v8) & 1) == 0)
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
      if (v4 == a1 + 3)
        goto LABEL_10;
    }
    v6 = 1;
  }
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v8[0])
    operator delete(v8[0]);
  return v6;
}

void sub_100B8F230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100B8FC24((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100B8F244(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 40);
  sub_100B8F370(&v3);
  sub_100008848(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

unint64_t *sub_100B8F288(unint64_t *a1, unint64_t a2)
{
  a1[3] = 0;
  *a1 = a2;
  a1[1] = 0;
  a1[2] = (unint64_t)(a1 + 3);
  a1[4] = 0;
  sub_100B8F2E8(a1 + 5, a2);
  return a1;
}

void sub_100B8F2D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_100008848(v1, *v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_100B8F2E8(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100259C18(a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    v6 = 24 * a2;
    v7 = (_QWORD *)(v4 + 8);
    do
    {
      *v7 = 0;
      v7[1] = 0;
      *(v7 - 1) = v7;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_100B8F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100B8F370(&a9);
  _Unwind_Resume(a1);
}

void sub_100B8F370(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        sub_100008848((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_100B8F3E8(uint64_t **a1, _QWORD *a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_100B8F468((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_1000145B0(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *sub_100B8F468(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      v7 = (_QWORD *)v4;
      v8 = (double *)a3[1];
      v9 = *(double **)(v4 + 40);
      if (!v8)
        break;
      if (!v9)
        goto LABEL_15;
      if (sub_100B8F528(v8, v9))
      {
LABEL_11:
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_18;
      }
      else
      {
        v10 = (double *)v7[5];
        v11 = (double *)a3[1];
        if (v10)
        {
          if (!v11 || !sub_100B8F528(v10, v11))
            goto LABEL_18;
        }
        else if (!v11)
        {
          goto LABEL_14;
        }
LABEL_15:
        v5 = v7 + 1;
        v4 = v7[1];
        if (!v4)
          goto LABEL_18;
      }
    }
    if (!v9 && *a3 >= *(_QWORD *)(v4 + 32))
    {
LABEL_14:
      if (v7[4] >= *a3)
        goto LABEL_18;
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_18:
  *a2 = v7;
  return v5;
}

BOOL sub_100B8F528(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _BOOL4 v12;
  double v13;
  double v14;
  _BOOL4 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v3 = *a1;
  v2 = a1[1];
  v5 = *a2;
  v4 = a2[1];
  if (*a1 == *a2)
    goto LABEL_2;
  v7 = fabs(v5);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v12 = fabs(v3) == 180.0;
  }
  else
  {
    if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v8 = vabdd_f64(v3, v5);
      v9 = fabs(v3);
      if (v9 < v7)
        v9 = v7;
      v10 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
      if (v8 <= v10)
        goto LABEL_2;
    }
    v11 = fabs(v3);
    v12 = v11 == 180.0;
    if (v11 != 180.0)
    {
      v13 = fabs(v11 + -180.0);
      if (v11 < 180.0)
        v11 = 180.0;
      if (v11 >= 1.0)
        v14 = v11 * 2.22044605e-16;
      else
        v14 = 2.22044605e-16;
      v12 = v13 <= v14;
    }
  }
  if (v7 == 180.0)
  {
    v16 = 1;
  }
  else
  {
    if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      v16 = 0;
      goto LABEL_44;
    }
    v17 = fabs(v7 + -180.0);
    if (v7 < 180.0)
      v7 = 180.0;
    if (v7 >= 1.0)
      v18 = v7 * 2.22044605e-16;
    else
      v18 = 2.22044605e-16;
    v16 = v17 <= v18;
  }
  if (v12 && v16)
    goto LABEL_2;
LABEL_44:
  if (v2 == v4)
  {
    v23 = fabs(v2);
    goto LABEL_46;
  }
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v26 = vabdd_f64(v2, v4);
    v23 = fabs(v2);
    v27 = fabs(v4);
    if (v23 >= v27)
      v27 = v23;
    v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
    if (v26 <= v28)
    {
LABEL_46:
      if (v23 != 90.0)
      {
        if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_63;
        v24 = fabs(v23 + -90.0);
        if (v23 < 90.0)
          v23 = 90.0;
        v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
        if (v24 > v25)
          goto LABEL_63;
      }
LABEL_2:
      if (v2 != v4)
      {
        if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          return v2 < v4;
        }
        v19 = vabdd_f64(v2, v4);
        v20 = fabs(v2);
        v21 = fabs(v4);
        if (v20 < v21)
          v20 = v21;
        v22 = v20 >= 1.0 ? v20 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 > v22)
          return v2 < v4;
      }
      return 0;
    }
  }
LABEL_63:
  if (v12)
    return 0;
  return v3 < v5 || v16;
}

uint64_t sub_100B8F7B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100B8F828((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100B8F828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  sub_100B8F8E8((uint64_t)v16);
  return v14;
}

uint64_t sub_100B8F8E8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100B8F91C(a1);
  return a1;
}

void sub_100B8F91C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    sub_100008848(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **sub_100B8F95C(void **a1)
{
  sub_100B8F98C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100B8F98C(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_100008848(i - 24, *(_QWORD **)(i - 16));
  }
}

uint64_t *sub_100B8F9D0(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *(_QWORD *)(*(_QWORD *)a2 + 32);
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *(_QWORD *)(v5[4] + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_100B8FA90(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _OWORD v18[2];
  __int128 v19;
  uint64_t v20;

  v20 = a2;
  v19 = 0u;
  memset(v18, 0, sizeof(v18));
  sub_100B8FEC8(v18, &v20);
  for (i = *((_QWORD *)&v19 + 1); *((_QWORD *)&v19 + 1); i = *((_QWORD *)&v19 + 1))
  {
    v6 = i - 1;
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v18[0] + 1) + (((unint64_t)(v19 + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v19 + v6) & 0x1FF));
    *((_QWORD *)&v19 + 1) = v6;
    sub_100B4D3C0(v18, 1);
    *(_QWORD *)(*a3 + ((*(_QWORD *)(v7 + 32) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_QWORD *)(v7 + 32);
    v8 = *(_QWORD *)(v7 + 32);
    v9 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v8);
    v10 = (_QWORD *)*v9;
    if ((_QWORD *)*v9 != v9 + 1)
    {
      do
      {
        v11 = *(_QWORD *)(v10[4] + 32);
        v12 = a3[3];
        if (v11 != *(_QWORD *)(v12 + 8 * v8))
        {
          if (((*(_QWORD *)(*a3 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          {
            v16 = 1;
            goto LABEL_15;
          }
          *(_QWORD *)(v12 + 8 * v11) = v8;
          sub_100B8FEC8(v18, v10 + 4);
        }
        v13 = (_QWORD *)v10[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v10[2];
            v15 = *v14 == (_QWORD)v10;
            v10 = v14;
          }
          while (!v15);
        }
        v8 = *(_QWORD *)(v7 + 32);
        v10 = v14;
      }
      while (v14 != (_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v8 + 8));
    }
  }
  v16 = 0;
LABEL_15:
  sub_10047F25C(v18);
  return v16;
}

void sub_100B8FC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10047F25C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100B8FC24(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_100B8FC60(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v6;
  unsigned __int8 v7;

  v7 = 0;
  v4 = sub_100B8FCC8(a1, a2, &v7);
  v6 = -1;
  sub_100B8FE48(v4 + 3, a2, &v6);
  return a1;
}

void sub_100B8FCB0(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100B8FCC8(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1002FFFFC(a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          sub_100B8FD98(&v13, a2);
        else
          sub_10073998C((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *sub_100B8FD98(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

_QWORD *sub_100B8FE48(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10025E660(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100B8FEAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B8FEC8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100B8FF4C(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100B8FF4C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100B90214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100B90260(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 10;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 20;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_100B90364(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x30u);
}

void sub_100B9037C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x30u);
}

void sub_100B90390(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x30u);
}

BOOL sub_100B903A4()
{
  return os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT);
}

void sub_100B903B8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 164, a4);
}

BOOL sub_100B903C0()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 40), OS_LOG_TYPE_INFO);
}

BOOL sub_100B903D0()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 40));
}

void sub_100B903DC(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 57, a4);
}

void sub_100B903E4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 56, a4);
}

void sub_100B903EC(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 96, a4);
}

void sub_100B903F4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 121, a4);
}

void sub_100B903FC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100B90498(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100B904B0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100B9053C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100B90554(uint64_t a1, io_service_t a2)
{
  uint64_t v4;
  const __CFUUID *v5;
  const __CFUUID *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  IOCFPlugInInterface **v12;
  void (*v13)(IOCFPlugInInterface **, _QWORD, _QWORD, uint64_t);
  const __CFUUID *v14;
  CFUUIDBytes v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  const char *v24;
  uint8_t *v25;
  _QWORD *v26;
  uint8_t *v27;
  uint64_t byte15;
  _BYTE v29[24];
  uint8_t buf[4];
  _QWORD *v31;
  __int16 v32;
  int v33;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  v5 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x53u, 0xEAu, 0x67u, 0x34u, 0xC7u, 0xEu, 0x46u, 0x35u, 0x9Cu, 0xF5u, 0x4Fu, 0xAFu, 5u, 0xB4u, 0xF2u, 0x30u);
  v6 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  v7 = IOCreatePlugInInterfaceForService(a2, v5, v6, (IOCFPlugInInterface ***)a1, (SInt32 *)&byte15 + 1);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v9 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v10 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v10 = (_QWORD *)*v10;
      *(_DWORD *)buf = 136446210;
      v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[reader-%{public}s] error: failed to create plugin", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return v8;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v26 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v26 = (_QWORD *)*v26;
    *(_DWORD *)v29 = 136446210;
    *(_QWORD *)&v29[4] = v26;
    LODWORD(byte15) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[reader-%{public}s] error: failed to create plugin", v29, byte15, *(_OWORD *)v29, *(_QWORD *)&v29[16]);
LABEL_44:
    v27 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "kern_return_t CLDramFastpathClientInterface::Reader::open(io_service_t)", "%s\n", v20);
    if (v27 != buf)
      free(v27);
    return v8;
  }
  v12 = *(IOCFPlugInInterface ***)a1;
  v13 = *(void (**)(IOCFPlugInInterface **, _QWORD, _QWORD, uint64_t))(**(_QWORD **)a1 + 8);
  v14 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0xA6u, 0x7Au, 0x69u, 0x95u, 0x23u, 0x6Bu, 0x44u, 0xDEu, 0x97u, 0xB5u, 0x27u, 0xB9u, 0xB1u, 0xE6u, 0x6Fu, 0x2Fu);
  v15 = CFUUIDGetUUIDBytes(v14);
  v13(v12, *(_QWORD *)&v15.byte0, *(_QWORD *)&v15.byte8, v4);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16);
    if (!(_DWORD)v8)
    {
      *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
      return v8;
    }
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v17 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v18 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v18 = (_QWORD *)*v18;
      *(_DWORD *)buf = 136446466;
      v31 = v18;
      v32 = 1026;
      v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[reader-%{public}s] error: failed to open, error 0x%{public}x", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v19 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v19 = (_QWORD *)*v19;
      *(_DWORD *)v29 = 136446466;
      *(_QWORD *)&v29[4] = v19;
      *(_WORD *)&v29[12] = 1026;
      *(_DWORD *)&v29[14] = v8;
      LODWORD(byte15) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[reader-%{public}s] error: failed to open, error 0x%{public}x", v29, byte15, *(_OWORD *)v29, *(_QWORD *)&v29[16]);
      goto LABEL_44;
    }
  }
  else
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v21 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v22 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v22 = (_QWORD *)*v22;
      *(_DWORD *)buf = 136446466;
      v31 = v22;
      v32 = 1026;
      v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[reader-%{public}s] error: failed to query fastpath interface error 0x%{public}x", buf, 0x12u);
    }
    v8 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v23 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v23 = (_QWORD *)*v23;
      *(_DWORD *)v29 = 136446466;
      *(_QWORD *)&v29[4] = v23;
      *(_WORD *)&v29[12] = 1026;
      *(_DWORD *)&v29[14] = 0;
      LODWORD(byte15) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[reader-%{public}s] error: failed to query fastpath interface error 0x%{public}x", v29, byte15);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "kern_return_t CLDramFastpathClientInterface::Reader::open(io_service_t)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
      return 0;
    }
  }
  return v8;
}

IOCFPlugInInterface **sub_100B90B2C(uint64_t a1)
{
  IOCFPlugInInterface **result;

  result = *(IOCFPlugInInterface ***)(a1 + 8);
  if (result)
  {
    ((void (*)(IOCFPlugInInterface **))(*result)[1].QueryInterface)(result);
    result = *(IOCFPlugInInterface ***)a1;
    if (*(_QWORD *)a1)
    {
      ((void (*)(IOCFPlugInInterface **))(*result)->Release)(result);
      result = (IOCFPlugInInterface **)IODestroyPlugInInterface(*(IOCFPlugInInterface ***)a1);
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_100B90B7C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  int *v19;
  int v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v37;
  const char *v38;
  int *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  int *v50;
  _QWORD *v51;
  const char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  int v57;
  _QWORD *v58;
  __int16 v59;
  _WORD v60[10];
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  int v72;
  _QWORD *v73;
  __int16 v74;
  _WORD v75[10];
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v55 - v9);
  v11 = **(_QWORD **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24))
  {
    v12 = (*(uint64_t (**)(double))(v11 + 104))(v8);
    if (v12)
    {
      v13 = v12;
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v14 = qword_10229FFB8;
      if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
      {
        v15 = (_QWORD *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0)
          v15 = (_QWORD *)*v15;
        v72 = 136446466;
        v73 = v15;
        v74 = 1026;
        *(_DWORD *)v75 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[reader-%{public}s] read error 0x%{public}x", (uint8_t *)&v72, 0x12u);
      }
      v16 = 0;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v72, 0x65CuLL);
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_102174930);
        v17 = (_QWORD *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0)
          v17 = (_QWORD *)*v17;
        v57 = 136446466;
        v58 = v17;
        v59 = 1026;
        *(_DWORD *)v60 = v13;
        _os_log_send_and_compose_impl(2, 0, &v72, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[reader-%{public}s] read error 0x%{public}x", &v57, 18);
        v19 = (int *)v18;
        sub_100512490("Generic", 1, 0, 0, "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)", "%s\n", v18);
        if (v19 != &v72)
          free(v19);
        return 0;
      }
      return v16;
    }
  }
  else
  {
    v20 = (*(uint64_t (**)(double))(v11 + 112))(v8);
    if (v20)
    {
      v21 = v20;
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v22 = qword_10229FFB8;
      if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
      {
        v23 = (_QWORD *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0)
          v23 = (_QWORD *)*v23;
        v72 = 136446466;
        v73 = v23;
        v74 = 1026;
        *(_DWORD *)v75 = v21;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[reader-%{public}s] readlast error 0x%{public}x", (uint8_t *)&v72, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v72, 0x65CuLL);
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_102174930);
        v37 = (_QWORD *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0)
          v37 = (_QWORD *)*v37;
        v57 = 136446466;
        v58 = v37;
        v59 = 1026;
        *(_DWORD *)v60 = v21;
        _os_log_send_and_compose_impl(2, 0, &v72, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[reader-%{public}s] readlast error 0x%{public}x", &v57, 18);
        v39 = (int *)v38;
        sub_100512490("Generic", 1, 0, 0, "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)", "%s\n", v38);
        if (v39 != &v72)
          free(v39);
      }
    }
  }
  v56 = 0;
  v16 = 0;
  if ((_DWORD)a3)
  {
    while ((*(unsigned int (**)(_QWORD, _QWORD *, uint64_t, const void **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v10, a1 + 32, &v56, 0, 0))
    {
      memcpy(a2, v56, *(unsigned int *)(a1 + 16));
      HIDWORD(v55) = 0;
      (*(void (**)(_QWORD, _QWORD *, _QWORD, char *))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v10, *(_QWORD *)(a1 + 32), (char *)&v55 + 4);
      if (HIDWORD(v55))
      {
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_102174930);
        v24 = qword_10229FFB8;
        if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
        {
          v25 = (_QWORD *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0)
            v25 = (_QWORD *)*v25;
          v27 = v10[10];
          v26 = v10[11];
          v29 = v10[3];
          v28 = v10[4];
          v30 = v10[2];
          v32 = v10[8];
          v31 = v10[9];
          v33 = v10[7];
          v72 = 136448258;
          v73 = v25;
          v74 = 2050;
          *(_QWORD *)v75 = v27;
          v75[4] = 2048;
          *(_QWORD *)&v75[5] = v26;
          v75[9] = 2050;
          v76 = v29;
          v77 = 2050;
          v78 = v28;
          v79 = 2050;
          v80 = v30;
          v81 = 2050;
          v82 = v32;
          v83 = 2050;
          v84 = v31;
          v85 = 2050;
          v86 = v33;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[reader-%{public}s] corrupt count %{public}zd offset %zd, desc read/write [%{public}llu/%{public}llu/%{public}zd, %{public}llu/%{public}llu/%{public}zd", (uint8_t *)&v72, 0x5Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&v72, 0x65CuLL);
          if (qword_10229FFB0 != -1)
            dispatch_once(&qword_10229FFB0, &stru_102174930);
          v40 = (_QWORD *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0)
            v40 = (_QWORD *)*v40;
          v42 = v10[10];
          v41 = v10[11];
          v44 = v10[3];
          v43 = v10[4];
          v45 = v10[2];
          v47 = v10[8];
          v46 = v10[9];
          v48 = v10[7];
          v57 = 136448258;
          v58 = v40;
          v59 = 2050;
          *(_QWORD *)v60 = v42;
          v60[4] = 2048;
          *(_QWORD *)&v60[5] = v41;
          v60[9] = 2050;
          v61 = v44;
          v62 = 2050;
          v63 = v43;
          v64 = 2050;
          v65 = v45;
          v66 = 2050;
          v67 = v47;
          v68 = 2050;
          v69 = v46;
          v70 = 2050;
          v71 = v48;
          LODWORD(v54) = 92;
          _os_log_send_and_compose_impl(2, 0, &v72, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[reader-%{public}s] corrupt count %{public}zd offset %zd, desc read/write [%{public}llu/%{public}llu/%{public}zd, %{public}llu/%{public}llu/%{public}zd", &v57, v54);
          v50 = (int *)v49;
          sub_100512490("Generic", 1, 0, 0, "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)", "%s\n", v49);
          if (v50 != &v72)
            free(v50);
        }
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_102174930);
        v34 = qword_10229FFB8;
        if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
        {
          v35 = (_QWORD *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0)
            v35 = (_QWORD *)*v35;
          v72 = 136446722;
          v73 = v35;
          v74 = 1026;
          *(_DWORD *)v75 = v16;
          v75[2] = 1026;
          *(_DWORD *)&v75[3] = 1;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "[reader-%{public}s] Read %{public}u, corrupt %{public}u", (uint8_t *)&v72, 0x18u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&v72, 0x65CuLL);
          if (qword_10229FFB0 != -1)
            dispatch_once(&qword_10229FFB0, &stru_102174930);
          v51 = (_QWORD *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0)
            v51 = (_QWORD *)*v51;
          v57 = 136446722;
          v58 = v51;
          v59 = 1026;
          *(_DWORD *)v60 = v16;
          v60[2] = 1026;
          *(_DWORD *)&v60[3] = 1;
          LODWORD(v54) = 24;
          _os_log_send_and_compose_impl(2, 0, &v72, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[reader-%{public}s] Read %{public}u, corrupt %{public}u", &v57, v54);
          v53 = (int *)v52;
          sub_100512490("Generic", 1, 0, 0, "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)", "%s\n", v52);
          if (v53 != &v72)
            free(v53);
        }
        return v16;
      }
      v16 = (v16 + 1);
      a2 += *(unsigned int *)(a1 + 16);
      if ((_DWORD)a3 == (_DWORD)v16)
        return a3;
    }
  }
  return v16;
}

uint64_t sub_100B91404(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v5;
  int v6;
  __int128 v7;
  void *__p[2];
  uint64_t v10;
  int v11;

  *(_QWORD *)a1 = off_1021748E8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = objc_opt_new(HIDManager);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    *(_OWORD *)__p = *a3;
    v10 = *((_QWORD *)a3 + 2);
  }
  v5 = *((_DWORD *)a3 + 6);
  v11 = v5;
  *(_QWORD *)(a1 + 72) = 0;
  if (SHIBYTE(v10) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 88), __p[0], (unint64_t)__p[1]);
    v6 = SHIBYTE(v10);
    *(_DWORD *)(a1 + 112) = v11;
    if (v6 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 104) = v10;
    *(_DWORD *)(a1 + 112) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 120), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 120) = v7;
  }
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a3 + 6);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  sub_100B91568(a1);
  return a1;
}

void sub_100B91520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 111) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

void sub_100B91568(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[5];
  int v10;
  _QWORD *v11;
  uint8_t buf[4];
  _QWORD *v13;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    objc_msgSend(v2, "open");
    objc_msgSend(*(id *)(a1 + 16), "setDeviceMatching:", &off_10221FF98);
    v3 = *(void **)(a1 + 16);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100B928B8;
    v9[3] = &unk_102174900;
    v9[4] = a1;
    objc_msgSend(v3, "setDeviceNotificationHandler:", v9);
    objc_msgSend(*(id *)(a1 + 16), "setDispatchQueue:", objc_msgSend(*(id *)(a1 + 8), "queue"));
    objc_msgSend(*(id *)(a1 + 16), "activate");
  }
  else
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v4 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v5 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v5 = (_QWORD *)*v5;
      *(_DWORD *)buf = 136446210;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[manager-%{public}s] null hidManager", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v6 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v6 = (_QWORD *)*v6;
      v10 = 136446210;
      v11 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] null hidManager", &v10, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::setupHidDevice()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

uint64_t sub_100B917A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021748E8;
  sub_100B91820(a1);
  sub_100B90B2C(a1 + 48);
  objc_msgSend(*(id *)(a1 + 16), "cancel");
  objc_msgSend(*(id *)(a1 + 16), "close");

  *(_QWORD *)(a1 + 16) = 0;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  return a1;
}

void sub_100B91820(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  _QWORD *v8;
  uint8_t buf[4];
  _QWORD *v10;

  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_102174930);
  v2 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136446210;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] disabling", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v4 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v4 = (_QWORD *)*v4;
    v7 = 136446210;
    v8 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[manager-%{public}s] disabling", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::disable()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100B926DC(a1);
  *(_QWORD *)(a1 + 72) = 0;
}

void sub_100B919F8(uint64_t a1)
{
  sub_100B917A8(a1);
  operator delete();
}

void sub_100B91A1C(uint64_t a1, double a2)
{
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  _QWORD *v18;
  __int16 v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  _QWORD *v24;
  __int16 v25;
  double v26;
  __int16 v27;
  uint64_t v28;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v3 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v4 = (_QWORD *)*v4;
      *(_DWORD *)buf = 136446210;
      v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] already enabled", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v5 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v5 = (_QWORD *)*v5;
      v17 = 136446210;
      v18 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[manager-%{public}s] already enabled", &v17, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::enable(CFTimeInterval)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    v9 = mach_continuous_time();
    *(double *)(a1 + 152) = sub_100127828(v9);
    sub_100B91DBC(a1);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v10 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v11 = (_QWORD *)*v11;
      v12 = *(_QWORD *)(a1 + 152);
      *(_DWORD *)buf = 136446722;
      v24 = v11;
      v25 = 2050;
      v26 = a2;
      v27 = 2050;
      v28 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] enabling with read interval %{public}f at %{public}f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v13 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v13 = (_QWORD *)*v13;
      v14 = *(_QWORD *)(a1 + 152);
      v17 = 136446722;
      v18 = v13;
      v19 = 2050;
      v20 = a2;
      v21 = 2050;
      v22 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[manager-%{public}s] enabling with read interval %{public}f at %{public}f", &v17, 32);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::enable(CFTimeInterval)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    sub_100B922E0(a1, a2);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
  }
}

void sub_100B91DBC(uint64_t a1)
{
  int times;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  uint8_t *v8;
  double v9;
  double v10;
  NSObject *v11;
  _QWORD *v12;
  double v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  double v17;
  uint8_t *v18;
  uint8_t *v19;
  _QWORD *v20;
  double v21;
  double v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD v25[2];
  unint64_t v26;
  unint64_t v27;
  int v28;
  _QWORD *v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  uint8_t buf[4];
  _QWORD *v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  v26 = 0;
  v27 = 0;
  v25[0] = 0;
  v25[1] = 0;
  times = mach_get_times(&v27, &v26, v25);
  if (times)
  {
    v3 = times;
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v4 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v5 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v5 = (_QWORD *)*v5;
      *(_DWORD *)buf = 136446466;
      v35 = v5;
      v36 = 1026;
      LODWORD(v37) = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[manager-%{public}s] error getting mach times %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v6 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v6 = (_QWORD *)*v6;
      v28 = 136446466;
      v29 = v6;
      v30 = 1026;
      LODWORD(v31) = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] error getting mach times %{public}d", &v28, 18);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::updateTimestampOffset()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    goto LABEL_17;
  }
  v9 = sub_100127828(v26);
  v10 = sub_100127828(v27);
  if (v9 >= v10)
  {
    *(double *)(a1 + 160) = v9 - v10;
LABEL_17:
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v11 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v12 = (_QWORD *)*v12;
      v13 = *(double *)(a1 + 160);
      *(_DWORD *)buf = 136446466;
      v35 = v12;
      v36 = 2048;
      v37 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] updated timestamp offset %f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v20 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v20 = (_QWORD *)*v20;
    v21 = *(double *)(a1 + 160);
    v28 = 136446466;
    v29 = v20;
    v30 = 2048;
    v31 = v21;
    LODWORD(v24) = 22;
    v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[manager-%{public}s] updated timestamp offset %f", &v28, v24);
    v19 = v23;
    sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::updateTimestampOffset()", "%s\n", v22);
LABEL_42:
    if (v19 != buf)
      free(v19);
    return;
  }
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_102174930);
  v14 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
  {
    v15 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446722;
    v35 = v15;
    v36 = 2050;
    v37 = v9;
    v38 = 2050;
    v39 = v10;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[manager-%{public}s] unexpected timestamp offset continuous %{public}f, absolute %{public}f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v16 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v16 = (_QWORD *)*v16;
    v28 = 136446722;
    v29 = v16;
    v30 = 2050;
    v31 = v9;
    v32 = 2050;
    v33 = v10;
    v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] unexpected timestamp offset continuous %{public}f, absolute %{public}f", &v28, 32);
    v19 = v18;
    sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::updateTimestampOffset()", "%s\n", v17);
    goto LABEL_42;
  }
}

void sub_100B922E0(uint64_t a1, double a2)
{
  NSObject *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  double v8;
  NSObject *v9;
  NSObject *v10;
  dispatch_time_t v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  _QWORD *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD handler[5];
  int v20;
  _QWORD *v21;
  __int16 v22;
  double v23;
  uint8_t buf[4];
  _QWORD *v25;
  __int16 v26;
  double v27;

  *(double *)(a1 + 40) = a2;
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v4 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
    {
      v5 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v5 = (_QWORD *)*v5;
      *(_DWORD *)buf = 136446210;
      v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[manager-%{public}s] Reseting read timer", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v15 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v15 = (_QWORD *)*v15;
      v20 = 136446210;
      v21 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[manager-%{public}s] Reseting read timer", &v20, 12);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::setupReadTimer(CFTimeInterval)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_102174930);
  v6 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
  {
    v7 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v7 = (_QWORD *)*v7;
    *(_DWORD *)buf = 136446466;
    v25 = v7;
    v26 = 2050;
    v27 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[manager-%{public}s] Starting read timer at %{public}f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v12 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v12 = (_QWORD *)*v12;
    v20 = 136446466;
    v21 = v12;
    v22 = 2050;
    v23 = a2;
    LODWORD(v18) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[manager-%{public}s] Starting read timer at %{public}f", &v20, v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::setupReadTimer(CFTimeInterval)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v8 = a2 * 1000000000.0;
  v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 8), "queue"));
  *(_QWORD *)(a1 + 32) = v9;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100B93C38;
  handler[3] = &unk_10212ECA0;
  handler[4] = a1;
  dispatch_source_set_event_handler(v9, handler);
  v10 = *(NSObject **)(a1 + 32);
  v11 = dispatch_time(0, (uint64_t)v8);
  dispatch_source_set_timer(v10, v11, (unint64_t)v8, 0x989680uLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

void sub_100B926DC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  _QWORD *v8;
  uint8_t buf[4];
  _QWORD *v10;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v2 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
    {
      v3 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136446210;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[manager-%{public}s] Resetting read timer", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v4 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v4 = (_QWORD *)*v4;
      v7 = 136446210;
      v8 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[manager-%{public}s] Resetting read timer", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::teardownReadTimer()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void sub_100B928B8(uint64_t a1, void *a2, int a3)
{
  uint64_t v5;
  kern_return_t RegistryEntryID;
  kern_return_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  _QWORD *v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t entryID;
  int v23;
  _QWORD *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;

  v5 = *(_QWORD *)(a1 + 32);
  entryID = 0;
  RegistryEntryID = IORegistryEntryGetRegistryEntryID((io_registry_entry_t)objc_msgSend(a2, "service"), &entryID);
  if (RegistryEntryID)
  {
    v7 = RegistryEntryID;
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v8 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 136446466;
      v30 = v9;
      v31 = 1026;
      LODWORD(v32) = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetRegistryEntryID failed 0x%{public}x", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v10 = (_QWORD *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0)
        v10 = (_QWORD *)*v10;
      v23 = 136446466;
      v24 = v10;
      v25 = 1026;
      LODWORD(v26) = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] IORegistryEntryGetRegistryEntryID failed 0x%{public}x", &v23, 18);
LABEL_14:
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::setupHidDevice()_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    if (!a3)
    {
      sub_100B93A64(v5);
      return;
    }
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v13 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
    {
      v14 = (_QWORD *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0)
        v14 = (_QWORD *)*v14;
      *(_DWORD *)buf = 136446722;
      v30 = v14;
      v31 = 2048;
      v32 = entryID;
      v33 = 2050;
      v34 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[manager-%{public}s] new device entry ID %llu, this %{public}p", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v18 = (_QWORD *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0)
        v18 = (_QWORD *)*v18;
      v23 = 136446722;
      v24 = v18;
      v25 = 2048;
      v26 = entryID;
      v27 = 2050;
      v28 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[manager-%{public}s] new device entry ID %llu, this %{public}p", &v23, 32);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::setupHidDevice()_block_invoke", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (!*(_QWORD *)(v5 + 24))
    {
      sub_100B92D8C(v5, a2);
      return;
    }
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v15 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v16 = (_QWORD *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0)
        v16 = (_QWORD *)*v16;
      *(_DWORD *)buf = 136446210;
      v30 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[manager-%{public}s] unexpected duplicate device", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v17 = (_QWORD *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0)
        v17 = (_QWORD *)*v17;
      v23 = 136446210;
      v24 = v17;
      LODWORD(v21) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] unexpected duplicate device", &v23, v21);
      goto LABEL_14;
    }
  }
}

void sub_100B92D8C(uint64_t a1, void *a2)
{
  kern_return_t ParentEntry;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  uint8_t *v9;
  kern_return_t ChildIterator;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  io_object_t v15;
  _QWORD *v16;
  CFStringRef v17;
  BOOL v18;
  kern_return_t ChildEntry;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  CFStringRef v25;
  kern_return_t v26;
  NSObject *v27;
  _QWORD *v28;
  _QWORD *v29;
  const char *v30;
  uint8_t *v31;
  NSObject *v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  _QWORD *v36;
  mach_error_t v37;
  NSObject *v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  const char *v42;
  _QWORD *v43;
  const char *v44;
  NSObject *v45;
  _QWORD *v46;
  _BOOL4 v47;
  _QWORD *v48;
  _BOOL4 v49;
  const char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  io_registry_entry_t child;
  io_registry_entry_t parent[2];
  int v56;
  _QWORD *v57;
  __int16 v58;
  char *v59;
  __int16 v60;
  mach_error_t v61;
  __int16 v62;
  char *v63;
  io_name_t name;
  uint8_t buf[4];
  _QWORD *v66;
  __int16 v67;
  char *v68;
  __int16 v69;
  mach_error_t v70;
  __int16 v71;
  char *v72;

  *(_QWORD *)parent = 0;
  ParentEntry = IORegistryEntryGetParentEntry((io_registry_entry_t)objc_msgSend(a2, "service"), "IOService", &parent[1]);
  if (ParentEntry)
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v5 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v6 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136446466;
      v66 = v6;
      v67 = 1026;
      LODWORD(v68) = ParentEntry;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetParentEntry failed 0x%{public}0x", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v7 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)name = 136446466;
      *(_QWORD *)&name[4] = v7;
      *(_WORD *)&name[12] = 1026;
      *(_DWORD *)&name[14] = ParentEntry;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] IORegistryEntryGetParentEntry failed 0x%{public}0x", name, 18);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v8);
LABEL_113:
      if (v9 != buf)
        free(v9);
      return;
    }
    return;
  }
  ChildIterator = IORegistryEntryGetChildIterator(parent[1], "IOService", parent);
  if (!ChildIterator)
  {
    v15 = IOIteratorNext(parent[0]);
    if (!v15)
    {
LABEL_100:
      *(_QWORD *)(a1 + 24) = a2;
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v45 = qword_10229FFB8;
      if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
      {
        v46 = (_QWORD *)(a1 + 120);
        if (*(char *)(a1 + 143) < 0)
          v46 = (_QWORD *)*v46;
        v47 = *(_QWORD *)(a1 + 56) != 0;
        *(_DWORD *)buf = 136446466;
        v66 = v46;
        v67 = 1026;
        LODWORD(v68) = v47;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] reader is valid %{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_102174930);
        v48 = (_QWORD *)(a1 + 120);
        if (*(char *)(a1 + 143) < 0)
          v48 = (_QWORD *)*v48;
        v49 = *(_QWORD *)(a1 + 56) != 0;
        *(_DWORD *)name = 136446466;
        *(_QWORD *)&name[4] = v48;
        *(_WORD *)&name[12] = 1026;
        *(_DWORD *)&name[14] = v49;
        LODWORD(v51) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[manager-%{public}s] reader is valid %{public}d", name, v51);
        v9 = (uint8_t *)v50;
        sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v50);
        goto LABEL_113;
      }
      return;
    }
    v16 = (_QWORD *)(a1 + 120);
    while (1)
    {
      v17 = IOObjectCopyClass(v15);
      v18 = CFEqual(CFSTR("AppleSPUFastpathInterface"), v17) == 0;
      CFRelease(v17);
      if (!v18)
      {
        child = 0;
        ChildEntry = IORegistryEntryGetChildEntry(v15, "IOService", &child);
        if (!ChildEntry)
        {
          v25 = IOObjectCopyClass(child);
          if (CFEqual(v25, CFSTR("AppleSPUFastpathDriver")))
          {
            memset(name, 0, sizeof(name));
            v26 = IORegistryEntryGetName(child, name);
            if (v26)
            {
              if (qword_10229FFB0 != -1)
                dispatch_once(&qword_10229FFB0, &stru_102174930);
              v27 = qword_10229FFB8;
              if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
              {
                v28 = (_QWORD *)(a1 + 120);
                if (*(char *)(a1 + 143) < 0)
                  v28 = (_QWORD *)*v16;
                *(_DWORD *)buf = 136446466;
                v66 = v28;
                v67 = 1026;
                LODWORD(v68) = v26;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetName failed 0x%{public}0x", buf, 0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FFB0 != -1)
                  dispatch_once(&qword_10229FFB0, &stru_102174930);
                v29 = (_QWORD *)(a1 + 120);
                if (*(char *)(a1 + 143) < 0)
                  v29 = (_QWORD *)*v16;
                v56 = 136446466;
                v57 = v29;
                v58 = 1026;
                LODWORD(v59) = v26;
                LODWORD(v51) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] IORegistryEntryGetName failed 0x%{public}0x", &v56, v51);
                v31 = (uint8_t *)v30;
                sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v30);
                goto LABEL_98;
              }
LABEL_65:
              if (v25)
                CFRelease(v25);
              IOObjectRelease(child);
              goto LABEL_68;
            }
            v34 = strlen(name);
            v35 = v34;
            if (*(char *)(a1 + 143) < 0)
            {
              if (v34 != *(_QWORD *)(a1 + 128))
                goto LABEL_65;
              if (v34 == -1)
LABEL_115:
                sub_10035AD9C();
              v36 = (_QWORD *)*v16;
            }
            else
            {
              if (v34 != *(unsigned __int8 *)(a1 + 143))
                goto LABEL_65;
              v36 = (_QWORD *)(a1 + 120);
              if (v35 == -1)
                goto LABEL_115;
            }
            if (memcmp(v36, name, v35))
              goto LABEL_65;
            v37 = sub_100B90554(a1 + 48, child);
            if (!v37)
              goto LABEL_65;
            if (qword_10229FFB0 != -1)
              dispatch_once(&qword_10229FFB0, &stru_102174930);
            v38 = qword_10229FFB8;
            if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
            {
              v52 = (_QWORD *)(a1 + 120);
              if (*(char *)(a1 + 143) < 0)
                v52 = (_QWORD *)*v16;
              v39 = mach_error_string(v37);
              *(_DWORD *)buf = 136446978;
              v66 = v52;
              v67 = 2082;
              v68 = name;
              v69 = 1026;
              v70 = v37;
              v71 = 2082;
              v72 = v39;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "[manager-%{public}s] Failed to open %{public}s, error 0x%{public}x, %{public}s", buf, 0x26u);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_65;
            bzero(buf, 0x65CuLL);
            if (qword_10229FFB0 != -1)
              dispatch_once(&qword_10229FFB0, &stru_102174930);
            v53 = qword_10229FFB8;
            v40 = (_QWORD *)(a1 + 120);
            if (*(char *)(a1 + 143) < 0)
              v40 = (_QWORD *)*v16;
            v41 = mach_error_string(v37);
            v56 = 136446978;
            v57 = v40;
            v58 = 2082;
            v59 = name;
            v60 = 1026;
            v61 = v37;
            v62 = 2082;
            v63 = v41;
            LODWORD(v51) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v53, 16, "[manager-%{public}s] Failed to open %{public}s, error 0x%{public}x, %{public}s", &v56, v51);
            v31 = (uint8_t *)v42;
            sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v42);
          }
          else
          {
            if (qword_10229FFB0 != -1)
              dispatch_once(&qword_10229FFB0, &stru_102174930);
            v32 = qword_10229FFB8;
            if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
            {
              v33 = (_QWORD *)(a1 + 120);
              if (*(char *)(a1 + 143) < 0)
                v33 = (_QWORD *)*v16;
              *(_DWORD *)buf = 136446210;
              v66 = v33;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "[manager-%{public}s] unexpected child class", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_65;
            bzero(buf, 0x65CuLL);
            if (qword_10229FFB0 != -1)
              dispatch_once(&qword_10229FFB0, &stru_102174930);
            v43 = (_QWORD *)(a1 + 120);
            if (*(char *)(a1 + 143) < 0)
              v43 = (_QWORD *)*v16;
            *(_DWORD *)name = 136446210;
            *(_QWORD *)&name[4] = v43;
            LODWORD(v51) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] unexpected child class", name, v51);
            v31 = (uint8_t *)v44;
            sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v44);
          }
LABEL_98:
          if (v31 != buf)
            free(v31);
          goto LABEL_65;
        }
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_102174930);
        v20 = qword_10229FFB8;
        if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
        {
          v21 = (_QWORD *)(a1 + 120);
          if (*(char *)(a1 + 143) < 0)
            v21 = (_QWORD *)*v16;
          *(_DWORD *)buf = 136446466;
          v66 = v21;
          v67 = 1026;
          LODWORD(v68) = ChildEntry;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetChildEntry failed for AppleSPUFastpathInterface 0x%{public}0x", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FFB0 != -1)
            dispatch_once(&qword_10229FFB0, &stru_102174930);
          v22 = (_QWORD *)(a1 + 120);
          if (*(char *)(a1 + 143) < 0)
            v22 = (_QWORD *)*v16;
          *(_DWORD *)name = 136446466;
          *(_QWORD *)&name[4] = v22;
          *(_WORD *)&name[12] = 1026;
          *(_DWORD *)&name[14] = ChildEntry;
          LODWORD(v51) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] IORegistryEntryGetChildEntry failed for AppleSPUFastpathInterface 0x%{public}0x", name, v51);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
      }
LABEL_68:
      if (!IOObjectRelease(v15))
        v15 = IOIteratorNext(parent[0]);
      if (!v15)
        goto LABEL_100;
    }
  }
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_102174930);
  v11 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
  {
    v12 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v12 = (_QWORD *)*v12;
    *(_DWORD *)buf = 136446466;
    v66 = v12;
    v67 = 1026;
    LODWORD(v68) = ChildIterator;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetChildIterator failed 0x%{public}0x", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v13 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v13 = (_QWORD *)*v13;
    *(_DWORD *)name = 136446466;
    *(_QWORD *)&name[4] = v13;
    *(_WORD *)&name[12] = 1026;
    *(_DWORD *)&name[14] = ChildIterator;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] IORegistryEntryGetChildIterator failed 0x%{public}0x", name, 18);
    v9 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v14);
    goto LABEL_113;
  }
}

void sub_100B93A58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

IOCFPlugInInterface **sub_100B93A64(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  IOCFPlugInInterface **result;
  _QWORD *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;

  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_102174930);
  v2 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
  {
    v3 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136446210;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[manager-%{public}s] service disappeared!", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v5 = (_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      v5 = (_QWORD *)*v5;
    v8 = 136446210;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] service disappeared!", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceRemoved()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  result = sub_100B90B2C(a1 + 48);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

id *sub_100B93C38(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_102174930);
  v2 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
  {
    v3 = (_QWORD *)(v1 + 120);
    if (*(char *)(v1 + 143) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136446210;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[manager-%{public}s] Triggering read", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v5 = (_QWORD *)(v1 + 120);
    if (*(char *)(v1 + 143) < 0)
      v5 = (_QWORD *)*v5;
    v8 = 136446210;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[manager-%{public}s] Triggering read", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::setupReadTimer(CFTimeInterval)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_100B93E08(v1);
}

id *sub_100B93E08(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v11;
  const char *v12;
  id v13[2];
  int v14;
  _QWORD *v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  _QWORD *v19;
  __int16 v20;
  int v21;

  sub_100131938(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0);
  if (*(_QWORD *)(a1 + 56))
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v3 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
    {
      v4 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v4 = (_QWORD *)*v4;
      *(_DWORD *)buf = 136446466;
      v19 = v4;
      v20 = 1026;
      v21 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[manager-%{public}s] read %{public}d samples", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v5 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v5 = (_QWORD *)*v5;
      v14 = 136446466;
      v15 = v5;
      v16 = 1026;
      v17 = v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[manager-%{public}s] read %{public}d samples", &v14, 18);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::onReadTimer()", "%s\n", v6);
LABEL_27:
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102174930);
    v8 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 136446210;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[manager-%{public}s] reader isn't valid", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102174930);
      v11 = (_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        v11 = (_QWORD *)*v11;
      v14 = 136446210;
      v15 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] reader isn't valid", &v14, 12);
      v7 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onReadTimer()", "%s\n", v12);
      goto LABEL_27;
    }
  }
  return sub_100131740(v13);
}

void sub_100B94178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_100B941A0(id a1)
{
  qword_10229FFB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

uint64_t sub_100B941CC()
{
  sub_1015A2E04(qword_102306E98, "Acc800Fp");
  dword_102306EB0 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102306E98, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102306EB8, "DmFp");
  dword_102306ED0 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102306EB8, (void *)&_mh_execute_header);
}

uint64_t sub_100B94258()
{
  sub_1015A2E04(qword_102306ED8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102306ED8, (void *)&_mh_execute_header);
}

BOOL sub_100B9429C(uint64_t a1, uint64_t a2)
{
  return vabdd_f64(*(double *)(a1 + 4), *(double *)(a2 + 4)) < 0.000001
      && vabdd_f64(*(double *)(a1 + 12), *(double *)(a2 + 12)) < 0.000001;
}

double sub_100B942D8(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 76));
}

uint64_t sub_100B94300@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  sub_100263E50((uint64_t)v9);
  v4 = v10;
  *(_QWORD *)((char *)&v11[1] + *(_QWORD *)(v10 - 24)) = 8;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(v4 - 24)) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v4 - 24)) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(&v10, *(double *)(a1 + 4));
  v5 = sub_100263F7C(&v10, (uint64_t)", ", 2);
  v6 = *v5;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 16) = 8;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v5, *(double *)(a1 + 12));
  std::stringbuf::str(a2, v11);
  *(_QWORD *)((char *)v9
  v10 = v7;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf(v11);
  return std::ios::~ios(&v13);
}

void sub_100B94430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B9444C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  double Current;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[10];
  char v25;
  uint64_t v26;

  sub_100263E50((uint64_t)v22);
  v4 = sub_100263F7C(&v23, (uint64_t)"lat, ", 5);
  v5 = *v4;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 16) = 8;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v4, *(double *)(a1 + 4));
  v6 = sub_100263F7C(&v23, (uint64_t)", lon, ", 7);
  v7 = *v6;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 16) = 8;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v6, *(double *)(a1 + 12));
  v8 = sub_100263F7C(&v23, (uint64_t)", alt, ", 7);
  v9 = *v8;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 16) = 1;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v8, *(double *)(a1 + 28));
  v10 = sub_100263F7C(&v23, (uint64_t)", acc, ", 7);
  v11 = *v10;
  *(uint64_t *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 16) = 1;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v10, *(double *)(a1 + 20));
  v12 = sub_100263F7C(&v23, (uint64_t)", vacc, ", 8);
  v13 = *v12;
  *(uint64_t *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 16) = 1;
  *(_DWORD *)((char *)v12 + *(_QWORD *)(v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v12, *(double *)(a1 + 36));
  v14 = sub_100263F7C(&v23, (uint64_t)", timestamp, ", 13);
  v15 = *v14;
  *(uint64_t *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 16) = 1;
  *(_DWORD *)((char *)v14 + *(_QWORD *)(v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(v15 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v14, *(double *)(a1 + 76));
  v16 = sub_100263F7C(&v23, (uint64_t)", age, ", 7);
  v17 = *v16;
  *(uint64_t *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 16) = 1;
  *(_DWORD *)((char *)v16 + *(_QWORD *)(v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(v17 - 24) + 8) & 0xFFFFFEFB | 4;
  Current = CFAbsoluteTimeGetCurrent();
  std::ostream::operator<<(v16, vabdd_f64(Current, *(double *)(a1 + 76)));
  v19 = sub_100263F7C(&v23, (uint64_t)", type, ", 8);
  std::ostream::operator<<(v19, *(unsigned int *)(a1 + 96));
  std::stringbuf::str(a2, v24);
  *(_QWORD *)((char *)v22
  v23 = v20;
  if (v25 < 0)
    operator delete((void *)v24[8]);
  std::streambuf::~streambuf(v24);
  return std::ios::~ios(&v26);
}

void sub_100B94728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100B94758()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102307170);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102307170))
  {
    sub_10012A214((uint64_t)&unk_102306EF0);
    __cxa_atexit((void (*)(void *))sub_100B947D0, &unk_102306EF0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102307170);
  }
  return &unk_102306EF0;
}

uint64_t sub_100B947D0(uint64_t a1)
{
  sub_100261F44(a1 + 520);
  return a1;
}

void sub_100B95370(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100B9539C(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 208))
    sub_1006AA544();
  return a1 + 208;
}

void sub_100B95420(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDaemonClient::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102174F38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102174F38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100B9DAC0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100B955D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B955FC(uint64_t a1)
{
  return sub_1000907C0(a1 - 8);
}

void sub_100B95604(uint64_t a1)
{
  sub_1000907C0(a1 - 8);
  operator delete();
}

void sub_100B9562C(uint64_t a1, CLConnectionMessage **a2)
{
  id v3;
  __int128 *v4;
  __int128 v5;
  NSObject *v6;
  void **v7;
  void **v8;
  char *v9;
  void *__p[2];
  uint64_t v11;
  int v12;
  void **v13;
  uint8_t buf[4];
  void **v15;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  v4 = (__int128 *)CLConnectionMessage::name(*a2);
  if (*((char *)v4 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v11 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__p = v5;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    v7 = __p;
    if (v11 < 0)
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v8 = __p;
    if (v11 < 0)
      v8 = (void **)__p[0];
    v12 = 136446210;
    v13 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Got unhandled mesage of type %{public}s", &v12, 12);
    sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageUnknown(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);

}

void sub_100B95850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100B95894()
{
  operator new();
}

void sub_100B97550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  uint64_t v16;
  char *v18;

  v18 = a15;
  if (a15 == v15)
  {
    v16 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_7;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v16))();
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B97724()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[16];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[3];
  _QWORD *v18;

  sub_1010015EC((uint64_t)v11);
  v0 = v12;
  if (v12)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v17, (uint64_t)(v0 + 5));
      v1 = qword_1023071C0;
      v2 = (uint64_t)v18;
      if (!v18)
        goto LABEL_5;
      if (v18 != v17)
        break;
      v14 = v13;
      (*(void (**)(_QWORD *, _BYTE *))(v17[0] + 24))(v17, v13);
LABEL_7:
      v16 = 0;
      v3 = operator new(0x28uLL);
      *v3 = off_102175188;
      sub_100BB1258((uint64_t)(v3 + 1), (uint64_t)v13);
      v16 = v3;
      sub_100BB0AC4(v1, (uint64_t)(v0 + 2), (uint64_t)v15);
      v4 = v16;
      if (v16 == v15)
      {
        v4 = v15;
        v5 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_12;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
      v6 = v14;
      if (v14 == v13)
      {
        v6 = v13;
        v7 = 4;
      }
      else
      {
        if (!v14)
          goto LABEL_17;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_17:
      v8 = v18;
      if (v18 == v17)
      {
        v8 = v17;
        v9 = 4;
        goto LABEL_21;
      }
      if (v18)
      {
        v9 = 5;
LABEL_21:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v0 = (_QWORD *)*v0;
      if (!v0)
        return sub_1004E6A98((uint64_t)v11);
    }
    v2 = (*(uint64_t (**)(void))(*v18 + 16))();
LABEL_5:
    v14 = (_BYTE *)v2;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v11);
}

void sub_100B978D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B97994()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[16];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[3];
  _QWORD *v18;

  sub_10140B370((uint64_t)v11);
  v0 = v12;
  if (v12)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v17, (uint64_t)(v0 + 5));
      v1 = qword_1023071C0;
      v2 = (uint64_t)v18;
      if (!v18)
        goto LABEL_5;
      if (v18 != v17)
        break;
      v14 = v13;
      (*(void (**)(_QWORD *, _BYTE *))(v17[0] + 24))(v17, v13);
LABEL_7:
      v16 = 0;
      v3 = operator new(0x28uLL);
      *v3 = off_102175218;
      sub_100BB1B4C((uint64_t)(v3 + 1), (uint64_t)v13);
      v16 = v3;
      sub_100BB0AC4(v1, (uint64_t)(v0 + 2), (uint64_t)v15);
      v4 = v16;
      if (v16 == v15)
      {
        v4 = v15;
        v5 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_12;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
      v6 = v14;
      if (v14 == v13)
      {
        v6 = v13;
        v7 = 4;
      }
      else
      {
        if (!v14)
          goto LABEL_17;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_17:
      v8 = v18;
      if (v18 == v17)
      {
        v8 = v17;
        v9 = 4;
        goto LABEL_21;
      }
      if (v18)
      {
        v9 = 5;
LABEL_21:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v0 = (_QWORD *)*v0;
      if (!v0)
        return sub_1004E6A98((uint64_t)v11);
    }
    v2 = (*(uint64_t (**)(void))(*v18 + 16))();
LABEL_5:
    v14 = (_BYTE *)v2;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v11);
}

void sub_100B97B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B97C04(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_101070A08((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175298;
      sub_100BB2138((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B97DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B97E8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[16];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[3];
  _QWORD *v18;

  sub_100ECF718((uint64_t)v11);
  v0 = v12;
  if (v12)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v17, (uint64_t)(v0 + 5));
      v1 = qword_1023071C0;
      v2 = (uint64_t)v18;
      if (!v18)
        goto LABEL_5;
      if (v18 != v17)
        break;
      v14 = v13;
      (*(void (**)(_QWORD *, _BYTE *))(v17[0] + 24))(v17, v13);
LABEL_7:
      v16 = 0;
      v3 = operator new(0x28uLL);
      *v3 = off_102175318;
      sub_100BB2494((uint64_t)(v3 + 1), (uint64_t)v13);
      v16 = v3;
      sub_100BB0AC4(v1, (uint64_t)(v0 + 2), (uint64_t)v15);
      v4 = v16;
      if (v16 == v15)
      {
        v4 = v15;
        v5 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_12;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
      v6 = v14;
      if (v14 == v13)
      {
        v6 = v13;
        v7 = 4;
      }
      else
      {
        if (!v14)
          goto LABEL_17;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_17:
      v8 = v18;
      if (v18 == v17)
      {
        v8 = v17;
        v9 = 4;
        goto LABEL_21;
      }
      if (v18)
      {
        v9 = 5;
LABEL_21:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v0 = (_QWORD *)*v0;
      if (!v0)
        return sub_1004E6A98((uint64_t)v11);
    }
    v2 = (*(uint64_t (**)(void))(*v18 + 16))();
LABEL_5:
    v14 = (_BYTE *)v2;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v11);
}

void sub_100B98038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B980FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[16];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[3];
  _QWORD *v18;

  sub_100E4F308((uint64_t)v11);
  v0 = v12;
  if (v12)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v17, (uint64_t)(v0 + 5));
      v1 = qword_1023071C0;
      v2 = (uint64_t)v18;
      if (!v18)
        goto LABEL_5;
      if (v18 != v17)
        break;
      v14 = v13;
      (*(void (**)(_QWORD *, _BYTE *))(v17[0] + 24))(v17, v13);
LABEL_7:
      v16 = 0;
      v3 = operator new(0x28uLL);
      *v3 = off_102175398;
      sub_100BB2D88((uint64_t)(v3 + 1), (uint64_t)v13);
      v16 = v3;
      sub_100BB0AC4(v1, (uint64_t)(v0 + 2), (uint64_t)v15);
      v4 = v16;
      if (v16 == v15)
      {
        v4 = v15;
        v5 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_12;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
      v6 = v14;
      if (v14 == v13)
      {
        v6 = v13;
        v7 = 4;
      }
      else
      {
        if (!v14)
          goto LABEL_17;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_17:
      v8 = v18;
      if (v18 == v17)
      {
        v8 = v17;
        v9 = 4;
        goto LABEL_21;
      }
      if (v18)
      {
        v9 = 5;
LABEL_21:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v0 = (_QWORD *)*v0;
      if (!v0)
        return sub_1004E6A98((uint64_t)v11);
    }
    v2 = (*(uint64_t (**)(void))(*v18 + 16))();
LABEL_5:
    v14 = (_BYTE *)v2;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v11);
}

void sub_100B982A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9836C(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_1004D9340((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175418;
      sub_1004E5660((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B98530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B985F4(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_101161A60((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175498;
      sub_100BB3BB0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B987B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9887C(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100B06E48((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175518;
      sub_100B0A624((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B98A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B98B04(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100E384D0((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175598;
      sub_100BB45D8((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B98CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B98D8C(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100C48258((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175678;
      sub_100BB4D68((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B98F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B99014(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_10098DAD0((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_1021756F8;
      sub_100990B44((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B991D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9929C(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100D75A98((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175778;
      sub_100BB5B9C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B99460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B99524(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100E88B24((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_1021757F8;
      sub_100BB62E0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B996E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B997AC(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100920F00((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175878;
      sub_100922AF4((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B99970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B99A34(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_1010903D8((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_1021758F8;
      sub_100BB6D08((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B99BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B99CBC(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_10138C97C((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175978;
      sub_100BB7454((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B99E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B99F44(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_1008733DC((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_1021759F8;
      sub_1008759BC((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9A108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9A1CC(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100ED63AC((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175A78;
      sub_100BB8288((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9A390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9A454(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100608D84((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175AF8;
      sub_10060E1E8((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9A618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9A6DC(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100F98A74((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175B78;
      sub_100BB90B4((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9A8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9A964(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_1011967E4((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175BF8;
      sub_100BB93F4((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9AB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9ABEC(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_1012179C8((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175C78;
      sub_100BB9B40((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9ADB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9AE74(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100900A3C((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175CF8;
      sub_100902120((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9B038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9B0FC(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_1014070F0((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175D78;
      sub_100BBA974((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9B2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9B384(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100A3E6F0((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175DF8;
      sub_100A3F44C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9B548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9B60C(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_1009FD5A0((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175E78;
      sub_1009FEE14((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9B7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9B894(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_101491B84((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175EF8;
      sub_100BBBE90((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9BA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9BB1C(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_101088798((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175F78;
      sub_100BBC5DC((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9BCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9BDA4(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100F61AD8((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102175FF8;
      sub_100BBCD28((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9BF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9C02C(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100EFDC18((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102176078;
      sub_100BBD474((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9C1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9C2B4(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100F0A224((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_1021760F8;
      sub_100BBDBC0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9C478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9C53C(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_101265A44((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102176178;
      sub_100BBE30C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9C700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9C7C4(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100A457B0((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_1021761F8;
      sub_100A468D0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9C988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9CA4C(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_100E7C118((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_102176278;
      sub_100BBF140((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9CC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9CCD4(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;

  sub_1011F9000((uint64_t)v13);
  v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_100270E34((uint64_t)v20, (uint64_t)(v2 + 5));
      v3 = qword_1023071C0;
      v4 = (uint64_t)v21;
      if (!v21)
        goto LABEL_5;
      if (v21 != v20)
        break;
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
LABEL_7:
      v17 = a1;
      v19 = 0;
      v5 = operator new(0x30uLL);
      *(_QWORD *)v5 = off_1021762F8;
      sub_100BBF88C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      v19 = v5;
      sub_100BB0AC4(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      v6 = v19;
      if (v19 == v18)
      {
        v6 = v18;
        v7 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_12;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      v8 = v16;
      if (v16 == v15)
      {
        v8 = v15;
        v9 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      v10 = v21;
      if (v21 == v20)
      {
        v10 = v20;
        v11 = 4;
        goto LABEL_21;
      }
      if (v21)
      {
        v11 = 5;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v2 = (_QWORD *)*v2;
      if (!v2)
        return sub_1004E6A98((uint64_t)v13);
    }
    v4 = (*(uint64_t (**)(void))(*v21 + 16))();
LABEL_5:
    v16 = (_BYTE *)v4;
    goto LABEL_7;
  }
  return sub_1004E6A98((uint64_t)v13);
}

void sub_100B9CE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100B9CF5C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D01C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D0C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D0DC(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D19C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D25C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D31C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D3C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D3DC(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D49C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D55C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D61C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D6C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D6DC(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D79C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D85C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D91C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9D9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B9D9DC(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9[2];
  char v10;

  v6 = (unsigned __int8 *)(a1 + 16);
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1015A2E04((_QWORD *)v7 + 2, a2);
  sub_100BB0FD8((uint64_t)(v7 + 40), a3);
  v10 = 1;
  *((_QWORD *)v7 + 1) = sub_10025A024(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_100BC007C(a1, v9[0]) & 1) != 0)
    v9[0] = 0;
  return sub_100BB0F5C((uint64_t *)v9);
}

void sub_100B9DA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B9DAA0(uint64_t a1)
{
  return CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
}

uint64_t sub_100B9DAA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

BOOL sub_100B9DAB0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 264) == 0;
}

uint64_t sub_100B9DAC0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7;
  CFDataRef v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  _BYTE v29[16];
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  _BYTE buf[22];
  __int16 v37;
  uint64_t v38;

  sub_100119F3C(v29);
  v7 = *a3;
  if (*a3 == 11)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v17 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Got active change notification; updating requests\"}",
        buf,
        0x12u);
    }
  }
  else
  {
    if (v7 == 21)
    {
      v8 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a4 + 880), 16);
      if (!v8)
        return sub_10011A5A8(v29);
      if (sub_10011B54C((uint64_t)v29, "kCLConnectionMessageVehicleHeadingKey", (uint64_t)v8))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v13 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *(_QWORD *)(a1 + 48);
          v15 = *(_QWORD *)(a4 + 888);
          v16 = *(_QWORD *)(a4 + 880);
          *(_DWORD *)buf = 138543875;
          *(_QWORD *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v15;
          v37 = 2049;
          v38 = v16;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sending,vehicle heading,to client,%{public}@,time,%{public}.3lf,heading,%{private}.3lf", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
          v19 = *(_QWORD *)(a1 + 48);
          v20 = *(_QWORD *)(a4 + 888);
          v21 = *(_QWORD *)(a4 + 880);
          v30 = 138543875;
          v31 = v19;
          v32 = 2050;
          v33 = v20;
          v34 = 2049;
          v35 = v21;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "Sending,vehicle heading,to client,%{public}@,time,%{public}.3lf,heading,%{private}.3lf", &v30, 32);
          v23 = (char *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        *(_QWORD *)buf = sub_10011A5AC((uint64_t)v29);
        sub_100B9E0E4(a1, buf);
      }
      goto LABEL_12;
    }
    if (v7 == 20)
    {
      v8 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a4 + 848), 32);
      if (v8)
      {
        if (sub_10011B54C((uint64_t)v29, "kCLConnectionMessageVehicleSpeedKey", (uint64_t)v8))
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
          v9 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_QWORD *)(a1 + 48);
            v11 = *(_QWORD *)(a4 + 856);
            v12 = *(_QWORD *)(a4 + 848);
            *(_DWORD *)buf = 138543875;
            *(_QWORD *)&buf[4] = v10;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v11;
            v37 = 2049;
            v38 = v12;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending,vehicle speed,to client,%{public}@,time,%{public}.3lf,speed,%{private}.3lf", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102174F58);
            v24 = *(_QWORD *)(a1 + 48);
            v25 = *(_QWORD *)(a4 + 856);
            v26 = *(_QWORD *)(a4 + 848);
            v30 = 138543875;
            v31 = v24;
            v32 = 2050;
            v33 = v25;
            v34 = 2049;
            v35 = v26;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "Sending,vehicle speed,to client,%{public}@,time,%{public}.3lf,speed,%{private}.3lf", &v30, 32);
            v28 = (char *)v27;
            sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
          *(_QWORD *)buf = sub_10011A5AC((uint64_t)v29);
          sub_100B9DFEC(a1, buf);
        }
LABEL_12:
        CFRelease(v8);
      }
    }
  }
  return sub_10011A5A8(v29);
}

void sub_100B9DFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100B9DFEC(uint64_t a1, _QWORD *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;

  sub_1004E6BA4(&off_1021783E8, a2, &v11);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v15 = 0;
  v16 = 0;
  sub_10011D4E8(a1, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_100B9E0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B9E0E4(uint64_t a1, _QWORD *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;

  sub_1004E6BA4(&off_1021783F0, a2, &v11);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v15 = 0;
  v16 = 0;
  sub_10011D4E8(a1, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_100B9E1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B9E1DC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  int v10;
  char *v11;
  _BYTE v12[16];
  _DWORD v13[4];
  uint8_t buf[8];

  sub_100119F3C(v12);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102174FB8);
  v7 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received GMM notification %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102174FB8);
    v10 = *a3;
    v13[0] = 67109120;
    v13[1] = v10;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Received GMM notification %d", v13);
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::onGmmNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &)", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  if (!*a3)
  {
    sub_100D03D98(a4, (uint64_t)v12);
    *(_QWORD *)buf = sub_10011A5AC((uint64_t)v12);
    sub_100B9E3FC(a1, buf);
  }
  return sub_10011A5A8(v12);
}

void sub_100B9E3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100B9E3FC(uint64_t a1, _QWORD *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;

  sub_1004E6BA4(&off_102178400, a2, &v11);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v15 = 0;
  v16 = 0;
  sub_10011D4E8(a1, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_100B9E4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B9E4F4(uint64_t a1, uint64_t *a2)
{
  id v3;
  _BOOL8 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  NSNumber *v8;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  v4 = sub_1008840AC((int)&v6);
  v5 = *a2;
  v7 = CMDeviceHasOriginalBackCamera;
  v8 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1);
  CLConnectionMessage::sendReply(v5);

}

void sub_100B9E5AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_100B9E5D4(uint64_t a1, uint64_t *a2)
{
  id v3;
  NSNumber *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  char v8;
  uint64_t v9;
  _UNKNOWN **v10;
  uint64_t v11;
  NSNumber *v12;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  v4 = sub_100884C04((int)&v8);
  v5 = *a2;
  if (v4)
  {
    v11 = CMCameraVcmActuatorId;
    v12 = v4;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1);
    CLConnectionMessage::sendReply(v5);
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v9 = CMErrorMessage;
    v10 = &off_10221BCD8;
    CLConnectionMessage::sendReply(v5, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    if (v7 < 0)
      operator delete(__p[0]);
  }

}

void sub_100B9E6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100B9E724(uint64_t a1, uint64_t *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  char v8;
  uint64_t v9;
  _UNKNOWN **v10;
  uint64_t v11;
  id v12;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  v4 = sub_100884FA8((int)&v8);
  v5 = *a2;
  if (v4)
  {
    v11 = CMCompassCalibrationData;
    v12 = v4;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1);
    CLConnectionMessage::sendReply(v5);
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v9 = CMErrorMessage;
    v10 = &off_10221BCD8;
    CLConnectionMessage::sendReply(v5, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    if (v7 < 0)
      operator delete(__p[0]);
  }

}

void sub_100B9E830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_100B9E874(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

void sub_100B9E87C(_QWORD *a1)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  const __CFString *v7;
  _UNKNOWN **v8;
  uint8_t buf[8];
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  sub_1015A2E04(buf, "kCLConnectionMessageLocation");
  if (((*(uint64_t (**)(_QWORD *, uint8_t *))(*a1 + 48))(a1, buf) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageSignificantLocationChange");
    v2 = (*(uint64_t (**)(_QWORD *, void **))(*a1 + 48))(a1, __p);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  if (SBYTE3(v13) < 0)
  {
    operator delete(*(void **)buf);
    if (!v2)
      return;
  }
  else if (!v2)
  {
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = a1[6];
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2114;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Sending denied error message\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v7 = CFSTR("kCLConnectionMessageErrorKey");
  v8 = &off_10221BCF0;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1);
  sub_100B9EA64((uint64_t)a1, buf);
}

void sub_100B9EA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_100B9EA64(uint64_t a1, _QWORD *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;

  sub_100876330(&off_102178418, a2, &v11);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v15 = 0;
  v16 = 0;
  sub_10011D4E8(a1, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_100B9EB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B9EB5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 368);
}

uint64_t sub_100B9EB64(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 369);
  *(_BYTE *)(a1 + 369) = 0;
  return v1;
}

uint64_t sub_100B9EB74(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 370);
  *(_BYTE *)(a1 + 370) = 0;
  return v1;
}

double sub_100B9EB84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  __int128 v5;
  double *v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  v4 = sub_10011AC50(a1);
  if (v4)
  {
    sub_101164330((uint64_t)v4, (uint64_t)&v9);
    v5 = v10;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v11;
  }
  v6 = sub_100194488(a1);
  if (v6)
  {
    sub_100C46DC8((uint64_t)v6, (uint64_t)&v9);
    if (*(_BYTE *)(a2 + 32))
    {
      if (v11)
        sub_1001944E8((double *)a2, (double *)&v9);
    }
    else
    {
      result = *(double *)&v9;
      v8 = v10;
      *(_OWORD *)a2 = v9;
      *(_OWORD *)(a2 + 16) = v8;
      *(_BYTE *)(a2 + 32) = v11;
    }
  }
  return result;
}

void sub_100B9EC20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;

  v2 = a1[8];
  if ((v2 & a2) != 0)
  {
    v3 = a2;
    a1[8] = v2 & ~a2;
    if ((a2 & 0x10) != 0)
    {
      v5 = a1[2];
      if ((objc_msgSend((id)a1[6], "isAuthLimited") & 1) != 0)
        v6 = sub_1007D4930(a1[2], a1[6]);
      else
        v6 = (id)a1[6];
      sub_1007C3E9C(v5, (uint64_t)v6, 4);
    }
    if ((v3 & 4) != 0)
    {
      v7 = a1[2];
      if ((objc_msgSend((id)a1[6], "isAuthLimited") & 1) != 0)
        v8 = sub_1007D4930(a1[2], a1[6]);
      else
        v8 = (id)a1[6];
      sub_1007C3E9C(v7, (uint64_t)v8, 2);
    }
  }
}

__n128 sub_100B9ECD8(__n128 **a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;
  unint64_t v9;

  v4 = (__n128 *)operator new(0x30uLL);
  v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a2[1];
  v4[2] = result;
  v9 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(_QWORD *)(v9 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

void sub_100B9ED44(uint64_t a1, unint64_t a2)
{
  sub_1007EFAFC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), a2);
}

id sub_100B9ED58(uint64_t a1)
{
  return sub_1001A6AC4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), 0);
}

void sub_100B9ED6C(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v5;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 16);
  __p = *a3;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  sub_1007C0D0C(v5, a2, &__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100B9EDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9EDDC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 371);
}

uint64_t sub_100B9EDE4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 194);
}

id sub_100B9EDEC(uint64_t a1)
{
  id v1;

  v1 = sub_1001AA814(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48));
  return _objc_msgSend(v1, "stringForKey:defaultValue:", CFSTR("PlatformSpecificBundleId"), 0);
}

uint64_t sub_100B9EE1C(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  void *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  BOOL v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  const __CFString *v25;

  v17 = 0;
  v5 = *(void **)(a1 + 48);
  v6 = sub_1007F119C(*(_QWORD *)(a1 + 16), (uint64_t)v5);
  if (!a3)
    return 0;
  v7 = v6;
  v8 = sub_1001FD94C();
  v9 = sub_1001E48E4(v8, (uint64_t)a3, &v17);
  result = 0;
  if (v17)
    v9 = 1;
  if ((v9 & 1) == 0 && ((v7 ^ 1) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2114;
      v23 = v5;
      v24 = 2114;
      v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Resetting auth and updating daemon cache\", \"ckp\":%{public, location:escape_only}@, \"daemonCacheKey\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v12 = *(_QWORD *)(a1 + 16);
    sub_1015A2E04(__p, "ClientRemoved");
    sub_1007C0424(v12, v5, 1, (uint64_t *)__p);
    if (v16 < 0)
      operator delete(__p[0]);
    v13 = sub_1001FD94C();
    buf[0] = 1;
    sub_10011B81C(v13, a3, buf);
    v14 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 944))(v14);
    return 1;
  }
  return result;
}

void sub_100B9EFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100B9EFF4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  CLConnection *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 272);
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 68289538;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 1026;
    v22 = v5;
    v23 = 2114;
    v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning MessageRegistration received by daemon client after first message\", \"ClientPid\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x22u);
  }
  v7 = *(CLConnection **)(a1 + 264);
  CLConnection::pause(v7);
  *(_QWORD *)(a1 + 264) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = *(CLConnectionMessage **)a2;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_1007BBC78(v8, v7, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100B9F174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100B9F190(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  id v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v9 = 0;
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey"));
  if (v5 && sub_10052BBCC(v5, &v9))
  {
    sub_1007E1F44(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), v9);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v13 = "kCLConnectionMessagePurposeKey";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v10 = 136446210;
      v11 = "kCLConnectionMessagePurposeKey";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v10, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessagePurpose(std::shared_ptr<CLConnectionMessage>)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }

}

void sub_100B9F39C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100B9F3CC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;
  char v28;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.effective_bundle");
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
  v6 = v5;
  if (v28 < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
LABEL_14:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v16 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Unentitled entity '%{public}@' trying to tell us they are WatchKit", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v17 = *(const char **)(a1 + 48);
      v21 = 138543362;
      v22 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Unentitled entity '%{public}@' trying to tell us they are WatchKit", &v21, 12);
      v14 = (char *)v18;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  if ((v5 & 1) == 0)
    goto LABEL_14;
LABEL_3:
  v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageEnabledKey"));
  if (v7 && (sub_1001E4B1C(v7, (BOOL *)(a1 + 88)) & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v9;
      v26 = 1024;
      v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Setting client, %@, is actually a WatchKit extension, %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v11 = *(const char **)(a1 + 48);
      v12 = *(unsigned __int8 *)(a1 + 88);
      v21 = 138412546;
      v22 = v11;
      v23 = 1024;
      v24 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Setting client, %@, is actually a WatchKit extension, %d", &v21, 18);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
LABEL_31:
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v19 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v21 = 136446210;
      v22 = "kCLConnectionMessageEnabledKey";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v21, 12);
      v14 = (char *)v20;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
      goto LABEL_31;
    }
  }
LABEL_27:

}

void sub_100B9F8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100B9F8F4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  char *v19;
  int v20;
  const char *v21;
  _BYTE buf[18];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.effective_bundle");
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
  v6 = v5;
  if (SBYTE3(v24) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_3:
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageEnabledKey"));
    if (v7 && (sub_1001E4B1C(v7, (BOOL *)(a1 + 89)) & 1) != 0)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v8 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(a1 + 48);
        v10 = *(unsigned __int8 *)(a1 + 89);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v23 = 2114;
        v24 = v9;
        v25 = 1026;
        v26 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Setting client proxy for remote client\", \"ClientKeyPath\":%{public, location:escape_only}@, \"is proxy\":%{public}hhd}", buf, 0x22u);
      }
      if (!*(_BYTE *)(a1 + 72))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v11 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *(_DWORD *)(a1 + 272);
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          v23 = 1026;
          LODWORD(v24) = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync #warning Received a ProxyForRemoteClient message for a client that failed to register.  Is it uninstalled?\", \"pid\":%{public}d}", buf, 0x18u);
        }
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v20 = 136446210;
        v21 = "kCLConnectionMessageEnabledKey";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v20, 12);
        v19 = (char *)v18;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageProxyForRemoteClient(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
    }
    goto LABEL_27;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v13 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    v14 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v23 = 2114;
    v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#usesync Unentitled client claims to be a remote client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
  }
  v15 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v16 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v23 = 2114;
    v24 = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#usesync Unentitled client claims to be a remote client", "{\"msg%{public}.0s\":\"#usesync Unentitled client claims to be a remote client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_27:

}

void sub_100B9FDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100B9FDEC(_QWORD *a1, uint64_t a2)
{
  id v4;
  CLConnectionMessage *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *Dictionary;
  NSDictionary *v10;
  char v11;
  char v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p[2];
  uint64_t v23;
  unsigned int v24[18];
  _QWORD v25[5];
  std::__shared_weak_count *v26;
  const __CFString *v27;
  NSDictionary *v28;
  _BYTE buf[28];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3321888768;
  v25[2] = sub_100BA01FC;
  v25[3] = &unk_102174AB8;
  v5 = *(CLConnectionMessage **)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v25[4] = *(_QWORD *)a2;
  v26 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v5 = *(CLConnectionMessage **)a2;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(v5);
  v10 = (NSDictionary *)objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey"));
  if (!v10)
    goto LABEL_8;
  sub_1015A2E04(buf, "com.apple.locationd.prompt_content_control");
  v11 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 40))(a1, buf);
  v12 = v11;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if ((v12 & 1) != 0)
      goto LABEL_8;
  }
  else if ((v11 & 1) != 0)
  {
LABEL_8:
    v13 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeIdentifierKey"));
    if (v13)
      sub_1015A2E04(buf, (char *)objc_msgSend(v13, "UTF8String"));
    else
      sub_1015A2E04(buf, "");
    if (v10)
    {
      v27 = CFSTR("UsageDescription");
      v28 = v10;
      v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
    }
    v14 = a1[6];
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_100115CE4(__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)buf;
      v23 = *(_QWORD *)&buf[16];
    }
    sub_1007F5908((uint64_t)v24, 9, v14, v25, (__int128 *)__p);
    sub_10000ED54((uint64_t)a1, v24, v10, 1);
    sub_100235568((uint64_t)v24);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_28;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v15 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    v16 = a1[6];
    *(_QWORD *)buf = 68289282;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing temporary precise prompt because the client lacks the required SPI entitlement\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
  }
  v17 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v18 = a1[6];
    *(_QWORD *)buf = 68289282;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AuthPrompt Not showing temporary precise prompt because the client lacks the required SPI entitlement", "{\"msg%{public}.0s\":\"#AuthPrompt Not showing temporary precise prompt because the client lacks the required SPI entitlement\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_28:
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

}

void sub_100BA0174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  uint64_t v29;

  sub_100235568((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  sub_100261F44((uint64_t)&a28);

  _Unwind_Resume(a1);
}

uint64_t sub_100BA01FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;

  v6 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v6, "setObject:forKeyedSubscript:", a2, CFSTR("kCLConnectionMessagePromptResponseKey"));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", a3, CFSTR("kCLConnectionMessageErrorKey"));
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100BA0264(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100BA02D4;
  v3[3] = &unk_102174AF0;
  v5 = v1;
  v4 = *(_OWORD *)(result + 32);
  v2 = *(_QWORD *)(result + 64);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8) != -1)
      return sub_100BA02D4(v3);
  }
  return result;
}

uint64_t sub_100BA02D4(_QWORD *a1)
{
  uint64_t v2;
  _BYTE v4[72];

  v2 = a1[6];
  sub_1007F5A68((uint64_t)v4, *(_QWORD *)(a1[5] + 8) + 48);
  sub_10000ED54(v2, v4, a1[4], 0);
  return sub_100235568((uint64_t)v4);
}

void sub_100BA0328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100235568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BA033C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100BA0360(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_100BA0370(uint64_t a1)
{
  sub_100008150((unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
}

void sub_100BA0380(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  _BYTE buf[18];
  __int16 v24;
  uint64_t v25;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.private_info");
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
  v6 = v5;
  if (SBYTE3(v25) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
LABEL_14:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v24 = 2114;
      v25 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to enable match info\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_23;
  }
  if ((v5 & 1) == 0)
    goto LABEL_14;
LABEL_3:
  v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageEnabledKey"));
  if (v7 && (sub_1001E4B1C(v7, (BOOL *)(a1 + 277)) & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(unsigned __int8 *)(a1 + 277);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Client %@ is setting match info enabled to %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v11 = *(const char **)(a1 + 48);
      v12 = *(unsigned __int8 *)(a1 + 277);
      v19 = 138412546;
      v20 = v11;
      v21 = 1024;
      v22 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Client %@ is setting match info enabled to %d", &v19, 18);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageMatchInfoEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
LABEL_27:
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v19 = 136446210;
      v20 = "kCLConnectionMessageEnabledKey";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v19, 12);
      v14 = (char *)v18;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageMatchInfoEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
      goto LABEL_27;
    }
  }
LABEL_23:

}

void sub_100BA07B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100BA0800(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  id v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  _BYTE buf[18];
  __int16 v16;
  uint64_t v17;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.private_info");
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
  v6 = v5;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_3:
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageEnabledKey"));
    if (!v7 || (sub_1001E4B1C(v7, (BOOL *)(a1 + 278)) & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v13 = 136446210;
        v14 = "kCLConnectionMessageEnabledKey";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v13, 12);
        v10 = (char *)v9;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageGroundAltitudeEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    goto LABEL_19;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v11 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v16 = 2114;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to enable ground altitude\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_19:

}

void sub_100BA0ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100BA0B14(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  id v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  _BYTE buf[18];
  __int16 v16;
  uint64_t v17;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.private_info");
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
  v6 = v5;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_3:
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageEnabledKey"));
    if (!v7 || (sub_1001E4B1C(v7, (BOOL *)(a1 + 279)) & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v13 = 136446210;
        v14 = "kCLConnectionMessageEnabledKey";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v13, 12);
        v10 = (char *)v9;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageFusionInfoEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    goto LABEL_19;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v11 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v16 = 2114;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to enable fusion info\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_19:

}

void sub_100BA0DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100BA0E28(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  id v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  _BYTE buf[18];
  __int16 v16;
  uint64_t v17;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.private_info");
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
  v6 = v5;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_3:
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageEnabledKey"));
    if (!v7 || (sub_1001E4B1C(v7, (BOOL *)(a1 + 280)) & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v13 = 136446210;
        v14 = "kCLConnectionMessageEnabledKey";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v13, 12);
        v10 = (char *)v9;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageTrackRunInfoEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    goto LABEL_19;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v11 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v16 = 2114;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to enable track run info\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_19:

}

void sub_100BA10F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100BA113C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  _BYTE buf[18];
  __int16 v26;
  uint64_t v27;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.prompt_behavior");
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
  v6 = v5;
  if (SBYTE3(v27) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
LABEL_14:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v26 = 2114;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement to change prompt behaviour\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
    }
    v17 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v18 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v26 = 2114;
      v27 = v18;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client does not have appropriate entitlement to change prompt behaviour", "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement to change prompt behaviour\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_26;
  }
  if ((v5 & 1) == 0)
    goto LABEL_14;
LABEL_3:
  v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageEnabledKey"));
  if (v7 && (sub_1001E4B1C(v7, (BOOL *)(a1 + 368)) & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(unsigned __int8 *)(a1 + 368);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Client %@ is setting location prompt allowed to %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v11 = *(const char **)(a1 + 48);
      v12 = *(unsigned __int8 *)(a1 + 368);
      v21 = 138412546;
      v22 = v11;
      v23 = 1024;
      v24 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Client %@ is setting location prompt allowed to %d", &v21, 18);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageAllowsLocationPrompts(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
LABEL_30:
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v19 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v21 = 136446210;
      v22 = "kCLConnectionMessageEnabledKey";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v21, 12);
      v14 = (char *)v20;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageAllowsLocationPrompts(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
      goto LABEL_30;
    }
  }
LABEL_26:

}

void sub_100BA1608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100BA1658(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  _BYTE buf[18];
  __int16 v26;
  uint64_t v27;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.prompt_behavior");
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
  v6 = v5;
  if (SBYTE3(v27) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
LABEL_14:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v26 = 2114;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement to change prompt behaviour\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
    }
    v17 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v18 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v26 = 2114;
      v27 = v18;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client does not have appropriate entitlement to change prompt behaviour", "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement to change prompt behaviour\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_26;
  }
  if ((v5 & 1) == 0)
    goto LABEL_14;
LABEL_3:
  v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageEnabledKey"));
  if (v7 && (sub_1001E4B1C(v7, (BOOL *)(a1 + 369)) & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(unsigned __int8 *)(a1 + 369);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Client %@ is setting location prompt show to %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v11 = *(const char **)(a1 + 48);
      v12 = *(unsigned __int8 *)(a1 + 369);
      v21 = 138412546;
      v22 = v11;
      v23 = 1024;
      v24 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Client %@ is setting location prompt show to %d", &v21, 18);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageShowLocationPrompt(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
LABEL_30:
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v19 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v21 = 136446210;
      v22 = "kCLConnectionMessageEnabledKey";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v21, 12);
      v14 = (char *)v20;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageShowLocationPrompt(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
      goto LABEL_30;
    }
  }
LABEL_26:

}

void sub_100BA1B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100BA1B74(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v3 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543362;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client %{public}@ is registering as a location client and will show up in Settings", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v5 = *(_QWORD *)(a1 + 48);
    v8 = 138543362;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "Client %{public}@ is registering as a location client and will show up in Settings", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageRegisterAsLocationClient(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_1007CDEA8(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48));

}

void sub_100BA1D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100BA1D70(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  void *Dictionary;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  std::__shared_weak_count *v12;
  CLConnectionMessage *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  CLConnectionMessage *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  CLConnectionMessage *v25;
  NSObject *v26;
  CLConnectionMessage *v27;
  CLConnectionMessage *v28;
  const char *v29;
  void **v30;
  _QWORD v31[6];
  std::__shared_weak_count *v32;
  __int16 v33[8];
  NSErrorUserInfoKey v34;
  const __CFString *v35;
  const __CFString *v36;
  NSError *v37;
  NSErrorUserInfoKey v38;
  const __CFString *v39;
  const __CFString *v40;
  NSError *v41;
  NSErrorUserInfoKey v42;
  const __CFString *v43;
  const __CFString *v44;
  NSError *v45;
  void *__p;
  __int16 v47;
  const char *v48;
  __int16 v49;
  uint64_t v50;
  NSErrorUserInfoKey v51;
  const __CFString *v52;
  const __CFString *v53;
  NSError *v54;
  NSErrorUserInfoKey v55;
  const __CFString *v56;
  const __CFString *v57;
  NSError *v58;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(&__p, "com.apple.locationd.stored_location");
  v5 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &__p);
  if (SBYTE3(v50) < 0)
    operator delete(__p);
  if ((v5 & 1) == 0)
  {
    if (qword_1022A01F0 != -1)
      dispatch_once(&qword_1022A01F0, &stru_102174FF8);
    v19 = qword_1022A01F8;
    if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(a1 + 48);
      __p = (void *)68289282;
      v47 = 2082;
      v48 = "";
      v49 = 2114;
      v50 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to access stored locations\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
    v21 = *(CLConnectionMessage **)a2;
    v57 = CFSTR("kCLConnectionMessageErrorKey");
    v55 = NSLocalizedDescriptionKey;
    v56 = CFSTR("Not entitled.");
    v58 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1);
    goto LABEL_26;
  }
  if ((objc_msgSend(*(id *)(a1 + 112), "isAuthorizedForServiceTypeMask:", 16) & 1) == 0)
  {
    if (qword_1022A01F0 != -1)
      dispatch_once(&qword_1022A01F0, &stru_102174FF8);
    v22 = qword_1022A01F8;
    if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_QWORD *)(a1 + 48);
      __p = (void *)68289282;
      v47 = 2082;
      v48 = "";
      v49 = 2114;
      v50 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client is not authorized for locations\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
    v21 = *(CLConnectionMessage **)a2;
    v53 = CFSTR("kCLConnectionMessageErrorKey");
    v51 = NSLocalizedDescriptionKey;
    v52 = CFSTR("Not authorized.");
    v54 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1);
LABEL_26:
    CLConnectionMessage::sendReply(v21);
    goto LABEL_27;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  v7 = Dictionary;
  if (Dictionary
    && objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageFetchEstimatedLocationDateKey")))
  {
    v8 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageFetchEstimatedLocationDateKey"));
    v9 = objc_autoreleasePoolPush();
    v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
      objc_msgSend(v11, "setDelegateEntityName:", "CLDaemonClient");
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3321888768;
      v31[2] = sub_100BA2568;
      v31[3] = &unk_102174B70;
      v13 = *(CLConnectionMessage **)a2;
      v12 = *(std::__shared_weak_count **)(a2 + 8);
      v31[4] = a1;
      v31[5] = v13;
      v32 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      objc_msgSend(v11, "fetchEstimatedLocationAtDate:withReply:", v8, v31);
      v16 = v32;
      if (v32)
      {
        v17 = (unint64_t *)&v32->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
      if (qword_1022A01F0 != -1)
        dispatch_once(&qword_1022A01F0, &stru_102174FF8);
      v26 = qword_1022A01F8;
      if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289026;
        v47 = 2082;
        v48 = "";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Error CLRoutineMonitor is not supported\"}", (uint8_t *)&__p, 0x12u);
      }
      v27 = *(CLConnectionMessage **)a2;
      v40 = CFSTR("kCLConnectionMessageErrorKey");
      v38 = NSLocalizedDescriptionKey;
      v39 = CFSTR("Not supported.");
      v41 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1));
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
      CLConnectionMessage::sendReply(v27);
    }
    objc_autoreleasePoolPop(v9);
    if (v11)
    {
      v28 = *(CLConnectionMessage **)a2;
      v36 = CFSTR("kCLConnectionMessageErrorKey");
      v34 = NSLocalizedDescriptionKey;
      v35 = CFSTR("Not supported.");
      v37 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
      CLConnectionMessage::sendReply(v28);
    }
  }
  else
  {
    if (qword_1022A01F0 != -1)
      dispatch_once(&qword_1022A01F0, &stru_102174FF8);
    v24 = qword_1022A01F8;
    if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Error checking date parameter", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A01F0 != -1)
        dispatch_once(&qword_1022A01F0, &stru_102174FF8);
      v33[0] = 0;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A01F8, 17, "Error checking date parameter", v33, 2);
      v30 = (void **)v29;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageFetchEstimatedLocationAtDate(std::shared_ptr<CLConnectionMessage>)", "%s\n", v29);
      if (v30 != &__p)
        free(v30);
    }
    v25 = *(CLConnectionMessage **)a2;
    v44 = CFSTR("kCLConnectionMessageErrorKey");
    v42 = NSLocalizedDescriptionKey;
    v43 = CFSTR("Invalid parameters.");
    v45 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1);
    CLConnectionMessage::sendReply(v25);
  }
LABEL_27:

}

void sub_100BA24FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;

  _Unwind_Resume(a1);
}

void sub_100BA2568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;
  const __CFString *v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102174FF8);
  v7 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(v6 + 48);
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2114;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Request for estimated locations is replied\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (a3)
  {
    v9 = *(_QWORD *)(a1 + 40);
    v14 = CFSTR("kCLConnectionMessageErrorKey");
    v15 = a3;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
    v10 = v9;
  }
  else
  {
    if (!a2)
      return;
    v11 = *(_QWORD *)(a1 + 40);
    v12 = CFSTR("kCLConnectionMessageFetchEstimatedLocationLocationKey");
    v13 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v10 = v11;
  }
  CLConnectionMessage::sendReply(v10);
}

void sub_100BA26DC(uint64_t a1, _QWORD *a2)
{
  id v4;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  -[NSMutableDictionary objectForKey:](sub_1007E21C4(*(_QWORD *)(a1 + 16), 0, 0), "objectForKey:", objc_msgSend(*(id *)(a1 + 48), "clientKey"));
  CLConnectionMessage::sendReply(*a2);

}

void sub_100BA2750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100BA2764(_QWORD *a1, CLConnectionMessage **a2)
{
  const __CFDictionary *Dictionary;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _BYTE v9[16];
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v9, Dictionary);
  HIBYTE(v8) = 0;
  if ((sub_1001E4874((uint64_t)v9, "kCLConnectionMessageSubscribeKey", (BOOL *)&v8 + 7) & 1) != 0)
  {
    sub_100BA297C(a1, HIBYTE(v8));
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v13 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v10 = 136446210;
      v11 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v10, v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicleSpeed(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return sub_10011A5A8(v9);
}

void sub_100BA295C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100BA297C(_QWORD *a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  int v30;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = a1[6];
    *(_DWORD *)buf = 138412546;
    v28 = v6;
    v29 = 1024;
    v30 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received VehicleSpeed request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v13 = a1[6];
    v23 = 138412546;
    v24 = v13;
    v25 = 1024;
    v26 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Received VehicleSpeed request,client,%@,subscribe,%d", &v23, 18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleSpeed(BOOL, const CLNameValuePair &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (sub_100BAAC04(a1))
  {
    (*(void (**)(_QWORD *, const char *, uint64_t))(*a1 + 32))(a1, "kCLConnectionMessageVehicleSpeed", a2);
    if ((_DWORD)a2)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v8 = a1[6];
        *(_DWORD *)buf = 138412290;
        v28 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "client '%@' subscribing to vehicle speed", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v16 = a1[6];
        v23 = 138412290;
        v24 = v16;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "client '%@' subscribing to vehicle speed", &v23, v22);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleSpeed(BOOL, const CLNameValuePair &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v9 = sub_100B9539C((uint64_t)a1);
      objc_msgSend(*(id *)(*(_QWORD *)v9 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)v9 + 8), 20, 0);
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v11 = a1[6];
        *(_DWORD *)buf = 138412290;
        v28 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "client '%@' unsubscribing from vehicle speed", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v19 = a1[6];
        v23 = 138412290;
        v24 = v19;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "client '%@' unsubscribing from vehicle speed", &v23, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleSpeed(BOOL, const CLNameValuePair &)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v12 = sub_100B9539C((uint64_t)a1);
      objc_msgSend(*(id *)(*(_QWORD *)v12 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v12 + 8), 20);
    }
  }

}

void sub_100BA2E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100BA2E8C(_QWORD *a1, CLConnectionMessage **a2)
{
  const __CFDictionary *Dictionary;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _BYTE v9[16];
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v9, Dictionary);
  HIBYTE(v8) = 0;
  if ((sub_1001E4874((uint64_t)v9, "kCLConnectionMessageSubscribeKey", (BOOL *)&v8 + 7) & 1) != 0)
  {
    sub_100BA30A4(a1, HIBYTE(v8));
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v13 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v10 = 136446210;
      v11 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v10, v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicleHeading(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return sub_10011A5A8(v9);
}

void sub_100BA3084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100BA30A4(_QWORD *a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  int v30;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = a1[6];
    *(_DWORD *)buf = 138412546;
    v28 = v6;
    v29 = 1024;
    v30 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received VehicleHeading request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v13 = a1[6];
    v23 = 138412546;
    v24 = v13;
    v25 = 1024;
    v26 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Received VehicleHeading request,client,%@,subscribe,%d", &v23, 18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleHeading(BOOL, const CLNameValuePair &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (sub_100BAAC04(a1))
  {
    (*(void (**)(_QWORD *, const char *, uint64_t))(*a1 + 32))(a1, "kCLConnectionMessageVehicleHeading", a2);
    if ((_DWORD)a2)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v8 = a1[6];
        *(_DWORD *)buf = 138412290;
        v28 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "client '%@' subscribing to vehicle heading", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v16 = a1[6];
        v23 = 138412290;
        v24 = v16;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "client '%@' subscribing to vehicle heading", &v23, v22);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleHeading(BOOL, const CLNameValuePair &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v9 = sub_100B9539C((uint64_t)a1);
      objc_msgSend(*(id *)(*(_QWORD *)v9 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)v9 + 8), 21, 0);
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v11 = a1[6];
        *(_DWORD *)buf = 138412290;
        v28 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "client '%@' unsubscribing from vehicle heading", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v19 = a1[6];
        v23 = 138412290;
        v24 = v19;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "client '%@' unsubscribing from vehicle heading", &v23, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleHeading(BOOL, const CLNameValuePair &)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v12 = sub_100B9539C((uint64_t)a1);
      objc_msgSend(*(id *)(*(_QWORD *)v12 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v12 + 8), 21);
    }
  }

}

void sub_100BA3578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100BA35B4(_QWORD *a1, CLConnectionMessage **a2)
{
  const __CFDictionary *Dictionary;
  NSObject *v4;
  char *v6;
  uint64_t v7;
  _BYTE v8[16];
  int v9;
  const char *v10;
  uint8_t buf[4];
  const char *v12;

  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v8, Dictionary);
  HIBYTE(v7) = 0;
  if ((sub_1001E4874((uint64_t)v8, "kCLConnectionMessageSubscribeKey", (BOOL *)&v7 + 7) & 1) != 0)
  {
    sub_100BA37CC(a1, HIBYTE(v7));
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v12 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v9 = 136446210;
      v10 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v7) = 12;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v9, v7);
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageGmm(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return sub_10011A5A8(v8);
}

void sub_100BA37AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100BA37CC(_QWORD *a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  _DWORD buf[3];
  __int16 v15;
  int v16;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102174FB8);
  v5 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v6 = a1[6];
    buf[0] = 138543618;
    *(_QWORD *)&buf[1] = v6;
    v15 = 1026;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received GMM request,client,%{public}@,subscribe,%{public}d", (uint8_t *)buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102174FB8);
    v8 = a1[6];
    v10 = 138543618;
    v11 = v8;
    v12 = 1026;
    v13 = a2;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Received GMM request,client,%{public}@,subscribe,%{public}d", &v10, 18);
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestGmm(BOOL, const CLNameValuePair &)", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  (*(void (**)(_QWORD *, const char *, uint64_t))(*a1 + 32))(a1, "kCLConnectionMessageGmm", a2);
  v7 = a1[28];
  if ((_DWORD)a2)
  {
    if (!v7)
      sub_100D790A4();
  }
  else if (v7)
  {
    a1[28] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }

}

void sub_100BA3A58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100BA3A8C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint8_t *v11;
  _BYTE v12[32];
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  if (*(_DWORD *)(a1 + 200))
    return *(_DWORD *)(a1 + 200) == 1;
  if (sub_100243630(a1))
  {
LABEL_5:
    *(_DWORD *)(a1 + 200) = 1;
    return *(_DWORD *)(a1 + 200) == 1;
  }
  if (!sub_101248E2C(0))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102175018);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client %@ cannot access sensor recorder, invalid target.\n", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return *(_DWORD *)(a1 + 200) == 1;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102175018);
    v5 = *(_QWORD *)(a1 + 48);
    v13 = 138412290;
    v14 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "Client %@ cannot access sensor recorder, invalid target.\n", &v13, 12);
LABEL_23:
    v11 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonClient::isAuthorizedForSensorRecorder()", "%s\n", v6);
    if (v11 != buf)
      free(v11);
    return *(_DWORD *)(a1 + 200) == 1;
  }
  v2 = kTCCServiceMotion;
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
  if (TCCAccessCheckAuditToken(v2, v12, 0))
    goto LABEL_5;
  *(_DWORD *)(a1 + 200) = 2;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102175018);
  v7 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Client %@ did not pass entitlement/tcc checks.\n", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102175018);
    v10 = *(_QWORD *)(a1 + 48);
    v13 = 138412290;
    v14 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "Client %@ did not pass entitlement/tcc checks.\n", &v13, 12);
    goto LABEL_23;
  }
  return *(_DWORD *)(a1 + 200) == 1;
}

uint64_t sub_100BA3D98(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  NSNumber *v5;

  v4 = CMErrorMessage;
  v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  return CLConnectionMessage::sendReply(*a2);
}

void sub_100BA3E2C(uint64_t a1, uint64_t *a2)
{
  id v4;
  id v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100243630(a1) & 1) != 0)
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLVehicleConnectionNotifier"));
    objc_msgSend(v5, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3321888768;
    v18[2] = sub_100BA41A8;
    v18[3] = &unk_102174BA0;
    v7 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v18[4] = a1;
    v18[5] = v7;
    v19 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    objc_msgSend(v5, "fetchMostRecentConnectionWithReply:", v18);
    v10 = v19;
    if (v19)
    {
      v11 = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v15 = *(_QWORD *)(a1 + 48);
      v20 = 138412290;
      v21 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", &v20, 12);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicleConnectionMostRecent(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_100BA410C(a1, 106);
  }

}

void sub_100BA40CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100BA410C(uint64_t a1, uint64_t a2)
{
  NSDictionary *v3;
  uint64_t v4;
  NSNumber *v5;

  v4 = CMErrorMessage;
  v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2);
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_100BCB854(a1, &v3);
}

void sub_100BA41A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  CMMotionTimeRange *v5;
  id v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  id v12;
  id v13;
  CMVehicleStateData *v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD v17[2];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  CMVehicleStateData *v25;
  uint64_t v26;
  CMVehicleStateData *v27;

  if (*(double *)a2 <= 0.0)
  {
    v7 = (std::__shared_weak_count *)a1[6];
    v17[0] = a1[5];
    v17[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    sub_100BA3D98((uint64_t)a1, v17);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    v4 = a1[4];
    v5 = -[CMMotionTimeRange initWithStartDate:endDate:]([CMMotionTimeRange alloc], "initWithStartDate:endDate:", *(double *)a2, *(double *)(a2 + 8));
    if (*(_BYTE *)(a2 + 16))
      v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", a2 + 16);
    else
      v6 = 0;
    if (*(_BYTE *)(a2 + 272))
      v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", a2 + 272);
    else
      v12 = 0;
    if (*(_BYTE *)(a2 + 528))
      v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", a2 + 528);
    else
      v13 = 0;
    v14 = -[CMVehicleStateData initWithTimeRange:vehicleName:vehicleModelName:vehicleBluetoothAddress:]([CMVehicleStateData alloc], "initWithTimeRange:vehicleName:vehicleModelName:vehicleBluetoothAddress:", v5, v6, v12, v13);
    v26 = CMVehicleConnectionDataKey;
    v27 = v14;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102175038);
    v15 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
    {
      v16 = *(_QWORD *)(v4 + 48);
      *(_DWORD *)buf = 68289539;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2113;
      v23 = v16;
      v24 = 2113;
      v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Sending vehicle connection\", \"to client\":%{private, location:escape_only}@, \"data\":%{private, location:escape_only}@}", buf, 0x26u);
    }

    CLConnectionMessage::sendReply(a1[5]);
  }
}

void sub_100BA4464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100BA4480(uint64_t a1, uint64_t *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  _QWORD v24[6];
  std::__shared_weak_count *v25;
  int v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100243630(a1) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v18 = *(_QWORD *)(a1 + 48);
      v26 = 138412290;
      v27 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", &v26, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicleStateMostRecentInVehicle(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v7 = 106;
    goto LABEL_15;
  }
  if ((sub_1001B7910() & 0x80000000) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v29 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have access to motion activity spi because the platform is not supported", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v21 = *(_QWORD *)(a1 + 48);
      v26 = 138412290;
      v27 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Client %@ does not have access to motion activity spi because the platform is not supported", &v26, 12);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicleStateMostRecentInVehicle(std::shared_ptr<CLConnectionMessage>)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v7 = 109;
LABEL_15:
    sub_100BA48C8(a1, v7);
    goto LABEL_16;
  }
  v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLVehicleConnectionNotifier"));
  objc_msgSend(v10, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3321888768;
  v24[2] = sub_100BA4964;
  v24[3] = &unk_102174BD0;
  v12 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  v24[4] = a1;
  v24[5] = v12;
  v25 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  objc_msgSend(v10, "fetchMostRecentInVehicleStartAndExitTimesWithReply:", v24);
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_16:

}

void sub_100BA4880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100BA48C8(uint64_t a1, uint64_t a2)
{
  NSDictionary *v3;
  uint64_t v4;
  NSNumber *v5;

  v4 = CMErrorMessage;
  v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2);
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_100BCB8F4(a1, &v3);
}

void sub_100BA4964(uint64_t a1, double a2, double a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  if (a2 <= 0.0)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    v10[0] = *(_QWORD *)(a1 + 40);
    v10[1] = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_100BA3D98(a1, v10);
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    v11[0] = CMVehicleConnectionStartTime;
    v12[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v11[1] = CMVehicleConnectionEndTime;
    v12[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 2);
    CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 40));
  }
}

void sub_100BA4AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100BA4AD4(uint64_t a1, uint64_t a2)
{
  id v4;
  void *Dictionary;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  CLConnectionMessage *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  _QWORD v31[5];
  std::__shared_weak_count *v32;
  _QWORD v33[2];
  int v34;
  uint64_t v35;
  uint8_t buf[4];
  uint64_t v37;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100243630(a1) & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    v6 = Dictionary;
    if (Dictionary
      && (v7 = CMVehicleStateDeviceId, objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMVehicleStateDeviceId))
      && (v8 = CMVehicleStateDeviceType, objc_msgSend(v6, "objectForKeyedSubscript:", CMVehicleStateDeviceType)))
    {
      v9 = objc_msgSend(v6, "objectForKeyedSubscript:", v7);
      v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLVehicleConnectionNotifier"));
      objc_msgSend(v10, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
      v11 = objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", v8), "unsignedIntegerValue");
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3321888768;
      v31[2] = sub_100BA5054;
      v31[3] = &unk_102174C00;
      v12 = *(std::__shared_weak_count **)(a2 + 8);
      v31[4] = *(_QWORD *)a2;
      v32 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      objc_msgSend(v10, "fetchIsDeviceVehicle:deviceType:withReply:", v9, v11, v31);
      v15 = v32;
      if (v32)
      {
        v16 = (unint64_t *)&v32->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        goto LABEL_29;
      }
    }
    else
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102175038);
      v20 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Error checking IsVehicle with device address and type!", buf, 2u);
      }
      v21 = sub_1001BFF7C(115, 0);
      if ((_DWORD)v21)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_102175038);
        LOWORD(v34) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "Error checking IsVehicle with device address and type!", &v34, 2);
        v30 = (uint8_t *)v29;
        v21 = sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicleStateIsVehicle(std::shared_ptr<CLConnectionMessage>)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      v22 = *(CLConnectionMessage **)a2;
      v15 = *(std::__shared_weak_count **)(a2 + 8);
      v33[0] = v22;
      v33[1] = v15;
      if (v15)
      {
        v23 = (unint64_t *)&v15->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      sub_100BA3D98(v21, v33);
      if (v15)
      {
        v25 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v25);
        while (__stlxr(v17 - 1, v25));
LABEL_29:
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102175038);
    v18 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543362;
      v37 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102175038);
      v26 = *(_QWORD *)(a1 + 48);
      v34 = 138543362;
      v35 = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI", &v34, 12);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicleStateIsVehicle(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    sub_100BA4FB8(a1, 106);
  }

}

void sub_100BA4F60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100BA4FB8(uint64_t a1, uint64_t a2)
{
  NSDictionary *v3;
  uint64_t v4;
  NSNumber *v5;

  v4 = CMErrorMessage;
  v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2);
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_100BCB994(a1, &v3);
}

uint64_t sub_100BA5054(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v5;
  NSNumber *v6;

  if (a2)
    v3 = 2;
  else
    v3 = 1;
  v5 = CMVehicleStateIsVehicle;
  v6 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v3);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1);
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BA50F4(uint64_t a1, _QWORD *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  _QWORD v27[5];
  std::__shared_weak_count *v28;
  uint64_t v29;
  _UNKNOWN **v30;
  int v31;
  uint64_t v32;
  _BYTE buf[12];
  char v34;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100243630(a1) & 1) == 0)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102175038);
    v8 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102175038);
      v19 = *(_QWORD *)(a1 + 48);
      v31 = 138543362;
      v32 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI", &v31, 12);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicularOperatorState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    v7 = 106;
    goto LABEL_15;
  }
  if ((sub_1001B7910() & 0x800000000) == 0)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102175038);
    v5 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Client %{public}@ does not have access to vehicular state SPI because the platform is not supported", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102175038);
      v22 = *(_QWORD *)(a1 + 48);
      v31 = 138543362;
      v32 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#Warning Client %{public}@ does not have access to vehicular state SPI because the platform is not supported", &v31, 12);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicularOperatorState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v7 = 109;
LABEL_15:
    sub_100BA5708(a1, v7);
    goto LABEL_33;
  }
  v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLVehicleStateNotifier"));
  objc_msgSend(v10, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  if (v10)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3321888768;
    v27[2] = sub_100BA57A4;
    v27[3] = &unk_102174C30;
    v11 = (std::__shared_weak_count *)a2[1];
    v27[4] = *a2;
    v28 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    objc_msgSend(v10, "fetchVehicularDndOperatorStateWithReply:", v27);
    v14 = v28;
    if (v28)
    {
      v15 = (unint64_t *)&v28->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102175038);
    v17 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Cannot find vehicle state proxy", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102175038);
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "Cannot find vehicle state proxy", &v31, 2);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicularOperatorState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v18 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v29 = CMErrorMessage;
    v30 = &off_10221BD08;
    CLConnectionMessage::sendReply(v18, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
    if (v34 < 0)
      operator delete(*(void **)buf);
  }

LABEL_33:
}

void sub_100BA569C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_100BA5708(uint64_t a1, uint64_t a2)
{
  NSDictionary *v3;
  uint64_t v4;
  NSNumber *v5;

  v4 = CMErrorMessage;
  v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2);
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_100BCBA34(a1, &v3);
}

uint64_t sub_100BA57A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSNumber *v5;

  v4 = CMVehicularOperatorStateKey;
  v5 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BA583C(uint64_t a1, _QWORD *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  _QWORD v27[5];
  std::__shared_weak_count *v28;
  uint64_t v29;
  _UNKNOWN **v30;
  int v31;
  uint64_t v32;
  _BYTE buf[12];
  char v34;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100243630(a1) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v19 = *(_QWORD *)(a1 + 48);
      v31 = 138412290;
      v32 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", &v31, 12);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicularState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    v7 = 106;
    goto LABEL_15;
  }
  if ((sub_1001B7910() & 0x800000000) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have access to vehicular state spi because the platform is not supported", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v22 = *(_QWORD *)(a1 + 48);
      v31 = 138412290;
      v32 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Client %@ does not have access to vehicular state spi because the platform is not supported", &v31, 12);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicularState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v7 = 109;
LABEL_15:
    sub_100BA5E50(a1, v7);
    goto LABEL_33;
  }
  v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLVehicleStateNotifier"));
  objc_msgSend(v10, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  if (v10)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3321888768;
    v27[2] = sub_100BA5EEC;
    v27[3] = &unk_102174C60;
    v11 = (std::__shared_weak_count *)a2[1];
    v27[4] = *a2;
    v28 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    objc_msgSend(v10, "fetchVehicularDndStateAndHintsWithReply:", v27);
    v14 = v28;
    if (v28)
    {
      v15 = (unint64_t *)&v28->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102175038);
    v17 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Cannot find vehicle state proxy", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102175038);
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "Cannot find vehicle state proxy", &v31, 2);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicularState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v18 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v29 = CMErrorMessage;
    v30 = &off_10221BD08;
    CLConnectionMessage::sendReply(v18, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
    if (v34 < 0)
      operator delete(*(void **)buf);
  }

LABEL_33:
}

void sub_100BA5DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_100BA5E50(uint64_t a1, uint64_t a2)
{
  NSDictionary *v3;
  uint64_t v4;
  NSNumber *v5;

  v4 = CMErrorMessage;
  v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2);
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_100BCBAD4(a1, &v3);
}

uint64_t sub_100BA5EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v6[2];
  _QWORD v7[2];

  v6[0] = CMVehicularStateKey;
  v7[0] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2);
  v6[1] = CMVehicularHintsKey;
  v7[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BA5FB0(uint64_t a1, _QWORD *a2)
{
  id v4;
  unint64_t v5;
  uint64_t v6;
  NSNumber *v7;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v6 = CMAvailable;
  if (sub_100243630(a1))
    v5 = ((unint64_t)sub_1001B7910() >> 31) & 1;
  else
    v5 = 0;
  v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
  CLConnectionMessage::sendReply(*a2);

}

void sub_100BA6084(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

uint64_t sub_100BA60B0(uint64_t a1)
{
  return sub_10006771C(*(_QWORD *)(a1 + 32), a1 + 40);
}

void sub_100BA60C0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDaemonClient::onGmmNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102174F38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient::onGmmNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102174F38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient::onGmmNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100B9E1DC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100BA6278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BA6298(uint64_t *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  void *v11;
  uint64_t v12;
  CLConnectionMessage *v13;
  CLConnectionMessage *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  CLConnectionMessage *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  _QWORD v29[2];
  _WORD v30[8];
  _QWORD v31[2];
  uint64_t v32;
  _UNKNOWN **v33;
  id buf[205];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 152))(a1);
  if ((_DWORD)v5 && (v5 = sub_1010C4D54(a1[3]), (v5 & 1) != 0))
  {
    v7 = objc_opt_class(CMFitnessMachineData, v6);
    v9 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v7, objc_opt_class(NSString, v8), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v9);
    v11 = DictionaryOfClasses;
    if (DictionaryOfClasses)
    {
      v12 = CMFitnessMachineDataRecord;
      if (objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMFitnessMachineDataRecord))
      {
        sub_100131938(buf, (uint64_t)"CLDaemonClient.FitnessMachineData", 0);
        objc_msgSend((id)sub_100BA6660((uint64_t)a1), "feedFitnessMachineData:", objc_msgSend(v11, "objectForKeyedSubscript:", v12));
        v13 = *(CLConnectionMessage **)a2;
        v32 = CMReturnCode;
        v33 = &off_10221BD20;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
        CLConnectionMessage::sendReply(v13);
        sub_100131740(buf);
        goto LABEL_26;
      }
    }
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102175058);
    v20 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Error receiving data from fitness machine", (uint8_t *)buf, 2u);
    }
    v21 = sub_1001BFF7C(115, 0);
    if ((_DWORD)v21)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102175058);
      v30[0] = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 17, "Error receiving data from fitness machine", v30, v28);
      v27 = (uint8_t *)v26;
      v21 = sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageFitnessMachineData(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
      if (v27 != (uint8_t *)buf)
        free(v27);
    }
    v22 = *(CLConnectionMessage **)a2;
    v15 = *(std::__shared_weak_count **)(a2 + 8);
    v29[0] = v22;
    v29[1] = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    sub_100BA3D98(v21, v29);
    if (v15)
    {
      v25 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v25);
      while (__stlxr(v19 - 1, v25));
      goto LABEL_12;
    }
  }
  else
  {
    v14 = *(CLConnectionMessage **)a2;
    v15 = *(std::__shared_weak_count **)(a2 + 8);
    v31[0] = v14;
    v31[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    sub_100BA3D98(v5, v31);
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_12:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
LABEL_26:

}

void sub_100BA65FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100BA6660(uint64_t a1)
{
  uint64_t result;
  id v3;

  result = *(_QWORD *)(a1 + 256);
  if (!result)
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLFitnessMachineNotifier"));
    *(_QWORD *)(a1 + 256) = v3;
    objc_msgSend(v3, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    return *(_QWORD *)(a1 + 256);
  }
  return result;
}

void sub_100BA66AC(uint64_t a1, _QWORD *a2)
{
  id v4;
  uint64_t v5;
  double v6;
  unsigned int v7;
  uint64_t v8;
  NSNumber *v9;
  _BYTE v10[8];
  double v11;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1001B7910() & 0x20000) != 0)
  {
    v7 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLGyroCalibrationDatabase")), "syncgetBiasFit:", v10);
    v6 = v11;
    if (v11 > 0.0)
      v5 = v7;
    else
      v5 = 0;
  }
  else
  {
    v5 = (int)objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLGyroCalibrationDatabase")), "syncgetNonFactoryRoundCount") > 0;
  }
  v8 = CMAvailable;
  v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5, v6);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
  CLConnectionMessage::sendReply(*a2);

}

void sub_100BA67B4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

uint64_t sub_100BA67E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *__p;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  sub_1015A2E04(&__p, "com.apple.locationd.catherine_provider");
  v2 = (*(uint64_t (**)(_QWORD *, void **))(*a1 + 40))(a1, &__p);
  v3 = v2;
  if (SBYTE3(v13) < 0)
  {
    operator delete(__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    v5 = a1[6];
    __p = (void *)68289282;
    v10 = 2082;
    v11 = "";
    v12 = 2114;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement access catherine provider SPI\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
  }
  v6 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v7 = a1[6];
    __p = (void *)68289282;
    v10 = 2082;
    v11 = "";
    v12 = 2114;
    v13 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client does not have appropriate entitlement access catherine provider SPI", "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement access catherine provider SPI\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
  return v3;
}

void sub_100BA69C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100BA69EC(_QWORD *a1, CLConnectionMessage **a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  id v9;
  uint64_t v10;
  dispatch_queue_t *v11;
  NSObject *v12;
  _QWORD v13[5];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100BA67E8(a1) & 1) != 0)
  {
    v6 = objc_opt_class(CMCatherineData, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    v9 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v8), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageCatherineDataKey"));
    if (v9)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100BA6BD0;
      v13[3] = &unk_102155328;
      v13[4] = v9;
      sub_100A01AC4((uint64_t)v13);
      v10 = sub_10009ED0C();
      sub_10134BAF0(v10, 1);
      v11 = (dispatch_queue_t *)sub_10009EC60();
      *(_DWORD *)buf = 1;
      sub_100EA54A8(v11, (uint64_t)buf);
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v12 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Packet contains nil catherine data\"}", buf, 0x12u);
      }
    }
  }

}

void sub_100BA6B9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100BA6BD0(uint64_t a1, uint64_t a2)
{
  if (a2)
    sub_100A0177C(a2, *(void **)(a1 + 32));
}

uint64_t sub_100BA6BE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  _BYTE __p[12];
  char v13;

  sub_1015A2E04(__p, "com.apple.locationd.rebuild_gytt");
  v2 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 40))(a1, __p);
  v3 = v2;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[6];
    *(_DWORD *)__p = 138412290;
    *(_QWORD *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to run miniCal", __p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v7 = a1[6];
    v10 = 138412290;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Client %@ does not have appropriate entitlement to run miniCal", &v10, 12);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonClient::isEntitledForMiniCal()", "%s\n", v8);
    if (v9 != __p)
      free(v9);
  }
  return v3;
}

void sub_100BA6DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100BA6E04(uint64_t a1, _QWORD *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  _UNKNOWN **v10;
  uint64_t v11;
  _UNKNOWN **v12;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100BA6BE8((_QWORD *)a1) & 1) == 0)
  {
    v6 = *a2;
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v11 = CMErrorMessage;
    v12 = &off_10221BD38;
    CLConnectionMessage::sendReply(v6, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
LABEL_5:
    if (v8 < 0)
      operator delete(__p[0]);
    goto LABEL_10;
  }
  if ((sub_1001B7910() & 0x2000) == 0)
  {
    v5 = *a2;
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v9 = CMErrorMessage;
    v10 = &off_10221BD50;
    CLConnectionMessage::sendReply(v5, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "isServiceRunning:", CFSTR("CLSensorCalibrationController")))objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLSensorCalibrationController")), "start:", 1);
  CLConnectionMessage::sendReply(*a2);
LABEL_10:

}

void sub_100BA6F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_100BA6FDC(uint64_t a1, int *a2)
{
  char v4;
  char v5;
  uint64_t result;
  int v7;
  NSObject *v8;
  int v9;
  _BYTE *v10;
  NSObject *v11;
  int RemotePid;
  _BYTE *v13;
  void *v14;
  int v15;
  void **v16;
  char *v17;
  char *v18;
  void *v19;
  int v20;
  void **v21;
  char *v22;
  char *v23;
  void *v24[2];
  char v25;
  _BYTE v26[12];
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  _BYTE __p[12];
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;

  sub_1015A2E04(__p, "com.apple.developer.health-movement-disorder");
  v4 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, __p);
  v5 = v4;
  if (SBYTE3(v35) < 0)
  {
    operator delete(*(void **)__p);
    if ((v5 & 1) != 0)
    {
LABEL_3:
      result = sub_1004A13A0(*(_QWORD *)(a1 + 24));
      if ((_DWORD)result)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1) & 1) != 0)
        {
          result = 1;
          v7 = 100;
        }
        else
        {
          if (qword_10229FFF0 != -1)
            dispatch_once(&qword_10229FFF0, &stru_102175078);
          v11 = off_10229FFF8;
          if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_DEFAULT))
          {
            CLConnection::getName(*(CLConnection **)(a1 + 264));
            RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
            v13 = v26;
            *(_DWORD *)__p = 136446722;
            if ((v30 & 0x80000000) != 0)
              v13 = *(_BYTE **)v26;
            *(_QWORD *)&__p[4] = v13;
            v32 = 1026;
            v33 = RemotePid;
            v34 = 2050;
            v35 = a1;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning HealthAssessment,Client failed authorization check, %{public}s, %{public}d, %{public}p", __p, 0x1Cu);
            if (SBYTE3(v30) < 0)
              operator delete(*(void **)v26);
          }
          result = sub_1001BFF7C(115, 2);
          if ((_DWORD)result)
          {
            bzero(__p, 0x65CuLL);
            if (qword_10229FFF0 != -1)
              dispatch_once(&qword_10229FFF0, &stru_102175078);
            v19 = off_10229FFF8;
            CLConnection::getName(*(CLConnection **)(a1 + 264));
            v20 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
            v21 = v24;
            *(_DWORD *)v26 = 136446722;
            if (v25 < 0)
              v21 = (void **)v24[0];
            *(_QWORD *)&v26[4] = v21;
            v27 = 1026;
            v28 = v20;
            v29 = 2050;
            v30 = a1;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v19, 0, "#Warning HealthAssessment,Client failed authorization check, %{public}s, %{public}d, %{public}p", v26, 28);
            v23 = v22;
            if (v25 < 0)
              operator delete(v24[0]);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonClient::isAuthorizedForHealthAssessment(CMError &)", "%s\n", v23);
            if (v23 != __p)
              free(v23);
            result = 0;
          }
          v7 = 111;
        }
      }
      else
      {
        v7 = 109;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 1) != 0)
  {
    goto LABEL_3;
  }
  if (qword_10229FFF0 != -1)
    dispatch_once(&qword_10229FFF0, &stru_102175078);
  v8 = off_10229FFF8;
  if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_DEFAULT))
  {
    CLConnection::getName(*(CLConnection **)(a1 + 264));
    v9 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
    v10 = v26;
    *(_DWORD *)__p = 136446722;
    if ((v30 & 0x80000000) != 0)
      v10 = *(_BYTE **)v26;
    *(_QWORD *)&__p[4] = v10;
    v32 = 1026;
    v33 = v9;
    v34 = 2050;
    v35 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning HealthAssessment,Client failed entitlement check, %{public}s, %{public}d, %{public}p", __p, 0x1Cu);
    if (SBYTE3(v30) < 0)
      operator delete(*(void **)v26);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_102175078);
    v14 = off_10229FFF8;
    CLConnection::getName(*(CLConnection **)(a1 + 264));
    v15 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
    v16 = v24;
    *(_DWORD *)v26 = 136446722;
    if (v25 < 0)
      v16 = (void **)v24[0];
    *(_QWORD *)&v26[4] = v16;
    v27 = 1026;
    v28 = v15;
    v29 = 2050;
    v30 = a1;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v14, 0, "#Warning HealthAssessment,Client failed entitlement check, %{public}s, %{public}d, %{public}p", v26, 28);
    v18 = v17;
    if (v25 < 0)
      operator delete(v24[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonClient::isAuthorizedForHealthAssessment(CMError &)", "%s\n", v18);
    if (v18 != __p)
      free(v18);
    result = 0;
  }
  v7 = 110;
LABEL_26:
  *a2 = v7;
  return result;
}

void sub_100BA74BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100BA7510(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  uint64_t v6;
  CLConnectionMessage *v7;
  objc_class *v8;
  void *ObjectOfClass;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  CLConnectionMessage *v15;
  void *__p[2];
  char v17;
  _QWORD v18[5];
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _UNKNOWN **v22;
  uint64_t v23;
  NSNumber *v24;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v20 = 0;
  v5 = sub_100BA6FDC(a1, (int *)&v20);
  v7 = *a2;
  if ((v5 & 1) != 0)
  {
    v8 = (objc_class *)objc_opt_class(CLHealthAssessmentRecordTypeForDuration, v6);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v7, v8);
    v10 = ObjectOfClass;
    if (ObjectOfClass)
    {
      v11 = objc_msgSend(ObjectOfClass, "dataType");
      objc_msgSend(v10, "duration");
      v13 = v12;
      v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLHealthAssessmentNotifier"));
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100BA7744;
      v18[3] = &unk_102174CF8;
      v19 = v11;
      v18[4] = v13;
      objc_msgSend(v14, "doAsync:", v18);
      CLConnectionMessage::sendReply(*a2);
    }
    else
    {
      v15 = *a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v21 = CMErrorMessage;
      v22 = &off_10221BCD8;
      CLConnectionMessage::sendReply(v15, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
      if (v17 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v23 = CMErrorMessage;
    v24 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
    CLConnectionMessage::sendReply(v7);
  }

}

void sub_100BA76F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_100BA7744(uint64_t a1, uint64_t a2)
{
  return sub_1004A206C(a2, *(_DWORD *)(a1 + 40), *(double *)(a1 + 32));
}

void sub_100BA7758()
{

}

void sub_100BA777C()
{

}

void sub_100BA77A0()
{

}

void sub_100BA77C4(uint64_t a1, uint64_t *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSNumber *v7;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = *a2;
  v6 = CMAuthorized;
  v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100BA3A8C(a1));
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
  CLConnectionMessage::sendReply(v5);

}

void sub_100BA788C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_100BA78B4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  CLConnectionMessage *v5;
  uint64_t v6;
  objc_class *v7;
  void *ObjectOfClass;
  unsigned int v9;
  CLConnectionMessage *v10;
  CLConnectionMessage *v11;
  CLConnectionMessage *v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  _UNKNOWN **v16;
  uint64_t v17;
  NSNumber *v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = *a2;
  v7 = (objc_class *)objc_opt_class(CLSensorRecorderSensorAvailable, v6);
  ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v5, v7);
  if (ObjectOfClass)
  {
    v9 = objc_msgSend(ObjectOfClass, "dataType");
    if (!v9 || (sub_100243630(a1) & 1) != 0)
    {
      v10 = *a2;
      v17 = CMAvailable;
      v18 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_101248E2C(v9));
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
      CLConnectionMessage::sendReply(v10);
      goto LABEL_9;
    }
    v12 = *a2;
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v19 = CMErrorMessage;
    v20 = &off_10221BD68;
    CLConnectionMessage::sendReply(v12, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
  }
  else
  {
    v11 = *a2;
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v15 = CMErrorMessage;
    v16 = &off_10221BCD8;
    CLConnectionMessage::sendReply(v11, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
  }
  if (v14 < 0)
    operator delete(__p[0]);
LABEL_9:

}

void sub_100BA7A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100BA7ACC(uint64_t a1, uint64_t a2)
{
  id v4;
  BOOL v5;
  uint64_t v6;
  CLConnectionMessage *v7;
  objc_class *v8;
  void *ObjectOfClass;
  void *v10;
  id v11;
  unsigned int v12;
  id v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CLConnectionMessage *v20;
  CLConnectionMessage *v21;
  CLConnectionMessage *v22;
  _QWORD v23[7];
  std::__shared_weak_count *v24;
  unsigned int v25;
  void *__p[2];
  char v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;
  _UNKNOWN **v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  _UNKNOWN **v35;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = sub_100BA3A8C(a1);
  v7 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    v8 = (objc_class *)objc_opt_class(CLSensorRecorderSensorMetaRequestById, v6);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v7, v8);
    v10 = ObjectOfClass;
    if (ObjectOfClass)
    {
      v11 = objc_msgSend(ObjectOfClass, "identifier");
      v12 = objc_msgSend(v10, "dataType");
      if (v12 && (sub_100243630(a1) & 1) == 0)
      {
        v22 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v32 = CMErrorMessage;
        v33 = &off_10221BD68;
        CLConnectionMessage::sendReply(v22, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
      }
      else
      {
        if ((sub_101248E2C(v12) & 1) != 0)
        {
          v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLSensorRecorderNotifier"));
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 3321888768;
          v23[2] = sub_100BA7E3C;
          v23[3] = &unk_102174D20;
          v25 = v12;
          v23[4] = v10;
          v23[5] = v11;
          v14 = *(std::__shared_weak_count **)(a2 + 8);
          v23[6] = *(_QWORD *)a2;
          v24 = v14;
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
          }
          objc_msgSend(v13, "doAsync:", v23);
          v17 = v24;
          if (v24)
          {
            v18 = (unint64_t *)&v24->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          goto LABEL_20;
        }
        v21 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v30 = CMErrorMessage;
        v31 = &off_10221BD50;
        CLConnectionMessage::sendReply(v21, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
      }
    }
    else
    {
      v20 = *(CLConnectionMessage **)a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v28 = CMErrorMessage;
      v29 = &off_10221BCD8;
      CLConnectionMessage::sendReply(v20, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1));
    }
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v34 = CMErrorMessage;
    v35 = &off_10221BD68;
    CLConnectionMessage::sendReply(v7, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
  }
  if (v27 < 0)
    operator delete(__p[0]);
LABEL_20:

}

void sub_100BA7DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_100BA7E3C(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  _UNKNOWN **v8;

  v3 = sub_10124BB1C(a2, *(_DWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), (uint64_t)objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", objc_msgSend(*(id *)(a1 + 32), "dataType")));
  v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 48));
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v7 = CMErrorMessage;
    v8 = &off_10221BD80;
    CLConnectionMessage::sendReply(v4, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
    if (v6 < 0)
      operator delete(__p[0]);
  }
}

void sub_100BA7F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BA7F98(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100BA7FBC(uint64_t a1)
{
  return sub_100261F44(a1 + 48);
}

void sub_100BA7FC4(uint64_t a1, uint64_t a2)
{
  id v4;
  BOOL v5;
  uint64_t v6;
  CLConnectionMessage *v7;
  objc_class *v8;
  void *ObjectOfClass;
  void *v10;
  id v11;
  unsigned int v12;
  id v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CLConnectionMessage *v20;
  CLConnectionMessage *v21;
  CLConnectionMessage *v22;
  _QWORD v23[7];
  std::__shared_weak_count *v24;
  unsigned int v25;
  void *__p[2];
  char v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;
  _UNKNOWN **v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  _UNKNOWN **v35;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = sub_100BA3A8C(a1);
  v7 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    v8 = (objc_class *)objc_opt_class(CLSensorRecorderSensorMetaRequestById, v6);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v7, v8);
    v10 = ObjectOfClass;
    if (ObjectOfClass)
    {
      v11 = objc_msgSend(ObjectOfClass, "identifier");
      v12 = objc_msgSend(v10, "dataType");
      if (v12 && (sub_100243630(a1) & 1) == 0)
      {
        v22 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v32 = CMErrorMessage;
        v33 = &off_10221BD68;
        CLConnectionMessage::sendReply(v22, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
      }
      else
      {
        if ((sub_101248E2C(v12) & 1) != 0)
        {
          v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLSensorRecorderNotifier"));
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 3321888768;
          v23[2] = sub_100BA8334;
          v23[3] = &unk_102174D20;
          v25 = v12;
          v23[4] = v10;
          v23[5] = v11;
          v14 = *(std::__shared_weak_count **)(a2 + 8);
          v23[6] = *(_QWORD *)a2;
          v24 = v14;
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
          }
          objc_msgSend(v13, "doAsync:", v23);
          v17 = v24;
          if (v24)
          {
            v18 = (unint64_t *)&v24->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          goto LABEL_20;
        }
        v21 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v30 = CMErrorMessage;
        v31 = &off_10221BD50;
        CLConnectionMessage::sendReply(v21, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
      }
    }
    else
    {
      v20 = *(CLConnectionMessage **)a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v28 = CMErrorMessage;
      v29 = &off_10221BCD8;
      CLConnectionMessage::sendReply(v20, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1));
    }
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v34 = CMErrorMessage;
    v35 = &off_10221BD68;
    CLConnectionMessage::sendReply(v7, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
  }
  if (v27 < 0)
    operator delete(__p[0]);
LABEL_20:

}

void sub_100BA82BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_100BA8334(uint64_t a1, uint64_t *a2)
{
  id v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v4 = objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", objc_msgSend(*(id *)(a1 + 32), "dataType"));
  v5 = sub_10124BB5C(a2, *(_DWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), (uint64_t)v4);
  v6 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v7 = CLConnectionMessage::name(*(CLConnectionMessage **)(a1 + 48));
    CLConnectionMessage::sendReply(v6, v7, v4);
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v10 = CMErrorMessage;
    v11 = &off_10221BD80;
    CLConnectionMessage::sendReply(v6, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
    if (v9 < 0)
      operator delete(__p[0]);
  }
}

void sub_100BA8478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_100BA849C(uint64_t a1, uint64_t a2)
{
  id v4;
  BOOL v5;
  uint64_t v6;
  CLConnectionMessage *v7;
  objc_class *v8;
  void *ObjectOfClass;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  id v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  CLConnectionMessage *v23;
  CLConnectionMessage *v24;
  CLConnectionMessage *v25;
  CLConnectionMessage *v26;
  _QWORD v27[7];
  std::__shared_weak_count *v28;
  unsigned int v29;
  void *__p[2];
  char v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint64_t v36;
  _UNKNOWN **v37;
  uint64_t v38;
  _UNKNOWN **v39;
  uint64_t v40;
  _UNKNOWN **v41;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = sub_100BA3A8C(a1);
  v7 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    v8 = (objc_class *)objc_opt_class(CLSensorRecorderSensorMetaRequestByDateRange, v6);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v7, v8);
    v10 = ObjectOfClass;
    if (ObjectOfClass)
    {
      objc_msgSend(ObjectOfClass, "startTime");
      v12 = v11;
      objc_msgSend(v10, "endTime");
      v14 = v13;
      v15 = objc_msgSend(v10, "dataType");
      if (v15 && (sub_100243630(a1) & 1) == 0)
      {
        v25 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v38 = CMErrorMessage;
        v39 = &off_10221BD68;
        CLConnectionMessage::sendReply(v25, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1));
      }
      else if ((sub_101248E2C(v15) & 1) != 0)
      {
        if (v12 < v14)
        {
          v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLSensorRecorderNotifier"));
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3321888768;
          v27[2] = sub_100BA888C;
          v27[3] = &unk_102174D50;
          v29 = v15;
          *(double *)&v27[4] = v12;
          *(double *)&v27[5] = v14;
          v17 = *(std::__shared_weak_count **)(a2 + 8);
          v27[6] = *(_QWORD *)a2;
          v28 = v17;
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          objc_msgSend(v16, "doAsync:", v27);
          v20 = v28;
          if (v28)
          {
            v21 = (unint64_t *)&v28->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          goto LABEL_22;
        }
        v26 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v34 = CMErrorMessage;
        v35 = &off_10221BD80;
        CLConnectionMessage::sendReply(v26, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
      }
      else
      {
        v24 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v36 = CMErrorMessage;
        v37 = &off_10221BD50;
        CLConnectionMessage::sendReply(v24, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1));
      }
    }
    else
    {
      v23 = *(CLConnectionMessage **)a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v32 = CMErrorMessage;
      v33 = &off_10221BCD8;
      CLConnectionMessage::sendReply(v23, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
    }
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v40 = CMErrorMessage;
    v41 = &off_10221BD68;
    CLConnectionMessage::sendReply(v7, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
  }
  if (v31 < 0)
    operator delete(__p[0]);
LABEL_22:

}

void sub_100BA8808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  uint64_t v25;

  sub_100261F44(v25);

  _Unwind_Resume(a1);
}

void sub_100BA888C(uint64_t a1, uint64_t *a2)
{
  NSMutableArray *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  CLConnectionMessage *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  double v16;
  uint64_t v17;
  _UNKNOWN **v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  unsigned int v24;
  _BYTE buf[12];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  unsigned int v29;

  v4 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 10);
  if (sub_10124BB9C(a2, *(_DWORD *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40)))
  {
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102175098);
    v5 = qword_10229FDB8;
    if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v6;
      v26 = 2048;
      v27 = v7;
      v28 = 1024;
      v29 = -[NSMutableArray count](v4, "count");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "(%f, %f), %d records returned", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_102175098);
      v11 = qword_10229FDB8;
      v13 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 40);
      v19 = 134218496;
      v20 = v13;
      v21 = 2048;
      v22 = v12;
      v23 = 1024;
      v24 = -[NSMutableArray count](v4, "count");
      LODWORD(v16) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 1, "(%f, %f), %d records returned", COERCE_DOUBLE(&v19), v16, v17);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageSensorRecorderGetMetasByDateRange(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v8 = *(CLConnectionMessage **)(a1 + 48);
    v9 = CLConnectionMessage::name(v8);
    CLConnectionMessage::sendReply(v8, v9, v4);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 48);
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v17 = CMErrorMessage;
    v18 = &off_10221BD80;
    CLConnectionMessage::sendReply(v10, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    if (SHIBYTE(v28) < 0)
      operator delete(*(void **)buf);
  }
}

void sub_100BA8B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100BA8B60(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  uint64_t v6;
  CLConnectionMessage *v7;
  objc_class *v8;
  void *ObjectOfClass;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  id v16;
  id v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CLConnectionMessage *v24;
  CLConnectionMessage *v25;
  CLConnectionMessage *v26;
  _QWORD v27[8];
  std::__shared_weak_count *v28;
  unsigned int v29;
  void *__p[2];
  char v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint64_t v36;
  _UNKNOWN **v37;
  uint64_t v38;
  _UNKNOWN **v39;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = sub_100243630(a1);
  v7 = *(CLConnectionMessage **)a2;
  if ((v5 & 1) != 0)
  {
    v8 = (objc_class *)objc_opt_class(CLSensorRecorderWriteSensorDataToFileForDateRange, v6);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v7, v8);
    v10 = ObjectOfClass;
    if (ObjectOfClass)
    {
      objc_msgSend(ObjectOfClass, "startTime");
      v12 = v11;
      objc_msgSend(v10, "endTime");
      v14 = v13;
      v15 = objc_msgSend(v10, "dataType");
      if ((sub_101248E2C(v15) & 1) != 0)
      {
        v16 = objc_msgSend(objc_alloc((Class)NSFileHandle), "initWithFileDescriptor:closeOnDealloc:", CLConnectionMessage::copyFileDescriptor(*(CLConnectionMessage **)a2, 0), 1);
        if (v16 && v12 < v14)
        {
          v17 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLSensorRecorderNotifier"));
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3321888768;
          v27[2] = sub_100BA8F30;
          v27[3] = &unk_102174D88;
          v29 = v15;
          v27[4] = v16;
          *(double *)&v27[5] = v12;
          *(double *)&v27[6] = v14;
          v18 = *(std::__shared_weak_count **)(a2 + 8);
          v27[7] = *(_QWORD *)a2;
          v28 = v18;
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          objc_msgSend(v17, "doAsync:", v27);
          v21 = v28;
          if (v28)
          {
            v22 = (unint64_t *)&v28->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
        else
        {
          v26 = *(CLConnectionMessage **)a2;
          sub_1015A2E04(__p, "kCLConnectionMessageError");
          v34 = CMErrorMessage;
          v35 = &off_10221BD80;
          CLConnectionMessage::sendReply(v26, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
          if (v31 < 0)
            operator delete(__p[0]);
        }

        goto LABEL_22;
      }
      v25 = *(CLConnectionMessage **)a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v36 = CMErrorMessage;
      v37 = &off_10221BD50;
      CLConnectionMessage::sendReply(v25, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1));
    }
    else
    {
      v24 = *(CLConnectionMessage **)a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v32 = CMErrorMessage;
      v33 = &off_10221BCD8;
      CLConnectionMessage::sendReply(v24, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
    }
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v38 = CMErrorMessage;
    v39 = &off_10221BD68;
    CLConnectionMessage::sendReply(v7, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1));
  }
  if (v31 < 0)
    operator delete(__p[0]);
LABEL_22:

}

void sub_100BA8EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_100BA8F30(uint64_t a1, uint64_t a2)
{
  int v3;
  CLConnectionMessage *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  uint64_t v8;
  _UNKNOWN **v9;

  v3 = sub_10124C7B0(a2);
  v4 = *(CLConnectionMessage **)(a1 + 56);
  if (v3)
  {
    v5 = CLConnectionMessage::name(v4);
    CLConnectionMessage::sendReply(v4, v5, &__kCFBooleanTrue);
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v8 = CMErrorMessage;
    v9 = &off_10221BD80;
    CLConnectionMessage::sendReply(v4, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_100BA9040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BA9064(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100BA9088(uint64_t a1)
{
  return sub_100261F44(a1 + 56);
}

void sub_100BA9090(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  uint64_t v6;
  CLConnectionMessage *v7;
  objc_class *v8;
  void *ObjectOfClass;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  id v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CLConnectionMessage *v20;
  CLConnectionMessage *v21;
  _QWORD v22[5];
  std::__shared_weak_count *v23;
  unsigned int v24;
  unsigned int v25;
  void *__p[2];
  char v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;
  _UNKNOWN **v31;
  uint64_t v32;
  _UNKNOWN **v33;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = sub_100243630(a1);
  v7 = *(CLConnectionMessage **)a2;
  if ((v5 & 1) != 0)
  {
    v8 = (objc_class *)objc_opt_class(CLSensorRecorderSensorSampleRate, v6);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v7, v8);
    v10 = ObjectOfClass;
    if (ObjectOfClass)
    {
      v11 = objc_msgSend(ObjectOfClass, "rate");
      v12 = objc_msgSend(v10, "dataType");
      if ((sub_101248E2C(v12) & 1) != 0)
      {
        v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLSensorRecorderNotifier"));
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3321888768;
        v22[2] = sub_100BA9388;
        v22[3] = &unk_102174DB8;
        v24 = v12;
        v25 = v11;
        v14 = *(std::__shared_weak_count **)(a2 + 8);
        v22[4] = *(_QWORD *)a2;
        v23 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        objc_msgSend(v13, "doAsync:", v22);
        v17 = v23;
        if (v23)
        {
          v18 = (unint64_t *)&v23->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        goto LABEL_17;
      }
      v21 = *(CLConnectionMessage **)a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v30 = CMErrorMessage;
      v31 = &off_10221BD50;
      CLConnectionMessage::sendReply(v21, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
    }
    else
    {
      v20 = *(CLConnectionMessage **)a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v28 = CMErrorMessage;
      v29 = &off_10221BCD8;
      CLConnectionMessage::sendReply(v20, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1));
    }
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v32 = CMErrorMessage;
    v33 = &off_10221BD68;
    CLConnectionMessage::sendReply(v7, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
  }
  if (v27 < 0)
    operator delete(__p[0]);
LABEL_17:

}

void sub_100BA9318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_100BA9388(uint64_t a1, uint64_t a2)
{
  int v3;
  CLConnectionMessage *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  uint64_t v8;
  _UNKNOWN **v9;

  v3 = sub_101248F0C(a2, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
  v4 = *(CLConnectionMessage **)(a1 + 32);
  if (v3)
  {
    v5 = CLConnectionMessage::name(v4);
    CLConnectionMessage::sendReply(v4, v5, &__kCFBooleanTrue);
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v8 = CMErrorMessage;
    v9 = &off_10221BD80;
    CLConnectionMessage::sendReply(v4, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_100BA9490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_100BA94B4(uint64_t a1, uint64_t a2)
{
  id v4;
  BOOL v5;
  uint64_t v6;
  CLConnectionMessage *v7;
  objc_class *v8;
  void *ObjectOfClass;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  CLConnectionMessage *v14;
  CLConnectionMessage *v15;
  CLConnectionMessage *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  int v24;
  const char *v25;
  void **v26;
  uint64_t v27;
  id v28;
  std::__shared_weak_count *v29;
  CLConnectionMessage *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  CLConnectionMessage *v37;
  const char *v38;
  void **v39;
  const char *v40;
  void **v41;
  uint64_t v42;
  _QWORD v43[9];
  std::__shared_weak_count *v44;
  unsigned int v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  _UNKNOWN **v49;
  _DWORD v50[4];
  void *__p[2];
  char v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  _UNKNOWN **v56;
  uint64_t v57;
  _UNKNOWN **v58;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = sub_100BA3A8C(a1);
  v7 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    v8 = (objc_class *)objc_opt_class(CLSensorRecorderSensorDataRequestById, v6);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v7, v8);
    v10 = ObjectOfClass;
    if (ObjectOfClass)
    {
      v11 = objc_msgSend(ObjectOfClass, "dataType");
      if (v11 && (sub_100243630(a1) & 1) == 0)
      {
        v16 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v55 = CMErrorMessage;
        v56 = &off_10221BD98;
        CLConnectionMessage::sendReply(v16, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1));
      }
      else if ((sub_101248E2C(v11) & 1) != 0)
      {
        v12 = *(_QWORD *)(a1 + 376);
        if (v12)
        {
          v13 = *(_QWORD *)(a1 + 384);
LABEL_35:
          v27 = *(_QWORD *)(a1 + 392);
          v28 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLSensorRecorderNotifier"));
          v43[0] = _NSConcreteStackBlock;
          v43[1] = 3321888768;
          v43[2] = sub_100BA9D04;
          v43[3] = &unk_102174DF0;
          v43[4] = v27;
          v43[5] = v10;
          v45 = v11;
          v30 = *(CLConnectionMessage **)a2;
          v29 = *(std::__shared_weak_count **)(a2 + 8);
          v43[7] = v12;
          v43[8] = v30;
          v44 = v29;
          if (v29)
          {
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
          }
          v43[6] = v13;
          objc_msgSend(v28, "doAsync:", v43);
          v33 = v44;
          if (v44)
          {
            v34 = (unint64_t *)&v44->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          goto LABEL_14;
        }
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_102175098);
        v17 = qword_10229FDB8;
        if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Allocating mmap buffer.", (uint8_t *)__p, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_10229FDB0 != -1)
            dispatch_once(&qword_10229FDB0, &stru_102175098);
          LOWORD(v50[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FDB8, 2, "Allocating mmap buffer.", v50, 2);
          v39 = (void **)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)", "%s\n", v38);
          if (v39 != __p)
            free(v39);
        }
        *(_QWORD *)(a1 + 392) = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLDaemonClient.SensorRecorderAccel");
        v18 = mmap(0, 0x24000uLL, 3, 4097, -1, 0);
        *(_QWORD *)(a1 + 376) = v18;
        if (v18 == (void *)-1)
        {
          if (qword_10229FDB0 != -1)
            dispatch_once(&qword_10229FDB0, &stru_102175098);
          v21 = qword_10229FDB8;
          if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_ERROR))
          {
            v22 = *__error();
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "mmap failure.  errno %d", (uint8_t *)__p, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_10229FDB0 != -1)
              dispatch_once(&qword_10229FDB0, &stru_102175098);
            v23 = qword_10229FDB8;
            v24 = *__error();
            v50[0] = 67109120;
            v50[1] = v24;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 16, "mmap failure.  errno %d", v50);
            v26 = (void **)v25;
            sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)", "%s\n", v25);
            if (v26 != __p)
              free(v26);
          }
        }
        else
        {
          v19 = dispatch_data_create(v18, 0x24000uLL, 0, _dispatch_data_destructor_munmap);
          if (v19)
          {
            v20 = v19;
            *(_QWORD *)(a1 + 384) = xpc_data_create_with_dispatch_data(v19);

          }
          else
          {
            munmap(*(void **)(a1 + 376), 0x24000uLL);
          }
        }
        v13 = *(_QWORD *)(a1 + 384);
        if (v13)
        {
          v12 = *(_QWORD *)(a1 + 376);
          goto LABEL_35;
        }
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_102175098);
        v36 = qword_10229FDB8;
        if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Did not successfully allocate buffer for sensor recorder.  Returning CMErrorNotAvailable", (uint8_t *)__p, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_10229FDB0 != -1)
            dispatch_once(&qword_10229FDB0, &stru_102175098);
          LOWORD(v50[0]) = 0;
          LODWORD(v42) = 2;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FDB8, 16, "Did not successfully allocate buffer for sensor recorder.  Returning CMErrorNotAvailable", v50, v42);
          v41 = (void **)v40;
          sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)", "%s\n", v40);
          if (v41 != __p)
            free(v41);
        }
        *(_QWORD *)(a1 + 376) = 0;
        v37 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v48 = CMErrorMessage;
        v49 = &off_10221BD50;
        CLConnectionMessage::sendReply(v37, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
      }
      else
      {
        v15 = *(CLConnectionMessage **)a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v53 = CMErrorMessage;
        v54 = &off_10221BD50;
        CLConnectionMessage::sendReply(v15, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1));
      }
    }
    else
    {
      v14 = *(CLConnectionMessage **)a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v46 = CMErrorMessage;
      v47 = &off_10221BCD8;
      CLConnectionMessage::sendReply(v14, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1));
    }
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v57 = CMErrorMessage;
    v58 = &off_10221BD68;
    CLConnectionMessage::sendReply(v7, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1));
  }
  if (v52 < 0)
    operator delete(__p[0]);
LABEL_14:

}

void sub_100BA9C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

void sub_100BA9D04(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  _UNKNOWN **v18;
  _BYTE __p[12];
  __int16 v20;
  id v21;
  char v22;
  _BYTE buf[1632];

  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_102175098);
  v4 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(*(id *)(a1 + 40), "identifier");
    v6 = objc_msgSend(*(id *)(a1 + 40), "metaIdentifier");
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting id, %llu, meta id, %llu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102175098);
    v12 = qword_10229FDB8;
    v13 = objc_msgSend(*(id *)(a1 + 40), "identifier");
    v14 = objc_msgSend(*(id *)(a1 + 40), "metaIdentifier");
    *(_DWORD *)__p = 134218240;
    *(_QWORD *)&__p[4] = v13;
    v20 = 2048;
    v21 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "Requesting id, %llu, meta id, %llu", __p, 22);
    v16 = (char *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  *(_QWORD *)&buf[16] = 0;
  v7 = objc_msgSend(*(id *)(a1 + 40), "identifier");
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)buf = v7;
  *(_QWORD *)&buf[8] = v8;
  *(_DWORD *)&buf[16] = 147456;
  v9 = sub_10124BBD8(a2, *(_DWORD *)(a1 + 80), buf, (uint64_t)objc_msgSend(*(id *)(a1 + 40), "metaIdentifier"));
  v10 = *(_QWORD *)(a1 + 64);
  if (v9)
  {
    v11 = CLConnectionMessage::name(*(CLConnectionMessage **)(a1 + 64));
    CLConnectionMessage::sendReply(v10, v11, *(_QWORD *)(a1 + 48));
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v17 = CMErrorMessage;
    v18 = &off_10221BCD8;
    CLConnectionMessage::sendReply(v10, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    if (v22 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_100BA9FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BA9FEC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100BAA010(uint64_t a1)
{
  return sub_100261F44(a1 + 64);
}

void sub_100BAA018(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  BOOL v5;
  uint64_t v6;
  CLConnectionMessage *v7;
  objc_class *v8;
  void *ObjectOfClass;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  CLConnectionMessage *v15;
  CLConnectionMessage *v16;
  CLConnectionMessage *v17;
  _QWORD v18[5];
  unsigned int v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  _UNKNOWN **v23;
  uint64_t v24;
  _UNKNOWN **v25;
  uint64_t v26;
  _UNKNOWN **v27;
  uint64_t v28;
  _UNKNOWN **v29;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = sub_100BA3A8C(a1);
  v7 = *a2;
  if (v5)
  {
    v8 = (objc_class *)objc_opt_class(CLSensorRecorderRecordSensorTypeFor, v6);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v7, v8);
    v10 = ObjectOfClass;
    if (ObjectOfClass)
    {
      v11 = objc_msgSend(ObjectOfClass, "dataType");
      objc_msgSend(v10, "duration");
      v13 = v12;
      if (v11 && (sub_100243630(a1) & 1) == 0)
      {
        v17 = *a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v26 = CMErrorMessage;
        v27 = &off_10221BD68;
        CLConnectionMessage::sendReply(v17, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
      }
      else
      {
        if ((sub_101248E2C(v11) & 1) != 0)
        {
          v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLSensorRecorderNotifier"));
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472;
          v18[2] = sub_100BAA334;
          v18[3] = &unk_102174CF8;
          v19 = v11;
          v18[4] = v13;
          objc_msgSend(v14, "doAsync:", v18);
          CLConnectionMessage::sendReply(*a2);
          goto LABEL_13;
        }
        v16 = *a2;
        sub_1015A2E04(__p, "kCLConnectionMessageError");
        v24 = CMErrorMessage;
        v25 = &off_10221BD50;
        CLConnectionMessage::sendReply(v16, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
      }
    }
    else
    {
      v15 = *a2;
      sub_1015A2E04(__p, "kCLConnectionMessageError");
      v22 = CMErrorMessage;
      v23 = &off_10221BCD8;
      CLConnectionMessage::sendReply(v15, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
    }
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v28 = CMErrorMessage;
    v29 = &off_10221BD68;
    CLConnectionMessage::sendReply(v7, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1));
  }
  if (v21 < 0)
    operator delete(__p[0]);
LABEL_13:

}

void sub_100BAA2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

BOOL sub_100BAA334(uint64_t a1, uint64_t a2)
{
  return sub_10124BC18(a2, *(_DWORD *)(a1 + 40), *(double *)(a1 + 32));
}

void sub_100BAA348(uint64_t a1, CLConnectionMessage **a2)
{
  id v3;
  void *Dictionary;
  id v5;
  double v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  CLConnectionMessage *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  CLConnectionMessage *v16;
  const char *v17;
  uint8_t *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;
  _UNKNOWN **v22;
  uint8_t buf[8];
  char v24;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  if (Dictionary
    && (v5 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMPredictedWalkDistanceResetDateKey)) != 0)
  {
    objc_msgSend(v5, "doubleValue");
    *(double *)v19 = v6;
    if (v6 == 0.0)
    {
      v16 = *a2;
      sub_1015A2E04(buf, "kCLConnectionMessageError");
      v21 = CMErrorMessage;
      v22 = &off_10221BCD8;
      CLConnectionMessage::sendReply(v16, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
      if (v24 < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      v7 = sub_1001FD94C();
      sub_10018A534(v7, CFSTR("PredictedWalkDistanceResetDate"), v19);
      CLConnectionMessage::sendReply(*a2);
    }
  }
  else
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021750B8);
    v8 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Programmer error: Wrong parameters were passed!", buf, 2u);
    }
    v9 = sub_1001BFF7C(115, 0);
    if ((_DWORD)v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_1021750B8);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 16, "Programmer error: Wrong parameters were passed!", v19, 2);
      v18 = (uint8_t *)v17;
      v9 = sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessagePredictedWalkDistanceReset(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v10 = *a2;
    v11 = (std::__shared_weak_count *)a2[1];
    v20[0] = v10;
    v20[1] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    sub_100BA3D98(v9, v20);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

}

void sub_100BAA60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_100BAA66C(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  CLConnectionMessage *v8;
  std::__shared_weak_count *v9;
  CLConnectionMessage *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  uint64_t v21;
  _UNKNOWN **v22;
  int v23;
  uint64_t v24;
  _BYTE buf[12];
  char v26;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100243630(a1) & 1) != 0)
  {
    if (objc_msgSend(objc_msgSend((id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2), "objectForKeyedSubscript:", CMDatabaseType), "integerValue"))
    {
      v5 = 0;
    }
    else
    {
      v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLGyroCalibrationDatabase"));
    }
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768;
    v19[2] = sub_100BAA9F0;
    v19[3] = &unk_102174E20;
    v10 = *(CLConnectionMessage **)a2;
    v9 = *(std::__shared_weak_count **)(a2 + 8);
    v19[4] = a1;
    v19[5] = v10;
    v20 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    objc_msgSend(v5, "dumpDatabase:onCompletion:", CFSTR("fatEgg"), v19);
    v13 = v20;
    if (v20)
    {
      v14 = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021750D8);
    v6 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
    {
      v7 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate motion entitlement.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021750D8);
      v16 = *(_QWORD *)(a1 + 48);
      v23 = 138543362;
      v24 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 17, "Client %{public}@ does not have appropriate motion entitlement.", &v23, 12);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageWriteDbToFile(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v8 = *(CLConnectionMessage **)a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v21 = CMErrorMessage;
    v22 = &off_10221BD68;
    CLConnectionMessage::sendReply(v8, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
    if (v26 < 0)
      operator delete(*(void **)buf);
  }

}

void sub_100BAA98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

void sub_100BAA9F0(uint64_t a1, uint64_t a2)
{
  NSFileHandle *v4;
  id v5;
  void *v6;
  id v7;
  BOOL v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];

  if (a2)
  {
    v4 = +[NSFileHandle fileHandleForReadingAtPath:](NSFileHandle, "fileHandleForReadingAtPath:", a2);
    v5 = objc_msgSend(objc_alloc((Class)NSFileHandle), "initWithFileDescriptor:", CLConnectionMessage::copyFileDescriptor(*(CLConnectionMessage **)(a1 + 40), 0));
    v6 = v5;
    v7 = 0;
    if (v4)
      v8 = v5 == 0;
    else
      v8 = 1;
    if (!v8)
      v7 = +[CMMotionUtils copyDataFrom:to:](CMMotionUtils, "copyDataFrom:to:", v4, v5);
    -[NSFileHandle closeFile](v4, "closeFile");
    objc_msgSend(v6, "closeFile");
    -[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", a2, 0);
    v9 = *(_QWORD *)(a1 + 40);
    if (v7)
      v10 = &__kCFBooleanTrue;
    else
      v10 = &__kCFBooleanFalse;
    v17[0] = CMReturnCode;
    v17[1] = CMFileSize;
    v18[0] = v10;
    v18[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v7);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
    CLConnectionMessage::sendReply(v9);
  }
  else
  {
    v11 = *(std::__shared_weak_count **)(a1 + 48);
    v16[0] = *(_QWORD *)(a1 + 40);
    v16[1] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    sub_100BA3D98(a1, v16);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_100BAABE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BAAC04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  _BYTE __p[12];
  char v13;

  sub_1015A2E04(__p, "com.apple.locationd.vehicle_data");
  v2 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 40))(a1, __p);
  v3 = v2;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[6];
    *(_DWORD *)__p = 138412290;
    *(_QWORD *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access vehicle data SPI", __p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v7 = a1[6];
    v10 = 138412290;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Client %@ does not have appropriate entitlement to access vehicle data SPI", &v10, 12);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonClient::isEntitledForVehicleData()", "%s\n", v8);
    if (v9 != __p)
      free(v9);
  }
  return v3;
}

void sub_100BAADFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BAAE20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *__p;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  sub_1015A2E04(&__p, "com.apple.locationd.private_info");
  v2 = (*(uint64_t (**)(_QWORD *, void **))(*a1 + 40))(a1, &__p);
  v3 = v2;
  if (SBYTE3(v11) < 0)
  {
    operator delete(__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v5 = a1[6];
    __p = (void *)68289282;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to access MicroLocation SPI\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
  return v3;
}

void sub_100BAAF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BAAF7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *__p;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  sub_1015A2E04(&__p, "com.apple.locationd.microlocation.forced-recording");
  v2 = (*(uint64_t (**)(_QWORD *, void **))(*a1 + 40))(a1, &__p);
  v3 = v2;
  if (SBYTE3(v11) < 0)
  {
    operator delete(__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v5 = a1[6];
    __p = (void *)68289282;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning Client does not have appropriate entitlement to request MicroLocation's forced recording scan\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
  return v3;
}

void sub_100BAB0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFString *sub_100BAB0D8(uint64_t a1)
{
  const __CFString *v2;
  const __CFString *v3;
  __SecTask *v4;
  __SecTask *v5;
  void *v6;
  CFErrorRef v7;
  NSObject *v8;
  CFErrorDomain Domain;
  CFIndex Code;
  CFTypeID v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  audit_token_t token;
  CFErrorRef error;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  CFIndex v27;

  v2 = (const __CFString *)objc_msgSend(*(id *)(a1 + 48), "legacyClientKey");
  if (v2)
    v3 = v2;
  else
    v3 = &stru_1021D8FB8;
  error = 0;
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
  v4 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  if (v4)
  {
    v5 = v4;
    v6 = (void *)SecTaskCopyValueForEntitlement(v4, CFSTR("com.apple.locationd.microlocation.client-identity"), &error);
    v7 = error;
    if (error)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v8 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        Domain = CFErrorGetDomain(error);
        Code = CFErrorGetCode(error);
        *(_DWORD *)buf = 68289538;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2114;
        v25 = (const char *)Domain;
        v26 = 2050;
        v27 = Code;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getMicroLocationClientIdentifier, #Warning SecTaskCopyValueForEntitlement failed \", \"with error\":%{public, location:escape_only}@, \"error code\":%{public}ld}", buf, 0x26u);
      }
      CFRelease(error);
    }
    if (v6)
    {
      v11 = CFGetTypeID(v6);
      if (v11 == CFStringGetTypeID())
        v12 = v6;
      else
        v12 = 0;
      CFRelease(v6);
      if (v7)
        goto LABEL_22;
    }
    else
    {
      v12 = 0;
      if (v7)
      {
LABEL_22:
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v14 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289283;
          v21 = 0;
          v22 = 2082;
          v23 = "";
          v24 = 2081;
          v25 = "com.apple.locationd.microlocation.client-identity";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getMicroLocationClientIdentifier, Warning Issue retrieving entitlement string value\", \"entitlement key\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
      }
    }
    CFRelease(v5);
    if (v12)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v15 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        v16 = (const char *)objc_msgSend(v12, "UTF8String");
        *(_DWORD *)buf = 68289282;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2082;
        v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"getMicroLocationClientIdentifier, MicroLocation entitlement based\", \"client identifier\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return (const __CFString *)v12;
    }
    return v3;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v13 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getMicroLocationClientIdentifier, #Warning SecTaskCreateWithSelf failed\"}", buf, 0x12u);
  }
  return v3;
}

void sub_100BAB470(_QWORD *a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSSet *v10;
  uint64_t DictionaryOfClasses;
  const __CFString *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CLConnectionMessage *v20;
  NSObject *v21;
  void **v22;
  _QWORD v23[5];
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  NSErrorUserInfoKey v27;
  const __CFString *v28;
  const __CFString *v29;
  NSError *v30;
  NSErrorUserInfoKey v31;
  const __CFString *v32;
  const __CFString *v33;
  NSError *v34;
  uint64_t buf;
  __int16 v36;
  const char *v37;
  __int16 v38;
  void **v39;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v6 = (void **)a1[6];
    buf = 68289282;
    v36 = 2082;
    v37 = "";
    v38 = 2114;
    v39 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received current MicroLocation request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) == 0)
  {
    v20 = *(CLConnectionMessage **)a2;
    v33 = CFSTR("kCLConnectionMessageErrorKey");
    v31 = NSLocalizedDescriptionKey;
    v32 = CFSTR("Not entitled for Microlocation.");
    v34 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
LABEL_25:
    CLConnectionMessage::sendReply(v20);
    goto LABEL_26;
  }
  if ((sub_100F262FC() & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v21 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_100197040();
      sub_100186708(__p);
      v22 = v26 >= 0 ? __p : (void **)__p[0];
      buf = 68289282;
      v36 = 2082;
      v37 = "";
      v38 = 2082;
      v39 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (v26 < 0)
        operator delete(__p[0]);
    }
    v20 = *(CLConnectionMessage **)a2;
    v29 = CFSTR("kCLConnectionMessageErrorKey");
    v27 = NSLocalizedDescriptionKey;
    v28 = CFSTR("Microlocation is not available on this platform.");
    v30 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
    goto LABEL_25;
  }
  v8 = objc_opt_class(NSNumber, v7);
  v10 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v8, objc_opt_class(NSString, v9), 0);
  DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v10);
  v12 = sub_100BAB0D8((uint64_t)a1);
  v13 = (void *)sub_100BAB8A4((uint64_t)a1);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3321888768;
  v23[2] = sub_100BAB8F0;
  v23[3] = &unk_102174E50;
  v14 = *(std::__shared_weak_count **)(a2 + 8);
  v23[4] = *(_QWORD *)a2;
  v24 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  objc_msgSend(v13, "requestCurrentMicroLocationForClient:withAdditionalInformation:withReply:", v12, DictionaryOfClasses, v23);
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_26:

}

void sub_100BAB85C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100BAB8A4(uint64_t a1)
{
  uint64_t result;
  id v3;

  result = *(_QWORD *)(a1 + 248);
  if (!result)
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLMicroLocationNotifier"));
    *(_QWORD *)(a1 + 248) = v3;
    objc_msgSend(v3, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    return *(_QWORD *)(a1 + 248);
  }
  return result;
}

uint64_t sub_100BAB8F0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021750F8);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"replying for Microlocation localization request\"}", (uint8_t *)v7, 0x12u);
  }
  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (a2)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("kCLConnectionMessageErrorKey"));
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BABA08(_QWORD *a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSSet *v12;
  void *DictionaryOfClasses;
  const __CFString *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CLConnectionMessage *v22;
  NSObject *v23;
  void **v24;
  CLConnectionMessage *v25;
  _QWORD v26[5];
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  NSErrorUserInfoKey v30;
  const __CFString *v31;
  const __CFString *v32;
  NSError *v33;
  NSErrorUserInfoKey v34;
  const __CFString *v35;
  const __CFString *v36;
  NSError *v37;
  NSErrorUserInfoKey v38;
  const __CFString *v39;
  const __CFString *v40;
  NSError *v41;
  uint64_t buf;
  __int16 v43;
  const char *v44;
  __int16 v45;
  void **v46;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v6 = (void **)a1[6];
    buf = 68289282;
    v43 = 2082;
    v44 = "";
    v45 = 2114;
    v46 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received Microlocation recording scan request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) == 0)
  {
    v22 = *(CLConnectionMessage **)a2;
    v40 = CFSTR("kCLConnectionMessageErrorKey");
    v38 = NSLocalizedDescriptionKey;
    v39 = CFSTR("Not entitled for Microlocation.");
    v41 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
LABEL_27:
    CLConnectionMessage::sendReply(v22);
    goto LABEL_28;
  }
  if ((sub_100F262FC() & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v23 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_100197040();
      sub_100186708(__p);
      v24 = v29 >= 0 ? __p : (void **)__p[0];
      buf = 68289282;
      v43 = 2082;
      v44 = "";
      v45 = 2082;
      v46 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    v22 = *(CLConnectionMessage **)a2;
    v36 = CFSTR("kCLConnectionMessageErrorKey");
    v34 = NSLocalizedDescriptionKey;
    v35 = CFSTR("Microlocation is not available on this platform.");
    v37 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    goto LABEL_27;
  }
  v8 = objc_opt_class(NSNumber, v7);
  v10 = objc_opt_class(NSString, v9);
  v12 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v8, v10, objc_opt_class(NSUUID, v11), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v12);
  if (objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKey:", CFSTR("private.MicroLocation.forced.recordingRequest")), "BOOLValue")&& (sub_100BAAF7C(a1) & 1) == 0)
  {
    v25 = *(CLConnectionMessage **)a2;
    v32 = CFSTR("kCLConnectionMessageErrorKey");
    v30 = NSLocalizedDescriptionKey;
    v31 = CFSTR("Not entitled for forced recording.");
    v33 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
    CLConnectionMessage::sendReply(v25);
  }
  else
  {
    v14 = sub_100BAB0D8((uint64_t)a1);
    v15 = (void *)sub_100BAB8A4((uint64_t)a1);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3321888768;
    v26[2] = sub_100BABF04;
    v26[3] = &unk_102174E50;
    v16 = *(std::__shared_weak_count **)(a2 + 8);
    v26[4] = *(_QWORD *)a2;
    v27 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    objc_msgSend(v15, "requestMicroLocationRecordingScanForClient:withAdditionalInformation:withReply:", v14, DictionaryOfClasses, v26);
    v19 = v27;
    if (v27)
    {
      v20 = (unint64_t *)&v27->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
LABEL_28:

}

void sub_100BABEB8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_100BABF04(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021750F8);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"replying for Microlocation recording request\"}", (uint8_t *)v7, 0x12u);
  }
  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (a2)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("kCLConnectionMessageErrorKey"));
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BAC01C(_QWORD *a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  void **v6;
  void *Dictionary;
  void *v8;
  const __CFString *v9;
  id v10;
  id v11;
  NSObject *v12;
  void **v13;
  id v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CLConnectionMessage *v22;
  NSObject *v23;
  void **v24;
  CLConnectionMessage *v25;
  _QWORD v26[5];
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  void **v35;
  __int16 v36;
  id v37;
  NSErrorUserInfoKey v38;
  const __CFString *v39;
  const __CFString *v40;
  NSError *v41;
  NSErrorUserInfoKey v42;
  const __CFString *v43;
  const __CFString *v44;
  NSError *v45;
  NSErrorUserInfoKey v46;
  const __CFString *v47;
  const __CFString *v48;
  NSError *v49;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v6 = (void **)a1[6];
    *(_DWORD *)buf = 68289282;
    v31 = 0;
    v32 = 2082;
    v33 = "";
    v34 = 2114;
    v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received Microlocation truth donation request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) == 0)
  {
    v22 = *(CLConnectionMessage **)a2;
    v48 = CFSTR("kCLConnectionMessageErrorKey");
    v46 = NSLocalizedDescriptionKey;
    v47 = CFSTR("Not entitled for Microlocation.");
    v49 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1);
LABEL_32:
    CLConnectionMessage::sendReply(v22);
    goto LABEL_34;
  }
  if ((sub_100F262FC() & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v23 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_100197040();
      sub_100186708(__p);
      v24 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    v22 = *(CLConnectionMessage **)a2;
    v44 = CFSTR("kCLConnectionMessageErrorKey");
    v42 = NSLocalizedDescriptionKey;
    v43 = CFSTR("Microlocation is not available on this platform.");
    v45 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1);
    goto LABEL_32;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  v8 = Dictionary;
  if (Dictionary
    && objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationTruthLabelKey"))
    && objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationRecordingTriggerUuidKey")))
  {
    v9 = sub_100BAB0D8((uint64_t)a1);
    v10 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationTruthLabelKey")));
    v11 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationRecordingTriggerUuidKey")));
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021750F8);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      v13 = (void **)objc_msgSend(objc_msgSend(v10, "UUIDString"), "UTF8String");
      v14 = objc_msgSend(objc_msgSend(v11, "UUIDString"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = v13;
      v36 = 2082;
      v37 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient, truthlabel donation event\", \"truthLabelUUID: \":%{public, location:escape_only}s, \"triggerUUID: \":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v15 = (void *)sub_100BAB8A4((uint64_t)a1);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3321888768;
    v26[2] = sub_100BAC5FC;
    v26[3] = &unk_102174E50;
    v16 = *(std::__shared_weak_count **)(a2 + 8);
    v26[4] = *(_QWORD *)a2;
    v27 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    objc_msgSend(v15, "donateTruthTagLabelForClient:truthLabelUUID:recordingTriggerUUID:withReply:", v9, v10, v11, v26);
    v19 = v27;
    if (v27)
    {
      v20 = (unint64_t *)&v27->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    v25 = *(CLConnectionMessage **)a2;
    v40 = CFSTR("kCLConnectionMessageErrorKey");
    v38 = NSLocalizedDescriptionKey;
    v39 = CFSTR("Invalid parameters. Check truthLabelUUID and recordingTriggerUUID");
    v41 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
    CLConnectionMessage::sendReply(v25);
  }
LABEL_34:

}

void sub_100BAC5AC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_100BAC5FC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021750F8);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"donate truth label is replied\"}", (uint8_t *)v7, 0x12u);
  }
  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (a2)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("kCLConnectionMessageErrorKey"));
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BAC714(_QWORD *a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  void **v6;
  void *Dictionary;
  void *v8;
  const __CFString *v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  void **v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CLConnectionMessage *v22;
  NSObject *v23;
  void **v24;
  CLConnectionMessage *v25;
  _QWORD v26[5];
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  NSErrorUserInfoKey v30;
  const __CFString *v31;
  const __CFString *v32;
  NSError *v33;
  NSErrorUserInfoKey v34;
  const __CFString *v35;
  const __CFString *v36;
  NSError *v37;
  NSErrorUserInfoKey v38;
  const __CFString *v39;
  const __CFString *v40;
  NSError *v41;
  uint64_t buf;
  __int16 v43;
  const char *v44;
  __int16 v45;
  void **v46;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v6 = (void **)a1[6];
    buf = 68289282;
    v43 = 2082;
    v44 = "";
    v45 = 2114;
    v46 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received Microlocation truth donation between dates request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) == 0)
  {
    v22 = *(CLConnectionMessage **)a2;
    v40 = CFSTR("kCLConnectionMessageErrorKey");
    v38 = NSLocalizedDescriptionKey;
    v39 = CFSTR("Not entitled for Microlocation.");
    v41 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
LABEL_33:
    CLConnectionMessage::sendReply(v22);
    goto LABEL_35;
  }
  if ((sub_100F262FC() & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v23 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_100197040();
      sub_100186708(__p);
      v24 = v29 >= 0 ? __p : (void **)__p[0];
      buf = 68289282;
      v43 = 2082;
      v44 = "";
      v45 = 2082;
      v46 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    v22 = *(CLConnectionMessage **)a2;
    v36 = CFSTR("kCLConnectionMessageErrorKey");
    v34 = NSLocalizedDescriptionKey;
    v35 = CFSTR("Microlocation is not available on this platform.");
    v37 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    goto LABEL_33;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  v8 = Dictionary;
  if (Dictionary
    && objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationTruthLabelKey"))
    && objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationTruthLabelStartDateKey"))
    && objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationTruthLabelEndDateKey")))
  {
    v9 = sub_100BAB0D8((uint64_t)a1);
    v10 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationTruthLabelKey")));
    v11 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationTruthLabelStartDateKey"));
    v12 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMicroLocationTruthLabelEndDateKey"));
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021750F8);
    v13 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      v14 = (void **)objc_msgSend(objc_msgSend(v10, "UUIDString"), "UTF8String");
      buf = 68289282;
      v43 = 2082;
      v44 = "";
      v45 = 2082;
      v46 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient, truthlabel donation between dates event\", \"truthLabelUUID: \":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
    v15 = (void *)sub_100BAB8A4((uint64_t)a1);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3321888768;
    v26[2] = sub_100BACCF0;
    v26[3] = &unk_102174E50;
    v16 = *(std::__shared_weak_count **)(a2 + 8);
    v26[4] = *(_QWORD *)a2;
    v27 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    objc_msgSend(v15, "donateTruthTagLabelForClient:truthLabelUUID:betweenDate:andDate:withReply:", v9, v10, v11, v12, v26);
    v19 = v27;
    if (v27)
    {
      v20 = (unint64_t *)&v27->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    v25 = *(CLConnectionMessage **)a2;
    v32 = CFSTR("kCLConnectionMessageErrorKey");
    v30 = NSLocalizedDescriptionKey;
    v31 = CFSTR("Invalid parameters. Check truthLabelUUID, startDate and endDate");
    v33 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
    CLConnectionMessage::sendReply(v25);
  }
LABEL_35:

}

void sub_100BACC9C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_100BACCF0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021750F8);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"donate truth label between dates is replied\"}", (uint8_t *)v7, 0x12u);
  }
  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (a2)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("kCLConnectionMessageErrorKey"));
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BACE08(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  void **v4;
  const __CFString *v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void **v15;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v3 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v4 = (void **)a1[6];
    *(_DWORD *)buf = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received purge Microlocation semi-supervised data request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) != 0)
  {
    if ((sub_100F262FC() & 1) != 0)
    {
      v5 = sub_100BAB0D8((uint64_t)a1);
      objc_msgSend((id)sub_100BAB8A4((uint64_t)a1), "purgeMicroLocationSemiSupervisedDataForClient:", v5);
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        sub_100197040();
        sub_100186708(__p);
        if (v9 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        v14 = 2082;
        v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v9 < 0)
          operator delete(__p[0]);
      }
    }
  }

}

void sub_100BAD000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100BAD030(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  void **v4;
  char v5;
  char v6;
  NSObject *v7;
  void **v8;
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v12;
  uint8_t buf[8];
  __int16 v14;
  const char *v15;
  __int16 v16;
  void **v17;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v3 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v4 = (void **)a1[6];
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2114;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received purge Microlocation data request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) != 0)
  {
    sub_1015A2E04(buf, "com.apple.locationd.milo_purge_data");
    v5 = (*(uint64_t (**)(_QWORD *, uint8_t *))(*a1 + 40))(a1, buf);
    v6 = v5;
    if (SBYTE3(v17) < 0)
    {
      operator delete(*(void **)buf);
      if ((v6 & 1) != 0)
      {
LABEL_8:
        if ((sub_100F262FC() & 1) != 0)
        {
          objc_msgSend((id)sub_100BAB8A4((uint64_t)a1), "purgeAllMicroLocationData");
        }
        else
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
          v9 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
          {
            sub_100197040();
            sub_100186708(__p);
            if (v12 >= 0)
              v10 = __p;
            else
              v10 = (void **)__p[0];
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            v14 = 2082;
            v15 = "";
            v16 = 2082;
            v17 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (v12 < 0)
              operator delete(__p[0]);
          }
        }
        goto LABEL_23;
      }
    }
    else if ((v5 & 1) != 0)
    {
      goto LABEL_8;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v7 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v8 = (void **)a1[6];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2114;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning Client does not have appropriate entitlement to request purge of milo data\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
LABEL_23:

}

void sub_100BAD2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100BAD334(_QWORD *a1, uint64_t *a2)
{
  id v4;
  NSObject *v5;
  void **v6;
  char v7;
  char v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void **v18;
  NSObject *v19;
  void **v20;
  NSError *v21;
  uint64_t v22;
  _QWORD v23[5];
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  const __CFString *v27;
  NSError *v28;
  NSErrorUserInfoKey v29;
  const __CFString *v30;
  NSErrorUserInfoKey v31;
  const __CFString *v32;
  const __CFString *v33;
  NSError *v34;
  NSErrorUserInfoKey v35;
  const __CFString *v36;
  const __CFString *v37;
  NSError *v38;
  uint8_t buf[8];
  __int16 v40;
  const char *v41;
  __int16 v42;
  void **v43;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v6 = (void **)a1[6];
    *(_QWORD *)buf = 68289282;
    v40 = 2082;
    v41 = "";
    v42 = 2114;
    v43 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received export Microlocation database tables request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) == 0)
  {
    v16 = *a2;
    v37 = CFSTR("kCLConnectionMessageErrorKey");
    v35 = NSLocalizedDescriptionKey;
    v36 = CFSTR("Not entitled for Microlocation.");
    v38 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
LABEL_27:
    CLConnectionMessage::sendReply(v16);
    goto LABEL_28;
  }
  if ((sub_100F262FC() & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v17 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_100197040();
      sub_100186708(__p);
      v18 = v26 >= 0 ? __p : (void **)__p[0];
      *(_QWORD *)buf = 68289282;
      v40 = 2082;
      v41 = "";
      v42 = 2082;
      v43 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v26 < 0)
        operator delete(__p[0]);
    }
    v16 = *a2;
    v33 = CFSTR("kCLConnectionMessageErrorKey");
    v31 = NSLocalizedDescriptionKey;
    v32 = CFSTR("Microlocation is not available on this platform.");
    v34 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
    goto LABEL_27;
  }
  sub_1015A2E04(buf, "com.apple.locationd.microlocation.export-db");
  v7 = (*(uint64_t (**)(_QWORD *, uint8_t *))(*a1 + 40))(a1, buf);
  v8 = v7;
  if (SBYTE3(v43) < 0)
  {
    operator delete(*(void **)buf);
    if ((v8 & 1) != 0)
      goto LABEL_9;
  }
  else if ((v7 & 1) != 0)
  {
LABEL_9:
    v9 = (void *)sub_100BAB8A4((uint64_t)a1);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3321888768;
    v23[2] = sub_100BAD880;
    v23[3] = &unk_102174E80;
    v10 = (std::__shared_weak_count *)a2[1];
    v23[4] = *a2;
    v24 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    objc_msgSend(v9, "exportMicroLocationDatabaseTablesWithReply:", v23);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    goto LABEL_28;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v19 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v20 = (void **)a1[6];
    *(_QWORD *)buf = 68289282;
    v40 = 2082;
    v41 = "";
    v42 = 2114;
    v43 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning Client does not have appropriate entitlement to request MicroLocation export database tables\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v29 = NSLocalizedDescriptionKey;
  v30 = CFSTR("Not entitled for export database.");
  v21 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
  v22 = *a2;
  v27 = CFSTR("kCLConnectionMessageErrorKey");
  v28 = v21;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  CLConnectionMessage::sendReply(v22);
LABEL_28:

}

void sub_100BAD824(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_100BAD880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;

  v6 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 2);
  v7 = v6;
  if (a2)
    objc_msgSend(v6, "setObject:forKey:", a2, CFSTR("kCLConnectionMessageErrorKey"));
  if (a3)
    objc_msgSend(v7, "setObject:forKey:", a3, CFSTR("kCLConnectionMessageMicroLocationExportDatabaseTablesInfoKey"));
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BAD900(_QWORD *a1, uint64_t *a2)
{
  id v4;
  NSObject *v5;
  void **v6;
  char v7;
  char v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void **v18;
  NSObject *v19;
  void **v20;
  NSError *v21;
  uint64_t v22;
  _QWORD v23[5];
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  const __CFString *v27;
  NSError *v28;
  NSErrorUserInfoKey v29;
  const __CFString *v30;
  NSErrorUserInfoKey v31;
  const __CFString *v32;
  const __CFString *v33;
  NSError *v34;
  NSErrorUserInfoKey v35;
  const __CFString *v36;
  const __CFString *v37;
  NSError *v38;
  uint8_t buf[8];
  __int16 v40;
  const char *v41;
  __int16 v42;
  void **v43;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v6 = (void **)a1[6];
    *(_QWORD *)buf = 68289282;
    v40 = 2082;
    v41 = "";
    v42 = 2114;
    v43 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received export Microlocation data for migration request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) == 0)
  {
    v16 = *a2;
    v37 = CFSTR("kCLConnectionMessageErrorKey");
    v35 = NSLocalizedDescriptionKey;
    v36 = CFSTR("Not entitled for Microlocation.");
    v38 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
LABEL_27:
    CLConnectionMessage::sendReply(v16);
    goto LABEL_28;
  }
  if ((sub_100F262FC() & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v17 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_100197040();
      sub_100186708(__p);
      v18 = v26 >= 0 ? __p : (void **)__p[0];
      *(_QWORD *)buf = 68289282;
      v40 = 2082;
      v41 = "";
      v42 = 2082;
      v43 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v26 < 0)
        operator delete(__p[0]);
    }
    v16 = *a2;
    v33 = CFSTR("kCLConnectionMessageErrorKey");
    v31 = NSLocalizedDescriptionKey;
    v32 = CFSTR("Microlocation is not available on this platform.");
    v34 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
    goto LABEL_27;
  }
  sub_1015A2E04(buf, "com.apple.locationd.microlocation.export-db");
  v7 = (*(uint64_t (**)(_QWORD *, uint8_t *))(*a1 + 40))(a1, buf);
  v8 = v7;
  if (SBYTE3(v43) < 0)
  {
    operator delete(*(void **)buf);
    if ((v8 & 1) != 0)
      goto LABEL_9;
  }
  else if ((v7 & 1) != 0)
  {
LABEL_9:
    v9 = (void *)sub_100BAB8A4((uint64_t)a1);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3321888768;
    v23[2] = sub_100BADE4C;
    v23[3] = &unk_102174E80;
    v10 = (std::__shared_weak_count *)a2[1];
    v23[4] = *a2;
    v24 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    objc_msgSend(v9, "exportMicroLocationDataForMigrationWithReply:", v23);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    goto LABEL_28;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v19 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v20 = (void **)a1[6];
    *(_QWORD *)buf = 68289282;
    v40 = 2082;
    v41 = "";
    v42 = 2114;
    v43 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning Client does not have appropriate entitlement to request MicroLocation export database tables\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v29 = NSLocalizedDescriptionKey;
  v30 = CFSTR("Not entitled for export database.");
  v21 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
  v22 = *a2;
  v27 = CFSTR("kCLConnectionMessageErrorKey");
  v28 = v21;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  CLConnectionMessage::sendReply(v22);
LABEL_28:

}

void sub_100BADDF0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_100BADE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;

  v6 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 2);
  v7 = v6;
  if (a2)
    objc_msgSend(v6, "setObject:forKey:", a2, CFSTR("kCLConnectionMessageErrorKey"));
  if (a3)
    objc_msgSend(v7, "setObject:forKey:", a3, CFSTR("kCLConnectionMessageMicroLocationExportDataForMigrationInfoKey"));
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BADECC(_QWORD *a1, uint64_t *a2)
{
  id v4;
  NSObject *v5;
  void **v6;
  char v7;
  char v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void **v18;
  NSObject *v19;
  void **v20;
  NSError *v21;
  uint64_t v22;
  _QWORD v23[5];
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  const __CFString *v27;
  NSError *v28;
  NSErrorUserInfoKey v29;
  const __CFString *v30;
  NSErrorUserInfoKey v31;
  const __CFString *v32;
  const __CFString *v33;
  NSError *v34;
  NSErrorUserInfoKey v35;
  const __CFString *v36;
  const __CFString *v37;
  NSError *v38;
  uint8_t buf[8];
  __int16 v40;
  const char *v41;
  __int16 v42;
  void **v43;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v6 = (void **)a1[6];
    *(_QWORD *)buf = 68289282;
    v40 = 2082;
    v41 = "";
    v42 = 2114;
    v43 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received export per anchor per cluster measurement value statistics request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) == 0)
  {
    v16 = *a2;
    v37 = CFSTR("kCLConnectionMessageErrorKey");
    v35 = NSLocalizedDescriptionKey;
    v36 = CFSTR("Not entitled for Microlocation.");
    v38 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
LABEL_27:
    CLConnectionMessage::sendReply(v16);
    goto LABEL_28;
  }
  if ((sub_100F262FC() & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v17 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_100197040();
      sub_100186708(__p);
      v18 = v26 >= 0 ? __p : (void **)__p[0];
      *(_QWORD *)buf = 68289282;
      v40 = 2082;
      v41 = "";
      v42 = 2082;
      v43 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v26 < 0)
        operator delete(__p[0]);
    }
    v16 = *a2;
    v33 = CFSTR("kCLConnectionMessageErrorKey");
    v31 = NSLocalizedDescriptionKey;
    v32 = CFSTR("Microlocation is not available on this platform.");
    v34 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
    goto LABEL_27;
  }
  sub_1015A2E04(buf, "com.apple.locationd.microlocation.source-statistics");
  v7 = (*(uint64_t (**)(_QWORD *, uint8_t *))(*a1 + 40))(a1, buf);
  v8 = v7;
  if (SBYTE3(v43) < 0)
  {
    operator delete(*(void **)buf);
    if ((v8 & 1) != 0)
      goto LABEL_9;
  }
  else if ((v7 & 1) != 0)
  {
LABEL_9:
    v9 = (void *)sub_100BAB8A4((uint64_t)a1);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3321888768;
    v23[2] = sub_100BAE418;
    v23[3] = &unk_102174E80;
    v10 = (std::__shared_weak_count *)a2[1];
    v23[4] = *a2;
    v24 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    objc_msgSend(v9, "requestAnchorValueStatisticsWithReply:", v23);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    goto LABEL_28;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v19 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v20 = (void **)a1[6];
    *(_QWORD *)buf = 68289282;
    v40 = 2082;
    v41 = "";
    v42 = 2114;
    v43 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning, client is not entitled to request Microlocation to export static sources' value statistics\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  v29 = NSLocalizedDescriptionKey;
  v30 = CFSTR("Not entitled for exporting anchor value statistics");
  v21 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
  v22 = *a2;
  v27 = CFSTR("kCLConnectionMessageErrorKey");
  v28 = v21;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  CLConnectionMessage::sendReply(v22);
LABEL_28:

}

void sub_100BAE3BC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100261F44(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_100BAE418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;

  v6 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 2);
  v7 = v6;
  if (a2)
    objc_msgSend(v6, "setObject:forKey:", a2, CFSTR("kCLConnectionMessageErrorKey"));
  if (a3)
    objc_msgSend(v7, "setObject:forKey:", a3, CFSTR("kCLConnectionMessageMicroLocationRequestStaticSourcesStatisticsInfoKey"));
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BAE498(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  void **v5;
  const __CFString *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void **v16;
  uint64_t v17;
  _QWORD v18[5];
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  NSErrorUserInfoKey v22;
  const __CFString *v23;
  const __CFString *v24;
  NSError *v25;
  NSErrorUserInfoKey v26;
  const __CFString *v27;
  const __CFString *v28;
  NSError *v29;
  uint64_t buf;
  __int16 v31;
  const char *v32;
  __int16 v33;
  void **v34;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v5 = (void **)a1[6];
    buf = 68289282;
    v31 = 2082;
    v32 = "";
    v33 = 2114;
    v34 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received current MicroLocation request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if ((sub_100BAAE20(a1) & 1) != 0)
  {
    if ((sub_100F262FC() & 1) != 0)
    {
      v6 = sub_100BAB0D8((uint64_t)a1);
      v7 = (void *)sub_100BAB8A4((uint64_t)a1);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3321888768;
      v18[2] = sub_100BAE84C;
      v18[3] = &unk_102174E50;
      v8 = (std::__shared_weak_count *)a2[1];
      v18[4] = *a2;
      v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      objc_msgSend(v7, "requestMicroLocationLearningForClient_Legacy:withReply:", v6, v18);
      v11 = v19;
      if (v19)
      {
        v12 = (unint64_t *)&v19->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v15 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        sub_100197040();
        sub_100186708(__p);
        v16 = v21 >= 0 ? __p : (void **)__p[0];
        buf = 68289282;
        v31 = 2082;
        v32 = "";
        v33 = 2082;
        v34 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      v17 = *a2;
      v24 = CFSTR("kCLConnectionMessageErrorKey");
      v22 = NSLocalizedDescriptionKey;
      v23 = CFSTR("Microlocation is not available on this platform.");
      v25 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
      CLConnectionMessage::sendReply(v17);
    }
  }
  else
  {
    v14 = *a2;
    v28 = CFSTR("kCLConnectionMessageErrorKey");
    v26 = NSLocalizedDescriptionKey;
    v27 = CFSTR("Not entitled for Microlocation.");
    v29 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
    CLConnectionMessage::sendReply(v14);
  }
}

void sub_100BAE830(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BAE84C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021750F8);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"replying for Microlocation learning request\"}", (uint8_t *)v7, 0x12u);
  }
  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (a2)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("kCLConnectionMessageErrorKey"));
  return CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
}

void sub_100BAE964(uint64_t a1, _QWORD *a2)
{
  id v4;
  NSObject *v5;
  id v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _QWORD v16[5];
  std::__shared_weak_count *v17;
  __int16 v18[8];
  uint64_t v19;
  _UNKNOWN **v20;
  uint8_t buf[8];
  char v22;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102175118);
  v5 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received request to trigger VO2Max retrocompute", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102175118);
    v18[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "Received request to trigger VO2Max retrocompute", v18, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleTriggerVo2MaxRetrocompute(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "isServiceRunning:", CFSTR("CLVO2MaxService")))
  {
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:forClient:", CFSTR("CLVO2MaxService"), CFSTR("CLClientManager"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3321888768;
    v16[2] = sub_100BAEC9C;
    v16[3] = &unk_10215EC80;
    v7 = (std::__shared_weak_count *)a2[1];
    v16[4] = *a2;
    v17 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    objc_msgSend(v6, "triggerRetrocomputeWithReply:", v16);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v13 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v19 = CMErrorMessage;
    v20 = &off_10221BD50;
    CLConnectionMessage::sendReply(v13, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
    if (v22 < 0)
      operator delete(*(void **)buf);
  }

}

void sub_100BAEC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_100BAEC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;
  uint64_t v6;
  NSNumber *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)a2 == 100)
  {
    CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
  }
  else
  {
    sub_1015A2E04(__p, "kCLConnectionMessageError");
    v6 = CMErrorMessage;
    v7 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2);
    CLConnectionMessage::sendReply(v2, __p, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_100BAED98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_100BAEDBC(uint64_t a1, _QWORD *a2)
{
  id v4;
  NSObject *v5;
  id v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _QWORD v16[5];
  std::__shared_weak_count *v17;
  __int16 v18[8];
  uint64_t v19;
  _UNKNOWN **v20;
  uint8_t buf[8];
  char v22;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102175118);
  v5 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received request to query VO2Max retrocompute status", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102175118);
    v18[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "Received request to query VO2Max retrocompute status", v18, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVO2MaxRetrocomputeStatusQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "isServiceRunning:", CFSTR("CLVO2MaxService")))
  {
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLVO2MaxService"));
    objc_msgSend(v6, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3321888768;
    v16[2] = sub_100BAF100;
    v16[3] = &unk_102174EB0;
    v7 = (std::__shared_weak_count *)a2[1];
    v16[4] = *a2;
    v17 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    objc_msgSend(v6, "queryVO2MaxRetrocomputeStatusWithReply:", v16);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v13 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v19 = CMErrorMessage;
    v20 = &off_10221BD50;
    CLConnectionMessage::sendReply(v13, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
    if (v22 < 0)
      operator delete(*(void **)buf);
  }

}

void sub_100BAF0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t sub_100BAF100(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSNumber *v9;

  if (a2)
  {
    v6 = CMVO2MaxRetrocomputeRecord;
    v7 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
    v3 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v8 = CMErrorMessage;
    v9 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
    v3 = v4;
  }
  return CLConnectionMessage::sendReply(v3);
}

void sub_100BAF1D0(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  NSObject *v5;
  id v6;
  NSData *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  CLConnectionMessage *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSNumber *v25;
  int v26;
  id v27;
  uint8_t buf[4];
  id v29;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FF20 != -1)
    dispatch_once(&qword_10229FF20, &stru_102175138);
  v5 = qword_10229FF28;
  if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received request to write context configuration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102175138);
    LOWORD(v26) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "Received request to write context configuration", &v26, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageWriteContextConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v6 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CMContextConfigurationKey);
  v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v6), 1, 0);
  v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100BAF780;
  v21[3] = &unk_102155328;
  v21[4] = v7;
  objc_msgSend(v8, "doAsync:", v21);
  if (qword_10229FF20 != -1)
    dispatch_once(&qword_10229FF20, &stru_102175138);
  v9 = qword_10229FF28;
  if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Sent configuration to watch: %@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102175138);
    v26 = 138412290;
    v27 = v6;
    LODWORD(v20) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "Sent configuration to watch: %@", &v26, v20);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageWriteContextConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v10 = sub_100EFA98C();
  v11 = sub_100EFC074(v10, v6);
  if ((_DWORD)v11 == 100)
  {
    v12 = *a2;
    v22 = CMReturnCode;
    v23 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
  }
  else
  {
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102175138);
    v13 = qword_10229FF28;
    if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v29) = v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[Dynamic Config] Error on config insertion: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102175138);
      v26 = 67240192;
      LODWORD(v27) = v11;
      LODWORD(v20) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 16, "[Dynamic Config] Error on config insertion: %{public}d", &v26, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageWriteContextConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v12 = *a2;
    v24 = CMErrorMessage;
    v25 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v11);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  }
  CLConnectionMessage::sendReply(v12);

}

void sub_100BAF73C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100BAF780(uint64_t a1, uint64_t a2)
{
  return sub_10061F764(120.0, a2, 32, *(void **)(a1 + 32), 300, 0, 0, 0, 0, 0);
}

void sub_100BAF7C8(id *a1, uint64_t *a2)
{
  NSObject *v4;
  char v5;
  char v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _WORD v22[8];
  uint64_t v23;
  id v24;
  uint64_t v25;
  _UNKNOWN **v26;
  uint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29;
  _UNKNOWN **v30;
  uint8_t buf[8];
  char v32;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102175158);
  v4 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DaemonClient: Received request for ColdStorageQueryConfiguration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102175158);
    v22[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "DaemonClient: Received request for ColdStorageQueryConfiguration", v22, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageColdStorageQueryConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_1015A2E04(buf, "com.apple.locationd.cold-storage");
  v5 = (*((uint64_t (**)(id *, uint8_t *))*a1 + 5))(a1, buf);
  v6 = v5;
  if ((v32 & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_8;
LABEL_12:
    v10 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v29 = CMErrorMessage;
    v30 = &off_10221BD98;
    CLConnectionMessage::sendReply(v10, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
    goto LABEL_25;
  }
  operator delete(*(void **)buf);
  if ((v6 & 1) == 0)
    goto LABEL_12;
LABEL_8:
  v7 = objc_msgSend(objc_msgSend(a1[3], "vendor"), "proxyForService:", CFSTR("CMHealthColdStorageService"));
  if (v7)
  {
    v8 = objc_msgSend(v7, "syncgetFetchColdStorageConfiguration");
    if (v8)
    {
      v9 = *a2;
      v23 = CMColdStorageConfiguration;
      v24 = v8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
      CLConnectionMessage::sendReply(v9);
      return;
    }
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102175158);
    v13 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "DaemonClient: Failed to fetch configuration", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102175158);
      v22[0] = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "DaemonClient: Failed to fetch configuration", v22, v21);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageColdStorageQueryConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v14 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v25 = CMErrorMessage;
    v26 = &off_10221BCD8;
    CLConnectionMessage::sendReply(v14, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
  }
  else
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102175158);
    v11 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "DaemonClient: Request failed because ColdStorage Service not running", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102175158);
      v22[0] = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "DaemonClient: Request failed because ColdStorage Service not running", v22, v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageColdStorageQueryConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v12 = *a2;
    sub_1015A2E04(buf, "kCLConnectionMessageError");
    v27 = CMErrorMessage;
    v28 = &off_10221BD50;
    CLConnectionMessage::sendReply(v12, buf, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
  }
LABEL_25:
  if (v32 < 0)
    operator delete(*(void **)buf);
}

void sub_100BAFD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100BAFD94(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *Dictionary;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FF20 != -1)
    dispatch_once(&qword_10229FF20, &stru_102175138);
  v5 = qword_10229FF28;
  if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Collecting Metrics for function", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF20 != -1)
      dispatch_once(&qword_10229FF20, &stru_102175138);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 2, "Collecting Metrics for function", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageCollectMetricsForFunction(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(void **)(a1 + 48);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  sub_1007D11B4(v6, v7, Dictionary);

}

void sub_100BAFF64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100BAFF90(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1015A2E04(__p, "com.apple.developer.health.fall-detection");
  v2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_100BAFFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100BB000C(uint64_t a1, uint64_t a2)
{
  char *v3;
  double result;
  __int128 v5;
  uint64_t v6;

  v3 = (char *)-[__CFString UTF8String]((id)sub_100BAB0D8(a1), "UTF8String");
  sub_1015A2E04(&v5, v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_100BB0064(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _BYTE v14[32];
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1)
    && (CLConnection::getAuditToken(*(CLConnection **)(a1 + 264)),
        TCCAccessCheckAuditToken(CFSTR("kTCCServiceFallDetection"), v14, 0)))
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021750D8);
    v2 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client %@ did pass Fall Detection entitlement/tcc checks.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021750D8);
      v11 = *(_QWORD *)(a1 + 48);
      v15 = 138412290;
      v16 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Client %@ did pass Fall Detection entitlement/tcc checks.", &v15, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLDaemonClient::isAuthorizedForFallDetection()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 1;
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021750D8);
    v5 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Client %@ did not pass Fall Detection entitlement/tcc checks.", buf, 0xCu);
    }
    v7 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021750D8);
      v8 = *(_QWORD *)(a1 + 48);
      v15 = 138412290;
      v16 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "Client %@ did not pass Fall Detection entitlement/tcc checks.", &v15, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLDaemonClient::isAuthorizedForFallDetection()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100BB03C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

id sub_100BB03CC(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  double v5;
  int v6;
  int v7;
  int v8;
  _BOOL8 v9;
  _BYTE v11[8];
  double v12;
  double v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  char v17;
  audit_token_t v18;

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", CLConnection::getRemotePid(*(CLConnection **)(a1 + 264))), CFSTR("PID"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 48), "clientKey"), CFSTR("ClientKeyPath"));
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", -[CLClientKeyPath clientKey](sub_1001A4450(&v18), "clientKey"), CFSTR("NaturalConnectedIdentity"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72)), CFSTR("RegistrationSuccessful"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(sub_1007B6CB0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48)), "isValidCKP")), CFSTR("RegisteredInAuthDatabase"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 112)), CFSTR("AuthContext"));
  v3 = sub_100B9EB84(a1, (uint64_t)v11);
  if (v17)
  {
    v5 = v12;
    v4 = v13;
    v6 = v14;
    v7 = v15;
    v8 = v16;
    v9 = v11[0] != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v4 = INFINITY;
    v5 = INFINITY;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9, v3), CFSTR("Active"));
  if (v5 < INFINITY)
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5), CFSTR("DesiredAccuracy"));
  if (v4 < INFINITY)
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4), CFSTR("DistanceFilter"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6 != 0), CFSTR("BatchEnabled"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7 != 0), CFSTR("Spectator"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8 != 0), CFSTR("HasProcessAssertion"));
  return v2;
}

void sub_100BB0640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  CLConnectionMessage *v16;
  std::__shared_weak_count *v17;
  void *__p[2];
  uint64_t v19;

  v6 = (__int128 *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  if (*((char *)v6 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v19 = *((_QWORD *)v6 + 2);
    *(_OWORD *)__p = v7;
  }
  if (v19 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 32))(a1, v8, 1);
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = *(CLConnectionMessage **)a2;
  v17 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, CLConnectionMessage **, uint64_t, double))(*(_QWORD *)a1 + 16))(a1, &v16, a3, 0.0);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v19 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 32))(a1, v15, 0);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

void sub_100BB0778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_100261F44((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100BB07A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100BB0640(a1 - 8, a2, a3);
}

void sub_100BB07AC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100BB07D8(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100BB0804(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100BB0830(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_100BB085C(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100BB0888(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100BB08B4(id a1)
{
  qword_1022A01F8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

void sub_100BB08E0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100BB090C(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_100BB0938(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100BB0964(id a1)
{
  off_10229FFF8 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_100BB0990(id a1)
{
  qword_10229FDB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_100BB09BC(id a1)
{
  qword_10229FEA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_100BB09E8(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100BB0A14(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100BB0A40(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_100BB0A6C(id a1)
{
  qword_10229FF28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_100BB0A98(id a1)
{
  qword_10229FFA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

uint64_t sub_100BB0AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  uint64_t result;
  _QWORD *v17;
  _BYTE *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27[2];
  char v28;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          result = sub_10025A4CC(a1 + 32, i + 16, (unsigned __int8 *)a2);
          if ((result & 1) != 0)
            return result;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v17 = operator new(0x48uLL);
  v27[0] = (uint64_t)v17;
  v27[1] = a1 + 16;
  v28 = 0;
  *v17 = 0;
  v17[1] = v9;
  v18 = v17 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(v18, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)a2;
    v17[4] = *(_QWORD *)(a2 + 16);
  }
  sub_100BB0FD8((uint64_t)(v17 + 5), a3);
  v28 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_100BB0D64(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v27[0] = *v25;
    *v25 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10)
          v26 %= v10;
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27[0];
    }
  }
  v27[0] = 0;
  ++*v7;
  return (uint64_t)sub_100BB0F5C(v27);
}

void sub_100BB0D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BB0F5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100BB0D64(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_10025955C();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t *sub_100BB0F5C(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_10:
      operator delete((void *)v2);
      return a1;
    }
    v3 = *(_QWORD **)(v2 + 64);
    if (v3 == (_QWORD *)(v2 + 40))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 40);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_100BB0FD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_100BB103C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175188;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB109C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175188;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100BB110C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = off_102175188;
  sub_100270E34((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100BB1150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB1164(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102175188;
  return sub_100270E34((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_100BB1184(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB11B8(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB1208(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB12BC(a1 + 8, a2, a3);
}

uint64_t sub_100BB1210(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB124C()
{
}

uint64_t sub_100BB1258(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB12BC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB1344(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB132C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB1344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CLConnectionMessage *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2082;
    v33 = "activity";
    v34 = 2082;
    v35 = v9;
    v36 = 2050;
    v37 = a2;
    v38 = 1026;
    v39 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v11 = (char *)objc_msgSend(objc_msgSend(*(id *)(a2 + 48), "legacyClientKey"), "UTF8String");
    if (v11)
      v12 = v11;
    else
      v12 = "";
    sub_1015A2E04(buf, v12);
    sub_100BB15F8(a2, &v26);
    v13 = v26;
    v14 = *(std::__shared_weak_count **)(a3 + 8);
    v24 = *(CLConnectionMessage **)a3;
    v25 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = *(_QWORD *)(a1 + 24);
    if (!v17)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(_QWORD *)v17 + 48))(v17, v13, &v24);
    v18 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v27;
    if (v27)
    {
      v22 = (unint64_t *)&v27->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (SBYTE3(v33) < 0)
      operator delete(*(void **)buf);
  }
  os_activity_scope_leave(&state);
}

void sub_100BB15AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100BB15F8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  uint8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint8_t buf[8];
  _BYTE v38[32];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1 + 328;
  *(_QWORD *)buf = &v33;
  v5 = sub_1001AAD20(a1 + 328, (uint64_t *)&v33, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  v6 = (const void *)v5[3];
  v7 = (std::__shared_weak_count *)v5[4];
  v34 = (uint64_t)v6;
  v35 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    if (!v10)
    {
      sub_10191BDE8((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17, v29, v30, v31, v32, (uint64_t)v33, v34, (uint64_t)v35, v36, *(uint64_t *)buf, *(uint64_t *)v38, *(uint64_t *)&v38[8],
        *(uint64_t *)&v38[16],
        *(uint64_t *)&v38[24],
        v39,
        v40,
        v41);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h", 441, "getOrCreatePersistentSubscription");
      goto LABEL_26;
    }
    *a2 = (uint64_t)v10;
    a2[1] = (uint64_t)v7;
    if (v7)
    {
      v18 = (unint64_t *)&v7->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (v10[248])
      goto LABEL_18;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v20 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v21 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2114;
      *(_QWORD *)&v38[12] = v21;
      *(_WORD *)&v38[20] = 2082;
      *(_QWORD *)&v38[22] = (unint64_t)"17CLSLCSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid persistent subscription detected... getting a fresh one\", \"ClientKeyPath\":%{public, location:escape_only}@, \"subscription\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    sub_100261F44((uint64_t)a2);
  }
  sub_1007C6DA8(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 48), a2);
  v22 = *a2;
  *(_BYTE *)(v22 + 144) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v23 = *a2;
  v24 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v25 = v24;

  *(_QWORD *)(v23 + 152) = v24;
  if (!*a2 || !*(_BYTE *)(*a2 + 248))
  {
    sub_10191BC88(a2);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h", 454, "getOrCreatePersistentSubscription");
LABEL_26:
    __break(1u);
    return;
  }
  *(_QWORD *)buf = &v33;
  v26 = sub_1001AAD20(v4, (uint64_t *)&v33, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  sub_100349198(v26 + 3, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, a1 + 8);
LABEL_18:
  if (v7)
  {
    v27 = (unint64_t *)&v7->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_100BB18FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_100261F44(v6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100BB1930(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175218;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB1990(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175218;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100BB1A00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = off_102175218;
  sub_100270E34((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100BB1A44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB1A58(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102175218;
  return sub_100270E34((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_100BB1A78(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB1AAC(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB1AFC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB1BB0(a1 + 8, a2, a3);
}

uint64_t sub_100BB1B04(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB1B40()
{
}

uint64_t sub_100BB1B4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB1BB0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB1C38(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB1C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB1C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CLConnectionMessage *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2082;
    v33 = "activity";
    v34 = 2082;
    v35 = v9;
    v36 = 2050;
    v37 = a2;
    v38 = 1026;
    v39 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v11 = (char *)objc_msgSend(objc_msgSend(*(id *)(a2 + 48), "legacyClientKey"), "UTF8String");
    if (v11)
      v12 = v11;
    else
      v12 = "";
    sub_1015A2E04(buf, v12);
    sub_1001AA9E8((uint64_t *)a2, &v26);
    v13 = v26;
    v14 = *(std::__shared_weak_count **)(a3 + 8);
    v24 = *(CLConnectionMessage **)a3;
    v25 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = *(_QWORD *)(a1 + 24);
    if (!v17)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(_QWORD *)v17 + 48))(v17, v13, &v24);
    v18 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v27;
    if (v27)
    {
      v22 = (unint64_t *)&v27->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (SBYTE3(v33) < 0)
      operator delete(*(void **)buf);
  }
  os_activity_scope_leave(&state);
}

void sub_100BB1EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

_QWORD *sub_100BB1EEC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175298;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB1F4C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175298;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB1FBC(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175298;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB2014(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB2028(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175298;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB206C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB20A0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_100BB20F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB212C()
{
}

uint64_t sub_100BB2138(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB219C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_1001BB390(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB220C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB2224(uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[3];
    __p[3] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *sub_100BB2278(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175318;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB22D8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175318;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100BB2348(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = off_102175318;
  sub_100270E34((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100BB238C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB23A0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102175318;
  return sub_100270E34((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_100BB23C0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB23F4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB2444(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB24F8(a1 + 8, a2, a3);
}

uint64_t sub_100BB244C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB2488()
{
}

uint64_t sub_100BB2494(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB24F8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB2580(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB2568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB2580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CLConnectionMessage *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2082;
    v33 = "activity";
    v34 = 2082;
    v35 = v9;
    v36 = 2050;
    v37 = a2;
    v38 = 1026;
    v39 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v11 = (char *)objc_msgSend(objc_msgSend(*(id *)(a2 + 48), "legacyClientKey"), "UTF8String");
    if (v11)
      v12 = v11;
    else
      v12 = "";
    sub_1015A2E04(buf, v12);
    sub_100BB2834(a2, &v26);
    v13 = v26;
    v14 = *(std::__shared_weak_count **)(a3 + 8);
    v24 = *(CLConnectionMessage **)a3;
    v25 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = *(_QWORD *)(a1 + 24);
    if (!v17)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(_QWORD *)v17 + 48))(v17, v13, &v24);
    v18 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v27;
    if (v27)
    {
      v22 = (unint64_t *)&v27->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (SBYTE3(v33) < 0)
      operator delete(*(void **)buf);
  }
  os_activity_scope_leave(&state);
}

void sub_100BB27E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100BB2834(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  uint8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint8_t buf[8];
  _BYTE v38[32];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1 + 328;
  *(_QWORD *)buf = &v33;
  v5 = sub_1001AAD20(a1 + 328, (uint64_t *)&v33, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  v6 = (const void *)v5[3];
  v7 = (std::__shared_weak_count *)v5[4];
  v34 = (uint64_t)v6;
  v35 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    if (!v10)
    {
      sub_10191BDE8((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17, v29, v30, v31, v32, (uint64_t)v33, v34, (uint64_t)v35, v36, *(uint64_t *)buf, *(uint64_t *)v38, *(uint64_t *)&v38[8],
        *(uint64_t *)&v38[16],
        *(uint64_t *)&v38[24],
        v39,
        v40,
        v41);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h", 441, "getOrCreatePersistentSubscription");
      goto LABEL_26;
    }
    *a2 = (uint64_t)v10;
    a2[1] = (uint64_t)v7;
    if (v7)
    {
      v18 = (unint64_t *)&v7->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (v10[248])
      goto LABEL_18;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v20 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v21 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2114;
      *(_QWORD *)&v38[12] = v21;
      *(_WORD *)&v38[20] = 2082;
      *(_QWORD *)&v38[22] = (unint64_t)"18CLPushSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid persistent subscription detected... getting a fresh one\", \"ClientKeyPath\":%{public, location:escape_only}@, \"subscription\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    sub_100261F44((uint64_t)a2);
  }
  sub_1007F6670(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 48), a2);
  v22 = *a2;
  *(_BYTE *)(v22 + 144) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v23 = *a2;
  v24 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v25 = v24;

  *(_QWORD *)(v23 + 152) = v24;
  if (!*a2 || !*(_BYTE *)(*a2 + 248))
  {
    sub_10191BC88(a2);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h", 454, "getOrCreatePersistentSubscription");
LABEL_26:
    __break(1u);
    return;
  }
  *(_QWORD *)buf = &v33;
  v26 = sub_1001AAD20(v4, (uint64_t *)&v33, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  sub_100349198(v26 + 3, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, a1 + 8);
LABEL_18:
  if (v7)
  {
    v27 = (unint64_t *)&v7->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_100BB2B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_100261F44(v6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100BB2B6C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175398;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB2BCC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175398;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *sub_100BB2C3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = off_102175398;
  sub_100270E34((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100BB2C80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB2C94(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102175398;
  return sub_100270E34((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_100BB2CB4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB2CE8(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB2D38(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB2DEC(a1 + 8, a2, a3);
}

uint64_t sub_100BB2D40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB2D7C()
{
}

uint64_t sub_100BB2D88(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB2DEC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB2E74(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB2E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB2E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CLConnectionMessage *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    v30 = 2082;
    v31 = "";
    v32 = 2082;
    v33 = "activity";
    v34 = 2082;
    v35 = v9;
    v36 = 2050;
    v37 = a2;
    v38 = 1026;
    v39 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v11 = (char *)objc_msgSend(objc_msgSend(*(id *)(a2 + 48), "legacyClientKey"), "UTF8String");
    if (v11)
      v12 = v11;
    else
      v12 = "";
    sub_1015A2E04(buf, v12);
    sub_100BB3128(a2, &v26);
    v13 = v26;
    v14 = *(std::__shared_weak_count **)(a3 + 8);
    v24 = *(CLConnectionMessage **)a3;
    v25 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = *(_QWORD *)(a1 + 24);
    if (!v17)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(_QWORD *)v17 + 48))(v17, v13, &v24);
    v18 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v27;
    if (v27)
    {
      v22 = (unint64_t *)&v27->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (SBYTE3(v33) < 0)
      operator delete(*(void **)buf);
  }
  os_activity_scope_leave(&state);
}

void sub_100BB30DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100BB3128(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  uint8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint8_t buf[8];
  _BYTE v38[32];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1 + 328;
  *(_QWORD *)buf = &v33;
  v5 = sub_1001AAD20(a1 + 328, (uint64_t *)&v33, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  v6 = (const void *)v5[3];
  v7 = (std::__shared_weak_count *)v5[4];
  v34 = (uint64_t)v6;
  v35 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    if (!v10)
    {
      sub_10191BDE8((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17, v29, v30, v31, v32, (uint64_t)v33, v34, (uint64_t)v35, v36, *(uint64_t *)buf, *(uint64_t *)v38, *(uint64_t *)&v38[8],
        *(uint64_t *)&v38[16],
        *(uint64_t *)&v38[24],
        v39,
        v40,
        v41);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h", 441, "getOrCreatePersistentSubscription");
      goto LABEL_26;
    }
    *a2 = (uint64_t)v10;
    a2[1] = (uint64_t)v7;
    if (v7)
    {
      v18 = (unint64_t *)&v7->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (v10[248])
      goto LABEL_18;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v20 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v21 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2114;
      *(_QWORD *)&v38[12] = v21;
      *(_WORD *)&v38[20] = 2082;
      *(_QWORD *)&v38[22] = (unint64_t)"24CLTranscriptSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid persistent subscription detected... getting a fresh one\", \"ClientKeyPath\":%{public, location:escape_only}@, \"subscription\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    sub_100261F44((uint64_t)a2);
  }
  sub_1007F6DD4(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 48), a2);
  v22 = *a2;
  *(_BYTE *)(v22 + 144) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v23 = *a2;
  v24 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v25 = v24;

  *(_QWORD *)(v23 + 152) = v24;
  if (!*a2 || !*(_BYTE *)(*a2 + 248))
  {
    sub_10191BC88(a2);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h", 454, "getOrCreatePersistentSubscription");
LABEL_26:
    __break(1u);
    return;
  }
  *(_QWORD *)buf = &v33;
  v26 = sub_1001AAD20(v4, (uint64_t *)&v33, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  sub_100349198(v26 + 3, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, a1 + 8);
LABEL_18:
  if (v7)
  {
    v27 = (unint64_t *)&v7->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_100BB342C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_100261F44(v6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100BB3460(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175418;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB34C0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175418;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB3530(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175418;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB3588(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB359C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175418;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB35E0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB3614(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB3664(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB36B4(a1 + 8, a2, a3);
}

uint64_t sub_100BB366C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB36A8()
{
}

void sub_100BB36B4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB373C(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB3724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB373C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_1001AC114(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB393C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

_QWORD *sub_100BB3964(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175498;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB39C4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175498;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB3A34(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175498;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB3A8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB3AA0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175498;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB3AE4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB3B18(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_100BB3B68(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB3BA4()
{
}

uint64_t sub_100BB3BB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB3C14(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_1001B90A4(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB3C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100BB3C9C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175518;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB3CFC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175518;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB3D6C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175518;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB3DC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB3DD8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175518;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB3E1C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB3E50(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB3EA0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB3EF0(a1 + 8, a2, a3);
}

uint64_t sub_100BB3EA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB3EE4()
{
}

void sub_100BB3EF0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB3F78(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB3F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB3F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB41A0(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB4178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB41A0(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191C90C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"21CLRangingSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB4358()
{
  operator delete();
}

_QWORD *sub_100BB4384(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175598;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB43E4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175598;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB4454(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175598;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB44AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB44C0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175598;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB4504(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB4538(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB4588(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB463C(a1 + 8, a2, a3);
}

uint64_t sub_100BB4590(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB45CC()
{
}

uint64_t sub_100BB45D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB463C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB46C4(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB46AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB46C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB48EC(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB48C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB48EC(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191CBDC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = 0x8000000101C183B8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB4AC0()
{
  operator delete();
}

void sub_100BB4AF0(uint64_t a1)
{
  sub_10002FA68(a1);
  operator delete();
}

_QWORD *sub_100BB4B14(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175678;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB4B74(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175678;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB4BE4(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175678;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB4C3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB4C50(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175678;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB4C94(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB4CC8(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB4D18(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB4DCC(a1 + 8, a2, a3);
}

uint64_t sub_100BB4D20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB4D5C()
{
}

uint64_t sub_100BB4D68(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB4DCC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB4E54(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB4E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB4E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB507C(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB5054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB507C(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191CEAC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"28CLPlaceInferenceSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB5234()
{
  operator delete();
}

_QWORD *sub_100BB5260(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021756F8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB52C0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021756F8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB5330(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_1021756F8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB5388(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB539C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_1021756F8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB53E0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB5414(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB5464(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB54B4(a1 + 8, a2, a3);
}

uint64_t sub_100BB546C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB54A8()
{
}

void sub_100BB54B4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB553C(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB5524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB553C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB5764(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB5764(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191D17C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"25CLNatalimetrySubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB591C()
{
  operator delete();
}

_QWORD *sub_100BB5948(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175778;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB59A8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175778;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB5A18(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175778;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB5A70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB5A84(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175778;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB5AC8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB5AFC(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB5B4C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB5C00(a1 + 8, a2, a3);
}

uint64_t sub_100BB5B54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB5B90()
{
}

uint64_t sub_100BB5B9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB5C00(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB5C88(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB5C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB5C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB5EB0(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB5E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB5EB0(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191D44C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"28CLSedentaryTimerSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB6068()
{
  operator delete();
}

_QWORD *sub_100BB6094(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021757F8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB60F4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021757F8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB6164(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_1021757F8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB61BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB61D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_1021757F8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB6214(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB6248(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_100BB6298(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB62D4()
{
}

uint64_t sub_100BB62E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB6344(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_1001BB168(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB63B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100BB63CC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175878;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB642C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175878;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB649C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175878;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB64F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB6508(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175878;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB654C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB6580(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB65D0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB6620(a1 + 8, a2, a3);
}

uint64_t sub_100BB65D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB6614()
{
}

void sub_100BB6620(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB66A8(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB6690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB66A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB68D0(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB68A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB68D0(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191D9EC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"25CLMotionAlarmSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB6A88()
{
  operator delete();
}

_QWORD *sub_100BB6AB4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021758F8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB6B14(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021758F8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB6B84(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_1021758F8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB6BDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB6BF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_1021758F8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB6C34(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB6C68(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB6CB8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB6D6C(a1 + 8, a2, a3);
}

uint64_t sub_100BB6CC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB6CFC()
{
}

uint64_t sub_100BB6D08(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB6D6C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB6DF4(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB6DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB6DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB701C(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB6FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB701C(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191DCBC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"22CLOdometerSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB71D4()
{
  operator delete();
}

_QWORD *sub_100BB7200(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175978;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB7260(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175978;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB72D0(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175978;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB7328(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB733C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175978;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB7380(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB73B4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB7404(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB74B8(a1 + 8, a2, a3);
}

uint64_t sub_100BB740C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB7448()
{
}

uint64_t sub_100BB7454(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB74B8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB7540(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB7528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB7540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB7768(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB7740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB7768(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191DF8C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"28CLExerciseMinuteSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB7920()
{
  operator delete();
}

_QWORD *sub_100BB794C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021759F8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB79AC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021759F8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB7A1C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_1021759F8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB7A74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB7A88(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_1021759F8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB7ACC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB7B00(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB7B50(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB7BA0(a1 + 8, a2, a3);
}

uint64_t sub_100BB7B58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB7B94()
{
}

void sub_100BB7BA0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB7C28(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB7C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB7C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB7E50(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB7E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB7E50(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191E25C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"23CLElevationSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB8008()
{
  operator delete();
}

_QWORD *sub_100BB8034(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175A78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB8094(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175A78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB8104(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175A78;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB815C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB8170(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175A78;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB81B4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB81E8(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB8238(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB82EC(a1 + 8, a2, a3);
}

uint64_t sub_100BB8240(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB827C()
{
}

uint64_t sub_100BB8288(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB82EC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB8374(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB835C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB8374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB859C(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB8574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB859C(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191E52C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"18CLFallSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB8754()
{
  operator delete();
}

_QWORD *sub_100BB8780(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175AF8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB87E0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175AF8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB8850(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175AF8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB88A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB88BC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175AF8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB8900(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB8934(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB8984(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB89D4(a1 + 8, a2, a3);
}

uint64_t sub_100BB898C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB89C8()
{
}

void sub_100BB89D4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB8A5C(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB8A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB8A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB8C84(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB8C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB8C84(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191E7FC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"28CLMiLoConnectionSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB8E3C()
{
  operator delete();
}

_QWORD *sub_100BB8E68(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175B78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB8EC8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175B78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB8F38(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175B78;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB8F90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB8FA4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175B78;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB8FE8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB901C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_100BB906C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB90A8()
{
}

uint64_t sub_100BB90B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB9118(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_1001BAD3C(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB9188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100BB91A0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175BF8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB9200(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175BF8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB9270(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175BF8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB92C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB92DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175BF8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB9320(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB9354(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB93A4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB9458(a1 + 8, a2, a3);
}

uint64_t sub_100BB93AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB93E8()
{
}

uint64_t sub_100BB93F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB9458(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB94E0(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB94C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB94E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB9708(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB96E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB9708(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191ED9C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"21CLWorkoutSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BB98C0()
{
  operator delete();
}

_QWORD *sub_100BB98EC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175C78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BB994C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175C78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BB99BC(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175C78;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BB9A14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BB9A28(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175C78;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BB9A6C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BB9AA0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BB9AF0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB9BA4(a1 + 8, a2, a3);
}

uint64_t sub_100BB9AF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BB9B34()
{
}

uint64_t sub_100BB9B40(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BB9BA4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BB9C2C(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BB9C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BB9C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BB9E54(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BB9E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BB9E54(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191F06C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"25CLMotionStateSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBA00C()
{
  operator delete();
}

_QWORD *sub_100BBA038(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175CF8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBA098(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175CF8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBA108(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175CF8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBA160(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBA174(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175CF8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBA1B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBA1EC(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBA23C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBA28C(a1 + 8, a2, a3);
}

uint64_t sub_100BBA244(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBA280()
{
}

void sub_100BBA28C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBA314(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBA2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBA314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBA53C(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBA514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBA53C(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191F33C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"21CLSkiDataSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBA6F4()
{
  operator delete();
}

_QWORD *sub_100BBA720(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175D78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBA780(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175D78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBA7F0(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175D78;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBA848(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBA85C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175D78;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBA8A0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBA8D4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBA924(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBA9D8(a1 + 8, a2, a3);
}

uint64_t sub_100BBA92C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBA968()
{
}

uint64_t sub_100BBA974(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BBA9D8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBAA60(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBAA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBAA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBAC88(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBAC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBAC88(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191F60C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"22CLSwimDataSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBAE40()
{
  operator delete();
}

_QWORD *sub_100BBAE6C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175DF8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBAECC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175DF8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBAF3C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175DF8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBAF94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBAFA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175DF8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBAFEC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBB020(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBB070(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBB0C0(a1 + 8, a2, a3);
}

uint64_t sub_100BBB078(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBB0B4()
{
}

void sub_100BBB0C0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBB148(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBB130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBB148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBB370(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBB348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBB370(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191F8DC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"22CLSidebandSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBB528()
{
  operator delete();
}

_QWORD *sub_100BBB554(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175E78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBB5B4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175E78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBB624(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175E78;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBB67C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBB690(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175E78;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBB6D4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBB708(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBB758(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBB7A8(a1 + 8, a2, a3);
}

uint64_t sub_100BBB760(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBB79C()
{
}

void sub_100BBB7A8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBB830(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBB818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBB830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBBA58(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBBA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBBA58(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191FBAC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"21CLGestureSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBBC10()
{
  operator delete();
}

_QWORD *sub_100BBBC3C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175EF8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

